{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n  Copyright 2019-2022 StarkWare Industries Ltd.\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\").\r\n  You may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  https://www.starkware.co/open-source-license/\r\n\r\n  Unless required by applicable law or agreed to in writing,\r\n  software distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions\r\n  and limitations under the License.\r\n*/\r\n// ---------- The following code was auto-generated. PLEASE DO NOT EDIT. ----------\r\n// SPDX-License-Identifier: Apache-2.0.\r\npragma solidity ^0.6.12;\r\n\r\ncontract CpuConstraintPoly {\r\n    // The Memory map during the execution of this contract is as follows:\r\n    // [0x0, 0x20) - periodic_column/pedersen/points/x.\r\n    // [0x20, 0x40) - periodic_column/pedersen/points/y.\r\n    // [0x40, 0x60) - periodic_column/ecdsa/generator_points/x.\r\n    // [0x60, 0x80) - periodic_column/ecdsa/generator_points/y.\r\n    // [0x80, 0xa0) - trace_length.\r\n    // [0xa0, 0xc0) - offset_size.\r\n    // [0xc0, 0xe0) - half_offset_size.\r\n    // [0xe0, 0x100) - initial_ap.\r\n    // [0x100, 0x120) - initial_pc.\r\n    // [0x120, 0x140) - final_ap.\r\n    // [0x140, 0x160) - final_pc.\r\n    // [0x160, 0x180) - memory/multi_column_perm/perm/interaction_elm.\r\n    // [0x180, 0x1a0) - memory/multi_column_perm/hash_interaction_elm0.\r\n    // [0x1a0, 0x1c0) - memory/multi_column_perm/perm/public_memory_prod.\r\n    // [0x1c0, 0x1e0) - rc16/perm/interaction_elm.\r\n    // [0x1e0, 0x200) - rc16/perm/public_memory_prod.\r\n    // [0x200, 0x220) - rc_min.\r\n    // [0x220, 0x240) - rc_max.\r\n    // [0x240, 0x260) - pedersen/shift_point.x.\r\n    // [0x260, 0x280) - pedersen/shift_point.y.\r\n    // [0x280, 0x2a0) - initial_pedersen_addr.\r\n    // [0x2a0, 0x2c0) - initial_rc_addr.\r\n    // [0x2c0, 0x2e0) - ecdsa/sig_config.alpha.\r\n    // [0x2e0, 0x300) - ecdsa/sig_config.shift_point.x.\r\n    // [0x300, 0x320) - ecdsa/sig_config.shift_point.y.\r\n    // [0x320, 0x340) - ecdsa/sig_config.beta.\r\n    // [0x340, 0x360) - initial_ecdsa_addr.\r\n    // [0x360, 0x380) - trace_generator.\r\n    // [0x380, 0x3a0) - oods_point.\r\n    // [0x3a0, 0x400) - interaction_elements.\r\n    // [0x400, 0x1280) - coefficients.\r\n    // [0x1280, 0x2280) - oods_values.\r\n    // ----------------------- end of input data - -------------------------\r\n    // [0x2280, 0x22a0) - intermediate_value/cpu/decode/opcode_rc/bit_0.\r\n    // [0x22a0, 0x22c0) - intermediate_value/cpu/decode/opcode_rc/bit_2.\r\n    // [0x22c0, 0x22e0) - intermediate_value/cpu/decode/opcode_rc/bit_4.\r\n    // [0x22e0, 0x2300) - intermediate_value/cpu/decode/opcode_rc/bit_3.\r\n    // [0x2300, 0x2320) - intermediate_value/cpu/decode/flag_op1_base_op0_0.\r\n    // [0x2320, 0x2340) - intermediate_value/cpu/decode/opcode_rc/bit_5.\r\n    // [0x2340, 0x2360) - intermediate_value/cpu/decode/opcode_rc/bit_6.\r\n    // [0x2360, 0x2380) - intermediate_value/cpu/decode/opcode_rc/bit_9.\r\n    // [0x2380, 0x23a0) - intermediate_value/cpu/decode/flag_res_op1_0.\r\n    // [0x23a0, 0x23c0) - intermediate_value/cpu/decode/opcode_rc/bit_7.\r\n    // [0x23c0, 0x23e0) - intermediate_value/cpu/decode/opcode_rc/bit_8.\r\n    // [0x23e0, 0x2400) - intermediate_value/cpu/decode/flag_pc_update_regular_0.\r\n    // [0x2400, 0x2420) - intermediate_value/cpu/decode/opcode_rc/bit_12.\r\n    // [0x2420, 0x2440) - intermediate_value/cpu/decode/opcode_rc/bit_13.\r\n    // [0x2440, 0x2460) - intermediate_value/cpu/decode/fp_update_regular_0.\r\n    // [0x2460, 0x2480) - intermediate_value/cpu/decode/opcode_rc/bit_1.\r\n    // [0x2480, 0x24a0) - intermediate_value/npc_reg_0.\r\n    // [0x24a0, 0x24c0) - intermediate_value/cpu/decode/opcode_rc/bit_10.\r\n    // [0x24c0, 0x24e0) - intermediate_value/cpu/decode/opcode_rc/bit_11.\r\n    // [0x24e0, 0x2500) - intermediate_value/cpu/decode/opcode_rc/bit_14.\r\n    // [0x2500, 0x2520) - intermediate_value/memory/address_diff_0.\r\n    // [0x2520, 0x2540) - intermediate_value/rc16/diff_0.\r\n    // [0x2540, 0x2560) - intermediate_value/pedersen/hash0/ec_subset_sum/bit_0.\r\n    // [0x2560, 0x2580) - intermediate_value/pedersen/hash0/ec_subset_sum/bit_neg_0.\r\n    // [0x2580, 0x25a0) - intermediate_value/rc_builtin/value0_0.\r\n    // [0x25a0, 0x25c0) - intermediate_value/rc_builtin/value1_0.\r\n    // [0x25c0, 0x25e0) - intermediate_value/rc_builtin/value2_0.\r\n    // [0x25e0, 0x2600) - intermediate_value/rc_builtin/value3_0.\r\n    // [0x2600, 0x2620) - intermediate_value/rc_builtin/value4_0.\r\n    // [0x2620, 0x2640) - intermediate_value/rc_builtin/value5_0.\r\n    // [0x2640, 0x2660) - intermediate_value/rc_builtin/value6_0.\r\n    // [0x2660, 0x2680) - intermediate_value/rc_builtin/value7_0.\r\n    // [0x2680, 0x26a0) - intermediate_value/ecdsa/signature0/doubling_key/x_squared.\r\n    // [0x26a0, 0x26c0) - intermediate_value/ecdsa/signature0/exponentiate_generator/bit_0.\r\n    // [0x26c0, 0x26e0) - intermediate_value/ecdsa/signature0/exponentiate_generator/bit_neg_0.\r\n    // [0x26e0, 0x2700) - intermediate_value/ecdsa/signature0/exponentiate_key/bit_0.\r\n    // [0x2700, 0x2720) - intermediate_value/ecdsa/signature0/exponentiate_key/bit_neg_0.\r\n    // [0x2720, 0x29e0) - expmods.\r\n    // [0x29e0, 0x2ca0) - denominator_invs.\r\n    // [0x2ca0, 0x2f60) - denominators.\r\n    // [0x2f60, 0x30c0) - numerators.\r\n    // [0x30c0, 0x3180) - expmod_context.\r\n\r\n    fallback() external {\r\n        uint256 res;\r\n        assembly {\r\n            let PRIME := 0x800000000000011000000000000000000000000000000000000000000000001\r\n            // Copy input from calldata to memory.\r\n            calldatacopy(0x0, 0x0, /*Input data size*/ 0x2280)\r\n            let point := /*oods_point*/ mload(0x380)\r\n            function expmod(base, exponent, modulus) -> result {\r\n              let p := /*expmod_context*/ 0x30c0\r\n              mstore(p, 0x20)                 // Length of Base.\r\n              mstore(add(p, 0x20), 0x20)      // Length of Exponent.\r\n              mstore(add(p, 0x40), 0x20)      // Length of Modulus.\r\n              mstore(add(p, 0x60), base)      // Base.\r\n              mstore(add(p, 0x80), exponent)  // Exponent.\r\n              mstore(add(p, 0xa0), modulus)   // Modulus.\r\n              // Call modexp precompile.\r\n              if iszero(staticcall(not(0), 0x05, p, 0xc0, p, 0x20)) {\r\n                revert(0, 0)\r\n              }\r\n              result := mload(p)\r\n            }\r\n            {\r\n              // Prepare expmods for denominators and numerators.\r\n\r\n              // expmods[0] = point^trace_length.\r\n              mstore(0x2720, expmod(point, /*trace_length*/ mload(0x80), PRIME))\r\n\r\n              // expmods[1] = point^(trace_length / 16).\r\n              mstore(0x2740, expmod(point, div(/*trace_length*/ mload(0x80), 16), PRIME))\r\n\r\n              // expmods[2] = point^(trace_length / 2).\r\n              mstore(0x2760, expmod(point, div(/*trace_length*/ mload(0x80), 2), PRIME))\r\n\r\n              // expmods[3] = point^(trace_length / 8).\r\n              mstore(0x2780, expmod(point, div(/*trace_length*/ mload(0x80), 8), PRIME))\r\n\r\n              // expmods[4] = point^(trace_length / 4).\r\n              mstore(0x27a0, expmod(point, div(/*trace_length*/ mload(0x80), 4), PRIME))\r\n\r\n              // expmods[5] = point^(trace_length / 256).\r\n              mstore(0x27c0, expmod(point, div(/*trace_length*/ mload(0x80), 256), PRIME))\r\n\r\n              // expmods[6] = point^(trace_length / 512).\r\n              mstore(0x27e0, expmod(point, div(/*trace_length*/ mload(0x80), 512), PRIME))\r\n\r\n              // expmods[7] = point^(trace_length / 64).\r\n              mstore(0x2800, expmod(point, div(/*trace_length*/ mload(0x80), 64), PRIME))\r\n\r\n              // expmods[8] = point^(trace_length / 16384).\r\n              mstore(0x2820, expmod(point, div(/*trace_length*/ mload(0x80), 16384), PRIME))\r\n\r\n              // expmods[9] = point^(trace_length / 128).\r\n              mstore(0x2840, expmod(point, div(/*trace_length*/ mload(0x80), 128), PRIME))\r\n\r\n              // expmods[10] = point^(trace_length / 32768).\r\n              mstore(0x2860, expmod(point, div(/*trace_length*/ mload(0x80), 32768), PRIME))\r\n\r\n              // expmods[11] = trace_generator^(15 * trace_length / 16).\r\n              mstore(0x2880, expmod(/*trace_generator*/ mload(0x360), div(mul(15, /*trace_length*/ mload(0x80)), 16), PRIME))\r\n\r\n              // expmods[12] = trace_generator^(16 * (trace_length / 16 - 1)).\r\n              mstore(0x28a0, expmod(/*trace_generator*/ mload(0x360), mul(16, sub(div(/*trace_length*/ mload(0x80), 16), 1)), PRIME))\r\n\r\n              // expmods[13] = trace_generator^(2 * (trace_length / 2 - 1)).\r\n              mstore(0x28c0, expmod(/*trace_generator*/ mload(0x360), mul(2, sub(div(/*trace_length*/ mload(0x80), 2), 1)), PRIME))\r\n\r\n              // expmods[14] = trace_generator^(4 * (trace_length / 4 - 1)).\r\n              mstore(0x28e0, expmod(/*trace_generator*/ mload(0x360), mul(4, sub(div(/*trace_length*/ mload(0x80), 4), 1)), PRIME))\r\n\r\n              // expmods[15] = trace_generator^(255 * trace_length / 256).\r\n              mstore(0x2900, expmod(/*trace_generator*/ mload(0x360), div(mul(255, /*trace_length*/ mload(0x80)), 256), PRIME))\r\n\r\n              // expmods[16] = trace_generator^(63 * trace_length / 64).\r\n              mstore(0x2920, expmod(/*trace_generator*/ mload(0x360), div(mul(63, /*trace_length*/ mload(0x80)), 64), PRIME))\r\n\r\n              // expmods[17] = trace_generator^(trace_length / 2).\r\n              mstore(0x2940, expmod(/*trace_generator*/ mload(0x360), div(/*trace_length*/ mload(0x80), 2), PRIME))\r\n\r\n              // expmods[18] = trace_generator^(512 * (trace_length / 512 - 1)).\r\n              mstore(0x2960, expmod(/*trace_generator*/ mload(0x360), mul(512, sub(div(/*trace_length*/ mload(0x80), 512), 1)), PRIME))\r\n\r\n              // expmods[19] = trace_generator^(256 * (trace_length / 256 - 1)).\r\n              mstore(0x2980, expmod(/*trace_generator*/ mload(0x360), mul(256, sub(div(/*trace_length*/ mload(0x80), 256), 1)), PRIME))\r\n\r\n              // expmods[20] = trace_generator^(251 * trace_length / 256).\r\n              mstore(0x29a0, expmod(/*trace_generator*/ mload(0x360), div(mul(251, /*trace_length*/ mload(0x80)), 256), PRIME))\r\n\r\n              // expmods[21] = trace_generator^(32768 * (trace_length / 32768 - 1)).\r\n              mstore(0x29c0, expmod(/*trace_generator*/ mload(0x360), mul(32768, sub(div(/*trace_length*/ mload(0x80), 32768), 1)), PRIME))\r\n\r\n            }\r\n\r\n            {\r\n              // Prepare denominators for batch inverse.\r\n\r\n              // Denominator for constraints: 'cpu/decode/opcode_rc/bit', 'pedersen/hash0/ec_subset_sum/booleanity_test', 'pedersen/hash0/ec_subset_sum/add_points/slope', 'pedersen/hash0/ec_subset_sum/add_points/x', 'pedersen/hash0/ec_subset_sum/add_points/y', 'pedersen/hash0/ec_subset_sum/copy_point/x', 'pedersen/hash0/ec_subset_sum/copy_point/y'.\r\n              // denominators[0] = point^trace_length - 1.\r\n              mstore(0x2ca0,\r\n                     addmod(/*point^trace_length*/ mload(0x2720), sub(PRIME, 1), PRIME))\r\n\r\n              // Denominator for constraints: 'cpu/decode/opcode_rc/zero'.\r\n              // denominators[1] = point^(trace_length / 16) - trace_generator^(15 * trace_length / 16).\r\n              mstore(0x2cc0,\r\n                     addmod(\r\n                       /*point^(trace_length / 16)*/ mload(0x2740),\r\n                       sub(PRIME, /*trace_generator^(15 * trace_length / 16)*/ mload(0x2880)),\r\n                       PRIME))\r\n\r\n              // Denominator for constraints: 'cpu/decode/opcode_rc_input', 'cpu/decode/flag_op1_base_op0_bit', 'cpu/decode/flag_res_op1_bit', 'cpu/decode/flag_pc_update_regular_bit', 'cpu/decode/fp_update_regular_bit', 'cpu/operands/mem_dst_addr', 'cpu/operands/mem0_addr', 'cpu/operands/mem1_addr', 'cpu/operands/ops_mul', 'cpu/operands/res', 'cpu/update_registers/update_pc/tmp0', 'cpu/update_registers/update_pc/tmp1', 'cpu/update_registers/update_pc/pc_cond_negative', 'cpu/update_registers/update_pc/pc_cond_positive', 'cpu/update_registers/update_ap/ap_update', 'cpu/update_registers/update_fp/fp_update', 'cpu/opcodes/call/push_fp', 'cpu/opcodes/call/push_pc', 'cpu/opcodes/call/off0', 'cpu/opcodes/call/off1', 'cpu/opcodes/call/flags', 'cpu/opcodes/ret/off0', 'cpu/opcodes/ret/off2', 'cpu/opcodes/ret/flags', 'cpu/opcodes/assert_eq/assert_eq'.\r\n              // denominators[2] = point^(trace_length / 16) - 1.\r\n              mstore(0x2ce0,\r\n                     addmod(/*point^(trace_length / 16)*/ mload(0x2740), sub(PRIME, 1), PRIME))\r\n\r\n              // Denominator for constraints: 'initial_ap', 'initial_fp', 'initial_pc', 'memory/multi_column_perm/perm/init0', 'memory/initial_addr', 'rc16/perm/init0', 'rc16/minimum', 'pedersen/init_addr', 'rc_builtin/init_addr', 'ecdsa/init_addr'.\r\n              // denominators[3] = point - 1.\r\n              mstore(0x2d00,\r\n                     addmod(point, sub(PRIME, 1), PRIME))\r\n\r\n              // Denominator for constraints: 'final_ap', 'final_fp', 'final_pc'.\r\n              // denominators[4] = point - trace_generator^(16 * (trace_length / 16 - 1)).\r\n              mstore(0x2d20,\r\n                     addmod(\r\n                       point,\r\n                       sub(PRIME, /*trace_generator^(16 * (trace_length / 16 - 1))*/ mload(0x28a0)),\r\n                       PRIME))\r\n\r\n              // Denominator for constraints: 'memory/multi_column_perm/perm/step0', 'memory/diff_is_bit', 'memory/is_func'.\r\n              // denominators[5] = point^(trace_length / 2) - 1.\r\n              mstore(0x2d40,\r\n                     addmod(/*point^(trace_length / 2)*/ mload(0x2760), sub(PRIME, 1), PRIME))\r\n\r\n              // Denominator for constraints: 'memory/multi_column_perm/perm/last'.\r\n              // denominators[6] = point - trace_generator^(2 * (trace_length / 2 - 1)).\r\n              mstore(0x2d60,\r\n                     addmod(\r\n                       point,\r\n                       sub(PRIME, /*trace_generator^(2 * (trace_length / 2 - 1))*/ mload(0x28c0)),\r\n                       PRIME))\r\n\r\n              // Denominator for constraints: 'public_memory_addr_zero', 'public_memory_value_zero'.\r\n              // denominators[7] = point^(trace_length / 8) - 1.\r\n              mstore(0x2d80,\r\n                     addmod(/*point^(trace_length / 8)*/ mload(0x2780), sub(PRIME, 1), PRIME))\r\n\r\n              // Denominator for constraints: 'rc16/perm/step0', 'rc16/diff_is_bit'.\r\n              // denominators[8] = point^(trace_length / 4) - 1.\r\n              mstore(0x2da0,\r\n                     addmod(/*point^(trace_length / 4)*/ mload(0x27a0), sub(PRIME, 1), PRIME))\r\n\r\n              // Denominator for constraints: 'rc16/perm/last', 'rc16/maximum'.\r\n              // denominators[9] = point - trace_generator^(4 * (trace_length / 4 - 1)).\r\n              mstore(0x2dc0,\r\n                     addmod(\r\n                       point,\r\n                       sub(PRIME, /*trace_generator^(4 * (trace_length / 4 - 1))*/ mload(0x28e0)),\r\n                       PRIME))\r\n\r\n              // Denominator for constraints: 'pedersen/hash0/ec_subset_sum/bit_unpacking/last_one_is_zero', 'pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones0', 'pedersen/hash0/ec_subset_sum/bit_unpacking/cumulative_bit192', 'pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones192', 'pedersen/hash0/ec_subset_sum/bit_unpacking/cumulative_bit196', 'pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones196', 'pedersen/hash0/copy_point/x', 'pedersen/hash0/copy_point/y', 'rc_builtin/value', 'rc_builtin/addr_step'.\r\n              // denominators[10] = point^(trace_length / 256) - 1.\r\n              mstore(0x2de0,\r\n                     addmod(/*point^(trace_length / 256)*/ mload(0x27c0), sub(PRIME, 1), PRIME))\r\n\r\n              // Denominator for constraints: 'pedersen/hash0/ec_subset_sum/bit_extraction_end'.\r\n              // denominators[11] = point^(trace_length / 256) - trace_generator^(63 * trace_length / 64).\r\n              mstore(0x2e00,\r\n                     addmod(\r\n                       /*point^(trace_length / 256)*/ mload(0x27c0),\r\n                       sub(PRIME, /*trace_generator^(63 * trace_length / 64)*/ mload(0x2920)),\r\n                       PRIME))\r\n\r\n              // Denominator for constraints: 'pedersen/hash0/ec_subset_sum/zeros_tail'.\r\n              // denominators[12] = point^(trace_length / 256) - trace_generator^(255 * trace_length / 256).\r\n              mstore(0x2e20,\r\n                     addmod(\r\n                       /*point^(trace_length / 256)*/ mload(0x27c0),\r\n                       sub(PRIME, /*trace_generator^(255 * trace_length / 256)*/ mload(0x2900)),\r\n                       PRIME))\r\n\r\n              // Denominator for constraints: 'pedersen/hash0/init/x', 'pedersen/hash0/init/y', 'pedersen/input0_value0', 'pedersen/input0_addr', 'pedersen/input1_value0', 'pedersen/input1_addr', 'pedersen/output_value0', 'pedersen/output_addr'.\r\n              // denominators[13] = point^(trace_length / 512) - 1.\r\n              mstore(0x2e40,\r\n                     addmod(/*point^(trace_length / 512)*/ mload(0x27e0), sub(PRIME, 1), PRIME))\r\n\r\n              // Denominator for constraints: 'ecdsa/signature0/doubling_key/slope', 'ecdsa/signature0/doubling_key/x', 'ecdsa/signature0/doubling_key/y', 'ecdsa/signature0/exponentiate_key/booleanity_test', 'ecdsa/signature0/exponentiate_key/add_points/slope', 'ecdsa/signature0/exponentiate_key/add_points/x', 'ecdsa/signature0/exponentiate_key/add_points/y', 'ecdsa/signature0/exponentiate_key/add_points/x_diff_inv', 'ecdsa/signature0/exponentiate_key/copy_point/x', 'ecdsa/signature0/exponentiate_key/copy_point/y'.\r\n              // denominators[14] = point^(trace_length / 64) - 1.\r\n              mstore(0x2e60,\r\n                     addmod(/*point^(trace_length / 64)*/ mload(0x2800), sub(PRIME, 1), PRIME))\r\n\r\n              // Denominator for constraints: 'ecdsa/signature0/exponentiate_generator/booleanity_test', 'ecdsa/signature0/exponentiate_generator/add_points/slope', 'ecdsa/signature0/exponentiate_generator/add_points/x', 'ecdsa/signature0/exponentiate_generator/add_points/y', 'ecdsa/signature0/exponentiate_generator/add_points/x_diff_inv', 'ecdsa/signature0/exponentiate_generator/copy_point/x', 'ecdsa/signature0/exponentiate_generator/copy_point/y'.\r\n              // denominators[15] = point^(trace_length / 128) - 1.\r\n              mstore(0x2e80,\r\n                     addmod(/*point^(trace_length / 128)*/ mload(0x2840), sub(PRIME, 1), PRIME))\r\n\r\n              // Denominator for constraints: 'ecdsa/signature0/exponentiate_generator/bit_extraction_end'.\r\n              // denominators[16] = point^(trace_length / 32768) - trace_generator^(251 * trace_length / 256).\r\n              mstore(0x2ea0,\r\n                     addmod(\r\n                       /*point^(trace_length / 32768)*/ mload(0x2860),\r\n                       sub(PRIME, /*trace_generator^(251 * trace_length / 256)*/ mload(0x29a0)),\r\n                       PRIME))\r\n\r\n              // Denominator for constraints: 'ecdsa/signature0/exponentiate_generator/zeros_tail'.\r\n              // denominators[17] = point^(trace_length / 32768) - trace_generator^(255 * trace_length / 256).\r\n              mstore(0x2ec0,\r\n                     addmod(\r\n                       /*point^(trace_length / 32768)*/ mload(0x2860),\r\n                       sub(PRIME, /*trace_generator^(255 * trace_length / 256)*/ mload(0x2900)),\r\n                       PRIME))\r\n\r\n              // Denominator for constraints: 'ecdsa/signature0/exponentiate_key/bit_extraction_end'.\r\n              // denominators[18] = point^(trace_length / 16384) - trace_generator^(251 * trace_length / 256).\r\n              mstore(0x2ee0,\r\n                     addmod(\r\n                       /*point^(trace_length / 16384)*/ mload(0x2820),\r\n                       sub(PRIME, /*trace_generator^(251 * trace_length / 256)*/ mload(0x29a0)),\r\n                       PRIME))\r\n\r\n              // Denominator for constraints: 'ecdsa/signature0/exponentiate_key/zeros_tail'.\r\n              // denominators[19] = point^(trace_length / 16384) - trace_generator^(255 * trace_length / 256).\r\n              mstore(0x2f00,\r\n                     addmod(\r\n                       /*point^(trace_length / 16384)*/ mload(0x2820),\r\n                       sub(PRIME, /*trace_generator^(255 * trace_length / 256)*/ mload(0x2900)),\r\n                       PRIME))\r\n\r\n              // Denominator for constraints: 'ecdsa/signature0/init_gen/x', 'ecdsa/signature0/init_gen/y', 'ecdsa/signature0/add_results/slope', 'ecdsa/signature0/add_results/x', 'ecdsa/signature0/add_results/y', 'ecdsa/signature0/add_results/x_diff_inv', 'ecdsa/signature0/extract_r/slope', 'ecdsa/signature0/extract_r/x', 'ecdsa/signature0/extract_r/x_diff_inv', 'ecdsa/signature0/z_nonzero', 'ecdsa/signature0/q_on_curve/x_squared', 'ecdsa/signature0/q_on_curve/on_curve', 'ecdsa/message_addr', 'ecdsa/pubkey_addr', 'ecdsa/message_value0', 'ecdsa/pubkey_value0'.\r\n              // denominators[20] = point^(trace_length / 32768) - 1.\r\n              mstore(0x2f20,\r\n                     addmod(/*point^(trace_length / 32768)*/ mload(0x2860), sub(PRIME, 1), PRIME))\r\n\r\n              // Denominator for constraints: 'ecdsa/signature0/init_key/x', 'ecdsa/signature0/init_key/y', 'ecdsa/signature0/r_and_w_nonzero'.\r\n              // denominators[21] = point^(trace_length / 16384) - 1.\r\n              mstore(0x2f40,\r\n                     addmod(/*point^(trace_length / 16384)*/ mload(0x2820), sub(PRIME, 1), PRIME))\r\n\r\n            }\r\n\r\n            {\r\n              // Compute the inverses of the denominators into denominatorInvs using batch inverse.\r\n\r\n              // Start by computing the cumulative product.\r\n              // Let (d_0, d_1, d_2, ..., d_{n-1}) be the values in denominators. After this loop\r\n              // denominatorInvs will be (1, d_0, d_0 * d_1, ...) and prod will contain the value of\r\n              // d_0 * ... * d_{n-1}.\r\n              // Compute the offset between the partialProducts array and the input values array.\r\n              let productsToValuesOffset := 0x2c0\r\n              let prod := 1\r\n              let partialProductEndPtr := 0x2ca0\r\n              for { let partialProductPtr := 0x29e0 }\r\n                  lt(partialProductPtr, partialProductEndPtr)\r\n                  { partialProductPtr := add(partialProductPtr, 0x20) } {\r\n                  mstore(partialProductPtr, prod)\r\n                  // prod *= d_{i}.\r\n                  prod := mulmod(prod,\r\n                                 mload(add(partialProductPtr, productsToValuesOffset)),\r\n                                 PRIME)\r\n              }\r\n\r\n              let firstPartialProductPtr := 0x29e0\r\n              // Compute the inverse of the product.\r\n              let prodInv := expmod(prod, sub(PRIME, 2), PRIME)\r\n\r\n              if eq(prodInv, 0) {\r\n                  // Solidity generates reverts with reason that look as follows:\r\n                  // 1. 4 bytes with the constant 0x08c379a0 (== Keccak256(b'Error(string)')[:4]).\r\n                  // 2. 32 bytes offset bytes (always 0x20 as far as i can tell).\r\n                  // 3. 32 bytes with the length of the revert reason.\r\n                  // 4. Revert reason string.\r\n\r\n                  mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\r\n                  mstore(0x4, 0x20)\r\n                  mstore(0x24, 0x1e)\r\n                  mstore(0x44, \"Batch inverse product is zero.\")\r\n                  revert(0, 0x62)\r\n              }\r\n\r\n              // Compute the inverses.\r\n              // Loop over denominator_invs in reverse order.\r\n              // currentPartialProductPtr is initialized to one past the end.\r\n              let currentPartialProductPtr := 0x2ca0\r\n              for { } gt(currentPartialProductPtr, firstPartialProductPtr) { } {\r\n                  currentPartialProductPtr := sub(currentPartialProductPtr, 0x20)\r\n                  // Store 1/d_{i} = (d_0 * ... * d_{i-1}) * 1/(d_0 * ... * d_{i}).\r\n                  mstore(currentPartialProductPtr,\r\n                         mulmod(mload(currentPartialProductPtr), prodInv, PRIME))\r\n                  // Update prodInv to be 1/(d_0 * ... * d_{i-1}) by multiplying by d_i.\r\n                  prodInv := mulmod(prodInv,\r\n                                     mload(add(currentPartialProductPtr, productsToValuesOffset)),\r\n                                     PRIME)\r\n              }\r\n            }\r\n\r\n            {\r\n              // Compute numerators.\r\n\r\n              // Numerator for constraints 'cpu/decode/opcode_rc/bit'.\r\n              // numerators[0] = point^(trace_length / 16) - trace_generator^(15 * trace_length / 16).\r\n              mstore(0x2f60,\r\n                     addmod(\r\n                       /*point^(trace_length / 16)*/ mload(0x2740),\r\n                       sub(PRIME, /*trace_generator^(15 * trace_length / 16)*/ mload(0x2880)),\r\n                       PRIME))\r\n\r\n              // Numerator for constraints 'cpu/update_registers/update_pc/tmp0', 'cpu/update_registers/update_pc/tmp1', 'cpu/update_registers/update_pc/pc_cond_negative', 'cpu/update_registers/update_pc/pc_cond_positive', 'cpu/update_registers/update_ap/ap_update', 'cpu/update_registers/update_fp/fp_update'.\r\n              // numerators[1] = point - trace_generator^(16 * (trace_length / 16 - 1)).\r\n              mstore(0x2f80,\r\n                     addmod(\r\n                       point,\r\n                       sub(PRIME, /*trace_generator^(16 * (trace_length / 16 - 1))*/ mload(0x28a0)),\r\n                       PRIME))\r\n\r\n              // Numerator for constraints 'memory/multi_column_perm/perm/step0', 'memory/diff_is_bit', 'memory/is_func'.\r\n              // numerators[2] = point - trace_generator^(2 * (trace_length / 2 - 1)).\r\n              mstore(0x2fa0,\r\n                     addmod(\r\n                       point,\r\n                       sub(PRIME, /*trace_generator^(2 * (trace_length / 2 - 1))*/ mload(0x28c0)),\r\n                       PRIME))\r\n\r\n              // Numerator for constraints 'rc16/perm/step0', 'rc16/diff_is_bit'.\r\n              // numerators[3] = point - trace_generator^(4 * (trace_length / 4 - 1)).\r\n              mstore(0x2fc0,\r\n                     addmod(\r\n                       point,\r\n                       sub(PRIME, /*trace_generator^(4 * (trace_length / 4 - 1))*/ mload(0x28e0)),\r\n                       PRIME))\r\n\r\n              // Numerator for constraints 'pedersen/hash0/ec_subset_sum/booleanity_test', 'pedersen/hash0/ec_subset_sum/add_points/slope', 'pedersen/hash0/ec_subset_sum/add_points/x', 'pedersen/hash0/ec_subset_sum/add_points/y', 'pedersen/hash0/ec_subset_sum/copy_point/x', 'pedersen/hash0/ec_subset_sum/copy_point/y'.\r\n              // numerators[4] = point^(trace_length / 256) - trace_generator^(255 * trace_length / 256).\r\n              mstore(0x2fe0,\r\n                     addmod(\r\n                       /*point^(trace_length / 256)*/ mload(0x27c0),\r\n                       sub(PRIME, /*trace_generator^(255 * trace_length / 256)*/ mload(0x2900)),\r\n                       PRIME))\r\n\r\n              // Numerator for constraints 'pedersen/hash0/copy_point/x', 'pedersen/hash0/copy_point/y'.\r\n              // numerators[5] = point^(trace_length / 512) - trace_generator^(trace_length / 2).\r\n              mstore(0x3000,\r\n                     addmod(\r\n                       /*point^(trace_length / 512)*/ mload(0x27e0),\r\n                       sub(PRIME, /*trace_generator^(trace_length / 2)*/ mload(0x2940)),\r\n                       PRIME))\r\n\r\n              // Numerator for constraints 'pedersen/input0_addr'.\r\n              // numerators[6] = point - trace_generator^(512 * (trace_length / 512 - 1)).\r\n              mstore(0x3020,\r\n                     addmod(\r\n                       point,\r\n                       sub(PRIME, /*trace_generator^(512 * (trace_length / 512 - 1))*/ mload(0x2960)),\r\n                       PRIME))\r\n\r\n              // Numerator for constraints 'rc_builtin/addr_step'.\r\n              // numerators[7] = point - trace_generator^(256 * (trace_length / 256 - 1)).\r\n              mstore(0x3040,\r\n                     addmod(\r\n                       point,\r\n                       sub(PRIME, /*trace_generator^(256 * (trace_length / 256 - 1))*/ mload(0x2980)),\r\n                       PRIME))\r\n\r\n              // Numerator for constraints 'ecdsa/signature0/doubling_key/slope', 'ecdsa/signature0/doubling_key/x', 'ecdsa/signature0/doubling_key/y', 'ecdsa/signature0/exponentiate_key/booleanity_test', 'ecdsa/signature0/exponentiate_key/add_points/slope', 'ecdsa/signature0/exponentiate_key/add_points/x', 'ecdsa/signature0/exponentiate_key/add_points/y', 'ecdsa/signature0/exponentiate_key/add_points/x_diff_inv', 'ecdsa/signature0/exponentiate_key/copy_point/x', 'ecdsa/signature0/exponentiate_key/copy_point/y'.\r\n              // numerators[8] = point^(trace_length / 16384) - trace_generator^(255 * trace_length / 256).\r\n              mstore(0x3060,\r\n                     addmod(\r\n                       /*point^(trace_length / 16384)*/ mload(0x2820),\r\n                       sub(PRIME, /*trace_generator^(255 * trace_length / 256)*/ mload(0x2900)),\r\n                       PRIME))\r\n\r\n              // Numerator for constraints 'ecdsa/signature0/exponentiate_generator/booleanity_test', 'ecdsa/signature0/exponentiate_generator/add_points/slope', 'ecdsa/signature0/exponentiate_generator/add_points/x', 'ecdsa/signature0/exponentiate_generator/add_points/y', 'ecdsa/signature0/exponentiate_generator/add_points/x_diff_inv', 'ecdsa/signature0/exponentiate_generator/copy_point/x', 'ecdsa/signature0/exponentiate_generator/copy_point/y'.\r\n              // numerators[9] = point^(trace_length / 32768) - trace_generator^(255 * trace_length / 256).\r\n              mstore(0x3080,\r\n                     addmod(\r\n                       /*point^(trace_length / 32768)*/ mload(0x2860),\r\n                       sub(PRIME, /*trace_generator^(255 * trace_length / 256)*/ mload(0x2900)),\r\n                       PRIME))\r\n\r\n              // Numerator for constraints 'ecdsa/pubkey_addr'.\r\n              // numerators[10] = point - trace_generator^(32768 * (trace_length / 32768 - 1)).\r\n              mstore(0x30a0,\r\n                     addmod(\r\n                       point,\r\n                       sub(PRIME, /*trace_generator^(32768 * (trace_length / 32768 - 1))*/ mload(0x29c0)),\r\n                       PRIME))\r\n\r\n            }\r\n\r\n            {\r\n              // Compute the result of the composition polynomial.\r\n\r\n              {\r\n              // cpu/decode/opcode_rc/bit_0 = column0_row0 - (column0_row1 + column0_row1).\r\n              let val := addmod(\r\n                /*column0_row0*/ mload(0x1280),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(/*column0_row1*/ mload(0x12a0), /*column0_row1*/ mload(0x12a0), PRIME)),\r\n                PRIME)\r\n              mstore(0x2280, val)\r\n              }\r\n\r\n\r\n              {\r\n              // cpu/decode/opcode_rc/bit_2 = column0_row2 - (column0_row3 + column0_row3).\r\n              let val := addmod(\r\n                /*column0_row2*/ mload(0x12c0),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(/*column0_row3*/ mload(0x12e0), /*column0_row3*/ mload(0x12e0), PRIME)),\r\n                PRIME)\r\n              mstore(0x22a0, val)\r\n              }\r\n\r\n\r\n              {\r\n              // cpu/decode/opcode_rc/bit_4 = column0_row4 - (column0_row5 + column0_row5).\r\n              let val := addmod(\r\n                /*column0_row4*/ mload(0x1300),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(/*column0_row5*/ mload(0x1320), /*column0_row5*/ mload(0x1320), PRIME)),\r\n                PRIME)\r\n              mstore(0x22c0, val)\r\n              }\r\n\r\n\r\n              {\r\n              // cpu/decode/opcode_rc/bit_3 = column0_row3 - (column0_row4 + column0_row4).\r\n              let val := addmod(\r\n                /*column0_row3*/ mload(0x12e0),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(/*column0_row4*/ mload(0x1300), /*column0_row4*/ mload(0x1300), PRIME)),\r\n                PRIME)\r\n              mstore(0x22e0, val)\r\n              }\r\n\r\n\r\n              {\r\n              // cpu/decode/flag_op1_base_op0_0 = 1 - (cpu__decode__opcode_rc__bit_2 + cpu__decode__opcode_rc__bit_4 + cpu__decode__opcode_rc__bit_3).\r\n              let val := addmod(\r\n                1,\r\n                sub(\r\n                  PRIME,\r\n                  addmod(\r\n                    addmod(\r\n                      /*intermediate_value/cpu/decode/opcode_rc/bit_2*/ mload(0x22a0),\r\n                      /*intermediate_value/cpu/decode/opcode_rc/bit_4*/ mload(0x22c0),\r\n                      PRIME),\r\n                    /*intermediate_value/cpu/decode/opcode_rc/bit_3*/ mload(0x22e0),\r\n                    PRIME)),\r\n                PRIME)\r\n              mstore(0x2300, val)\r\n              }\r\n\r\n\r\n              {\r\n              // cpu/decode/opcode_rc/bit_5 = column0_row5 - (column0_row6 + column0_row6).\r\n              let val := addmod(\r\n                /*column0_row5*/ mload(0x1320),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(/*column0_row6*/ mload(0x1340), /*column0_row6*/ mload(0x1340), PRIME)),\r\n                PRIME)\r\n              mstore(0x2320, val)\r\n              }\r\n\r\n\r\n              {\r\n              // cpu/decode/opcode_rc/bit_6 = column0_row6 - (column0_row7 + column0_row7).\r\n              let val := addmod(\r\n                /*column0_row6*/ mload(0x1340),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(/*column0_row7*/ mload(0x1360), /*column0_row7*/ mload(0x1360), PRIME)),\r\n                PRIME)\r\n              mstore(0x2340, val)\r\n              }\r\n\r\n\r\n              {\r\n              // cpu/decode/opcode_rc/bit_9 = column0_row9 - (column0_row10 + column0_row10).\r\n              let val := addmod(\r\n                /*column0_row9*/ mload(0x13a0),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(/*column0_row10*/ mload(0x13c0), /*column0_row10*/ mload(0x13c0), PRIME)),\r\n                PRIME)\r\n              mstore(0x2360, val)\r\n              }\r\n\r\n\r\n              {\r\n              // cpu/decode/flag_res_op1_0 = 1 - (cpu__decode__opcode_rc__bit_5 + cpu__decode__opcode_rc__bit_6 + cpu__decode__opcode_rc__bit_9).\r\n              let val := addmod(\r\n                1,\r\n                sub(\r\n                  PRIME,\r\n                  addmod(\r\n                    addmod(\r\n                      /*intermediate_value/cpu/decode/opcode_rc/bit_5*/ mload(0x2320),\r\n                      /*intermediate_value/cpu/decode/opcode_rc/bit_6*/ mload(0x2340),\r\n                      PRIME),\r\n                    /*intermediate_value/cpu/decode/opcode_rc/bit_9*/ mload(0x2360),\r\n                    PRIME)),\r\n                PRIME)\r\n              mstore(0x2380, val)\r\n              }\r\n\r\n\r\n              {\r\n              // cpu/decode/opcode_rc/bit_7 = column0_row7 - (column0_row8 + column0_row8).\r\n              let val := addmod(\r\n                /*column0_row7*/ mload(0x1360),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(/*column0_row8*/ mload(0x1380), /*column0_row8*/ mload(0x1380), PRIME)),\r\n                PRIME)\r\n              mstore(0x23a0, val)\r\n              }\r\n\r\n\r\n              {\r\n              // cpu/decode/opcode_rc/bit_8 = column0_row8 - (column0_row9 + column0_row9).\r\n              let val := addmod(\r\n                /*column0_row8*/ mload(0x1380),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(/*column0_row9*/ mload(0x13a0), /*column0_row9*/ mload(0x13a0), PRIME)),\r\n                PRIME)\r\n              mstore(0x23c0, val)\r\n              }\r\n\r\n\r\n              {\r\n              // cpu/decode/flag_pc_update_regular_0 = 1 - (cpu__decode__opcode_rc__bit_7 + cpu__decode__opcode_rc__bit_8 + cpu__decode__opcode_rc__bit_9).\r\n              let val := addmod(\r\n                1,\r\n                sub(\r\n                  PRIME,\r\n                  addmod(\r\n                    addmod(\r\n                      /*intermediate_value/cpu/decode/opcode_rc/bit_7*/ mload(0x23a0),\r\n                      /*intermediate_value/cpu/decode/opcode_rc/bit_8*/ mload(0x23c0),\r\n                      PRIME),\r\n                    /*intermediate_value/cpu/decode/opcode_rc/bit_9*/ mload(0x2360),\r\n                    PRIME)),\r\n                PRIME)\r\n              mstore(0x23e0, val)\r\n              }\r\n\r\n\r\n              {\r\n              // cpu/decode/opcode_rc/bit_12 = column0_row12 - (column0_row13 + column0_row13).\r\n              let val := addmod(\r\n                /*column0_row12*/ mload(0x1400),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(/*column0_row13*/ mload(0x1420), /*column0_row13*/ mload(0x1420), PRIME)),\r\n                PRIME)\r\n              mstore(0x2400, val)\r\n              }\r\n\r\n\r\n              {\r\n              // cpu/decode/opcode_rc/bit_13 = column0_row13 - (column0_row14 + column0_row14).\r\n              let val := addmod(\r\n                /*column0_row13*/ mload(0x1420),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(/*column0_row14*/ mload(0x1440), /*column0_row14*/ mload(0x1440), PRIME)),\r\n                PRIME)\r\n              mstore(0x2420, val)\r\n              }\r\n\r\n\r\n              {\r\n              // cpu/decode/fp_update_regular_0 = 1 - (cpu__decode__opcode_rc__bit_12 + cpu__decode__opcode_rc__bit_13).\r\n              let val := addmod(\r\n                1,\r\n                sub(\r\n                  PRIME,\r\n                  addmod(\r\n                    /*intermediate_value/cpu/decode/opcode_rc/bit_12*/ mload(0x2400),\r\n                    /*intermediate_value/cpu/decode/opcode_rc/bit_13*/ mload(0x2420),\r\n                    PRIME)),\r\n                PRIME)\r\n              mstore(0x2440, val)\r\n              }\r\n\r\n\r\n              {\r\n              // cpu/decode/opcode_rc/bit_1 = column0_row1 - (column0_row2 + column0_row2).\r\n              let val := addmod(\r\n                /*column0_row1*/ mload(0x12a0),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(/*column0_row2*/ mload(0x12c0), /*column0_row2*/ mload(0x12c0), PRIME)),\r\n                PRIME)\r\n              mstore(0x2460, val)\r\n              }\r\n\r\n\r\n              {\r\n              // npc_reg_0 = column5_row0 + cpu__decode__opcode_rc__bit_2 + 1.\r\n              let val := addmod(\r\n                addmod(\r\n                  /*column5_row0*/ mload(0x1700),\r\n                  /*intermediate_value/cpu/decode/opcode_rc/bit_2*/ mload(0x22a0),\r\n                  PRIME),\r\n                1,\r\n                PRIME)\r\n              mstore(0x2480, val)\r\n              }\r\n\r\n\r\n              {\r\n              // cpu/decode/opcode_rc/bit_10 = column0_row10 - (column0_row11 + column0_row11).\r\n              let val := addmod(\r\n                /*column0_row10*/ mload(0x13c0),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(/*column0_row11*/ mload(0x13e0), /*column0_row11*/ mload(0x13e0), PRIME)),\r\n                PRIME)\r\n              mstore(0x24a0, val)\r\n              }\r\n\r\n\r\n              {\r\n              // cpu/decode/opcode_rc/bit_11 = column0_row11 - (column0_row12 + column0_row12).\r\n              let val := addmod(\r\n                /*column0_row11*/ mload(0x13e0),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(/*column0_row12*/ mload(0x1400), /*column0_row12*/ mload(0x1400), PRIME)),\r\n                PRIME)\r\n              mstore(0x24c0, val)\r\n              }\r\n\r\n\r\n              {\r\n              // cpu/decode/opcode_rc/bit_14 = column0_row14 - (column0_row15 + column0_row15).\r\n              let val := addmod(\r\n                /*column0_row14*/ mload(0x1440),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(/*column0_row15*/ mload(0x1460), /*column0_row15*/ mload(0x1460), PRIME)),\r\n                PRIME)\r\n              mstore(0x24e0, val)\r\n              }\r\n\r\n\r\n              {\r\n              // memory/address_diff_0 = column6_row2 - column6_row0.\r\n              let val := addmod(/*column6_row2*/ mload(0x1a80), sub(PRIME, /*column6_row0*/ mload(0x1a40)), PRIME)\r\n              mstore(0x2500, val)\r\n              }\r\n\r\n\r\n              {\r\n              // rc16/diff_0 = column7_row6 - column7_row2.\r\n              let val := addmod(/*column7_row6*/ mload(0x1b80), sub(PRIME, /*column7_row2*/ mload(0x1b00)), PRIME)\r\n              mstore(0x2520, val)\r\n              }\r\n\r\n\r\n              {\r\n              // pedersen/hash0/ec_subset_sum/bit_0 = column4_row0 - (column4_row1 + column4_row1).\r\n              let val := addmod(\r\n                /*column4_row0*/ mload(0x15e0),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(/*column4_row1*/ mload(0x1600), /*column4_row1*/ mload(0x1600), PRIME)),\r\n                PRIME)\r\n              mstore(0x2540, val)\r\n              }\r\n\r\n\r\n              {\r\n              // pedersen/hash0/ec_subset_sum/bit_neg_0 = 1 - pedersen__hash0__ec_subset_sum__bit_0.\r\n              let val := addmod(\r\n                1,\r\n                sub(PRIME, /*intermediate_value/pedersen/hash0/ec_subset_sum/bit_0*/ mload(0x2540)),\r\n                PRIME)\r\n              mstore(0x2560, val)\r\n              }\r\n\r\n\r\n              {\r\n              // rc_builtin/value0_0 = column7_row12.\r\n              let val := /*column7_row12*/ mload(0x1c20)\r\n              mstore(0x2580, val)\r\n              }\r\n\r\n\r\n              {\r\n              // rc_builtin/value1_0 = rc_builtin__value0_0 * offset_size + column7_row44.\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*intermediate_value/rc_builtin/value0_0*/ mload(0x2580),\r\n                  /*offset_size*/ mload(0xa0),\r\n                  PRIME),\r\n                /*column7_row44*/ mload(0x1d20),\r\n                PRIME)\r\n              mstore(0x25a0, val)\r\n              }\r\n\r\n\r\n              {\r\n              // rc_builtin/value2_0 = rc_builtin__value1_0 * offset_size + column7_row76.\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*intermediate_value/rc_builtin/value1_0*/ mload(0x25a0),\r\n                  /*offset_size*/ mload(0xa0),\r\n                  PRIME),\r\n                /*column7_row76*/ mload(0x1dc0),\r\n                PRIME)\r\n              mstore(0x25c0, val)\r\n              }\r\n\r\n\r\n              {\r\n              // rc_builtin/value3_0 = rc_builtin__value2_0 * offset_size + column7_row108.\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*intermediate_value/rc_builtin/value2_0*/ mload(0x25c0),\r\n                  /*offset_size*/ mload(0xa0),\r\n                  PRIME),\r\n                /*column7_row108*/ mload(0x1e40),\r\n                PRIME)\r\n              mstore(0x25e0, val)\r\n              }\r\n\r\n\r\n              {\r\n              // rc_builtin/value4_0 = rc_builtin__value3_0 * offset_size + column7_row140.\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*intermediate_value/rc_builtin/value3_0*/ mload(0x25e0),\r\n                  /*offset_size*/ mload(0xa0),\r\n                  PRIME),\r\n                /*column7_row140*/ mload(0x1e80),\r\n                PRIME)\r\n              mstore(0x2600, val)\r\n              }\r\n\r\n\r\n              {\r\n              // rc_builtin/value5_0 = rc_builtin__value4_0 * offset_size + column7_row172.\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*intermediate_value/rc_builtin/value4_0*/ mload(0x2600),\r\n                  /*offset_size*/ mload(0xa0),\r\n                  PRIME),\r\n                /*column7_row172*/ mload(0x1ea0),\r\n                PRIME)\r\n              mstore(0x2620, val)\r\n              }\r\n\r\n\r\n              {\r\n              // rc_builtin/value6_0 = rc_builtin__value5_0 * offset_size + column7_row204.\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*intermediate_value/rc_builtin/value5_0*/ mload(0x2620),\r\n                  /*offset_size*/ mload(0xa0),\r\n                  PRIME),\r\n                /*column7_row204*/ mload(0x1ec0),\r\n                PRIME)\r\n              mstore(0x2640, val)\r\n              }\r\n\r\n\r\n              {\r\n              // rc_builtin/value7_0 = rc_builtin__value6_0 * offset_size + column7_row236.\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*intermediate_value/rc_builtin/value6_0*/ mload(0x2640),\r\n                  /*offset_size*/ mload(0xa0),\r\n                  PRIME),\r\n                /*column7_row236*/ mload(0x1ee0),\r\n                PRIME)\r\n              mstore(0x2660, val)\r\n              }\r\n\r\n\r\n              {\r\n              // ecdsa/signature0/doubling_key/x_squared = column7_row7 * column7_row7.\r\n              let val := mulmod(/*column7_row7*/ mload(0x1ba0), /*column7_row7*/ mload(0x1ba0), PRIME)\r\n              mstore(0x2680, val)\r\n              }\r\n\r\n\r\n              {\r\n              // ecdsa/signature0/exponentiate_generator/bit_0 = column8_row96 - (column8_row224 + column8_row224).\r\n              let val := addmod(\r\n                /*column8_row96*/ mload(0x2100),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(/*column8_row224*/ mload(0x2160), /*column8_row224*/ mload(0x2160), PRIME)),\r\n                PRIME)\r\n              mstore(0x26a0, val)\r\n              }\r\n\r\n\r\n              {\r\n              // ecdsa/signature0/exponentiate_generator/bit_neg_0 = 1 - ecdsa__signature0__exponentiate_generator__bit_0.\r\n              let val := addmod(\r\n                1,\r\n                sub(\r\n                  PRIME,\r\n                  /*intermediate_value/ecdsa/signature0/exponentiate_generator/bit_0*/ mload(0x26a0)),\r\n                PRIME)\r\n              mstore(0x26c0, val)\r\n              }\r\n\r\n\r\n              {\r\n              // ecdsa/signature0/exponentiate_key/bit_0 = column7_row31 - (column7_row95 + column7_row95).\r\n              let val := addmod(\r\n                /*column7_row31*/ mload(0x1ce0),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(/*column7_row95*/ mload(0x1e00), /*column7_row95*/ mload(0x1e00), PRIME)),\r\n                PRIME)\r\n              mstore(0x26e0, val)\r\n              }\r\n\r\n\r\n              {\r\n              // ecdsa/signature0/exponentiate_key/bit_neg_0 = 1 - ecdsa__signature0__exponentiate_key__bit_0.\r\n              let val := addmod(\r\n                1,\r\n                sub(\r\n                  PRIME,\r\n                  /*intermediate_value/ecdsa/signature0/exponentiate_key/bit_0*/ mload(0x26e0)),\r\n                PRIME)\r\n              mstore(0x2700, val)\r\n              }\r\n\r\n\r\n              {\r\n              // Constraint expression for cpu/decode/opcode_rc/bit: cpu__decode__opcode_rc__bit_0 * cpu__decode__opcode_rc__bit_0 - cpu__decode__opcode_rc__bit_0.\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*intermediate_value/cpu/decode/opcode_rc/bit_0*/ mload(0x2280),\r\n                  /*intermediate_value/cpu/decode/opcode_rc/bit_0*/ mload(0x2280),\r\n                  PRIME),\r\n                sub(PRIME, /*intermediate_value/cpu/decode/opcode_rc/bit_0*/ mload(0x2280)),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 16) - trace_generator^(15 * trace_length / 16).\r\n              // val *= numerators[0].\r\n              val := mulmod(val, mload(0x2f60), PRIME)\r\n              // Denominator: point^trace_length - 1.\r\n              // val *= denominator_invs[0].\r\n              val := mulmod(val, mload(0x29e0), PRIME)\r\n\r\n              // res += val * coefficients[0].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[0]*/ mload(0x400), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/decode/opcode_rc/zero: column0_row0.\r\n              let val := /*column0_row0*/ mload(0x1280)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16) - trace_generator^(15 * trace_length / 16).\r\n              // val *= denominator_invs[1].\r\n              val := mulmod(val, mload(0x2a00), PRIME)\r\n\r\n              // res += val * coefficients[1].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[1]*/ mload(0x420), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/decode/opcode_rc_input: column5_row1 - (((column0_row0 * offset_size + column7_row4) * offset_size + column7_row8) * offset_size + column7_row0).\r\n              let val := addmod(\r\n                /*column5_row1*/ mload(0x1720),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(\r\n                    mulmod(\r\n                      addmod(\r\n                        mulmod(\r\n                          addmod(\r\n                            mulmod(/*column0_row0*/ mload(0x1280), /*offset_size*/ mload(0xa0), PRIME),\r\n                            /*column7_row4*/ mload(0x1b40),\r\n                            PRIME),\r\n                          /*offset_size*/ mload(0xa0),\r\n                          PRIME),\r\n                        /*column7_row8*/ mload(0x1bc0),\r\n                        PRIME),\r\n                      /*offset_size*/ mload(0xa0),\r\n                      PRIME),\r\n                    /*column7_row0*/ mload(0x1ac0),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[2].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[2]*/ mload(0x440), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/decode/flag_op1_base_op0_bit: cpu__decode__flag_op1_base_op0_0 * cpu__decode__flag_op1_base_op0_0 - cpu__decode__flag_op1_base_op0_0.\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*intermediate_value/cpu/decode/flag_op1_base_op0_0*/ mload(0x2300),\r\n                  /*intermediate_value/cpu/decode/flag_op1_base_op0_0*/ mload(0x2300),\r\n                  PRIME),\r\n                sub(PRIME, /*intermediate_value/cpu/decode/flag_op1_base_op0_0*/ mload(0x2300)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[3].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[3]*/ mload(0x460), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/decode/flag_res_op1_bit: cpu__decode__flag_res_op1_0 * cpu__decode__flag_res_op1_0 - cpu__decode__flag_res_op1_0.\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*intermediate_value/cpu/decode/flag_res_op1_0*/ mload(0x2380),\r\n                  /*intermediate_value/cpu/decode/flag_res_op1_0*/ mload(0x2380),\r\n                  PRIME),\r\n                sub(PRIME, /*intermediate_value/cpu/decode/flag_res_op1_0*/ mload(0x2380)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[4].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[4]*/ mload(0x480), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/decode/flag_pc_update_regular_bit: cpu__decode__flag_pc_update_regular_0 * cpu__decode__flag_pc_update_regular_0 - cpu__decode__flag_pc_update_regular_0.\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*intermediate_value/cpu/decode/flag_pc_update_regular_0*/ mload(0x23e0),\r\n                  /*intermediate_value/cpu/decode/flag_pc_update_regular_0*/ mload(0x23e0),\r\n                  PRIME),\r\n                sub(PRIME, /*intermediate_value/cpu/decode/flag_pc_update_regular_0*/ mload(0x23e0)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[5].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[5]*/ mload(0x4a0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/decode/fp_update_regular_bit: cpu__decode__fp_update_regular_0 * cpu__decode__fp_update_regular_0 - cpu__decode__fp_update_regular_0.\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*intermediate_value/cpu/decode/fp_update_regular_0*/ mload(0x2440),\r\n                  /*intermediate_value/cpu/decode/fp_update_regular_0*/ mload(0x2440),\r\n                  PRIME),\r\n                sub(PRIME, /*intermediate_value/cpu/decode/fp_update_regular_0*/ mload(0x2440)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[6].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[6]*/ mload(0x4c0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/operands/mem_dst_addr: column5_row8 + half_offset_size - (cpu__decode__opcode_rc__bit_0 * column7_row9 + (1 - cpu__decode__opcode_rc__bit_0) * column7_row1 + column7_row0).\r\n              let val := addmod(\r\n                addmod(/*column5_row8*/ mload(0x1800), /*half_offset_size*/ mload(0xc0), PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(\r\n                    addmod(\r\n                      mulmod(\r\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_0*/ mload(0x2280),\r\n                        /*column7_row9*/ mload(0x1be0),\r\n                        PRIME),\r\n                      mulmod(\r\n                        addmod(\r\n                          1,\r\n                          sub(PRIME, /*intermediate_value/cpu/decode/opcode_rc/bit_0*/ mload(0x2280)),\r\n                          PRIME),\r\n                        /*column7_row1*/ mload(0x1ae0),\r\n                        PRIME),\r\n                      PRIME),\r\n                    /*column7_row0*/ mload(0x1ac0),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[7].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[7]*/ mload(0x4e0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/operands/mem0_addr: column5_row4 + half_offset_size - (cpu__decode__opcode_rc__bit_1 * column7_row9 + (1 - cpu__decode__opcode_rc__bit_1) * column7_row1 + column7_row8).\r\n              let val := addmod(\r\n                addmod(/*column5_row4*/ mload(0x1780), /*half_offset_size*/ mload(0xc0), PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(\r\n                    addmod(\r\n                      mulmod(\r\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_1*/ mload(0x2460),\r\n                        /*column7_row9*/ mload(0x1be0),\r\n                        PRIME),\r\n                      mulmod(\r\n                        addmod(\r\n                          1,\r\n                          sub(PRIME, /*intermediate_value/cpu/decode/opcode_rc/bit_1*/ mload(0x2460)),\r\n                          PRIME),\r\n                        /*column7_row1*/ mload(0x1ae0),\r\n                        PRIME),\r\n                      PRIME),\r\n                    /*column7_row8*/ mload(0x1bc0),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[8].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[8]*/ mload(0x500), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/operands/mem1_addr: column5_row12 + half_offset_size - (cpu__decode__opcode_rc__bit_2 * column5_row0 + cpu__decode__opcode_rc__bit_4 * column7_row1 + cpu__decode__opcode_rc__bit_3 * column7_row9 + cpu__decode__flag_op1_base_op0_0 * column5_row5 + column7_row4).\r\n              let val := addmod(\r\n                addmod(/*column5_row12*/ mload(0x1840), /*half_offset_size*/ mload(0xc0), PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(\r\n                    addmod(\r\n                      addmod(\r\n                        addmod(\r\n                          mulmod(\r\n                            /*intermediate_value/cpu/decode/opcode_rc/bit_2*/ mload(0x22a0),\r\n                            /*column5_row0*/ mload(0x1700),\r\n                            PRIME),\r\n                          mulmod(\r\n                            /*intermediate_value/cpu/decode/opcode_rc/bit_4*/ mload(0x22c0),\r\n                            /*column7_row1*/ mload(0x1ae0),\r\n                            PRIME),\r\n                          PRIME),\r\n                        mulmod(\r\n                          /*intermediate_value/cpu/decode/opcode_rc/bit_3*/ mload(0x22e0),\r\n                          /*column7_row9*/ mload(0x1be0),\r\n                          PRIME),\r\n                        PRIME),\r\n                      mulmod(\r\n                        /*intermediate_value/cpu/decode/flag_op1_base_op0_0*/ mload(0x2300),\r\n                        /*column5_row5*/ mload(0x17a0),\r\n                        PRIME),\r\n                      PRIME),\r\n                    /*column7_row4*/ mload(0x1b40),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[9].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[9]*/ mload(0x520), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/operands/ops_mul: column7_row5 - column5_row5 * column5_row13.\r\n              let val := addmod(\r\n                /*column7_row5*/ mload(0x1b60),\r\n                sub(\r\n                  PRIME,\r\n                  mulmod(/*column5_row5*/ mload(0x17a0), /*column5_row13*/ mload(0x1860), PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[10].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[10]*/ mload(0x540), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/operands/res: (1 - cpu__decode__opcode_rc__bit_9) * column7_row13 - (cpu__decode__opcode_rc__bit_5 * (column5_row5 + column5_row13) + cpu__decode__opcode_rc__bit_6 * column7_row5 + cpu__decode__flag_res_op1_0 * column5_row13).\r\n              let val := addmod(\r\n                mulmod(\r\n                  addmod(\r\n                    1,\r\n                    sub(PRIME, /*intermediate_value/cpu/decode/opcode_rc/bit_9*/ mload(0x2360)),\r\n                    PRIME),\r\n                  /*column7_row13*/ mload(0x1c40),\r\n                  PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(\r\n                    addmod(\r\n                      mulmod(\r\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_5*/ mload(0x2320),\r\n                        addmod(/*column5_row5*/ mload(0x17a0), /*column5_row13*/ mload(0x1860), PRIME),\r\n                        PRIME),\r\n                      mulmod(\r\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_6*/ mload(0x2340),\r\n                        /*column7_row5*/ mload(0x1b60),\r\n                        PRIME),\r\n                      PRIME),\r\n                    mulmod(\r\n                      /*intermediate_value/cpu/decode/flag_res_op1_0*/ mload(0x2380),\r\n                      /*column5_row13*/ mload(0x1860),\r\n                      PRIME),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[11].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[11]*/ mload(0x560), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/update_registers/update_pc/tmp0: column7_row3 - cpu__decode__opcode_rc__bit_9 * column5_row9.\r\n              let val := addmod(\r\n                /*column7_row3*/ mload(0x1b20),\r\n                sub(\r\n                  PRIME,\r\n                  mulmod(\r\n                    /*intermediate_value/cpu/decode/opcode_rc/bit_9*/ mload(0x2360),\r\n                    /*column5_row9*/ mload(0x1820),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: point - trace_generator^(16 * (trace_length / 16 - 1)).\r\n              // val *= numerators[1].\r\n              val := mulmod(val, mload(0x2f80), PRIME)\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[12].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[12]*/ mload(0x580), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/update_registers/update_pc/tmp1: column7_row11 - column7_row3 * column7_row13.\r\n              let val := addmod(\r\n                /*column7_row11*/ mload(0x1c00),\r\n                sub(\r\n                  PRIME,\r\n                  mulmod(/*column7_row3*/ mload(0x1b20), /*column7_row13*/ mload(0x1c40), PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: point - trace_generator^(16 * (trace_length / 16 - 1)).\r\n              // val *= numerators[1].\r\n              val := mulmod(val, mload(0x2f80), PRIME)\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[13].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[13]*/ mload(0x5a0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/update_registers/update_pc/pc_cond_negative: (1 - cpu__decode__opcode_rc__bit_9) * column5_row16 + column7_row3 * (column5_row16 - (column5_row0 + column5_row13)) - (cpu__decode__flag_pc_update_regular_0 * npc_reg_0 + cpu__decode__opcode_rc__bit_7 * column7_row13 + cpu__decode__opcode_rc__bit_8 * (column5_row0 + column7_row13)).\r\n              let val := addmod(\r\n                addmod(\r\n                  mulmod(\r\n                    addmod(\r\n                      1,\r\n                      sub(PRIME, /*intermediate_value/cpu/decode/opcode_rc/bit_9*/ mload(0x2360)),\r\n                      PRIME),\r\n                    /*column5_row16*/ mload(0x1880),\r\n                    PRIME),\r\n                  mulmod(\r\n                    /*column7_row3*/ mload(0x1b20),\r\n                    addmod(\r\n                      /*column5_row16*/ mload(0x1880),\r\n                      sub(\r\n                        PRIME,\r\n                        addmod(/*column5_row0*/ mload(0x1700), /*column5_row13*/ mload(0x1860), PRIME)),\r\n                      PRIME),\r\n                    PRIME),\r\n                  PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(\r\n                    addmod(\r\n                      mulmod(\r\n                        /*intermediate_value/cpu/decode/flag_pc_update_regular_0*/ mload(0x23e0),\r\n                        /*intermediate_value/npc_reg_0*/ mload(0x2480),\r\n                        PRIME),\r\n                      mulmod(\r\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_7*/ mload(0x23a0),\r\n                        /*column7_row13*/ mload(0x1c40),\r\n                        PRIME),\r\n                      PRIME),\r\n                    mulmod(\r\n                      /*intermediate_value/cpu/decode/opcode_rc/bit_8*/ mload(0x23c0),\r\n                      addmod(/*column5_row0*/ mload(0x1700), /*column7_row13*/ mload(0x1c40), PRIME),\r\n                      PRIME),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: point - trace_generator^(16 * (trace_length / 16 - 1)).\r\n              // val *= numerators[1].\r\n              val := mulmod(val, mload(0x2f80), PRIME)\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[14].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[14]*/ mload(0x5c0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/update_registers/update_pc/pc_cond_positive: (column7_row11 - cpu__decode__opcode_rc__bit_9) * (column5_row16 - npc_reg_0).\r\n              let val := mulmod(\r\n                addmod(\r\n                  /*column7_row11*/ mload(0x1c00),\r\n                  sub(PRIME, /*intermediate_value/cpu/decode/opcode_rc/bit_9*/ mload(0x2360)),\r\n                  PRIME),\r\n                addmod(\r\n                  /*column5_row16*/ mload(0x1880),\r\n                  sub(PRIME, /*intermediate_value/npc_reg_0*/ mload(0x2480)),\r\n                  PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: point - trace_generator^(16 * (trace_length / 16 - 1)).\r\n              // val *= numerators[1].\r\n              val := mulmod(val, mload(0x2f80), PRIME)\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[15].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[15]*/ mload(0x5e0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/update_registers/update_ap/ap_update: column7_row17 - (column7_row1 + cpu__decode__opcode_rc__bit_10 * column7_row13 + cpu__decode__opcode_rc__bit_11 + cpu__decode__opcode_rc__bit_12 * 2).\r\n              let val := addmod(\r\n                /*column7_row17*/ mload(0x1c80),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(\r\n                    addmod(\r\n                      addmod(\r\n                        /*column7_row1*/ mload(0x1ae0),\r\n                        mulmod(\r\n                          /*intermediate_value/cpu/decode/opcode_rc/bit_10*/ mload(0x24a0),\r\n                          /*column7_row13*/ mload(0x1c40),\r\n                          PRIME),\r\n                        PRIME),\r\n                      /*intermediate_value/cpu/decode/opcode_rc/bit_11*/ mload(0x24c0),\r\n                      PRIME),\r\n                    mulmod(/*intermediate_value/cpu/decode/opcode_rc/bit_12*/ mload(0x2400), 2, PRIME),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: point - trace_generator^(16 * (trace_length / 16 - 1)).\r\n              // val *= numerators[1].\r\n              val := mulmod(val, mload(0x2f80), PRIME)\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[16].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[16]*/ mload(0x600), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/update_registers/update_fp/fp_update: column7_row25 - (cpu__decode__fp_update_regular_0 * column7_row9 + cpu__decode__opcode_rc__bit_13 * column5_row9 + cpu__decode__opcode_rc__bit_12 * (column7_row1 + 2)).\r\n              let val := addmod(\r\n                /*column7_row25*/ mload(0x1cc0),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(\r\n                    addmod(\r\n                      mulmod(\r\n                        /*intermediate_value/cpu/decode/fp_update_regular_0*/ mload(0x2440),\r\n                        /*column7_row9*/ mload(0x1be0),\r\n                        PRIME),\r\n                      mulmod(\r\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_13*/ mload(0x2420),\r\n                        /*column5_row9*/ mload(0x1820),\r\n                        PRIME),\r\n                      PRIME),\r\n                    mulmod(\r\n                      /*intermediate_value/cpu/decode/opcode_rc/bit_12*/ mload(0x2400),\r\n                      addmod(/*column7_row1*/ mload(0x1ae0), 2, PRIME),\r\n                      PRIME),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: point - trace_generator^(16 * (trace_length / 16 - 1)).\r\n              // val *= numerators[1].\r\n              val := mulmod(val, mload(0x2f80), PRIME)\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[17].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[17]*/ mload(0x620), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/opcodes/call/push_fp: cpu__decode__opcode_rc__bit_12 * (column5_row9 - column7_row9).\r\n              let val := mulmod(\r\n                /*intermediate_value/cpu/decode/opcode_rc/bit_12*/ mload(0x2400),\r\n                addmod(/*column5_row9*/ mload(0x1820), sub(PRIME, /*column7_row9*/ mload(0x1be0)), PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[18].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[18]*/ mload(0x640), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/opcodes/call/push_pc: cpu__decode__opcode_rc__bit_12 * (column5_row5 - (column5_row0 + cpu__decode__opcode_rc__bit_2 + 1)).\r\n              let val := mulmod(\r\n                /*intermediate_value/cpu/decode/opcode_rc/bit_12*/ mload(0x2400),\r\n                addmod(\r\n                  /*column5_row5*/ mload(0x17a0),\r\n                  sub(\r\n                    PRIME,\r\n                    addmod(\r\n                      addmod(\r\n                        /*column5_row0*/ mload(0x1700),\r\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_2*/ mload(0x22a0),\r\n                        PRIME),\r\n                      1,\r\n                      PRIME)),\r\n                  PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[19].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[19]*/ mload(0x660), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/opcodes/call/off0: cpu__decode__opcode_rc__bit_12 * (column7_row0 - half_offset_size).\r\n              let val := mulmod(\r\n                /*intermediate_value/cpu/decode/opcode_rc/bit_12*/ mload(0x2400),\r\n                addmod(/*column7_row0*/ mload(0x1ac0), sub(PRIME, /*half_offset_size*/ mload(0xc0)), PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[20].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[20]*/ mload(0x680), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/opcodes/call/off1: cpu__decode__opcode_rc__bit_12 * (column7_row8 - (half_offset_size + 1)).\r\n              let val := mulmod(\r\n                /*intermediate_value/cpu/decode/opcode_rc/bit_12*/ mload(0x2400),\r\n                addmod(\r\n                  /*column7_row8*/ mload(0x1bc0),\r\n                  sub(PRIME, addmod(/*half_offset_size*/ mload(0xc0), 1, PRIME)),\r\n                  PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[21].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[21]*/ mload(0x6a0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/opcodes/call/flags: cpu__decode__opcode_rc__bit_12 * (cpu__decode__opcode_rc__bit_12 + cpu__decode__opcode_rc__bit_12 + 1 + 1 - (cpu__decode__opcode_rc__bit_0 + cpu__decode__opcode_rc__bit_1 + 4)).\r\n              let val := mulmod(\r\n                /*intermediate_value/cpu/decode/opcode_rc/bit_12*/ mload(0x2400),\r\n                addmod(\r\n                  addmod(\r\n                    addmod(\r\n                      addmod(\r\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_12*/ mload(0x2400),\r\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_12*/ mload(0x2400),\r\n                        PRIME),\r\n                      1,\r\n                      PRIME),\r\n                    1,\r\n                    PRIME),\r\n                  sub(\r\n                    PRIME,\r\n                    addmod(\r\n                      addmod(\r\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_0*/ mload(0x2280),\r\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_1*/ mload(0x2460),\r\n                        PRIME),\r\n                      4,\r\n                      PRIME)),\r\n                  PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[22].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[22]*/ mload(0x6c0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/opcodes/ret/off0: cpu__decode__opcode_rc__bit_13 * (column7_row0 + 2 - half_offset_size).\r\n              let val := mulmod(\r\n                /*intermediate_value/cpu/decode/opcode_rc/bit_13*/ mload(0x2420),\r\n                addmod(\r\n                  addmod(/*column7_row0*/ mload(0x1ac0), 2, PRIME),\r\n                  sub(PRIME, /*half_offset_size*/ mload(0xc0)),\r\n                  PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[23].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[23]*/ mload(0x6e0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/opcodes/ret/off2: cpu__decode__opcode_rc__bit_13 * (column7_row4 + 1 - half_offset_size).\r\n              let val := mulmod(\r\n                /*intermediate_value/cpu/decode/opcode_rc/bit_13*/ mload(0x2420),\r\n                addmod(\r\n                  addmod(/*column7_row4*/ mload(0x1b40), 1, PRIME),\r\n                  sub(PRIME, /*half_offset_size*/ mload(0xc0)),\r\n                  PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[24].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[24]*/ mload(0x700), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/opcodes/ret/flags: cpu__decode__opcode_rc__bit_13 * (cpu__decode__opcode_rc__bit_7 + cpu__decode__opcode_rc__bit_0 + cpu__decode__opcode_rc__bit_3 + cpu__decode__flag_res_op1_0 - 4).\r\n              let val := mulmod(\r\n                /*intermediate_value/cpu/decode/opcode_rc/bit_13*/ mload(0x2420),\r\n                addmod(\r\n                  addmod(\r\n                    addmod(\r\n                      addmod(\r\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_7*/ mload(0x23a0),\r\n                        /*intermediate_value/cpu/decode/opcode_rc/bit_0*/ mload(0x2280),\r\n                        PRIME),\r\n                      /*intermediate_value/cpu/decode/opcode_rc/bit_3*/ mload(0x22e0),\r\n                      PRIME),\r\n                    /*intermediate_value/cpu/decode/flag_res_op1_0*/ mload(0x2380),\r\n                    PRIME),\r\n                  sub(PRIME, 4),\r\n                  PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[25].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[25]*/ mload(0x720), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for cpu/opcodes/assert_eq/assert_eq: cpu__decode__opcode_rc__bit_14 * (column5_row9 - column7_row13).\r\n              let val := mulmod(\r\n                /*intermediate_value/cpu/decode/opcode_rc/bit_14*/ mload(0x24e0),\r\n                addmod(/*column5_row9*/ mload(0x1820), sub(PRIME, /*column7_row13*/ mload(0x1c40)), PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16) - 1.\r\n              // val *= denominator_invs[2].\r\n              val := mulmod(val, mload(0x2a20), PRIME)\r\n\r\n              // res += val * coefficients[26].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[26]*/ mload(0x740), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for initial_ap: column7_row1 - initial_ap.\r\n              let val := addmod(/*column7_row1*/ mload(0x1ae0), sub(PRIME, /*initial_ap*/ mload(0xe0)), PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point - 1.\r\n              // val *= denominator_invs[3].\r\n              val := mulmod(val, mload(0x2a40), PRIME)\r\n\r\n              // res += val * coefficients[27].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[27]*/ mload(0x760), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for initial_fp: column7_row9 - initial_ap.\r\n              let val := addmod(/*column7_row9*/ mload(0x1be0), sub(PRIME, /*initial_ap*/ mload(0xe0)), PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point - 1.\r\n              // val *= denominator_invs[3].\r\n              val := mulmod(val, mload(0x2a40), PRIME)\r\n\r\n              // res += val * coefficients[28].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[28]*/ mload(0x780), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for initial_pc: column5_row0 - initial_pc.\r\n              let val := addmod(/*column5_row0*/ mload(0x1700), sub(PRIME, /*initial_pc*/ mload(0x100)), PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point - 1.\r\n              // val *= denominator_invs[3].\r\n              val := mulmod(val, mload(0x2a40), PRIME)\r\n\r\n              // res += val * coefficients[29].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[29]*/ mload(0x7a0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for final_ap: column7_row1 - final_ap.\r\n              let val := addmod(/*column7_row1*/ mload(0x1ae0), sub(PRIME, /*final_ap*/ mload(0x120)), PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point - trace_generator^(16 * (trace_length / 16 - 1)).\r\n              // val *= denominator_invs[4].\r\n              val := mulmod(val, mload(0x2a60), PRIME)\r\n\r\n              // res += val * coefficients[30].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[30]*/ mload(0x7c0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for final_fp: column7_row9 - initial_ap.\r\n              let val := addmod(/*column7_row9*/ mload(0x1be0), sub(PRIME, /*initial_ap*/ mload(0xe0)), PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point - trace_generator^(16 * (trace_length / 16 - 1)).\r\n              // val *= denominator_invs[4].\r\n              val := mulmod(val, mload(0x2a60), PRIME)\r\n\r\n              // res += val * coefficients[31].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[31]*/ mload(0x7e0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for final_pc: column5_row0 - final_pc.\r\n              let val := addmod(/*column5_row0*/ mload(0x1700), sub(PRIME, /*final_pc*/ mload(0x140)), PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point - trace_generator^(16 * (trace_length / 16 - 1)).\r\n              // val *= denominator_invs[4].\r\n              val := mulmod(val, mload(0x2a60), PRIME)\r\n\r\n              // res += val * coefficients[32].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[32]*/ mload(0x800), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for memory/multi_column_perm/perm/init0: (memory/multi_column_perm/perm/interaction_elm - (column6_row0 + memory/multi_column_perm/hash_interaction_elm0 * column6_row1)) * column9_inter1_row0 + column5_row0 + memory/multi_column_perm/hash_interaction_elm0 * column5_row1 - memory/multi_column_perm/perm/interaction_elm.\r\n              let val := addmod(\r\n                addmod(\r\n                  addmod(\r\n                    mulmod(\r\n                      addmod(\r\n                        /*memory/multi_column_perm/perm/interaction_elm*/ mload(0x160),\r\n                        sub(\r\n                          PRIME,\r\n                          addmod(\r\n                            /*column6_row0*/ mload(0x1a40),\r\n                            mulmod(\r\n                              /*memory/multi_column_perm/hash_interaction_elm0*/ mload(0x180),\r\n                              /*column6_row1*/ mload(0x1a60),\r\n                              PRIME),\r\n                            PRIME)),\r\n                        PRIME),\r\n                      /*column9_inter1_row0*/ mload(0x2200),\r\n                      PRIME),\r\n                    /*column5_row0*/ mload(0x1700),\r\n                    PRIME),\r\n                  mulmod(\r\n                    /*memory/multi_column_perm/hash_interaction_elm0*/ mload(0x180),\r\n                    /*column5_row1*/ mload(0x1720),\r\n                    PRIME),\r\n                  PRIME),\r\n                sub(PRIME, /*memory/multi_column_perm/perm/interaction_elm*/ mload(0x160)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point - 1.\r\n              // val *= denominator_invs[3].\r\n              val := mulmod(val, mload(0x2a40), PRIME)\r\n\r\n              // res += val * coefficients[33].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[33]*/ mload(0x820), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for memory/multi_column_perm/perm/step0: (memory/multi_column_perm/perm/interaction_elm - (column6_row2 + memory/multi_column_perm/hash_interaction_elm0 * column6_row3)) * column9_inter1_row2 - (memory/multi_column_perm/perm/interaction_elm - (column5_row2 + memory/multi_column_perm/hash_interaction_elm0 * column5_row3)) * column9_inter1_row0.\r\n              let val := addmod(\r\n                mulmod(\r\n                  addmod(\r\n                    /*memory/multi_column_perm/perm/interaction_elm*/ mload(0x160),\r\n                    sub(\r\n                      PRIME,\r\n                      addmod(\r\n                        /*column6_row2*/ mload(0x1a80),\r\n                        mulmod(\r\n                          /*memory/multi_column_perm/hash_interaction_elm0*/ mload(0x180),\r\n                          /*column6_row3*/ mload(0x1aa0),\r\n                          PRIME),\r\n                        PRIME)),\r\n                    PRIME),\r\n                  /*column9_inter1_row2*/ mload(0x2240),\r\n                  PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  mulmod(\r\n                    addmod(\r\n                      /*memory/multi_column_perm/perm/interaction_elm*/ mload(0x160),\r\n                      sub(\r\n                        PRIME,\r\n                        addmod(\r\n                          /*column5_row2*/ mload(0x1740),\r\n                          mulmod(\r\n                            /*memory/multi_column_perm/hash_interaction_elm0*/ mload(0x180),\r\n                            /*column5_row3*/ mload(0x1760),\r\n                            PRIME),\r\n                          PRIME)),\r\n                      PRIME),\r\n                    /*column9_inter1_row0*/ mload(0x2200),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: point - trace_generator^(2 * (trace_length / 2 - 1)).\r\n              // val *= numerators[2].\r\n              val := mulmod(val, mload(0x2fa0), PRIME)\r\n              // Denominator: point^(trace_length / 2) - 1.\r\n              // val *= denominator_invs[5].\r\n              val := mulmod(val, mload(0x2a80), PRIME)\r\n\r\n              // res += val * coefficients[34].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[34]*/ mload(0x840), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for memory/multi_column_perm/perm/last: column9_inter1_row0 - memory/multi_column_perm/perm/public_memory_prod.\r\n              let val := addmod(\r\n                /*column9_inter1_row0*/ mload(0x2200),\r\n                sub(PRIME, /*memory/multi_column_perm/perm/public_memory_prod*/ mload(0x1a0)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point - trace_generator^(2 * (trace_length / 2 - 1)).\r\n              // val *= denominator_invs[6].\r\n              val := mulmod(val, mload(0x2aa0), PRIME)\r\n\r\n              // res += val * coefficients[35].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[35]*/ mload(0x860), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for memory/diff_is_bit: memory__address_diff_0 * memory__address_diff_0 - memory__address_diff_0.\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*intermediate_value/memory/address_diff_0*/ mload(0x2500),\r\n                  /*intermediate_value/memory/address_diff_0*/ mload(0x2500),\r\n                  PRIME),\r\n                sub(PRIME, /*intermediate_value/memory/address_diff_0*/ mload(0x2500)),\r\n                PRIME)\r\n\r\n              // Numerator: point - trace_generator^(2 * (trace_length / 2 - 1)).\r\n              // val *= numerators[2].\r\n              val := mulmod(val, mload(0x2fa0), PRIME)\r\n              // Denominator: point^(trace_length / 2) - 1.\r\n              // val *= denominator_invs[5].\r\n              val := mulmod(val, mload(0x2a80), PRIME)\r\n\r\n              // res += val * coefficients[36].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[36]*/ mload(0x880), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for memory/is_func: (memory__address_diff_0 - 1) * (column6_row1 - column6_row3).\r\n              let val := mulmod(\r\n                addmod(/*intermediate_value/memory/address_diff_0*/ mload(0x2500), sub(PRIME, 1), PRIME),\r\n                addmod(/*column6_row1*/ mload(0x1a60), sub(PRIME, /*column6_row3*/ mload(0x1aa0)), PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: point - trace_generator^(2 * (trace_length / 2 - 1)).\r\n              // val *= numerators[2].\r\n              val := mulmod(val, mload(0x2fa0), PRIME)\r\n              // Denominator: point^(trace_length / 2) - 1.\r\n              // val *= denominator_invs[5].\r\n              val := mulmod(val, mload(0x2a80), PRIME)\r\n\r\n              // res += val * coefficients[37].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[37]*/ mload(0x8a0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for memory/initial_addr: column6_row0 - 1.\r\n              let val := addmod(/*column6_row0*/ mload(0x1a40), sub(PRIME, 1), PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point - 1.\r\n              // val *= denominator_invs[3].\r\n              val := mulmod(val, mload(0x2a40), PRIME)\r\n\r\n              // res += val * coefficients[38].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[38]*/ mload(0x8c0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for public_memory_addr_zero: column5_row2.\r\n              let val := /*column5_row2*/ mload(0x1740)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 8) - 1.\r\n              // val *= denominator_invs[7].\r\n              val := mulmod(val, mload(0x2ac0), PRIME)\r\n\r\n              // res += val * coefficients[39].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[39]*/ mload(0x8e0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for public_memory_value_zero: column5_row3.\r\n              let val := /*column5_row3*/ mload(0x1760)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 8) - 1.\r\n              // val *= denominator_invs[7].\r\n              val := mulmod(val, mload(0x2ac0), PRIME)\r\n\r\n              // res += val * coefficients[40].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[40]*/ mload(0x900), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for rc16/perm/init0: (rc16/perm/interaction_elm - column7_row2) * column9_inter1_row1 + column7_row0 - rc16/perm/interaction_elm.\r\n              let val := addmod(\r\n                addmod(\r\n                  mulmod(\r\n                    addmod(\r\n                      /*rc16/perm/interaction_elm*/ mload(0x1c0),\r\n                      sub(PRIME, /*column7_row2*/ mload(0x1b00)),\r\n                      PRIME),\r\n                    /*column9_inter1_row1*/ mload(0x2220),\r\n                    PRIME),\r\n                  /*column7_row0*/ mload(0x1ac0),\r\n                  PRIME),\r\n                sub(PRIME, /*rc16/perm/interaction_elm*/ mload(0x1c0)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point - 1.\r\n              // val *= denominator_invs[3].\r\n              val := mulmod(val, mload(0x2a40), PRIME)\r\n\r\n              // res += val * coefficients[41].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[41]*/ mload(0x920), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for rc16/perm/step0: (rc16/perm/interaction_elm - column7_row6) * column9_inter1_row5 - (rc16/perm/interaction_elm - column7_row4) * column9_inter1_row1.\r\n              let val := addmod(\r\n                mulmod(\r\n                  addmod(\r\n                    /*rc16/perm/interaction_elm*/ mload(0x1c0),\r\n                    sub(PRIME, /*column7_row6*/ mload(0x1b80)),\r\n                    PRIME),\r\n                  /*column9_inter1_row5*/ mload(0x2260),\r\n                  PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  mulmod(\r\n                    addmod(\r\n                      /*rc16/perm/interaction_elm*/ mload(0x1c0),\r\n                      sub(PRIME, /*column7_row4*/ mload(0x1b40)),\r\n                      PRIME),\r\n                    /*column9_inter1_row1*/ mload(0x2220),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: point - trace_generator^(4 * (trace_length / 4 - 1)).\r\n              // val *= numerators[3].\r\n              val := mulmod(val, mload(0x2fc0), PRIME)\r\n              // Denominator: point^(trace_length / 4) - 1.\r\n              // val *= denominator_invs[8].\r\n              val := mulmod(val, mload(0x2ae0), PRIME)\r\n\r\n              // res += val * coefficients[42].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[42]*/ mload(0x940), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for rc16/perm/last: column9_inter1_row1 - rc16/perm/public_memory_prod.\r\n              let val := addmod(\r\n                /*column9_inter1_row1*/ mload(0x2220),\r\n                sub(PRIME, /*rc16/perm/public_memory_prod*/ mload(0x1e0)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point - trace_generator^(4 * (trace_length / 4 - 1)).\r\n              // val *= denominator_invs[9].\r\n              val := mulmod(val, mload(0x2b00), PRIME)\r\n\r\n              // res += val * coefficients[43].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[43]*/ mload(0x960), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for rc16/diff_is_bit: rc16__diff_0 * rc16__diff_0 - rc16__diff_0.\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*intermediate_value/rc16/diff_0*/ mload(0x2520),\r\n                  /*intermediate_value/rc16/diff_0*/ mload(0x2520),\r\n                  PRIME),\r\n                sub(PRIME, /*intermediate_value/rc16/diff_0*/ mload(0x2520)),\r\n                PRIME)\r\n\r\n              // Numerator: point - trace_generator^(4 * (trace_length / 4 - 1)).\r\n              // val *= numerators[3].\r\n              val := mulmod(val, mload(0x2fc0), PRIME)\r\n              // Denominator: point^(trace_length / 4) - 1.\r\n              // val *= denominator_invs[8].\r\n              val := mulmod(val, mload(0x2ae0), PRIME)\r\n\r\n              // res += val * coefficients[44].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[44]*/ mload(0x980), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for rc16/minimum: column7_row2 - rc_min.\r\n              let val := addmod(/*column7_row2*/ mload(0x1b00), sub(PRIME, /*rc_min*/ mload(0x200)), PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point - 1.\r\n              // val *= denominator_invs[3].\r\n              val := mulmod(val, mload(0x2a40), PRIME)\r\n\r\n              // res += val * coefficients[45].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[45]*/ mload(0x9a0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for rc16/maximum: column7_row2 - rc_max.\r\n              let val := addmod(/*column7_row2*/ mload(0x1b00), sub(PRIME, /*rc_max*/ mload(0x220)), PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point - trace_generator^(4 * (trace_length / 4 - 1)).\r\n              // val *= denominator_invs[9].\r\n              val := mulmod(val, mload(0x2b00), PRIME)\r\n\r\n              // res += val * coefficients[46].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[46]*/ mload(0x9c0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/hash0/ec_subset_sum/bit_unpacking/last_one_is_zero: column8_row80 * (column4_row0 - (column4_row1 + column4_row1)).\r\n              let val := mulmod(\r\n                /*column8_row80*/ mload(0x20e0),\r\n                addmod(\r\n                  /*column4_row0*/ mload(0x15e0),\r\n                  sub(\r\n                    PRIME,\r\n                    addmod(/*column4_row1*/ mload(0x1600), /*column4_row1*/ mload(0x1600), PRIME)),\r\n                  PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 256) - 1.\r\n              // val *= denominator_invs[10].\r\n              val := mulmod(val, mload(0x2b20), PRIME)\r\n\r\n              // res += val * coefficients[47].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[47]*/ mload(0x9e0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones0: column8_row80 * (column4_row1 - 3138550867693340381917894711603833208051177722232017256448 * column4_row192).\r\n              let val := mulmod(\r\n                /*column8_row80*/ mload(0x20e0),\r\n                addmod(\r\n                  /*column4_row1*/ mload(0x1600),\r\n                  sub(\r\n                    PRIME,\r\n                    mulmod(\r\n                      3138550867693340381917894711603833208051177722232017256448,\r\n                      /*column4_row192*/ mload(0x1620),\r\n                      PRIME)),\r\n                  PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 256) - 1.\r\n              // val *= denominator_invs[10].\r\n              val := mulmod(val, mload(0x2b20), PRIME)\r\n\r\n              // res += val * coefficients[48].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[48]*/ mload(0xa00), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/hash0/ec_subset_sum/bit_unpacking/cumulative_bit192: column8_row80 - column3_row255 * (column4_row192 - (column4_row193 + column4_row193)).\r\n              let val := addmod(\r\n                /*column8_row80*/ mload(0x20e0),\r\n                sub(\r\n                  PRIME,\r\n                  mulmod(\r\n                    /*column3_row255*/ mload(0x15c0),\r\n                    addmod(\r\n                      /*column4_row192*/ mload(0x1620),\r\n                      sub(\r\n                        PRIME,\r\n                        addmod(/*column4_row193*/ mload(0x1640), /*column4_row193*/ mload(0x1640), PRIME)),\r\n                      PRIME),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 256) - 1.\r\n              // val *= denominator_invs[10].\r\n              val := mulmod(val, mload(0x2b20), PRIME)\r\n\r\n              // res += val * coefficients[49].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[49]*/ mload(0xa20), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones192: column3_row255 * (column4_row193 - 8 * column4_row196).\r\n              let val := mulmod(\r\n                /*column3_row255*/ mload(0x15c0),\r\n                addmod(\r\n                  /*column4_row193*/ mload(0x1640),\r\n                  sub(PRIME, mulmod(8, /*column4_row196*/ mload(0x1660), PRIME)),\r\n                  PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 256) - 1.\r\n              // val *= denominator_invs[10].\r\n              val := mulmod(val, mload(0x2b20), PRIME)\r\n\r\n              // res += val * coefficients[50].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[50]*/ mload(0xa40), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/hash0/ec_subset_sum/bit_unpacking/cumulative_bit196: column3_row255 - (column4_row251 - (column4_row252 + column4_row252)) * (column4_row196 - (column4_row197 + column4_row197)).\r\n              let val := addmod(\r\n                /*column3_row255*/ mload(0x15c0),\r\n                sub(\r\n                  PRIME,\r\n                  mulmod(\r\n                    addmod(\r\n                      /*column4_row251*/ mload(0x16a0),\r\n                      sub(\r\n                        PRIME,\r\n                        addmod(/*column4_row252*/ mload(0x16c0), /*column4_row252*/ mload(0x16c0), PRIME)),\r\n                      PRIME),\r\n                    addmod(\r\n                      /*column4_row196*/ mload(0x1660),\r\n                      sub(\r\n                        PRIME,\r\n                        addmod(/*column4_row197*/ mload(0x1680), /*column4_row197*/ mload(0x1680), PRIME)),\r\n                      PRIME),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 256) - 1.\r\n              // val *= denominator_invs[10].\r\n              val := mulmod(val, mload(0x2b20), PRIME)\r\n\r\n              // res += val * coefficients[51].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[51]*/ mload(0xa60), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones196: (column4_row251 - (column4_row252 + column4_row252)) * (column4_row197 - 18014398509481984 * column4_row251).\r\n              let val := mulmod(\r\n                addmod(\r\n                  /*column4_row251*/ mload(0x16a0),\r\n                  sub(\r\n                    PRIME,\r\n                    addmod(/*column4_row252*/ mload(0x16c0), /*column4_row252*/ mload(0x16c0), PRIME)),\r\n                  PRIME),\r\n                addmod(\r\n                  /*column4_row197*/ mload(0x1680),\r\n                  sub(PRIME, mulmod(18014398509481984, /*column4_row251*/ mload(0x16a0), PRIME)),\r\n                  PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 256) - 1.\r\n              // val *= denominator_invs[10].\r\n              val := mulmod(val, mload(0x2b20), PRIME)\r\n\r\n              // res += val * coefficients[52].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[52]*/ mload(0xa80), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/hash0/ec_subset_sum/booleanity_test: pedersen__hash0__ec_subset_sum__bit_0 * (pedersen__hash0__ec_subset_sum__bit_0 - 1).\r\n              let val := mulmod(\r\n                /*intermediate_value/pedersen/hash0/ec_subset_sum/bit_0*/ mload(0x2540),\r\n                addmod(\r\n                  /*intermediate_value/pedersen/hash0/ec_subset_sum/bit_0*/ mload(0x2540),\r\n                  sub(PRIME, 1),\r\n                  PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 256) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[4].\r\n              val := mulmod(val, mload(0x2fe0), PRIME)\r\n              // Denominator: point^trace_length - 1.\r\n              // val *= denominator_invs[0].\r\n              val := mulmod(val, mload(0x29e0), PRIME)\r\n\r\n              // res += val * coefficients[53].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[53]*/ mload(0xaa0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/hash0/ec_subset_sum/bit_extraction_end: column4_row0.\r\n              let val := /*column4_row0*/ mload(0x15e0)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 256) - trace_generator^(63 * trace_length / 64).\r\n              // val *= denominator_invs[11].\r\n              val := mulmod(val, mload(0x2b40), PRIME)\r\n\r\n              // res += val * coefficients[54].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[54]*/ mload(0xac0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/hash0/ec_subset_sum/zeros_tail: column4_row0.\r\n              let val := /*column4_row0*/ mload(0x15e0)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 256) - trace_generator^(255 * trace_length / 256).\r\n              // val *= denominator_invs[12].\r\n              val := mulmod(val, mload(0x2b60), PRIME)\r\n\r\n              // res += val * coefficients[55].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[55]*/ mload(0xae0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/hash0/ec_subset_sum/add_points/slope: pedersen__hash0__ec_subset_sum__bit_0 * (column2_row0 - pedersen__points__y) - column3_row0 * (column1_row0 - pedersen__points__x).\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*intermediate_value/pedersen/hash0/ec_subset_sum/bit_0*/ mload(0x2540),\r\n                  addmod(\r\n                    /*column2_row0*/ mload(0x1520),\r\n                    sub(PRIME, /*periodic_column/pedersen/points/y*/ mload(0x20)),\r\n                    PRIME),\r\n                  PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  mulmod(\r\n                    /*column3_row0*/ mload(0x15a0),\r\n                    addmod(\r\n                      /*column1_row0*/ mload(0x1480),\r\n                      sub(PRIME, /*periodic_column/pedersen/points/x*/ mload(0x0)),\r\n                      PRIME),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 256) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[4].\r\n              val := mulmod(val, mload(0x2fe0), PRIME)\r\n              // Denominator: point^trace_length - 1.\r\n              // val *= denominator_invs[0].\r\n              val := mulmod(val, mload(0x29e0), PRIME)\r\n\r\n              // res += val * coefficients[56].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[56]*/ mload(0xb00), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/hash0/ec_subset_sum/add_points/x: column3_row0 * column3_row0 - pedersen__hash0__ec_subset_sum__bit_0 * (column1_row0 + pedersen__points__x + column1_row1).\r\n              let val := addmod(\r\n                mulmod(/*column3_row0*/ mload(0x15a0), /*column3_row0*/ mload(0x15a0), PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  mulmod(\r\n                    /*intermediate_value/pedersen/hash0/ec_subset_sum/bit_0*/ mload(0x2540),\r\n                    addmod(\r\n                      addmod(\r\n                        /*column1_row0*/ mload(0x1480),\r\n                        /*periodic_column/pedersen/points/x*/ mload(0x0),\r\n                        PRIME),\r\n                      /*column1_row1*/ mload(0x14a0),\r\n                      PRIME),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 256) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[4].\r\n              val := mulmod(val, mload(0x2fe0), PRIME)\r\n              // Denominator: point^trace_length - 1.\r\n              // val *= denominator_invs[0].\r\n              val := mulmod(val, mload(0x29e0), PRIME)\r\n\r\n              // res += val * coefficients[57].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[57]*/ mload(0xb20), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/hash0/ec_subset_sum/add_points/y: pedersen__hash0__ec_subset_sum__bit_0 * (column2_row0 + column2_row1) - column3_row0 * (column1_row0 - column1_row1).\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*intermediate_value/pedersen/hash0/ec_subset_sum/bit_0*/ mload(0x2540),\r\n                  addmod(/*column2_row0*/ mload(0x1520), /*column2_row1*/ mload(0x1540), PRIME),\r\n                  PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  mulmod(\r\n                    /*column3_row0*/ mload(0x15a0),\r\n                    addmod(/*column1_row0*/ mload(0x1480), sub(PRIME, /*column1_row1*/ mload(0x14a0)), PRIME),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 256) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[4].\r\n              val := mulmod(val, mload(0x2fe0), PRIME)\r\n              // Denominator: point^trace_length - 1.\r\n              // val *= denominator_invs[0].\r\n              val := mulmod(val, mload(0x29e0), PRIME)\r\n\r\n              // res += val * coefficients[58].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[58]*/ mload(0xb40), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/hash0/ec_subset_sum/copy_point/x: pedersen__hash0__ec_subset_sum__bit_neg_0 * (column1_row1 - column1_row0).\r\n              let val := mulmod(\r\n                /*intermediate_value/pedersen/hash0/ec_subset_sum/bit_neg_0*/ mload(0x2560),\r\n                addmod(/*column1_row1*/ mload(0x14a0), sub(PRIME, /*column1_row0*/ mload(0x1480)), PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 256) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[4].\r\n              val := mulmod(val, mload(0x2fe0), PRIME)\r\n              // Denominator: point^trace_length - 1.\r\n              // val *= denominator_invs[0].\r\n              val := mulmod(val, mload(0x29e0), PRIME)\r\n\r\n              // res += val * coefficients[59].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[59]*/ mload(0xb60), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/hash0/ec_subset_sum/copy_point/y: pedersen__hash0__ec_subset_sum__bit_neg_0 * (column2_row1 - column2_row0).\r\n              let val := mulmod(\r\n                /*intermediate_value/pedersen/hash0/ec_subset_sum/bit_neg_0*/ mload(0x2560),\r\n                addmod(/*column2_row1*/ mload(0x1540), sub(PRIME, /*column2_row0*/ mload(0x1520)), PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 256) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[4].\r\n              val := mulmod(val, mload(0x2fe0), PRIME)\r\n              // Denominator: point^trace_length - 1.\r\n              // val *= denominator_invs[0].\r\n              val := mulmod(val, mload(0x29e0), PRIME)\r\n\r\n              // res += val * coefficients[60].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[60]*/ mload(0xb80), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/hash0/copy_point/x: column1_row256 - column1_row255.\r\n              let val := addmod(\r\n                /*column1_row256*/ mload(0x14e0),\r\n                sub(PRIME, /*column1_row255*/ mload(0x14c0)),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 512) - trace_generator^(trace_length / 2).\r\n              // val *= numerators[5].\r\n              val := mulmod(val, mload(0x3000), PRIME)\r\n              // Denominator: point^(trace_length / 256) - 1.\r\n              // val *= denominator_invs[10].\r\n              val := mulmod(val, mload(0x2b20), PRIME)\r\n\r\n              // res += val * coefficients[61].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[61]*/ mload(0xba0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/hash0/copy_point/y: column2_row256 - column2_row255.\r\n              let val := addmod(\r\n                /*column2_row256*/ mload(0x1580),\r\n                sub(PRIME, /*column2_row255*/ mload(0x1560)),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 512) - trace_generator^(trace_length / 2).\r\n              // val *= numerators[5].\r\n              val := mulmod(val, mload(0x3000), PRIME)\r\n              // Denominator: point^(trace_length / 256) - 1.\r\n              // val *= denominator_invs[10].\r\n              val := mulmod(val, mload(0x2b20), PRIME)\r\n\r\n              // res += val * coefficients[62].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[62]*/ mload(0xbc0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/hash0/init/x: column1_row0 - pedersen/shift_point.x.\r\n              let val := addmod(\r\n                /*column1_row0*/ mload(0x1480),\r\n                sub(PRIME, /*pedersen/shift_point.x*/ mload(0x240)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 512) - 1.\r\n              // val *= denominator_invs[13].\r\n              val := mulmod(val, mload(0x2b80), PRIME)\r\n\r\n              // res += val * coefficients[63].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[63]*/ mload(0xbe0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/hash0/init/y: column2_row0 - pedersen/shift_point.y.\r\n              let val := addmod(\r\n                /*column2_row0*/ mload(0x1520),\r\n                sub(PRIME, /*pedersen/shift_point.y*/ mload(0x260)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 512) - 1.\r\n              // val *= denominator_invs[13].\r\n              val := mulmod(val, mload(0x2b80), PRIME)\r\n\r\n              // res += val * coefficients[64].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[64]*/ mload(0xc00), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/input0_value0: column5_row7 - column4_row0.\r\n              let val := addmod(/*column5_row7*/ mload(0x17e0), sub(PRIME, /*column4_row0*/ mload(0x15e0)), PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 512) - 1.\r\n              // val *= denominator_invs[13].\r\n              val := mulmod(val, mload(0x2b80), PRIME)\r\n\r\n              // res += val * coefficients[65].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[65]*/ mload(0xc20), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/input0_addr: column5_row518 - (column5_row134 + 1).\r\n              let val := addmod(\r\n                /*column5_row518*/ mload(0x19c0),\r\n                sub(PRIME, addmod(/*column5_row134*/ mload(0x18e0), 1, PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: point - trace_generator^(512 * (trace_length / 512 - 1)).\r\n              // val *= numerators[6].\r\n              val := mulmod(val, mload(0x3020), PRIME)\r\n              // Denominator: point^(trace_length / 512) - 1.\r\n              // val *= denominator_invs[13].\r\n              val := mulmod(val, mload(0x2b80), PRIME)\r\n\r\n              // res += val * coefficients[66].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[66]*/ mload(0xc40), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/init_addr: column5_row6 - initial_pedersen_addr.\r\n              let val := addmod(\r\n                /*column5_row6*/ mload(0x17c0),\r\n                sub(PRIME, /*initial_pedersen_addr*/ mload(0x280)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point - 1.\r\n              // val *= denominator_invs[3].\r\n              val := mulmod(val, mload(0x2a40), PRIME)\r\n\r\n              // res += val * coefficients[67].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[67]*/ mload(0xc60), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/input1_value0: column5_row263 - column4_row256.\r\n              let val := addmod(\r\n                /*column5_row263*/ mload(0x1940),\r\n                sub(PRIME, /*column4_row256*/ mload(0x16e0)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 512) - 1.\r\n              // val *= denominator_invs[13].\r\n              val := mulmod(val, mload(0x2b80), PRIME)\r\n\r\n              // res += val * coefficients[68].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[68]*/ mload(0xc80), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/input1_addr: column5_row262 - (column5_row6 + 1).\r\n              let val := addmod(\r\n                /*column5_row262*/ mload(0x1920),\r\n                sub(PRIME, addmod(/*column5_row6*/ mload(0x17c0), 1, PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 512) - 1.\r\n              // val *= denominator_invs[13].\r\n              val := mulmod(val, mload(0x2b80), PRIME)\r\n\r\n              // res += val * coefficients[69].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[69]*/ mload(0xca0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/output_value0: column5_row135 - column1_row511.\r\n              let val := addmod(\r\n                /*column5_row135*/ mload(0x1900),\r\n                sub(PRIME, /*column1_row511*/ mload(0x1500)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 512) - 1.\r\n              // val *= denominator_invs[13].\r\n              val := mulmod(val, mload(0x2b80), PRIME)\r\n\r\n              // res += val * coefficients[70].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[70]*/ mload(0xcc0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for pedersen/output_addr: column5_row134 - (column5_row262 + 1).\r\n              let val := addmod(\r\n                /*column5_row134*/ mload(0x18e0),\r\n                sub(PRIME, addmod(/*column5_row262*/ mload(0x1920), 1, PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 512) - 1.\r\n              // val *= denominator_invs[13].\r\n              val := mulmod(val, mload(0x2b80), PRIME)\r\n\r\n              // res += val * coefficients[71].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[71]*/ mload(0xce0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for rc_builtin/value: rc_builtin__value7_0 - column5_row71.\r\n              let val := addmod(\r\n                /*intermediate_value/rc_builtin/value7_0*/ mload(0x2660),\r\n                sub(PRIME, /*column5_row71*/ mload(0x18c0)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 256) - 1.\r\n              // val *= denominator_invs[10].\r\n              val := mulmod(val, mload(0x2b20), PRIME)\r\n\r\n              // res += val * coefficients[72].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[72]*/ mload(0xd00), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for rc_builtin/addr_step: column5_row326 - (column5_row70 + 1).\r\n              let val := addmod(\r\n                /*column5_row326*/ mload(0x1960),\r\n                sub(PRIME, addmod(/*column5_row70*/ mload(0x18a0), 1, PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: point - trace_generator^(256 * (trace_length / 256 - 1)).\r\n              // val *= numerators[7].\r\n              val := mulmod(val, mload(0x3040), PRIME)\r\n              // Denominator: point^(trace_length / 256) - 1.\r\n              // val *= denominator_invs[10].\r\n              val := mulmod(val, mload(0x2b20), PRIME)\r\n\r\n              // res += val * coefficients[73].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[73]*/ mload(0xd20), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for rc_builtin/init_addr: column5_row70 - initial_rc_addr.\r\n              let val := addmod(\r\n                /*column5_row70*/ mload(0x18a0),\r\n                sub(PRIME, /*initial_rc_addr*/ mload(0x2a0)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point - 1.\r\n              // val *= denominator_invs[3].\r\n              val := mulmod(val, mload(0x2a40), PRIME)\r\n\r\n              // res += val * coefficients[74].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[74]*/ mload(0xd40), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/doubling_key/slope: ecdsa__signature0__doubling_key__x_squared + ecdsa__signature0__doubling_key__x_squared + ecdsa__signature0__doubling_key__x_squared + ecdsa/sig_config.alpha - (column7_row39 + column7_row39) * column7_row23.\r\n              let val := addmod(\r\n                addmod(\r\n                  addmod(\r\n                    addmod(\r\n                      /*intermediate_value/ecdsa/signature0/doubling_key/x_squared*/ mload(0x2680),\r\n                      /*intermediate_value/ecdsa/signature0/doubling_key/x_squared*/ mload(0x2680),\r\n                      PRIME),\r\n                    /*intermediate_value/ecdsa/signature0/doubling_key/x_squared*/ mload(0x2680),\r\n                    PRIME),\r\n                  /*ecdsa/sig_config.alpha*/ mload(0x2c0),\r\n                  PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  mulmod(\r\n                    addmod(/*column7_row39*/ mload(0x1d00), /*column7_row39*/ mload(0x1d00), PRIME),\r\n                    /*column7_row23*/ mload(0x1ca0),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 16384) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[8].\r\n              val := mulmod(val, mload(0x3060), PRIME)\r\n              // Denominator: point^(trace_length / 64) - 1.\r\n              // val *= denominator_invs[14].\r\n              val := mulmod(val, mload(0x2ba0), PRIME)\r\n\r\n              // res += val * coefficients[75].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[75]*/ mload(0xd60), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/doubling_key/x: column7_row23 * column7_row23 - (column7_row7 + column7_row7 + column7_row71).\r\n              let val := addmod(\r\n                mulmod(/*column7_row23*/ mload(0x1ca0), /*column7_row23*/ mload(0x1ca0), PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(\r\n                    addmod(/*column7_row7*/ mload(0x1ba0), /*column7_row7*/ mload(0x1ba0), PRIME),\r\n                    /*column7_row71*/ mload(0x1da0),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 16384) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[8].\r\n              val := mulmod(val, mload(0x3060), PRIME)\r\n              // Denominator: point^(trace_length / 64) - 1.\r\n              // val *= denominator_invs[14].\r\n              val := mulmod(val, mload(0x2ba0), PRIME)\r\n\r\n              // res += val * coefficients[76].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[76]*/ mload(0xd80), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/doubling_key/y: column7_row39 + column7_row103 - column7_row23 * (column7_row7 - column7_row71).\r\n              let val := addmod(\r\n                addmod(/*column7_row39*/ mload(0x1d00), /*column7_row103*/ mload(0x1e20), PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  mulmod(\r\n                    /*column7_row23*/ mload(0x1ca0),\r\n                    addmod(/*column7_row7*/ mload(0x1ba0), sub(PRIME, /*column7_row71*/ mload(0x1da0)), PRIME),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 16384) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[8].\r\n              val := mulmod(val, mload(0x3060), PRIME)\r\n              // Denominator: point^(trace_length / 64) - 1.\r\n              // val *= denominator_invs[14].\r\n              val := mulmod(val, mload(0x2ba0), PRIME)\r\n\r\n              // res += val * coefficients[77].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[77]*/ mload(0xda0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/exponentiate_generator/booleanity_test: ecdsa__signature0__exponentiate_generator__bit_0 * (ecdsa__signature0__exponentiate_generator__bit_0 - 1).\r\n              let val := mulmod(\r\n                /*intermediate_value/ecdsa/signature0/exponentiate_generator/bit_0*/ mload(0x26a0),\r\n                addmod(\r\n                  /*intermediate_value/ecdsa/signature0/exponentiate_generator/bit_0*/ mload(0x26a0),\r\n                  sub(PRIME, 1),\r\n                  PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 32768) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[9].\r\n              val := mulmod(val, mload(0x3080), PRIME)\r\n              // Denominator: point^(trace_length / 128) - 1.\r\n              // val *= denominator_invs[15].\r\n              val := mulmod(val, mload(0x2bc0), PRIME)\r\n\r\n              // res += val * coefficients[78].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[78]*/ mload(0xdc0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/exponentiate_generator/bit_extraction_end: column8_row96.\r\n              let val := /*column8_row96*/ mload(0x2100)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 32768) - trace_generator^(251 * trace_length / 256).\r\n              // val *= denominator_invs[16].\r\n              val := mulmod(val, mload(0x2be0), PRIME)\r\n\r\n              // res += val * coefficients[79].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[79]*/ mload(0xde0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/exponentiate_generator/zeros_tail: column8_row96.\r\n              let val := /*column8_row96*/ mload(0x2100)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 32768) - trace_generator^(255 * trace_length / 256).\r\n              // val *= denominator_invs[17].\r\n              val := mulmod(val, mload(0x2c00), PRIME)\r\n\r\n              // res += val * coefficients[80].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[80]*/ mload(0xe00), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/exponentiate_generator/add_points/slope: ecdsa__signature0__exponentiate_generator__bit_0 * (column8_row64 - ecdsa__generator_points__y) - column8_row32 * (column8_row0 - ecdsa__generator_points__x).\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*intermediate_value/ecdsa/signature0/exponentiate_generator/bit_0*/ mload(0x26a0),\r\n                  addmod(\r\n                    /*column8_row64*/ mload(0x20c0),\r\n                    sub(PRIME, /*periodic_column/ecdsa/generator_points/y*/ mload(0x60)),\r\n                    PRIME),\r\n                  PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  mulmod(\r\n                    /*column8_row32*/ mload(0x20a0),\r\n                    addmod(\r\n                      /*column8_row0*/ mload(0x2060),\r\n                      sub(PRIME, /*periodic_column/ecdsa/generator_points/x*/ mload(0x40)),\r\n                      PRIME),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 32768) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[9].\r\n              val := mulmod(val, mload(0x3080), PRIME)\r\n              // Denominator: point^(trace_length / 128) - 1.\r\n              // val *= denominator_invs[15].\r\n              val := mulmod(val, mload(0x2bc0), PRIME)\r\n\r\n              // res += val * coefficients[81].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[81]*/ mload(0xe20), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/exponentiate_generator/add_points/x: column8_row32 * column8_row32 - ecdsa__signature0__exponentiate_generator__bit_0 * (column8_row0 + ecdsa__generator_points__x + column8_row128).\r\n              let val := addmod(\r\n                mulmod(/*column8_row32*/ mload(0x20a0), /*column8_row32*/ mload(0x20a0), PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  mulmod(\r\n                    /*intermediate_value/ecdsa/signature0/exponentiate_generator/bit_0*/ mload(0x26a0),\r\n                    addmod(\r\n                      addmod(\r\n                        /*column8_row0*/ mload(0x2060),\r\n                        /*periodic_column/ecdsa/generator_points/x*/ mload(0x40),\r\n                        PRIME),\r\n                      /*column8_row128*/ mload(0x2120),\r\n                      PRIME),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 32768) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[9].\r\n              val := mulmod(val, mload(0x3080), PRIME)\r\n              // Denominator: point^(trace_length / 128) - 1.\r\n              // val *= denominator_invs[15].\r\n              val := mulmod(val, mload(0x2bc0), PRIME)\r\n\r\n              // res += val * coefficients[82].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[82]*/ mload(0xe40), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/exponentiate_generator/add_points/y: ecdsa__signature0__exponentiate_generator__bit_0 * (column8_row64 + column8_row192) - column8_row32 * (column8_row0 - column8_row128).\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*intermediate_value/ecdsa/signature0/exponentiate_generator/bit_0*/ mload(0x26a0),\r\n                  addmod(/*column8_row64*/ mload(0x20c0), /*column8_row192*/ mload(0x2140), PRIME),\r\n                  PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  mulmod(\r\n                    /*column8_row32*/ mload(0x20a0),\r\n                    addmod(/*column8_row0*/ mload(0x2060), sub(PRIME, /*column8_row128*/ mload(0x2120)), PRIME),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 32768) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[9].\r\n              val := mulmod(val, mload(0x3080), PRIME)\r\n              // Denominator: point^(trace_length / 128) - 1.\r\n              // val *= denominator_invs[15].\r\n              val := mulmod(val, mload(0x2bc0), PRIME)\r\n\r\n              // res += val * coefficients[83].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[83]*/ mload(0xe60), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/exponentiate_generator/add_points/x_diff_inv: column8_row16 * (column8_row0 - ecdsa__generator_points__x) - 1.\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*column8_row16*/ mload(0x2080),\r\n                  addmod(\r\n                    /*column8_row0*/ mload(0x2060),\r\n                    sub(PRIME, /*periodic_column/ecdsa/generator_points/x*/ mload(0x40)),\r\n                    PRIME),\r\n                  PRIME),\r\n                sub(PRIME, 1),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 32768) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[9].\r\n              val := mulmod(val, mload(0x3080), PRIME)\r\n              // Denominator: point^(trace_length / 128) - 1.\r\n              // val *= denominator_invs[15].\r\n              val := mulmod(val, mload(0x2bc0), PRIME)\r\n\r\n              // res += val * coefficients[84].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[84]*/ mload(0xe80), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/exponentiate_generator/copy_point/x: ecdsa__signature0__exponentiate_generator__bit_neg_0 * (column8_row128 - column8_row0).\r\n              let val := mulmod(\r\n                /*intermediate_value/ecdsa/signature0/exponentiate_generator/bit_neg_0*/ mload(0x26c0),\r\n                addmod(/*column8_row128*/ mload(0x2120), sub(PRIME, /*column8_row0*/ mload(0x2060)), PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 32768) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[9].\r\n              val := mulmod(val, mload(0x3080), PRIME)\r\n              // Denominator: point^(trace_length / 128) - 1.\r\n              // val *= denominator_invs[15].\r\n              val := mulmod(val, mload(0x2bc0), PRIME)\r\n\r\n              // res += val * coefficients[85].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[85]*/ mload(0xea0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/exponentiate_generator/copy_point/y: ecdsa__signature0__exponentiate_generator__bit_neg_0 * (column8_row192 - column8_row64).\r\n              let val := mulmod(\r\n                /*intermediate_value/ecdsa/signature0/exponentiate_generator/bit_neg_0*/ mload(0x26c0),\r\n                addmod(\r\n                  /*column8_row192*/ mload(0x2140),\r\n                  sub(PRIME, /*column8_row64*/ mload(0x20c0)),\r\n                  PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 32768) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[9].\r\n              val := mulmod(val, mload(0x3080), PRIME)\r\n              // Denominator: point^(trace_length / 128) - 1.\r\n              // val *= denominator_invs[15].\r\n              val := mulmod(val, mload(0x2bc0), PRIME)\r\n\r\n              // res += val * coefficients[86].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[86]*/ mload(0xec0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/exponentiate_key/booleanity_test: ecdsa__signature0__exponentiate_key__bit_0 * (ecdsa__signature0__exponentiate_key__bit_0 - 1).\r\n              let val := mulmod(\r\n                /*intermediate_value/ecdsa/signature0/exponentiate_key/bit_0*/ mload(0x26e0),\r\n                addmod(\r\n                  /*intermediate_value/ecdsa/signature0/exponentiate_key/bit_0*/ mload(0x26e0),\r\n                  sub(PRIME, 1),\r\n                  PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 16384) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[8].\r\n              val := mulmod(val, mload(0x3060), PRIME)\r\n              // Denominator: point^(trace_length / 64) - 1.\r\n              // val *= denominator_invs[14].\r\n              val := mulmod(val, mload(0x2ba0), PRIME)\r\n\r\n              // res += val * coefficients[87].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[87]*/ mload(0xee0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/exponentiate_key/bit_extraction_end: column7_row31.\r\n              let val := /*column7_row31*/ mload(0x1ce0)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16384) - trace_generator^(251 * trace_length / 256).\r\n              // val *= denominator_invs[18].\r\n              val := mulmod(val, mload(0x2c20), PRIME)\r\n\r\n              // res += val * coefficients[88].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[88]*/ mload(0xf00), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/exponentiate_key/zeros_tail: column7_row31.\r\n              let val := /*column7_row31*/ mload(0x1ce0)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16384) - trace_generator^(255 * trace_length / 256).\r\n              // val *= denominator_invs[19].\r\n              val := mulmod(val, mload(0x2c40), PRIME)\r\n\r\n              // res += val * coefficients[89].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[89]*/ mload(0xf20), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/exponentiate_key/add_points/slope: ecdsa__signature0__exponentiate_key__bit_0 * (column7_row15 - column7_row39) - column7_row47 * (column7_row55 - column7_row7).\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*intermediate_value/ecdsa/signature0/exponentiate_key/bit_0*/ mload(0x26e0),\r\n                  addmod(/*column7_row15*/ mload(0x1c60), sub(PRIME, /*column7_row39*/ mload(0x1d00)), PRIME),\r\n                  PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  mulmod(\r\n                    /*column7_row47*/ mload(0x1d40),\r\n                    addmod(/*column7_row55*/ mload(0x1d60), sub(PRIME, /*column7_row7*/ mload(0x1ba0)), PRIME),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 16384) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[8].\r\n              val := mulmod(val, mload(0x3060), PRIME)\r\n              // Denominator: point^(trace_length / 64) - 1.\r\n              // val *= denominator_invs[14].\r\n              val := mulmod(val, mload(0x2ba0), PRIME)\r\n\r\n              // res += val * coefficients[90].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[90]*/ mload(0xf40), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/exponentiate_key/add_points/x: column7_row47 * column7_row47 - ecdsa__signature0__exponentiate_key__bit_0 * (column7_row55 + column7_row7 + column7_row119).\r\n              let val := addmod(\r\n                mulmod(/*column7_row47*/ mload(0x1d40), /*column7_row47*/ mload(0x1d40), PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  mulmod(\r\n                    /*intermediate_value/ecdsa/signature0/exponentiate_key/bit_0*/ mload(0x26e0),\r\n                    addmod(\r\n                      addmod(/*column7_row55*/ mload(0x1d60), /*column7_row7*/ mload(0x1ba0), PRIME),\r\n                      /*column7_row119*/ mload(0x1e60),\r\n                      PRIME),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 16384) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[8].\r\n              val := mulmod(val, mload(0x3060), PRIME)\r\n              // Denominator: point^(trace_length / 64) - 1.\r\n              // val *= denominator_invs[14].\r\n              val := mulmod(val, mload(0x2ba0), PRIME)\r\n\r\n              // res += val * coefficients[91].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[91]*/ mload(0xf60), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/exponentiate_key/add_points/y: ecdsa__signature0__exponentiate_key__bit_0 * (column7_row15 + column7_row79) - column7_row47 * (column7_row55 - column7_row119).\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*intermediate_value/ecdsa/signature0/exponentiate_key/bit_0*/ mload(0x26e0),\r\n                  addmod(/*column7_row15*/ mload(0x1c60), /*column7_row79*/ mload(0x1de0), PRIME),\r\n                  PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  mulmod(\r\n                    /*column7_row47*/ mload(0x1d40),\r\n                    addmod(\r\n                      /*column7_row55*/ mload(0x1d60),\r\n                      sub(PRIME, /*column7_row119*/ mload(0x1e60)),\r\n                      PRIME),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 16384) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[8].\r\n              val := mulmod(val, mload(0x3060), PRIME)\r\n              // Denominator: point^(trace_length / 64) - 1.\r\n              // val *= denominator_invs[14].\r\n              val := mulmod(val, mload(0x2ba0), PRIME)\r\n\r\n              // res += val * coefficients[92].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[92]*/ mload(0xf80), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/exponentiate_key/add_points/x_diff_inv: column7_row63 * (column7_row55 - column7_row7) - 1.\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*column7_row63*/ mload(0x1d80),\r\n                  addmod(/*column7_row55*/ mload(0x1d60), sub(PRIME, /*column7_row7*/ mload(0x1ba0)), PRIME),\r\n                  PRIME),\r\n                sub(PRIME, 1),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 16384) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[8].\r\n              val := mulmod(val, mload(0x3060), PRIME)\r\n              // Denominator: point^(trace_length / 64) - 1.\r\n              // val *= denominator_invs[14].\r\n              val := mulmod(val, mload(0x2ba0), PRIME)\r\n\r\n              // res += val * coefficients[93].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[93]*/ mload(0xfa0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/exponentiate_key/copy_point/x: ecdsa__signature0__exponentiate_key__bit_neg_0 * (column7_row119 - column7_row55).\r\n              let val := mulmod(\r\n                /*intermediate_value/ecdsa/signature0/exponentiate_key/bit_neg_0*/ mload(0x2700),\r\n                addmod(\r\n                  /*column7_row119*/ mload(0x1e60),\r\n                  sub(PRIME, /*column7_row55*/ mload(0x1d60)),\r\n                  PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 16384) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[8].\r\n              val := mulmod(val, mload(0x3060), PRIME)\r\n              // Denominator: point^(trace_length / 64) - 1.\r\n              // val *= denominator_invs[14].\r\n              val := mulmod(val, mload(0x2ba0), PRIME)\r\n\r\n              // res += val * coefficients[94].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[94]*/ mload(0xfc0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/exponentiate_key/copy_point/y: ecdsa__signature0__exponentiate_key__bit_neg_0 * (column7_row79 - column7_row15).\r\n              let val := mulmod(\r\n                /*intermediate_value/ecdsa/signature0/exponentiate_key/bit_neg_0*/ mload(0x2700),\r\n                addmod(/*column7_row79*/ mload(0x1de0), sub(PRIME, /*column7_row15*/ mload(0x1c60)), PRIME),\r\n                PRIME)\r\n\r\n              // Numerator: point^(trace_length / 16384) - trace_generator^(255 * trace_length / 256).\r\n              // val *= numerators[8].\r\n              val := mulmod(val, mload(0x3060), PRIME)\r\n              // Denominator: point^(trace_length / 64) - 1.\r\n              // val *= denominator_invs[14].\r\n              val := mulmod(val, mload(0x2ba0), PRIME)\r\n\r\n              // res += val * coefficients[95].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[95]*/ mload(0xfe0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/init_gen/x: column8_row0 - ecdsa/sig_config.shift_point.x.\r\n              let val := addmod(\r\n                /*column8_row0*/ mload(0x2060),\r\n                sub(PRIME, /*ecdsa/sig_config.shift_point.x*/ mload(0x2e0)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 32768) - 1.\r\n              // val *= denominator_invs[20].\r\n              val := mulmod(val, mload(0x2c60), PRIME)\r\n\r\n              // res += val * coefficients[96].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[96]*/ mload(0x1000), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/init_gen/y: column8_row64 + ecdsa/sig_config.shift_point.y.\r\n              let val := addmod(\r\n                /*column8_row64*/ mload(0x20c0),\r\n                /*ecdsa/sig_config.shift_point.y*/ mload(0x300),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 32768) - 1.\r\n              // val *= denominator_invs[20].\r\n              val := mulmod(val, mload(0x2c60), PRIME)\r\n\r\n              // res += val * coefficients[97].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[97]*/ mload(0x1020), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/init_key/x: column7_row55 - ecdsa/sig_config.shift_point.x.\r\n              let val := addmod(\r\n                /*column7_row55*/ mload(0x1d60),\r\n                sub(PRIME, /*ecdsa/sig_config.shift_point.x*/ mload(0x2e0)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16384) - 1.\r\n              // val *= denominator_invs[21].\r\n              val := mulmod(val, mload(0x2c80), PRIME)\r\n\r\n              // res += val * coefficients[98].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[98]*/ mload(0x1040), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/init_key/y: column7_row15 - ecdsa/sig_config.shift_point.y.\r\n              let val := addmod(\r\n                /*column7_row15*/ mload(0x1c60),\r\n                sub(PRIME, /*ecdsa/sig_config.shift_point.y*/ mload(0x300)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16384) - 1.\r\n              // val *= denominator_invs[21].\r\n              val := mulmod(val, mload(0x2c80), PRIME)\r\n\r\n              // res += val * coefficients[99].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[99]*/ mload(0x1060), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/add_results/slope: column8_row32704 - (column7_row16335 + column8_row32672 * (column8_row32640 - column7_row16375)).\r\n              let val := addmod(\r\n                /*column8_row32704*/ mload(0x21e0),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(\r\n                    /*column7_row16335*/ mload(0x1f00),\r\n                    mulmod(\r\n                      /*column8_row32672*/ mload(0x21c0),\r\n                      addmod(\r\n                        /*column8_row32640*/ mload(0x2180),\r\n                        sub(PRIME, /*column7_row16375*/ mload(0x1f60)),\r\n                        PRIME),\r\n                      PRIME),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 32768) - 1.\r\n              // val *= denominator_invs[20].\r\n              val := mulmod(val, mload(0x2c60), PRIME)\r\n\r\n              // res += val * coefficients[100].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[100]*/ mload(0x1080), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/add_results/x: column8_row32672 * column8_row32672 - (column8_row32640 + column7_row16375 + column7_row16391).\r\n              let val := addmod(\r\n                mulmod(/*column8_row32672*/ mload(0x21c0), /*column8_row32672*/ mload(0x21c0), PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(\r\n                    addmod(/*column8_row32640*/ mload(0x2180), /*column7_row16375*/ mload(0x1f60), PRIME),\r\n                    /*column7_row16391*/ mload(0x1fa0),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 32768) - 1.\r\n              // val *= denominator_invs[20].\r\n              val := mulmod(val, mload(0x2c60), PRIME)\r\n\r\n              // res += val * coefficients[101].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[101]*/ mload(0x10a0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/add_results/y: column8_row32704 + column7_row16423 - column8_row32672 * (column8_row32640 - column7_row16391).\r\n              let val := addmod(\r\n                addmod(/*column8_row32704*/ mload(0x21e0), /*column7_row16423*/ mload(0x1fc0), PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  mulmod(\r\n                    /*column8_row32672*/ mload(0x21c0),\r\n                    addmod(\r\n                      /*column8_row32640*/ mload(0x2180),\r\n                      sub(PRIME, /*column7_row16391*/ mload(0x1fa0)),\r\n                      PRIME),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 32768) - 1.\r\n              // val *= denominator_invs[20].\r\n              val := mulmod(val, mload(0x2c60), PRIME)\r\n\r\n              // res += val * coefficients[102].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[102]*/ mload(0x10c0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/add_results/x_diff_inv: column8_row32656 * (column8_row32640 - column7_row16375) - 1.\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*column8_row32656*/ mload(0x21a0),\r\n                  addmod(\r\n                    /*column8_row32640*/ mload(0x2180),\r\n                    sub(PRIME, /*column7_row16375*/ mload(0x1f60)),\r\n                    PRIME),\r\n                  PRIME),\r\n                sub(PRIME, 1),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 32768) - 1.\r\n              // val *= denominator_invs[20].\r\n              val := mulmod(val, mload(0x2c60), PRIME)\r\n\r\n              // res += val * coefficients[103].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[103]*/ mload(0x10e0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/extract_r/slope: column7_row32719 + ecdsa/sig_config.shift_point.y - column7_row16367 * (column7_row32759 - ecdsa/sig_config.shift_point.x).\r\n              let val := addmod(\r\n                addmod(\r\n                  /*column7_row32719*/ mload(0x1fe0),\r\n                  /*ecdsa/sig_config.shift_point.y*/ mload(0x300),\r\n                  PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  mulmod(\r\n                    /*column7_row16367*/ mload(0x1f40),\r\n                    addmod(\r\n                      /*column7_row32759*/ mload(0x2020),\r\n                      sub(PRIME, /*ecdsa/sig_config.shift_point.x*/ mload(0x2e0)),\r\n                      PRIME),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 32768) - 1.\r\n              // val *= denominator_invs[20].\r\n              val := mulmod(val, mload(0x2c60), PRIME)\r\n\r\n              // res += val * coefficients[104].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[104]*/ mload(0x1100), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/extract_r/x: column7_row16367 * column7_row16367 - (column7_row32759 + ecdsa/sig_config.shift_point.x + column7_row31).\r\n              let val := addmod(\r\n                mulmod(/*column7_row16367*/ mload(0x1f40), /*column7_row16367*/ mload(0x1f40), PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(\r\n                    addmod(\r\n                      /*column7_row32759*/ mload(0x2020),\r\n                      /*ecdsa/sig_config.shift_point.x*/ mload(0x2e0),\r\n                      PRIME),\r\n                    /*column7_row31*/ mload(0x1ce0),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 32768) - 1.\r\n              // val *= denominator_invs[20].\r\n              val := mulmod(val, mload(0x2c60), PRIME)\r\n\r\n              // res += val * coefficients[105].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[105]*/ mload(0x1120), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/extract_r/x_diff_inv: column7_row32751 * (column7_row32759 - ecdsa/sig_config.shift_point.x) - 1.\r\n              let val := addmod(\r\n                mulmod(\r\n                  /*column7_row32751*/ mload(0x2000),\r\n                  addmod(\r\n                    /*column7_row32759*/ mload(0x2020),\r\n                    sub(PRIME, /*ecdsa/sig_config.shift_point.x*/ mload(0x2e0)),\r\n                    PRIME),\r\n                  PRIME),\r\n                sub(PRIME, 1),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 32768) - 1.\r\n              // val *= denominator_invs[20].\r\n              val := mulmod(val, mload(0x2c60), PRIME)\r\n\r\n              // res += val * coefficients[106].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[106]*/ mload(0x1140), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/z_nonzero: column8_row96 * column7_row16383 - 1.\r\n              let val := addmod(\r\n                mulmod(/*column8_row96*/ mload(0x2100), /*column7_row16383*/ mload(0x1f80), PRIME),\r\n                sub(PRIME, 1),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 32768) - 1.\r\n              // val *= denominator_invs[20].\r\n              val := mulmod(val, mload(0x2c60), PRIME)\r\n\r\n              // res += val * coefficients[107].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[107]*/ mload(0x1160), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/r_and_w_nonzero: column7_row31 * column7_row16343 - 1.\r\n              let val := addmod(\r\n                mulmod(/*column7_row31*/ mload(0x1ce0), /*column7_row16343*/ mload(0x1f20), PRIME),\r\n                sub(PRIME, 1),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 16384) - 1.\r\n              // val *= denominator_invs[21].\r\n              val := mulmod(val, mload(0x2c80), PRIME)\r\n\r\n              // res += val * coefficients[108].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[108]*/ mload(0x1180), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/q_on_curve/x_squared: column7_row32767 - column7_row7 * column7_row7.\r\n              let val := addmod(\r\n                /*column7_row32767*/ mload(0x2040),\r\n                sub(\r\n                  PRIME,\r\n                  mulmod(/*column7_row7*/ mload(0x1ba0), /*column7_row7*/ mload(0x1ba0), PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 32768) - 1.\r\n              // val *= denominator_invs[20].\r\n              val := mulmod(val, mload(0x2c60), PRIME)\r\n\r\n              // res += val * coefficients[109].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[109]*/ mload(0x11a0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/signature0/q_on_curve/on_curve: column7_row39 * column7_row39 - (column7_row7 * column7_row32767 + ecdsa/sig_config.alpha * column7_row7 + ecdsa/sig_config.beta).\r\n              let val := addmod(\r\n                mulmod(/*column7_row39*/ mload(0x1d00), /*column7_row39*/ mload(0x1d00), PRIME),\r\n                sub(\r\n                  PRIME,\r\n                  addmod(\r\n                    addmod(\r\n                      mulmod(/*column7_row7*/ mload(0x1ba0), /*column7_row32767*/ mload(0x2040), PRIME),\r\n                      mulmod(/*ecdsa/sig_config.alpha*/ mload(0x2c0), /*column7_row7*/ mload(0x1ba0), PRIME),\r\n                      PRIME),\r\n                    /*ecdsa/sig_config.beta*/ mload(0x320),\r\n                    PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 32768) - 1.\r\n              // val *= denominator_invs[20].\r\n              val := mulmod(val, mload(0x2c60), PRIME)\r\n\r\n              // res += val * coefficients[110].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[110]*/ mload(0x11c0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/init_addr: column5_row390 - initial_ecdsa_addr.\r\n              let val := addmod(\r\n                /*column5_row390*/ mload(0x1980),\r\n                sub(PRIME, /*initial_ecdsa_addr*/ mload(0x340)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point - 1.\r\n              // val *= denominator_invs[3].\r\n              val := mulmod(val, mload(0x2a40), PRIME)\r\n\r\n              // res += val * coefficients[111].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[111]*/ mload(0x11e0), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/message_addr: column5_row16774 - (column5_row390 + 1).\r\n              let val := addmod(\r\n                /*column5_row16774*/ mload(0x19e0),\r\n                sub(PRIME, addmod(/*column5_row390*/ mload(0x1980), 1, PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 32768) - 1.\r\n              // val *= denominator_invs[20].\r\n              val := mulmod(val, mload(0x2c60), PRIME)\r\n\r\n              // res += val * coefficients[112].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[112]*/ mload(0x1200), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/pubkey_addr: column5_row33158 - (column5_row16774 + 1).\r\n              let val := addmod(\r\n                /*column5_row33158*/ mload(0x1a20),\r\n                sub(PRIME, addmod(/*column5_row16774*/ mload(0x19e0), 1, PRIME)),\r\n                PRIME)\r\n\r\n              // Numerator: point - trace_generator^(32768 * (trace_length / 32768 - 1)).\r\n              // val *= numerators[10].\r\n              val := mulmod(val, mload(0x30a0), PRIME)\r\n              // Denominator: point^(trace_length / 32768) - 1.\r\n              // val *= denominator_invs[20].\r\n              val := mulmod(val, mload(0x2c60), PRIME)\r\n\r\n              // res += val * coefficients[113].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[113]*/ mload(0x1220), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/message_value0: column5_row16775 - column8_row96.\r\n              let val := addmod(\r\n                /*column5_row16775*/ mload(0x1a00),\r\n                sub(PRIME, /*column8_row96*/ mload(0x2100)),\r\n                PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 32768) - 1.\r\n              // val *= denominator_invs[20].\r\n              val := mulmod(val, mload(0x2c60), PRIME)\r\n\r\n              // res += val * coefficients[114].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[114]*/ mload(0x1240), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n              {\r\n              // Constraint expression for ecdsa/pubkey_value0: column5_row391 - column7_row7.\r\n              let val := addmod(/*column5_row391*/ mload(0x19a0), sub(PRIME, /*column7_row7*/ mload(0x1ba0)), PRIME)\r\n\r\n              // Numerator: 1.\r\n              // val *= 1.\r\n              // val := mulmod(val, 1, PRIME).\r\n              // Denominator: point^(trace_length / 32768) - 1.\r\n              // val *= denominator_invs[20].\r\n              val := mulmod(val, mload(0x2c60), PRIME)\r\n\r\n              // res += val * coefficients[115].\r\n              res := addmod(res,\r\n                            mulmod(val, /*coefficients[115]*/ mload(0x1260), PRIME),\r\n                            PRIME)\r\n              }\r\n\r\n            mstore(0, res)\r\n            return(0, 0x20)\r\n            }\r\n        }\r\n    }\r\n}\r\n// ---------- End of auto-generated code. ----------","ABI":"[{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]","ContractName":"CpuConstraintPoly","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1ca00d5b064f5cf9df2b4251989bbecb07aa2c20d4c0e388e60ad4d9430a45f5"}]}