{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NounsParty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"./interfaces/IFracTokenVault.sol\\\";\\nimport \\\"./interfaces/IFracVaultFactory.sol\\\";\\nimport \\\"./interfaces/INounsAuctionHouse.sol\\\";\\nimport \\\"./interfaces/INounsParty.sol\\\";\\nimport \\\"./interfaces/INounsToken.sol\\\";\\n\\n/**\\n * @title NounsParty contract\\n * @author twitter.com/devloper_eth\\n * @notice Nouns party is an effort aimed at making community-driven nouns bidding easier, more interactive, and more likely to win than today's strategies.\\n */\\n// solhint-disable max-states-count\\ncontract NounsParty is\\n\\tINounsParty,\\n\\tInitializable,\\n\\tOwnableUpgradeable,\\n\\tPausableUpgradeable,\\n\\tReentrancyGuardUpgradeable,\\n\\tUUPSUpgradeable\\n{\\n\\tuint256 private constant ETH1_1000 = 1_000_000_000_000_000; // 0.001 eth\\n\\tuint256 private constant ETH1_10 = 100_000_000_000_000_000; // 0.1 eth\\n\\n\\t/// @dev post fractionalized token fee\\n\\tuint256 public nounsPartyFee;\\n\\n\\t/// @dev max increase in percent for bids\\n\\tuint256 public bidIncrease;\\n\\tuint256 public nounsAuctionHouseBidIncrease;\\n\\n\\tuint256 public currentNounId;\\n\\tuint256 public currentBidAmount;\\n\\n\\t/**\\n\\t * @dev poolWriteCursor is a global cursor indicating where to write in `pool`.\\n\\t *      For each new deposit to `pool` it will increase by 1.\\n\\t *      Read more in deposit().\\n\\t */\\n\\tuint256 private poolWriteCursor;\\n\\n\\t/// @dev poolReadCursor is a \\\"global\\\" cursor indicating which position to read next from the pool.\\n\\tuint256 private poolReadCursor;\\n\\n\\t/// @notice the balance of all deposits\\n\\tuint256 public depositBalance;\\n\\n\\t/// @dev use deposits() to read pool\\n\\tmapping(uint256 => Deposit) private pool;\\n\\n\\t/// @notice claims has information about who can claim NOUN tokens after a successful auction\\n\\t/// @dev claims is populated in _depositsToClaims()\\n\\tmapping(address => TokenClaim[]) public claims;\\n\\n\\t/// @notice map nounIds to fractional.art token vaults,  mapping(nounId) => fracTokenVaultAddress\\n\\t/// @dev only holds mappings for won auctions, but stores it forever. mappings aren't deleted. TokenClaims rely on fracTokenVaults - addresses should never change after first write.\\n\\tmapping(uint256 => address) public fracTokenVaults;\\n\\n\\taddress public fracVaultFactoryAddress;\\n\\taddress public nounsPartyCuratorAddress;\\n\\taddress public nounsPartyTreasuryAddress;\\n\\taddress public nounsTokenAddress;\\n\\n\\tINounsAuctionHouse public nounsAuctionHouse;\\n\\tINounsToken public nounsToken;\\n\\tIFracVaultFactory public fracVaultFactory;\\n\\n\\tbool public activeAuction;\\n\\tbool public allowBid;\\n\\n\\tfunction initialize(\\n\\t\\taddress _nounsAuctionHouseAddress,\\n\\t\\taddress _nounsTokenAddress,\\n\\t\\taddress _fracVaultFactoryAddress,\\n\\t\\taddress _nounsPartyCuratorAddress,\\n\\t\\taddress _nounsPartyTreasuryAddress,\\n\\t\\tuint256 _nounsAuctionHouseBidIncrease\\n\\t) public initializer {\\n\\t\\t__Ownable_init();\\n\\t\\t__UUPSUpgradeable_init();\\n\\t\\t__ReentrancyGuard_init();\\n\\t\\t__Pausable_init();\\n\\n\\t\\trequire(_nounsAuctionHouseAddress != address(0), \\\"zero nounsAuctionHouseAddress\\\");\\n\\t\\trequire(_nounsTokenAddress != address(0), \\\"zero nounsTokenAddress\\\");\\n\\t\\trequire(_fracVaultFactoryAddress != address(0), \\\"zero fracVaultFactoryAddress\\\");\\n\\t\\trequire(_nounsPartyCuratorAddress != address(0), \\\"zero nounsPartyCuratorAddress\\\");\\n\\t\\trequire(_nounsPartyTreasuryAddress != address(0), \\\"zero nounsPartyTreasuryAddress\\\");\\n\\n\\t\\tnounsTokenAddress = _nounsTokenAddress;\\n\\t\\tnounsPartyCuratorAddress = _nounsPartyCuratorAddress;\\n\\t\\tfracVaultFactoryAddress = _fracVaultFactoryAddress;\\n\\t\\tnounsPartyTreasuryAddress = _nounsPartyTreasuryAddress;\\n\\t\\tnounsAuctionHouse = INounsAuctionHouse(_nounsAuctionHouseAddress);\\n\\t\\tnounsToken = INounsToken(_nounsTokenAddress);\\n\\t\\tfracVaultFactory = IFracVaultFactory(_fracVaultFactoryAddress);\\n\\n\\t\\tpoolWriteCursor = 1; // must start at 1\\n\\t\\tpoolReadCursor = 1; // must start at 1\\n\\n\\t\\t_resetActiveAuction();\\n\\n\\t\\tallowBid = true;\\n\\n\\t\\tnounsPartyFee = 25; // 2.5%\\n\\n\\t\\t/// @dev min bid increase percentages\\n\\t\\tbidIncrease = 30; // 3%\\n\\t\\tnounsAuctionHouseBidIncrease = _nounsAuctionHouseBidIncrease; // 2% in mainnet, 5% in rinkeby (Sep 2021)\\n\\t}\\n\\n\\t/// @notice Puts ETH into our bidding pool.\\n\\t/// @dev Using `pool` and `poolWriteCursor` we keep track of deposit ordering over time.\\n\\tfunction deposit() external payable nonReentrant whenNotPaused {\\n\\t\\trequire(msg.sender != address(0), \\\"zero msg.sender\\\");\\n\\n\\t\\t// Verify deposit amount to ensure fractionalizing will produce whole numbers.\\n\\t\\trequire(msg.value % ETH1_1000 == 0, \\\"Must be in 0.001 ETH increments\\\");\\n\\n\\t\\t// v0 asks for a 0.1 eth minimum deposit.\\n\\t\\t// v1 will ask for 0.001 eth as minimum deposit.\\n\\t\\trequire(msg.value >= ETH1_10, \\\"Minimum deposit is 0.1 ETH\\\");\\n\\n\\t\\t// v0 caps the number of deposits at 250, to prevent too costly settle calls.\\n\\t\\t// v1 will lift this cap.\\n\\t\\trequire(poolWriteCursor - poolReadCursor < 250, \\\"Too many deposits\\\");\\n\\n\\t\\t// Create a new deposit and add it to the pool.\\n\\t\\tDeposit memory d = Deposit({ owner: msg.sender, amount: msg.value });\\n\\t\\tpool[poolWriteCursor] = d;\\n\\n\\t\\t// poolWriteCursor is never reset and continuously increases over the lifetime of this contract.\\n\\t\\t// Solidity checks for overflows, in which case the deposit would safely revert and a new contract would have to be deployed.\\n\\t\\t// But hey, poolWriteCursor is of type uint256 which is a really really really big number (2^256-1 to be exact).\\n\\t\\t// Considering that the minimum bid is 0.001 ETH + gas cost, which would make a DOS attack very expensive at current price rates,\\n\\t\\t// we should never see poolWriteCursor overflow.\\n\\t\\t// Ah, poolReadCursor which follows poolWriteCursor faces the same fate.\\n\\t\\t//\\n\\t\\t// Why not use an array you might ask? Our logic would cause gaps in our array to form over time,\\n\\t\\t// causing unnecessary/expensive index lookups and shifts. `pool` is essentially a mapping turned\\n\\t\\t// into an ordered array, using poolWriteCursor as sequential index.\\n\\t\\tpoolWriteCursor++;\\n\\n\\t\\t// Increase deposit balance\\n\\t\\tdepositBalance = depositBalance + msg.value;\\n\\n\\t\\temit LogDeposit(msg.sender, msg.value);\\n\\t}\\n\\n\\t/// @notice Bid for the given noun's auction.\\n\\t/// @dev Bid amounts don't have to be in 0.001 ETH increments, just deposits.\\n\\tfunction bid() external payable nonReentrant whenNotPaused {\\n\\t\\trequire(allowBid, \\\"Bidding disabled\\\");\\n\\n\\t\\t_trySettle();\\n\\n\\t\\t(uint256 nounId, uint256 amount) = calcBidAmount();\\n\\n\\t\\trequire(!activeAuction || currentNounId == nounId, \\\"Settle previous auction first\\\");\\n\\n\\t\\tcurrentBidAmount = amount;\\n\\n\\t\\t// first time bidding on this noun?\\n\\t\\tif (!activeAuction) {\\n\\t\\t\\tactiveAuction = true;\\n\\t\\t\\tcurrentNounId = nounId;\\n\\t\\t}\\n\\n\\t\\temit LogBid(nounId, currentBidAmount, msg.sender);\\n\\t\\tnounsAuctionHouse.createBid{ value: currentBidAmount }(nounId);\\n\\t}\\n\\n\\t/// @notice Settles an auction.\\n\\t/// @dev Needs to be called after every auction to determine if we won or lost, and create token claims if we won.\\n\\tfunction settle() external nonReentrant whenNotPaused {\\n\\t\\trequire(activeAuction, \\\"Nothing to settle\\\");\\n\\t\\tNounStatus status = nounStatus(currentNounId);\\n\\n\\t\\tif (status == NounStatus.MINTED) {\\n\\t\\t\\trevert(\\\"Noun not sold yet\\\");\\n\\t\\t} else if (status == NounStatus.NOTFOUND) {\\n\\t\\t\\trevert(\\\"Noun not found\\\");\\n\\t\\t} else if (status == NounStatus.WON) {\\n\\t\\t\\t_settleWon();\\n\\t\\t} else if (status == NounStatus.BURNED || status == NounStatus.LOST) {\\n\\t\\t\\t_settleLost();\\n\\t\\t} else {\\n\\t\\t\\trevert(\\\"Unknown Noun Status\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev will settle won or lost/burned auctions, if possible\\n\\tfunction _trySettle() private {\\n\\t\\tif (activeAuction) {\\n\\t\\t\\tNounStatus status = nounStatus(currentNounId);\\n\\t\\t\\tif (status == NounStatus.WON) {\\n\\t\\t\\t\\t_settleWon();\\n\\t\\t\\t} else if (status == NounStatus.BURNED || status == NounStatus.LOST) {\\n\\t\\t\\t\\t_settleLost();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _settleWon() private {\\n\\t\\temit LogSettleWon(currentNounId);\\n\\n\\t\\t// Turn NFT into ERC20 tokens\\n\\t\\t(address fracTokenVaultAddress, uint256 fee) = _fractionalize(\\n\\t\\t\\tcurrentBidAmount, // bid amount\\n\\t\\t\\tcurrentNounId\\n\\t\\t);\\n\\n\\t\\tfracTokenVaults[currentNounId] = fracTokenVaultAddress;\\n\\t\\t_depositsToClaims(currentBidAmount, currentNounId);\\n\\t\\t_resetActiveAuction();\\n\\n\\t\\t// Send fee to our treasury wallet.\\n\\t\\tIFracTokenVault fracTokenVault = IFracTokenVault(fracTokenVaultAddress);\\n\\t\\trequire(fracTokenVault.transfer(nounsPartyTreasuryAddress, fee), \\\"Fee transfer failed\\\");\\n\\t}\\n\\n\\tfunction _settleLost() private {\\n\\t\\temit LogSettleLost(currentNounId);\\n\\t\\t_resetActiveAuction();\\n\\t}\\n\\n\\tfunction _resetActiveAuction() private {\\n\\t\\tactiveAuction = false;\\n\\t\\tcurrentNounId = 0;\\n\\t\\tcurrentBidAmount = 0;\\n\\t}\\n\\n\\t/// @notice Claim tokens from won auctions\\n\\t/// @dev nonReentrant is very important here to prevent Reentrancy.\\n\\tfunction claim() external nonReentrant whenNotPaused {\\n\\t\\trequire(msg.sender != address(0), \\\"zero msg.sender\\\");\\n\\n\\t\\t// Iterate over all claims for msg.sender and transfer tokens.\\n\\t\\tuint256 length = claims[msg.sender].length;\\n\\t\\tfor (uint256 index = 0; index < length; index++) {\\n\\t\\t\\tTokenClaim memory c = claims[msg.sender][index];\\n\\t\\t\\taddress fracTokenVaultAddress = fracTokenVaults[c.nounId];\\n\\t\\t\\trequire(fracTokenVaultAddress != address(0), \\\"zero fracTokenVault address\\\");\\n\\n\\t\\t\\temit LogClaim(msg.sender, c.nounId, fracTokenVaultAddress, c.tokens / uint256(1 ether));\\n\\n\\t\\t\\tIFracTokenVault fracTokenVault = IFracTokenVault(fracTokenVaultAddress);\\n\\t\\t\\trequire(fracTokenVault.transfer(msg.sender, c.tokens), \\\"Token transfer failed\\\");\\n\\t\\t}\\n\\n\\t\\t// Check-Effects-Interactions pattern can't be followed in this case, hence nonReentrant\\n\\t\\t// is so important for this function.\\n\\t\\tdelete claims[msg.sender];\\n\\t}\\n\\n\\t/// @notice Withdraw deposits that haven't been used to bid on a noun.\\n\\tfunction withdraw() external payable whenNotPaused nonReentrant {\\n\\t\\trequire(msg.sender != address(0), \\\"zero msg.sender\\\");\\n\\t\\trequire(!auctionIsHot(), \\\"Auction is hot\\\");\\n\\n\\t\\tuint256 amount = 0;\\n\\t\\tuint256 reserve = currentBidAmount;\\n\\t\\tuint256 readCursor = poolReadCursor;\\n\\t\\twhile (readCursor <= poolWriteCursor) {\\n\\t\\t\\tuint256 x = pool[readCursor].amount;\\n\\n\\t\\t\\tif (reserve == 0) {\\n\\t\\t\\t\\tif (pool[readCursor].owner == msg.sender) {\\n\\t\\t\\t\\t\\tamount += x;\\n\\t\\t\\t\\t\\tdelete pool[readCursor];\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (reserve >= x) {\\n\\t\\t\\t\\treserve -= x;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// reserve < x\\n\\t\\t\\t\\tif (pool[readCursor].owner == msg.sender) {\\n\\t\\t\\t\\t\\tpool[readCursor].amount = reserve;\\n\\t\\t\\t\\t\\tamount += x - reserve;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treserve = 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\treadCursor++;\\n\\t\\t}\\n\\n\\t\\trequire(amount > 0, \\\"Insufficient funds\\\");\\n\\t\\tdepositBalance = depositBalance - amount;\\n\\t\\temit LogWithdraw(msg.sender, amount);\\n\\t\\t_transferETH(msg.sender, amount);\\n\\t}\\n\\n\\t/// @notice Returns an estimated withdrawable amount. Estimated because future bids might restrict withdrawals.\\n\\tfunction withdrawableAmount(address _owner) external view returns (uint256) {\\n\\t\\tif (auctionIsHot()) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 amount = 0;\\n\\t\\tuint256 reserve = currentBidAmount;\\n\\t\\tuint256 readCursor = poolReadCursor;\\n\\t\\twhile (readCursor <= poolWriteCursor) {\\n\\t\\t\\tuint256 x = pool[readCursor].amount;\\n\\t\\t\\tif (reserve == 0) {\\n\\t\\t\\t\\tif (pool[readCursor].owner == _owner) {\\n\\t\\t\\t\\t\\tamount += x;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (reserve >= x) {\\n\\t\\t\\t\\treserve -= x;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// reserve < x\\n\\t\\t\\t\\tif (pool[readCursor].owner == _owner) {\\n\\t\\t\\t\\t\\tamount += x - reserve;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treserve = 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\treadCursor++;\\n\\t\\t}\\n\\n\\t\\treturn amount;\\n\\t}\\n\\n\\t/// @dev Iterates over all deposits in `pool` and creates `claims` which then allows users to claim their tokens.\\n\\tfunction _depositsToClaims(uint256 _amount, uint256 _nounId) private {\\n\\t\\t// Decrease depositBalance by amount\\n\\t\\tdepositBalance = depositBalance - _amount;\\n\\n\\t\\t// Use a temporary cursor here (to save gas), but write back to poolReadCursor at the end.\\n\\t\\tuint256 readCursor = poolReadCursor;\\n\\n\\t\\t// Read until we iterated through the pool, but also have an eye on amount.\\n\\t\\t// We can stop iterating if we already \\\"filled\\\" _amount with enough deposits.\\n\\t\\twhile (readCursor <= poolWriteCursor && _amount > 0) {\\n\\t\\t\\t// Delete and skip if deposit is zero\\n\\t\\t\\tif (pool[readCursor].owner == address(0) || pool[readCursor].amount == 0) {\\n\\t\\t\\t\\tdelete pool[readCursor]; // delete deposit, it's already zero'd out anyway.\\n\\t\\t\\t\\treadCursor++;\\n\\t\\t\\t\\tcontinue; // to the next deposit\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Can we use the full deposit amount?\\n\\t\\t\\tif (pool[readCursor].amount <= _amount) {\\n\\t\\t\\t\\t// Reduce amount by this deposit's amount\\n\\t\\t\\t\\t_amount = _amount - pool[readCursor].amount;\\n\\n\\t\\t\\t\\t// Create a token claim for depositor.\\n\\t\\t\\t\\tTokenClaim memory t0 = TokenClaim({\\n\\t\\t\\t\\t\\ttokens: pool[readCursor].amount * 1000, // full amount of deposit turned into tokens\\n\\t\\t\\t\\t\\tnounId: _nounId\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tclaims[pool[readCursor].owner].push(t0);\\n\\n\\t\\t\\t\\t// Delete deposit, to prevent multiple claims.\\n\\t\\t\\t\\tdelete pool[readCursor];\\n\\t\\t\\t\\treadCursor++;\\n\\t\\t\\t\\tcontinue; // to the next deposit\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If we reach this line, we know:\\n\\t\\t\\t// 1) _amount is > 0 and\\n\\t\\t\\t// 2) pool[readCursor].amount > 0 and\\n\\t\\t\\t// 3) pool[readCursor].amount > _amount\\n\\n\\t\\t\\t// Create a token claim for depositor, but only with partial amounts and tokens.\\n\\t\\t\\tTokenClaim memory t1 = TokenClaim({\\n\\t\\t\\t\\ttokens: _amount * 1000, // remaining _amount turned into tokens\\n\\t\\t\\t\\tnounId: _nounId\\n\\t\\t\\t});\\n\\t\\t\\tclaims[pool[readCursor].owner].push(t1);\\n\\n\\t\\t\\t// Don't forget to update the original deposit with the reduced amount.\\n\\t\\t\\tpool[readCursor].amount = pool[readCursor].amount - _amount;\\n\\n\\t\\t\\t// The math only checks out, if _amount equals 0 at the end.\\n\\t\\t\\t// Which means we 100% \\\"filled\\\" _amount.\\n\\t\\t\\t_amount = _amount - _amount;\\n\\t\\t\\tassert(_amount == 0);\\n\\n\\t\\t\\t// Do not advance poolReadCursor for deposits that still have a balance.\\n\\t\\t\\t// So no `readCursor++` here!\\n\\n\\t\\t\\t// Also, since _amount is now 0, we will exit from the while loop now.\\n\\t\\t}\\n\\n\\t\\t// Write our temporary readCursor back to the state variable.\\n\\t\\tpoolReadCursor = readCursor;\\n\\t}\\n\\n\\t/// @dev Calls fractional.art's contracts to turn a noun NFT into fractionalized ERC20 tokens.\\n\\t/// @param _amount cost of the noun\\n\\t/// @param _nounId noun id\\n\\t/// @return tokenVaultAddress ERC20 vault address\\n\\t/// @return fee how many tokens we keep as fee\\n\\tfunction _fractionalize(uint256 _amount, uint256 _nounId) private returns (address tokenVaultAddress, uint256 fee) {\\n\\t\\trequire(_amount >= ETH1_1000, \\\"Amount must be >= 0.001 ETH\\\");\\n\\n\\t\\t// symbol = \\\"Noun\\\" + _nounId, like Noun13, Noun14, ...\\n\\t\\tstring memory symbol = string(abi.encodePacked(\\\"Noun\\\", StringsUpgradeable.toString(_nounId)));\\n\\n\\t\\t// Calculate token supply by integer division: _amount * 1000 / 1e18\\n\\t\\t// Integer divisions round towards zero.\\n\\t\\t// For example: 1.9 tokens would turn into 1 token.\\n\\t\\t// This can lead to a minimal value inflation of the total supply by at max 0.9999... tokens,\\n\\t\\t// which again is so small it's neglectable.\\n\\t\\tuint256 supply = uint256(_amount * 1000) / uint256(1 ether);\\n\\t\\trequire(supply >= 1, \\\"Fractionalization failed\\\");\\n\\n\\t\\t// Calculate fee based on supply by integer division.\\n\\t\\t// Integer division means we don't charge a fee for bids 0.04 or less.\\n\\t\\t// For bids above 0.04 we minimally decrease our effective fee to produce whole numbers where necessary.\\n\\t\\tfee = uint256(supply * 1000 * nounsPartyFee) / uint256(1000000);\\n\\n\\t\\tuint256 adjustedSupply = supply + fee;\\n\\n\\t\\temit LogFractionalize(_nounId, adjustedSupply, fee);\\n\\n\\t\\t// Approve fractional.art to take over our noun NFT.\\n\\t\\tnounsToken.approve(fracVaultFactoryAddress, _nounId);\\n\\n\\t\\t// Let fractional.art create some ERC20 tokens for us.\\n\\t\\tuint256 vaultNumber = fracVaultFactory.mint(\\n\\t\\t\\tsymbol,\\n\\t\\t\\tsymbol,\\n\\t\\t\\tnounsTokenAddress,\\n\\t\\t\\t_nounId,\\n\\t\\t\\t(adjustedSupply) * 1 ether, // convert back to wei (1 eth == 1e18)\\n\\t\\t\\t_amount * 5, // listPrice is the the initial price of the NFT\\n\\t\\t\\t0 // annual management fee (see our fee instead)\\n\\t\\t);\\n\\n\\t\\t// Set our curator address.\\n\\t\\ttokenVaultAddress = fracVaultFactory.vaults(vaultNumber);\\n\\t\\tIFracTokenVault(tokenVaultAddress).updateCurator(nounsPartyCuratorAddress);\\n\\n\\t\\treturn (tokenVaultAddress, fee * 1 ether); // convert back to wei\\n\\t}\\n\\n\\t/// @notice Deposits returns all available deposits.\\n\\t/// @dev Deposits reads from `pool` using a temporary readCursor.\\n\\t/// @return A list of all available deposits.\\n\\tfunction deposits() external view returns (Deposit[] memory) {\\n\\t\\t// Determine pool length so we can build a new fixed-size array.\\n\\t\\tuint256 size = 0;\\n\\t\\tuint256 readCursor = poolReadCursor;\\n\\t\\twhile (readCursor <= poolWriteCursor) {\\n\\t\\t\\tif (pool[readCursor].owner != address(0) && pool[readCursor].amount > 0) {\\n\\t\\t\\t\\tsize++;\\n\\t\\t\\t}\\n\\t\\t\\treadCursor++;\\n\\t\\t}\\n\\n\\t\\t// Create a new fixed-size Deposit array.\\n\\t\\tDeposit[] memory depos = new Deposit[](size);\\n\\t\\treadCursor = poolReadCursor;\\n\\t\\tuint256 cursor = 0;\\n\\t\\twhile (readCursor <= poolWriteCursor) {\\n\\t\\t\\tif (pool[readCursor].owner != address(0) && pool[readCursor].amount > 0) {\\n\\t\\t\\t\\tdepos[cursor] = pool[readCursor];\\n\\t\\t\\t\\tcursor++;\\n\\t\\t\\t}\\n\\t\\t\\treadCursor++;\\n\\t\\t}\\n\\n\\t\\treturn depos;\\n\\t}\\n\\n\\t/// @notice Indicates if a auction is about to start/live.\\n\\t/// @dev External because it \\\"implements\\\" the INounsParty interface.\\n\\t/// @return true if auction is live (aka hot).\\n\\tfunction auctionIsHot() public view returns (bool) {\\n\\t\\t(, , , uint256 endTime, , bool settled) = nounsAuctionHouse.auction();\\n\\n\\t\\t// If auction has been settled, it can't be hot. Or we got a zero endTime?!\\n\\t\\tif (settled || endTime == 0) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Is this auction hot or not?\\n\\t\\t// .......... [ -1 hour ............ endTime .. + 10 minutes ] ........\\n\\t\\t// not hot    |--------------- hot --------------------------|  not hot\\n\\t\\t// solhint-disable not-rely-on-time\\n\\t\\tif (block.timestamp >= endTime - 1 hours && block.timestamp <= endTime + 10 minutes) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\treturn false;\\n\\t}\\n\\n\\tfunction calcBidAmount() public view returns (uint256 _nounId, uint256 _amount) {\\n\\t\\t(uint256 nounId, uint256 amount, , , address bidder, bool settled) = nounsAuctionHouse.auction();\\n\\n\\t\\trequire(nounId > 0, \\\"zero noun\\\");\\n\\t\\trequire(!settled, \\\"Inactive auction\\\");\\n\\t\\trequire(bidder != address(this), \\\"Already winning\\\");\\n\\n\\t\\tuint256 newBid = _round_eth1_1000(\\n\\t\\t\\tamount + ((amount * 1000 * (bidIncrease + nounsAuctionHouseBidIncrease)) / uint256(1000000))\\n\\t\\t);\\n\\n\\t\\tif (newBid == 0) {\\n\\t\\t\\tnewBid = ETH1_10;\\n\\t\\t}\\n\\n\\t\\tif (newBid > depositBalance) {\\n\\t\\t\\tnewBid = _round_eth1_1000(depositBalance);\\n\\t\\t}\\n\\n\\t\\tuint256 minBid = amount + ((amount * 1000 * nounsAuctionHouseBidIncrease) / uint256(1000000));\\n\\t\\trequire(newBid >= minBid, \\\"Insufficient funds\\\");\\n\\n\\t\\t// Make sure we are bidding more than our previous bid.\\n\\t\\trequire(newBid > currentBidAmount, \\\"Minimum bid not reached\\\");\\n\\n\\t\\t// Make sure we bid at least 0.001 ETH to ensure best fractionalizations results.\\n\\t\\trequire(newBid >= ETH1_1000, \\\"Minimum bid is 0.001 ETH\\\");\\n\\n\\t\\t// We should never see this error, because we are always checking\\n\\t\\t// depositBalance, not the contracts' balance. Checking just in case.\\n\\t\\trequire(address(this).balance >= newBid, \\\"Insufficient balance\\\");\\n\\n\\t\\treturn (nounId, newBid);\\n\\t}\\n\\n\\t/// @dev nonRevertingCalcBidAmountAfterSettle is like calcBidAmount but returns (0, 0) instead of reverting in case of an error.\\n\\t///      Why? Our frontend uses package `EthWorks/useDApp` which uses Multicall v1.\\n\\t///      Multicall v1 will fail if just one out of many calls fails.\\n\\t///      See also https://github.com/EthWorks/useDApp/issues/334.\\n\\t///      Please note that this workaround function does NOT affect\\n\\t///      the integrity or security of this contract.\\n\\t///      And yep, it's super annoying.\\n\\tfunction nonRevertingCalcBidAmountAfterSettle()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 _nounId,\\n\\t\\t\\tuint256 _amount,\\n\\t\\t\\tstring memory _message\\n\\t\\t)\\n\\t{\\n\\t\\t(uint256 nounId, uint256 amount, , , address bidder, bool settled) = nounsAuctionHouse.auction();\\n\\n\\t\\tif (nounId == 0) {\\n\\t\\t\\treturn (0, 0, \\\"zero noun\\\");\\n\\t\\t}\\n\\t\\tif (settled) {\\n\\t\\t\\treturn (0, 0, \\\"Inactive auction\\\");\\n\\t\\t}\\n\\t\\tif (bidder == address(this)) {\\n\\t\\t\\treturn (0, 0, \\\"Already winning\\\");\\n\\t\\t}\\n\\n\\t\\tuint256 newBid = _round_eth1_1000(\\n\\t\\t\\tamount + ((amount * 1000 * (bidIncrease + nounsAuctionHouseBidIncrease)) / uint256(1000000))\\n\\t\\t);\\n\\n\\t\\tif (newBid == 0) {\\n\\t\\t\\tnewBid = ETH1_10;\\n\\t\\t}\\n\\n\\t\\t// simulate deposit balance in case we won the previous auction\\n\\t\\tuint256 tmpDepositBalance = depositBalance;\\n\\t\\tif (activeAuction) {\\n\\t\\t\\tNounStatus status = nounStatus(currentNounId);\\n\\t\\t\\tif (status == NounStatus.WON) {\\n\\t\\t\\t\\ttmpDepositBalance -= currentBidAmount;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (newBid > tmpDepositBalance) {\\n\\t\\t\\tnewBid = _round_eth1_1000(tmpDepositBalance);\\n\\t\\t}\\n\\n\\t\\tuint256 minBid = amount + ((amount * 1000 * nounsAuctionHouseBidIncrease) / uint256(1000000));\\n\\t\\tif (newBid < minBid) {\\n\\t\\t\\treturn (0, 0, \\\"Insufficient funds\\\");\\n\\t\\t}\\n\\n\\t\\t// Make sure we bid at least 0.001 ETH to ensure best fractionalizations results.\\n\\t\\tif (newBid < ETH1_1000) {\\n\\t\\t\\treturn (0, 0, \\\"Minimum bid is 0.001 ETH\\\");\\n\\t\\t}\\n\\n\\t\\t// We should never see this error, because we are always checking\\n\\t\\t// depositBalance, not the contracts' balance. Checking just in case.\\n\\t\\tif (address(this).balance < newBid) {\\n\\t\\t\\treturn (0, 0, \\\"Insufficient balance\\\");\\n\\t\\t}\\n\\n\\t\\treturn (nounId, newBid, \\\"\\\");\\n\\t}\\n\\n\\t/// @dev round to next 0.001 ETH increment\\n\\t// solhint-disable-next-line func-name-mixedcase\\n\\tfunction _round_eth1_1000(uint256 amount) private pure returns (uint256) {\\n\\t\\treturn amount - (amount % ETH1_1000);\\n\\t}\\n\\n\\t/// @dev Check the `ownerOf` a noun to check its status.\\n\\t/// @return NounStatus, which is either WON, BURNED, MINTED, LOST or NOTFOUND.\\n\\tfunction nounStatus(uint256 _nounId) public view returns (NounStatus) {\\n\\t\\t// Life cycle of a noun, relevant in this context:\\n\\t\\t// 1. A new noun is minted:\\n\\t\\t// https://github.com/nounsDAO/nouns-monorepo/blob/e075e881c4d5aa89344c8ab6bfc202650eb89370/packages/nouns-contracts/contracts/NounsToken.sol#L149\\n\\t\\t// https://github.com/nounsDAO/nouns-monorepo/blob/e075e881c4d5aa89344c8ab6bfc202650eb89370/packages/nouns-contracts/contracts/NounsToken.sol#L258\\n\\t\\t// https://github.com/nounsDAO/nouns-monorepo/blob/e075e881c4d5aa89344c8ab6bfc202650eb89370/packages/nouns-contracts/contracts/base/ERC721.sol#L321\\n\\n\\t\\t// 2. Auction is settled, meaning the noun is either burned (nobody bid on it) or transfered to highest bidder.\\n\\t\\t// https://github.com/nounsDAO/nouns-monorepo/blob/e075e881c4d5aa89344c8ab6bfc202650eb89370/packages/nouns-contracts/contracts/NounsAuctionHouse.sol#L221\\n\\t\\t// https://github.com/nounsDAO/nouns-monorepo/blob/e075e881c4d5aa89344c8ab6bfc202650eb89370/packages/nouns-contracts/contracts/base/ERC721.sol#L182\\n\\n\\t\\ttry nounsToken.ownerOf(_nounId) returns (address nounOwner) {\\n\\t\\t\\tif (nounOwner == address(this)) {\\n\\t\\t\\t\\t// address(this) - that's us - won nounId.\\n\\t\\t\\t\\t// Remember, using address(this) not contract's owner() here. Both are different.\\n\\t\\t\\t\\treturn NounStatus.WON;\\n\\t\\t\\t} else if (nounOwner == address(0)) {\\n\\t\\t\\t\\t// nounId was burned\\n\\t\\t\\t\\t// Nouns are burned if nobody bids, or the winner could also burn their noun.\\n\\t\\t\\t\\treturn NounStatus.BURNED;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (nounOwner == nounsToken.minter()) {\\n\\t\\t\\t\\t\\t// nounId has been freshly minted and is still being auctioned off.\\n\\t\\t\\t\\t\\treturn NounStatus.MINTED;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// We don't know noun's owner. That means we lost the auction.\\n\\t\\t\\t\\t\\treturn NounStatus.LOST;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} catch {\\n\\t\\t\\t// ownerOf reverted. that means the nounId does not exist, unless something else happened, like a failed transaction.\\n\\t\\t\\treturn NounStatus.NOTFOUND;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Returns the number of open claims.\\n\\t/// @return Number of open claims.\\n\\tfunction claimsCount(address _address) external view returns (uint256) {\\n\\t\\treturn claims[_address].length;\\n\\t}\\n\\n\\t/// @dev Update nounsAuctionHouse.\\n\\tfunction setNounsAuctionHouseAddress(address _address) external nonReentrant whenPaused onlyOwner {\\n\\t\\trequire(_address != address(0), \\\"zero address\\\");\\n\\t\\tnounsAuctionHouse = INounsAuctionHouse(_address);\\n\\t}\\n\\n\\t/// @dev Update the nounsTokenAddress address and nounsToken.\\n\\tfunction setNounsTokenAddress(address _address) external nonReentrant whenPaused onlyOwner {\\n\\t\\trequire(_address != address(0), \\\"zero address\\\");\\n\\t\\tnounsTokenAddress = _address;\\n\\t\\tnounsToken = INounsToken(_address);\\n\\t}\\n\\n\\t/// @dev Update the fracVaultFactoryAddress address and fracVaultFactory.\\n\\tfunction setFracVaultFactoryAddress(address _address) external nonReentrant whenPaused onlyOwner {\\n\\t\\trequire(_address != address(0), \\\"zero address\\\");\\n\\t\\tfracVaultFactoryAddress = _address;\\n\\t\\tfracVaultFactory = IFracVaultFactory(_address);\\n\\t}\\n\\n\\t/// @dev Update the nounsPartyCuratorAddress address.\\n\\tfunction setNounsPartyCuratorAddress(address _address) external nonReentrant whenPaused onlyOwner {\\n\\t\\trequire(_address != address(0), \\\"zero address\\\");\\n\\t\\tnounsPartyCuratorAddress = _address;\\n\\t}\\n\\n\\t/// @dev Update the nounsPartyTreasuryAddress address.\\n\\tfunction setNounsPartyTreasuryAddress(address _address) external nonReentrant whenPaused onlyOwner {\\n\\t\\trequire(_address != address(0), \\\"zero address\\\");\\n\\t\\tnounsPartyTreasuryAddress = _address;\\n\\t}\\n\\n\\t/// @dev Update the nouns party fee.\\n\\tfunction setNounsPartyFee(uint256 _fee) external nonReentrant whenPaused onlyOwner {\\n\\t\\temit LogSetNounsPartyFee(_fee);\\n\\t\\tnounsPartyFee = _fee;\\n\\t}\\n\\n\\t/// @dev Update bid increase. No pause required.\\n\\tfunction setBidIncrease(uint256 _bidIncrease) external nonReentrant onlyOwner {\\n\\t\\trequire(_bidIncrease > 0, \\\"Must be > 0\\\");\\n\\t\\temit LogBidIncrease(_bidIncrease);\\n\\t\\tbidIncrease = _bidIncrease;\\n\\t}\\n\\n\\t/// @dev Update nounsAuctionHouse's bid increase. No pause required.\\n\\tfunction setNounsAuctionHouseBidIncrease(uint256 _bidIncrease) external nonReentrant onlyOwner {\\n\\t\\trequire(_bidIncrease > 0, \\\"Must be > 0\\\");\\n\\t\\temit LogNounsAuctionHouseBidIncrease(_bidIncrease);\\n\\t\\tnounsAuctionHouseBidIncrease = _bidIncrease;\\n\\t}\\n\\n\\t/// @dev Update allowBid. No pause required.\\n\\tfunction setAllowBid(bool _allow) external nonReentrant onlyOwner {\\n\\t\\temit LogAllowBid(_allow);\\n\\t\\tallowBid = _allow;\\n\\t}\\n\\n\\t/// @dev Pause the contract, freezing core functionalities to prevent bad things from happening in case of emergency.\\n\\tfunction pause() external nonReentrant onlyOwner {\\n\\t\\temit LogPause();\\n\\t\\t_pause();\\n\\t}\\n\\n\\t/// @dev Unpause the contract.\\n\\tfunction unpause() external nonReentrant onlyOwner {\\n\\t\\temit LogUnpause();\\n\\t\\t_unpause();\\n\\t}\\n\\n\\t/// @dev Authorize OpenZepplin's upgrade function, guarded by onlyOwner.\\n\\tfunction _authorizeUpgrade(address newImplementation) internal override onlyOwner {} // solhint-disable-line no-empty-blocks\\n\\n\\t/// @dev Transfer ETH and revert if unsuccessful. Only forward 30,000 gas to the callee.\\n\\tfunction _transferETH(address _to, uint256 _value) private {\\n\\t\\t(bool success, ) = _to.call{ value: _value, gas: 30_000 }(new bytes(0)); // solhint-disable-line avoid-low-level-calls\\n\\t\\trequire(success, \\\"Transfer failed\\\");\\n\\t}\\n\\n\\t/// @dev Allow contract to receive Eth. For example when we are outbid.\\n\\treceive() external payable {} // solhint-disable-line no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFracTokenVault.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\ninterface IFracTokenVault {\\n\\tfunction updateCurator(address curator) external;\\n\\n\\tfunction transfer(address recipient, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFracVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.4;\\n\\ninterface IFracVaultFactory {\\n\\tfunction vaults(uint256) external returns (address);\\n\\n\\tfunction mint(\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\taddress token,\\n\\t\\tuint256 id,\\n\\t\\tuint256 supply,\\n\\t\\tuint256 listPrice,\\n\\t\\tuint256 fee\\n\\t) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INounsAuctionHouse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.4;\\n\\ninterface INounsAuctionHouse {\\n\\tstruct Auction {\\n\\t\\tuint256 nounId;\\n\\t\\tuint256 amount;\\n\\t\\tuint256 startTime;\\n\\t\\tuint256 endTime;\\n\\t\\taddress payable bidder;\\n\\t\\tbool settled;\\n\\t}\\n\\n\\tfunction createBid(uint256 nounId) external payable;\\n\\n\\tfunction auction()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256, // nounId\\n\\t\\t\\tuint256, // amount\\n\\t\\t\\tuint256, // startTime\\n\\t\\t\\tuint256, // endTime\\n\\t\\t\\taddress payable, // bidder\\n\\t\\t\\tbool // settled\\n\\t\\t);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INounsParty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.4;\\n\\ninterface INounsParty {\\n\\tstruct Deposit {\\n\\t\\taddress owner;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tstruct TokenClaim {\\n\\t\\tuint256 nounId;\\n\\t\\tuint256 tokens;\\n\\t}\\n\\n\\tenum NounStatus {\\n\\t\\tWON,\\n\\t\\tBURNED,\\n\\t\\tMINTED,\\n\\t\\tLOST,\\n\\t\\tNOTFOUND\\n\\t}\\n\\n\\tevent LogWithdraw(address sender, uint256 amount);\\n\\n\\tevent LogFractionalize(uint256 indexed nounId, uint256 supply, uint256 fee);\\n\\n\\tevent LogClaim(address sender, uint256 nounId, address fracTokenVaultAddress, uint256 tokens);\\n\\n\\tevent LogSettleWon(uint256 nounId);\\n\\n\\tevent LogSettleLost(uint256 nounId);\\n\\n\\tevent LogDeposit(address sender, uint256 amount);\\n\\n\\tevent LogBid(uint256 indexed nounId, uint256 amount, address sender);\\n\\n\\tevent LogSetNounsPartyFee(uint256 fee);\\n\\n\\tevent LogBidIncrease(uint256 bidIncrease);\\n\\n\\tevent LogAllowBid(bool allow);\\n\\n\\tevent LogNounsAuctionHouseBidIncrease(uint256 bidIncrease);\\n\\n\\tevent LogPause();\\n\\n\\tevent LogUnpause();\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INounsToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC721Upgradeable.sol\\\";\\n\\ninterface INounsToken is IERC721Upgradeable {\\n\\tfunction minter() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721Upgradeable.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"LogAllowBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nounId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"LogBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidIncrease\",\"type\":\"uint256\"}],\"name\":\"LogBidIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nounId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fracTokenVaultAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"LogClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nounId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogFractionalize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidIncrease\",\"type\":\"uint256\"}],\"name\":\"LogNounsAuctionHouseBidIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogSetNounsPartyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nounId\",\"type\":\"uint256\"}],\"name\":\"LogSettleLost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nounId\",\"type\":\"uint256\"}],\"name\":\"LogSettleWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogUnpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeAuction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionIsHot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcBidAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_nounId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nounId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"claimsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBidAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentNounId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposits\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct INounsParty.Deposit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fracTokenVaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fracVaultFactory\",\"outputs\":[{\"internalType\":\"contract IFracVaultFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fracVaultFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nounsAuctionHouseAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nounsTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fracVaultFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nounsPartyCuratorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nounsPartyTreasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nounsAuctionHouseBidIncrease\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonRevertingCalcBidAmountAfterSettle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_nounId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nounId\",\"type\":\"uint256\"}],\"name\":\"nounStatus\",\"outputs\":[{\"internalType\":\"enum INounsParty.NounStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nounsAuctionHouse\",\"outputs\":[{\"internalType\":\"contract INounsAuctionHouse\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nounsAuctionHouseBidIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nounsPartyCuratorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nounsPartyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nounsPartyTreasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nounsToken\",\"outputs\":[{\"internalType\":\"contract INounsToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nounsTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"setAllowBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidIncrease\",\"type\":\"uint256\"}],\"name\":\"setBidIncrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setFracVaultFactoryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNounsAuctionHouseAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidIncrease\",\"type\":\"uint256\"}],\"name\":\"setNounsAuctionHouseBidIncrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNounsPartyCuratorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setNounsPartyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNounsPartyTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNounsTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NounsParty","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}