{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.5.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.1.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/cryptography/ECDSA.sol@v4.1.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n        } else if (signature.length == 64) {\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                let vs := mload(add(signature, 0x40))\r\n                r := mload(add(signature, 0x20))\r\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n                v := add(shr(255, vs), 27)\r\n            }\r\n        } else {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n\r\n        return recover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\r\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.1.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.1.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = alphabet[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.1.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.1.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/AccessControl.sol@v4.1.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n    function grantRole(bytes32 role, address account) external;\r\n    function revokeRole(bytes32 role, address account) external;\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping (address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping (bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view {\r\n        if(!hasRole(role, account)) {\r\n            revert(string(abi.encodePacked(\r\n                \"AccessControl: account \",\r\n                Strings.toHexString(uint160(account), 20),\r\n                \" is missing role \",\r\n                Strings.toHexString(uint256(role), 32)\r\n            )));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/protocol/KRoles.sol\r\n\r\npragma solidity 0.8.6;\r\n\r\ncontract KRoles is AccessControl {\r\n    bytes32 public constant OPERATOR_ROLE = keccak256(\"OPERATOR_ROLE\");\r\n\r\n    event OperatorAdded(address indexed account);\r\n    event OperatorRemoved(address indexed account);\r\n\r\n    constructor() {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n\r\n        _setupRole(OPERATOR_ROLE, _msgSender());\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(isOperator(_msgSender()), \"OperatorRole: caller does not have the Operator role\");\r\n        _;\r\n    }\r\n\r\n    function isOperator(address account) public view returns (bool) {\r\n        return hasRole(OPERATOR_ROLE, account);\r\n    }\r\n\r\n    function addOperator(address account) public onlyOperator {\r\n        _addOperator(account);\r\n    }\r\n\r\n    function renounceOperator() public virtual {\r\n        _renounceOperator(msg.sender);\r\n    }\r\n\r\n    function _addOperator(address account) internal {\r\n        grantRole(OPERATOR_ROLE, account);\r\n        emit OperatorAdded(account);\r\n    }\r\n\r\n    function _renounceOperator(address account) internal {\r\n        renounceRole(OPERATOR_ROLE, account);\r\n        emit OperatorRemoved(account);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/protocol/CanReclaimTokens.sol\r\n\r\npragma solidity 0.8.6;\r\n\r\n\r\ncontract CanReclaimTokens is KRoles {\r\n    using SafeERC20 for IERC20;\r\n\r\n    mapping(address => bool) private recoverableTokensBlacklist;\r\n\r\n    function blacklistRecoverableToken(address _token) public onlyOperator {\r\n        recoverableTokensBlacklist[_token] = true;\r\n    }\r\n\r\n    /// @notice Allow the owner of the contract to recover funds accidentally\r\n    /// sent to the contract. To withdraw ETH, the token should be set to `0x0`.\r\n    function recoverTokens(address _token) external onlyOperator {\r\n        require(\r\n            !recoverableTokensBlacklist[_token],\r\n            \"CanReclaimTokens: token is not recoverable\"\r\n        );\r\n\r\n        if (_token == address(0x0)) {\r\n           (bool success,) = msg.sender.call{ value: address(this).balance }(\"\");\r\n            require(success, \"Transfer Failed\");\r\n        } else {\r\n            IERC20(_token).safeTransfer(\r\n                msg.sender,\r\n                IERC20(_token).balanceOf(address(this))\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/protocol/Stake.sol\r\n\r\npragma solidity 0.8.6;\r\n\r\n\r\ncontract Stake is CanReclaimTokens {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 constant ROOK = IERC20(0xfA5047c9c78B8877af97BDcb85Db743fD7313d4a);\r\n    bytes constant public INSTANT_WITHDRAWAL_COMMITMENT_DATA = bytes(\"INSTANT\");\r\n\r\n    // this keypair is responsible for signing stake commitments\r\n    address coordinator;\r\n    // this keypair is responsible to for signing user claim commitments\r\n    address claimGenerator;\r\n\r\n    // coordinator -> user payment channels\r\n    mapping (address => uint256) public userClaimedAmount;\r\n    \r\n    // coordinator <-> keeper payment channels\r\n    // note a keeper may have multiple payment channels / staking addresses\r\n    mapping (address => uint256) public stakedAmount;\r\n    mapping (address => uint256) public stakeNonce;\r\n    mapping (address => uint256) public stakeSpent;\r\n    // the channelNonce is to prevent channel reuse edge cases if a staking address withdraws from their channel\r\n    // and reopens by staking again\r\n    mapping (address => uint256) public channelNonce;\r\n    mapping (bytes32 => uint256) public withdrawalTimelockTimestamp;\r\n\r\n    // total amount of Rook in the contract able to claimed. accrues when stakers withdraw and when the coordinator\r\n    // settles spent stake\r\n    uint256 public totalClaimableAmount;\r\n\r\n    event Staked(address indexed _stakeAddress, uint256 _channelNonce, uint256 _amount);\r\n    event Claimed(address indexed _claimAddress, uint256 _amount);\r\n    event CoordinatorChanged(address indexed _oldCoordinator, address indexed _newCoordinator);\r\n    event ClaimGeneratorChanged(address indexed _oldClaimGenerator, address indexed _newClaimGenerator);\r\n    event StakeWithdrawn(address indexed _stakeAddress, uint256 _channelNonce, uint256 _amount);\r\n    event TimelockedWithdrawalInitiated(\r\n        address indexed _stakeAddress, \r\n        uint256 _stakeSpent, \r\n        uint256 _stakeNonce, \r\n        uint256 _channelNonce, \r\n        uint256 _withdrawalTimelock);\r\n\r\n    struct StakeCommitment {\r\n        address stakeAddress;\r\n        uint256 stakeSpent;\r\n        uint256 stakeNonce;\r\n        uint256 channelNonce;\r\n        bytes data;\r\n        bytes stakeAddressSignature;\r\n        bytes coordinatorSignature;\r\n    }\r\n\r\n    /// @notice retreives the state variables relevant to a particular stake address\r\n    function getStakerState(\r\n        address _stakeAddress\r\n    ) public view returns (\r\n        uint256 _stakedAmount, \r\n        uint256 _stakeNonce, \r\n        uint256 _stakeSpent, \r\n        uint256 _channelNonce, \r\n        uint256 _withdrawalTimelock\r\n    ) {\r\n        return (\r\n            stakedAmount[_stakeAddress], \r\n            stakeNonce[_stakeAddress], \r\n            stakeSpent[_stakeAddress], \r\n            channelNonce[_stakeAddress], \r\n            getCurrentWithdrawalTimelock(_stakeAddress));\r\n    }\r\n\r\n    /// @notice calculate the commitment hash for a particular stake payment channel state.\r\n    /// signed stake commitment hashes are used to perform settlements and withdrawals.\r\n    function stakeCommitmentHash(\r\n        address _stakeAddress, \r\n        uint256 _stakeSpent, \r\n        uint256 _stakeNonce, \r\n        uint256 _channelNonce, \r\n        bytes memory _data\r\n    ) public pure returns (bytes32) {\r\n        return keccak256(abi.encode(_stakeAddress, _stakeSpent, _stakeNonce, _channelNonce, _data));\r\n    }\r\n\r\n    function stakeCommitmentHash(\r\n        StakeCommitment memory _commitment\r\n    ) internal pure returns (bytes32) {\r\n        return stakeCommitmentHash(\r\n            _commitment.stakeAddress, \r\n            _commitment.stakeSpent, \r\n            _commitment.stakeNonce, \r\n            _commitment.channelNonce, \r\n            _commitment.data);\r\n    }\r\n\r\n    /// @notice calculate the commitment hash for a particular claim payment channel state.\r\n    /// signed claim commitment hashes are used to perform claims\r\n    function claimCommitmentHash(\r\n        address _claimAddress, \r\n        uint256 _earningsToDate\r\n    ) public pure returns (bytes32) {\r\n        return keccak256(abi.encode(_claimAddress, _earningsToDate));\r\n    }\r\n\r\n    /// @notice determine the key to the entry in the withdrawalTimelockTimestamp map for a particular stake\r\n    /// payment channel state\r\n    function withdrawalTimelockKey(\r\n        address _stakeAddress, \r\n        uint256 _stakeSpent, \r\n        uint256 _stakeNonce, \r\n        uint256 _channelNonce\r\n    ) public pure returns (bytes32) {\r\n        return keccak256(abi.encode(_stakeAddress, _stakeSpent, _stakeNonce, _channelNonce));\r\n    }\r\n\r\n    /// @notice return any withdrawal timelock in place for a stake address. a return value of 0 indicates no timelock\r\n    function getCurrentWithdrawalTimelock(\r\n        address _stakeAddress\r\n    ) public view returns (uint256) {\r\n        return withdrawalTimelockTimestamp[\r\n            withdrawalTimelockKey(\r\n                _stakeAddress, \r\n                stakeSpent[_stakeAddress], \r\n                stakeNonce[_stakeAddress], \r\n                channelNonce[_stakeAddress])];\r\n    }\r\n\r\n    constructor(address _coordinator, address _claimGenerator) {\r\n        coordinator = _coordinator;\r\n        claimGenerator = _claimGenerator;\r\n        blacklistRecoverableToken(address(ROOK));\r\n    }\r\n\r\n    /// @notice update the Coordinator address, this keypair is responsible for signing stake commitments\r\n    function updateCoordinatorAddress(\r\n        address _newCoordinator\r\n    ) external onlyOperator {\r\n        emit CoordinatorChanged(coordinator, _newCoordinator);\r\n        coordinator = _newCoordinator;\r\n    }\r\n\r\n    /// @notice update the claimGenerator address, this keypair is responsible to for signing user claim commitments\r\n    function updateClaimGeneratorAddress(\r\n        address _newClaimGenerator\r\n    ) external onlyOperator {\r\n        emit ClaimGeneratorChanged(claimGenerator, _newClaimGenerator);\r\n        claimGenerator = _newClaimGenerator;\r\n    }\r\n\r\n    /// @notice used by stakers to add rook to their payment channel.\r\n    function stake(\r\n        uint256 _amount\r\n    ) public {\r\n        require(getCurrentWithdrawalTimelock(msg.sender) == 0, \"cannot stake while in withdrawal\");\r\n        ROOK.safeTransferFrom(msg.sender, address(this), _amount);\r\n        stakedAmount[msg.sender] += _amount;\r\n        emit Staked(msg.sender, channelNonce[msg.sender], stakedAmount[msg.sender]);\r\n    }\r\n\r\n    /// @notice used to add a buffer of claimable rook to the contract or to amend deficits from any overgenerous claims\r\n    function addClaimable(\r\n        uint256 _amount\r\n    ) public {\r\n        ROOK.safeTransferFrom(msg.sender, address(this), _amount);\r\n        totalClaimableAmount += _amount;\r\n    }\r\n\r\n    /// @notice the stakeSpent for a payment channel will increase when the stake address makes payments and decrease\r\n    /// when the coordinator issues refunds. this function changes the totalClaimableAmount of rook on the contract\r\n    /// accordingly\r\n    function adjustTotalClaimableAmountByStakeSpentChange(\r\n        uint256 _oldStakeSpent, \r\n        uint256 _newStakeSpent\r\n    ) internal {\r\n        if (_newStakeSpent < _oldStakeSpent) {\r\n            // if a stake address's new stakeSpent is less than their previously stored stakeSpent, then a refund was \r\n            // issued to the stakeAddress. we \"refund\" this rook to the stakeAddress by subtracting \r\n            // the difference from totalClaimableAmount\r\n            uint256 refundAmount = _oldStakeSpent - _newStakeSpent;\r\n            require(totalClaimableAmount >= refundAmount, \"not enough claimable rook to refund\");\r\n            totalClaimableAmount -= refundAmount;\r\n        } else {\r\n            // otherwise we accrue any unaccounted for spent stake to totalClaimableAmount\r\n            totalClaimableAmount += _newStakeSpent - _oldStakeSpent;\r\n        }\r\n    }\r\n\r\n    /// @notice used by the coordinator or users to settle spent stake for a payment channel to accrue claimable rook\r\n    function settleSpentStake(\r\n        StakeCommitment[] memory _commitments\r\n    ) external {\r\n        uint256 claimableRookToAccrue = 0;\r\n        uint256 claimableRookToRefund = 0;\r\n        for (uint i=0; i< _commitments.length; i++) {\r\n            StakeCommitment memory commitment = _commitments[i];\r\n            // initiating withdrawal settles the spent stake in the payment channel, so as long as the withdrawal\r\n            // is initiated using the latest commitment, there's no point in calling this method to settle \r\n            require(getCurrentWithdrawalTimelock(commitment.stakeAddress) == 0, \"cannot settle while in withdrawal\");\r\n            require(commitment.stakeSpent <= stakedAmount[commitment.stakeAddress], \"cannot spend more than is staked\");\r\n            require(commitment.stakeNonce > stakeNonce[commitment.stakeAddress], \"stake nonce is too old\");\r\n            require(commitment.channelNonce == channelNonce[commitment.stakeAddress], \"incorrect channel nonce\");\r\n\r\n            address recoveredStakeAddress = ECDSA.recover(\r\n                ECDSA.toEthSignedMessageHash(stakeCommitmentHash(commitment)), \r\n                commitment.stakeAddressSignature);\r\n            require(recoveredStakeAddress == commitment.stakeAddress, \"recovered address is not the stake address\");\r\n            address recoveredCoordinatorAddress =  ECDSA.recover(\r\n                ECDSA.toEthSignedMessageHash(stakeCommitmentHash(commitment)), \r\n                commitment.coordinatorSignature);\r\n            require(recoveredCoordinatorAddress == coordinator, \"recovered address is not the coordinator\");\r\n\r\n            if (commitment.stakeSpent < stakeSpent[commitment.stakeAddress]) {\r\n                // if a stake address's new stakeSpent is less than their previously stored stakeSpent, then a refund was \r\n                // issued to the stakeAddress. we \"refund\" this rook to the stakeAddress by subtracting \r\n                // the difference from totalClaimableAmount\r\n                claimableRookToRefund += stakeSpent[commitment.stakeAddress] - commitment.stakeSpent;\r\n            } else {\r\n                // otherwise we accrue any unaccounted for spent stake to totalClaimableAmount\r\n                claimableRookToAccrue += commitment.stakeSpent - stakeSpent[commitment.stakeAddress];\r\n            }\r\n            stakeNonce[commitment.stakeAddress] = commitment.stakeNonce;\r\n            stakeSpent[commitment.stakeAddress] = commitment.stakeSpent;\r\n        }\r\n        adjustTotalClaimableAmountByStakeSpentChange(claimableRookToRefund, claimableRookToAccrue);\r\n    }\r\n\r\n    /// @notice initiate a withdrawal, which can be completed after the timelock.\r\n    /// used by the stakers to withdraw and close the payment channel.\r\n    /// also used by the coordinator to challenge a withdrawal.\r\n    function initiateTimelockedWithdrawal(\r\n        StakeCommitment memory _commitment\r\n    ) external {\r\n        if (getCurrentWithdrawalTimelock(_commitment.stakeAddress) == 0) {\r\n            require(msg.sender == _commitment.stakeAddress, \"only stakeAddress can start the withdrawal process\");\r\n        }\r\n        require(_commitment.stakeSpent <= stakedAmount[_commitment.stakeAddress], \"cannot spend more than is staked\");\r\n        // the stakeNonce may have been seen in settleSpentStake so we must allow greater than or equals to here.\r\n        // note this means a malicious or compromised coordinator has the ability to indefinitely reset the timelock.\r\n        // this is fine since we can just change the coordinator address.\r\n        require(_commitment.stakeNonce >= stakeNonce[_commitment.stakeAddress], \"stake nonce is too old\");\r\n        require(_commitment.channelNonce == channelNonce[_commitment.stakeAddress], \"incorrect channel nonce\");\r\n        require(msg.sender == _commitment.stakeAddress || msg.sender == coordinator, \r\n            \"only callable by stakeAdddress or coordinator\");\r\n        \r\n        address recoveredStakeAddress = ECDSA.recover(\r\n            ECDSA.toEthSignedMessageHash(stakeCommitmentHash(_commitment)), \r\n            _commitment.stakeAddressSignature);\r\n        require(recoveredStakeAddress == _commitment.stakeAddress, \"recovered address is not the stake address\");\r\n        address recoveredCoordinatorAddress =  ECDSA.recover(\r\n            ECDSA.toEthSignedMessageHash(stakeCommitmentHash(_commitment)), \r\n            _commitment.coordinatorSignature);\r\n        require(recoveredCoordinatorAddress == coordinator, \"recovered address is not the coordinator\");\r\n\r\n        adjustTotalClaimableAmountByStakeSpentChange(stakeSpent[_commitment.stakeAddress], _commitment.stakeSpent);\r\n        stakeNonce[_commitment.stakeAddress] = _commitment.stakeNonce;\r\n        stakeSpent[_commitment.stakeAddress] = _commitment.stakeSpent;\r\n\r\n        withdrawalTimelockTimestamp[\r\n            withdrawalTimelockKey(\r\n                _commitment.stakeAddress, \r\n                _commitment.stakeSpent, \r\n                _commitment.stakeNonce, \r\n                _commitment.channelNonce\r\n            )] = block.timestamp + 7 days;\r\n\r\n        emit TimelockedWithdrawalInitiated(\r\n            _commitment.stakeAddress, \r\n            _commitment.stakeSpent, \r\n            _commitment.stakeNonce, \r\n            _commitment.channelNonce, \r\n            block.timestamp + 7 days);\r\n    }\r\n\r\n    /// @notice withdraw stake after the timelock \r\n    function executeTimelockedWithdrawal(\r\n        address _stakeAddress\r\n    ) public {\r\n        uint256 _channelNonce = channelNonce[_stakeAddress];\r\n        require(getCurrentWithdrawalTimelock(_stakeAddress) > 0, \"must initiate timelocked withdrawal first\");\r\n        require(block.timestamp > getCurrentWithdrawalTimelock(_stakeAddress), \"still in withdrawal timelock\");\r\n        \r\n        uint256 withdrawalAmount = stakedAmount[_stakeAddress] - stakeSpent[_stakeAddress];\r\n        stakeNonce[_stakeAddress] = 0;\r\n        stakeSpent[_stakeAddress] = 0;\r\n        stakedAmount[_stakeAddress] = 0;\r\n        channelNonce[_stakeAddress] += 1;\r\n\r\n        ROOK.safeTransfer(_stakeAddress, withdrawalAmount);\r\n\r\n        emit StakeWithdrawn(_stakeAddress, _channelNonce, withdrawalAmount);\r\n    }\r\n\r\n    /// @notice instantly withdraw stake.\r\n    /// requires the stakeAddress to ask the coordinator for an instant withdrawal approval signature.\r\n    /// instead of including the previous commitment hash, the signature is over the arbtrarily chosen word \"INSTANT\".\r\n    /// we don't want the coordinator to instantly settle the channel with an old commitment, so we also require\r\n    /// the stakeAddress signature.\r\n    function executeInstantWithdrawal(\r\n        StakeCommitment memory _commitment\r\n    ) external {\r\n        require(msg.sender == _commitment.stakeAddress, \"only stakeAddress can perform instant withdrawal\");\r\n        require(_commitment.stakeSpent <= stakedAmount[_commitment.stakeAddress], \"cannot use more than staked amount\");\r\n        require(_commitment.stakeNonce >= stakeNonce[_commitment.stakeAddress], \"nonce is too old\");\r\n        require(_commitment.channelNonce == channelNonce[_commitment.stakeAddress], \"incorrect channel nonce\");\r\n        require(keccak256(_commitment.data) == keccak256(INSTANT_WITHDRAWAL_COMMITMENT_DATA), \"incorrect data payload\");\r\n\r\n        address recoveredStakeAddress =  ECDSA.recover(\r\n            ECDSA.toEthSignedMessageHash(stakeCommitmentHash(_commitment)), \r\n            _commitment.stakeAddressSignature);\r\n        require(recoveredStakeAddress == _commitment.stakeAddress, \"recovered address is not the stake address\");\r\n        address recoveredCoordinatorAddress =  ECDSA.recover(\r\n            ECDSA.toEthSignedMessageHash(stakeCommitmentHash(_commitment)), \r\n            _commitment.coordinatorSignature);\r\n        require(recoveredCoordinatorAddress == coordinator, \"recovered address is not the coordinator\");\r\n        \r\n        adjustTotalClaimableAmountByStakeSpentChange(stakeSpent[_commitment.stakeAddress], _commitment.stakeSpent);\r\n        uint256 withdrawalAmount = stakedAmount[_commitment.stakeAddress] - _commitment.stakeSpent;\r\n        stakeNonce[_commitment.stakeAddress] = 0;\r\n        stakeSpent[_commitment.stakeAddress] = 0;\r\n        stakedAmount[_commitment.stakeAddress] = 0;\r\n        channelNonce[_commitment.stakeAddress] += 1;\r\n\r\n        ROOK.safeTransfer(_commitment.stakeAddress, withdrawalAmount);\r\n\r\n        emit StakeWithdrawn(_commitment.stakeAddress, _commitment.channelNonce, withdrawalAmount);\r\n    }\r\n\r\n    /// @notice Claim accumulated earnings.\r\n    /// claims are generated by the coordinator\r\n    /// used by users, KeeperDAO, and Partners to claim their rook\r\n    function claim(\r\n        address _claimAddress, \r\n        uint256 _earningsToDate,\r\n        bytes memory _claimGeneratorSignature\r\n    ) external {\r\n        require(_earningsToDate > userClaimedAmount[_claimAddress], \"nothing to claim\");\r\n\r\n        address recoveredClaimGeneratorAddress = ECDSA.recover(\r\n            ECDSA.toEthSignedMessageHash(claimCommitmentHash(_claimAddress, _earningsToDate)), \r\n            _claimGeneratorSignature);\r\n        require(recoveredClaimGeneratorAddress == claimGenerator, \"recoveredClaimGeneratorAddress is not the account manager\");\r\n\r\n        uint256 claimAmount = _earningsToDate - userClaimedAmount[_claimAddress];\r\n        require(claimAmount <= totalClaimableAmount, \"claim amount exceeds balance on contract\");\r\n        userClaimedAmount[_claimAddress] = _earningsToDate;\r\n        totalClaimableAmount -= claimAmount;\r\n\r\n        ROOK.safeTransfer(_claimAddress, claimAmount);\r\n        emit Claimed(_claimAddress, claimAmount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_claimGenerator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldClaimGenerator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newClaimGenerator\",\"type\":\"address\"}],\"name\":\"ClaimGeneratorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_claimAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldCoordinator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newCoordinator\",\"type\":\"address\"}],\"name\":\"CoordinatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_channelNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_channelNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_channelNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawalTimelock\",\"type\":\"uint256\"}],\"name\":\"TimelockedWithdrawalInitiated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSTANT_WITHDRAWAL_COMMITMENT_DATA\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addClaimable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"blacklistRecoverableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"channelNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_earningsToDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_claimGeneratorSignature\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_earningsToDate\",\"type\":\"uint256\"}],\"name\":\"claimCommitmentHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeSpent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"channelNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"stakeAddressSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"coordinatorSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct Stake.StakeCommitment\",\"name\":\"_commitment\",\"type\":\"tuple\"}],\"name\":\"executeInstantWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeAddress\",\"type\":\"address\"}],\"name\":\"executeTimelockedWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeAddress\",\"type\":\"address\"}],\"name\":\"getCurrentWithdrawalTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeAddress\",\"type\":\"address\"}],\"name\":\"getStakerState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeSpent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_channelNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawalTimelock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeSpent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"channelNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"stakeAddressSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"coordinatorSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct Stake.StakeCommitment\",\"name\":\"_commitment\",\"type\":\"tuple\"}],\"name\":\"initiateTimelockedWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeSpent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"channelNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"stakeAddressSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"coordinatorSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct Stake.StakeCommitment[]\",\"name\":\"_commitments\",\"type\":\"tuple[]\"}],\"name\":\"settleSpentStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeSpent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_channelNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"stakeCommitmentHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newClaimGenerator\",\"type\":\"address\"}],\"name\":\"updateClaimGeneratorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCoordinator\",\"type\":\"address\"}],\"name\":\"updateCoordinatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeSpent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_channelNonce\",\"type\":\"uint256\"}],\"name\":\"withdrawalTimelockKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdrawalTimelockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Stake","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003a8f4dff08c45814d730b5f6b268ad8378bebb360000000000000000000000003a8f4dff08c45814d730b5f6b268ad8378bebb36","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1467af28e2c03cba0b291cb6af0941e3434270200193bc4aaac2dc2c146c7d4d"}]}