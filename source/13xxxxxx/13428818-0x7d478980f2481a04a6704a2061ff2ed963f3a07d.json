{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.6.4 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.3.2\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol@v4.3.2\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol@v4.3.2\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File contracts/7/gas-manager/gas-tank/DappGasTank.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Context variant with ERC2771 support.\r\n */\r\nabstract contract ERC2771ContextUpgradeable is Initializable {\r\n    /*\r\n     * Forwarder singleton we accept calls from\r\n     */\r\n    address public _trustedForwarder;\r\n\r\n    function __ERC2771Context_init(address trustedForwarder) internal initializer {\r\n        __ERC2771Context_init_unchained(trustedForwarder);\r\n    }\r\n\r\n    function __ERC2771Context_init_unchained(address trustedForwarder) internal initializer {\r\n        _trustedForwarder = trustedForwarder;\r\n    }\r\n    \r\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\r\n        return forwarder == _trustedForwarder;\r\n    }\r\n\r\n    function _msgSender() internal view virtual returns (address sender) {\r\n        if (isTrustedForwarder(msg.sender)) {\r\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\r\n            assembly {\r\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\r\n            }\r\n        } else {\r\n            return msg.sender;\r\n        }\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        if (isTrustedForwarder(msg.sender)) {\r\n            return msg.data[:msg.data.length - 20];\r\n        } else {\r\n            return msg.data;\r\n        }\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n/* \r\n * @title DappGasTank\r\n * @author livingrock (Biconomy)\r\n * @title Dapp Deposit Gas Tank Contract\r\n * @notice Handles customers deposits  \r\n */\r\ncontract DappGasTank is Initializable, OwnableUpgradeable, ERC2771ContextUpgradeable {\r\n\r\n    address payable public masterAccount;\r\n    uint256 public minDeposit = 1e18;\r\n    uint8 internal _initializedVersion;\r\n    address private constant NATIVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    //Maintain balances for each funding key\r\n    mapping(uint256 => uint256) public dappBalances;\r\n\r\n    //Maintains fundingKey and depositedAmount information for each Depositor\r\n    //review mapping and how it is populated with each deposits\r\n    mapping(address => mapping(uint256 => uint256) ) public depositorBalances;\r\n\r\n    //Allowed tokens as deposit currency in Dapp Gas Tank\r\n    mapping(address => bool) public allowedTokens;\r\n    //Pricefeeds info should you require to calculate Token/ETH\r\n    mapping(address => address) public tokenPriceFeed;\r\n\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() initializer {}\r\n\r\n    /**\r\n     * @dev Initializes the contract\r\n     */\r\n    function initialize(address trustedForwarder) public initializer {\r\n       __ERC2771Context_init(trustedForwarder);\r\n       __Ownable_init();\r\n       _initializedVersion = 0;\r\n    }\r\n\r\n    event Deposit(address indexed sender, uint256 indexed amount, uint256 indexed fundingKey); // fundingKey \r\n    \r\n    event Withdraw(address indexed actor, uint256 indexed amount, address indexed receiver); // for when owner withdraws funds\r\n\r\n    event MasterAccountChanged(address indexed account, address indexed actor);\r\n\r\n    event MinimumDepositChanged(uint256 indexed minDeposit, address indexed actor);\r\n\r\n    event DepositTokenAdded(address indexed token, address indexed actor);\r\n\r\n    /**\r\n     * @dev Emitted when trusted forwarder is updated to \r\n     * another (`trustedForwarder`).\r\n     *\r\n     * Note that `trustedForwarder` may be zero. `actor` is msg.sender for this action.\r\n     */\r\n    event TrustedForwarderChanged(address indexed truestedForwarder, address indexed actor);\r\n\r\n\r\n    /**\r\n     * returns the message sender\r\n     */\r\n    function _msgSender()\r\n        internal\r\n        view\r\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\r\n        returns (address)\r\n    {\r\n        return ERC2771ContextUpgradeable._msgSender();\r\n    }\r\n\r\n    /**\r\n     * returns the message data\r\n     */\r\n    function _msgData()\r\n        internal\r\n        view\r\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\r\n        returns (bytes memory)\r\n    {\r\n        return ERC2771ContextUpgradeable._msgData();\r\n    }\r\n\r\n\r\n    /**\r\n     * Admin function to set minimum deposit amount\r\n     * emits and event \r\n     */\r\n    function setMinDeposit(uint256 _newMinDeposit) external onlyOwner{\r\n        minDeposit = _newMinDeposit;\r\n        emit MinimumDepositChanged(_newMinDeposit,msg.sender);\r\n    }\r\n\r\n    /**\r\n     * admin function to set trusted forwarder\r\n     * @param _forwarder new trusted forwarder address\r\n     *\r\n     */\r\n    function setTrustedForwarder(address payable _forwarder) external onlyOwner {\r\n        require(_forwarder != address(0), \"BICO:: Invalid address for new trusted forwarder\");\r\n        _trustedForwarder = _forwarder;\r\n        emit TrustedForwarderChanged(_forwarder, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Admin function to set master account which collects gas tank deposits\r\n     */\r\n    function setMasterAccount(address payable _newAccount) external onlyOwner{\r\n        masterAccount = _newAccount;\r\n        emit MasterAccountChanged(_newAccount, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Admin function to set token allowed for depositing in gas tank \r\n     */\r\n    function setTokenAllowed(address token, bool allowed) external onlyOwner{\r\n        require(token != address(0), \"Token address cannot be 0\");  \r\n        allowedTokens[token] = allowed;\r\n        emit DepositTokenAdded(token,msg.sender);\r\n    }\r\n     \r\n    /**\r\n     * @param _fundingKey Associate funds with this funding key. \r\n     * Supply a deposit for a specified funding key. (This will be a unique unix epoch time)\r\n     * Caution: The funding key must be an your identifier generated from biconomy dashboard \r\n     * Funds deposited will be forwarded to master account to fund the relayers\r\n     * emits an event for off-chain accounting\r\n     * @notice In the future this method may be upgraded to allow ERC20 token deposits \r\n     * @notice Generic depositFor could be added that allows deposit of ERC20 tokens and swaps them for native currency. \r\n     */\r\n    function depositFor(uint256 _fundingKey) public payable { \r\n        require(msg.sender == tx.origin || msg.sender == _trustedForwarder, \"sender must be EOA or trusted forwarder\");\r\n        require(msg.value > 0, \"No value provided to depositFor.\");\r\n        require(msg.value >= minDeposit, \"Must be grater than minimum deposit for this network\");\r\n        masterAccount.transfer(msg.value);\r\n        dappBalances[_fundingKey] = dappBalances[_fundingKey] + msg.value; \r\n        //review\r\n        depositorBalances[msg.sender][_fundingKey] = depositorBalances[msg.sender][_fundingKey] + msg.value;\r\n        emit Deposit(msg.sender, msg.value, _fundingKey);\r\n    }\r\n  \r\n    /** \r\n     * @dev If someone deposits funds directly to contract address\r\n     * Here we wouldn't know the funding key!\r\n     */ \r\n    receive() external payable {\r\n        require(msg.value > 0, \"No value provided to fallback.\");\r\n        require(tx.origin == msg.sender, \"Only EOA can deposit directly.\");\r\n        //review\r\n        //funding key stored is 0 \r\n        depositorBalances[msg.sender][0] = depositorBalances[msg.sender][0] + msg.value;\r\n        //All these types of deposits come under funding key 0\r\n        emit Deposit(msg.sender, msg.value, 0);\r\n    }\r\n\r\n    /**\r\n     * Admin function for sending/migrating any stuck funds. \r\n     */\r\n    function withdraw(uint256 _amount) public onlyOwner {\r\n        masterAccount.transfer(_amount);\r\n        emit Withdraw(msg.sender, _amount, masterAccount);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingKey\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"DepositTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"MasterAccountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"MinimumDepositChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"truestedForwarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"TrustedForwarderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dappBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundingKey\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositorBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterAccount\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newAccount\",\"type\":\"address\"}],\"name\":\"setMasterAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinDeposit\",\"type\":\"uint256\"}],\"name\":\"setMinDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setTokenAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DappGasTank","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://13acec9086f31e8682a089c99bbf2962de73b6bfa8eb5039f8026e6ac4ca0b7d"}]}