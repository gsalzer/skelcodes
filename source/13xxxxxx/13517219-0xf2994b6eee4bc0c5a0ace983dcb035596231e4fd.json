{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"seaavatars.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\ninterface SeaInterface {\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 tokenId);\\r\\n}\\r\\n\\r\\ncontract SeaAvatars is ERC721, ERC721Enumerable, Ownable {\\r\\n    bool public saleIsActive = false;\\r\\n    bool public burned = false;\\r\\n    address public SeaAddress = 0xccB6E4a1c42F4892cdE27A8bC2e50bbA0b43d224;\\r\\n    SeaInterface SeaContract = SeaInterface(SeaAddress);\\r\\n    \\r\\n    constructor() ERC721(\\\"SeaAvatars\\\", \\\"SEAV\\\") {\\r\\n    }\\r\\n     \\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\\r\\n        internal\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n    {\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n    \\r\\n    function random(string memory input) internal pure returns (uint256) {\\r\\n        return uint256(keccak256(abi.encodePacked(input)));\\r\\n    }\\r\\n    \\r\\n    function toHashCode(uint256 value) internal pure returns (string memory) {\\r\\n        uint256 i;\\r\\n\\r\\n        bytes memory buffer = \\\"000000\\\";\\r\\n        for(i=6;i>0;i--) {\\r\\n            if (value % 16 < 10)\\r\\n                buffer[i-1] = bytes1(uint8(48 + uint256(value % 16)));\\r\\n            else\\r\\n                buffer[i-1] = bytes1(uint8(55 + uint256(value % 16)));\\r\\n\\r\\n            value /= 16;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n    \\r\\n    function getPolygon(uint256 num, string memory color, string memory op) internal pure returns (string memory) {\\r\\n        uint256[180]memory xtypes =[\\r\\n            4814428123379440877112789653708048739232650899662072877855038155387987431215,\\r\\n            134090543,\\r\\n            3213740837251487480304978222492611373843034917926543139373749086079167363288,\\r\\n            3665448596379561495266568050510573499255299605025824809279735116735304552088,\\r\\n            205484395792065916098301401717170874304911595874256154464498320,\\r\\n            4978496874583640837093842564837635911112988777710182783287306338547366718674,\\r\\n            2847423534786952485829505879377973299768746716665431702559283142857412987502,\\r\\n            35140135382753,\\r\\n            2990030449756037583316377534683801160820975666322594,\\r\\n            633147047751871463082639347446,\\r\\n            633250043510582197225664685096,\\r\\n            783342371240660400615497362662867695169835591505009495153,\\r\\n            3015605336097770010832060948773439899320263180355111271447081940574438532253,\\r\\n            1699410383171683060484640923082407994735009912351540698902523680158858963667,\\r\\n            2067439483755009076537239878613967120688171739225650558832839415147437291640,\\r\\n            2110285635025633850782162448438909787314249243868635101044081548977791378060,\\r\\n            1813537826634847775588271020849619009466237369690820983365919405283580390552,\\r\\n            1433165981178011733008463800384150766019695303333840710976987787175893725835,\\r\\n            1347834300580146900593882219877353796923237396140869764780512560971696623306,\\r\\n            1588291142145332360308884532736805401102486146533600217899801854658095932103,\\r\\n            1630640689404733378642505262896486732354314158877471864006247217340780175548,\\r\\n            1926975200976366162727790765948535744022368363806555952276809889580033045183,\\r\\n            2195729526611169200073088264115405134266050171528327914526689757427595025581,\\r\\n            2266183416249769109687683253195421600011544355208010500246994655874713467054,\\r\\n            1942021118171089200927872160880968143467387698704835635209143544230560220841,\\r\\n            2026692120635480416902954766191778704951595844413918284067846871351766098126,\\r\\n            2252931742901068372445672611749832774842961514843407512141469648329648975563,\\r\\n            2295116187662235110121913666276726987468444668928175066731688914204036246718,\\r\\n            2592194794286804437698157144159526339621523043225693230464121704378048799436,\\r\\n            2535270053559044811589912991644676175666664223951765667507672669824291794632,\\r\\n            2676810635330829446627987247531416732227338364894945326305024218158728837315,\\r\\n            2676507767503271220336019071355421318369328191959582692781556145107637730497,\\r\\n            2860260185232810836874932161100098492177796172019734599621174229889736083643,\\r\\n            2704583530546838355578889545793450502804454913237751059045251025304634622638,\\r\\n            2732605051757189469738771911402128307348469092831311049021474868234958504110,\\r\\n            2689896882341260570152089198804438177341639211772304451963188924944556062881,\\r\\n            2874339369183394173601732921210730487262146816407635719706621996970437346462,\\r\\n            134063278,\\r\\n            11401402070285144550100871971896250052146431669,\\r\\n            11401442479798540347354564667579758730284697744,\\r\\n            2010405393385468769754390500839040943260313875155174100691674881837603800274,\\r\\n            53852718675364590822474638051961946119679634989037219218611160268927,\\r\\n            2873152535253068203115307214512935299514021674337530122812293448446001082573,\\r\\n            632967951439172729344733328545,\\r\\n            2703590214691199062276704278272662481619631230524746364075007852563519075527,\\r\\n            3142100272699584422061276135492595947566116804089604574541184736671832567449,\\r\\n            2989437538194262125706135904879775746659906037333659,\\r\\n            2732882416327165001845161696611165857660612391574224505373154795372861555376,\\r\\n            511,\\r\\n            2407752739435277468182135965268740961167067564356323244993211865623229981385,\\r\\n            2718635756548816077094781045246157570894954467225593574078410329624519202986,\\r\\n            205426318550813624678543263541887184093338878840179569528765611,\\r\\n            783755749980388114187626910565273421423263977749007664810,\\r\\n            2802230349547862087207944134484874423122711422731942543155255483070880492751,\\r\\n            4033286330948968342802066104321959696267657300291049256998759985275710840448,\\r\\n            2989426410341552234246661906532089360279329427827888,\\r\\n            2703203069435399854974180652086783188110879736547100033428855629723775884484,\\r\\n            3326681766720166569802217709619400280322460235055753081581802918103831117954,\\r\\n            3736343546743753260211845024466212803851390170907039772609456547994386951852,\\r\\n            205409056410469613002004354563412766279958914452316885766240416,\\r\\n            1971616190158006219705968645019532586535831259808819755347658143630318153833,\\r\\n            11399522681441707448144466669239173253050471147,\\r\\n            1914414298019550117063508162120147874407892009683649735561803866455306738423,\\r\\n            35134101066472,\\r\\n            1205906187159667043478116698855989167391587791278914760228820903963052253383,\\r\\n            9208186077033047238,\\r\\n            1108535604507764213683166814513984193935977038616812534071790246938547877087,\\r\\n            511,\\r\\n            165898217922643309084526052680454256,\\r\\n            1276275803054313493599806570260748153354263436358400765083857487700048243417,\\r\\n            1178822342572881599758773592983319479796300992156451348075390679526609297106,\\r\\n            9207483898066677967,\\r\\n            740975772651252457144836420278673397610254157186597222250099236134980751977,\\r\\n            2414117941576320369311410,\\r\\n            632708923678708594065717615261,\\r\\n            1458925500838540507418926026561993567301703685253672786264170589214896329935,\\r\\n            1362215544816844226291935252053426049015218768525540613182698930612617390203,\\r\\n            205358079224472907756417989573029084098844703882026101090076869,\\r\\n            2405738554033416632426971367221281326733416003252598059526135764720845880057,\\r\\n            205367565356852077129926225204268878140292779083361308042405991,\\r\\n            2094799621356768638422789955858255696415450532913632148607982003334359841527,\\r\\n            216385665523705520674157202371983031175832580637483984829524597222897451627,\\r\\n            2414056423330995164691159,\\r\\n            11397700635544049811140143993956400775937410739,\\r\\n            1953753321857745697879799949839981476218506366288294591805006875595925160150,\\r\\n            2414313723860810707829366,\\r\\n            2413834197074852568406235,\\r\\n            1007024817493647344034072868464098635223782697202574437333574124131465880276,\\r\\n            978311935401717486461471199063926706147737078905916884262441267563763117176,\\r\\n            1744463536117297771199500556841754719200382694378654872668579678780200630368,\\r\\n            511,\\r\\n            14112961311574784031995581858176719375774695975355569236051599162882701011,\\r\\n            1897711303285596482765067278580384626287392383020712652244311076941978193104,\\r\\n            134015680,\\r\\n            53838512057721440562939736802025788259291144916640581635750671998583,\\r\\n            53828861982961135492201427184879149672978060633158020975671450566856,\\r\\n            1218549703504418858426162283162138827211025846478484793807547462127761523912,\\r\\n            1178049449980952191072349915198487915111597729517606511759043444728495120489,\\r\\n            1248613335570268749676909298256317029060994509812092552730532908634266442967,\\r\\n            1009593031495819252828700569240846868741021889479975996220684736809035147948,\\r\\n            511,\\r\\n            2237333844498111748883215477507890751800256493258715525511056416630703471762,\\r\\n            511,\\r\\n            165929294059383718597136186708933768,\\r\\n            165928665183444790299169218008267404,\\r\\n            53845519538819855508960808442933283326529873565053054911387792911572,\\r\\n            632953462932985502401346219733,\\r\\n            11402537257086157492956168853500386529649441493,\\r\\n            2338127278722570274363906040942801375633166264814527435739863412231291358938,\\r\\n            632992172374068595235072070355,\\r\\n            14116035176210511671108551609314867430245309605471104878804150874868631768,\\r\\n            2989198070966187183905653156820517155486041008851669,\\r\\n            1914165240659878124278093455124795799975637481046506062551521715814255628505,\\r\\n            2239183573178341868630490435769242119124342703048732488176563775529780318423,\\r\\n            783516542217681384326802153090181251758094015190434920149,\\r\\n            205392594202743270705599732363469054786985168948493990009572567,\\r\\n            2196696207197523970848110246220850787567375659661879630802303424358746760918,\\r\\n            43496064942646834154564841992264090467026,\\r\\n            2451344281097134209035305689338887225410243436567307749947473686735818932439,\\r\\n            134038231,\\r\\n            9210896242334838485,\\r\\n            11403234498813872975814317136142915991533607641,\\r\\n            2052946140791500114938153887393848933442548125195317854590544344108166871666,\\r\\n            134024309,\\r\\n            2414284504605938271190647,\\r\\n            2414432961303085847740591,\\r\\n            1840619951669604201410879954770232798770635410344762643704857699299414045884,\\r\\n            2054740440345882338413182726751774799923504795098535273396345647260901121653,\\r\\n            11401099814810876640669013063882522770837151408,\\r\\n            2251164459629472805890764632980280277423766955907349854903606843989721679987,\\r\\n            35133399578745,\\r\\n            632965160288698604399670134412,\\r\\n            632963006881331930588495022277,\\r\\n            1786344573953401262130609349327547713072556579231105641242862738580471876815,\\r\\n            2038589805006897792509112007954350735573250959223795959103614935773248814209,\\r\\n            53842228122476702495773295789384926848390152018530179498957340490361,\\r\\n            11401924403712846923563882592647883891447504561,\\r\\n            165908440879873426276575088097426107,\\r\\n            632895368158899369863413300935,\\r\\n            1758268323525362595923532786314480328080018599735810783059475054768039464143,\\r\\n            205391794314900404883493199233542293351979380310701105445663417,\\r\\n            53851282851944209321420284640220371633171315667141036238171496339675,\\r\\n            205423955338156824854771464258264672819344281274335154421196500,\\r\\n            2577729327169094013913866036448034673223125940098247934601313183565024680666,\\r\\n            11403452706877142101024583031628030006125753017,\\r\\n            2989425896204408496798268877956759112715740736746173,\\r\\n            2989368449265634237443441350612458333462874654075053,\\r\\n            2747678523175029219050907904201247527951368373004693689322273898694758724798,\\r\\n            9211915013402753212,\\r\\n            3018393708817140741526826604469395450011717245499418109813008810463571847958,\\r\\n            511,\\r\\n            2578005993306738766272720493549290003641129654788059437799834430105042922263,\\r\\n            205453891193239864721000310941609329333251635029516111844828853,\\r\\n            14118791738016870176898609723966653060633868239941088994990407440431952147,\\r\\n            43502367761593881992589959363221389672163,\\r\\n            2564532975842800516717576589205430082896313342638360674066970560767747778788,\\r\\n            2662345006453239351655121122284717271256484617132755706888769186188301527742,\\r\\n            2535048710605151100156159681989605707947025469919326540865784635456694350004,\\r\\n            633040586241434255942783689906,\\r\\n            2662538093696171203523322518377730080565180711373728926410531419261132958943,\\r\\n            35140541447393,\\r\\n            165915365962175250832669694316052105,\\r\\n            165910991072664731647969066886692541,\\r\\n            165915364714563768096814076148908681,\\r\\n            632905030222108565907283182269,\\r\\n            165941773779047896865379588025428813,\\r\\n            783636964467172242015624329953870136005131318572805084494,\\r\\n            53851123756109542786880701376471183343334073926133237164143885237585,\\r\\n            11404551990931083991178740329624445415109531480,\\r\\n            11404377256599313706827886264374972514872168274,\\r\\n            14118043174159213750512275332842345089131422252097273049880944104801145683,\\r\\n            2879060666130226223903190413161288011004202157635526868141497339872999740254,\\r\\n            134058846,\\r\\n            1348437942946537774187992213237890796509601516299775525587402884344614759289,\\r\\n            205303390594931779347596621228099093120336219627248210526632204,\\r\\n            325906032892669080226535334041476325337775906709561789896225250520937317938,\\r\\n            783278824392957924854232793030235970878250007250455810227,\\r\\n            \\r\\n            39501981766050205511763645938889413926815084847014363323784499591316483998465,\\r\\n            63116260013956854871348073892089032591383598474601552283817845072970876017752,\\r\\n            105184833074588551822140444288569933265217461830097108150028045964\\r\\n            ];\\r\\n            \\r\\n            \\r\\n        uint256 i;\\r\\n        uint256 first_index;\\r\\n        uint256 cur_num;\\r\\n        uint256 k;\\r\\n        uint256 pos;\\r\\n        uint256 part;\\r\\n        string memory res;\\r\\n        uint256 result;\\r\\n        \\r\\n        part = (xtypes[177+(num/32)] / (256**(num%32)));\\r\\n        first_index = part%256;\\r\\n        res = '';\\r\\n    \\r\\n        for(i = first_index-1; i<=250; i++) {\\r\\n            if (xtypes[i] == 0)\\r\\n                break;\\r\\n    \\r\\n            cur_num= xtypes[i];    \\r\\n            k=0;\\r\\n            for(pos=0;pos<=27;pos++) {\\r\\n                result = (cur_num /  (512 ** pos)) % 512;\\r\\n                if (result == 511)\\r\\n                    break;\\r\\n    \\r\\n                if (k%2 == 0) {\\r\\n                        res = string(abi.encodePacked(res, toString(result*3), ','));\\r\\n\\r\\n                }\\r\\n                else {\\r\\n                    res = string(abi.encodePacked(res, toString(result*3), ' '));\\r\\n\\r\\n                }\\r\\n                k++;\\r\\n             }   \\r\\n            if (result == 511)\\r\\n                break;\\r\\n        }\\r\\n\\r\\n        return string(abi.encodePacked('<polygon opacity=\\\"',op,'\\\" points=\\\"', res, '\\\" fill=\\\"#',color,'\\\" />'));\\r\\n    \\r\\n    }\\r\\n    \\r\\n    function tokenURI(uint256 tokenId) pure public override(ERC721)  returns (string memory) {\\r\\n        uint256[21] memory xtypes;\\r\\n        string[6] memory colors;\\r\\n\\r\\n        string[40] memory parts;\\r\\n        uint256[12] memory params;\\r\\n\\r\\n        uint256 pos;\\r\\n        uint256 i;\\r\\n\\r\\n        uint256 rand = random(string(abi.encodePacked('SeaMan:4,413.70',toString(tokenId))));\\r\\n\\r\\n        params[0] = 1 + (rand % 35); // pallette=\\r\\n        params[1] = 1 + ((rand/100) % 4);// beard\\r\\n        params[2] = 1 + ((rand/1000) % 7); // cap\\r\\n        params[3] = 1 + ((rand/10000) % 4); // ear\\r\\n        params[4] = 1 + ((rand/100000) % 3); // glass\\r\\n        params[5] = 1 + ((rand/1000000) % 4); // tube\\r\\n        params[6] = 1 + ((rand/10000000) % 3); // mount\\r\\n        params[7] = 1 + ((rand/100000000) % 4); // ship\\r\\n        params[8] = 1 + ((rand/1000000000) % 3); // palm\\r\\n\\r\\n\\r\\n        xtypes[0] = 207574965379110640608216022545122747804297713611180780071335701350711199;\\r\\n        xtypes[1] = 1761542274015381829561806442388166782076133553027523683407153450284725839;\\r\\n        xtypes[2] = 1318910288827824010265619304243609725711044680336380489173166130084184176;\\r\\n        xtypes[3] = 724683447042801548696569560081030497164719783953138574072045560454446233;\\r\\n        xtypes[4] = 4043991994606567853415936212959853079208569424781326127295573659918631;\\r\\n        xtypes[5] = 3299620775196419612115186638262901643665550060006145227261506178449515;\\r\\n        xtypes[6] = 1379064599592568033484279104016888586992032077745986354509927570994841;\\r\\n        xtypes[7] = 1135013754671932960620571453940853222564543354936625869472113926285806993;\\r\\n        xtypes[8] = 57540304388934554663713641863205016852965651449422231770389600610037335;\\r\\n        xtypes[9] = 427915806210161317796546874658782169965398785064314928279652029687658137;\\r\\n        xtypes[10] = 1645042025731165747020947949356891617690279996847601383616229449670826306;\\r\\n        xtypes[11] = 2684402825716469350937603156675849781186432913394870831023569145709657;\\r\\n        xtypes[12] = 948653233187084859464575317686592139222615901473770245914362476756190;\\r\\n        xtypes[13] = 1062866615187437586058037191382177644371875915535598913465368644642651782;\\r\\n        xtypes[14] = 369124523636997250166839484954653248850396559059904420057491494716833881;\\r\\n        xtypes[15] = 442037650556033164066111039525968221351328081129885970071961277633331199;\\r\\n        xtypes[16] = 1759957955803961638370133336600426903615700431543302529351008072247517534;\\r\\n        xtypes[17] = 1409708756458103978798054840171071616358807503498064799802928769236271104;\\r\\n        xtypes[18] = 311015873917387065279390940900677905795687522088524788509100013598527838;\\r\\n        xtypes[19] = 1762344858914181531007580128366350777462090319317585386749708457335562658;\\r\\n        xtypes[20] = 568162619401703612682951583545078045287018669724037195709696111106719797;\\r\\n\\r\\n    \\r\\n        for(i=0;i<=5;i++) {\\r\\n            pos = (params[0]-1) * 6 + i;\\r\\n            colors[i] = toHashCode(xtypes[pos/10] / (16777216 ** (pos%10)) % 16777216);\\r\\n        }\\r\\n\\r\\n        parts[0] = string(abi.encodePacked('<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"1000px\\\" height=\\\"1000px\\\" viewBox=\\\"0 0 1000 1000\\\"><linearGradient id=\\\"g\\\" gradientUnits=\\\"userSpaceOnUse\\\" x1=\\\"500\\\" y1=\\\"1000\\\" x2=\\\"500\\\" y2=\\\"0\\\"><stop offset=\\\"0.5\\\" style=\\\"stop-color:#',colors[1],'\\\"/><stop offset=\\\"1\\\" style=\\\"stop-color:#',colors[3],'\\\"/></linearGradient><rect fill=\\\"url(#g)\\\" width=\\\"1000\\\" height=\\\"1000\\\"/>'));\\r\\n        \\r\\n        \\r\\n        parts[0] = string(abi.encodePacked(parts[0],'<radialGradient id=\\\"s\\\" cx=\\\"676\\\" cy=\\\"326\\\" r=\\\"100\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop  offset=\\\"0.5\\\" style=\\\"stop-color:#FFFF9E\\\"/><stop offset=\\\"1\\\" style=\\\"stop-color:#',colors[1],'\\\"/></radialGradient><circle opacity=\\\"0.5\\\" fill=\\\"url(#s)\\\" cx=\\\"676\\\" cy=\\\"326\\\" r=\\\"100\\\"/><g>'));\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(83 +params[7], colors[2], '0.7'),'<animateMotion path=\\\"m 0 0 h -5000\\\" dur=\\\"1500s\\\" repeatCount=\\\"indefinite\\\" /></g>'));\\r\\n        if (params[8] > 1 ) {\\r\\n            parts[0] = string(abi.encodePacked(parts[0], '<g>',getPolygon(params[8] == 2 ? 88: 89, colors[3], '1'),'<animateMotion path=\\\"M 0 0 H ',(params[8] == 2 ? '15' : '-13'),' Z\\\" dur=\\\"5s\\\" repeatCount=\\\"indefinite\\\"/></g>'));\\r\\n        }\\r\\n\\r\\n        parts[0] = string(abi.encodePacked(parts[0], '<rect x=\\\"0\\\" y=\\\"532\\\" opacity=\\\"0.2\\\" fill=\\\"#',colors[2],'\\\" width=\\\"1000\\\" height=\\\"469\\\"/><rect x=\\\"0\\\" y=\\\"608\\\" opacity=\\\"0.3\\\" fill=\\\"#',colors[2],'\\\" width=\\\"1000\\\" height=\\\"397\\\"/><rect x=\\\"0\\\" y=\\\"707\\\" opacity=\\\"0.75\\\" fill=\\\"#',colors[2],'\\\" width=\\\"1000\\\" height=\\\"500\\\"><animateMotion path=\\\"M 0 0 V 20 Z\\\" dur=\\\"10s\\\" repeatCount=\\\"indefinite\\\" /></rect><rect x=\\\"0\\\" y=\\\"837\\\" fill=\\\"#',colors[2],'\\\" width=\\\"1000\\\" height=\\\"163.167\\\"><animateMotion path=\\\"M 0 0 V 60 Z\\\" dur=\\\"10s\\\" repeatCount=\\\"indefinite\\\" /></rect>'));\\r\\n\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(80+params[6], colors[2], '0.1')));\\r\\n\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(0, colors[3], '1')));\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(1, colors[5], '1')));\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(2, colors[3], '0.3')));\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(3, colors[3], '0.3')));\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(4, colors[0], '0.2')));\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(5, colors[0], '0.2')));\\r\\n        \\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(6, colors[4], '1')));\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(7, colors[2], '1')));\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(8, 'FFFFE6', '1')));\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(9, 'FFFFE6', '1')));\\r\\n\\r\\n        parts[0] = string(abi.encodePacked(parts[0],'<circle fill=\\\"#',colors[2],'\\\" cx=\\\"566\\\" cy=\\\"406\\\" r=\\\"7.3\\\"/><circle opacity=\\\"0.66\\\" fill=\\\"#FFFFFF\\\" cx=\\\"570\\\" cy=\\\"404\\\" r=\\\"3\\\"/><circle fill=\\\"#',colors[2],'\\\" cx=\\\"414\\\" cy=\\\"407\\\" r=\\\"7.3\\\"/><circle opacity=\\\"0.66\\\" fill=\\\"#FFFFFF\\\" cx=\\\"418\\\" cy=\\\"404\\\" r=\\\"3\\\"/><g>'));\\r\\n        \\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(77, colors[2],'1')));\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(78, colors[2], '1')));\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(79, colors[4], '1')));\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(80, colors[4], '1')));\\r\\n\\r\\n        parts[0] = string(abi.encodePacked(parts[0],'<animate attributeName=\\\"opacity\\\" values=\\\"0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0\\\" dur=\\\"4s\\\" repeatCount=\\\"indefinite\\\" begin=\\\"0s\\\"/></g>'));\\r\\n        \\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(9 +params[1]*2-1, colors[2], '1')));\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(9 +params[1]*2, colors[3], '0.66')));\\r\\n        \\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(40 +params[3]*3-2, colors[3], '1')));\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(40 +params[3]*3-1, colors[0], '1')));\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(40 +params[3]*3, colors[0], '1')));\\r\\n\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(52 +params[4]*4-3, colors[2], '0.85')));\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(52 +params[4]*4-2, colors[0], '0.35')));\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(52 +params[4]*4-1, colors[0], '0.35')));\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(52 +params[4]*4, colors[3], '1')));\\r\\n        \\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(17 +params[2]*3-2, colors[3], '1')));\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(17 +params[2]*3-1, colors[5], '0.6')));\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(17 +params[2]*3, colors[5], '0.6')));\\r\\n                \\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(64 +params[5]*3-2, colors[5], '1')));\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(64 +params[5]*3-1, colors[3], '1')));\\r\\n        parts[0] = string(abi.encodePacked(parts[0], getPolygon(64 +params[5]*3, colors[3], '1')));\\r\\n        \\r\\n        parts[1] = string(abi.encodePacked('</svg> '));\\r\\n\\r\\n        string memory output = string(abi.encodePacked(parts[0],parts[1]));\\r\\n        \\r\\n\\r\\n        \\r\\n        parts[0] = '[{ \\\"trait_type\\\": \\\"Palette\\\", \\\"value\\\": \\\"';\\r\\n        parts[1] = toString(params[0]);\\r\\n        parts[2] = '\\\" }, { \\\"trait_type\\\": \\\"Beard\\\", \\\"value\\\": \\\"';\\r\\n        parts[3] = toString(params[1]);\\r\\n        parts[4] = '\\\" }, { \\\"trait_type\\\": \\\"Cap\\\", \\\"value\\\": \\\"';\\r\\n        parts[5] = toString(params[2]);\\r\\n        parts[6] = '\\\" }, { \\\"trait_type\\\": \\\"Ear\\\", \\\"value\\\": \\\"';\\r\\n        parts[7] = toString(params[3]);\\r\\n        parts[8] = '\\\" }, { \\\"trait_type\\\": \\\"Glasses\\\", \\\"value\\\": \\\"';\\r\\n        parts[9] = toString(params[4]);\\r\\n        parts[10] = '\\\" }, { \\\"trait_type\\\": \\\"Tube\\\", \\\"value\\\": \\\"';\\r\\n        parts[11] = toString(params[5]);\\r\\n        parts[12] = '\\\" }, { \\\"trait_type\\\": \\\"Mountains\\\", \\\"value\\\": \\\"';\\r\\n        parts[13] = toString(params[6]);\\r\\n        parts[14] = '\\\" }, { \\\"trait_type\\\": \\\"Ship\\\", \\\"value\\\": \\\"';\\r\\n        parts[15] = toString(params[7]);\\r\\n        if (params[8] > 1) {\\r\\n            parts[15] = string(abi.encodePacked(parts[15], \\r\\n             '\\\" }, { \\\"trait_type\\\": \\\"Palm\\\", \\\"value\\\": \\\"',toString(params[8]-1)));\\r\\n        }\\r\\n        parts[16] = '\\\" }]';\\r\\n        \\r\\n        string memory strparams = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5]));\\r\\n        strparams = string(abi.encodePacked(strparams, parts[6], parts[7], parts[8], parts[9], parts[10]));\\r\\n        strparams = string(abi.encodePacked(strparams, parts[11], parts[12], parts[13], parts[14], parts[15], parts[16]));\\r\\n\\r\\n\\r\\n\\r\\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\\\"name\\\": \\\"Onchain Seaman\\\", \\\"description\\\": \\\"Onchain Seaman - beautiful avatar, completely generated OnChain\\\",\\\"attributes\\\":', strparams, ', \\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(output)), '\\\"}'))));\\r\\n        output = string(abi.encodePacked('data:application/json;base64,', json));\\r\\n\\r\\n        return output;\\r\\n    }\\r\\n    \\r\\n    function flipSaleState() public onlyOwner {\\r\\n        saleIsActive = !saleIsActive;\\r\\n    }\\r\\n    \\r\\n    function burnAll() public onlyOwner {\\r\\n        burned = true;\\r\\n    }\\r\\n    \\r\\n    function directMint(address to, uint256 tokenId) public onlyOwner {\\r\\n        require(!burned, \\\"Burned!\\\");\\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n    \\r\\n    function mintMany(uint32[] memory ids) public {\\r\\n        require(!burned, \\\"Burned!\\\");\\r\\n        require(saleIsActive, \\\"Sale must be active to mint tokens\\\");\\r\\n\\r\\n        for (uint i = 0; i < ids.length; i++) {\\r\\n            require(SeaContract.ownerOf(ids[i]) == msg.sender, \\\"Must own a Sea to mint token\\\");\\r\\n            _safeMint(msg.sender, ids[i]);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function mintToken(uint tokenId) public {\\r\\n        require(!burned, \\\"Burned!\\\");\\r\\n        require(saleIsActive, \\\"Sale must be active to mint tokens\\\");\\r\\n        require(SeaContract.ownerOf(tokenId) == msg.sender, \\\"Must own a Sea to mint token\\\");\\r\\n\\r\\n        _safeMint(msg.sender, tokenId);\\r\\n    }\\r\\n\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/// [MIT License]\\r\\n/// @title Base64\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\n/// @author Brecht Devos <brecht@loopring.org>\\r\\nlibrary Base64 {\\r\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    /// @notice Encodes some bytes to the base64 representation\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        uint256 len = data.length;\\r\\n        if (len == 0) return \\\"\\\";\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\r\\n\\r\\n        // Add some extra buffer at the end\\r\\n        bytes memory result = new bytes(encodedLen + 32);\\r\\n\\r\\n        bytes memory table = TABLE;\\r\\n\\r\\n        assembly {\\r\\n            let tablePtr := add(table, 1)\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            for {\\r\\n                let i := 0\\r\\n            } lt(i, len) {\\r\\n\\r\\n            } {\\r\\n                i := add(i, 3)\\r\\n                let input := and(mload(add(data, i)), 0xffffff)\\r\\n\\r\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\r\\n                out := shl(224, out)\\r\\n\\r\\n                mstore(resultPtr, out)\\r\\n\\r\\n                resultPtr := add(resultPtr, 4)\\r\\n            }\\r\\n\\r\\n            switch mod(len, 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n\\r\\n            mstore(result, encodedLen)\\r\\n        }\\r\\n\\r\\n        return string(result);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SeaAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"directMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipSaleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"ids\",\"type\":\"uint32[]\"}],\"name\":\"mintMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SeaAvatars","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}