{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SharkDaoBidder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title SharkDAO Bidding Management Contract\\n\\n/***********************************************************\\n------------------------░░░░░░░░----------------------------\\n--------------------------░░░░░░░░░░------------------------\\n----------------------------░░░░░░░░░░----------------------\\n----░░----------------------░░░░░░░░░░░░--------------------\\n------░░----------------░░░░░░░░░░░░░░░░░░░░░░--------------\\n------░░░░----------░░░░░░░░░░░░░░░░░░░░░░░░░░░░------------\\n------░░░░░░----░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░----------\\n--------░░░░░░--░░░███████████░░███████████░░░░░░░░░--------\\n--------░░░░░░░░░░░██    █████░░██    █████░░░░░░░░░░░------\\n----------░░█████████    █████████    █████░░░░░░░░░░░------\\n----------░░██░░░░░██    █████░░██    █████░░░░░░░░░--------\\n--------░░░░░░--░░░███████████░░███████████░░░░░░░----------\\n--------░░░░----░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░----------\\n--------░░------░░░░░░░░░░░░░░░░░░░░  ░░  ░░  ░░------------\\n------░░--------░░░░░░░░░░░░░░░░░░  ░░  ░░  ░░░░------------\\n----------------░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░--------------\\n----------------░░░░░░████░░░░░██░░░░░██░░░░----------------\\n----------------░░░░--██░░██░██░░██░██░░██░░----------------\\n----------------░░░░--██░░██░██████░██░░██░░----------------\\n----------------░░░░--████░░░██░░██░░░██░░░░----------------\\n----------------░░░░--░░░░░░░░░░░░░░░░░░░░░░----------------\\n************************************************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport { INounsAuctionHouse } from './interfaces/INounsAuctionHouse.sol';\\nimport { IERC721 } from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\\n\\n\\ncontract SharkDaoBidder is Ownable {\\n    event AddedBidder(address indexed bidder);\\n    event RemovedBidder(address indexed bidder);\\n\\n    mapping(address => bool) public daoBidders;\\n    INounsAuctionHouse public auctionHouse;\\n    IERC721 public nouns;\\n\\n    // Equivalent to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    bytes4 internal constant ONERC721RECEIVED_FUNCTION_SIGNATURE = 0x150b7a02;\\n\\n    constructor(address _nounsAuctionHouseAddress, address _nounsTokenAddress) {\\n        auctionHouse = INounsAuctionHouse(_nounsAuctionHouseAddress);\\n        nouns = IERC721(_nounsTokenAddress);\\n    }\\n\\n\\n    /**\\n        Modifier for Ensuring DAO Member Transactions\\n     */\\n    modifier onlyDaoBidder() {\\n        require(msg.sender == owner() || daoBidders[msg.sender], \\\"Only usable by Owner or authorized DAO members\\\");\\n        _;\\n    }\\n\\n    modifier pullAssetsFirst() {\\n        require(address(this).balance == 0, \\\"Pull funds before changing ownership\\\");\\n        require(nouns.balanceOf(address(this)) == 0, \\\"Pull nouns before changing ownership\\\");\\n        _;\\n    }\\n\\n\\n    /**\\n        Owner-only Privileged Methods for Contract & Access Expansion\\n     */\\n    function transferOwnership(address _newOwner) public override onlyOwner pullAssetsFirst {\\n        super.transferOwnership(_newOwner);\\n    }\\n\\n    function renounceOwnership() public override onlyOwner pullAssetsFirst {\\n        super.renounceOwnership();\\n    }\\n\\n\\n    function addDaoBidder(address _bidder) public onlyOwner {\\n        daoBidders[_bidder] = true;\\n        emit AddedBidder(_bidder);\\n    }\\n\\n\\n    /**\\n        Authorized Bidder Functions for Bidding, Pulling Funds & Access\\n     */\\n    function addFunds() external payable {} // Convenience function for Etherscan, etc.\\n\\n    function pullFunds() external onlyDaoBidder {\\n        address ownerAddress = payable(owner()); // Funds MUST go to Owner\\n        (bool sent, ) = ownerAddress.call{value: address(this).balance}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    function pullNoun(uint256 _nounId) external onlyDaoBidder {\\n        nouns.safeTransferFrom(address(this), owner(), _nounId); // Nouns MUST go to Owner\\n    }\\n\\n    function removeDaoBidder(address _bidder) public onlyDaoBidder {\\n        delete daoBidders[_bidder];\\n        emit RemovedBidder(_bidder);\\n    }\\n\\n    function submitBid(uint256 _nounId, uint256 _proposedBid) public onlyDaoBidder {\\n        // Bids can be submitted by ANYONE in the DAO\\n        require(_proposedBid <= address(this).balance, \\\"Proposed bid is above available contract funds\\\");\\n        auctionHouse.createBid{value: _proposedBid}(_nounId);\\n    }\\n\\n\\n    /**\\n        ETH & Nouns ERC-721 Receiving and Sending\\n     */\\n    receive() external payable {} // Receive Ether w/o msg.data\\n    fallback() external payable {} // Receive Ether w/ msg.data\\n\\n    function onERC721Received(address, address, uint256, bytes memory) pure external returns (bytes4) {\\n        return ONERC721RECEIVED_FUNCTION_SIGNATURE; // Required per EIP-721\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INounsAuctionHouse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for Noun Auction Houses\\n\\n/*********************************\\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\\n * ░░░░░░█████████░░█████████░░░ *\\n * ░░░░░░██░░░████░░██░░░████░░░ *\\n * ░░██████░░░████████░░░████░░░ *\\n * ░░██░░██░░░████░░██░░░████░░░ *\\n * ░░██░░██░░░████░░██░░░████░░░ *\\n * ░░░░░░█████████░░█████████░░░ *\\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\\n *********************************/\\n\\npragma solidity ^0.8.6;\\n\\ninterface INounsAuctionHouse {\\n    struct Auction {\\n        // ID for the Noun (ERC721 token ID)\\n        uint256 nounId;\\n        // The current highest bid amount\\n        uint256 amount;\\n        // The time that the auction started\\n        uint256 startTime;\\n        // The time that the auction is scheduled to end\\n        uint256 endTime;\\n        // The address of the current highest bid\\n        address payable bidder;\\n        // Whether or not the auction has been settled\\n        bool settled;\\n    }\\n\\n    event AuctionCreated(uint256 indexed nounId, uint256 startTime, uint256 endTime);\\n\\n    event AuctionBid(uint256 indexed nounId, address sender, uint256 value, bool extended);\\n\\n    event AuctionExtended(uint256 indexed nounId, uint256 endTime);\\n\\n    event AuctionSettled(uint256 indexed nounId, address winner, uint256 amount);\\n\\n    event AuctionTimeBufferUpdated(uint256 timeBuffer);\\n\\n    event AuctionReservePriceUpdated(uint256 reservePrice);\\n\\n    event AuctionMinBidIncrementPercentageUpdated(uint256 minBidIncrementPercentage);\\n\\n    function settleAuction() external;\\n\\n    function settleCurrentAndCreateNewAuction() external;\\n\\n    function createBid(uint256 nounId) external payable;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function setTimeBuffer(uint256 timeBuffer) external;\\n\\n    function setReservePrice(uint256 reservePrice) external;\\n\\n    function setMinBidIncrementPercentage(uint8 minBidIncrementPercentage) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nounsAuctionHouseAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nounsTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"AddedBidder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"RemovedBidder\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"addDaoBidder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionHouse\",\"outputs\":[{\"internalType\":\"contract INounsAuctionHouse\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"daoBidders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nouns\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nounId\",\"type\":\"uint256\"}],\"name\":\"pullNoun\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"removeDaoBidder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nounId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_proposedBid\",\"type\":\"uint256\"}],\"name\":\"submitBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SharkDaoBidder","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000830bd73e4184cef73443c15111a1df14e495c7060000000000000000000000009c8ff314c9bc7f6e59a9d9225fb22946427edc03","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}