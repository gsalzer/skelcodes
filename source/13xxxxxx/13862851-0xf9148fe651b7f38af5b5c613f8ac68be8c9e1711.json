{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Interfaces/IDistro.sol\r\n\r\n\r\n\r\npragma solidity =0.8.6;\r\n\r\ninterface IDistro {\r\n    /**\r\n     * @dev Emitted when someone makes a claim of tokens\r\n     */\r\n    event Claim(address indexed grantee, uint256 amount);\r\n    /**\r\n     * @dev Emitted when the DISTRIBUTOR allocate an amount to a grantee\r\n     */\r\n    event Allocate(\r\n        address indexed distributor,\r\n        address indexed grantee,\r\n        uint256 amount\r\n    );\r\n    /**\r\n     * @dev Emitted when the DEFAULT_ADMIN assign an amount to a DISTRIBUTOR\r\n     */\r\n    event Assign(\r\n        address indexed admin,\r\n        address indexed distributor,\r\n        uint256 amount\r\n    );\r\n    /**\r\n     * @dev Emitted when someone change their reception address\r\n     */\r\n    event ChangeAddress(address indexed oldAddress, address indexed newAddress);\r\n\r\n    /**\r\n     * @dev Emitted when a new startTime is set\r\n     */\r\n    event StartTimeChanged(uint256 newStartTime, uint256 newCliffTime);\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens will be streamed\r\n     */\r\n    function totalTokens() external view returns (uint256);\r\n\r\n    /**\r\n     * Function that allows the DEFAULT_ADMIN_ROLE to assign set a new startTime if it hasn't started yet\r\n     * @param newStartTime new startTime\r\n     *\r\n     * Emits a {StartTimeChanged} event.\r\n     *\r\n     */\r\n    function setStartTime(uint256 newStartTime) external;\r\n\r\n    /**\r\n     * Function that allows the DEFAULT_ADMIN_ROLE to assign tokens to an address who later can distribute them.\r\n     * @dev It is required that the DISTRIBUTOR_ROLE is already held by the address to which an amount will be assigned\r\n     * @param distributor the address, generally a smart contract, that will determine who gets how many tokens\r\n     * @param amount Total amount of tokens to assign to that address for distributing\r\n     */\r\n    function assign(address distributor, uint256 amount) external;\r\n\r\n    /**\r\n     * Function to claim tokens for a specific address. It uses the current timestamp\r\n     */\r\n    function claim() external;\r\n\r\n    /**\r\n     * Function that allows to the distributor address to allocate some amount of tokens to a specific recipient\r\n     * @dev Needs to be initialized: Nobody has the DEFAULT_ADMIN_ROLE and all available tokens have been assigned\r\n     * @param recipient of token allocation\r\n     * @param amount allocated amount\r\n     * @param claim whether claim after allocate\r\n     */\r\n    function allocate(\r\n        address recipient,\r\n        uint256 amount,\r\n        bool claim\r\n    ) external;\r\n\r\n    /**\r\n     * Function that allows to the distributor address to allocate some amounts of tokens to specific recipients\r\n     * @dev Needs to be initialized: Nobody has the DEFAULT_ADMIN_ROLE and all available tokens have been assigned\r\n     * @param recipients of token allocation\r\n     * @param amounts allocated amount\r\n     */\r\n    function allocateMany(address[] memory recipients, uint256[] memory amounts)\r\n        external;\r\n\r\n    function sendGIVbacks(address[] memory recipients, uint256[] memory amounts)\r\n        external;\r\n\r\n    /**\r\n     * Function that allows a recipient to change its address\r\n     * @dev The change can only be made to an address that has not previously received an allocation &\r\n     * the distributor cannot change its address\r\n     */\r\n    function changeAddress(address newAddress) external;\r\n\r\n    /**\r\n     * Function to get the current timestamp from the block\r\n     */\r\n    function getTimestamp() external view returns (uint256);\r\n\r\n    /**\r\n     * Function to get the total unlocked tokes at some moment\r\n     */\r\n    function globallyClaimableAt(uint256 timestamp)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * Function to get the unlocked tokes at some moment for a specific address\r\n     */\r\n    function claimableAt(address recipient, uint256 timestamp)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * Function to get the unlocked tokens for a specific address. It uses the current timestamp\r\n     */\r\n    function claimableNow(address recipient) external view returns (uint256);\r\n\r\n    function cancelAllocation(address prevRecipient, address newRecipient)\r\n        external;\r\n}\r\n\r\n// File: openzeppelin-contracts-upgradable-v4/proxy/utils/Initializable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-contracts-upgradable-v4/utils/ContextUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: openzeppelin-contracts-upgradable-v4/access/OwnableUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: openzeppelin-contracts-v4/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/Tokens/UniswapV3RewardToken.sol\r\n\r\n\r\n\r\npragma solidity 0.8.6;\r\n\r\n\r\n\r\n\r\ncontract UniswapV3RewardToken is IERC20, OwnableUpgradeable {\r\n    uint256 public initialBalance;\r\n\r\n    string public constant name = \"Giveth Uniswap V3 Reward Token\";\r\n    string public constant symbol = \"GUR\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    IDistro public tokenDistro;\r\n    address public uniswapV3Staker;\r\n    uint256 public override totalSupply;\r\n\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n\r\n    function initialize(IDistro _tokenDistribution, address _uniswapV3Staker)\r\n        public\r\n        initializer\r\n    {\r\n        __Ownable_init();\r\n        tokenDistro = _tokenDistribution;\r\n        uniswapV3Staker = _uniswapV3Staker;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (account == uniswapV3Staker) return totalSupply;\r\n        return 0;\r\n    }\r\n\r\n    function approve(address spender, uint256 value)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        require(\r\n            msg.sender == uniswapV3Staker,\r\n            \"GivethUniswapV3Reward:transfer:ONLY_STAKER\"\r\n        );\r\n\r\n        totalSupply = totalSupply - value;\r\n        tokenDistro.allocate(to, value, true);\r\n\r\n        emit RewardPaid(to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external override returns (bool) {\r\n        require(\r\n            from == owner(),\r\n            \"GivethUniswapV3Reward:transferFrom:ONLY_OWNER_CAN_ADD_INCENTIVES\"\r\n        );\r\n\r\n        // Only uniswapV3Staker can do the transferFrom\r\n        require(\r\n            msg.sender == uniswapV3Staker,\r\n            \"GivethUniswapV3Reward:transferFrom:ONLY_STAKER\"\r\n        );\r\n\r\n        // Only to uniswapV3Staker is allowed\r\n        require(\r\n            to == uniswapV3Staker,\r\n            \"GivethUniswapV3Reward:transferFrom:ONLY_TO_STAKER\"\r\n        );\r\n\r\n        totalSupply = totalSupply + value;\r\n\r\n        emit Transfer(address(0), to, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        if (spender == uniswapV3Staker) return type(uint256).max;\r\n        return 0;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDistro\",\"name\":\"_tokenDistribution\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV3Staker\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDistro\",\"outputs\":[{\"internalType\":\"contract IDistro\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV3Staker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UniswapV3RewardToken","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://59b99f8423a52010048866177df624a24b2ac8a5f0a94b7aefa0ad2f25db910b"}]}