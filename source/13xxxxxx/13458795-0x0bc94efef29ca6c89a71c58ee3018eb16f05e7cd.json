{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@yield-protocol/yieldspace-v2/contracts/Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.6;\\n\\nimport \\\"@yield-protocol/utils-v2/contracts/token/IERC20.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/token/IERC20Metadata.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/token/ERC20Permit.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/token/SafeERC20Namer.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/token/MinimalTransferHelper.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/cast/CastU256U128.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/cast/CastU256U112.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/cast/CastU256I256.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/cast/CastU128U112.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/cast/CastU128I128.sol\\\";\\nimport \\\"@yield-protocol/yieldspace-interfaces/IPool.sol\\\";\\nimport \\\"@yield-protocol/yieldspace-interfaces/IPoolFactory.sol\\\";\\nimport \\\"@yield-protocol/vault-interfaces/IFYToken.sol\\\";\\nimport \\\"./YieldMath.sol\\\";\\n\\n\\n/// @dev The Pool contract exchanges base for fyToken at a price defined by a specific formula.\\ncontract Pool is IPool, ERC20Permit {\\n    using CastU256U128 for uint256;\\n    using CastU256U112 for uint256;\\n    using CastU256I256 for uint256;\\n    using CastU128U112 for uint128;\\n    using CastU128I128 for uint128;\\n    using MinimalTransferHelper for IERC20;\\n\\n    event Trade(uint32 maturity, address indexed from, address indexed to, int256 bases, int256 fyTokens);\\n    event Liquidity(uint32 maturity, address indexed from, address indexed to, address indexed fyTokenTo, int256 bases, int256 fyTokens, int256 poolTokens);\\n    event Sync(uint112 baseCached, uint112 fyTokenCached, uint256 cumulativeBalancesRatio);\\n\\n    int128 public immutable override ts;              // 1 / Seconds in 10 years, in 64.64\\n    int128 public immutable override g1;             // To be used when selling base to the pool\\n    int128 public immutable override g2;             // To be used when selling fyToken to the pool\\n    uint32 public immutable override maturity;\\n    uint96 public immutable override scaleFactor;    // Scale up to 18 low decimal tokens to get the right precision in YieldMath\\n\\n    IERC20 public immutable override base;\\n    IFYToken public immutable override fyToken;\\n\\n    uint112 private baseCached;              // uses single storage slot, accessible via getCache\\n    uint112 private fyTokenCached;           // uses single storage slot, accessible via getCache\\n    uint32  private blockTimestampLast;      // uses single storage slot, accessible via getCache\\n\\n    uint256 public cumulativeBalancesRatio;  // Fixed point factor with 27 decimals (ray)\\n\\n    constructor()\\n        ERC20Permit(\\n            string(abi.encodePacked(\\\"Yield \\\", SafeERC20Namer.tokenName(IPoolFactory(msg.sender).nextFYToken()), \\\" LP Token\\\")),\\n            string(abi.encodePacked(SafeERC20Namer.tokenSymbol(IPoolFactory(msg.sender).nextFYToken()), \\\"LP\\\")),\\n            SafeERC20Namer.tokenDecimals(IPoolFactory(msg.sender).nextBase())\\n        )\\n    {\\n        IPoolFactory _factory = IPoolFactory(msg.sender);\\n        IFYToken _fyToken = IFYToken(_factory.nextFYToken());\\n        IERC20 _base = IERC20(_factory.nextBase());\\n        fyToken = _fyToken;\\n        base = _base;\\n\\n        uint256 _maturity = _fyToken.maturity();\\n        require (_maturity <= type(uint32).max, \\\"Pool: Maturity too far in the future\\\");\\n        maturity = uint32(_maturity);\\n\\n        ts = _factory.ts();\\n        g1 = _factory.g1();\\n        g2 = _factory.g2();\\n\\n        scaleFactor = uint96(10 ** (18 - SafeERC20Namer.tokenDecimals(address(_base))));\\n    }\\n\\n    /// @dev Trading can only be done before maturity\\n    modifier beforeMaturity() {\\n        require(\\n            block.timestamp < maturity,\\n            \\\"Pool: Too late\\\"\\n        );\\n        _;\\n    }\\n\\n    // ---- Balances management ----\\n\\n    /// @dev Updates the cache to match the actual balances.\\n    function sync() external {\\n        _update(_getBaseBalance(), _getFYTokenBalance(), baseCached, fyTokenCached);\\n    }\\n\\n    /// @dev Returns the cached balances & last updated timestamp.\\n    /// @return Cached base token balance.\\n    /// @return Cached virtual FY token balance.\\n    /// @return Timestamp that balances were last cached.\\n    function getCache()\\n        external view override\\n        returns (uint112, uint112, uint32)\\n    {\\n        return (baseCached, fyTokenCached, blockTimestampLast);\\n    }\\n\\n    /// @dev Returns the \\\"virtual\\\" fyToken balance, which is the real balance plus the pool token supply.\\n    function getFYTokenBalance()\\n        public view override\\n        returns(uint112)\\n    {\\n        return _getFYTokenBalance();\\n    }\\n\\n    /// @dev Returns the base balance\\n    function getBaseBalance()\\n        public view override\\n        returns(uint112)\\n    {\\n        return _getBaseBalance();\\n    }\\n\\n    /// @dev Returns the \\\"virtual\\\" fyToken balance, which is the real balance plus the pool token supply.\\n    function _getFYTokenBalance()\\n        internal view\\n        returns(uint112)\\n    {\\n        return (fyToken.balanceOf(address(this)) + _totalSupply).u112();\\n    }\\n\\n    /// @dev Returns the base balance\\n    function _getBaseBalance()\\n        internal view\\n        returns(uint112)\\n    {\\n        return base.balanceOf(address(this)).u112();\\n    }\\n\\n    /// @dev Retrieve any base tokens not accounted for in the cache\\n    function retrieveBase(address to)\\n        external override\\n        returns(uint128 retrieved)\\n    {\\n        retrieved = _getBaseBalance() - baseCached; // Cache can never be above balances\\n        base.safeTransfer(to, retrieved);\\n        // Now the current balances match the cache, so no need to update the TWAR\\n    }\\n\\n    /// @dev Retrieve any fyTokens not accounted for in the cache\\n    function retrieveFYToken(address to)\\n        external override\\n        returns(uint128 retrieved)\\n    {\\n        retrieved = _getFYTokenBalance() - fyTokenCached; // Cache can never be above balances\\n        IERC20(address(fyToken)).safeTransfer(to, retrieved);\\n        // Now the balances match the cache, so no need to update the TWAR\\n    }\\n\\n    /// @dev Update cache and, on the first call per block, ratio accumulators\\n    function _update(uint128 baseBalance, uint128 fyBalance, uint112 _baseCached, uint112 _fyTokenCached) private {\\n        uint32 blockTimestamp = uint32(block.timestamp);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _baseCached != 0 && _fyTokenCached != 0) {\\n            // We multiply by 1e27 here so that r = t * y/x is a fixed point factor with 27 decimals \\n            uint256 scaledFYTokenCached = uint256(_fyTokenCached) * 1e27;\\n            cumulativeBalancesRatio += scaledFYTokenCached  * timeElapsed / _baseCached;\\n        }\\n        baseCached = baseBalance.u112();\\n        fyTokenCached = fyBalance.u112();\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(baseCached, fyTokenCached, cumulativeBalancesRatio);\\n    }\\n\\n    // ---- Liquidity ----\\n\\n    /// @dev Mint liquidity tokens in exchange for adding base and fyToken\\n    /// The amount of liquidity tokens to mint is calculated from the amount of unaccounted for fyToken in this contract.\\n    /// A proportional amount of base tokens need to be present in this contract, also unaccounted for.\\n    /// @param to Wallet receiving the minted liquidity tokens.\\n    /// @param remainder Wallet receiving any surplus base.\\n    /// @param minRatio Minimum ratio of base to fyToken in the pool.\\n    /// @param maxRatio Maximum ratio of base to fyToken in the pool.\\n    /// @return The amount of liquidity tokens minted.\\n    function mint(address to, address remainder, uint256 minRatio, uint256 maxRatio)\\n        external override\\n        returns (uint256, uint256, uint256)\\n    {\\n        return _mintInternal(to, remainder, 0, minRatio, maxRatio);\\n    }\\n\\n    /// @dev Mint liquidity tokens in exchange for adding only base\\n    /// The amount of liquidity tokens is calculated from the amount of fyToken to buy from the pool,\\n    /// plus the amount of unaccounted for fyToken in this contract.\\n    /// The base tokens need to be present in this contract, unaccounted for.\\n    /// @param to Wallet receiving the minted liquidity tokens.\\n    /// @param remainder Wallet receiving any surplus base.\\n    /// @param fyTokenToBuy Amount of `fyToken` being bought in the Pool, from this we calculate how much base it will be taken in.\\n    /// @param minRatio Minimum ratio of base to fyToken in the pool.\\n    /// @param maxRatio Maximum ratio of base to fyToken in the pool.\\n    /// @return The amount of liquidity tokens minted.\\n    function mintWithBase(address to, address remainder, uint256 fyTokenToBuy, uint256 minRatio, uint256 maxRatio)\\n        external override\\n        returns (uint256, uint256, uint256)\\n    {\\n        return _mintInternal(to, remainder, fyTokenToBuy, minRatio, maxRatio);\\n    }\\n\\n    /// @dev Mint liquidity tokens, with an optional internal trade to buy fyToken beforehand.\\n    /// The amount of liquidity tokens is calculated from the amount of fyToken to buy from the pool,\\n    /// plus the amount of unaccounted for fyToken in this contract.\\n    /// The base tokens need to be present in this contract, unaccounted for.\\n    /// @param to Wallet receiving the minted liquidity tokens.\\n    /// @param remainder Wallet receiving any surplus base.\\n    /// @param fyTokenToBuy Amount of `fyToken` being bought in the Pool, from this we calculate how much base it will be taken in.\\n    /// @param minRatio Minimum ratio of base to fyToken in the pool.\\n    /// @param maxRatio Minimum ratio of base to fyToken in the pool.\\n    function _mintInternal(address to, address remainder, uint256 fyTokenToBuy, uint256 minRatio, uint256 maxRatio)\\n        internal\\n        returns (uint256 baseIn, uint256 fyTokenIn, uint256 tokensMinted)\\n    {\\n        // Gather data\\n        uint256 supply = _totalSupply;\\n        (uint112 _baseCached, uint112 _fyTokenCached) =\\n            (baseCached, fyTokenCached);\\n        uint256 _realFYTokenCached = _fyTokenCached - supply;    // The fyToken cache includes the virtual fyToken, equal to the supply\\n        uint256 baseBalance = base.balanceOf(address(this));\\n        uint256 fyTokenBalance = fyToken.balanceOf(address(this));\\n        uint256 baseAvailable = baseBalance - _baseCached;\\n\\n        // Check the burn wasn't sandwiched\\n        require (\\n            _realFYTokenCached == 0 || (\\n                uint256(_baseCached) * 1e18 / _realFYTokenCached >= minRatio &&\\n                uint256(_baseCached) * 1e18 / _realFYTokenCached <= maxRatio\\n            ),\\n            \\\"Pool: Reserves ratio changed\\\"\\n        );\\n\\n        // Calculate token amounts\\n        if (supply == 0) { // Initialize at 1 pool token minted per base token supplied\\n            baseIn = baseAvailable;\\n            tokensMinted = baseIn;\\n        } else if (_realFYTokenCached == 0) { // Edge case, no fyToken in the Pool after initialization\\n            baseIn = baseAvailable;\\n            tokensMinted = supply * baseIn / _baseCached;\\n        } else {\\n            // There is an optional virtual trade before the mint\\n            uint256 baseToSell;\\n            if (fyTokenToBuy > 0) {\\n                baseToSell = _buyFYTokenPreview(\\n                    fyTokenToBuy.u128(),\\n                    _baseCached,\\n                    _fyTokenCached\\n                ); \\n            }\\n\\n            // We use all the available fyTokens, plus a virtual trade if it happened, surplus is in base tokens\\n            fyTokenIn = fyTokenBalance - _realFYTokenCached;\\n            tokensMinted = (supply * (fyTokenToBuy + fyTokenIn)) / (_realFYTokenCached - fyTokenToBuy);\\n            baseIn = baseToSell + ((_baseCached + baseToSell) * tokensMinted) / supply;\\n            require(baseAvailable >= baseIn, \\\"Pool: Not enough base token in\\\");\\n        }\\n\\n        // Update TWAR\\n        _update(\\n            (_baseCached + baseIn).u128(),\\n            (_fyTokenCached + fyTokenIn + tokensMinted).u128(), // Account for the \\\"virtual\\\" fyToken from the new minted LP tokens\\n            _baseCached,\\n            _fyTokenCached\\n        );\\n\\n        // Execute mint\\n        _mint(to, tokensMinted);\\n\\n        // Return any unused base\\n        if (baseAvailable - baseIn > 0) base.safeTransfer(remainder, baseAvailable - baseIn);\\n\\n        emit Liquidity(maturity, msg.sender, to, address(0), -(baseIn.i256()), -(fyTokenIn.i256()), tokensMinted.i256());\\n    }\\n\\n    /// @dev Burn liquidity tokens in exchange for base and fyToken.\\n    /// The liquidity tokens need to be in this contract.\\n    /// @param baseTo Wallet receiving the base.\\n    /// @param fyTokenTo Wallet receiving the fyToken.\\n    /// @param minRatio Minimum ratio of base to fyToken in the pool.\\n    /// @param maxRatio Maximum ratio of base to fyToken in the pool.\\n    /// @return The amount of tokens burned and returned (tokensBurned, bases, fyTokens).\\n    function burn(address baseTo, address fyTokenTo, uint256 minRatio, uint256 maxRatio)\\n        external override\\n        returns (uint256, uint256, uint256)\\n    {\\n        return _burnInternal(baseTo, fyTokenTo, false, minRatio, maxRatio);\\n    }\\n\\n    /// @dev Burn liquidity tokens in exchange for base.\\n    /// The liquidity provider needs to have called `pool.approve`.\\n    /// @param to Wallet receiving the base and fyToken.\\n    /// @param minRatio Minimum ratio of base to fyToken in the pool.\\n    /// @param maxRatio Minimum ratio of base to fyToken in the pool.\\n    /// @return tokensBurned The amount of lp tokens burned.\\n    /// @return baseOut The amount of base tokens returned.\\n    function burnForBase(address to, uint256 minRatio, uint256 maxRatio)\\n        external override\\n        returns (uint256 tokensBurned, uint256 baseOut)\\n    {\\n        (tokensBurned, baseOut, ) = _burnInternal(to, address(0), true, minRatio, maxRatio);\\n    }\\n\\n\\n    /// @dev Burn liquidity tokens in exchange for base.\\n    /// The liquidity provider needs to have called `pool.approve`.\\n    /// @param baseTo Wallet receiving the base.\\n    /// @param fyTokenTo Wallet receiving the fyToken.\\n    /// @param tradeToBase Whether the resulting fyToken should be traded for base tokens.\\n    /// @param minRatio Minimum ratio of base to fyToken in the pool.\\n    /// @param maxRatio Minimum ratio of base to fyToken in the pool.\\n    /// @return tokensBurned The amount of pool tokens burned.\\n    /// @return tokenOut The amount of base tokens returned.\\n    /// @return fyTokenOut The amount of fyTokens returned.\\n    function _burnInternal(address baseTo, address fyTokenTo, bool tradeToBase, uint256 minRatio, uint256 maxRatio)\\n        internal\\n        returns (uint256 tokensBurned, uint256 tokenOut, uint256 fyTokenOut)\\n    {\\n        \\n        // Gather data\\n        tokensBurned = _balanceOf[address(this)];\\n        uint256 supply = _totalSupply;\\n        (uint112 _baseCached, uint112 _fyTokenCached) =\\n            (baseCached, fyTokenCached);\\n        uint256 _realFYTokenCached = _fyTokenCached - supply;    // The fyToken cache includes the virtual fyToken, equal to the supply\\n\\n        // Check the burn wasn't sandwiched\\n        require (\\n            _realFYTokenCached == 0 || (\\n                uint256(_baseCached) * 1e18 / _realFYTokenCached >= minRatio &&\\n                uint256(_baseCached) * 1e18 / _realFYTokenCached <= maxRatio\\n            ),\\n            \\\"Pool: Reserves ratio changed\\\"\\n        );\\n\\n        // Calculate trade\\n        tokenOut = (tokensBurned * _baseCached) / supply;\\n        fyTokenOut = (tokensBurned * _realFYTokenCached) / supply;\\n\\n        if (tradeToBase) {\\n            tokenOut += YieldMath.baseOutForFYTokenIn(                      // This is a virtual sell\\n                (_baseCached - tokenOut.u128()) * scaleFactor,              // Cache, minus virtual burn\\n                (_fyTokenCached - fyTokenOut.u128()) * scaleFactor,         // Cache, minus virtual burn\\n                fyTokenOut.u128() * scaleFactor,                            // Sell the virtual fyToken obtained\\n                maturity - uint32(block.timestamp),                         // This can't be called after maturity\\n                ts,\\n                g2\\n            ) / scaleFactor;\\n            fyTokenOut = 0;\\n        }\\n\\n        // Update TWAR\\n        _update(\\n            (_baseCached - tokenOut).u128(),\\n            (_fyTokenCached - fyTokenOut - tokensBurned).u128(),\\n            _baseCached,\\n            _fyTokenCached\\n        );\\n\\n        // Transfer assets\\n        _burn(address(this), tokensBurned);\\n        base.safeTransfer(baseTo, tokenOut);\\n        if (fyTokenOut > 0) IERC20(address(fyToken)).safeTransfer(fyTokenTo, fyTokenOut);\\n\\n        emit Liquidity(maturity, msg.sender, baseTo, fyTokenTo, tokenOut.i256(), fyTokenOut.i256(), -(tokensBurned.i256()));\\n    }\\n\\n    // ---- Trading ----\\n\\n    /// @dev Sell base for fyToken.\\n    /// The trader needs to have transferred the amount of base to sell to the pool before in the same transaction.\\n    /// @param to Wallet receiving the fyToken being bought\\n    /// @param min Minimm accepted amount of fyToken\\n    /// @return Amount of fyToken that will be deposited on `to` wallet\\n    function sellBase(address to, uint128 min)\\n        external override\\n        returns(uint128)\\n    {\\n        // Calculate trade\\n        (uint112 _baseCached, uint112 _fyTokenCached) =\\n            (baseCached, fyTokenCached);\\n        uint112 _baseBalance = _getBaseBalance();\\n        uint112 _fyTokenBalance = _getFYTokenBalance();\\n        uint128 baseIn = _baseBalance - _baseCached;\\n        uint128 fyTokenOut = _sellBasePreview(\\n            baseIn,\\n            _baseCached,\\n            _fyTokenBalance\\n        );\\n\\n        // Slippage check\\n        require(\\n            fyTokenOut >= min,\\n            \\\"Pool: Not enough fyToken obtained\\\"\\n        );\\n\\n        // Update TWAR\\n        _update(\\n            _baseBalance,\\n            _fyTokenBalance - fyTokenOut,\\n            _baseCached,\\n            _fyTokenCached\\n        );\\n\\n        // Transfer assets\\n        IERC20(address(fyToken)).safeTransfer(to, fyTokenOut);\\n\\n        emit Trade(maturity, msg.sender, to, -(baseIn.i128()), fyTokenOut.i128());\\n        return fyTokenOut;\\n    }\\n\\n    /// @dev Returns how much fyToken would be obtained by selling `baseIn` base\\n    /// @param baseIn Amount of base hypothetically sold.\\n    /// @return Amount of fyToken hypothetically bought.\\n    function sellBasePreview(uint128 baseIn)\\n        external view override\\n        returns(uint128)\\n    {\\n        (uint112 _baseCached, uint112 _fyTokenCached) =\\n            (baseCached, fyTokenCached);\\n        return _sellBasePreview(baseIn, _baseCached, _fyTokenCached);\\n    }\\n\\n    /// @dev Returns how much fyToken would be obtained by selling `baseIn` base\\n    function _sellBasePreview(\\n        uint128 baseIn,\\n        uint112 baseBalance,\\n        uint112 fyTokenBalance\\n    )\\n        private view\\n        beforeMaturity\\n        returns(uint128)\\n    {\\n        uint128 fyTokenOut = YieldMath.fyTokenOutForBaseIn(\\n            baseBalance * scaleFactor,\\n            fyTokenBalance * scaleFactor,\\n            baseIn * scaleFactor,\\n            maturity - uint32(block.timestamp),             // This can't be called after maturity\\n            ts,\\n            g1\\n        ) / scaleFactor;\\n\\n        require(\\n            fyTokenBalance - fyTokenOut >= baseBalance + baseIn,\\n            \\\"Pool: fyToken balance too low\\\"\\n        );\\n\\n        return fyTokenOut;\\n    }\\n\\n    /// @dev Buy base for fyToken\\n    /// The trader needs to have called `fyToken.approve`\\n    /// @param to Wallet receiving the base being bought\\n    /// @param tokenOut Amount of base being bought that will be deposited in `to` wallet\\n    /// @param max Maximum amount of fyToken that will be paid for the trade\\n    /// @return Amount of fyToken that will be taken from caller\\n    function buyBase(address to, uint128 tokenOut, uint128 max)\\n        external override\\n        returns(uint128)\\n    {\\n        // Calculate trade\\n        uint128 fyTokenBalance = _getFYTokenBalance();\\n        (uint112 _baseCached, uint112 _fyTokenCached) =\\n            (baseCached, fyTokenCached);\\n        uint128 fyTokenIn = _buyBasePreview(\\n            tokenOut,\\n            _baseCached,\\n            _fyTokenCached\\n        );\\n        require(\\n            fyTokenBalance - _fyTokenCached >= fyTokenIn,\\n            \\\"Pool: Not enough fyToken in\\\"\\n        );\\n\\n        // Slippage check\\n        require(\\n            fyTokenIn <= max,\\n            \\\"Pool: Too much fyToken in\\\"\\n        );\\n\\n        // Update TWAR\\n        _update(\\n            _baseCached - tokenOut,\\n            _fyTokenCached + fyTokenIn,\\n            _baseCached,\\n            _fyTokenCached\\n        );\\n\\n        // Transfer assets\\n        base.safeTransfer(to, tokenOut);\\n\\n        emit Trade(maturity, msg.sender, to, tokenOut.i128(), -(fyTokenIn.i128()));\\n        return fyTokenIn;\\n    }\\n\\n    /// @dev Returns how much fyToken would be required to buy `tokenOut` base.\\n    /// @param tokenOut Amount of base hypothetically desired.\\n    /// @return Amount of fyToken hypothetically required.\\n    function buyBasePreview(uint128 tokenOut)\\n        external view override\\n        returns(uint128)\\n    {\\n        (uint112 _baseCached, uint112 _fyTokenCached) =\\n            (baseCached, fyTokenCached);\\n        return _buyBasePreview(tokenOut, _baseCached, _fyTokenCached);\\n    }\\n\\n    /// @dev Returns how much fyToken would be required to buy `tokenOut` base.\\n    function _buyBasePreview(\\n        uint128 tokenOut,\\n        uint112 baseBalance,\\n        uint112 fyTokenBalance\\n    )\\n        private view\\n        beforeMaturity\\n        returns(uint128)\\n    {\\n        return YieldMath.fyTokenInForBaseOut(\\n            baseBalance * scaleFactor,\\n            fyTokenBalance * scaleFactor,\\n            tokenOut * scaleFactor,\\n            maturity - uint32(block.timestamp),             // This can't be called after maturity\\n            ts,\\n            g2\\n        ) / scaleFactor;\\n    }\\n\\n    /// @dev Sell fyToken for base\\n    /// The trader needs to have transferred the amount of fyToken to sell to the pool before in the same transaction.\\n    /// @param to Wallet receiving the base being bought\\n    /// @param min Minimm accepted amount of base\\n    /// @return Amount of base that will be deposited on `to` wallet\\n    function sellFYToken(address to, uint128 min)\\n        external override\\n        returns(uint128)\\n    {\\n        // Calculate trade\\n        (uint112 _baseCached, uint112 _fyTokenCached) =\\n            (baseCached, fyTokenCached);\\n        uint112 _fyTokenBalance = _getFYTokenBalance();\\n        uint112 _baseBalance = _getBaseBalance();\\n        uint128 fyTokenIn = _fyTokenBalance - _fyTokenCached;\\n        uint128 baseOut = _sellFYTokenPreview(\\n            fyTokenIn,\\n            _baseCached,\\n            _fyTokenCached\\n        );\\n\\n        // Slippage check\\n        require(\\n            baseOut >= min,\\n            \\\"Pool: Not enough base obtained\\\"\\n        );\\n\\n        // Update TWAR\\n        _update(\\n            _baseBalance - baseOut,\\n            _fyTokenBalance,\\n            _baseCached,\\n            _fyTokenCached\\n        );\\n\\n        // Transfer assets\\n        base.safeTransfer(to, baseOut);\\n\\n        emit Trade(maturity, msg.sender, to, baseOut.i128(), -(fyTokenIn.i128()));\\n        return baseOut;\\n    }\\n\\n    /// @dev Returns how much base would be obtained by selling `fyTokenIn` fyToken.\\n    /// @param fyTokenIn Amount of fyToken hypothetically sold.\\n    /// @return Amount of base hypothetically bought.\\n    function sellFYTokenPreview(uint128 fyTokenIn)\\n        external view override\\n        returns(uint128)\\n    {\\n        (uint112 _baseCached, uint112 _fyTokenCached) =\\n            (baseCached, fyTokenCached);\\n        return _sellFYTokenPreview(fyTokenIn, _baseCached, _fyTokenCached);\\n    }\\n\\n    /// @dev Returns how much base would be obtained by selling `fyTokenIn` fyToken.\\n    function _sellFYTokenPreview(\\n        uint128 fyTokenIn,\\n        uint112 baseBalance,\\n        uint112 fyTokenBalance\\n    )\\n        private view\\n        beforeMaturity\\n        returns(uint128)\\n    {\\n        return YieldMath.baseOutForFYTokenIn(\\n            baseBalance * scaleFactor,\\n            fyTokenBalance * scaleFactor,\\n            fyTokenIn * scaleFactor,\\n            maturity - uint32(block.timestamp),             // This can't be called after maturity\\n            ts,\\n            g2\\n        ) / scaleFactor;\\n    }\\n\\n    /// @dev Buy fyToken for base\\n    /// The trader needs to have called `base.approve`\\n    /// @param to Wallet receiving the fyToken being bought\\n    /// @param fyTokenOut Amount of fyToken being bought that will be deposited in `to` wallet\\n    /// @param max Maximum amount of base token that will be paid for the trade\\n    /// @return Amount of base that will be taken from caller's wallet\\n    function buyFYToken(address to, uint128 fyTokenOut, uint128 max)\\n        external override\\n        returns(uint128)\\n    {\\n        // Calculate trade\\n        uint128 baseBalance = _getBaseBalance();\\n        (uint112 _baseCached, uint112 _fyTokenCached) =\\n            (baseCached, fyTokenCached);\\n        uint128 baseIn = _buyFYTokenPreview(\\n            fyTokenOut,\\n            _baseCached,\\n            _fyTokenCached\\n        );\\n        require(\\n            baseBalance - _baseCached >= baseIn,\\n            \\\"Pool: Not enough base token in\\\"\\n        );\\n\\n        // Slippage check\\n        require(\\n            baseIn <= max,\\n            \\\"Pool: Too much base token in\\\"\\n        );\\n\\n        // Update TWAR\\n        _update(\\n            _baseCached + baseIn,\\n            _fyTokenCached - fyTokenOut,\\n            _baseCached,\\n            _fyTokenCached\\n        );\\n\\n        // Transfer assets\\n        IERC20(address(fyToken)).safeTransfer(to, fyTokenOut);\\n\\n        emit Trade(maturity, msg.sender, to, -(baseIn.i128()), fyTokenOut.i128());\\n        return baseIn;\\n    }\\n\\n    /// @dev Returns how much base would be required to buy `fyTokenOut` fyToken.\\n    /// @param fyTokenOut Amount of fyToken hypothetically desired.\\n    /// @return Amount of base hypothetically required.\\n    function buyFYTokenPreview(uint128 fyTokenOut)\\n        external view override\\n        returns(uint128)\\n    {\\n        (uint112 _baseCached, uint112 _fyTokenCached) =\\n            (baseCached, fyTokenCached);\\n        return _buyFYTokenPreview(fyTokenOut, _baseCached, _fyTokenCached);\\n    }\\n\\n    /// @dev Returns how much base would be required to buy `fyTokenOut` fyToken.\\n    function _buyFYTokenPreview(\\n        uint128 fyTokenOut,\\n        uint128 baseBalance,\\n        uint128 fyTokenBalance\\n    )\\n        private view\\n        beforeMaturity\\n        returns(uint128)\\n    {\\n        uint128 baseIn = YieldMath.baseInForFYTokenOut(\\n            baseBalance * scaleFactor,\\n            fyTokenBalance * scaleFactor,\\n            fyTokenOut * scaleFactor,\\n            maturity - uint32(block.timestamp),             // This can't be called after maturity\\n            ts,\\n            g1\\n        ) / scaleFactor;\\n\\n        require(\\n            fyTokenBalance - fyTokenOut >= baseBalance + baseIn,\\n            \\\"Pool: fyToken balance too low\\\"\\n        );\\n\\n        return baseIn;\\n    }\\n}\\n\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/token/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/token/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/IERC20Metadata.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/token/ERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/53516bc555a454862470e7860a9b5254db4d00f5/contracts/token/ERC20/ERC20Permit.sol\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./IERC2612.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to use their tokens\\n * without sending any transactions by setting {IERC20-allowance} with a\\n * signature using the {permit} method, and then spend them via\\n * {IERC20-transferFrom}.\\n *\\n * The {permit} signature mechanism conforms to the {IERC2612} interface.\\n */\\nabstract contract ERC20Permit is ERC20, IERC2612 {\\n    mapping (address => uint256) public override nonces;\\n\\n    bytes32 public immutable PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    uint256 public immutable deploymentChainId;\\n\\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) ERC20(name_, symbol_, decimals_) {\\n        deploymentChainId = block.chainid;\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(block.chainid);\\n    }\\n\\n    /// @dev Calculate the DOMAIN_SEPARATOR.\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version())),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /// @dev Return the DOMAIN_SEPARATOR.\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n        return block.chainid == deploymentChainId ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(block.chainid);\\n    }\\n\\n    /// @dev Setting the version as a function so that it can be overriden\\n    function version() public pure virtual returns(string memory) { return \\\"1\\\"; }\\n\\n    /**\\n     * @dev See {IERC2612-permit}.\\n     *\\n     * In cases where the free option is not a concern, deadline can simply be\\n     * set to uint(-1), so it should be seen as an optional parameter\\n     */\\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external virtual override {\\n        require(deadline >= block.timestamp, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 hashStruct = keccak256(\\n            abi.encode(\\n                PERMIT_TYPEHASH,\\n                owner,\\n                spender,\\n                amount,\\n                nonces[owner]++,\\n                deadline\\n            )\\n        );\\n\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                block.chainid == deploymentChainId ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(block.chainid),\\n                hashStruct\\n            )\\n        );\\n\\n        address signer = ecrecover(hash, v, r, s);\\n        require(\\n            signer != address(0) && signer == owner,\\n            \\\"ERC20Permit: invalid signature\\\"\\n        );\\n\\n        _setAllowance(owner, spender, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/token/SafeERC20Namer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../token/IERC20Metadata.sol\\\";\\nimport \\\"../utils/AddressStringUtil.sol\\\";\\n\\n// produces token descriptors from inconsistent or absent ERC20 symbol implementations that can return string or bytes32\\n// this library will always produce a string symbol to represent the token\\nlibrary SafeERC20Namer {\\n    function bytes32ToString(bytes32 x) private pure returns (string memory) {\\n        bytes memory bytesString = new bytes(32);\\n        uint256 charCount = 0;\\n        for (uint256 j = 0; j < 32; j++) {\\n            bytes1 char = x[j];\\n            if (char != 0) {\\n                bytesString[charCount] = char;\\n                charCount++;\\n            }\\n        }\\n        bytes memory bytesStringTrimmed = new bytes(charCount);\\n        for (uint256 j = 0; j < charCount; j++) {\\n            bytesStringTrimmed[j] = bytesString[j];\\n        }\\n        return string(bytesStringTrimmed);\\n    }\\n\\n    // assumes the data is in position 2\\n    function parseStringData(bytes memory b) private pure returns (string memory) {\\n        uint256 charCount = 0;\\n        // first parse the charCount out of the data\\n        for (uint256 i = 32; i < 64; i++) {\\n            charCount <<= 8;\\n            charCount += uint8(b[i]);\\n        }\\n\\n        bytes memory bytesStringTrimmed = new bytes(charCount);\\n        for (uint256 i = 0; i < charCount; i++) {\\n            bytesStringTrimmed[i] = b[i + 64];\\n        }\\n\\n        return string(bytesStringTrimmed);\\n    }\\n\\n    // uses a heuristic to produce a token name from the address\\n    // the heuristic returns the full hex of the address string in upper case\\n    function addressToName(address token) private pure returns (string memory) {\\n        return AddressStringUtil.toAsciiString(token, 40);\\n    }\\n\\n    // uses a heuristic to produce a token symbol from the address\\n    // the heuristic returns the first 6 hex of the address string in upper case\\n    function addressToSymbol(address token) private pure returns (string memory) {\\n        return AddressStringUtil.toAsciiString(token, 6);\\n    }\\n\\n    // calls an external view token contract method that returns a symbol or name, and parses the output into a string\\n    function callAndParseStringReturn(address token, bytes4 selector) private view returns (string memory) {\\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(selector));\\n        // if not implemented, or returns empty data, return empty string\\n        if (!success || data.length == 0) {\\n            return \\\"\\\";\\n        }\\n        // bytes32 data always has length 32\\n        if (data.length == 32) {\\n            bytes32 decoded = abi.decode(data, (bytes32));\\n            return bytes32ToString(decoded);\\n        } else if (data.length > 64) {\\n            return abi.decode(data, (string));\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    // attempts to extract the token symbol. if it does not implement symbol, returns a symbol derived from the address\\n    function tokenSymbol(address token) public view returns (string memory) {\\n        string memory symbol = callAndParseStringReturn(token, IERC20Metadata.symbol.selector);\\n        if (bytes(symbol).length == 0) {\\n            // fallback to 6 uppercase hex of address\\n            return addressToSymbol(token);\\n        }\\n        return symbol;\\n    }\\n\\n    // attempts to extract the token name. if it does not implement name, returns a name derived from the address\\n    function tokenName(address token) public view returns (string memory) {\\n        string memory name = callAndParseStringReturn(token, IERC20Metadata.name.selector);\\n        if (bytes(name).length == 0) {\\n            // fallback to full hex of address\\n            return addressToName(token);\\n        }\\n        return name;\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function tokenDecimals(address token) public view returns (uint8) {\\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(IERC20Metadata.decimals.selector));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n}\\n\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/token/MinimalTransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/Uniswap/uniswap-lib/blob/master/contracts/libraries/TransferHelper.sol\\n\\npragma solidity >=0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../utils/RevertMsgExtractor.sol\\\";\\n\\n\\n// helper methods for transferring ERC20 tokens that do not consistently return true/false\\nlibrary MinimalTransferHelper {\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with the underlying revert message if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        if (!(success && (data.length == 0 || abi.decode(data, (bool))))) revert(RevertMsgExtractor.getRevertMsg(data));\\n    }\\n}\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/cast/CastU256U128.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n\\nlibrary CastU256U128 {\\n    /// @dev Safely cast an uint256 to an uint128\\n    function u128(uint256 x) internal pure returns (uint128 y) {\\n        require (x <= type(uint128).max, \\\"Cast overflow\\\");\\n        y = uint128(x);\\n    }\\n}\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/cast/CastU256U112.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n\\nlibrary CastU256U112 {\\n    /// @dev Safely cast an uint256 to an uint112\\n    function u112(uint256 x) internal pure returns (uint112 y) {\\n        require (x <= type(uint112).max, \\\"Cast overflow\\\");\\n        y = uint112(x);\\n    }\\n}\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/cast/CastU256I256.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n\\nlibrary CastU256I256 {\\n    /// @dev Safely cast an uint256 to an int256\\n    function i256(uint256 x) internal pure returns (int256 y) {\\n        require (x <= uint256(type(int256).max), \\\"Cast overflow\\\");\\n        y = int256(x);\\n    }\\n}\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/cast/CastU128U112.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n\\nlibrary CastU128U112 {\\n    /// @dev Safely cast an uint128 to an uint112\\n    function u112(uint128 x) internal pure returns (uint112 y) {\\n        require (x <= uint128(type(uint112).max), \\\"Cast overflow\\\");\\n        y = uint112(x);\\n    }\\n}\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/cast/CastU128I128.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n\\nlibrary CastU128I128 {\\n    /// @dev Safely cast an uint128 to an int128\\n    function i128(uint128 x) internal pure returns (int128 y) {\\n        require (x <= uint128(type(int128).max), \\\"Cast overflow\\\");\\n        y = int128(x);\\n    }\\n}\"\r\n    },\r\n    \"@yield-protocol/yieldspace-interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.8.0;\\nimport \\\"@yield-protocol/utils-v2/contracts/token/IERC20.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/token/IERC2612.sol\\\";\\nimport \\\"@yield-protocol/vault-interfaces/IFYToken.sol\\\";\\n\\n\\ninterface IPool is IERC20, IERC2612 {\\n    function ts() external view returns(int128);\\n    function g1() external view returns(int128);\\n    function g2() external view returns(int128);\\n    function maturity() external view returns(uint32);\\n    function scaleFactor() external view returns(uint96);\\n    function getCache() external view returns (uint112, uint112, uint32);\\n    function base() external view returns(IERC20);\\n    function fyToken() external view returns(IFYToken);\\n    function getBaseBalance() external view returns(uint112);\\n    function getFYTokenBalance() external view returns(uint112);\\n    function retrieveBase(address to) external returns(uint128 retrieved);\\n    function retrieveFYToken(address to) external returns(uint128 retrieved);\\n    function sellBase(address to, uint128 min) external returns(uint128);\\n    function buyBase(address to, uint128 baseOut, uint128 max) external returns(uint128);\\n    function sellFYToken(address to, uint128 min) external returns(uint128);\\n    function buyFYToken(address to, uint128 fyTokenOut, uint128 max) external returns(uint128);\\n    function sellBasePreview(uint128 baseIn) external view returns(uint128);\\n    function buyBasePreview(uint128 baseOut) external view returns(uint128);\\n    function sellFYTokenPreview(uint128 fyTokenIn) external view returns(uint128);\\n    function buyFYTokenPreview(uint128 fyTokenOut) external view returns(uint128);\\n    function mint(address to, address remainder, uint256 minRatio, uint256 maxRatio) external returns (uint256, uint256, uint256);\\n    function mintWithBase(address to, address remainder, uint256 fyTokenToBuy, uint256 minRatio, uint256 maxRatio) external returns (uint256, uint256, uint256);\\n    function burn(address baseTo, address fyTokenTo, uint256 minRatio, uint256 maxRatio) external returns (uint256, uint256, uint256);\\n    function burnForBase(address to, uint256 minRatio, uint256 maxRatio) external returns (uint256, uint256);\\n}\"\r\n    },\r\n    \"@yield-protocol/yieldspace-interfaces/IPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\ninterface IPoolFactory {\\n  event PoolCreated(address indexed base, address indexed fyToken, address pool);\\n\\n  function POOL_BYTECODE_HASH() external pure returns (bytes32);\\n  function calculatePoolAddress(address base, address fyToken) external view returns (address);\\n  function getPool(address base, address fyToken) external view returns (address);\\n  function createPool(address base, address fyToken) external returns (address);\\n  function nextBase() external view returns (address);\\n  function nextFYToken() external view returns (address);\\n  function ts() external view returns (int128);\\n  function g1() external view returns (int128);\\n  function g2() external view returns (int128);\\n}\\n\"\r\n    },\r\n    \"@yield-protocol/vault-interfaces/IFYToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@yield-protocol/utils-v2/contracts/token/IERC20.sol\\\";\\n\\n\\ninterface IFYToken is IERC20 {\\n    /// @dev Asset that is returned on redemption.\\n    function underlying() external view returns (address);\\n\\n    /// @dev Unix time at which redemption of fyToken for underlying are possible\\n    function maturity() external view returns (uint256);\\n    \\n    /// @dev Record price data at maturity\\n    function mature() external;\\n\\n    /// @dev Mint fyToken providing an equal amount of underlying to the protocol\\n    function mintWithUnderlying(address to, uint256 amount) external;\\n\\n    /// @dev Burn fyToken after maturity for an amount of underlying.\\n    function redeem(address to, uint256 amount) external returns (uint256);\\n\\n    /// @dev Mint fyToken.\\n    /// This function can only be called by other Yield contracts, not users directly.\\n    /// @param to Wallet to mint the fyToken in.\\n    /// @param fyTokenAmount Amount of fyToken to mint.\\n    function mint(address to, uint256 fyTokenAmount) external;\\n\\n    /// @dev Burn fyToken.\\n    /// This function can only be called by other Yield contracts, not users directly.\\n    /// @param from Wallet to burn the fyToken from.\\n    /// @param fyTokenAmount Amount of fyToken to burn.\\n    function burn(address from, uint256 fyTokenAmount) external;\\n}\"\r\n    },\r\n    \"@yield-protocol/yieldspace-v2/contracts/YieldMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./Math64x64.sol\\\";\\r\\n\\r\\nlibrary Exp64x64 {\\r\\n  /**\\r\\n   * Raise given number x into power specified as a simple fraction y/z and then\\r\\n   * multiply the result by the normalization factor 2^(128 * (1 - y/z)).\\r\\n   * Revert if z is zero, or if both x and y are zeros.\\r\\n   *\\r\\n   * @param x number to raise into given power y/z\\r\\n   * @param y numerator of the power to raise x into\\r\\n   * @param z denominator of the power to raise x into\\r\\n   * @return x raised into power y/z and then multiplied by 2^(128 * (1 - y/z))\\r\\n   */\\r\\n  function pow(uint128 x, uint128 y, uint128 z)\\r\\n  internal pure returns(uint128) {\\r\\n    unchecked {\\r\\n      require(z != 0);\\r\\n\\r\\n      if(x == 0) {\\r\\n        require(y != 0);\\r\\n        return 0;\\r\\n      } else {\\r\\n        uint256 l =\\r\\n          uint256(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - log_2(x)) * y / z;\\r\\n        if(l > 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) return 0;\\r\\n        else return pow_2(uint128(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - l));\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate base 2 logarithm of an unsigned 128-bit integer number.  Revert\\r\\n   * in case x is zero.\\r\\n   *\\r\\n   * @param x number to calculate base 2 logarithm of\\r\\n   * @return base 2 logarithm of x, multiplied by 2^121\\r\\n   */\\r\\n  function log_2(uint128 x)\\r\\n  internal pure returns(uint128) {\\r\\n    unchecked {\\r\\n      require(x != 0);\\r\\n\\r\\n      uint b = x;\\r\\n\\r\\n      uint l = 0xFE000000000000000000000000000000;\\r\\n\\r\\n      if(b < 0x10000000000000000) {l -= 0x80000000000000000000000000000000; b <<= 64;}\\r\\n      if(b < 0x1000000000000000000000000) {l -= 0x40000000000000000000000000000000; b <<= 32;}\\r\\n      if(b < 0x10000000000000000000000000000) {l -= 0x20000000000000000000000000000000; b <<= 16;}\\r\\n      if(b < 0x1000000000000000000000000000000) {l -= 0x10000000000000000000000000000000; b <<= 8;}\\r\\n      if(b < 0x10000000000000000000000000000000) {l -= 0x8000000000000000000000000000000; b <<= 4;}\\r\\n      if(b < 0x40000000000000000000000000000000) {l -= 0x4000000000000000000000000000000; b <<= 2;}\\r\\n      if(b < 0x80000000000000000000000000000000) {l -= 0x2000000000000000000000000000000; b <<= 1;}\\r\\n\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000;} /*\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) l |= 0x1; */\\r\\n\\r\\n      return uint128(l);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate 2 raised into given power.\\r\\n   *\\r\\n   * @param x power to raise 2 into, multiplied by 2^121\\r\\n   * @return 2 raised into given power\\r\\n   */\\r\\n  function pow_2(uint128 x)\\r\\n  internal pure returns(uint128) {\\r\\n    unchecked {\\r\\n      uint r = 0x80000000000000000000000000000000;\\r\\n      if(x & 0x1000000000000000000000000000000 > 0) r = r * 0xb504f333f9de6484597d89b3754abe9f >> 127;\\r\\n      if(x & 0x800000000000000000000000000000 > 0) r = r * 0x9837f0518db8a96f46ad23182e42f6f6 >> 127;\\r\\n      if(x & 0x400000000000000000000000000000 > 0) r = r * 0x8b95c1e3ea8bd6e6fbe4628758a53c90 >> 127;\\r\\n      if(x & 0x200000000000000000000000000000 > 0) r = r * 0x85aac367cc487b14c5c95b8c2154c1b2 >> 127;\\r\\n      if(x & 0x100000000000000000000000000000 > 0) r = r * 0x82cd8698ac2ba1d73e2a475b46520bff >> 127;\\r\\n      if(x & 0x80000000000000000000000000000 > 0) r = r * 0x8164d1f3bc0307737be56527bd14def4 >> 127;\\r\\n      if(x & 0x40000000000000000000000000000 > 0) r = r * 0x80b1ed4fd999ab6c25335719b6e6fd20 >> 127;\\r\\n      if(x & 0x20000000000000000000000000000 > 0) r = r * 0x8058d7d2d5e5f6b094d589f608ee4aa2 >> 127;\\r\\n      if(x & 0x10000000000000000000000000000 > 0) r = r * 0x802c6436d0e04f50ff8ce94a6797b3ce >> 127;\\r\\n      if(x & 0x8000000000000000000000000000 > 0) r = r * 0x8016302f174676283690dfe44d11d008 >> 127;\\r\\n      if(x & 0x4000000000000000000000000000 > 0) r = r * 0x800b179c82028fd0945e54e2ae18f2f0 >> 127;\\r\\n      if(x & 0x2000000000000000000000000000 > 0) r = r * 0x80058baf7fee3b5d1c718b38e549cb93 >> 127;\\r\\n      if(x & 0x1000000000000000000000000000 > 0) r = r * 0x8002c5d00fdcfcb6b6566a58c048be1f >> 127;\\r\\n      if(x & 0x800000000000000000000000000 > 0) r = r * 0x800162e61bed4a48e84c2e1a463473d9 >> 127;\\r\\n      if(x & 0x400000000000000000000000000 > 0) r = r * 0x8000b17292f702a3aa22beacca949013 >> 127;\\r\\n      if(x & 0x200000000000000000000000000 > 0) r = r * 0x800058b92abbae02030c5fa5256f41fe >> 127;\\r\\n      if(x & 0x100000000000000000000000000 > 0) r = r * 0x80002c5c8dade4d71776c0f4dbea67d6 >> 127;\\r\\n      if(x & 0x80000000000000000000000000 > 0) r = r * 0x8000162e44eaf636526be456600bdbe4 >> 127;\\r\\n      if(x & 0x40000000000000000000000000 > 0) r = r * 0x80000b1721fa7c188307016c1cd4e8b6 >> 127;\\r\\n      if(x & 0x20000000000000000000000000 > 0) r = r * 0x8000058b90de7e4cecfc487503488bb1 >> 127;\\r\\n      if(x & 0x10000000000000000000000000 > 0) r = r * 0x800002c5c8678f36cbfce50a6de60b14 >> 127;\\r\\n      if(x & 0x8000000000000000000000000 > 0) r = r * 0x80000162e431db9f80b2347b5d62e516 >> 127;\\r\\n      if(x & 0x4000000000000000000000000 > 0) r = r * 0x800000b1721872d0c7b08cf1e0114152 >> 127;\\r\\n      if(x & 0x2000000000000000000000000 > 0) r = r * 0x80000058b90c1aa8a5c3736cb77e8dff >> 127;\\r\\n      if(x & 0x1000000000000000000000000 > 0) r = r * 0x8000002c5c8605a4635f2efc2362d978 >> 127;\\r\\n      if(x & 0x800000000000000000000000 > 0) r = r * 0x800000162e4300e635cf4a109e3939bd >> 127;\\r\\n      if(x & 0x400000000000000000000000 > 0) r = r * 0x8000000b17217ff81bef9c551590cf83 >> 127;\\r\\n      if(x & 0x200000000000000000000000 > 0) r = r * 0x800000058b90bfdd4e39cd52c0cfa27c >> 127;\\r\\n      if(x & 0x100000000000000000000000 > 0) r = r * 0x80000002c5c85fe6f72d669e0e76e411 >> 127;\\r\\n      if(x & 0x80000000000000000000000 > 0) r = r * 0x8000000162e42ff18f9ad35186d0df28 >> 127;\\r\\n      if(x & 0x40000000000000000000000 > 0) r = r * 0x80000000b17217f84cce71aa0dcfffe7 >> 127;\\r\\n      if(x & 0x20000000000000000000000 > 0) r = r * 0x8000000058b90bfc07a77ad56ed22aaa >> 127;\\r\\n      if(x & 0x10000000000000000000000 > 0) r = r * 0x800000002c5c85fdfc23cdead40da8d6 >> 127;\\r\\n      if(x & 0x8000000000000000000000 > 0) r = r * 0x80000000162e42fefc25eb1571853a66 >> 127;\\r\\n      if(x & 0x4000000000000000000000 > 0) r = r * 0x800000000b17217f7d97f692baacded5 >> 127;\\r\\n      if(x & 0x2000000000000000000000 > 0) r = r * 0x80000000058b90bfbead3b8b5dd254d7 >> 127;\\r\\n      if(x & 0x1000000000000000000000 > 0) r = r * 0x8000000002c5c85fdf4eedd62f084e67 >> 127;\\r\\n      if(x & 0x800000000000000000000 > 0) r = r * 0x800000000162e42fefa58aef378bf586 >> 127;\\r\\n      if(x & 0x400000000000000000000 > 0) r = r * 0x8000000000b17217f7d24a78a3c7ef02 >> 127;\\r\\n      if(x & 0x200000000000000000000 > 0) r = r * 0x800000000058b90bfbe9067c93e474a6 >> 127;\\r\\n      if(x & 0x100000000000000000000 > 0) r = r * 0x80000000002c5c85fdf47b8e5a72599f >> 127;\\r\\n      if(x & 0x80000000000000000000 > 0) r = r * 0x8000000000162e42fefa3bdb315934a2 >> 127;\\r\\n      if(x & 0x40000000000000000000 > 0) r = r * 0x80000000000b17217f7d1d7299b49c46 >> 127;\\r\\n      if(x & 0x20000000000000000000 > 0) r = r * 0x8000000000058b90bfbe8e9a8d1c4ea0 >> 127;\\r\\n      if(x & 0x10000000000000000000 > 0) r = r * 0x800000000002c5c85fdf4745969ea76f >> 127;\\r\\n      if(x & 0x8000000000000000000 > 0) r = r * 0x80000000000162e42fefa3a0df5373bf >> 127;\\r\\n      if(x & 0x4000000000000000000 > 0) r = r * 0x800000000000b17217f7d1cff4aac1e1 >> 127;\\r\\n      if(x & 0x2000000000000000000 > 0) r = r * 0x80000000000058b90bfbe8e7db95a2f1 >> 127;\\r\\n      if(x & 0x1000000000000000000 > 0) r = r * 0x8000000000002c5c85fdf473e61ae1f8 >> 127;\\r\\n      if(x & 0x800000000000000000 > 0) r = r * 0x800000000000162e42fefa39f121751c >> 127;\\r\\n      if(x & 0x400000000000000000 > 0) r = r * 0x8000000000000b17217f7d1cf815bb96 >> 127;\\r\\n      if(x & 0x200000000000000000 > 0) r = r * 0x800000000000058b90bfbe8e7bec1e0d >> 127;\\r\\n      if(x & 0x100000000000000000 > 0) r = r * 0x80000000000002c5c85fdf473dee5f17 >> 127;\\r\\n      if(x & 0x80000000000000000 > 0) r = r * 0x8000000000000162e42fefa39ef5438f >> 127;\\r\\n      if(x & 0x40000000000000000 > 0) r = r * 0x80000000000000b17217f7d1cf7a26c8 >> 127;\\r\\n      if(x & 0x20000000000000000 > 0) r = r * 0x8000000000000058b90bfbe8e7bcf4a4 >> 127;\\r\\n      if(x & 0x10000000000000000 > 0) r = r * 0x800000000000002c5c85fdf473de72a2 >> 127; /*\\r\\n      if(x & 0x8000000000000000 > 0) r = r * 0x80000000000000162e42fefa39ef3765 >> 127;\\r\\n      if(x & 0x4000000000000000 > 0) r = r * 0x800000000000000b17217f7d1cf79b37 >> 127;\\r\\n      if(x & 0x2000000000000000 > 0) r = r * 0x80000000000000058b90bfbe8e7bcd7d >> 127;\\r\\n      if(x & 0x1000000000000000 > 0) r = r * 0x8000000000000002c5c85fdf473de6b6 >> 127;\\r\\n      if(x & 0x800000000000000 > 0) r = r * 0x800000000000000162e42fefa39ef359 >> 127;\\r\\n      if(x & 0x400000000000000 > 0) r = r * 0x8000000000000000b17217f7d1cf79ac >> 127;\\r\\n      if(x & 0x200000000000000 > 0) r = r * 0x800000000000000058b90bfbe8e7bcd6 >> 127;\\r\\n      if(x & 0x100000000000000 > 0) r = r * 0x80000000000000002c5c85fdf473de6a >> 127;\\r\\n      if(x & 0x80000000000000 > 0) r = r * 0x8000000000000000162e42fefa39ef35 >> 127;\\r\\n      if(x & 0x40000000000000 > 0) r = r * 0x80000000000000000b17217f7d1cf79a >> 127;\\r\\n      if(x & 0x20000000000000 > 0) r = r * 0x8000000000000000058b90bfbe8e7bcd >> 127;\\r\\n      if(x & 0x10000000000000 > 0) r = r * 0x800000000000000002c5c85fdf473de6 >> 127;\\r\\n      if(x & 0x8000000000000 > 0) r = r * 0x80000000000000000162e42fefa39ef3 >> 127;\\r\\n      if(x & 0x4000000000000 > 0) r = r * 0x800000000000000000b17217f7d1cf79 >> 127;\\r\\n      if(x & 0x2000000000000 > 0) r = r * 0x80000000000000000058b90bfbe8e7bc >> 127;\\r\\n      if(x & 0x1000000000000 > 0) r = r * 0x8000000000000000002c5c85fdf473de >> 127;\\r\\n      if(x & 0x800000000000 > 0) r = r * 0x800000000000000000162e42fefa39ef >> 127;\\r\\n      if(x & 0x400000000000 > 0) r = r * 0x8000000000000000000b17217f7d1cf7 >> 127;\\r\\n      if(x & 0x200000000000 > 0) r = r * 0x800000000000000000058b90bfbe8e7b >> 127;\\r\\n      if(x & 0x100000000000 > 0) r = r * 0x80000000000000000002c5c85fdf473d >> 127;\\r\\n      if(x & 0x80000000000 > 0) r = r * 0x8000000000000000000162e42fefa39e >> 127;\\r\\n      if(x & 0x40000000000 > 0) r = r * 0x80000000000000000000b17217f7d1cf >> 127;\\r\\n      if(x & 0x20000000000 > 0) r = r * 0x8000000000000000000058b90bfbe8e7 >> 127;\\r\\n      if(x & 0x10000000000 > 0) r = r * 0x800000000000000000002c5c85fdf473 >> 127;\\r\\n      if(x & 0x8000000000 > 0) r = r * 0x80000000000000000000162e42fefa39 >> 127;\\r\\n      if(x & 0x4000000000 > 0) r = r * 0x800000000000000000000b17217f7d1c >> 127;\\r\\n      if(x & 0x2000000000 > 0) r = r * 0x80000000000000000000058b90bfbe8e >> 127;\\r\\n      if(x & 0x1000000000 > 0) r = r * 0x8000000000000000000002c5c85fdf47 >> 127;\\r\\n      if(x & 0x800000000 > 0) r = r * 0x800000000000000000000162e42fefa3 >> 127;\\r\\n      if(x & 0x400000000 > 0) r = r * 0x8000000000000000000000b17217f7d1 >> 127;\\r\\n      if(x & 0x200000000 > 0) r = r * 0x800000000000000000000058b90bfbe8 >> 127;\\r\\n      if(x & 0x100000000 > 0) r = r * 0x80000000000000000000002c5c85fdf4 >> 127;\\r\\n      if(x & 0x80000000 > 0) r = r * 0x8000000000000000000000162e42fefa >> 127;\\r\\n      if(x & 0x40000000 > 0) r = r * 0x80000000000000000000000b17217f7d >> 127;\\r\\n      if(x & 0x20000000 > 0) r = r * 0x8000000000000000000000058b90bfbe >> 127;\\r\\n      if(x & 0x10000000 > 0) r = r * 0x800000000000000000000002c5c85fdf >> 127;\\r\\n      if(x & 0x8000000 > 0) r = r * 0x80000000000000000000000162e42fef >> 127;\\r\\n      if(x & 0x4000000 > 0) r = r * 0x800000000000000000000000b17217f7 >> 127;\\r\\n      if(x & 0x2000000 > 0) r = r * 0x80000000000000000000000058b90bfb >> 127;\\r\\n      if(x & 0x1000000 > 0) r = r * 0x8000000000000000000000002c5c85fd >> 127;\\r\\n      if(x & 0x800000 > 0) r = r * 0x800000000000000000000000162e42fe >> 127;\\r\\n      if(x & 0x400000 > 0) r = r * 0x8000000000000000000000000b17217f >> 127;\\r\\n      if(x & 0x200000 > 0) r = r * 0x800000000000000000000000058b90bf >> 127;\\r\\n      if(x & 0x100000 > 0) r = r * 0x80000000000000000000000002c5c85f >> 127;\\r\\n      if(x & 0x80000 > 0) r = r * 0x8000000000000000000000000162e42f >> 127;\\r\\n      if(x & 0x40000 > 0) r = r * 0x80000000000000000000000000b17217 >> 127;\\r\\n      if(x & 0x20000 > 0) r = r * 0x8000000000000000000000000058b90b >> 127;\\r\\n      if(x & 0x10000 > 0) r = r * 0x800000000000000000000000002c5c85 >> 127;\\r\\n      if(x & 0x8000 > 0) r = r * 0x80000000000000000000000000162e42 >> 127;\\r\\n      if(x & 0x4000 > 0) r = r * 0x800000000000000000000000000b1721 >> 127;\\r\\n      if(x & 0x2000 > 0) r = r * 0x80000000000000000000000000058b90 >> 127;\\r\\n      if(x & 0x1000 > 0) r = r * 0x8000000000000000000000000002c5c8 >> 127;\\r\\n      if(x & 0x800 > 0) r = r * 0x800000000000000000000000000162e4 >> 127;\\r\\n      if(x & 0x400 > 0) r = r * 0x8000000000000000000000000000b172 >> 127;\\r\\n      if(x & 0x200 > 0) r = r * 0x800000000000000000000000000058b9 >> 127;\\r\\n      if(x & 0x100 > 0) r = r * 0x80000000000000000000000000002c5c >> 127;\\r\\n      if(x & 0x80 > 0) r = r * 0x8000000000000000000000000000162e >> 127;\\r\\n      if(x & 0x40 > 0) r = r * 0x80000000000000000000000000000b17 >> 127;\\r\\n      if(x & 0x20 > 0) r = r * 0x8000000000000000000000000000058b >> 127;\\r\\n      if(x & 0x10 > 0) r = r * 0x800000000000000000000000000002c5 >> 127;\\r\\n      if(x & 0x8 > 0) r = r * 0x80000000000000000000000000000162 >> 127;\\r\\n      if(x & 0x4 > 0) r = r * 0x800000000000000000000000000000b1 >> 127;\\r\\n      if(x & 0x2 > 0) r = r * 0x80000000000000000000000000000058 >> 127;\\r\\n      if(x & 0x1 > 0) r = r * 0x8000000000000000000000000000002c >> 127; */\\r\\n\\r\\n      r >>= 127 -(x >> 121);\\r\\n\\r\\n      return uint128(r);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Ethereum smart contract library implementing Yield Math model.\\r\\n */\\r\\nlibrary YieldMath {\\r\\n  using Math64x64 for int128;\\r\\n  using Math64x64 for uint128;\\r\\n  using Math64x64 for int256;\\r\\n  using Math64x64 for uint256;\\r\\n  using Exp64x64 for uint128;\\r\\n\\r\\n  uint128 public constant ONE = 0x10000000000000000; // In 64.64\\r\\n  uint128 public constant TWO = 0x20000000000000000; // In 64.64\\r\\n  uint256 public constant MAX = type(uint128).max;   // Used for overflow checks\\r\\n  uint256 public constant VAR = 1e12;                // The logarithm math used is not precise to the wei, but can deviate up to 1e12 from the real value.\\r\\n\\r\\n  /**\\r\\n   * Calculate a YieldSpace pool invariant according to the whitepaper\\r\\n   */\\r\\n  function invariant(uint128 baseReserves, uint128 fyTokenReserves, uint256 totalSupply, uint128 timeTillMaturity, int128 ts)\\r\\n      public pure returns(uint128)\\r\\n  {\\r\\n    if (totalSupply == 0) return 0;\\r\\n\\r\\n    unchecked {\\r\\n      // a = (1 - ts * timeTillMaturity)\\r\\n      int128 a = int128(ONE).sub(ts.mul(timeTillMaturity.fromUInt()));\\r\\n      require (a > 0, \\\"YieldMath: Too far from maturity\\\");\\r\\n\\r\\n      uint256 sum =\\r\\n      uint256(baseReserves.pow(uint128 (a), ONE)) +\\r\\n      uint256(fyTokenReserves.pow(uint128 (a), ONE)) >> 1;\\r\\n      require(sum < MAX, \\\"YieldMath: Sum overflow\\\");\\r\\n\\r\\n      uint256 result = uint256(uint128(sum).pow(ONE, uint128(a))) / totalSupply;\\r\\n      require (result < MAX, \\\"YieldMath: Result overflow\\\");\\r\\n\\r\\n      return uint128(result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate the amount of fyToken a user would get for given amount of Base.\\r\\n   * https://www.desmos.com/calculator/5nf2xuy6yb\\r\\n   * @param baseReserves base reserves amount\\r\\n   * @param fyTokenReserves fyToken reserves amount\\r\\n   * @param baseAmount base amount to be traded\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return the amount of fyToken a user would get for given amount of Base\\r\\n   */\\r\\n  function fyTokenOutForBaseIn(\\r\\n    uint128 baseReserves, uint128 fyTokenReserves, uint128 baseAmount,\\r\\n    uint128 timeTillMaturity, int128 ts, int128 g)\\r\\n  public pure returns(uint128) {\\r\\n    unchecked {\\r\\n      uint128 a = _computeA(timeTillMaturity, ts, g);\\r\\n\\r\\n      // za = baseReserves ** a\\r\\n      uint256 za = baseReserves.pow(a, ONE);\\r\\n\\r\\n      // ya = fyTokenReserves ** a\\r\\n      uint256 ya = fyTokenReserves.pow(a, ONE);\\r\\n\\r\\n      // zx = baseReserves + baseAmount\\r\\n      uint256 zx = uint256(baseReserves) + uint256(baseAmount);\\r\\n      require(zx <= MAX, \\\"YieldMath: Too much base in\\\");\\r\\n\\r\\n      // zxa = zx ** a\\r\\n      uint256 zxa = uint128(zx).pow(a, ONE);\\r\\n\\r\\n      // sum = za + ya - zxa\\r\\n      uint256 sum = za + ya - zxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n      require(sum <= MAX, \\\"YieldMath: Insufficient fyToken reserves\\\");\\r\\n\\r\\n      // result = fyTokenReserves - (sum ** (1/a))\\r\\n      uint256 result = uint256(fyTokenReserves) - uint256(uint128(sum).pow(ONE, a));\\r\\n      require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n      result = result > VAR ? result - VAR : 0; // Subtract error guard, flooring the result at zero\\r\\n\\r\\n      return uint128(result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate the amount of base a user would get for certain amount of fyToken.\\r\\n   * https://www.desmos.com/calculator/6jlrre7ybt\\r\\n   * @param baseReserves base reserves amount\\r\\n   * @param fyTokenReserves fyToken reserves amount\\r\\n   * @param fyTokenAmount fyToken amount to be traded\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return the amount of Base a user would get for given amount of fyToken\\r\\n   */\\r\\n  function baseOutForFYTokenIn(\\r\\n    uint128 baseReserves, uint128 fyTokenReserves, uint128 fyTokenAmount,\\r\\n    uint128 timeTillMaturity, int128 ts, int128 g)\\r\\n  public pure returns(uint128) {\\r\\n    unchecked {\\r\\n      uint128 a = _computeA(timeTillMaturity, ts, g);\\r\\n\\r\\n      // za = baseReserves ** a\\r\\n      uint256 za = baseReserves.pow(a, ONE);\\r\\n\\r\\n      // ya = fyTokenReserves ** a\\r\\n      uint256 ya = fyTokenReserves.pow(a, ONE);\\r\\n\\r\\n      // yx = fyDayReserves + fyTokenAmount\\r\\n      uint256 yx = uint256(fyTokenReserves) + uint256(fyTokenAmount);\\r\\n      require(yx <= MAX, \\\"YieldMath: Too much fyToken in\\\");\\r\\n\\r\\n      // yxa = yx ** a\\r\\n      uint256 yxa = uint128(yx).pow(a, ONE);\\r\\n\\r\\n      // sum = za + ya - yxa\\r\\n      uint256 sum = za + ya - yxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n      require(sum <= MAX, \\\"YieldMath: Insufficient base reserves\\\");\\r\\n\\r\\n      // result = baseReserves - (sum ** (1/a))\\r\\n      uint256 result = uint256(baseReserves) - uint256(uint128(sum).pow(ONE, a));\\r\\n      require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n      result = result > VAR ? result - VAR : 0; // Subtract error guard, flooring the result at zero\\r\\n\\r\\n      return uint128(result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate the amount of fyToken a user could sell for given amount of Base.\\r\\n   * https://www.desmos.com/calculator/0rgnmtckvy\\r\\n   * @param baseReserves base reserves amount\\r\\n   * @param fyTokenReserves fyToken reserves amount\\r\\n   * @param baseAmount Base amount to be traded\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return the amount of fyToken a user could sell for given amount of Base\\r\\n   */\\r\\n  function fyTokenInForBaseOut(\\r\\n    uint128 baseReserves, uint128 fyTokenReserves, uint128 baseAmount,\\r\\n    uint128 timeTillMaturity, int128 ts, int128 g)\\r\\n  public pure returns(uint128) {\\r\\n    unchecked {\\r\\n      uint128 a = _computeA(timeTillMaturity, ts, g);\\r\\n\\r\\n      // za = baseReserves ** a\\r\\n      uint256 za = baseReserves.pow(a, ONE);\\r\\n\\r\\n      // ya = fyTokenReserves ** a\\r\\n      uint256 ya = fyTokenReserves.pow(a, ONE);\\r\\n\\r\\n      // zx = baseReserves - baseAmount\\r\\n      uint256 zx = uint256(baseReserves) - uint256(baseAmount);\\r\\n      require(zx <= MAX, \\\"YieldMath: Too much base out\\\");\\r\\n\\r\\n      // zxa = zx ** a\\r\\n      uint256 zxa = uint128(zx).pow(a, ONE);\\r\\n\\r\\n      // sum = za + ya - zxa\\r\\n      uint256 sum = za + ya - zxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n      require(sum <= MAX, \\\"YieldMath: Resulting fyToken reserves too high\\\");\\r\\n\\r\\n      // result = (sum ** (1/a)) - fyTokenReserves\\r\\n      uint256 result = uint256(uint128(sum).pow(ONE, a)) - uint256(fyTokenReserves);\\r\\n      require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n      result = result < MAX - VAR ? result + VAR : MAX; // Add error guard, ceiling the result at max\\r\\n\\r\\n      return uint128(result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate the amount of base a user would have to pay for certain amount of fyToken.\\r\\n   * https://www.desmos.com/calculator/ws5oqj8x5i\\r\\n   * @param baseReserves Base reserves amount\\r\\n   * @param fyTokenReserves fyToken reserves amount\\r\\n   * @param fyTokenAmount fyToken amount to be traded\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return the amount of base a user would have to pay for given amount of\\r\\n   *         fyToken\\r\\n   */\\r\\n  function baseInForFYTokenOut(\\r\\n    uint128 baseReserves, uint128 fyTokenReserves, uint128 fyTokenAmount,\\r\\n    uint128 timeTillMaturity, int128 ts, int128 g)\\r\\n  public pure returns(uint128) {\\r\\n    unchecked {\\r\\n      uint128 a = _computeA(timeTillMaturity, ts, g);\\r\\n\\r\\n      // za = baseReserves ** a\\r\\n      uint256 za = baseReserves.pow(a, ONE);\\r\\n\\r\\n      // ya = fyTokenReserves ** a\\r\\n      uint256 ya = fyTokenReserves.pow(a, ONE);\\r\\n\\r\\n      // yx = baseReserves - baseAmount\\r\\n      uint256 yx = uint256(fyTokenReserves) - uint256(fyTokenAmount);\\r\\n      require(yx <= MAX, \\\"YieldMath: Too much fyToken out\\\");\\r\\n\\r\\n      // yxa = yx ** a\\r\\n      uint256 yxa = uint128(yx).pow(a, ONE);\\r\\n\\r\\n      // sum = za + ya - yxa\\r\\n      uint256 sum = za + ya - yxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n      require(sum <= MAX, \\\"YieldMath: Resulting base reserves too high\\\");\\r\\n\\r\\n      // result = (sum ** (1/a)) - baseReserves\\r\\n      uint256 result = uint256(uint128(sum).pow(ONE, a)) - uint256(baseReserves);\\r\\n      require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n      result = result < MAX - VAR ? result + VAR : MAX; // Add error guard, ceiling the result at max\\r\\n\\r\\n      return uint128(result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate the max amount of fyTokens that can be bought from the pool without making the interest rate negative.\\r\\n   * See section 6.3 of the YieldSpace White paper\\r\\n   * @param baseReserves Base reserves amount\\r\\n   * @param fyTokenReserves fyToken reserves amount\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return max amount of fyTokens that can be bought from the pool\\r\\n   */\\r\\n  function maxFYTokenOut(\\r\\n    uint128 baseReserves, uint128 fyTokenReserves,\\r\\n    uint128 timeTillMaturity, int128 ts, int128 g)\\r\\n  public pure returns(uint128) {\\r\\n    if (baseReserves == fyTokenReserves) return 0;\\r\\n    unchecked {\\r\\n      uint128 a = _computeA(timeTillMaturity, ts, g);\\r\\n\\r\\n      // xa = baseReserves ** a\\r\\n      uint128 xa = baseReserves.pow(a, ONE);\\r\\n\\r\\n      // ya = fyTokenReserves ** a\\r\\n      uint128 ya = fyTokenReserves.pow(a, ONE);\\r\\n\\r\\n      int128 xy2 = (xa + ya).divu(TWO);\\r\\n\\r\\n      uint inaccessible = uint256(uint128(xy2).pow(ONE, a));\\r\\n      require(inaccessible <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n      inaccessible = inaccessible < MAX - VAR ? inaccessible + VAR : MAX; // Add error guard, ceiling the result at max\\r\\n\\r\\n      return uint128(inaccessible) > fyTokenReserves ? 0 : fyTokenReserves - uint128(inaccessible);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate the max amount of fyTokens that can be sold to into the pool.\\r\\n   * @param baseReserves Base reserves amount\\r\\n   * @param fyTokenReserves fyToken reserves amount\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return max amount of fyTokens that can be sold to into the pool\\r\\n   */\\r\\n  function maxFYTokenIn(\\r\\n    uint128 baseReserves, uint128 fyTokenReserves,\\r\\n    uint128 timeTillMaturity, int128 ts, int128 g)\\r\\n  public pure returns(uint128) {\\r\\n    unchecked {\\r\\n      uint128 b = _computeB(timeTillMaturity, ts, g);\\r\\n\\r\\n      // xa = baseReserves ** a\\r\\n      uint128 xa = baseReserves.pow(b, ONE);\\r\\n\\r\\n      // ya = fyTokenReserves ** a\\r\\n      uint128 ya = fyTokenReserves.pow(b, ONE);\\r\\n\\r\\n      uint result = (xa + ya).pow(ONE, b) - fyTokenReserves;\\r\\n      require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n      result = result > VAR ? result - VAR : 0; // Subtract error guard, flooring the result at zero\\r\\n\\r\\n      return uint128(result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate the max amount of base that can be sold to into the pool without making the interest rate negative.\\r\\n   * @param baseReserves Base reserves amount\\r\\n   * @param fyTokenReserves fyToken reserves amount\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return max amount of base that can be sold to into the pool\\r\\n   */\\r\\n  function maxBaseIn(\\r\\n    uint128 baseReserves, uint128 fyTokenReserves,\\r\\n    uint128 timeTillMaturity, int128 ts, int128 g)\\r\\n  public pure returns (uint128) {\\r\\n    uint128 _maxFYTokenOut = maxFYTokenOut(baseReserves, fyTokenReserves, timeTillMaturity, ts, g);\\r\\n    if (_maxFYTokenOut > 0)\\r\\n      return baseInForFYTokenOut(baseReserves, fyTokenReserves, _maxFYTokenOut, timeTillMaturity, ts, g);\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate the max amount of base that can be bought from the pool.\\r\\n   * @param baseReserves Base reserves amount\\r\\n   * @param fyTokenReserves fyToken reserves amount\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return max amount of base that can be bought from the pool\\r\\n   */\\r\\n  function maxBaseOut(\\r\\n    uint128 baseReserves, uint128 fyTokenReserves,\\r\\n    uint128 timeTillMaturity, int128 ts, int128 g)\\r\\n  public pure returns (uint128) {\\r\\n    uint128 _maxFYTokenIn = maxFYTokenIn(baseReserves, fyTokenReserves, timeTillMaturity, ts, g);\\r\\n    return baseOutForFYTokenIn(baseReserves, fyTokenReserves, _maxFYTokenIn, timeTillMaturity, ts, g);\\r\\n  }\\r\\n\\r\\n  function _computeA(uint128 timeTillMaturity, int128 ts, int128 g) private pure returns (uint128) {\\r\\n    unchecked {\\r\\n      // t = ts * timeTillMaturity\\r\\n      int128 t = ts.mul(timeTillMaturity.fromUInt());\\r\\n      require(t >= 0, \\\"YieldMath: t must be positive\\\"); // Meaning neither T or ts can be negative\\r\\n\\r\\n      // a = (1 - gt)\\r\\n      int128 a = int128(ONE).sub(g.mul(t));\\r\\n      require(a > 0, \\\"YieldMath: Too far from maturity\\\");\\r\\n      require(a <= int128(ONE), \\\"YieldMath: g must be positive\\\");\\r\\n\\r\\n      return uint128(a);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _computeB(uint128 timeTillMaturity, int128 ts, int128 g) private pure returns (uint128) {\\r\\n    unchecked {\\r\\n      // t = ts * timeTillMaturity\\r\\n      int128 t = ts.mul(timeTillMaturity.fromUInt());\\r\\n      require(t >= 0, \\\"YieldMath: t must be positive\\\"); // Meaning neither T or ts can be negative\\r\\n\\r\\n      // b = (1 - t/g)\\r\\n      int128 b = int128(ONE).sub(t.div(g));\\r\\n      require(b > 0, \\\"YieldMath: Too far from maturity\\\");\\r\\n      require(b <= int128(ONE), \\\"YieldMath: g must be positive\\\");\\r\\n\\r\\n      return uint128(b);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/token/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Inspired on token.sol from DappHub. Natspec adpated from OpenZeppelin.\\n\\npragma solidity ^0.8.0;\\nimport \\\"./IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n * \\n * Calls to {transferFrom} do not check for allowance if the caller is the owner\\n * of the funds. This allows to reduce the number of approvals that are necessary.\\n *\\n * Finally, {transferFrom} does not decrease the allowance if it is set to\\n * type(uint256).max. This reduces the gas costs without any likely impact.\\n */\\ncontract ERC20 is IERC20Metadata {\\n    uint256                                           internal  _totalSupply;\\n    mapping (address => uint256)                      internal  _balanceOf;\\n    mapping (address => mapping (address => uint256)) internal  _allowance;\\n    string                                            public override name = \\\"???\\\";\\n    string                                            public override symbol = \\\"???\\\";\\n    uint8                                             public override decimals = 18;\\n\\n    /**\\n     *  @dev Sets the values for {name}, {symbol} and {decimals}.\\n     */\\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() external view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address guy) external view virtual override returns (uint256) {\\n        return _balanceOf[guy];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) external view virtual override returns (uint256) {\\n        return _allowance[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     */\\n    function approve(address spender, uint wad) external virtual override returns (bool) {\\n        return _setAllowance(msg.sender, spender, wad);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have a balance of at least `wad`.\\n     */\\n    function transfer(address dst, uint wad) external virtual override returns (bool) {\\n        return _transfer(msg.sender, dst, wad);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `src` must have a balance of at least `wad`.\\n     * - the caller is not `src`, it must have allowance for ``src``'s tokens of at least\\n     * `wad`.\\n     */\\n    /// if_succeeds {:msg \\\"TransferFrom - decrease allowance\\\"} msg.sender != src ==> old(_allowance[src][msg.sender]) >= wad;\\n    function transferFrom(address src, address dst, uint wad) external virtual override returns (bool) {\\n        _decreaseAllowance(src, wad);\\n\\n        return _transfer(src, dst, wad);\\n    }\\n\\n    /**\\n     * @dev Moves tokens `wad` from `src` to `dst`.\\n     * \\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `src` must have a balance of at least `amount`.\\n     */\\n    /// if_succeeds {:msg \\\"Transfer - src decrease\\\"} old(_balanceOf[src]) >= _balanceOf[src];\\n    /// if_succeeds {:msg \\\"Transfer - dst increase\\\"} _balanceOf[dst] >= old(_balanceOf[dst]);\\n    /// if_succeeds {:msg \\\"Transfer - supply\\\"} old(_balanceOf[src]) + old(_balanceOf[dst]) == _balanceOf[src] + _balanceOf[dst];\\n    function _transfer(address src, address dst, uint wad) internal virtual returns (bool) {\\n        require(_balanceOf[src] >= wad, \\\"ERC20: Insufficient balance\\\");\\n        unchecked { _balanceOf[src] = _balanceOf[src] - wad; }\\n        _balanceOf[dst] = _balanceOf[dst] + wad;\\n\\n        emit Transfer(src, dst, wad);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Sets the allowance granted to `spender` by `owner`.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     */\\n    function _setAllowance(address owner, address spender, uint wad) internal virtual returns (bool) {\\n        _allowance[owner][spender] = wad;\\n        emit Approval(owner, spender, wad);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decreases the allowance granted to the caller by `src`, unless src == msg.sender or _allowance[src][msg.sender] == MAX\\n     *\\n     * Emits an {Approval} event indicating the updated allowance, if the allowance is updated.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` must have allowance for the caller of at least\\n     * `wad`, unless src == msg.sender\\n     */\\n    /// if_succeeds {:msg \\\"Decrease allowance - underflow\\\"} old(_allowance[src][msg.sender]) <= _allowance[src][msg.sender];\\n    function _decreaseAllowance(address src, uint wad) internal virtual returns (bool) {\\n        if (src != msg.sender) {\\n            uint256 allowed = _allowance[src][msg.sender];\\n            if (allowed != type(uint).max) {\\n                require(allowed >= wad, \\\"ERC20: Insufficient approval\\\");\\n                unchecked { _setAllowance(src, msg.sender, allowed - wad); }\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /** @dev Creates `wad` tokens and assigns them to `dst`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     */\\n    /// if_succeeds {:msg \\\"Mint - balance overflow\\\"} old(_balanceOf[dst]) >= _balanceOf[dst];\\n    /// if_succeeds {:msg \\\"Mint - supply overflow\\\"} old(_totalSupply) >= _totalSupply;\\n    function _mint(address dst, uint wad) internal virtual returns (bool) {\\n        _balanceOf[dst] = _balanceOf[dst] + wad;\\n        _totalSupply = _totalSupply + wad;\\n        emit Transfer(address(0), dst, wad);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Destroys `wad` tokens from `src`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `src` must have at least `wad` tokens.\\n     */\\n    /// if_succeeds {:msg \\\"Burn - balance underflow\\\"} old(_balanceOf[src]) <= _balanceOf[src];\\n    /// if_succeeds {:msg \\\"Burn - supply underflow\\\"} old(_totalSupply) <= _totalSupply;\\n    function _burn(address src, uint wad) internal virtual returns (bool) {\\n        unchecked {\\n            require(_balanceOf[src] >= wad, \\\"ERC20: Insufficient balance\\\");\\n            _balanceOf[src] = _balanceOf[src] - wad;\\n            _totalSupply = _totalSupply - wad;\\n            emit Transfer(src, address(0), wad);\\n        }\\n\\n        return true;\\n    }\\n}\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/token/IERC2612.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n */\\ninterface IERC2612 {\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/utils/AddressStringUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nlibrary AddressStringUtil {\\n    // converts an address to the uppercase hex string, extracting only len bytes (up to 20, multiple of 2)\\n    function toAsciiString(address addr, uint256 len) internal pure returns (string memory) {\\n        require(len % 2 == 0 && len > 0 && len <= 40, \\\"AddressStringUtil: INVALID_LEN\\\");\\n        bytes memory s = new bytes(len);\\n        uint256 addrNum = uint256(uint160(addr));\\n        for (uint256 ii = 0; ii < len ; ii +=2) {\\n            uint8 b = uint8(addrNum >> (4 * (38 - ii)));\\n            s[ii] = char(b >> 4);\\n            s[ii + 1] = char(b & 0x0f);\\n        }\\n        return string(s);\\n    }\\n\\n    // hi and lo are only 4 bits and between 0 and 16\\n    // this method converts those values to the unicode/ascii code point for the hex representation\\n    // uses upper case for the characters\\n    function char(uint8 b) private pure returns (bytes1 c) {\\n        if (b < 10) {\\n            return bytes1(b + 0x30);\\n        } else {\\n            return bytes1(b + 0x37);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/utils/RevertMsgExtractor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/sushiswap/BoringSolidity/blob/441e51c0544cf2451e6116fe00515e71d7c42e2c/contracts/BoringBatchable.sol\\n\\npragma solidity >=0.6.0;\\n\\n\\nlibrary RevertMsgExtractor {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function getRevertMsg(bytes memory returnData)\\n        internal pure\\n        returns (string memory)\\n    {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            returnData := add(returnData, 0x04)\\n        }\\n        return abi.decode(returnData, (string)); // All that remains is the revert string\\n    }\\n}\"\r\n    },\r\n    \"@yield-protocol/yieldspace-v2/contracts/Math64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n/*\\r\\n *  Math 64.64 Smart Contract Library.  Copyright © 2019 by  Consulting.\\r\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\r\\n */\\r\\npragma solidity 0.8.6;\\r\\n\\r\\n/**\\r\\n * Smart contract library of mathematical functions operating with signed\\r\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\r\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\r\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\r\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\r\\n * represented by int128 type holding only the numerator.\\r\\n */\\r\\nlibrary Math64x64 {\\r\\n  /*\\r\\n   * Minimum value signed 64.64-bit fixed point number may have. \\r\\n   */\\r\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\r\\n\\r\\n  /*\\r\\n   * Maximum value signed 64.64-bit fixed point number may have. \\r\\n   */\\r\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n  /**\\r\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\r\\n   * number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function fromInt (int256 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\r\\n      return int128 (x << 64);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\r\\n   * rounding down.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64-bit integer number\\r\\n   */\\r\\n  function toInt (int128 x) internal pure returns (int64) {\\r\\n    unchecked {\\r\\n      return int64 (x >> 64);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\r\\n   * number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x <= 0x7FFFFFFFFFFFFFFF);\\r\\n      return int128 (int256 (x << 64));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\r\\n   * number rounding down.  Revert on underflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return unsigned 64-bit integer number\\r\\n   */\\r\\n  function toUInt (int128 x) internal pure returns (uint64) {\\r\\n    unchecked {\\r\\n      require (x >= 0);\\r\\n      return uint64 (uint128 (x >> 64));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\r\\n   * number rounding down.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 128.128-bin fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function from128x128 (int256 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      int256 result = x >> 64;\\r\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\r\\n   * number.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 128.128 fixed point number\\r\\n   */\\r\\n  function to128x128 (int128 x) internal pure returns (int256) {\\r\\n    unchecked {\\r\\n      return int256 (x) << 64;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x + y.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      int256 result = int256(x) + y;\\r\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x - y.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      int256 result = int256(x) - y;\\r\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x * y rounding down.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      int256 result = int256(x) * y >> 64;\\r\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\r\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64 fixed point number\\r\\n   * @param y signed 256-bit integer number\\r\\n   * @return signed 256-bit integer number\\r\\n   */\\r\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\r\\n    unchecked {\\r\\n      if (x == MIN_64x64) {\\r\\n        require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\r\\n          y <= 0x1000000000000000000000000000000000000000000000000);\\r\\n        return -y << 63;\\r\\n      } else {\\r\\n        bool negativeResult = false;\\r\\n        if (x < 0) {\\r\\n          x = -x;\\r\\n          negativeResult = true;\\r\\n        }\\r\\n        if (y < 0) {\\r\\n          y = -y; // We rely on overflow behavior here\\r\\n          negativeResult = !negativeResult;\\r\\n        }\\r\\n        uint256 absoluteResult = mulu (x, uint256 (y));\\r\\n        if (negativeResult) {\\r\\n          require (absoluteResult <=\\r\\n            0x8000000000000000000000000000000000000000000000000000000000000000);\\r\\n          return -int256 (absoluteResult); // We rely on overflow behavior here\\r\\n        } else {\\r\\n          require (absoluteResult <=\\r\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n          return int256 (absoluteResult);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\r\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64 fixed point number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return unsigned 256-bit integer number\\r\\n   */\\r\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      if (y == 0) return 0;\\r\\n\\r\\n      require (x >= 0);\\r\\n\\r\\n      uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\r\\n      uint256 hi = uint256 (int256 (x)) * (y >> 128);\\r\\n\\r\\n      require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n      hi <<= 64;\\r\\n\\r\\n      require (hi <=\\r\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\r\\n      return hi + lo;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\r\\n   * zero.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (y != 0);\\r\\n      int256 result = (int256 (x) << 64) / y;\\r\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x signed 256-bit integer number\\r\\n   * @param y signed 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (y != 0);\\r\\n\\r\\n      bool negativeResult = false;\\r\\n      if (x < 0) {\\r\\n        x = -x; // We rely on overflow behavior here\\r\\n        negativeResult = true;\\r\\n      }\\r\\n      if (y < 0) {\\r\\n        y = -y; // We rely on overflow behavior here\\r\\n        negativeResult = !negativeResult;\\r\\n      }\\r\\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\r\\n      if (negativeResult) {\\r\\n        require (absoluteResult <= 0x80000000000000000000000000000000);\\r\\n        return -int128 (absoluteResult); // We rely on overflow behavior here\\r\\n      } else {\\r\\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n        return int128 (absoluteResult); // We rely on overflow behavior here\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (y != 0);\\r\\n      uint128 result = divuu (x, y);\\r\\n      require (result <= uint128 (MAX_64x64));\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate -x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function neg (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x != MIN_64x64);\\r\\n      return -x;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate |x|.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function abs (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x != MIN_64x64);\\r\\n      return x < 0 ? -x : x;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\r\\n   * zero.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function inv (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x != 0);\\r\\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\\r\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      return int128 ((int256 (x) + int256 (y)) >> 1);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\r\\n   * Revert on overflow or in case x * y is negative.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      int256 m = int256 (x) * int256 (y);\\r\\n      require (m >= 0);\\r\\n      require (m <\\r\\n          0x4000000000000000000000000000000000000000000000000000000000000000);\\r\\n      return int128 (sqrtu (uint256 (m)));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\r\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y uint256 value\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      bool negative = x < 0 && y & 1 == 1;\\r\\n\\r\\n      uint256 absX = uint128 (x < 0 ? -x : x);\\r\\n      uint256 absResult;\\r\\n      absResult = 0x100000000000000000000000000000000;\\r\\n\\r\\n      if (absX <= 0x10000000000000000) {\\r\\n        absX <<= 63;\\r\\n        while (y != 0) {\\r\\n          if (y & 0x1 != 0) {\\r\\n            absResult = absResult * absX >> 127;\\r\\n          }\\r\\n          absX = absX * absX >> 127;\\r\\n\\r\\n          if (y & 0x2 != 0) {\\r\\n            absResult = absResult * absX >> 127;\\r\\n          }\\r\\n          absX = absX * absX >> 127;\\r\\n\\r\\n          if (y & 0x4 != 0) {\\r\\n            absResult = absResult * absX >> 127;\\r\\n          }\\r\\n          absX = absX * absX >> 127;\\r\\n\\r\\n          if (y & 0x8 != 0) {\\r\\n            absResult = absResult * absX >> 127;\\r\\n          }\\r\\n          absX = absX * absX >> 127;\\r\\n\\r\\n          y >>= 4;\\r\\n        }\\r\\n\\r\\n        absResult >>= 64;\\r\\n      } else {\\r\\n        uint256 absXShift = 63;\\r\\n        if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\\r\\n        if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\\r\\n        if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\\r\\n        if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\\r\\n        if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\\r\\n        if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\\r\\n\\r\\n        uint256 resultShift = 0;\\r\\n        while (y != 0) {\\r\\n          require (absXShift < 64);\\r\\n\\r\\n          if (y & 0x1 != 0) {\\r\\n            absResult = absResult * absX >> 127;\\r\\n            resultShift += absXShift;\\r\\n            if (absResult > 0x100000000000000000000000000000000) {\\r\\n              absResult >>= 1;\\r\\n              resultShift += 1;\\r\\n            }\\r\\n          }\\r\\n          absX = absX * absX >> 127;\\r\\n          absXShift <<= 1;\\r\\n          if (absX >= 0x100000000000000000000000000000000) {\\r\\n              absX >>= 1;\\r\\n              absXShift += 1;\\r\\n          }\\r\\n\\r\\n          y >>= 1;\\r\\n        }\\r\\n\\r\\n        require (resultShift < 64);\\r\\n        absResult >>= 64 - resultShift;\\r\\n      }\\r\\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\\r\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function sqrt (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x >= 0);\\r\\n      return int128 (sqrtu (uint256 (int256 (x)) << 64));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function log_2 (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x > 0);\\r\\n\\r\\n      int256 msb = 0;\\r\\n      int256 xc = x;\\r\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\r\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n      int256 result = msb - 64 << 64;\\r\\n      uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\\r\\n      for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\r\\n        ux *= ux;\\r\\n        uint256 b = ux >> 255;\\r\\n        ux >>= 127 + b;\\r\\n        result += bit * int256 (b);\\r\\n      }\\r\\n\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function ln (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x > 0);\\r\\n\\r\\n      return int128 (int256 (\\r\\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate binary exponent of x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function exp_2 (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x < 0x400000000000000000); // Overflow\\r\\n\\r\\n      if (x < -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n      uint256 result = 0x80000000000000000000000000000000;\\r\\n\\r\\n      if (x & 0x8000000000000000 > 0)\\r\\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\r\\n      if (x & 0x4000000000000000 > 0)\\r\\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\r\\n      if (x & 0x2000000000000000 > 0)\\r\\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\r\\n      if (x & 0x1000000000000000 > 0)\\r\\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\r\\n      if (x & 0x800000000000000 > 0)\\r\\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\r\\n      if (x & 0x400000000000000 > 0)\\r\\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\r\\n      if (x & 0x200000000000000 > 0)\\r\\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\r\\n      if (x & 0x100000000000000 > 0)\\r\\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\r\\n      if (x & 0x80000000000000 > 0)\\r\\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\r\\n      if (x & 0x40000000000000 > 0)\\r\\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\r\\n      if (x & 0x20000000000000 > 0)\\r\\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\r\\n      if (x & 0x10000000000000 > 0)\\r\\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\r\\n      if (x & 0x8000000000000 > 0)\\r\\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\r\\n      if (x & 0x4000000000000 > 0)\\r\\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\r\\n      if (x & 0x2000000000000 > 0)\\r\\n        result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\r\\n      if (x & 0x1000000000000 > 0)\\r\\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\r\\n      if (x & 0x800000000000 > 0)\\r\\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\r\\n      if (x & 0x400000000000 > 0)\\r\\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\r\\n      if (x & 0x200000000000 > 0)\\r\\n        result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\r\\n      if (x & 0x100000000000 > 0)\\r\\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\r\\n      if (x & 0x80000000000 > 0)\\r\\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\r\\n      if (x & 0x40000000000 > 0)\\r\\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\r\\n      if (x & 0x20000000000 > 0)\\r\\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\r\\n      if (x & 0x10000000000 > 0)\\r\\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\r\\n      if (x & 0x8000000000 > 0)\\r\\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\r\\n      if (x & 0x4000000000 > 0)\\r\\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\r\\n      if (x & 0x2000000000 > 0)\\r\\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\r\\n      if (x & 0x1000000000 > 0)\\r\\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\r\\n      if (x & 0x800000000 > 0)\\r\\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\r\\n      if (x & 0x400000000 > 0)\\r\\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\r\\n      if (x & 0x200000000 > 0)\\r\\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\r\\n      if (x & 0x100000000 > 0)\\r\\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\r\\n      if (x & 0x80000000 > 0)\\r\\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\r\\n      if (x & 0x40000000 > 0)\\r\\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\r\\n      if (x & 0x20000000 > 0)\\r\\n        result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\r\\n      if (x & 0x10000000 > 0)\\r\\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\r\\n      if (x & 0x8000000 > 0)\\r\\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\r\\n      if (x & 0x4000000 > 0)\\r\\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\r\\n      if (x & 0x2000000 > 0)\\r\\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\r\\n      if (x & 0x1000000 > 0)\\r\\n        result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\r\\n      if (x & 0x800000 > 0)\\r\\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\r\\n      if (x & 0x400000 > 0)\\r\\n        result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\r\\n      if (x & 0x200000 > 0)\\r\\n        result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\r\\n      if (x & 0x100000 > 0)\\r\\n        result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\r\\n      if (x & 0x80000 > 0)\\r\\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\r\\n      if (x & 0x40000 > 0)\\r\\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\r\\n      if (x & 0x20000 > 0)\\r\\n        result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\r\\n      if (x & 0x10000 > 0)\\r\\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\r\\n      if (x & 0x8000 > 0)\\r\\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\r\\n      if (x & 0x4000 > 0)\\r\\n        result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\r\\n      if (x & 0x2000 > 0)\\r\\n        result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\r\\n      if (x & 0x1000 > 0)\\r\\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\r\\n      if (x & 0x800 > 0)\\r\\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\r\\n      if (x & 0x400 > 0)\\r\\n        result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\r\\n      if (x & 0x200 > 0)\\r\\n        result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\r\\n      if (x & 0x100 > 0)\\r\\n        result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\r\\n      if (x & 0x80 > 0)\\r\\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\r\\n      if (x & 0x40 > 0)\\r\\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\r\\n      if (x & 0x20 > 0)\\r\\n        result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\r\\n      if (x & 0x10 > 0)\\r\\n        result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\r\\n      if (x & 0x8 > 0)\\r\\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\r\\n      if (x & 0x4 > 0)\\r\\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\r\\n      if (x & 0x2 > 0)\\r\\n        result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\r\\n      if (x & 0x1 > 0)\\r\\n        result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\r\\n\\r\\n      result >>= uint256 (int256 (63 - (x >> 64)));\\r\\n      require (result <= uint256 (int256 (MAX_64x64)));\\r\\n\\r\\n      return int128 (int256 (result));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate natural exponent of x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function exp (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x < 0x400000000000000000); // Overflow\\r\\n\\r\\n      if (x < -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n      return exp_2 (\\r\\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return unsigned 64.64-bit fixed point number\\r\\n   */\\r\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\r\\n    unchecked {\\r\\n      require (y != 0);\\r\\n\\r\\n      uint256 result;\\r\\n\\r\\n      if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\r\\n        result = (x << 64) / y;\\r\\n      else {\\r\\n        uint256 msb = 192;\\r\\n        uint256 xc = x >> 192;\\r\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n        result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\r\\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n        uint256 hi = result * (y >> 128);\\r\\n        uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n        uint256 xh = x >> 192;\\r\\n        uint256 xl = x << 64;\\r\\n\\r\\n        if (xl < lo) xh -= 1;\\r\\n        xl -= lo; // We rely on overflow behavior here\\r\\n        lo = hi << 128;\\r\\n        if (xl < lo) xh -= 1;\\r\\n        xl -= lo; // We rely on overflow behavior here\\r\\n\\r\\n        assert (xh == hi >> 128);\\r\\n\\r\\n        result += xl / y;\\r\\n      }\\r\\n\\r\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n      return uint128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\r\\n   * number.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @return unsigned 128-bit integer number\\r\\n   */\\r\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\r\\n    unchecked {\\r\\n      if (x == 0) return 0;\\r\\n      else {\\r\\n        uint256 xx = x;\\r\\n        uint256 r = 1;\\r\\n        if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\r\\n        if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\r\\n        if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\r\\n        if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\r\\n        if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\r\\n        if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\r\\n        if (xx >= 0x8) { r <<= 1; }\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\r\\n        uint256 r1 = x / r;\\r\\n        return uint128 (r < r1 ? r : r1);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"@yield-protocol/utils-v2/contracts/token/SafeERC20Namer.sol\": {\r\n        \"SafeERC20Namer\": \"0x39bb9cBe0221D769E30bD08d185842065BcE1706\"\r\n      },\r\n      \"@yield-protocol/yieldspace-v2/contracts/YieldMath.sol\": {\r\n        \"YieldMath\": \"0x856ddd1a74b6e620d043efd6f74d81b8bf34868d\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maturity\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fyTokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"bases\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fyTokens\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"poolTokens\",\"type\":\"int256\"}],\"name\":\"Liquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"baseCached\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"fyTokenCached\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeBalancesRatio\",\"type\":\"uint256\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maturity\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"bases\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fyTokens\",\"type\":\"int256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fyTokenTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRatio\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRatio\",\"type\":\"uint256\"}],\"name\":\"burnForBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"tokenOut\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"max\",\"type\":\"uint128\"}],\"name\":\"buyBase\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"tokenOut\",\"type\":\"uint128\"}],\"name\":\"buyBasePreview\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"fyTokenOut\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"max\",\"type\":\"uint128\"}],\"name\":\"buyFYToken\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"fyTokenOut\",\"type\":\"uint128\"}],\"name\":\"buyFYTokenPreview\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativeBalancesRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploymentChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fyToken\",\"outputs\":[{\"internalType\":\"contract IFYToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g1\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g2\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseBalance\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCache\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFYTokenBalance\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturity\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remainder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRatio\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remainder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fyTokenToBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRatio\",\"type\":\"uint256\"}],\"name\":\"mintWithBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"retrieveBase\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"retrieved\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"retrieveFYToken\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"retrieved\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaleFactor\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"min\",\"type\":\"uint128\"}],\"name\":\"sellBase\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"baseIn\",\"type\":\"uint128\"}],\"name\":\"sellBasePreview\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"min\",\"type\":\"uint128\"}],\"name\":\"sellFYToken\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"fyTokenIn\",\"type\":\"uint128\"}],\"name\":\"sellFYTokenPreview\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ts\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Pool","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}