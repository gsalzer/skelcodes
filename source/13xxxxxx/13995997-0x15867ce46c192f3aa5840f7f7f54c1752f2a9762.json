{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AelinPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./AelinERC20.sol\\\";\\nimport \\\"./AelinDeal.sol\\\";\\nimport \\\"./MinimalProxyFactory.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract AelinPool is AelinERC20, MinimalProxyFactory {\\n    using SafeERC20 for IERC20;\\n    uint256 constant BASE = 100 * 10**18;\\n    uint256 constant MAX_SPONSOR_FEE = 98 * 10**18;\\n    uint256 constant AELIN_FEE = 2 * 10**18;\\n    uint8 constant MAX_DEALS = 5;\\n\\n    uint8 public numberOfDeals;\\n    address public purchaseToken;\\n    uint256 public purchaseTokenCap;\\n    uint8 public purchaseTokenDecimals;\\n    uint256 public proRataConversion;\\n\\n    uint256 public sponsorFee;\\n    address public sponsor;\\n    address public futureSponsor;\\n    address public poolFactory;\\n\\n    uint256 public purchaseExpiry;\\n    uint256 public poolExpiry;\\n    uint256 public holderFundingExpiry;\\n    uint256 public totalAmountAccepted;\\n    uint256 public totalAmountWithdrawn;\\n    uint256 public purchaseTokenTotalForDeal;\\n\\n    bool public calledInitialize = false;\\n\\n    address public aelinRewardsAddress;\\n    address public aelinDealLogicAddress;\\n    AelinDeal public aelinDeal;\\n    address public holder;\\n\\n    mapping(address => uint256) public amountAccepted;\\n    mapping(address => uint256) public amountWithdrawn;\\n    mapping(address => bool) public openPeriodEligible;\\n    mapping(address => uint256) public allowList;\\n    bool public hasAllowList;\\n\\n    string private storedName;\\n    string private storedSymbol;\\n\\n    /**\\n     * @dev the constructor will always be blank due to the MinimalProxyFactory pattern\\n     * this allows the underlying logic of this contract to only be deployed once\\n     * and each new pool created is simply a storage wrapper\\n     */\\n    constructor() {}\\n\\n    /**\\n     * @dev the initialize method replaces the constructor setup and can only be called once\\n     *\\n     * Requirements:\\n     * - max 1 year duration\\n     * - purchase expiry can be set from 30 minutes to 30 days\\n     * - max sponsor fee is 98000 representing 98%\\n     */\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _purchaseTokenCap,\\n        address _purchaseToken,\\n        uint256 _duration,\\n        uint256 _sponsorFee,\\n        address _sponsor,\\n        uint256 _purchaseDuration,\\n        address _aelinDealLogicAddress,\\n        address _aelinRewardsAddress\\n    ) external initOnce {\\n        require(\\n            30 minutes <= _purchaseDuration && 30 days >= _purchaseDuration,\\n            \\\"outside purchase expiry window\\\"\\n        );\\n        require(365 days >= _duration, \\\"max 1 year duration\\\");\\n        require(_sponsorFee <= MAX_SPONSOR_FEE, \\\"exceeds max sponsor fee\\\");\\n        purchaseTokenDecimals = IERC20Decimals(_purchaseToken).decimals();\\n        require(\\n            purchaseTokenDecimals <= DEAL_TOKEN_DECIMALS,\\n            \\\"too many token decimals\\\"\\n        );\\n        storedName = _name;\\n        storedSymbol = _symbol;\\n        poolFactory = msg.sender;\\n\\n        _setNameSymbolAndDecimals(\\n            string(abi.encodePacked(\\\"aePool-\\\", _name)),\\n            string(abi.encodePacked(\\\"aeP-\\\", _symbol)),\\n            purchaseTokenDecimals\\n        );\\n\\n        purchaseTokenCap = _purchaseTokenCap;\\n        purchaseToken = _purchaseToken;\\n        purchaseExpiry = block.timestamp + _purchaseDuration;\\n        poolExpiry = purchaseExpiry + _duration;\\n        sponsorFee = _sponsorFee;\\n        sponsor = _sponsor;\\n        aelinDealLogicAddress = _aelinDealLogicAddress;\\n        aelinRewardsAddress = _aelinRewardsAddress;\\n\\n        emit SetSponsor(_sponsor);\\n    }\\n\\n    function updateAllowList(\\n        address[] memory _allowList,\\n        uint256[] memory _allowListAmounts\\n    ) external onlyPoolFactoryOnce {\\n        for (uint256 i = 0; i < _allowList.length; i++) {\\n            allowList[_allowList[i]] = _allowListAmounts[i];\\n        }\\n    }\\n\\n    modifier dealReady() {\\n        if (holderFundingExpiry > 0) {\\n            require(\\n                !aelinDeal.depositComplete() &&\\n                    block.timestamp >= holderFundingExpiry,\\n                \\\"cant create new deal\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    modifier initOnce() {\\n        require(!calledInitialize, \\\"can only initialize once\\\");\\n        calledInitialize = true;\\n        _;\\n    }\\n\\n    modifier onlySponsor() {\\n        require(msg.sender == sponsor, \\\"only sponsor can access\\\");\\n        _;\\n    }\\n\\n    modifier onlyPoolFactoryOnce() {\\n        require(\\n            msg.sender == poolFactory && !hasAllowList && totalSupply() == 0,\\n            \\\"only pool factory can access\\\"\\n        );\\n        hasAllowList = true;\\n        _;\\n    }\\n\\n    modifier dealFunded() {\\n        require(\\n            holderFundingExpiry > 0 && aelinDeal.depositComplete(),\\n            \\\"deal not yet funded\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev the sponsor may change addresses\\n     */\\n    function setSponsor(address _sponsor) external onlySponsor {\\n        futureSponsor = _sponsor;\\n    }\\n\\n    function acceptSponsor() external {\\n        require(msg.sender == futureSponsor, \\\"only future sponsor can access\\\");\\n        sponsor = futureSponsor;\\n        emit SetSponsor(futureSponsor);\\n    }\\n\\n    /**\\n     * @dev only the sponsor can create a deal. The deal must be funded by the holder\\n     * of the underlying deal token before a purchaser may accept the deal. If the\\n     * holder does not fund the deal before the expiry period is over then the sponsor\\n     * can create a new deal for the pool of capital by calling this method again.\\n     *\\n     * Requirements:\\n     * - The purchase expiry period must be over\\n     * - the holder funding expiry period must be from 30 minutes to 30 days\\n     * - the pro rata redemption period must be from 30 minutes to 30 days\\n     * - the purchase token total for the deal that may be accepted must be <= the funds in the pool\\n     * - if the pro rata conversion ratio (purchase token total for the deal:funds in pool)\\n     *   is 1:1 then the open redemption period must be 0,\\n     *   otherwise the open period is from 30 minutes to 30 days\\n     */\\n    function createDeal(\\n        address _underlyingDealToken,\\n        uint256 _purchaseTokenTotalForDeal,\\n        uint256 _underlyingDealTokenTotal,\\n        uint256 _vestingPeriod,\\n        uint256 _vestingCliff,\\n        uint256 _proRataRedemptionPeriod,\\n        uint256 _openRedemptionPeriod,\\n        address _holder,\\n        uint256 _holderFundingDuration\\n    ) external onlySponsor dealReady returns (address) {\\n        require(numberOfDeals < MAX_DEALS, \\\"too many deals\\\");\\n        require(_holder != address(0), \\\"cant pass null holder address\\\");\\n        require(\\n            _underlyingDealToken != address(0),\\n            \\\"cant pass null token address\\\"\\n        );\\n        require(\\n            block.timestamp >= purchaseExpiry,\\n            \\\"pool still in purchase mode\\\"\\n        );\\n        require(\\n            30 minutes <= _proRataRedemptionPeriod &&\\n                30 days >= _proRataRedemptionPeriod,\\n            \\\"30 mins - 30 days for prorata\\\"\\n        );\\n        require(1825 days >= _vestingCliff, \\\"max 5 year cliff\\\");\\n        require(1825 days >= _vestingPeriod, \\\"max 5 year vesting\\\");\\n        require(\\n            30 minutes <= _holderFundingDuration &&\\n                30 days >= _holderFundingDuration,\\n            \\\"30 mins - 30 days for holder\\\"\\n        );\\n        require(\\n            _purchaseTokenTotalForDeal <= totalSupply(),\\n            \\\"not enough funds available\\\"\\n        );\\n        proRataConversion = (_purchaseTokenTotalForDeal * 1e18) / totalSupply();\\n        if (proRataConversion == 1e18) {\\n            require(\\n                0 minutes == _openRedemptionPeriod,\\n                \\\"deal is 1:1, set open to 0\\\"\\n            );\\n        } else {\\n            require(\\n                30 minutes <= _openRedemptionPeriod &&\\n                    30 days >= _openRedemptionPeriod,\\n                \\\"30 mins - 30 days for open\\\"\\n            );\\n        }\\n\\n        numberOfDeals += 1;\\n        poolExpiry = block.timestamp;\\n        holder = _holder;\\n        holderFundingExpiry = block.timestamp + _holderFundingDuration;\\n        purchaseTokenTotalForDeal = _purchaseTokenTotalForDeal;\\n        uint256 maxDealTotalSupply = convertPoolToDeal(\\n            _purchaseTokenTotalForDeal,\\n            purchaseTokenDecimals\\n        );\\n\\n        address aelinDealStorageProxy = _cloneAsMinimalProxy(\\n            aelinDealLogicAddress,\\n            \\\"Could not create new deal\\\"\\n        );\\n        aelinDeal = AelinDeal(aelinDealStorageProxy);\\n\\n        aelinDeal.initialize(\\n            storedName,\\n            storedSymbol,\\n            _underlyingDealToken,\\n            _underlyingDealTokenTotal,\\n            _vestingPeriod,\\n            _vestingCliff,\\n            _proRataRedemptionPeriod,\\n            _openRedemptionPeriod,\\n            _holder,\\n            maxDealTotalSupply,\\n            holderFundingExpiry,\\n            aelinRewardsAddress\\n        );\\n\\n        emit CreateDeal(\\n            string(abi.encodePacked(\\\"aeDeal-\\\", storedName)),\\n            string(abi.encodePacked(\\\"aeD-\\\", storedSymbol)),\\n            sponsor,\\n            aelinDealStorageProxy\\n        );\\n\\n        emit DealDetail(\\n            aelinDealStorageProxy,\\n            _underlyingDealToken,\\n            _purchaseTokenTotalForDeal,\\n            _underlyingDealTokenTotal,\\n            _vestingPeriod,\\n            _vestingCliff,\\n            _proRataRedemptionPeriod,\\n            _openRedemptionPeriod,\\n            _holder,\\n            _holderFundingDuration\\n        );\\n\\n        return aelinDealStorageProxy;\\n    }\\n\\n    /**\\n     * @dev the 2 methods allow a purchaser to exchange accept all or a\\n     * portion of their pool tokens for deal tokens\\n     *\\n     * Requirements:\\n     * - the redemption period is either in the pro rata or open windows\\n     * - the purchaser cannot accept more than their share for a period\\n     * - if participating in the open period, a purchaser must have maxxed their\\n     *   contribution in the pro rata phase\\n     */\\n    function acceptMaxDealTokens() external {\\n        _acceptDealTokens(msg.sender, 0, true);\\n    }\\n\\n    function acceptDealTokens(uint256 poolTokenAmount) external {\\n        _acceptDealTokens(msg.sender, poolTokenAmount, false);\\n    }\\n\\n    /**\\n     * @dev the if statement says if you have no balance or if the deal is not funded\\n     * or if the pro rata period is not active, then you have 0 available for this period\\n     */\\n    function maxProRataAmount(address purchaser) public view returns (uint256) {\\n        if (\\n            (balanceOf(purchaser) == 0 &&\\n                amountAccepted[purchaser] == 0 &&\\n                amountWithdrawn[purchaser] == 0) ||\\n            holderFundingExpiry == 0 ||\\n            aelinDeal.proRataRedemptionStart() == 0 ||\\n            block.timestamp >= aelinDeal.proRataRedemptionExpiry()\\n        ) {\\n            return 0;\\n        }\\n        return\\n            (proRataConversion *\\n                (balanceOf(purchaser) +\\n                    amountAccepted[purchaser] +\\n                    amountWithdrawn[purchaser])) /\\n            1e18 -\\n            amountAccepted[purchaser];\\n    }\\n\\n    function maxOpenAvail(address purchaser) internal view returns (uint256) {\\n        return\\n            balanceOf(purchaser) + totalAmountAccepted <=\\n                purchaseTokenTotalForDeal\\n                ? balanceOf(purchaser)\\n                : purchaseTokenTotalForDeal - totalAmountAccepted;\\n    }\\n\\n    function _acceptDealTokens(\\n        address recipient,\\n        uint256 poolTokenAmount,\\n        bool useMax\\n    ) internal dealFunded lock {\\n        if (\\n            block.timestamp >= aelinDeal.proRataRedemptionStart() &&\\n            block.timestamp < aelinDeal.proRataRedemptionExpiry()\\n        ) {\\n            _acceptDealTokensProRata(recipient, poolTokenAmount, useMax);\\n        } else if (\\n            aelinDeal.openRedemptionStart() > 0 &&\\n            block.timestamp < aelinDeal.openRedemptionExpiry()\\n        ) {\\n            _acceptDealTokensOpen(recipient, poolTokenAmount, useMax);\\n        } else {\\n            revert(\\\"outside of redeem window\\\");\\n        }\\n    }\\n\\n    function _acceptDealTokensProRata(\\n        address recipient,\\n        uint256 poolTokenAmount,\\n        bool useMax\\n    ) internal {\\n        uint256 maxProRata = maxProRataAmount(recipient);\\n        uint256 maxAccept = maxProRata > balanceOf(recipient)\\n            ? balanceOf(recipient)\\n            : maxProRata;\\n        if (!useMax) {\\n            require(\\n                poolTokenAmount <= maxProRata &&\\n                    balanceOf(recipient) >= poolTokenAmount,\\n                \\\"accepting more than share\\\"\\n            );\\n        }\\n        uint256 acceptAmount = useMax ? maxAccept : poolTokenAmount;\\n        amountAccepted[recipient] += acceptAmount;\\n        totalAmountAccepted += acceptAmount;\\n        mintDealTokens(recipient, acceptAmount);\\n        if (proRataConversion != 1e18 && maxProRataAmount(recipient) == 0) {\\n            openPeriodEligible[recipient] = true;\\n        }\\n    }\\n\\n    function _acceptDealTokensOpen(\\n        address recipient,\\n        uint256 poolTokenAmount,\\n        bool useMax\\n    ) internal {\\n        require(\\n            openPeriodEligible[recipient],\\n            \\\"ineligible: didn't max pro rata\\\"\\n        );\\n        uint256 maxOpen = maxOpenAvail(recipient);\\n        require(maxOpen > 0, \\\"nothing left to accept\\\");\\n        uint256 acceptAmount = useMax ? maxOpen : poolTokenAmount;\\n        if (!useMax) {\\n            require(acceptAmount <= maxOpen, \\\"accepting more than share\\\");\\n        }\\n        totalAmountAccepted += acceptAmount;\\n        mintDealTokens(recipient, acceptAmount);\\n    }\\n\\n    /**\\n     * @dev the holder will receive less purchase tokens than the amount\\n     * transferred if the purchase token burns or takes a fee during transfer\\n     */\\n    function mintDealTokens(address recipient, uint256 poolTokenAmount)\\n        internal\\n    {\\n        _burn(recipient, poolTokenAmount);\\n        uint256 poolTokenDealFormatted = convertPoolToDeal(\\n            poolTokenAmount,\\n            purchaseTokenDecimals\\n        );\\n        uint256 aelinFeeAmt = (poolTokenDealFormatted * AELIN_FEE) / BASE;\\n        uint256 sponsorFeeAmt = (poolTokenDealFormatted * sponsorFee) / BASE;\\n\\n        aelinDeal.mint(sponsor, sponsorFeeAmt);\\n        aelinDeal.mint(aelinRewardsAddress, aelinFeeAmt);\\n        aelinDeal.mint(\\n            recipient,\\n            poolTokenDealFormatted - (sponsorFeeAmt + aelinFeeAmt)\\n        );\\n        IERC20(purchaseToken).safeTransfer(holder, poolTokenAmount);\\n        emit AcceptDeal(\\n            recipient,\\n            address(aelinDeal),\\n            poolTokenAmount,\\n            sponsorFeeAmt,\\n            aelinFeeAmt\\n        );\\n    }\\n\\n    /**\\n     * @dev allows anyone to become a purchaser by sending purchase tokens\\n     * in exchange for pool tokens\\n     *\\n     * Requirements:\\n     * - the deal is in the purchase expiry window\\n     * - the cap has not been exceeded\\n     */\\n    function purchasePoolTokens(uint256 _purchaseTokenAmount) external lock {\\n        if (hasAllowList) {\\n            require(\\n                _purchaseTokenAmount <= allowList[msg.sender],\\n                \\\"more than allocation\\\"\\n            );\\n            allowList[msg.sender] -= _purchaseTokenAmount;\\n        }\\n        require(block.timestamp < purchaseExpiry, \\\"not in purchase window\\\");\\n        uint256 currentBalance = IERC20(purchaseToken).balanceOf(address(this));\\n        IERC20(purchaseToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _purchaseTokenAmount\\n        );\\n        uint256 balanceAfterTransfer = IERC20(purchaseToken).balanceOf(\\n            address(this)\\n        );\\n        uint256 purchaseTokenAmount = balanceAfterTransfer - currentBalance;\\n        if (purchaseTokenCap > 0) {\\n            uint256 totalPoolAfter = totalSupply() + purchaseTokenAmount;\\n            require(\\n                totalPoolAfter <= purchaseTokenCap,\\n                \\\"cap has been exceeded\\\"\\n            );\\n            if (totalPoolAfter == purchaseTokenCap) {\\n                purchaseExpiry = block.timestamp;\\n            }\\n        }\\n\\n        _mint(msg.sender, purchaseTokenAmount);\\n        emit PurchasePoolToken(msg.sender, purchaseTokenAmount);\\n    }\\n\\n    /**\\n     * @dev the withdraw and partial withdraw methods allow a purchaser to take their\\n     * purchase tokens back in exchange for pool tokens if they do not accept a deal\\n     *\\n     * Requirements:\\n     * - the pool has expired either due to the creation of a deal or the end of the duration\\n     */\\n    function withdrawMaxFromPool() external {\\n        _withdraw(balanceOf(msg.sender));\\n    }\\n\\n    function withdrawFromPool(uint256 purchaseTokenAmount) external {\\n        _withdraw(purchaseTokenAmount);\\n    }\\n\\n    /**\\n     * @dev purchasers can withdraw at the end of the pool expiry period if\\n     * no deal was presented or they can withdraw after the holder funding period\\n     * if they do not like a deal\\n     */\\n    function _withdraw(uint256 purchaseTokenAmount) internal {\\n        require(block.timestamp >= poolExpiry, \\\"not yet withdraw period\\\");\\n        if (holderFundingExpiry > 0) {\\n            require(\\n                block.timestamp > holderFundingExpiry ||\\n                    aelinDeal.depositComplete(),\\n                \\\"cant withdraw in funding period\\\"\\n            );\\n        }\\n        _burn(msg.sender, purchaseTokenAmount);\\n        IERC20(purchaseToken).safeTransfer(msg.sender, purchaseTokenAmount);\\n        amountWithdrawn[msg.sender] += purchaseTokenAmount;\\n        totalAmountWithdrawn += purchaseTokenAmount;\\n        emit WithdrawFromPool(msg.sender, purchaseTokenAmount);\\n    }\\n\\n    /**\\n     * @dev view to see how much of the deal a purchaser can accept.\\n     */\\n    function maxDealAccept(address purchaser) external view returns (uint256) {\\n        /**\\n         * The if statement is checking to see if the holder has not funded the deal\\n         * or if the period is outside of a redemption window so nothing is available.\\n         * It then checks if you are in the pro rata period and open period eligibility\\n         */\\n        if (\\n            holderFundingExpiry == 0 ||\\n            aelinDeal.proRataRedemptionStart() == 0 ||\\n            (block.timestamp >= aelinDeal.proRataRedemptionExpiry() &&\\n                aelinDeal.openRedemptionStart() == 0) ||\\n            (block.timestamp >= aelinDeal.openRedemptionExpiry() &&\\n                aelinDeal.openRedemptionStart() != 0)\\n        ) {\\n            return 0;\\n        } else if (block.timestamp < aelinDeal.proRataRedemptionExpiry()) {\\n            uint256 maxProRata = maxProRataAmount(purchaser);\\n            return\\n                maxProRata > balanceOf(purchaser)\\n                    ? balanceOf(purchaser)\\n                    : maxProRata;\\n        } else if (!openPeriodEligible[purchaser]) {\\n            return 0;\\n        } else {\\n            return maxOpenAvail(purchaser);\\n        }\\n    }\\n\\n    modifier blockTransfer() {\\n        require(false, \\\"cannot transfer pool tokens\\\");\\n        _;\\n    }\\n\\n    function transfer(address dst, uint256 amount)\\n        public\\n        virtual\\n        override\\n        blockTransfer\\n        returns (bool)\\n    {\\n        return super.transfer(dst, amount);\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) public virtual override blockTransfer returns (bool) {\\n        return super.transferFrom(src, dst, amount);\\n    }\\n\\n    /**\\n     * @dev convert pool with varying decimals to deal tokens of 18 decimals\\n     * NOTE that a purchase token must not be greater than 18 decimals\\n     */\\n    function convertPoolToDeal(\\n        uint256 poolTokenAmount,\\n        uint256 poolTokenDecimals\\n    ) internal pure returns (uint256) {\\n        return poolTokenAmount * 10**(18 - poolTokenDecimals);\\n    }\\n\\n    event SetSponsor(address indexed sponsor);\\n    event PurchasePoolToken(\\n        address indexed purchaser,\\n        uint256 purchaseTokenAmount\\n    );\\n    event WithdrawFromPool(\\n        address indexed purchaser,\\n        uint256 purchaseTokenAmount\\n    );\\n    event AcceptDeal(\\n        address indexed purchaser,\\n        address indexed dealAddress,\\n        uint256 poolTokenAmount,\\n        uint256 sponsorFee,\\n        uint256 aelinFee\\n    );\\n    event CreateDeal(\\n        string name,\\n        string symbol,\\n        address indexed sponsor,\\n        address indexed dealContract\\n    );\\n    event DealDetail(\\n        address indexed dealContract,\\n        address indexed underlyingDealToken,\\n        uint256 purchaseTokenTotalForDeal,\\n        uint256 underlyingDealTokenTotal,\\n        uint256 vestingPeriod,\\n        uint256 vestingCliff,\\n        uint256 proRataRedemptionPeriod,\\n        uint256 openRedemptionPeriod,\\n        address indexed holder,\\n        uint256 holderFundingDuration\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/AelinERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport {ERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IERC20Decimals {\\n    function decimals() external view returns (uint8);\\n}\\n\\n/**\\n * @dev a standard ERC20 contract that is extended with a few methods\\n * described in detail below\\n */\\ncontract AelinERC20 is ERC20 {\\n    bool setInfo;\\n    /**\\n     * @dev Due to the constructor being empty for the MinimalProxy architecture we need\\n     * to set the name and symbol in the initializer which requires these custom variables\\n     */\\n    string private _custom_name;\\n    string private _custom_symbol;\\n    uint8 private _custom_decimals;\\n    bool private locked;\\n    uint8 constant DEAL_TOKEN_DECIMALS = 18;\\n\\n    constructor() ERC20(\\\"\\\", \\\"\\\") {}\\n\\n    modifier initInfoOnce() {\\n        require(!setInfo, \\\"can only initialize once\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Due to the constructor being empty for the MinimalProxy architecture we need\\n     * to set the name, symbol, and decimals in the initializer which requires this\\n     * custom logic for name(), symbol(), decimals(), and _setNameSymbolAndDecimals()\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _custom_name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _custom_symbol;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return _custom_decimals;\\n    }\\n\\n    function _setNameSymbolAndDecimals(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) internal initInfoOnce returns (bool) {\\n        _custom_name = _name;\\n        _custom_symbol = _symbol;\\n        _custom_decimals = _decimals;\\n        setInfo = true;\\n        emit AelinToken(_name, _symbol, _decimals);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Add this to prevent reentrancy attacks on purchasePoolTokens and depositUnderlying\\n     * source: https://quantstamp.com/blog/how-the-dforce-hacker-used-reentrancy-to-steal-25-million\\n     * uniswap implementation: https://github.com/Uniswap/v2-core/blob/master/contracts/UniswapV2Pair.sol#L31-L36\\n     */\\n    modifier lock() {\\n        require(!locked, \\\"AelinV1: LOCKED\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    event AelinToken(string name, string symbol, uint8 decimals);\\n}\\n\"\r\n    },\r\n    \"contracts/AelinDeal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./AelinERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract AelinDeal is AelinERC20 {\\n    using SafeERC20 for IERC20;\\n    uint256 public maxTotalSupply;\\n\\n    address public underlyingDealToken;\\n    uint256 public underlyingDealTokenTotal;\\n    uint256 public totalUnderlyingClaimed;\\n    address public holder;\\n    address public futureHolder;\\n    address public aelinRewardsAddress;\\n\\n    uint256 public underlyingPerDealExchangeRate;\\n\\n    address public aelinPool;\\n    uint256 public vestingCliff;\\n    uint256 public vestingPeriod;\\n    uint256 public vestingExpiry;\\n    uint256 public holderFundingExpiry;\\n\\n    uint256 public proRataRedemptionPeriod;\\n    uint256 public proRataRedemptionStart;\\n    uint256 public proRataRedemptionExpiry;\\n\\n    uint256 public openRedemptionPeriod;\\n    uint256 public openRedemptionStart;\\n    uint256 public openRedemptionExpiry;\\n\\n    bool public calledInitialize;\\n    bool public depositComplete;\\n    mapping(address => uint256) public amountVested;\\n\\n    /**\\n     * @dev the constructor will always be blank due to the MinimalProxyFactory pattern\\n     * this allows the underlying logic of this contract to only be deployed once\\n     * and each new deal created is simply a storage wrapper\\n     */\\n    constructor() {}\\n\\n    /**\\n     * @dev the initialize method replaces the constructor setup and can only be called once\\n     * NOTE the deal tokens wrapping the underlying are always 18 decimals\\n     */\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address _underlyingDealToken,\\n        uint256 _underlyingDealTokenTotal,\\n        uint256 _vestingPeriod,\\n        uint256 _vestingCliff,\\n        uint256 _proRataRedemptionPeriod,\\n        uint256 _openRedemptionPeriod,\\n        address _holder,\\n        uint256 _maxDealTotalSupply,\\n        uint256 _holderFundingDuration,\\n        address _aelinRewardsAddress\\n    ) external initOnce {\\n        _setNameSymbolAndDecimals(\\n            string(abi.encodePacked(\\\"aeDeal-\\\", _name)),\\n            string(abi.encodePacked(\\\"aeD-\\\", _symbol)),\\n            DEAL_TOKEN_DECIMALS\\n        );\\n\\n        holder = _holder;\\n        underlyingDealToken = _underlyingDealToken;\\n        underlyingDealTokenTotal = _underlyingDealTokenTotal;\\n        maxTotalSupply = _maxDealTotalSupply;\\n\\n        aelinPool = msg.sender;\\n        vestingCliff =\\n            block.timestamp +\\n            _proRataRedemptionPeriod +\\n            _openRedemptionPeriod +\\n            _vestingCliff;\\n        vestingPeriod = _vestingPeriod;\\n        vestingExpiry = vestingCliff + _vestingPeriod;\\n        proRataRedemptionPeriod = _proRataRedemptionPeriod;\\n        openRedemptionPeriod = _openRedemptionPeriod;\\n        holderFundingExpiry = _holderFundingDuration;\\n        aelinRewardsAddress = _aelinRewardsAddress;\\n\\n        depositComplete = false;\\n\\n        /**\\n         * calculates the amount of underlying deal tokens you get per wrapped deal token accepted\\n         */\\n        underlyingPerDealExchangeRate =\\n            (_underlyingDealTokenTotal * 1e18) /\\n            maxTotalSupply;\\n        emit SetHolder(_holder);\\n    }\\n\\n    modifier initOnce() {\\n        require(!calledInitialize, \\\"can only initialize once\\\");\\n        calledInitialize = true;\\n        _;\\n    }\\n\\n    modifier finalizeDeposit() {\\n        require(block.timestamp < holderFundingExpiry, \\\"deposit past deadline\\\");\\n        require(!depositComplete, \\\"deposit already complete\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev the holder may change their address\\n     */\\n    function setHolder(address _holder) external onlyHolder {\\n        futureHolder = _holder;\\n    }\\n\\n    function acceptHolder() external {\\n        require(msg.sender == futureHolder, \\\"only future holder can access\\\");\\n        holder = futureHolder;\\n        emit SetHolder(futureHolder);\\n    }\\n\\n    /**\\n     * @dev the holder finalizes the deal for the pool created by the\\n     * sponsor by depositing funds using this method.\\n     *\\n     * NOTE if the deposit was completed with a transfer instead of this method\\n     * the deposit still needs to be finalized by calling this method with\\n     * _underlyingDealTokenAmount set to 0\\n     */\\n    function depositUnderlying(uint256 _underlyingDealTokenAmount)\\n        external\\n        finalizeDeposit\\n        lock\\n        returns (bool)\\n    {\\n        if (_underlyingDealTokenAmount > 0) {\\n            uint256 currentBalance = IERC20(underlyingDealToken).balanceOf(\\n                address(this)\\n            );\\n            IERC20(underlyingDealToken).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _underlyingDealTokenAmount\\n            );\\n            uint256 balanceAfterTransfer = IERC20(underlyingDealToken)\\n                .balanceOf(address(this));\\n            uint256 underlyingDealTokenAmount = balanceAfterTransfer -\\n                currentBalance;\\n\\n            emit DepositDealToken(\\n                underlyingDealToken,\\n                msg.sender,\\n                underlyingDealTokenAmount\\n            );\\n        }\\n\\n        if (\\n            IERC20(underlyingDealToken).balanceOf(address(this)) >=\\n            underlyingDealTokenTotal\\n        ) {\\n            depositComplete = true;\\n            proRataRedemptionStart = block.timestamp;\\n            proRataRedemptionExpiry = block.timestamp + proRataRedemptionPeriod;\\n\\n            if (openRedemptionPeriod > 0) {\\n                openRedemptionStart = proRataRedemptionExpiry;\\n                openRedemptionExpiry =\\n                    proRataRedemptionExpiry +\\n                    openRedemptionPeriod;\\n            }\\n            emit DealFullyFunded(\\n                aelinPool,\\n                proRataRedemptionStart,\\n                proRataRedemptionExpiry,\\n                openRedemptionStart,\\n                openRedemptionExpiry\\n            );\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev the holder can withdraw any amount accidentally deposited over\\n     * the amount needed to fulfill the deal\\n     *\\n     * NOTE if the deposit was completed with a transfer instead of this method\\n     * the deposit still needs to be finalized by calling this method with\\n     * _underlyingDealTokenAmount set to 0\\n     */\\n    function withdraw() external onlyHolder {\\n        uint256 withdrawAmount;\\n        if (!depositComplete && block.timestamp >= holderFundingExpiry) {\\n            withdrawAmount = IERC20(underlyingDealToken).balanceOf(\\n                address(this)\\n            );\\n        } else {\\n            withdrawAmount =\\n                IERC20(underlyingDealToken).balanceOf(address(this)) -\\n                (underlyingDealTokenTotal - totalUnderlyingClaimed);\\n        }\\n        IERC20(underlyingDealToken).safeTransfer(holder, withdrawAmount);\\n        emit WithdrawUnderlyingDealToken(\\n            underlyingDealToken,\\n            holder,\\n            withdrawAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev after the redemption period has ended the holder can withdraw\\n     * the excess funds remaining from purchasers who did not accept the deal\\n     *\\n     * Requirements:\\n     * - both the pro rata and open redemption windows are no longer active\\n     */\\n    function withdrawExpiry() external onlyHolder {\\n        require(proRataRedemptionExpiry > 0, \\\"redemption period not started\\\");\\n        require(\\n            openRedemptionExpiry > 0\\n                ? block.timestamp >= openRedemptionExpiry\\n                : block.timestamp >= proRataRedemptionExpiry,\\n            \\\"redeem window still active\\\"\\n        );\\n        uint256 withdrawAmount = IERC20(underlyingDealToken).balanceOf(\\n            address(this)\\n        ) - ((underlyingPerDealExchangeRate * totalSupply()) / 1e18);\\n        IERC20(underlyingDealToken).safeTransfer(holder, withdrawAmount);\\n        emit WithdrawUnderlyingDealToken(\\n            underlyingDealToken,\\n            holder,\\n            withdrawAmount\\n        );\\n    }\\n\\n    modifier onlyHolder() {\\n        require(msg.sender == holder, \\\"only holder can access\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(msg.sender == aelinPool, \\\"only AelinPool can access\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev a view showing the number of claimable deal tokens and the\\n     * amount of the underlying deal token a purchser gets in return\\n     */\\n    function claimableTokens(address purchaser)\\n        public\\n        view\\n        returns (uint256 underlyingClaimable, uint256 dealTokensClaimable)\\n    {\\n        underlyingClaimable = 0;\\n        dealTokensClaimable = 0;\\n        uint256 maxTime = block.timestamp > vestingExpiry\\n            ? vestingExpiry\\n            : block.timestamp;\\n        if (\\n            balanceOf(purchaser) > 0 &&\\n            (maxTime > vestingCliff ||\\n                (maxTime == vestingCliff && vestingPeriod == 0))\\n        ) {\\n            uint256 timeElapsed = maxTime - vestingCliff;\\n            dealTokensClaimable = vestingPeriod == 0\\n                ? balanceOf(purchaser)\\n                : ((balanceOf(purchaser) + amountVested[purchaser]) *\\n                    timeElapsed) /\\n                    vestingPeriod -\\n                    amountVested[purchaser];\\n            underlyingClaimable =\\n                (underlyingPerDealExchangeRate * dealTokensClaimable) /\\n                1e18;\\n        }\\n    }\\n\\n    /**\\n     * @dev allows a user to claim their underlying deal tokens or a partial amount\\n     * of their underlying tokens once they have vested according to the schedule\\n     * created by the sponsor\\n     */\\n    function claim() external returns (uint256) {\\n        return _claim(msg.sender);\\n    }\\n\\n    function _claim(address recipient) internal returns (uint256) {\\n        (\\n            uint256 underlyingDealTokensClaimed,\\n            uint256 dealTokensClaimed\\n        ) = claimableTokens(recipient);\\n        if (dealTokensClaimed > 0) {\\n            amountVested[recipient] += dealTokensClaimed;\\n            _burn(recipient, dealTokensClaimed);\\n            IERC20(underlyingDealToken).safeTransfer(\\n                recipient,\\n                underlyingDealTokensClaimed\\n            );\\n            totalUnderlyingClaimed += underlyingDealTokensClaimed;\\n            emit ClaimedUnderlyingDealToken(\\n                underlyingDealToken,\\n                recipient,\\n                underlyingDealTokensClaimed\\n            );\\n        }\\n        return dealTokensClaimed;\\n    }\\n\\n    /**\\n     * @dev allows the purchaser to mint deal tokens. this method is also used\\n     * to send deal tokens to the sponsor and the aelin rewards pool. It may only\\n     * be called from the pool contract that created this deal\\n     */\\n    function mint(address dst, uint256 dealTokenAmount) external onlyPool {\\n        require(depositComplete, \\\"deposit not complete\\\");\\n        _mint(dst, dealTokenAmount);\\n    }\\n\\n    modifier blockTransfer() {\\n        if (msg.sender != aelinRewardsAddress) {\\n            require(false, \\\"cannot transfer deal tokens\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev a function only the treasury can use so they can send both the all\\n     * unvested deal tokens as well as all the vested underlying deal tokens in a\\n     * single transaction for distribution to $AELIN stakers.\\n     */\\n    function treasuryTransfer(address recipient) external returns (bool) {\\n        require(\\n            msg.sender == aelinRewardsAddress,\\n            \\\"only Rewards address can access\\\"\\n        );\\n        (\\n            uint256 underlyingClaimable,\\n            uint256 claimableDealTokens\\n        ) = claimableTokens(msg.sender);\\n        transfer(recipient, balanceOf(msg.sender) - claimableDealTokens);\\n        return\\n            IERC20(underlyingDealToken).transferFrom(\\n                msg.sender,\\n                recipient,\\n                underlyingClaimable\\n            );\\n    }\\n\\n    /**\\n     * @dev below are helpers for transferring deal tokens. NOTE the token holder transferring\\n     * the deal tokens must pay the gas to claim their vested tokens first, which will burn their vested deal\\n     * tokens. They must also pay for the receivers claim and burn any of their vested tokens in order to ensure\\n     * the claim calculation is always accurate for all parties in the system\\n     */\\n    function transferMax(address recipient)\\n        external\\n        blockTransfer\\n        returns (bool)\\n    {\\n        (, uint256 claimableDealTokens) = claimableTokens(msg.sender);\\n        return transfer(recipient, balanceOf(msg.sender) - claimableDealTokens);\\n    }\\n\\n    function transferFromMax(address sender, address recipient)\\n        external\\n        blockTransfer\\n        returns (bool)\\n    {\\n        (, uint256 claimableDealTokens) = claimableTokens(sender);\\n        return\\n            transferFrom(\\n                sender,\\n                recipient,\\n                balanceOf(sender) - claimableDealTokens\\n            );\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        blockTransfer\\n        returns (bool)\\n    {\\n        _claim(msg.sender);\\n        _claim(recipient);\\n        return super.transfer(recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override blockTransfer returns (bool) {\\n        _claim(sender);\\n        _claim(recipient);\\n        return super.transferFrom(sender, recipient, amount);\\n    }\\n\\n    event SetHolder(address indexed holder);\\n    event DealFullyFunded(\\n        address indexed poolAddress,\\n        uint256 proRataRedemptionStart,\\n        uint256 proRataRedemptionExpiry,\\n        uint256 openRedemptionStart,\\n        uint256 openRedemptionExpiry\\n    );\\n    event DepositDealToken(\\n        address indexed underlyingDealTokenAddress,\\n        address indexed depositor,\\n        uint256 underlyingDealTokenAmount\\n    );\\n    event WithdrawUnderlyingDealToken(\\n        address indexed underlyingDealTokenAddress,\\n        address indexed depositor,\\n        uint256 underlyingDealTokenAmount\\n    );\\n    event ClaimedUnderlyingDealToken(\\n        address indexed underlyingDealTokenAddress,\\n        address indexed recipient,\\n        uint256 underlyingDealTokensClaimed\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/MinimalProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.7;\\n\\n// https://docs.synthetix.io/contracts/source/contracts/minimalproxyfactory\\ncontract MinimalProxyFactory {\\n    function _cloneAsMinimalProxy(address _base, string memory _revertMsg)\\n        internal\\n        returns (address clone)\\n    {\\n        bytes memory createData = _generateMinimalProxyCreateData(_base);\\n\\n        assembly {\\n            clone := create(\\n                0, // no value\\n                add(createData, 0x20), // data\\n                55 // data is always 55 bytes (10 constructor + 45 code)\\n            )\\n        }\\n\\n        // If CREATE fails for some reason, address(0) is returned\\n        require(clone != address(0), _revertMsg);\\n    }\\n\\n    function _generateMinimalProxyCreateData(address _base)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encodePacked(\\n                //---- constructor -----\\n                bytes10(0x3d602d80600a3d3981f3),\\n                //---- proxy code -----\\n                bytes10(0x363d3d373d3d3d363d73),\\n                _base,\\n                bytes15(0x5af43d82803e903d91602b57fd5bf3)\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dealAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sponsorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aelinFee\",\"type\":\"uint256\"}],\"name\":\"AcceptDeal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"AelinToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dealContract\",\"type\":\"address\"}],\"name\":\"CreateDeal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dealContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingDealToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseTokenTotalForDeal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingDealTokenTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingCliff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proRataRedemptionPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openRedemptionPeriod\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"holderFundingDuration\",\"type\":\"uint256\"}],\"name\":\"DealDetail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseTokenAmount\",\"type\":\"uint256\"}],\"name\":\"PurchasePoolToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"SetSponsor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseTokenAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromPool\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"}],\"name\":\"acceptDealTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptMaxDealTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptSponsor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aelinDeal\",\"outputs\":[{\"internalType\":\"contract AelinDeal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aelinDealLogicAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aelinRewardsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountAccepted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calledInitialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingDealToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseTokenTotalForDeal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_underlyingDealTokenTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_proRataRedemptionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_openRedemptionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_holderFundingDuration\",\"type\":\"uint256\"}],\"name\":\"createDeal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futureSponsor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasAllowList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderFundingExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseTokenCap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_purchaseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sponsorFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_aelinDealLogicAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aelinRewardsAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"}],\"name\":\"maxDealAccept\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"}],\"name\":\"maxProRataAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfDeals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"openPeriodEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proRataConversion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseTokenAmount\",\"type\":\"uint256\"}],\"name\":\"purchasePoolTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseTokenCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseTokenTotalForDeal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"}],\"name\":\"setSponsor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sponsor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sponsorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmountAccepted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmountWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_allowList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_allowListAmounts\",\"type\":\"uint256[]\"}],\"name\":\"updateAllowList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseTokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMaxFromPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AelinPool","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}