{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n\r\n\r\n//  __  __      _           _____ _      _  __      _                _     \r\n// |  \\/  |    | |         / ____(_)    | |/ _|    (_)              | |    \r\n// | \\  / | ___| |_ __ _  | |  __ _ _ __| | |_ _ __ _  ___ _ __   __| |___ \r\n// | |\\/| |/ _ \\ __/ _` | | | |_ | | '__| |  _| '__| |/ _ \\ '_ \\ / _` / __|\r\n// | |  | |  __/ || (_| | | |__| | | |  | | | | |  | |  __/ | | | (_| \\__ \\\r\n// |_|  |_|\\___|\\__\\__,_|  \\_____|_|_|  |_|_| |_|  |_|\\___|_| |_|\\__,_|___/                                                                         \r\n//\r\n// Meta Girlfriends / 2021 \r\n\r\n\r\n\r\n\r\ncontract MetaGirlfriends is ERC721, Ownable {\r\n    using Strings for uint;\r\n\r\n    event PriceChanged(uint256 newPrice);\r\n    event BaseURIChanged(string newUriPrefix, string newUriSuffix);\r\n    event TokenUpdated( uint256 tokenId, uint256 oldtraits, uint256 newtraits, uint256 parent1, uint256 parent2);\r\n\r\n    uint public price = 0.08 ether;\r\n    uint public constant maxSupply = 10000;\r\n    uint public constant giveAwayCount = 200;    \r\n    bool public mintingEnabled;\r\n    bool public whitelistEnabled = true;\r\n    uint public buyLimit = 10;\r\n    uint256 public giveAwaysReserved;\r\n    uint256 public tokensReserved;\r\n    uint256 public tokensMinted;\r\n    uint256 public tokensBurnt;\r\n\r\n    mapping(address => uint256) public reservedCount;\r\n\r\n    mapping(uint256 => uint256) private gftraits; \r\n    uint16[10000] private levels; \r\n    mapping(uint256 => uint256) private traitsToId;\r\n    bool public combineEnabled;\r\n\r\n    uint16[10] traitQuantities_0 = [700, 300, 125, 75, 150, 0, 0, 0, 0, 0];\r\n    uint16[10] traitQuantities_1 = [6000, 600, 200, 0, 0, 0, 0, 0, 0, 0];\r\n    uint16[10] traitQuantities_2 = [8500, 1000, 100, 200, 0, 0, 0, 0,0,0];\r\n    uint16[10] traitQuantities_3 = [700, 1500, 500, 400, 300, 200, 100, 0, 0, 0];\r\n    uint16[10] traitQuantities_4 = [3000, 2000, 1500, 1500, 1000, 500, 300, 200, 0, 0];\r\n    uint16[10] traitQuantities_5 = [2500, 500, 300, 150, 100, 50, 0, 0, 0, 0];\r\n    uint16[10] traitQuantities_6 = [700, 1300, 500, 400, 300, 100, 200, 0, 0, 0];\r\n    uint16[10] traitQuantities_7 = [300, 200, 100, 50, 25, 0, 0, 0, 0, 0];\r\n    uint16[10] traitQuantities_8 = [75, 70, 75, 70, 60, 65, 40, 30, 10, 0];\r\n    uint16[10] traitQuantities_9 = [3000, 1500, 1000, 500, 0, 0, 0, 0, 0, 0];\r\n    uint16[10] traitQuantities_10 = [1500, 800, 700, 500, 300, 150, 100, 0, 0, 0];\r\n    uint16[10] traitQuantities_11 = [1500, 1200, 750, 500, 400, 500, 0, 0, 0, 0];\r\n    uint16[10] traitQuantities_12 = [4000, 2500, 1500, 500, 0, 0, 0, 0, 0, 0];\r\n    uint16[10] traitQuantities_13 = [1000, 650, 500, 400, 0, 0, 0, 0, 0, 0];\r\n    uint16[10] traitQuantities_14 = [1200, 700, 500, 400, 0, 0, 0, 0, 0, 0];\r\n    uint16[10] traitQuantities_15 = [500, 750, 500, 250, 125, 0, 0, 0, 0, 0];\r\n    uint16[10] traitQuantities_16 = [0, 500, 300, 200, 100, 0, 0, 0, 0, 0];\r\n    uint16[10] traitQuantities_17 = [0, 600, 400, 150, 125, 0, 0, 0, 0, 0];\r\n    uint16[10] traitQuantities_18 = [0, 400, 500, 400, 200, 100, 50, 0, 0, 0];\r\n    uint16[10] traitQuantities_19 = [1000, 300, 250, 350, 200, 350, 150, 100, 0, 0];\r\n\r\n    uint8[10] traitNumbers_0 =[7,12,9,3,1,0,0,0,0,0];\r\n    uint8[10] traitNumbers_1 =[1,6,2,0,0,0,0,0,0,0];\r\n    uint8[10] traitNumbers_2 =[1,1,1,2,0,0,0,0,0,0];\r\n    uint8[10] traitNumbers_3 =[1,4,1,4,1,4,1,0,0,0];\r\n    uint8[10] traitNumbers_4 =[1,1,1,1,1,1,1,1,0,0];\r\n    uint8[10] traitNumbers_5 =[1,7,11,3,2,1,0,0,0,0];\r\n    uint8[10] traitNumbers_6 =[2,2,6,2,5,1,3,0,0,0];\r\n    uint8[10] traitNumbers_7 =[16,5,34,15,2,0,0,0,0,0];\r\n    uint8[10] traitNumbers_8 =[8,8,24,28,20,40,24,9,5,0];\r\n    uint8[10] traitNumbers_9 =[1,2,2,4,0,0,0,0,0,0];\r\n    uint8[10] traitNumbers_10 =[1,4,1,6,3,4,1,0,0,0];\r\n    uint8[10] traitNumbers_11 =[1,3,4,1,1,2,0,0,0,0];\r\n    uint8[10] traitNumbers_12 =[1,1,2,1,0,0,0,0,0,0];\r\n    uint8[10] traitNumbers_13 =[6,4,2,1,0,0,0,0,0,0];\r\n    uint8[10] traitNumbers_14 =[6,2,2,1,0,0,0,0,0,0];\r\n    uint8[10] traitNumbers_15 =[1,5,9,4,2,0,0,0,0,0];\r\n    uint8[10] traitNumbers_16 =[1,10,12,1,12,0,0,0,0,0];\r\n    uint8[10] traitNumbers_17 =[1,10,8,2,4,0,0,0,0,0];\r\n    uint8[10] traitNumbers_18 =[1,3,3,7,19,6,2,0,0,0];    \r\n    uint8[10] traitNumbers_19 =[1,10,4,6,2,2,10,3,0,0];\r\n\r\n    string private _baseURIPrefix = \"https://metagirlfriends.com/api/metadata/\";\r\n    string private _baseURISuffix = \"\";\r\n    address private signerAddress = 0x77bFCca6F45B07047a34A31885Af86F11033665B;\r\n    address private treasury = 0xAb22AD2eDF9774C4aAe550165397Ebc6050a1f4E;\r\n    address private dev1;\r\n    address private dev2 = 0x353d285681458962eD5830672cbDeFcBB9b888A7;\r\n\r\n    constructor () ERC721('Meta Girlfriends', 'MG') {\r\n        _transferOwnership(treasury);\r\n        dev1 = _msgSender();\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256){\r\n        return tokensMinted - tokensBurnt;\r\n    }\r\n\r\n    // ========================== Girlfriends generation  ==============================    \r\n\r\n    /*\r\n    * @dev Stacks an array of uint8 < 1000 into one big uint256 uintTraits\r\n    */    \r\n    function charsToUint(uint8[20] memory chars) public pure returns (uint256 uintTraits){\r\n        for(uint i=0; i<20; i++){\r\n            uintTraits += chars[19-i]*(1000**i);\r\n        }\r\n    }\r\n\r\n    /*\r\n    * @dev Unstacks an array of uint8 < 1000 from one big uintTraits\r\n    */    \r\n    function uintToChars(uint256 uintTraits) public pure returns(uint8[20] memory chars){\r\n        for(uint i=0; i<20; i++){\r\n            chars[i] = uint8( uintTraits/(1000**(19-i)) );\r\n            uintTraits -= chars[i]*(1000**(19-i));\r\n        }\r\n    }    \r\n\r\n    function _concatBytes(bytes1 u1, bytes1 u2) internal pure returns (uint16) {\r\n        return uint16(uint8(u1)) << 8 | uint16(uint8(u2));\r\n    }\r\n\r\n    function _pseudoRandomHash(uint nonce1, uint nonce2) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(nonce1.toString(), nonce2.toString(), 'pseudoRandomHashing'));\r\n    }\r\n\r\n    function _randomTrait(\r\n        uint16 seed, \r\n        uint16[10] memory traitQuantities,\r\n        uint8[10] memory traitNumbers\r\n    ) internal pure returns (uint8) {\r\n        seed = uint16(uint256(seed)*maxSupply/uint256(0xFFFF));\r\n        uint16 sum;\r\n        uint8 traitIndex;\r\n        for(uint8 i=0; i<10; i++){\r\n            for(uint8 j=0; j<traitNumbers[i]; j++){\r\n                sum += traitQuantities[i];\r\n                if (sum >0 && seed <= sum){return traitIndex;}\r\n                traitIndex++;\r\n            }\r\n        }\r\n        revert('MG: traitQuantities do not sum up to maxSupply');\r\n    }\r\n\r\n    // check if hair traits allows hats\r\n    function _hairAllowsHat(uint8 t8, uint8 t19) internal pure returns (bool){\r\n        return !(( (t8>=16 && t8<=31) || (t8>=64 && t8<=79) || (t8>=96 && t8<=119) || (t8>=136 && t8<=151) || (t8>=152 && t8<=157) ) && ((t19>=1 && t19<=10) || t19==32) );\r\n    }\r\n\r\n    function _generateGirlFriend(uint256 tokenId) internal view returns (uint256) {\r\n        bytes32 hash = _pseudoRandomHash(tokenId, 1);\r\n\r\n        uint8[20] memory traits;\r\n        \r\n        traits[0] = _randomTrait( _concatBytes(hash[0], hash[1]), traitQuantities_0, traitNumbers_0); // Background\r\n        traits[1] = _randomTrait( _concatBytes(hash[2], hash[3]), traitQuantities_1, traitNumbers_1); // Tail\r\n        traits[2] = _randomTrait( _concatBytes(hash[4], hash[5]), traitQuantities_2,traitNumbers_2); // Back\r\n        traits[3] = _randomTrait( _concatBytes(hash[6], hash[7]), traitQuantities_3, traitNumbers_3); // Skin\r\n        traits[4] = _randomTrait( _concatBytes(hash[8], hash[9]), traitQuantities_4, traitNumbers_4); // Vag\r\n        traits[5] = _randomTrait( _concatBytes(hash[10], hash[11]), traitQuantities_5, traitNumbers_5); // Tattoos\r\n        traits[6] = _randomTrait( _concatBytes(hash[12], hash[13]), traitQuantities_6, traitNumbers_6); // Eyes\r\n        traits[7] = _randomTrait( _concatBytes(hash[14], hash[15]), traitQuantities_7, traitNumbers_7); // Mouth\r\n        traits[8] = _randomTrait( _concatBytes(hash[16], hash[17]), traitQuantities_8, traitNumbers_8); // Hair\r\n        traits[9] = _randomTrait( _concatBytes(hash[18], hash[19]), traitQuantities_9, traitNumbers_9); // Piercings\r\n        traits[10] = _randomTrait( _concatBytes(hash[20], hash[21]), traitQuantities_10, traitNumbers_10); // Face\r\n        traits[11] = _randomTrait( _concatBytes(hash[22], hash[23]), traitQuantities_11, traitNumbers_11); // Neck\r\n        traits[12] = _randomTrait( _concatBytes(hash[24], hash[25]), traitQuantities_12, traitNumbers_12); // Earrings\r\n        traits[13] = _randomTrait( _concatBytes(hash[26], hash[27]), traitQuantities_13, traitNumbers_13); // Panties\r\n        traits[14] = _randomTrait( _concatBytes(hash[28], hash[29]), traitQuantities_14, traitNumbers_14); // Bra\r\n        traits[15] = _randomTrait( _concatBytes(hash[30], hash[31]), traitQuantities_15, traitNumbers_15); // Shoes\r\n\r\n        hash = _pseudoRandomHash(tokenId, 2);\r\n        // deal with incompatible traits : full suit vs top+bottom\r\n        if(uint8(hash[8])>=128){\r\n            traits[16] = _randomTrait( _concatBytes(hash[0], hash[1]), traitQuantities_16, traitNumbers_16); // Full outfit\r\n        }else{\r\n            traits[17] = _randomTrait( _concatBytes(hash[2], hash[3]), traitQuantities_17, traitNumbers_17); // Clothing bottom\r\n            traits[18] = _randomTrait( _concatBytes(hash[4], hash[5]), traitQuantities_18, traitNumbers_18); // Clothing top    \r\n        }\r\n        traits[19] = _randomTrait( _concatBytes(hash[6], hash[7]), traitQuantities_19, traitNumbers_19); // Head\r\n\r\n        // deal with incompatible traits : hairs prevent hat\r\n        if(!_hairAllowsHat(traits[8], traits[19])){\r\n            traits[19]=0;\r\n        }\r\n\r\n        return charsToUint(traits);\r\n    }\r\n\r\n    function _createGirlFriend(uint256 tokenId) internal {\r\n        uint256 newtraits = _generateGirlFriend(tokenId);\r\n        gftraits[tokenId] = newtraits;\r\n        levels[tokenId-1]=1;\r\n        traitsToId[newtraits] = tokenId;\r\n        _safeMint(_msgSender(), tokenId);\r\n        emit TokenUpdated(tokenId, 0, newtraits, 0, 0);\r\n    }\r\n\r\n    function getTraits(uint256 tokenId) external view returns (uint256){\r\n        require(_exists(tokenId), 'MG: non existent tokenId');\r\n        return gftraits[tokenId];\r\n    }\r\n\r\n    function getTraitArray(uint256 tokenId) public view returns (uint8[20] memory){\r\n        require(_exists(tokenId), 'MG: non existent tokenId');\r\n        return uintToChars(gftraits[tokenId]);\r\n    }\r\n\r\n    function getLevel(uint256 tokenId) external view returns (uint16){\r\n        require(_exists(tokenId), 'MG: non existent tokenId');        \r\n        return levels[tokenId-1]; \r\n    }\r\n\r\n    function _checkTraitCompatibility(uint8[20] memory traitArray) internal pure{\r\n        if( traitArray[16] == 0 ){\r\n            require( traitArray[17]>0 && traitArray[18]>0, \"MG: Forbidden trait\");\r\n        }else{\r\n            require( traitArray[17]==0 && traitArray[18]==0, \"MG: Forbidden trait\");\r\n        }\r\n        require(_hairAllowsHat(traitArray[8], traitArray[19]), \"MG: Incompatible trait\");        \r\n    }\r\n\r\n    function combineGirlfriends(uint256 gfId1, uint256 gfId2, uint256 newId, uint8[20] memory traitArray) external {\r\n        require(combineEnabled, \"MG: Combining GirlFriends is not enabled\");\r\n        require( ownerOf(gfId1) == _msgSender() && ownerOf(gfId2) == _msgSender(), \"MG: Must own these GirlFriends\");\r\n\r\n        require(gfId1 == newId || gfId2 == newId, \"MG: Invalid ID\");\r\n\r\n        uint256 gf1UintTraits = gftraits[gfId1];\r\n        uint256 gf2UintTraits = gftraits[gfId2];\r\n\r\n        uint8[20] memory gf1traits = uintToChars(gf1UintTraits);\r\n        uint8[20] memory gf2traits = uintToChars(gf2UintTraits);\r\n\r\n        for(uint8 i=0; i<20; i++){\r\n            require(gf1traits[i] == traitArray[i] || gf2traits[i] == traitArray[i], \"MG: Invalid trait\");\r\n        }\r\n\r\n        _checkTraitCompatibility(traitArray);\r\n\r\n        uint256 uintTraits = charsToUint(traitArray);\r\n\r\n        require(traitsToId[uintTraits] == 0, \"MG: This trait combination already exists\");\r\n        traitsToId[uintTraits] = newId;\r\n\r\n        levels[newId-1] = levels[gfId1-1] > levels[gfId2-1] ? levels[gfId1-1] + 1 : levels[gfId2-1] + 1;\r\n\r\n        emit TokenUpdated( newId, gftraits[newId], uintTraits, gfId1, gfId2 );\r\n\r\n        gftraits[newId] = uintTraits;\r\n\r\n        _burn( (newId == gfId1)? gfId2: gfId1 );\r\n        tokensBurnt++;\r\n\r\n        delete traitsToId[gf1UintTraits];\r\n        delete traitsToId[gf2UintTraits];\r\n    }  \r\n\r\n    // ========================== Minting ==============================\r\n\r\n\r\n    function _mintQuantity(uint256 quantity) internal {\r\n        for (uint i = 0; i < quantity; i++) {\r\n            _createGirlFriend(tokensMinted+i+1);            \r\n        }\r\n        tokensMinted += quantity;\r\n    }\r\n\r\n    // owner can mint up to giveAwayCount tokens for giveaways\r\n    function mintForGiveaways(uint256 quantity) external onlyOwner {\r\n        require(quantity > 0, \"MG: Invalid quantity\");\r\n        require(tokensMinted+quantity <= maxSupply - tokensReserved, \"MG: Max supply exceeded\");\r\n        require(giveAwaysReserved+quantity <= giveAwayCount, \"MG: givaway count exceeded\");\r\n        giveAwaysReserved += quantity;            \r\n\r\n        _mintQuantity(quantity);\r\n    }\r\n\r\n    function _mint(uint256 quantity) internal {\r\n        require(quantity > 0, \"MG: Invalid quantity\");        \r\n\r\n        require(tokensMinted+quantity <= maxSupply - tokensReserved, \"MG: Max supply exceeded\");\r\n        require(quantity <= buyLimit, \"MG: Buy limit per txn exceeded\");\r\n        require(price*quantity == msg.value, \"MG: invalid price\");\r\n\r\n        // No eth stays on contract, they go directly to treasury\r\n        payable(treasury).transfer(msg.value);\r\n\r\n        _mintQuantity(quantity);\r\n    }  \r\n\r\n    function _hashMaxCount(address sender, uint8 maxCount, string memory nonce) internal pure returns(bytes32) {\r\n        return keccak256(abi.encodePacked( \"\\x19Ethereum Signed Message:\\n32\", keccak256(abi.encodePacked(sender, maxCount, nonce))));         \r\n    }\r\n\r\n    function presaleMint( uint256 quantity, uint8 v, bytes32 r, bytes32 s, uint8 maxCount, string memory nonce) external payable {\r\n\r\n        require(mintingEnabled && whitelistEnabled, \"MG: Presale minting disabled\"); \r\n\r\n        // verify ECDSA signature for parameters maxCount\r\n        require(signerAddress == ecrecover( _hashMaxCount( _msgSender(), maxCount, nonce) , v, r, s), \"MG: invalid hash or signature\");\r\n        require(maxCount <= 10, \"MG: maxCount must be <= 10\");\r\n\r\n        require( balanceOf(_msgSender())+quantity <= uint256(maxCount), \"MG: White list count exceeded\");\r\n        _mint(quantity);\r\n    }\r\n\r\n    function publicMint(uint256 quantity) external payable {\r\n        require(mintingEnabled && !whitelistEnabled, \"MG: Public minting disabled\"); \r\n        // Prevent minting from smart contract\r\n        require(_msgSender() == tx.origin, \"MG: not EOA\");\r\n        _mint(quantity);\r\n    }  \r\n\r\n    function reserve(uint256 quantity) external payable {\r\n        require(mintingEnabled && !whitelistEnabled, \"MG: Public minting disabled\"); \r\n        require(quantity > 0, \"MG: Invalid quantity\");\r\n\r\n        require(tokensMinted+quantity <= maxSupply - tokensReserved, \"MG: Max supply exceeded\");\r\n        require(reservedCount[_msgSender()]+quantity <= buyLimit, \"MG: Maximum reservations exceeded\");        \r\n        require(price*quantity == msg.value, \"MG: invalid price\");\r\n\r\n        // Prevent minting from smart contract\r\n        require(_msgSender() == tx.origin, \"MG: not EOA\");\r\n\r\n        // No eth stays on contract, they go directly to treasury\r\n        payable(treasury).transfer(msg.value);        \r\n\r\n        tokensReserved += quantity;\r\n        reservedCount[_msgSender()] += uint16(quantity);\r\n    }\r\n\r\n\r\n    function claim() external {\r\n        require(reservedCount[_msgSender()]>0, \"MG: Nothing to claim\");\r\n\r\n        _mintQuantity(reservedCount[_msgSender()]);\r\n        tokensReserved -= reservedCount[_msgSender()];\r\n        reservedCount[_msgSender()] = 0;\r\n    }\r\n\r\n\r\n    // ========================== Other ==============================\r\n\r\n    function withdraw() external onlyOwner{\r\n        payable(_msgSender()).transfer(address(this).balance);\r\n    }\r\n\r\n    /*\r\n    * @dev Gives access to dev or owner only\r\n    */\r\n    modifier devOrOwner() {\r\n        _devOrOwner();\r\n        _;\r\n    }\r\n\r\n    function _devOrOwner() internal view {\r\n        require( (owner()==_msgSender())||(dev1==_msgSender())||(dev2==_msgSender()), \"MG: Signer is not dev nor owner\");\r\n    }\r\n\r\n    function setDevs(address newDev1, address newDev2) external onlyOwner{\r\n        dev1 = newDev1;\r\n        dev2 = newDev2;\r\n    } \r\n\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n        return bytes(_baseURIPrefix).length > 0 ? string(abi.encodePacked(_baseURIPrefix, tokenId.toString(), _baseURISuffix)) : \"\";\r\n    }\r\n\r\n    function setBaseURI(string memory newUriPrefix, string memory newUriSuffix) external devOrOwner{\r\n        _baseURIPrefix = newUriPrefix;\r\n        _baseURISuffix = newUriSuffix;\r\n        emit BaseURIChanged(newUriPrefix, newUriSuffix);\r\n    }\r\n\r\n    function toggleWhitelist() external devOrOwner{\r\n        whitelistEnabled = !whitelistEnabled;\r\n    }  \r\n\r\n    function setPrice(uint256 newPrice) external devOrOwner{\r\n        price = newPrice;\r\n        emit PriceChanged(newPrice);\r\n    } \r\n\r\n    function setBuyLimit(uint256 newBuyLimit) external devOrOwner{\r\n        buyLimit = newBuyLimit;\r\n    }\r\n\r\n    function setSigner(address newSigner) external devOrOwner{\r\n        signerAddress = newSigner;\r\n    }\r\n\r\n    function toggleMinting() external devOrOwner{\r\n        mintingEnabled = !mintingEnabled;\r\n    }\r\n\r\n    function toggleCombining() external devOrOwner{\r\n        combineEnabled = !combineEnabled;\r\n    } \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newUriPrefix\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newUriSuffix\",\"type\":\"string\"}],\"name\":\"BaseURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldtraits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newtraits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"parent1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"parent2\",\"type\":\"uint256\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[20]\",\"name\":\"chars\",\"type\":\"uint8[20]\"}],\"name\":\"charsToUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"uintTraits\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"combineEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gfId1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gfId2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[20]\",\"name\":\"traitArray\",\"type\":\"uint8[20]\"}],\"name\":\"combineGirlfriends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTraitArray\",\"outputs\":[{\"internalType\":\"uint8[20]\",\"name\":\"\",\"type\":\"uint8[20]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTraits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giveAwayCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giveAwaysReserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mintForGiveaways\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"maxCount\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"nonce\",\"type\":\"string\"}],\"name\":\"presaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"reserve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reservedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUriPrefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newUriSuffix\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyLimit\",\"type\":\"uint256\"}],\"name\":\"setBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDev1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDev2\",\"type\":\"address\"}],\"name\":\"setDevs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleCombining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensBurnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensReserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uintTraits\",\"type\":\"uint256\"}],\"name\":\"uintToChars\",\"outputs\":[{\"internalType\":\"uint8[20]\",\"name\":\"chars\",\"type\":\"uint8[20]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MetaGirlfriends","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d5e0de9c6a94dec904371e2033299fabdaa039fc5e07bb77d869f7b88e459650"}]}