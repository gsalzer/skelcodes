{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CityParkArt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./CityParkUtils.sol\\\";\\n\\nlibrary CityParkArt {\\n\\n    using SafeMath for uint16;\\n    using Strings for uint256;\\n    using Strings for uint8;\\n    using Strings for uint16;\\n\\n    function _generateFirstTriangle(CityParkUtils.ColorXY memory colorXY) private pure returns (string memory) {\\n        return string(abi.encodePacked( \\n            \\\"<polygon points='\\\",\\n            (colorXY.x-50).toString(),\\n            \\\",\\\",\\n            colorXY.y.toString(),\\n            \\\", \\\",\\n            (colorXY.x+25).toString(),\\n            \\\",\\\",\\n            (colorXY.y-150).toString(),\\n            \\\", \\\",\\n            (colorXY.x+100).toString(),\\n            \\\",\\\",\\n            colorXY.y.toString(),\\n            \\\"' style='fill:\\\",\\n            colorXY.color,\\n            \\\"'/>\\\"\\n        ));\\n    }\\n\\n    function _generateSecondTriangle(CityParkUtils.ColorXY memory colorXY) private pure returns (string memory) {\\n        return string(abi.encodePacked( \\n            \\\"<polygon points='\\\",\\n            (colorXY.x-70).toString(),\\n            \\\",\\\",\\n            (colorXY.y+80).toString(),\\n            \\\", \\\",\\n            (colorXY.x+25).toString(),\\n            \\\",\\\",\\n            (colorXY.y-70).toString(),\\n            \\\", \\\",\\n            (colorXY.x+120).toString(),\\n            \\\",\\\",\\n            (colorXY.y+80).toString(),\\n            \\\"' style='fill:\\\",\\n            colorXY.color,\\n            \\\"'/>\\\"\\n        ));\\n    }\\n\\n    function _generateTreeTriangles(CityParkUtils.ColorXY memory colorXY) private pure returns (string memory) {\\n      return string(abi.encodePacked(\\n            _generateFirstTriangle(colorXY),\\n            _generateSecondTriangle(colorXY)\\n      ));\\n    }\\n\\n    function _generateTrees(CityParkUtils.Art memory artData) public pure returns (string memory) {\\n        string memory trees = '';\\n        for (uint i = 0; i < artData.numTrees; i++) {\\n            CityParkUtils.ColorXY memory colorXY = CityParkUtils.ColorXY({\\n                x: CityParkUtils.seededRandom(80,790,i*i,artData),\\n                y: CityParkUtils.seededRandom(150,500,i*i+1,artData),\\n                color: artData.overrideWhite ? CityParkUtils.getBWColor(i*2+3,artData) : CityParkUtils.getColor(i*2+3,artData)\\n            });\\n \\n          trees = string(abi.encodePacked(\\n              trees,\\n              \\\"<rect width='50' height='200' x='\\\",\\n              colorXY.x.toString(),\\n              \\\"' y='\\\",\\n              colorXY.y.toString(),\\n              \\\"'\\\",\\n              \\\" style='fill:\\\",\\n              colorXY.color,\\n              \\\"'/>\\\",\\n              _generateTreeTriangles(colorXY)\\n            ));\\n        }\\n\\n        return trees;\\n    }\\n\\n    function _generateWindow(uint x, uint y, string memory color) private pure returns (string memory) {\\n        return string(abi.encodePacked(\\n            \\\"<circle cx='\\\",\\n            x.toString(),\\n            \\\"' cy='\\\",\\n            y.toString(),\\n            \\\"' r='15' style='fill:\\\",\\n            color,\\n            \\\"' />\\\"\\n        ));\\n    }\\n\\n    function _generateWindows(CityParkUtils.Art memory artData, CityParkUtils.ColorXY memory colorXY) private pure returns (string memory) {\\n        string memory wc = CityParkUtils.getColor(artData.randomSeed+3, artData);\\n        return string(abi.encodePacked(\\n            _generateWindow(colorXY.x+80,colorXY.y,wc),\\n            _generateWindow(colorXY.x-80,colorXY.y,wc),\\n            _generateWindow(colorXY.x,colorXY.y,wc)\\n        ));\\n    }\\n\\n    function _generateUFO(CityParkUtils.Art memory artData) public pure returns (string memory) {\\n        CityParkUtils.ColorXY memory colorXY = CityParkUtils.ColorXY({\\n            x: CityParkUtils.seededRandom(160,680,6,artData),\\n            y: CityParkUtils.seededRandom(60,300,9,artData),\\n            color: artData.overrideWhite ? CityParkUtils.getBWColor(69420,artData) : CityParkUtils.getColor(69420,artData)\\n        });\\n\\n        return string(abi.encodePacked(\\n            \\\"<ellipse rx='50' ry='80' cx='\\\",\\n            colorXY.x.toString(),\\n            \\\"' cy='\\\",\\n            colorXY.y.toString(),\\n            \\\"'\\\",\\n            \\\" style='fill:\\\",\\n            colorXY.color,\\n            \\\";stroke-width:7;stroke:black'/>\\\",\\n            \\\"<ellipse rx='150' ry='50' cx='\\\",\\n            colorXY.x.toString(),\\n            \\\"' cy='\\\",\\n            colorXY.y.toString(),\\n            \\\"'\\\",\\n            \\\" style='fill:\\\",\\n            colorXY.color,\\n            \\\";stroke-width:3;stroke:black'/>\\\",\\n            \\\"<ellipse rx='50' ry='80' cx='\\\",\\n            colorXY.x.toString(),\\n            \\\"' cy='\\\",\\n            colorXY.y.toString(),\\n            \\\"'\\\",\\n            \\\" style='fill:\\\",\\n            colorXY.color,\\n            \\\"'/>\\\",\\n            _generateWindows(artData, colorXY)\\n        ));\\n    }\\n\\n    function _generateSunLines(CityParkUtils.ColorXY memory colorXY) private pure returns (string memory) {\\n        string memory sunLines = '';\\n        for (uint16 i = 0; i < 8; i++) {\\n            sunLines = string(abi.encodePacked(\\n                sunLines,\\n                _generateSunLine(colorXY, uint16(i.mul(45)))\\n            ));\\n        }\\n        return sunLines;\\n    }\\n\\n    function _generateSunLine(CityParkUtils.ColorXY memory colorXY, uint16 rotate) private pure returns (string memory) {\\n      return string(abi.encodePacked(\\n            \\\"<path stroke='\\\",\\n            colorXY.color,\\n            \\\"' style='transform:rotate(\\\",\\n            rotate.toString(),\\n            \\\"deg);transform-origin:\\\",\\n            colorXY.x.toString(),\\n            \\\"px -\\\",\\n            colorXY.y.toString(),\\n            \\\"px' d='M\\\",\\n            colorXY.x.toString(),\\n            \\\" -\\\",\\n            (colorXY.y+65).toString(),\\n            \\\"V -\\\",\\n            (colorXY.y+105).toString(),\\n            \\\"' stroke-width='25' />\\\"\\n      ));\\n    }\\n\\n    function _generateSun(CityParkUtils.Art memory artData) public pure returns (string memory) {\\n        CityParkUtils.ColorXY memory colorXY = CityParkUtils.ColorXY({\\n            x: CityParkUtils.seededRandom(120,760,4,artData),\\n            y: CityParkUtils.seededRandom(0,200,20,artData),\\n            color: artData.overrideWhite ? CityParkUtils.getBWColor(6969,artData) : CityParkUtils.getColor(6969,artData)\\n        });\\n\\n        return string(abi.encodePacked(\\n            \\\"<circle  r='50' cx='\\\",\\n            colorXY.x.toString(),\\n            \\\"' cy='-\\\",\\n            colorXY.y.toString(),\\n            \\\"' style='fill:\\\",\\n            colorXY.color,\\n            \\\"'/>\\\",\\n            _generateSunLines(colorXY)\\n        ));\\n    }\\n\\n    function _generateRug(CityParkUtils.Art memory artData) public pure returns (string memory) {\\n        uint randDegrees =  CityParkUtils.seededRandom(0, 90, 199, artData);\\n        return string(abi.encodePacked(\\n            \\\"<rect width='1200' height='1500' x='600' y='-460' style='fill:\\\",\\n            artData.overrideWhite ? CityParkUtils.getBWColor(9876,artData) : CityParkUtils.getColor(9876,artData),\\n            \\\";stroke-width:3;stroke:black' transform='rotate(\\\",\\n            randDegrees.toString(),\\n            \\\")'/>\\\",\\n            _generateStripes(artData, string(abi.encodePacked(\\\"-\\\", (90-randDegrees).toString())))\\n        ));\\n    }\\n\\n    function _generateStripes(CityParkUtils.Art memory artData, string memory oppRotateStr) private pure returns (string memory) {\\n        string memory stripes = '';\\n        uint numStripes = CityParkUtils.seededRandom(1, 4, 666, artData);\\n        for (uint i = 0; i < numStripes; i++) {\\n            uint randomPlace = CityParkUtils.seededRandom(100, 1100, i*2+3, artData);\\n            string memory xString;\\n            if (randomPlace > 600) {\\n                xString = string(abi.encodePacked(\\\"-\\\", (randomPlace-600).toString()));\\n            } else {\\n                xString = (600-randomPlace).toString();\\n            }\\n\\n            stripes = string(abi.encodePacked(\\n                stripes,\\n                \\\"<rect width='50' height='1500' x='\\\",\\n                xString,\\n                \\\"' y='600'\\\",\\n                \\\" style='fill:\\\",\\n                CityParkUtils.getColor(i*i+3,artData),\\n                \\\";stroke-width:3;stroke:black' transform='rotate(\\\",\\n                oppRotateStr,\\n                \\\")'/>\\\"\\n            ));\\n        }\\n        return stripes;\\n    }\\n\\n    function _generateAllBricks(CityParkUtils.Art memory artData) public pure returns (string memory) {\\n        uint numBrickStructures = CityParkUtils.seededRandom(1,3,5555555,artData);\\n        string memory allBricks = '';\\n        for (uint i = 0; i < numBrickStructures; i++) {\\n            bool xPos =  CityParkUtils.seededRandom(0,2,i*i+69,artData) > 1;\\n            uint randX = CityParkUtils.seededRandom(0,300,i*i+888,artData);\\n\\n            string memory xString;\\n            if (xPos) {\\n                xString = randX.toString();\\n            } else {\\n                xString = string(abi.encodePacked(\\\"-\\\", randX.toString()));\\n            }\\n\\n            allBricks = string(abi.encodePacked(\\n                allBricks,\\n                \\\"<g transform='translate(\\\",\\n                xString,\\n                \\\",\\\",\\n                CityParkUtils.seededRandom(0,600,i*i+777,artData).toString(),\\n                \\\")'>\\\",\\n                _generateBricks(artData, i)\\n            ));\\n        }\\n        return allBricks;\\n    }\\n\\n    function _generateBricks(CityParkUtils.Art memory artData, uint rand) private pure returns (string memory) {\\n        string memory bricks = '';\\n        CityParkUtils.ColorXY memory colorXY = CityParkUtils.ColorXY({\\n            x: 300,\\n            y: 600,\\n            color: artData.overrideWhite ? CityParkUtils.getBWColor(rand+6, artData) : CityParkUtils.getColor(rand+9, artData)\\n        });\\n        uint numBricks = CityParkUtils.seededRandom(1,10,rand*2,artData);\\n        uint height = CityParkUtils.seededRandom(0,10,rand*3+1,artData);\\n        if (height % 2 == 0) {\\n            height++;\\n        }\\n\\n        // Single half brick beginning\\n        for (uint i = 0; i < height / 2 + 1; i++) {\\n            bricks = string(abi.encodePacked(\\n                bricks,\\n                \\\"<rect width='50' height='40' x='300' y='\\\",\\n                (640+(80*i)).toString(),\\n                \\\"' style='fill:\\\",\\n                colorXY.color,\\n                \\\";stroke-width:3;stroke:black' transform='skewY(-10)'/>\\\"\\n            ));\\n        }\\n\\n        // Main brick faces\\n        for (uint i = 0; i < numBricks; i++) {\\n            for (uint j = 0; j < height / 2 + 1; j++) {\\n\\n                // Top row, full row\\n                bricks = string(abi.encodePacked(\\n                    bricks,\\n                    \\\"<rect width='100' height='40' x='\\\",\\n                    (300+(i*100)).toString(),\\n                    \\\"' y='\\\",\\n                    (600+(80*j)).toString(),\\n                    \\\"' style='fill:\\\",\\n                    colorXY.color,\\n                    \\\";stroke-width:3;stroke:black' transform='skewY(-10)'/>\\\"\\n                ));\\n            }\\n\\n            // Handle negative x value\\n            uint baseXPos = 495;\\n            uint xLocPos;\\n            uint xLocNeg;\\n            string memory xString;\\n            if (i >= 5) {\\n                xLocNeg = 5 + ((i-5)*100);\\n                xString = xLocNeg.toString();\\n            } else {\\n                xLocPos = baseXPos - (i*100);\\n                xString = string(abi.encodePacked(\\\"-\\\", xLocPos.toString()));\\n            }\\n\\n            // Top face\\n            bricks = string(abi.encodePacked(\\n                bricks,\\n                \\\"<rect width='100' height='40' x='\\\",\\n                xString,\\n                \\\"' y='560' style='fill:\\\",\\n                colorXY.color,\\n                \\\";stroke-width:3;stroke:black' transform='skewY(-10) skewX(53)'/>\\\"\\n            ));\\n\\n            if (i != numBricks-1) {\\n                for (uint j = 0; j < height / 2 + 1; j++) {\\n                    bricks = string(abi.encodePacked(\\n                        bricks,\\n                        \\\"<rect width='100' height='40' x='\\\",\\n                        (350+(i*100)).toString(),\\n                        \\\"' y='\\\",\\n                        (640+(80*j)).toString(),\\n                        \\\"' style='fill:\\\",\\n                        colorXY.color,\\n                        \\\";stroke-width:3;stroke:black' transform='skewY(-10)'/>\\\"\\n                    ));\\n                }\\n            }\\n        }\\n\\n        // Single half brick end\\n        for (uint i = 0; i < height / 2 + 1; i++) {\\n            bricks = string(abi.encodePacked(\\n                bricks,\\n                \\\"<rect width='50' height='40' x='\\\",\\n                (250+(numBricks*100)).toString(),\\n                \\\"' y='\\\",\\n                (640+(80*i)).toString(),\\n                \\\"' style='fill:\\\",\\n                colorXY.color,\\n                \\\";stroke-width:3;stroke:black' transform='skewY(-10)'/>\\\"\\n            ));\\n        }\\n\\n\\n        // Brick left face\\n        for (uint i = 0; i < height+1; i++) {\\n            string memory yString = '';\\n            if (i >= 6) {\\n                yString = (600+(15+((i-6)*40))).toString();\\n            } else {\\n                yString = (600-(225-(i*40))).toString();\\n            }\\n\\n\\n            bricks = string(abi.encodePacked(\\n                bricks,\\n                \\\"<rect width='50' height='40' x='250' y='\\\",\\n                yString,\\n                \\\"' style='fill:\\\",\\n                colorXY.color,\\n                \\\";stroke-width:3;stroke:black' transform='skewY(30)'/>\\\"\\n            ));\\n        }\\n\\n        bricks = string(abi.encodePacked(bricks, '</g>'));\\n        return bricks;\\n    }\\n\\n    function _generateFence(CityParkUtils.Art memory artData, uint rand) private pure returns (string memory) {\\n        string memory fence = '';\\n        uint howWide = CityParkUtils.seededRandom(1,7,rand+69,artData);\\n\\n        for (uint i = 0; i < 3; i++) {\\n            fence = string(abi.encodePacked(\\n                fence,\\n                \\\"<rect width='\\\",\\n                (howWide*100).toString(),\\n                \\\"' height='20' x='275' y='\\\",\\n                (600+(50*i)).toString(),\\n                \\\"' style='fill:white' />\\\"\\n            ));\\n        }\\n\\n        for (uint i = 0; i < howWide; i++) {\\n            uint xStart = 300+(i*100);\\n            fence = string(abi.encodePacked(\\n                fence,\\n                \\\"<rect width='50' height='150' x='\\\",\\n                xStart.toString(),\\n                \\\"' y='600' style='fill:white' />\\\",\\n                \\\"<polygon points='\\\",\\n                xStart.toString(),\\n                \\\",600, \\\",\\n                (xStart+25).toString(),\\n                \\\",550, \\\",\\n                (xStart+50).toString(),\\n                \\\",600' style='fill:white' />\\\"\\n            ));\\n        }\\n\\n        fence = string(abi.encodePacked(fence, '</g>'));\\n        return fence;\\n    }\\n\\n    function _generateAllFences(CityParkUtils.Art memory artData) public pure returns (string memory) {\\n        uint numFenceStructures = CityParkUtils.seededRandom(1,3,333333333,artData);\\n        string memory allFences = '';\\n        for (uint i = 0; i < numFenceStructures; i++) {\\n            bool xPos =  CityParkUtils.seededRandom(0,2,i*i+69,artData) > 1;\\n            uint randX = CityParkUtils.seededRandom(0,300,i*i+888,artData);\\n\\n            string memory xString;\\n            if (xPos) {\\n                xString = randX.toString();\\n            } else {\\n                xString = string(abi.encodePacked(\\\"-\\\", randX.toString()));\\n            }\\n\\n            allFences = string(abi.encodePacked(\\n                allFences,\\n                \\\"<g transform='translate(\\\",\\n                xString,\\n                \\\",\\\",\\n                CityParkUtils.seededRandom(0,300,i*i+777,artData).toString(),\\n                \\\")'>\\\",\\n                _generateFence(artData, i*i)\\n            ));\\n        }\\n        return allFences;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CityParkUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary CityParkUtils {\\n\\n    using SafeMath for uint16;\\n    using Strings for uint256;\\n    using Strings for uint8;\\n    using Strings for uint16;\\n\\n    struct Art {\\n        uint8 numTrees;\\n        bool hasUFO;\\n        bool hasSun;\\n        bool hasFence;\\n        bool hasBricks;\\n        bool overrideWhite;\\n        uint48 randomTimestamp;\\n        uint128 randomDifficulty;\\n        uint256 randomSeed;\\n    }\\n\\n    struct ColorXY {\\n        uint16 x;\\n        uint16 y;\\n        string color;\\n    }\\n\\n    string public constant _imageFooter = \\\"</svg>\\\";\\n    string public constant _borderRect = \\\"<rect width='100%' height='166%' y='-33%' rx='20' style='fill:none;stroke:black;stroke-width:20'></rect>\\\";\\n\\n    function getColor(uint seed, Art memory artData) public pure returns(string memory) {\\n        return ['%23a85dee', '%2323cd73', '%23ef2839', '%230bd2fa', '%23fdd131'][seededRandom(0,5,seed,artData)];\\n    }\\n\\n    function getBWColor(uint seed, Art memory artData) public pure returns(string memory) {\\n        return ['white', '%23e8e8e8', '%23e0e0e0', '%23aeaeae', '%236e6e6e'][seededRandom(0,5,seed,artData)];\\n    }\\n\\n    function _generateHeader(uint seed, Art memory artData) public pure returns (string memory) {\\n        string memory header = \\\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='300' height='500' viewBox='0 0 1000 1000' style='background-color:\\\";\\n        return string(abi.encodePacked(\\n            header,\\n            getColor(seed, artData),\\n            \\\"'><!--You are loved.-->\\\"\\n        ));\\n    }\\n\\n    function _boolToString(bool value) public pure returns (string memory) {\\n        if (value) {\\n            return \\\"True\\\";\\n        } else {\\n            return \\\"False\\\";\\n        }\\n    }\\n\\n    function seededRandom(uint low, uint high, uint seed, Art memory artData) public pure returns (uint16) {\\n        return uint16(uint(uint256(keccak256(abi.encodePacked(seed, uint256(keccak256(abi.encodePacked(artData.randomDifficulty, artData.randomTimestamp, artData.randomSeed)))))))%high + low);\\n    }\\n\\n    function _wrapTrait(string memory trait, string memory value) public pure returns(string memory) {\\n        return string(abi.encodePacked(\\n            '{\\\"trait_type\\\":\\\"',\\n            trait,\\n            '\\\",\\\"value\\\":\\\"',\\n            value,\\n            '\\\"}'\\n        ));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/CityParkUtils.sol\": {\r\n        \"CityParkUtils\": \"0x51fa888bb179b6b715cc9c5d62adbe543244822a\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"numTrees\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hasUFO\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSun\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasFence\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasBricks\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"overrideWhite\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"randomTimestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint128\",\"name\":\"randomDifficulty\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"randomSeed\",\"type\":\"uint256\"}],\"internalType\":\"struct CityParkUtils.Art\",\"name\":\"artData\",\"type\":\"tuple\"}],\"name\":\"_generateAllBricks\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"numTrees\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hasUFO\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSun\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasFence\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasBricks\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"overrideWhite\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"randomTimestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint128\",\"name\":\"randomDifficulty\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"randomSeed\",\"type\":\"uint256\"}],\"internalType\":\"struct CityParkUtils.Art\",\"name\":\"artData\",\"type\":\"tuple\"}],\"name\":\"_generateAllFences\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"numTrees\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hasUFO\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSun\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasFence\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasBricks\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"overrideWhite\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"randomTimestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint128\",\"name\":\"randomDifficulty\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"randomSeed\",\"type\":\"uint256\"}],\"internalType\":\"struct CityParkUtils.Art\",\"name\":\"artData\",\"type\":\"tuple\"}],\"name\":\"_generateRug\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"numTrees\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hasUFO\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSun\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasFence\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasBricks\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"overrideWhite\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"randomTimestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint128\",\"name\":\"randomDifficulty\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"randomSeed\",\"type\":\"uint256\"}],\"internalType\":\"struct CityParkUtils.Art\",\"name\":\"artData\",\"type\":\"tuple\"}],\"name\":\"_generateSun\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"numTrees\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hasUFO\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSun\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasFence\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasBricks\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"overrideWhite\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"randomTimestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint128\",\"name\":\"randomDifficulty\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"randomSeed\",\"type\":\"uint256\"}],\"internalType\":\"struct CityParkUtils.Art\",\"name\":\"artData\",\"type\":\"tuple\"}],\"name\":\"_generateTrees\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"numTrees\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hasUFO\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasSun\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasFence\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasBricks\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"overrideWhite\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"randomTimestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint128\",\"name\":\"randomDifficulty\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"randomSeed\",\"type\":\"uint256\"}],\"internalType\":\"struct CityParkUtils.Art\",\"name\":\"artData\",\"type\":\"tuple\"}],\"name\":\"_generateUFO\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"CityParkArt","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}