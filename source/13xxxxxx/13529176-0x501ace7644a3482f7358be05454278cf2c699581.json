{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SptFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./Governable.sol\\\";\\nimport \\\"./interface/IRegistry.sol\\\";\\nimport \\\"./interface/IPolicyManager.sol\\\";\\nimport \\\"./interface/ISptFarm.sol\\\";\\n\\n\\n/**\\n * @title ISptFarm\\n * @author solace.fi\\n * @notice Rewards [**Policyholders**](/docs/protocol/policy-holder) in [**Options**](../OptionFarming) for staking their [**Policies**](./PolicyManager).\\n *\\n * Over the course of `startTime` to `endTime`, the farm distributes `rewardPerSecond` [**Options**](../OptionFarming) to all farmers split relative to the amount of [**SCP**](../Vault) they have deposited.\\n *\\n * Users can become [**Capital Providers**](/docs/user-guides/capital-provider/cp-role-guide) by depositing **ETH** into the [`Vault`](../Vault), receiving [**SCP**](../Vault) in the process. [**Capital Providers**](/docs/user-guides/capital-provider/cp-role-guide) can then deposit their [**SCP**](../Vault) via [`depositCp()`](#depositcp) or [`depositCpSigned()`](#depositcpsigned). Alternatively users can bypass the [`Vault`](../Vault) and stake their **ETH** via [`depositEth()`](#depositeth).\\n *\\n * Users can withdraw their rewards via [`withdrawRewards()`](#withdrawrewards).\\n *\\n * Users can withdraw their [**SCP**](../Vault) via [`withdrawCp()`](#withdrawcp).\\n *\\n * Note that transferring in **ETH** will mint you shares, but transferring in **WETH** or [**SCP**](../Vault) will not. These must be deposited via functions in this contract. Misplaced funds cannot be rescued.\\n */\\ncontract SptFarm is ISptFarm, ReentrancyGuard, Governable {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /// @notice A unique enumerator that identifies the farm type.\\n    uint256 internal constant _farmType = 3;\\n    /// @notice PolicyManager contract.\\n    IPolicyManager internal _policyManager;\\n    /// @notice FarmController contract.\\n    IFarmController internal _controller;\\n    /// @notice Amount of SOLACE distributed per seconds.\\n    uint256 internal _rewardPerSecond;\\n    /// @notice When the farm will start.\\n    uint256 internal _startTime;\\n    /// @notice When the farm will end.\\n    uint256 internal _endTime;\\n    /// @notice Last time rewards were distributed or farm was updated.\\n    uint256 internal _lastRewardTime;\\n    /// @notice Accumulated rewards per share, times 1e12.\\n    uint256 internal _accRewardPerShare;\\n    /// @notice Value of policys staked by all farmers.\\n    uint256 internal _valueStaked;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 value;         // Value of user provided policys.\\n        uint256 rewardDebt;    // Reward debt. See explanation below.\\n        uint256 unpaidRewards; // Rewards that have not been paid.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of reward token\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.value * _accRewardPerShare) - user.rewardDebt + user.unpaidRewards\\n        //\\n        // Whenever a user deposits or withdraws policies to a farm. Here's what happens:\\n        //   1. The farm's `accRewardPerShare` and `lastRewardTime` gets updated.\\n        //   2. Users pending rewards accumulate in `unpaidRewards`.\\n        //   3. User's `value` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    /// @notice Information about each farmer.\\n    /// @dev user address => user info\\n    mapping(address => UserInfo) internal _userInfo;\\n\\n    // list of tokens deposited by user\\n    mapping(address => EnumerableSet.UintSet) internal _userDeposited;\\n\\n    struct PolicyInfo {\\n        address depositor;\\n        uint256 value;\\n    }\\n\\n    // policy id => policy info\\n    mapping(uint256 => PolicyInfo) internal _policyInfo;\\n\\n    /**\\n     * @notice Constructs the SptFarm.\\n     * @param governance_ The address of the [governor](/docs/protocol/governance).\\n     * @param registry_ Address of the [`Registry`](./Registry) contract.\\n     * @param startTime_ When farming will begin.\\n     * @param endTime_ When farming will end.\\n     */\\n    constructor(\\n        address governance_,\\n        address registry_,\\n        uint256 startTime_,\\n        uint256 endTime_\\n    ) Governable(governance_) {\\n        require(registry_ != address(0x0), \\\"zero address registry\\\");\\n        IRegistry registry = IRegistry(registry_);\\n        address controller_ = registry.farmController();\\n        require(controller_ != address(0x0), \\\"zero address controller\\\");\\n        _controller = IFarmController(controller_);\\n        address policyManager_ = registry.policyManager();\\n        require(policyManager_ != address(0x0), \\\"zero address policymanager\\\");\\n        _policyManager = IPolicyManager(policyManager_);\\n        require(startTime_ <= endTime_, \\\"invalid window\\\");\\n        _startTime = startTime_;\\n        _endTime = endTime_;\\n        _lastRewardTime = Math.max(block.timestamp, startTime_);\\n    }\\n\\n    /***************************************\\n    VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /// @notice A unique enumerator that identifies the farm type.\\n    function farmType() external pure override returns (uint256 farmType_) {\\n        return _farmType;\\n    }\\n\\n    /// @notice [`PolicyManager`](./PolicyManager) contract.\\n    function policyManager() external view override returns (address policyManager_) {\\n        return address(_policyManager);\\n    }\\n\\n    /**\\n     * @notice Returns the count of [**policies**](./PolicyManager) that a user has deposited onto the farm.\\n     * @param user The user to check count for.\\n     * @return count The count of deposited [**policies**](./PolicyManager).\\n     */\\n    function countDeposited(address user) external view override returns (uint256 count) {\\n        return _userDeposited[user].length();\\n    }\\n\\n    /**\\n     * @notice Returns the list of [**policies**](./PolicyManager) that a user has deposited onto the farm and their values.\\n     * @param user The user to list deposited policies.\\n     * @return policyIDs The list of deposited policies.\\n     * @return policyValues The values of the policies.\\n     */\\n    function listDeposited(address user) external view override returns (uint256[] memory policyIDs, uint256[] memory policyValues) {\\n        uint256 length = _userDeposited[user].length();\\n        policyIDs = new uint256[](length);\\n        policyValues = new uint256[](length);\\n        for(uint256 i = 0; i < length; ++i) {\\n            uint256 policyID = _userDeposited[user].at(i);\\n            policyIDs[i] = policyID;\\n            policyValues[i] = _policyInfo[policyID].value;\\n        }\\n        return (policyIDs, policyValues);\\n    }\\n\\n    /**\\n     * @notice Returns the ID of a [**Policies**](./PolicyManager) that a user has deposited onto a farm and its value.\\n     * @param user The user to get policyID for.\\n     * @param index The farm-based index of the policy.\\n     * @return policyID The ID of the deposited [**policy**](./PolicyManager).\\n     * @return policyValue The value of the [**policy**](./PolicyManager).\\n     */\\n    function getDeposited(address user, uint256 index) external view override returns (uint256 policyID, uint256 policyValue) {\\n        policyID = _userDeposited[user].at(index);\\n        policyValue = _policyInfo[policyID].value;\\n        return (policyID, policyValue);\\n    }\\n\\n    /// @notice FarmController contract.\\n    function farmController() external view override returns (address controller_) {\\n        return address(_controller);\\n    }\\n\\n    /// @notice Amount of SOLACE distributed per second.\\n    function rewardPerSecond() external view override returns (uint256) {\\n        return _rewardPerSecond;\\n    }\\n\\n    /// @notice When the farm will start.\\n    function startTime() external view override returns (uint256 timestamp) {\\n        return _startTime;\\n    }\\n\\n    /// @notice When the farm will end.\\n    function endTime() external view override returns (uint256 timestamp) {\\n        return _endTime;\\n    }\\n\\n    /// @notice Last time rewards were distributed or farm was updated.\\n    function lastRewardTime() external view override returns (uint256 timestamp) {\\n        return _lastRewardTime;\\n    }\\n\\n    /// @notice Accumulated rewards per share, times 1e12.\\n    function accRewardPerShare() external view override returns (uint256 acc) {\\n        return _accRewardPerShare;\\n    }\\n\\n    /// @notice The value of [**policies**](./PolicyManager) a user deposited.\\n    function userStaked(address user) external view override returns (uint256 amount) {\\n        return _userInfo[user].value;\\n    }\\n\\n    /// @notice Value of [**policies**](./PolicyManager) staked by all farmers.\\n    function valueStaked() external view override returns (uint256 amount) {\\n        return _valueStaked;\\n    }\\n\\n    /// @notice Information about a deposited policy.\\n    function policyInfo(uint256 policyID) external view override returns (address depositor, uint256 value) {\\n        PolicyInfo storage policyInfo_ = _policyInfo[policyID];\\n        return (policyInfo_.depositor, policyInfo_.value);\\n    }\\n\\n    /**\\n     * @notice Calculates the accumulated balance of [**SOLACE**](./SOLACE) for specified user.\\n     * @param user The user for whom unclaimed rewards will be shown.\\n     * @return reward Total amount of withdrawable rewards.\\n     */\\n    function pendingRewards(address user) external view override returns (uint256 reward) {\\n        // get farmer information\\n        UserInfo storage userInfo_ = _userInfo[user];\\n        // math\\n        uint256 accRewardPerShare_ = _accRewardPerShare;\\n        if (block.timestamp > _lastRewardTime && _valueStaked != 0) {\\n            uint256 tokenReward = getRewardAmountDistributed(_lastRewardTime, block.timestamp);\\n            accRewardPerShare_ += tokenReward * 1e12 / _valueStaked;\\n        }\\n        return userInfo_.value * accRewardPerShare_ / 1e12 - userInfo_.rewardDebt + userInfo_.unpaidRewards;\\n    }\\n\\n    /**\\n     * @notice Calculates the reward amount distributed between two timestamps.\\n     * @param from The start of the period to measure rewards for.\\n     * @param to The end of the period to measure rewards for.\\n     * @return amount The reward amount distributed in the given period.\\n     */\\n    function getRewardAmountDistributed(uint256 from, uint256 to) public view override returns (uint256 amount) {\\n        // validate window\\n        from = Math.max(from, _startTime);\\n        to = Math.min(to, _endTime);\\n        // no reward for negative window\\n        if (from > to) return 0;\\n        return (to - from) * _rewardPerSecond;\\n    }\\n\\n    /***************************************\\n    MUTATOR FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Deposit a [**policy**](./PolicyManager).\\n     * User must `ERC721.approve()` or `ERC721.setApprovalForAll()` first.\\n     * @param policyID The ID of the policy to deposit.\\n     */\\n    function depositPolicy(uint256 policyID) external override {\\n        // pull policy\\n        _policyManager.transferFrom(msg.sender, address(this), policyID);\\n        // accounting\\n        _deposit(msg.sender, policyID);\\n    }\\n\\n    /**\\n     * @notice Deposit a [**policy**](./PolicyManager) using permit.\\n     * @param depositor The depositing user.\\n     * @param policyID The ID of the policy to deposit.\\n     * @param deadline Time the transaction must go through before.\\n     * @param v secp256k1 signature\\n     * @param r secp256k1 signature\\n     * @param s secp256k1 signature\\n     */\\n    function depositPolicySigned(address depositor, uint256 policyID, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external override {\\n        // permit\\n        _policyManager.permit(address(this), policyID, deadline, v, r, s);\\n        // pull policy\\n        _policyManager.transferFrom(depositor, address(this), policyID);\\n        // accounting\\n        _deposit(depositor, policyID);\\n    }\\n\\n    /**\\n     * @notice Deposit multiple [**policies**](./PolicyManager).\\n     * User must `ERC721.approve()` or `ERC721.setApprovalForAll()` first.\\n     * @param policyIDs The IDs of the policies to deposit.\\n     */\\n    function depositPolicyMulti(uint256[] memory policyIDs) external override {\\n        for(uint256 i = 0; i < policyIDs.length; i++) {\\n            uint256 policyID = policyIDs[i];\\n            // pull policy\\n            _policyManager.transferFrom(msg.sender, address(this), policyID);\\n            // accounting\\n            _deposit(msg.sender, policyID);\\n        }\\n    }\\n\\n    /**\\n     * @notice Deposit multiple [**policies**](./PolicyManager) using permit.\\n     * @param depositors The depositing users.\\n     * @param policyIDs The IDs of the policies to deposit.\\n     * @param deadlines Times the transactions must go through before.\\n     * @param vs secp256k1 signatures\\n     * @param rs secp256k1 signatures\\n     * @param ss secp256k1 signatures\\n     */\\n    function depositPolicySignedMulti(address[] memory depositors, uint256[] memory policyIDs, uint256[] memory deadlines, uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss) external override {\\n        require(depositors.length == policyIDs.length && depositors.length == deadlines.length && depositors.length == vs.length && depositors.length == rs.length && depositors.length == ss.length, \\\"length mismatch\\\");\\n        for(uint256 i = 0; i < policyIDs.length; i++) {\\n            uint256 policyID = policyIDs[i];\\n            // permit\\n            _policyManager.permit(address(this), policyID, deadlines[i], vs[i], rs[i], ss[i]);\\n            // pull policy\\n            _policyManager.transferFrom(depositors[i], address(this), policyID);\\n            // accounting\\n            _deposit(depositors[i], policyID);\\n        }\\n    }\\n\\n    /**\\n     * @notice Performs the internal accounting for a deposit.\\n     * @param depositor The depositing user.\\n     * @param policyID The ID of the policy to deposit.\\n     */\\n    function _deposit(address depositor, uint256 policyID) internal {\\n        // get policy\\n        (/* address policyholder */, /* address product */, uint256 coverAmount, uint40 expirationBlock, uint24 price, /* bytes calldata positionDescription */) = _policyManager.getPolicyInfo(policyID);\\n        require(expirationBlock > block.number, \\\"policy is expired\\\");\\n        // harvest and update farm\\n        _harvest(depositor);\\n        // get farmer information\\n        UserInfo storage user = _userInfo[depositor];\\n        // record position\\n        uint256 policyValue = coverAmount * uint256(price); // a multiple of premium per block\\n        PolicyInfo memory policyInfo_ = PolicyInfo({\\n            depositor: depositor,\\n            value: policyValue\\n        });\\n        _policyInfo[policyID] = policyInfo_;\\n        // accounting\\n        user.value += policyValue;\\n        _valueStaked += policyValue;\\n        user.rewardDebt = user.value * _accRewardPerShare / 1e12;\\n        _userDeposited[depositor].add(policyID);\\n        // emit event\\n        emit PolicyDeposited(depositor, policyID);\\n    }\\n\\n    /**\\n     * @notice Withdraw a [**policy**](./PolicyManager).\\n     * Can only withdraw policies you deposited.\\n     * @param policyID The ID of the policy to withdraw.\\n     */\\n    function withdrawPolicy(uint256 policyID) external override {\\n        // harvest and update farm\\n        _harvest(msg.sender);\\n        // get farmer information\\n        UserInfo storage user = _userInfo[msg.sender];\\n        // get policy info\\n        PolicyInfo memory policyInfo_ = _policyInfo[policyID];\\n        // cannot withdraw a policy you didnt deposit\\n        require(policyInfo_.depositor == msg.sender, \\\"not your policy\\\");\\n        // accounting\\n        user.value -= policyInfo_.value;\\n        _valueStaked -= policyInfo_.value;\\n        user.rewardDebt = user.value * _accRewardPerShare / 1e12;\\n        // delete policy info\\n        delete _policyInfo[policyID];\\n        // return staked policy\\n        _userDeposited[msg.sender].remove(policyID);\\n        _policyManager.safeTransferFrom(address(this), msg.sender, policyID);\\n        // emit event\\n        emit PolicyWithdrawn(msg.sender, policyID);\\n    }\\n\\n    /**\\n     * @notice Withdraw multiple [**policies**](./PolicyManager).\\n     * Can only withdraw policies you deposited.\\n     * @param policyIDs The IDs of the policies to withdraw.\\n     */\\n    function withdrawPolicyMulti(uint256[] memory policyIDs) external override {\\n        // harvest and update farm\\n        _harvest(msg.sender);\\n        // get farmer information\\n        UserInfo storage user = _userInfo[msg.sender];\\n        uint256 userValue_ = user.value;\\n        uint256 valueStaked_ = _valueStaked;\\n        for(uint256 i = 0; i < policyIDs.length; i++) {\\n            uint256 policyID = policyIDs[i];\\n            // get policy info\\n            PolicyInfo memory policyInfo_ = _policyInfo[policyID];\\n            // cannot withdraw a policy you didnt deposit\\n            require(policyInfo_.depositor == msg.sender, \\\"not your policy\\\");\\n            // accounting\\n            userValue_ -= policyInfo_.value;\\n            valueStaked_ -= policyInfo_.value;\\n            // delete policy info\\n            delete _policyInfo[policyID];\\n            // return staked policy\\n            _userDeposited[msg.sender].remove(policyID);\\n            _policyManager.safeTransferFrom(address(this), msg.sender, policyID);\\n            // emit event\\n            emit PolicyWithdrawn(msg.sender, policyID);\\n        }\\n        // accounting\\n        user.value = userValue_;\\n        _valueStaked = valueStaked_;\\n        user.rewardDebt = user.value * _accRewardPerShare / 1e12;\\n    }\\n\\n    /**\\n     * @notice Burns expired policies.\\n     * @param policyIDs The list of expired policies.\\n     */\\n    function updateActivePolicies(uint256[] calldata policyIDs) external override {\\n        // update farm\\n        updateFarm();\\n        // for each policy to burn\\n        for(uint256 i = 0; i < policyIDs.length; i++) {\\n            uint256 policyID = policyIDs[i];\\n            // get policy info\\n            PolicyInfo memory policyInfo_ = _policyInfo[policyID];\\n            // if policy is on the farm and policy is expired or burnt\\n            if(policyInfo_.depositor != address(0x0) && !_policyManager.policyIsActive(policyID)) {\\n                // get farmer information\\n                UserInfo storage user = _userInfo[policyInfo_.depositor];\\n                // accounting\\n                user.value -= policyInfo_.value;\\n                _valueStaked -= policyInfo_.value;\\n                user.rewardDebt = user.value * _accRewardPerShare / 1e12;\\n                // delete policy info\\n                delete _policyInfo[policyID];\\n                // remove staked policy\\n                _userDeposited[policyInfo_.depositor].remove(policyID);\\n                // emit event\\n                emit PolicyWithdrawn(address(0x0), policyID);\\n            }\\n        }\\n        // policymanager needs to do its own accounting\\n        _policyManager.updateActivePolicies(policyIDs);\\n    }\\n\\n    /**\\n     * @notice Updates farm information to be up to date to the current time.\\n     */\\n    function updateFarm() public override {\\n        // dont update needlessly\\n        if (block.timestamp <= _lastRewardTime) return;\\n        if (_valueStaked == 0) {\\n            _lastRewardTime = Math.min(block.timestamp, _endTime);\\n            return;\\n        }\\n        // update math\\n        uint256 tokenReward = getRewardAmountDistributed(_lastRewardTime, block.timestamp);\\n        _accRewardPerShare += tokenReward * 1e12 / _valueStaked;\\n        _lastRewardTime = Math.min(block.timestamp, _endTime);\\n    }\\n\\n    /**\\n    * @notice Update farm and accumulate a user's rewards.\\n    * @param user User to process rewards for.\\n    */\\n    function _harvest(address user) internal {\\n        // update farm\\n        updateFarm();\\n        // get farmer information\\n        UserInfo storage userInfo_ = _userInfo[user];\\n        // accumulate unpaid rewards\\n        userInfo_.unpaidRewards = userInfo_.value * _accRewardPerShare / 1e12 - userInfo_.rewardDebt + userInfo_.unpaidRewards;\\n    }\\n\\n    /***************************************\\n    OPTIONS MINING FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Converts the senders unpaid rewards into an [`Option`](./OptionsFarming).\\n     * @return optionID The ID of the newly minted [`Option`](./OptionsFarming).\\n     */\\n    function withdrawRewards() external override nonReentrant returns (uint256 optionID) {\\n        // update farm\\n        _harvest(msg.sender);\\n        // get farmer information\\n        UserInfo storage userInfo_ = _userInfo[msg.sender];\\n        // math\\n        userInfo_.rewardDebt = userInfo_.value * _accRewardPerShare / 1e12;\\n        uint256 unpaidRewards = userInfo_.unpaidRewards;\\n        userInfo_.unpaidRewards = 0;\\n        optionID = _controller.createOption(msg.sender, unpaidRewards);\\n        return optionID;\\n    }\\n\\n    /**\\n     * @notice Withdraw a users rewards without unstaking their policys.\\n     * Can only be called by [`FarmController`](./FarmController).\\n     * @param user User to withdraw rewards for.\\n     * @return rewardAmount The amount of rewards the user earned on this farm.\\n     */\\n    function withdrawRewardsForUser(address user) external override nonReentrant returns (uint256 rewardAmount) {\\n        require(msg.sender == address(_controller), \\\"!farmcontroller\\\");\\n        // update farm\\n        _harvest(user);\\n        // get farmer information\\n        UserInfo storage userInfo_ = _userInfo[user];\\n        // math\\n        userInfo_.rewardDebt = userInfo_.value * _accRewardPerShare / 1e12;\\n        rewardAmount = userInfo_.unpaidRewards;\\n        userInfo_.unpaidRewards = 0;\\n        return rewardAmount;\\n    }\\n\\n    /***************************************\\n    GOVERNANCE FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Sets the amount of [**SOLACE**](./SOLACE) to distribute per second.\\n     * Only affects future rewards.\\n     * Can only be called by [`FarmController`](./FarmController).\\n     * @param rewardPerSecond_ Amount to distribute per second.\\n     */\\n    function setRewards(uint256 rewardPerSecond_) external override {\\n        // can only be called by FarmController contract\\n        require(msg.sender == address(_controller), \\\"!farmcontroller\\\");\\n        // update\\n        updateFarm();\\n        // accounting\\n        _rewardPerSecond = rewardPerSecond_;\\n        emit RewardsSet(rewardPerSecond_);\\n    }\\n\\n    /**\\n     * @notice Sets the farm's end time. Used to extend the duration.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param endTime_ The new end time.\\n     */\\n    function setEnd(uint256 endTime_) external override onlyGovernance {\\n        // accounting\\n        _endTime = endTime_;\\n        // update\\n        updateFarm();\\n        emit FarmEndSet(endTime_);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport \\\"./interface/IGovernable.sol\\\";\\n\\n/**\\n * @title Governable\\n * @author solace.fi\\n * @notice Enforces access control for important functions to [**governor**](/docs/protocol/governance).\\n *\\n * Many contracts contain functionality that should only be accessible to a privileged user. The most common access control pattern is [OpenZeppelin's `Ownable`](https://docs.openzeppelin.com/contracts/4.x/access-control#ownership-and-ownable). We instead use `Governable` with a few key differences:\\n   * - Transferring the governance role is a two step process. The current governance must [`setPendingGovernance(pendingGovernance_)`](#setPendingGovernance) then the new governance must [`acceptGovernance()`](#acceptgovernance). This is to safeguard against accidentally setting ownership to the wrong address and locking yourself out of your contract.\\n * - `governance` is a constructor argument instead of `msg.sender`. This is especially useful when deploying contracts via a [`SingletonFactory`](./interface/ISingletonFactory).\\n * - We use `lockGovernance()` instead of `renounceOwnership()`. `renounceOwnership()` is a prerequisite for the reinitialization bug because it sets `owner = address(0x0)`. We also use the `governanceIsLocked()` flag.\\n */\\ncontract Governable is IGovernable {\\n\\n    /***************************************\\n    GLOBAL VARIABLES\\n    ***************************************/\\n\\n    // Governor.\\n    address private _governance;\\n\\n    // governance to take over.\\n    address private _pendingGovernance;\\n\\n    bool private _locked;\\n\\n    /**\\n     * @notice Constructs the governable contract.\\n     * @param governance_ The address of the [governor](/docs/protocol/governance).\\n     */\\n    constructor(address governance_) {\\n        require(governance_ != address(0x0), \\\"zero address governance\\\");\\n        _governance = governance_;\\n        _pendingGovernance = address(0x0);\\n        _locked = false;\\n    }\\n\\n    /***************************************\\n    MODIFIERS\\n    ***************************************/\\n\\n    // can only be called by governor\\n    // can only be called while unlocked\\n    modifier onlyGovernance() {\\n        require(!_locked, \\\"governance locked\\\");\\n        require(msg.sender == _governance, \\\"!governance\\\");\\n        _;\\n    }\\n\\n    // can only be called by pending governor\\n    // can only be called while unlocked\\n    modifier onlyPendingGovernance() {\\n        require(!_locked, \\\"governance locked\\\");\\n        require(msg.sender == _pendingGovernance, \\\"!pending governance\\\");\\n        _;\\n    }\\n\\n    /***************************************\\n    VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /// @notice Address of the current governor.\\n    function governance() external view override returns (address) {\\n        return _governance;\\n    }\\n\\n    /// @notice Address of the governor to take over.\\n    function pendingGovernance() external view override returns (address) {\\n        return _pendingGovernance;\\n    }\\n\\n    /// @notice Returns true if governance is locked.\\n    function governanceIsLocked() external view override returns (bool) {\\n        return _locked;\\n    }\\n\\n    /***************************************\\n    MUTATOR FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Initiates transfer of the governance role to a new governor.\\n     * Transfer is not complete until the new governor accepts the role.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param pendingGovernance_ The new governor.\\n     */\\n    function setPendingGovernance(address pendingGovernance_) external override onlyGovernance {\\n        _pendingGovernance = pendingGovernance_;\\n        emit GovernancePending(pendingGovernance_);\\n    }\\n\\n    /**\\n     * @notice Accepts the governance role.\\n     * Can only be called by the pending governor.\\n     */\\n    function acceptGovernance() external override onlyPendingGovernance {\\n        // sanity check against transferring governance to the zero address\\n        // if someone figures out how to sign transactions from the zero address\\n        // consider the entirety of ethereum to be rekt\\n        require(_pendingGovernance != address(0x0), \\\"zero governance\\\");\\n        address oldGovernance = _governance;\\n        _governance = _pendingGovernance;\\n        _pendingGovernance = address(0x0);\\n        emit GovernanceTransferred(oldGovernance, _governance);\\n    }\\n\\n    /**\\n     * @notice Permanently locks this contract's governance role and any of its functions that require the role.\\n     * This action cannot be reversed.\\n     * Before you call it, ask yourself:\\n     *   - Is the contract self-sustaining?\\n     *   - Is there a chance you will need governance privileges in the future?\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     */\\n    function lockGovernance() external override onlyGovernance {\\n        _locked = true;\\n        // intentionally not using address(0x0), see re-initialization exploit\\n        _governance = address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n        _pendingGovernance = address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n        emit GovernanceTransferred(msg.sender, address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF));\\n        emit GovernanceLocked();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n/**\\n * @title IRegistry\\n * @author solace.fi\\n * @notice Tracks the contracts of the Solaverse.\\n *\\n * [**Governance**](/docs/protocol/governance) can set the contract addresses and anyone can look them up.\\n *\\n * Note that `Registry` doesn't track all Solace contracts. FarmController is tracked in [`OptionsFarming`](../OptionsFarming), farms are tracked in FarmController, Products are tracked in [`PolicyManager`](../PolicyManager), and the `Registry` is untracked.\\n */\\ninterface IRegistry {\\n\\n    /***************************************\\n    EVENTS\\n    ***************************************/\\n\\n    // Emitted when WETH is set.\\n    event WethSet(address weth);\\n    // Emitted when Vault is set.\\n    event VaultSet(address vault);\\n    // Emitted when ClaimsEscrow is set.\\n    event ClaimsEscrowSet(address claimsEscrow);\\n    // Emitted when Treasury is set.\\n    event TreasurySet(address treasury);\\n    // Emitted when PolicyManager is set.\\n    event PolicyManagerSet(address policyManager);\\n    // Emitted when RiskManager is set.\\n    event RiskManagerSet(address riskManager);\\n    // Emitted when Solace Token is set.\\n    event SolaceSet(address solace);\\n    // Emitted when OptionsFarming is set.\\n    event OptionsFarmingSet(address optionsFarming);\\n    // Emitted when FarmController is set.\\n    event FarmControllerSet(address farmController);\\n    // Emitted when Locker is set.\\n    event LockerSet(address locker);\\n\\n    /***************************************\\n    VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Gets the [**WETH**](../WETH9) contract.\\n     * @return weth_ The address of the [**WETH**](../WETH9) contract.\\n     */\\n    function weth() external view returns (address weth_);\\n\\n    /**\\n     * @notice Gets the [`Vault`](../Vault) contract.\\n     * @return vault_ The address of the [`Vault`](../Vault) contract.\\n     */\\n    function vault() external view returns (address vault_);\\n\\n    /**\\n     * @notice Gets the [`ClaimsEscrow`](../ClaimsEscrow) contract.\\n     * @return claimsEscrow_ The address of the [`ClaimsEscrow`](../ClaimsEscrow) contract.\\n     */\\n    function claimsEscrow() external view returns (address claimsEscrow_);\\n\\n    /**\\n     * @notice Gets the [`Treasury`](../Treasury) contract.\\n     * @return treasury_ The address of the [`Treasury`](../Treasury) contract.\\n     */\\n    function treasury() external view returns (address treasury_);\\n\\n    /**\\n     * @notice Gets the [`PolicyManager`](../PolicyManager) contract.\\n     * @return policyManager_ The address of the [`PolicyManager`](../PolicyManager) contract.\\n     */\\n    function policyManager() external view returns (address policyManager_);\\n\\n    /**\\n     * @notice Gets the [`RiskManager`](../RiskManager) contract.\\n     * @return riskManager_ The address of the [`RiskManager`](../RiskManager) contract.\\n     */\\n    function riskManager() external view returns (address riskManager_);\\n\\n    /**\\n     * @notice Gets the [**SOLACE**](../SOLACE) contract.\\n     * @return solace_ The address of the [**SOLACE**](../SOLACE) contract.\\n     */\\n    function solace() external view returns (address solace_);\\n\\n    /**\\n     * @notice Gets the [`OptionsFarming`](../OptionsFarming) contract.\\n     * @return optionsFarming_ The address of the [`OptionsFarming`](../OptionsFarming) contract.\\n     */\\n    function optionsFarming() external view returns (address optionsFarming_);\\n\\n    /**\\n     * @notice Gets the [`FarmController`](../FarmController) contract.\\n     * @return farmController_ The address of the [`FarmController`](../FarmController) contract.\\n     */\\n    function farmController() external view returns (address farmController_);\\n\\n    /**\\n     * @notice Gets the [`Locker`](../Locker) contract.\\n     * @return locker_ The address of the [`Locker`](../Locker) contract.\\n     */\\n    function locker() external view returns (address locker_);\\n\\n    /***************************************\\n    GOVERNANCE FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Sets the [**WETH**](../WETH9) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param weth_ The address of the [**WETH**](../WETH9) contract.\\n     */\\n    function setWeth(address weth_) external;\\n\\n    /**\\n     * @notice Sets the [`Vault`](../Vault) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param vault_ The address of the [`Vault`](../Vault) contract.\\n     */\\n    function setVault(address vault_) external;\\n\\n    /**\\n     * @notice Sets the [`Claims Escrow`](../ClaimsEscrow) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param claimsEscrow_ The address of the [`Claims Escrow`](../ClaimsEscrow) contract.\\n     */\\n    function setClaimsEscrow(address claimsEscrow_) external;\\n\\n    /**\\n     * @notice Sets the [`Treasury`](../Treasury) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param treasury_ The address of the [`Treasury`](../Treasury) contract.\\n     */\\n    function setTreasury(address treasury_) external;\\n\\n    /**\\n     * @notice Sets the [`Policy Manager`](../PolicyManager) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param policyManager_ The address of the [`Policy Manager`](../PolicyManager) contract.\\n     */\\n    function setPolicyManager(address policyManager_) external;\\n\\n    /**\\n     * @notice Sets the [`Risk Manager`](../RiskManager) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param riskManager_ The address of the [`Risk Manager`](../RiskManager) contract.\\n     */\\n    function setRiskManager(address riskManager_) external;\\n\\n    /**\\n     * @notice Sets the [**SOLACE**](../SOLACE) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param solace_ The address of the [**SOLACE**](../SOLACE) contract.\\n     */\\n    function setSolace(address solace_) external;\\n\\n    /**\\n     * @notice Sets the [`OptionsFarming`](../OptionsFarming) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param optionsFarming_ The address of the [`OptionsFarming`](../OptionsFarming) contract.\\n     */\\n    function setOptionsFarming(address optionsFarming_) external;\\n\\n    /**\\n     * @notice Sets the [`FarmController`](../FarmController) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param farmController_ The address of the [`FarmController`](../FarmController) contract.\\n     */\\n    function setFarmController(address farmController_) external;\\n\\n    /**\\n     * @notice Sets the [`Locker`](../Locker) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param locker_ The address of the [`Locker`](../Locker) contract.\\n     */\\n    function setLocker(address locker_) external;\\n\\n    /**\\n     * @notice Sets multiple contracts in one call.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param weth_ The address of the [**WETH**](../WETH9) contract.\\n     * @param vault_ The address of the [`Vault`](../Vault) contract.\\n     * @param claimsEscrow_ The address of the [`Claims Escrow`](../ClaimsEscrow) contract.\\n     * @param treasury_ The address of the [`Treasury`](../Treasury) contract.\\n     * @param policyManager_ The address of the [`Policy Manager`](../PolicyManager) contract.\\n     * @param riskManager_ The address of the [`Risk Manager`](../RiskManager) contract.\\n     * @param solace_ The address of the [**SOLACE**](../SOLACE) contract.\\n     * @param optionsFarming_ The address of the [`OptionsFarming`](./OptionsFarming) contract.\\n     * @param farmController_ The address of the [`FarmController`](./FarmController) contract.\\n     * @param locker_ The address of the [`Locker`](../Locker) contract.\\n     */\\n    function setMultiple(\\n        address weth_,\\n        address vault_,\\n        address claimsEscrow_,\\n        address treasury_,\\n        address policyManager_,\\n        address riskManager_,\\n        address solace_,\\n        address optionsFarming_,\\n        address farmController_,\\n        address locker_\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IPolicyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport \\\"./IERC721Enhanced.sol\\\";\\n\\n/**\\n * @title IPolicyManager\\n * @author solace.fi\\n * @notice The **PolicyManager** manages the creation of new policies and modification of existing policies.\\n *\\n * Most users will not interact with **PolicyManager** directly. To buy, modify, or cancel policies, users should use the respective [**product**](../products/BaseProduct) for the position they would like to cover. Use **PolicyManager** to view policies.\\n *\\n * Policies are [**ERC721s**](https://docs.openzeppelin.com/contracts/4.x/api/token/erc721#ERC721).\\n */\\ninterface IPolicyManager is IERC721Enhanced {\\n\\n    /***************************************\\n    EVENTS\\n    ***************************************/\\n\\n    /// @notice Emitted when a policy is created.\\n    event PolicyCreated(uint256 policyID);\\n    /// @notice Emitted when a policy is updated.\\n    event PolicyUpdated(uint256 indexed policyID);\\n    /// @notice Emitted when a policy is burned.\\n    event PolicyBurned(uint256 policyID);\\n    /// @notice Emitted when the policy descriptor is set.\\n    event PolicyDescriptorSet(address policyDescriptor);\\n    /// @notice Emitted when a new product is added.\\n    event ProductAdded(address product);\\n    /// @notice Emitted when a new product is removed.\\n    event ProductRemoved(address product);\\n\\n    /***************************************\\n    POLICY VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /// @notice PolicyInfo struct.\\n    struct PolicyInfo {\\n        uint256 coverAmount;\\n        address product;\\n        uint40 expirationBlock;\\n        uint24 price;\\n        bytes positionDescription;\\n    }\\n\\n    /**\\n     * @notice Information about a policy.\\n     * @param policyID The policy ID to return info.\\n     * @return info info in a struct.\\n     */\\n    function policyInfo(uint256 policyID) external view returns (PolicyInfo memory info);\\n\\n    /**\\n     * @notice Information about a policy.\\n     * @param policyID The policy ID to return info.\\n     * @return policyholder The address of the policy holder.\\n     * @return product The product of the policy.\\n     * @return coverAmount The amount covered for the policy.\\n     * @return expirationBlock The expiration block of the policy.\\n     * @return price The price of the policy.\\n     * @return positionDescription The description of the covered position(s).\\n     */\\n    function getPolicyInfo(uint256 policyID) external view returns (address policyholder, address product, uint256 coverAmount, uint40 expirationBlock, uint24 price, bytes calldata positionDescription);\\n\\n    /**\\n     * @notice The holder of the policy.\\n     * @param policyID The policy ID.\\n     * @return policyholder The address of the policy holder.\\n     */\\n    function getPolicyholder(uint256 policyID) external view returns (address policyholder);\\n\\n    /**\\n     * @notice The product used to purchase the policy.\\n     * @param policyID The policy ID.\\n     * @return product The product of the policy.\\n     */\\n    function getPolicyProduct(uint256 policyID) external view returns (address product);\\n\\n    /**\\n     * @notice The expiration block of the policy.\\n     * @param policyID The policy ID.\\n     * @return expirationBlock The expiration block of the policy.\\n     */\\n    function getPolicyExpirationBlock(uint256 policyID) external view returns (uint40 expirationBlock);\\n\\n    /**\\n     * @notice The cover amount of the policy.\\n     * @param policyID The policy ID.\\n     * @return coverAmount The cover amount of the policy.\\n     */\\n    function getPolicyCoverAmount(uint256 policyID) external view returns (uint256 coverAmount);\\n\\n    /**\\n     * @notice The cover price in wei per block per wei multiplied by 1e12.\\n     * @param policyID The policy ID.\\n     * @return price The price of the policy.\\n     */\\n    function getPolicyPrice(uint256 policyID) external view returns (uint24 price);\\n\\n    /**\\n     * @notice The byte encoded description of the covered position(s).\\n     * Only makes sense in context of the product.\\n     * @param policyID The policy ID.\\n     * @return positionDescription The description of the covered position(s).\\n     */\\n    function getPositionDescription(uint256 policyID) external view returns (bytes calldata positionDescription);\\n\\n    /*\\n     * @notice These functions can be used to check a policys stage in the lifecycle.\\n     * There are three major lifecycle events:\\n     *   1 - policy is bought (aka minted)\\n     *   2 - policy expires\\n     *   3 - policy is burnt (aka deleted)\\n     * There are four stages:\\n     *   A - pre-mint\\n     *   B - pre-expiration\\n     *   C - post-expiration\\n     *   D - post-burn\\n     * Truth table:\\n     *               A B C D\\n     *   exists      0 1 1 0\\n     *   isActive    0 1 0 0\\n     *   hasExpired  0 0 1 0\\n\\n    /**\\n     * @notice Checks if a policy is active.\\n     * @param policyID The policy ID.\\n     * @return status True if the policy is active.\\n     */\\n    function policyIsActive(uint256 policyID) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether a given policy is expired.\\n     * @param policyID The policy ID.\\n     * @return status True if the policy is expired.\\n     */\\n    function policyHasExpired(uint256 policyID) external view returns (bool);\\n\\n    /// @notice The total number of policies ever created.\\n    function totalPolicyCount() external view returns (uint256 count);\\n\\n    /// @notice The address of the [`PolicyDescriptor`](./PolicyDescriptor) contract.\\n    function policyDescriptor() external view returns (address);\\n\\n    /***************************************\\n    POLICY MUTATIVE FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Creates a new policy.\\n     * Can only be called by **products**.\\n     * @param policyholder The receiver of new policy token.\\n     * @param coverAmount The policy coverage amount (in wei).\\n     * @param expirationBlock The policy expiration block number.\\n     * @param price The coverage price.\\n     * @param positionDescription The description of the covered position(s).\\n     * @return policyID The policy ID.\\n     */\\n    function createPolicy(\\n        address policyholder,\\n        uint256 coverAmount,\\n        uint40 expirationBlock,\\n        uint24 price,\\n        bytes calldata positionDescription\\n    ) external returns (uint256 policyID);\\n\\n    /**\\n     * @notice Modifies a policy.\\n     * Can only be called by **products**.\\n     * @param policyID The policy ID.\\n     * @param coverAmount The policy coverage amount (in wei).\\n     * @param expirationBlock The policy expiration block number.\\n     * @param price The coverage price.\\n     * @param positionDescription The description of the covered position(s).\\n     */\\n    function setPolicyInfo(uint256 policyID, uint256 coverAmount, uint40 expirationBlock, uint24 price, bytes calldata positionDescription) external;\\n\\n    /**\\n     * @notice Burns expired or cancelled policies.\\n     * Can only be called by **products**.\\n     * @param policyID The ID of the policy to burn.\\n     */\\n    function burn(uint256 policyID) external;\\n\\n    /**\\n     * @notice Burns expired policies.\\n     * @param policyIDs The list of expired policies.\\n     */\\n    function updateActivePolicies(uint256[] calldata policyIDs) external;\\n\\n    /***************************************\\n    PRODUCT VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Checks is an address is an active product.\\n     * @param product The product to check.\\n     * @return status True if the product is active.\\n     */\\n    function productIsActive(address product) external view returns (bool status);\\n\\n    /**\\n     * @notice Returns the number of products.\\n     * @return count The number of products.\\n     */\\n    function numProducts() external view returns (uint256 count);\\n\\n    /**\\n     * @notice Returns the product at the given index.\\n     * @param productNum The index to query.\\n     * @return product The address of the product.\\n     */\\n    function getProduct(uint256 productNum) external view returns (address product);\\n\\n    /***************************************\\n    OTHER VIEW FUNCTIONS\\n    ***************************************/\\n\\n    function activeCoverAmount() external view returns (uint256);\\n\\n    /***************************************\\n    GOVERNANCE FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Adds a new product.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param product the new product\\n     */\\n    function addProduct(address product) external;\\n\\n    /**\\n     * @notice Removes a product.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param product the product to remove\\n     */\\n    function removeProduct(address product) external;\\n\\n\\n    /**\\n     * @notice Set the token descriptor.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param policyDescriptor The new token descriptor address.\\n     */\\n    function setPolicyDescriptor(address policyDescriptor) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ISptFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport \\\"./IPolicyManager.sol\\\";\\nimport \\\"./IFarm.sol\\\";\\n\\n\\n/**\\n * @title ISptFarm\\n * @author solace.fi\\n * @notice Rewards [**Policyholders**](/docs/protocol/policy-holder) in [**Options**](../OptionFarming) for staking their [**Policies**](./PolicyManager).\\n *\\n * Over the course of `startTime` to `endTime`, the farm distributes `rewardPerSecond` [**Options**](../OptionFarming) to all farmers split relative to the value of the policies they have deposited.\\n *\\n * Note that you should deposit your policies via [`depositPolicy()`](#depositpolicy) or [`depositPolicySigned()`](#depositpolicysigned). Raw `ERC721.transfer()` will not be recognized.\\n */\\ninterface ISptFarm is IFarm {\\n\\n    /***************************************\\n    EVENTS\\n    ***************************************/\\n\\n    // Emitted when a policy is deposited onto the farm.\\n    event PolicyDeposited(address indexed user, uint256 policyID);\\n    // Emitted when a policy is withdrawn from the farm.\\n    event PolicyWithdrawn(address indexed user, uint256 policyID);\\n    /// @notice Emitted when rewardPerSecond is changed.\\n    event RewardsSet(uint256 rewardPerSecond);\\n    /// @notice Emitted when the end time is changed.\\n    event FarmEndSet(uint256 endTime);\\n\\n    /***************************************\\n    VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /// @notice\\n    function policyManager() external view returns (address policyManager_);\\n\\n    /// @notice Last time rewards were distributed or farm was updated.\\n    function lastRewardTime() external view returns (uint256 timestamp);\\n\\n    /// @notice Accumulated rewards per share, times 1e12.\\n    function accRewardPerShare() external view returns (uint256 acc);\\n\\n    /// @notice Value of policies a user deposited.\\n    function userStaked(address user) external view returns (uint256 amount);\\n\\n    /// @notice Value of policies deposited by all farmers.\\n    function valueStaked() external view returns (uint256 amount);\\n\\n    /// @notice Information about a deposited policy.\\n    function policyInfo(uint256 policyID) external view returns (address depositor, uint256 value);\\n\\n    /**\\n     * @notice Returns the count of [**policies**](./PolicyManager) that a user has deposited onto the farm.\\n     * @param user The user to check count for.\\n     * @return count The count of deposited [**policies**](./PolicyManager).\\n     */\\n    function countDeposited(address user) external view returns (uint256 count);\\n\\n    /**\\n     * @notice Returns the list of [**policies**](./PolicyManager) that a user has deposited onto the farm and their values.\\n     * @param user The user to list deposited policies.\\n     * @return policyIDs The list of deposited policies.\\n     * @return policyValues The values of the policies.\\n     */\\n    function listDeposited(address user) external view returns (uint256[] memory policyIDs, uint256[] memory policyValues);\\n\\n    /**\\n     * @notice Returns the ID of a [**Policies**](./PolicyManager) that a user has deposited onto a farm and its value.\\n     * @param user The user to get policyID for.\\n     * @param index The farm-based index of the token.\\n     * @return policyID The ID of the deposited [**policy**](./PolicyManager).\\n     * @return policyValue The value of the [**policy**](./PolicyManager).\\n     */\\n    function getDeposited(address user, uint256 index) external view returns (uint256 policyID, uint256 policyValue);\\n\\n    /***************************************\\n    MUTATOR FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Deposit a [**policy**](./PolicyManager).\\n     * User must `ERC721.approve()` or `ERC721.setApprovalForAll()` first.\\n     * @param policyID The ID of the policy to deposit.\\n     */\\n    function depositPolicy(uint256 policyID) external;\\n\\n    /**\\n     * @notice Deposit a [**policy**](./PolicyManager) using permit.\\n     * @param depositor The depositing user.\\n     * @param policyID The ID of the policy to deposit.\\n     * @param deadline Time the transaction must go through before.\\n     * @param v secp256k1 signature\\n     * @param r secp256k1 signature\\n     * @param s secp256k1 signature\\n     */\\n    function depositPolicySigned(address depositor, uint256 policyID, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @notice Deposit multiple [**policies**](./PolicyManager).\\n     * User must `ERC721.approve()` or `ERC721.setApprovalForAll()` first.\\n     * @param policyIDs The IDs of the policies to deposit.\\n     */\\n    function depositPolicyMulti(uint256[] memory policyIDs) external;\\n\\n    /**\\n     * @notice Deposit multiple [**policies**](./PolicyManager) using permit.\\n     * @param depositors The depositing users.\\n     * @param policyIDs The IDs of the policies to deposit.\\n     * @param deadlines Times the transactions must go through before.\\n     * @param vs secp256k1 signatures\\n     * @param rs secp256k1 signatures\\n     * @param ss secp256k1 signatures\\n     */\\n    function depositPolicySignedMulti(address[] memory depositors, uint256[] memory policyIDs, uint256[] memory deadlines, uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss) external;\\n\\n    /**\\n     * @notice Withdraw a [**policy**](./PolicyManager).\\n     * Can only withdraw policies you deposited.\\n     * @param policyID The ID of the policy to withdraw.\\n     */\\n    function withdrawPolicy(uint256 policyID) external;\\n\\n    /**\\n     * @notice Withdraw multiple [**policies**](./PolicyManager).\\n     * Can only withdraw policies you deposited.\\n     * @param policyIDs The IDs of the policies to withdraw.\\n     */\\n    function withdrawPolicyMulti(uint256[] memory policyIDs) external;\\n\\n    /**\\n     * @notice Burns expired policies.\\n     * @param policyIDs The list of expired policies.\\n     */\\n    function updateActivePolicies(uint256[] calldata policyIDs) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IGovernable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n/**\\n * @title IGovernable\\n * @author solace.fi\\n * @notice Enforces access control for important functions to [**governor**](/docs/protocol/governance).\\n *\\n * Many contracts contain functionality that should only be accessible to a privileged user. The most common access control pattern is [OpenZeppelin's `Ownable`](https://docs.openzeppelin.com/contracts/4.x/access-control#ownership-and-ownable). We instead use `Governable` with a few key differences:\\n * - Transferring the governance role is a two step process. The current governance must [`setPendingGovernance(pendingGovernance_)`](#setPendingGovernance) then the new governance must [`acceptGovernance()`](#acceptgovernance). This is to safeguard against accidentally setting ownership to the wrong address and locking yourself out of your contract.\\n * - `governance` is a constructor argument instead of `msg.sender`. This is especially useful when deploying contracts via a [`SingletonFactory`](./ISingletonFactory).\\n * - We use `lockGovernance()` instead of `renounceOwnership()`. `renounceOwnership()` is a prerequisite for the reinitialization bug because it sets `owner = address(0x0)`. We also use the `governanceIsLocked()` flag.\\n */\\ninterface IGovernable {\\n\\n    /***************************************\\n    EVENTS\\n    ***************************************/\\n\\n    /// @notice Emitted when pending Governance is set.\\n    event GovernancePending(address pendingGovernance);\\n    /// @notice Emitted when Governance is set.\\n    event GovernanceTransferred(address oldGovernance, address newGovernance);\\n    /// @notice Emitted when Governance is locked.\\n    event GovernanceLocked();\\n\\n    /***************************************\\n    VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /// @notice Address of the current governor.\\n    function governance() external view returns (address);\\n\\n    /// @notice Address of the governor to take over.\\n    function pendingGovernance() external view returns (address);\\n\\n    /// @notice Returns true if governance is locked.\\n    function governanceIsLocked() external view returns (bool);\\n\\n    /***************************************\\n    MUTATORS\\n    ***************************************/\\n\\n    /**\\n     * @notice Initiates transfer of the governance role to a new governor.\\n     * Transfer is not complete until the new governor accepts the role.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param pendingGovernance_ The new governor.\\n     */\\n    function setPendingGovernance(address pendingGovernance_) external;\\n\\n    /**\\n     * @notice Accepts the governance role.\\n     * Can only be called by the new governor.\\n     */\\n    function acceptGovernance() external;\\n\\n    /**\\n     * @notice Permanently locks this contract's governance role and any of its functions that require the role.\\n     * This action cannot be reversed.\\n     * Before you call it, ask yourself:\\n     *   - Is the contract self-sustaining?\\n     *   - Is there a chance you will need governance privileges in the future?\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     */\\n    function lockGovernance() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC721Enhanced.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// code borrowed from OpenZeppelin and @uniswap/v3-periphery\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/**\\n * @title ERC721Enhanced\\n * @author solace.fi\\n * @notice An extension of `ERC721`.\\n *\\n * The base is OpenZeppelin's `ERC721Enumerable` which also includes the `Metadata` extension. This extension includes simpler transfers, gasless approvals, and better enumeration.\\n */\\ninterface IERC721Enhanced is IERC721Enumerable {\\n\\n    /***************************************\\n    SIMPLER TRANSFERS\\n    ***************************************/\\n\\n    /**\\n     * @notice Transfers `tokenID` from `msg.sender` to `to`.\\n     * @dev This was excluded from the official `ERC721` standard in favor of `transferFrom(address from, address to, uint256 tokenID)`. We elect to include it.\\n     * @param to The receipient of the token.\\n     * @param tokenID The token to transfer.\\n     */\\n    function transfer(address to, uint256 tokenID) external;\\n\\n    /**\\n     * @notice Safely transfers `tokenID` from `msg.sender` to `to`.\\n     * @dev This was excluded from the official `ERC721` standard in favor of `safeTransferFrom(address from, address to, uint256 tokenID)`. We elect to include it.\\n     * @param to The receipient of the token.\\n     * @param tokenID The token to transfer.\\n     */\\n    function safeTransfer(address to, uint256 tokenID) external;\\n\\n    /***************************************\\n    GASLESS APPROVALS\\n    ***************************************/\\n\\n    /**\\n     * @notice Approve of a specific `tokenID` for spending by `spender` via signature.\\n     * @param spender The account that is being approved.\\n     * @param tokenID The ID of the token that is being approved for spending.\\n     * @param deadline The deadline timestamp by which the call must be mined for the approve to work.\\n     * @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`.\\n     * @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`.\\n     * @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`.\\n     */\\n    function permit(\\n        address spender,\\n        uint256 tokenID,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice Returns the current nonce for `tokenID`. This value must be\\n     * included whenever a signature is generated for `permit`.\\n     * Every successful call to `permit` increases ``tokenID``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     * @param tokenID ID of the token to request nonce.\\n     * @return nonce Nonce of the token.\\n     */\\n    function nonces(uint256 tokenID) external view returns (uint256 nonce);\\n\\n    /**\\n     * @notice The permit typehash used in the `permit` signature.\\n     * @return typehash The typehash for the `permit`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function PERMIT_TYPEHASH() external view returns (bytes32 typehash);\\n\\n    /**\\n     * @notice The domain separator used in the encoding of the signature for `permit`, as defined by `EIP712`.\\n     * @return seperator The domain seperator for `permit`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32 seperator);\\n\\n    /***************************************\\n    BETTER ENUMERATION\\n    ***************************************/\\n\\n    /**\\n     * @notice Lists all tokens.\\n     * Order not specified.\\n     * @dev This function is more useful off chain than on chain.\\n     * @return tokenIDs The list of token IDs.\\n     */\\n    function listTokens() external view returns (uint256[] memory tokenIDs);\\n\\n    /**\\n     * @notice Lists the tokens owned by `owner`.\\n     * Order not specified.\\n     * @dev This function is more useful off chain than on chain.\\n     * @return tokenIDs The list of token IDs.\\n     */\\n    function listTokensOfOwner(address owner) external view returns (uint256[] memory tokenIDs);\\n\\n    /**\\n     * @notice Determines if a token exists or not.\\n     * @param tokenID The ID of the token to query.\\n     * @return status True if the token exists, false if it doesn't.\\n     */\\n    function exists(uint256 tokenID) external view returns (bool status);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport \\\"./IFarmController.sol\\\";\\n\\n\\n/**\\n * @title IFarm\\n * @author solace.fi\\n * @notice Rewards investors in [**SOLACE**](../SOLACE).\\n */\\ninterface IFarm {\\n\\n    /***************************************\\n    VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /// @notice [`IFarmController`](../FarmController) contract.\\n    function farmController() external view returns (address);\\n\\n    /// @notice A unique enumerator that identifies the farm type.\\n    function farmType() external view returns (uint256);\\n\\n    /// @notice Amount of rewards distributed per second.\\n    function rewardPerSecond() external view returns (uint256);\\n\\n    /// @notice When the farm will start.\\n    function startTime() external view returns (uint256);\\n\\n    /// @notice When the farm will end.\\n    function endTime() external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the accumulated rewards for specified user.\\n     * @param user The user for whom unclaimed tokens will be shown.\\n     * @return reward Total amount of withdrawable rewards.\\n     */\\n    function pendingRewards(address user) external view returns (uint256 reward);\\n\\n    /**\\n     * @notice Calculates the reward amount distributed between two timestamps.\\n     * @param from The start of the period to measure rewards for.\\n     * @param to The end of the period to measure rewards for.\\n     * @return amount The reward amount distributed in the given period.\\n     */\\n    function getRewardAmountDistributed(uint256 from, uint256 to) external view returns (uint256 amount);\\n\\n    /***************************************\\n    MUTATOR FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Converts the senders unpaid rewards into an [`Option`](../OptionsFarming).\\n     * @return optionID The ID of the newly minted [`Option`](../OptionsFarming).\\n     */\\n    function withdrawRewards() external returns (uint256 optionID);\\n\\n    /**\\n     * @notice Withdraw a users rewards without unstaking their tokens.\\n     * Can only be called by [`FarmController`](../FarmController).\\n     * @param user User to withdraw rewards for.\\n     * @return rewardAmount The amount of rewards the user earned on this farm.\\n     */\\n    function withdrawRewardsForUser(address user) external returns (uint256 rewardAmount);\\n\\n    /**\\n     * @notice Updates farm information to be up to date to the current time.\\n     */\\n    function updateFarm() external;\\n\\n    /***************************************\\n    GOVERNANCE FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Sets the amount of rewards to distribute per second.\\n     * Only affects future rewards.\\n     * Can only be called by [`FarmController`](../FarmController).\\n     * @param rewardPerSecond_ Amount to distribute per second.\\n     */\\n    function setRewards(uint256 rewardPerSecond_) external;\\n\\n    /**\\n     * @notice Sets the farm's end time. Used to extend the duration.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param endTime_ The new end time.\\n     */\\n    function setEnd(uint256 endTime_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IFarmController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n\\n/**\\n * @title IFarmController\\n * @author solace.fi\\n * @notice Controls the allocation of rewards across multiple farms.\\n */\\ninterface IFarmController {\\n\\n    /***************************************\\n    EVENTS\\n    ***************************************/\\n\\n    /// @notice Emitted when a farm is registered.\\n    event FarmRegistered(uint256 indexed farmID, address indexed farmAddress);\\n    /// @notice Emitted when reward per second is changed.\\n    event RewardsSet(uint256 rewardPerSecond);\\n\\n    /***************************************\\n    VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /// @notice Rewards distributed per second across all farms.\\n    function rewardPerSecond() external view returns (uint256);\\n\\n    /// @notice Total allocation points across all farms.\\n    function totalAllocPoints() external view returns (uint256);\\n\\n    /// @notice The number of farms that have been created.\\n    function numFarms() external view returns (uint256);\\n\\n    /// @notice Given a farm ID, return its address.\\n    /// @dev Indexable 1-numFarms, 0 is null farm.\\n    function farmAddresses(uint256 farmID) external view returns (address);\\n\\n    /// @notice Given a farm address, returns its ID.\\n    /// @dev Returns 0 for not farms and unregistered farms.\\n    function farmIndices(address farmAddress) external view returns (uint256);\\n\\n    /// @notice Given a farm ID, how many points the farm was allocated.\\n    function allocPoints(uint256 farmID) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the accumulated balance of rewards for the specified user.\\n     * @param user The user for whom unclaimed rewards will be shown.\\n     * @return reward Total amount of withdrawable rewards.\\n     */\\n    function pendingRewards(address user) external view returns (uint256 reward);\\n\\n    /***************************************\\n    MUTATOR FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Updates all farms to be up to date to the current second.\\n     */\\n    function massUpdateFarms() external;\\n\\n    /***************************************\\n    OPTIONS CREATION FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Withdraw your rewards from all farms and create an [`Option`](../OptionsFarming).\\n     * @return optionID The ID of the new [`Option`](./OptionsFarming).\\n     */\\n    function farmOptionMulti() external returns (uint256 optionID);\\n\\n    /**\\n     * @notice Creates an [`Option`](../OptionsFarming) for the given `rewardAmount`.\\n     * Must be called by a farm.\\n     * @param recipient The recipient of the option.\\n     * @param rewardAmount The amount to reward in the Option.\\n     * @return optionID The ID of the new [`Option`](./OptionsFarming).\\n     */\\n    function createOption(address recipient, uint256 rewardAmount) external returns (uint256 optionID);\\n\\n    /***************************************\\n    GOVERNANCE FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Registers a farm.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * Cannot register a farm more than once.\\n     * @param farmAddress The farm's address.\\n     * @param allocPoints How many points to allocate this farm.\\n     * @return farmID The farm ID.\\n     */\\n    function registerFarm(address farmAddress, uint256 allocPoints) external returns (uint256 farmID);\\n\\n    /**\\n     * @notice Sets a farm's allocation points.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param farmID The farm to set allocation points.\\n     * @param allocPoints_ How many points to allocate this farm.\\n     */\\n    function setAllocPoints(uint256 farmID, uint256 allocPoints_) external;\\n\\n    /**\\n     * @notice Sets the reward distribution across all farms.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param rewardPerSecond_ Amount of reward to distribute per second.\\n     */\\n    function setRewardPerSecond(uint256 rewardPerSecond_) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"FarmEndSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GovernanceLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernance\",\"type\":\"address\"}],\"name\":\"GovernancePending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGovernance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"policyID\",\"type\":\"uint256\"}],\"name\":\"PolicyDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"policyID\",\"type\":\"uint256\"}],\"name\":\"PolicyWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"RewardsSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"countDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"policyID\",\"type\":\"uint256\"}],\"name\":\"depositPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"policyIDs\",\"type\":\"uint256[]\"}],\"name\":\"depositPolicyMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"policyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositPolicySigned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"depositors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"policyIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"deadlines\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"depositPolicySignedMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"farmType_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"policyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"policyValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"getRewardAmountDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceIsLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"listDeposited\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"policyIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"policyValues\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"policyID\",\"type\":\"uint256\"}],\"name\":\"policyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"policyManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endTime_\",\"type\":\"uint256\"}],\"name\":\"setEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingGovernance_\",\"type\":\"address\"}],\"name\":\"setPendingGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond_\",\"type\":\"uint256\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"policyIDs\",\"type\":\"uint256[]\"}],\"name\":\"updateActivePolicies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valueStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"policyID\",\"type\":\"uint256\"}],\"name\":\"withdrawPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"policyIDs\",\"type\":\"uint256[]\"}],\"name\":\"withdrawPolicyMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawRewardsForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SptFarm","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"000000000000000000000000501ace0e8d16b92236763e2ded7ae3bc2dffa276000000000000000000000000501acee3310d98881c827d4357c970f23a30ad29000000000000000000000000000000000000000000000000000000006181d1000000000000000000000000000000000000000000000000000000000063634170","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}