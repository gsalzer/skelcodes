{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n   ____            __   __        __   _\r\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\r\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\r\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\r\n     /___/\r\n\r\n* Synthetix: SystemSettings.sol\r\n*\r\n* Latest source (may be newer): https://github.com/Synthetixio/synthetix/blob/master/contracts/SystemSettings.sol\r\n* Docs: https://docs.synthetix.io/contracts/SystemSettings\r\n*\r\n* Contract Dependencies: \r\n*\t- IAddressResolver\r\n*\t- ISystemSettings\r\n*\t- MixinResolver\r\n*\t- MixinSystemSettings\r\n*\t- Owned\r\n* Libraries: \r\n*\t- SafeDecimalMath\r\n*\t- SafeMath\r\n*\r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2021 Synthetix\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n// https://docs.synthetix.io/contracts/source/contracts/owned\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    constructor(address _owner) public {\r\n        require(_owner != address(0), \"Owner address cannot be 0\");\r\n        owner = _owner;\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    function nominateNewOwner(address _owner) external onlyOwner {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        _onlyOwner();\r\n        _;\r\n    }\r\n\r\n    function _onlyOwner() private view {\r\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/iaddressresolver\r\ninterface IAddressResolver {\r\n    function getAddress(bytes32 name) external view returns (address);\r\n\r\n    function getSynth(bytes32 key) external view returns (address);\r\n\r\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/isynth\r\ninterface ISynth {\r\n    // Views\r\n    function currencyKey() external view returns (bytes32);\r\n\r\n    function transferableSynths(address account) external view returns (uint);\r\n\r\n    // Mutative functions\r\n    function transferAndSettle(address to, uint value) external returns (bool);\r\n\r\n    function transferFromAndSettle(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    // Restricted: used internally to Synthetix\r\n    function burn(address account, uint amount) external;\r\n\r\n    function issue(address account, uint amount) external;\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/iissuer\r\ninterface IIssuer {\r\n    // Views\r\n    function anySynthOrSNXRateIsInvalid() external view returns (bool anyRateInvalid);\r\n\r\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\r\n\r\n    function availableSynthCount() external view returns (uint);\r\n\r\n    function availableSynths(uint index) external view returns (ISynth);\r\n\r\n    function canBurnSynths(address account) external view returns (bool);\r\n\r\n    function collateral(address account) external view returns (uint);\r\n\r\n    function collateralisationRatio(address issuer) external view returns (uint);\r\n\r\n    function collateralisationRatioAndAnyRatesInvalid(address _issuer)\r\n        external\r\n        view\r\n        returns (uint cratio, bool anyRateIsInvalid);\r\n\r\n    function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns (uint debtBalance);\r\n\r\n    function issuanceRatio() external view returns (uint);\r\n\r\n    function lastIssueEvent(address account) external view returns (uint);\r\n\r\n    function maxIssuableSynths(address issuer) external view returns (uint maxIssuable);\r\n\r\n    function minimumStakeTime() external view returns (uint);\r\n\r\n    function remainingIssuableSynths(address issuer)\r\n        external\r\n        view\r\n        returns (\r\n            uint maxIssuable,\r\n            uint alreadyIssued,\r\n            uint totalSystemDebt\r\n        );\r\n\r\n    function synths(bytes32 currencyKey) external view returns (ISynth);\r\n\r\n    function getSynths(bytes32[] calldata currencyKeys) external view returns (ISynth[] memory);\r\n\r\n    function synthsByAddress(address synthAddress) external view returns (bytes32);\r\n\r\n    function totalIssuedSynths(bytes32 currencyKey, bool excludeOtherCollateral) external view returns (uint);\r\n\r\n    function transferableSynthetixAndAnyRateIsInvalid(address account, uint balance)\r\n        external\r\n        view\r\n        returns (uint transferable, bool anyRateIsInvalid);\r\n\r\n    // Restricted: used internally to Synthetix\r\n    function issueSynths(address from, uint amount) external;\r\n\r\n    function issueSynthsOnBehalf(\r\n        address issueFor,\r\n        address from,\r\n        uint amount\r\n    ) external;\r\n\r\n    function issueMaxSynths(address from) external;\r\n\r\n    function issueMaxSynthsOnBehalf(address issueFor, address from) external;\r\n\r\n    function burnSynths(address from, uint amount) external;\r\n\r\n    function burnSynthsOnBehalf(\r\n        address burnForAddress,\r\n        address from,\r\n        uint amount\r\n    ) external;\r\n\r\n    function burnSynthsToTarget(address from) external;\r\n\r\n    function burnSynthsToTargetOnBehalf(address burnForAddress, address from) external;\r\n\r\n    function burnForRedemption(\r\n        address deprecatedSynthProxy,\r\n        address account,\r\n        uint balance\r\n    ) external;\r\n\r\n    function liquidateDelinquentAccount(\r\n        address account,\r\n        uint susdAmount,\r\n        address liquidator\r\n    ) external returns (uint totalRedeemed, uint amountToLiquidate);\r\n}\r\n\r\n\r\n// Inheritance\r\n\r\n\r\n// Internal references\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/contracts/addressresolver\r\ncontract AddressResolver is Owned, IAddressResolver {\r\n    mapping(bytes32 => address) public repository;\r\n\r\n    constructor(address _owner) public Owned(_owner) {}\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    function importAddresses(bytes32[] calldata names, address[] calldata destinations) external onlyOwner {\r\n        require(names.length == destinations.length, \"Input lengths must match\");\r\n\r\n        for (uint i = 0; i < names.length; i++) {\r\n            bytes32 name = names[i];\r\n            address destination = destinations[i];\r\n            repository[name] = destination;\r\n            emit AddressImported(name, destination);\r\n        }\r\n    }\r\n\r\n    /* ========= PUBLIC FUNCTIONS ========== */\r\n\r\n    function rebuildCaches(MixinResolver[] calldata destinations) external {\r\n        for (uint i = 0; i < destinations.length; i++) {\r\n            destinations[i].rebuildCache();\r\n        }\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    function areAddressesImported(bytes32[] calldata names, address[] calldata destinations) external view returns (bool) {\r\n        for (uint i = 0; i < names.length; i++) {\r\n            if (repository[names[i]] != destinations[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getAddress(bytes32 name) external view returns (address) {\r\n        return repository[name];\r\n    }\r\n\r\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address) {\r\n        address _foundAddress = repository[name];\r\n        require(_foundAddress != address(0), reason);\r\n        return _foundAddress;\r\n    }\r\n\r\n    function getSynth(bytes32 key) external view returns (address) {\r\n        IIssuer issuer = IIssuer(repository[\"Issuer\"]);\r\n        require(address(issuer) != address(0), \"Cannot find Issuer address\");\r\n        return address(issuer.synths(key));\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event AddressImported(bytes32 name, address destination);\r\n}\r\n\r\n\r\n// Internal references\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/contracts/mixinresolver\r\ncontract MixinResolver {\r\n    AddressResolver public resolver;\r\n\r\n    mapping(bytes32 => address) private addressCache;\r\n\r\n    constructor(address _resolver) internal {\r\n        resolver = AddressResolver(_resolver);\r\n    }\r\n\r\n    /* ========== INTERNAL FUNCTIONS ========== */\r\n\r\n    function combineArrays(bytes32[] memory first, bytes32[] memory second)\r\n        internal\r\n        pure\r\n        returns (bytes32[] memory combination)\r\n    {\r\n        combination = new bytes32[](first.length + second.length);\r\n\r\n        for (uint i = 0; i < first.length; i++) {\r\n            combination[i] = first[i];\r\n        }\r\n\r\n        for (uint j = 0; j < second.length; j++) {\r\n            combination[first.length + j] = second[j];\r\n        }\r\n    }\r\n\r\n    /* ========== PUBLIC FUNCTIONS ========== */\r\n\r\n    // Note: this function is public not external in order for it to be overridden and invoked via super in subclasses\r\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {}\r\n\r\n    function rebuildCache() public {\r\n        bytes32[] memory requiredAddresses = resolverAddressesRequired();\r\n        // The resolver must call this function whenver it updates its state\r\n        for (uint i = 0; i < requiredAddresses.length; i++) {\r\n            bytes32 name = requiredAddresses[i];\r\n            // Note: can only be invoked once the resolver has all the targets needed added\r\n            address destination =\r\n                resolver.requireAndGetAddress(name, string(abi.encodePacked(\"Resolver missing target: \", name)));\r\n            addressCache[name] = destination;\r\n            emit CacheUpdated(name, destination);\r\n        }\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    function isResolverCached() external view returns (bool) {\r\n        bytes32[] memory requiredAddresses = resolverAddressesRequired();\r\n        for (uint i = 0; i < requiredAddresses.length; i++) {\r\n            bytes32 name = requiredAddresses[i];\r\n            // false if our cache is invalid or if the resolver doesn't have the required address\r\n            if (resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /* ========== INTERNAL FUNCTIONS ========== */\r\n\r\n    function requireAndGetAddress(bytes32 name) internal view returns (address) {\r\n        address _foundAddress = addressCache[name];\r\n        require(_foundAddress != address(0), string(abi.encodePacked(\"Missing address: \", name)));\r\n        return _foundAddress;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event CacheUpdated(bytes32 name, address destination);\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/iflexiblestorage\r\ninterface IFlexibleStorage {\r\n    // Views\r\n    function getUIntValue(bytes32 contractName, bytes32 record) external view returns (uint);\r\n\r\n    function getUIntValues(bytes32 contractName, bytes32[] calldata records) external view returns (uint[] memory);\r\n\r\n    function getIntValue(bytes32 contractName, bytes32 record) external view returns (int);\r\n\r\n    function getIntValues(bytes32 contractName, bytes32[] calldata records) external view returns (int[] memory);\r\n\r\n    function getAddressValue(bytes32 contractName, bytes32 record) external view returns (address);\r\n\r\n    function getAddressValues(bytes32 contractName, bytes32[] calldata records) external view returns (address[] memory);\r\n\r\n    function getBoolValue(bytes32 contractName, bytes32 record) external view returns (bool);\r\n\r\n    function getBoolValues(bytes32 contractName, bytes32[] calldata records) external view returns (bool[] memory);\r\n\r\n    function getBytes32Value(bytes32 contractName, bytes32 record) external view returns (bytes32);\r\n\r\n    function getBytes32Values(bytes32 contractName, bytes32[] calldata records) external view returns (bytes32[] memory);\r\n\r\n    // Mutative functions\r\n    function deleteUIntValue(bytes32 contractName, bytes32 record) external;\r\n\r\n    function deleteIntValue(bytes32 contractName, bytes32 record) external;\r\n\r\n    function deleteAddressValue(bytes32 contractName, bytes32 record) external;\r\n\r\n    function deleteBoolValue(bytes32 contractName, bytes32 record) external;\r\n\r\n    function deleteBytes32Value(bytes32 contractName, bytes32 record) external;\r\n\r\n    function setUIntValue(\r\n        bytes32 contractName,\r\n        bytes32 record,\r\n        uint value\r\n    ) external;\r\n\r\n    function setUIntValues(\r\n        bytes32 contractName,\r\n        bytes32[] calldata records,\r\n        uint[] calldata values\r\n    ) external;\r\n\r\n    function setIntValue(\r\n        bytes32 contractName,\r\n        bytes32 record,\r\n        int value\r\n    ) external;\r\n\r\n    function setIntValues(\r\n        bytes32 contractName,\r\n        bytes32[] calldata records,\r\n        int[] calldata values\r\n    ) external;\r\n\r\n    function setAddressValue(\r\n        bytes32 contractName,\r\n        bytes32 record,\r\n        address value\r\n    ) external;\r\n\r\n    function setAddressValues(\r\n        bytes32 contractName,\r\n        bytes32[] calldata records,\r\n        address[] calldata values\r\n    ) external;\r\n\r\n    function setBoolValue(\r\n        bytes32 contractName,\r\n        bytes32 record,\r\n        bool value\r\n    ) external;\r\n\r\n    function setBoolValues(\r\n        bytes32 contractName,\r\n        bytes32[] calldata records,\r\n        bool[] calldata values\r\n    ) external;\r\n\r\n    function setBytes32Value(\r\n        bytes32 contractName,\r\n        bytes32 record,\r\n        bytes32 value\r\n    ) external;\r\n\r\n    function setBytes32Values(\r\n        bytes32 contractName,\r\n        bytes32[] calldata records,\r\n        bytes32[] calldata values\r\n    ) external;\r\n}\r\n\r\n\r\n// Internal references\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/contracts/mixinsystemsettings\r\ncontract MixinSystemSettings is MixinResolver {\r\n    bytes32 internal constant SETTING_CONTRACT_NAME = \"SystemSettings\";\r\n\r\n    bytes32 internal constant SETTING_WAITING_PERIOD_SECS = \"waitingPeriodSecs\";\r\n    bytes32 internal constant SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR = \"priceDeviationThresholdFactor\";\r\n    bytes32 internal constant SETTING_ISSUANCE_RATIO = \"issuanceRatio\";\r\n    bytes32 internal constant SETTING_FEE_PERIOD_DURATION = \"feePeriodDuration\";\r\n    bytes32 internal constant SETTING_TARGET_THRESHOLD = \"targetThreshold\";\r\n    bytes32 internal constant SETTING_LIQUIDATION_DELAY = \"liquidationDelay\";\r\n    bytes32 internal constant SETTING_LIQUIDATION_RATIO = \"liquidationRatio\";\r\n    bytes32 internal constant SETTING_LIQUIDATION_PENALTY = \"liquidationPenalty\";\r\n    bytes32 internal constant SETTING_RATE_STALE_PERIOD = \"rateStalePeriod\";\r\n    bytes32 internal constant SETTING_EXCHANGE_FEE_RATE = \"exchangeFeeRate\";\r\n    bytes32 internal constant SETTING_MINIMUM_STAKE_TIME = \"minimumStakeTime\";\r\n    bytes32 internal constant SETTING_AGGREGATOR_WARNING_FLAGS = \"aggregatorWarningFlags\";\r\n    bytes32 internal constant SETTING_TRADING_REWARDS_ENABLED = \"tradingRewardsEnabled\";\r\n    bytes32 internal constant SETTING_DEBT_SNAPSHOT_STALE_TIME = \"debtSnapshotStaleTime\";\r\n    bytes32 internal constant SETTING_CROSS_DOMAIN_DEPOSIT_GAS_LIMIT = \"crossDomainDepositGasLimit\";\r\n    bytes32 internal constant SETTING_CROSS_DOMAIN_ESCROW_GAS_LIMIT = \"crossDomainEscrowGasLimit\";\r\n    bytes32 internal constant SETTING_CROSS_DOMAIN_REWARD_GAS_LIMIT = \"crossDomainRewardGasLimit\";\r\n    bytes32 internal constant SETTING_CROSS_DOMAIN_WITHDRAWAL_GAS_LIMIT = \"crossDomainWithdrawalGasLimit\";\r\n    bytes32 internal constant SETTING_ETHER_WRAPPER_MAX_ETH = \"etherWrapperMaxETH\";\r\n    bytes32 internal constant SETTING_ETHER_WRAPPER_MINT_FEE_RATE = \"etherWrapperMintFeeRate\";\r\n    bytes32 internal constant SETTING_ETHER_WRAPPER_BURN_FEE_RATE = \"etherWrapperBurnFeeRate\";\r\n    bytes32 internal constant SETTING_ATOMIC_MAX_VOLUME_PER_BLOCK = \"atomicMaxVolumePerBlock\";\r\n    bytes32 internal constant SETTING_ATOMIC_TWAP_WINDOW = \"atomicTwapWindow\";\r\n    bytes32 internal constant SETTING_ATOMIC_EQUIVALENT_FOR_DEX_PRICING = \"atomicEquivalentForDexPricing\";\r\n    bytes32 internal constant SETTING_ATOMIC_EXCHANGE_FEE_RATE = \"atomicExchangeFeeRate\";\r\n    bytes32 internal constant SETTING_ATOMIC_PRICE_BUFFER = \"atomicPriceBuffer\";\r\n    bytes32 internal constant SETTING_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW = \"atomicVolConsiderationWindow\";\r\n    bytes32 internal constant SETTING_ATOMIC_VOLATILITY_UPDATE_THRESHOLD = \"atomicVolUpdateThreshold\";\r\n\r\n    bytes32 internal constant CONTRACT_FLEXIBLESTORAGE = \"FlexibleStorage\";\r\n\r\n    enum CrossDomainMessageGasLimits {Deposit, Escrow, Reward, Withdrawal}\r\n\r\n    constructor(address _resolver) internal MixinResolver(_resolver) {}\r\n\r\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {\r\n        addresses = new bytes32[](1);\r\n        addresses[0] = CONTRACT_FLEXIBLESTORAGE;\r\n    }\r\n\r\n    function flexibleStorage() internal view returns (IFlexibleStorage) {\r\n        return IFlexibleStorage(requireAndGetAddress(CONTRACT_FLEXIBLESTORAGE));\r\n    }\r\n\r\n    function _getGasLimitSetting(CrossDomainMessageGasLimits gasLimitType) internal pure returns (bytes32) {\r\n        if (gasLimitType == CrossDomainMessageGasLimits.Deposit) {\r\n            return SETTING_CROSS_DOMAIN_DEPOSIT_GAS_LIMIT;\r\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Escrow) {\r\n            return SETTING_CROSS_DOMAIN_ESCROW_GAS_LIMIT;\r\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Reward) {\r\n            return SETTING_CROSS_DOMAIN_REWARD_GAS_LIMIT;\r\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Withdrawal) {\r\n            return SETTING_CROSS_DOMAIN_WITHDRAWAL_GAS_LIMIT;\r\n        } else {\r\n            revert(\"Unknown gas limit type\");\r\n        }\r\n    }\r\n\r\n    function getCrossDomainMessageGasLimit(CrossDomainMessageGasLimits gasLimitType) internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, _getGasLimitSetting(gasLimitType));\r\n    }\r\n\r\n    function getTradingRewardsEnabled() internal view returns (bool) {\r\n        return flexibleStorage().getBoolValue(SETTING_CONTRACT_NAME, SETTING_TRADING_REWARDS_ENABLED);\r\n    }\r\n\r\n    function getWaitingPeriodSecs() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_WAITING_PERIOD_SECS);\r\n    }\r\n\r\n    function getPriceDeviationThresholdFactor() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR);\r\n    }\r\n\r\n    function getIssuanceRatio() internal view returns (uint) {\r\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ISSUANCE_RATIO);\r\n    }\r\n\r\n    function getFeePeriodDuration() internal view returns (uint) {\r\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_FEE_PERIOD_DURATION);\r\n    }\r\n\r\n    function getTargetThreshold() internal view returns (uint) {\r\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_TARGET_THRESHOLD);\r\n    }\r\n\r\n    function getLiquidationDelay() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_DELAY);\r\n    }\r\n\r\n    function getLiquidationRatio() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_RATIO);\r\n    }\r\n\r\n    function getLiquidationPenalty() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_PENALTY);\r\n    }\r\n\r\n    function getRateStalePeriod() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_RATE_STALE_PERIOD);\r\n    }\r\n\r\n    function getExchangeFeeRate(bytes32 currencyKey) internal view returns (uint) {\r\n        return\r\n            flexibleStorage().getUIntValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_EXCHANGE_FEE_RATE, currencyKey))\r\n            );\r\n    }\r\n\r\n    function getMinimumStakeTime() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_MINIMUM_STAKE_TIME);\r\n    }\r\n\r\n    function getAggregatorWarningFlags() internal view returns (address) {\r\n        return flexibleStorage().getAddressValue(SETTING_CONTRACT_NAME, SETTING_AGGREGATOR_WARNING_FLAGS);\r\n    }\r\n\r\n    function getDebtSnapshotStaleTime() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_DEBT_SNAPSHOT_STALE_TIME);\r\n    }\r\n\r\n    function getEtherWrapperMaxETH() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ETHER_WRAPPER_MAX_ETH);\r\n    }\r\n\r\n    function getEtherWrapperMintFeeRate() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ETHER_WRAPPER_MINT_FEE_RATE);\r\n    }\r\n\r\n    function getEtherWrapperBurnFeeRate() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ETHER_WRAPPER_BURN_FEE_RATE);\r\n    }\r\n\r\n    function getAtomicMaxVolumePerBlock() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ATOMIC_MAX_VOLUME_PER_BLOCK);\r\n    }\r\n\r\n    function getAtomicTwapWindow() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ATOMIC_TWAP_WINDOW);\r\n    }\r\n\r\n    function getAtomicEquivalentForDexPricing(bytes32 currencyKey) internal view returns (address) {\r\n        return\r\n            flexibleStorage().getAddressValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_ATOMIC_EQUIVALENT_FOR_DEX_PRICING, currencyKey))\r\n            );\r\n    }\r\n\r\n    function getAtomicExchangeFeeRate(bytes32 currencyKey) internal view returns (uint) {\r\n        return\r\n            flexibleStorage().getUIntValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_ATOMIC_EXCHANGE_FEE_RATE, currencyKey))\r\n            );\r\n    }\r\n\r\n    function getAtomicPriceBuffer(bytes32 currencyKey) internal view returns (uint) {\r\n        return\r\n            flexibleStorage().getUIntValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_ATOMIC_PRICE_BUFFER, currencyKey))\r\n            );\r\n    }\r\n\r\n    function getAtomicVolatilityConsiderationWindow(bytes32 currencyKey) internal view returns (uint) {\r\n        return\r\n            flexibleStorage().getUIntValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW, currencyKey))\r\n            );\r\n    }\r\n\r\n    function getAtomicVolatilityUpdateThreshold(bytes32 currencyKey) internal view returns (uint) {\r\n        return\r\n            flexibleStorage().getUIntValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_ATOMIC_VOLATILITY_UPDATE_THRESHOLD, currencyKey))\r\n            );\r\n    }\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/isystemsettings\r\ninterface ISystemSettings {\r\n    // Views\r\n    function waitingPeriodSecs() external view returns (uint);\r\n\r\n    function priceDeviationThresholdFactor() external view returns (uint);\r\n\r\n    function issuanceRatio() external view returns (uint);\r\n\r\n    function feePeriodDuration() external view returns (uint);\r\n\r\n    function targetThreshold() external view returns (uint);\r\n\r\n    function liquidationDelay() external view returns (uint);\r\n\r\n    function liquidationRatio() external view returns (uint);\r\n\r\n    function liquidationPenalty() external view returns (uint);\r\n\r\n    function rateStalePeriod() external view returns (uint);\r\n\r\n    function exchangeFeeRate(bytes32 currencyKey) external view returns (uint);\r\n\r\n    function minimumStakeTime() external view returns (uint);\r\n\r\n    function debtSnapshotStaleTime() external view returns (uint);\r\n\r\n    function aggregatorWarningFlags() external view returns (address);\r\n\r\n    function tradingRewardsEnabled() external view returns (bool);\r\n\r\n    // function crossDomainMessageGasLimit(CrossDomainMessageGasLimits gasLimitType) external view returns (uint);\r\n\r\n    function etherWrapperMaxETH() external view returns (uint);\r\n\r\n    function etherWrapperBurnFeeRate() external view returns (uint);\r\n\r\n    function etherWrapperMintFeeRate() external view returns (uint);\r\n\r\n    function atomicMaxVolumePerBlock() external view returns (uint);\r\n\r\n    function atomicTwapWindow() external view returns (uint);\r\n\r\n    function atomicEquivalentForDexPricing(bytes32 currencyKey) external view returns (address);\r\n\r\n    function atomicExchangeFeeRate(bytes32 currencyKey) external view returns (uint);\r\n\r\n    function atomicPriceBuffer(bytes32 currencyKey) external view returns (uint);\r\n\r\n    function atomicVolatilityConsiderationWindow(bytes32 currencyKey) external view returns (uint);\r\n\r\n    function atomicVolatilityUpdateThreshold(bytes32 currencyKey) external view returns (uint);\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Libraries\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\r\nlibrary SafeDecimalMath {\r\n    using SafeMath for uint;\r\n\r\n    /* Number of decimal places in the representations. */\r\n    uint8 public constant decimals = 18;\r\n    uint8 public constant highPrecisionDecimals = 27;\r\n\r\n    /* The number representing 1.0. */\r\n    uint public constant UNIT = 10**uint(decimals);\r\n\r\n    /* The number representing 1.0 for higher fidelity numbers. */\r\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\r\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\r\n\r\n    /**\r\n     * @return Provides an interface to UNIT.\r\n     */\r\n    function unit() external pure returns (uint) {\r\n        return UNIT;\r\n    }\r\n\r\n    /**\r\n     * @return Provides an interface to PRECISE_UNIT.\r\n     */\r\n    function preciseUnit() external pure returns (uint) {\r\n        return PRECISE_UNIT;\r\n    }\r\n\r\n    /**\r\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\r\n     * decimals.\r\n     *\r\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\r\n     * so that product must be less than 2**256. As this is an integer division,\r\n     * the internal division always rounds down. This helps save on gas. Rounding\r\n     * is more expensive on gas.\r\n     */\r\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\r\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\r\n        return x.mul(y) / UNIT;\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely multiplying x and y, interpreting the operands\r\n     * as fixed-point decimals of the specified precision unit.\r\n     *\r\n     * @dev The operands should be in the form of a the specified unit factor which will be\r\n     * divided out after the product of x and y is evaluated, so that product must be\r\n     * less than 2**256.\r\n     *\r\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\r\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\r\n     * (eg. small fractions or percentages).\r\n     */\r\n    function _multiplyDecimalRound(\r\n        uint x,\r\n        uint y,\r\n        uint precisionUnit\r\n    ) private pure returns (uint) {\r\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\r\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\r\n\r\n        if (quotientTimesTen % 10 >= 5) {\r\n            quotientTimesTen += 10;\r\n        }\r\n\r\n        return quotientTimesTen / 10;\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely multiplying x and y, interpreting the operands\r\n     * as fixed-point decimals of a precise unit.\r\n     *\r\n     * @dev The operands should be in the precise unit factor which will be\r\n     * divided out after the product of x and y is evaluated, so that product must be\r\n     * less than 2**256.\r\n     *\r\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\r\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\r\n     * (eg. small fractions or percentages).\r\n     */\r\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\r\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely multiplying x and y, interpreting the operands\r\n     * as fixed-point decimals of a standard unit.\r\n     *\r\n     * @dev The operands should be in the standard unit factor which will be\r\n     * divided out after the product of x and y is evaluated, so that product must be\r\n     * less than 2**256.\r\n     *\r\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\r\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\r\n     * (eg. small fractions or percentages).\r\n     */\r\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\r\n        return _multiplyDecimalRound(x, y, UNIT);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is a high\r\n     * precision decimal.\r\n     *\r\n     * @dev y is divided after the product of x and the standard precision unit\r\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\r\n     * this is an integer division, the result is always rounded down.\r\n     * This helps save on gas. Rounding is more expensive on gas.\r\n     */\r\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\r\n        /* Reintroduce the UNIT factor that will be divided out by y. */\r\n        return x.mul(UNIT).div(y);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is as a rounded\r\n     * decimal in the precision unit specified in the parameter.\r\n     *\r\n     * @dev y is divided after the product of x and the specified precision unit\r\n     * is evaluated, so the product of x and the specified precision unit must\r\n     * be less than 2**256. The result is rounded to the nearest increment.\r\n     */\r\n    function _divideDecimalRound(\r\n        uint x,\r\n        uint y,\r\n        uint precisionUnit\r\n    ) private pure returns (uint) {\r\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\r\n\r\n        if (resultTimesTen % 10 >= 5) {\r\n            resultTimesTen += 10;\r\n        }\r\n\r\n        return resultTimesTen / 10;\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is as a rounded\r\n     * standard precision decimal.\r\n     *\r\n     * @dev y is divided after the product of x and the standard precision unit\r\n     * is evaluated, so the product of x and the standard precision unit must\r\n     * be less than 2**256. The result is rounded to the nearest increment.\r\n     */\r\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\r\n        return _divideDecimalRound(x, y, UNIT);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is as a rounded\r\n     * high precision decimal.\r\n     *\r\n     * @dev y is divided after the product of x and the high precision unit\r\n     * is evaluated, so the product of x and the high precision unit must\r\n     * be less than 2**256. The result is rounded to the nearest increment.\r\n     */\r\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\r\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\r\n    }\r\n\r\n    /**\r\n     * @dev Convert a standard decimal representation to a high precision one.\r\n     */\r\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\r\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\r\n    }\r\n\r\n    /**\r\n     * @dev Convert a high precision decimal to a standard decimal representation.\r\n     */\r\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\r\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\r\n\r\n        if (quotientTimesTen % 10 >= 5) {\r\n            quotientTimesTen += 10;\r\n        }\r\n\r\n        return quotientTimesTen / 10;\r\n    }\r\n\r\n    // Computes `a - b`, setting the value to 0 if b > a.\r\n    function floorsub(uint a, uint b) internal pure returns (uint) {\r\n        return b >= a ? 0 : a - b;\r\n    }\r\n}\r\n\r\n\r\n// Inheritance\r\n\r\n\r\n// Libraries\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/contracts/systemsettings\r\ncontract SystemSettings is Owned, MixinSystemSettings, ISystemSettings {\r\n    using SafeMath for uint;\r\n    using SafeDecimalMath for uint;\r\n\r\n    // No more synths may be issued than the value of SNX backing them.\r\n    uint public constant MAX_ISSUANCE_RATIO = 1e18;\r\n\r\n    // The fee period must be between 1 day and 60 days.\r\n    uint public constant MIN_FEE_PERIOD_DURATION = 1 days;\r\n    uint public constant MAX_FEE_PERIOD_DURATION = 60 days;\r\n\r\n    uint public constant MAX_TARGET_THRESHOLD = 50;\r\n\r\n    uint public constant MAX_LIQUIDATION_RATIO = 1e18; // 100% issuance ratio\r\n\r\n    uint public constant MAX_LIQUIDATION_PENALTY = 1e18 / 4; // Max 25% liquidation penalty / bonus\r\n\r\n    uint public constant RATIO_FROM_TARGET_BUFFER = 2e18; // 200% - mininimum buffer between issuance ratio and liquidation ratio\r\n\r\n    uint public constant MAX_LIQUIDATION_DELAY = 30 days;\r\n    uint public constant MIN_LIQUIDATION_DELAY = 1 days;\r\n\r\n    // Exchange fee may not exceed 10%.\r\n    uint public constant MAX_EXCHANGE_FEE_RATE = 1e18 / 10;\r\n\r\n    // Minimum Stake time may not exceed 1 weeks.\r\n    uint public constant MAX_MINIMUM_STAKE_TIME = 1 weeks;\r\n\r\n    uint public constant MAX_CROSS_DOMAIN_GAS_LIMIT = 8e6;\r\n    uint public constant MIN_CROSS_DOMAIN_GAS_LIMIT = 3e6;\r\n\r\n    // TODO(liamz): these are simple bounds for the mint/burn fee rates (max 100%).\r\n    // Can we come up with better values?\r\n    uint public constant MAX_ETHER_WRAPPER_MINT_FEE_RATE = 1e18;\r\n    uint public constant MAX_ETHER_WRAPPER_BURN_FEE_RATE = 1e18;\r\n\r\n    // Atomic block volume limit is encoded as uint192.\r\n    uint public constant MAX_ATOMIC_VOLUME_PER_BLOCK = uint192(-1);\r\n\r\n    // TWAP window must be between 1 min and 1 day.\r\n    uint public constant MIN_ATOMIC_TWAP_WINDOW = 60;\r\n    uint public constant MAX_ATOMIC_TWAP_WINDOW = 86400;\r\n\r\n    // Volatility consideration window must be between 1 min and 1 day.\r\n    uint public constant MIN_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW = 60;\r\n    uint public constant MAX_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW = 86400;\r\n\r\n    constructor(address _owner, address _resolver) public Owned(_owner) MixinSystemSettings(_resolver) {}\r\n\r\n    // ========== VIEWS ==========\r\n\r\n    // SIP-37 Fee Reclamation\r\n    // The number of seconds after an exchange is executed that must be waited\r\n    // before settlement.\r\n    function waitingPeriodSecs() external view returns (uint) {\r\n        return getWaitingPeriodSecs();\r\n    }\r\n\r\n    // SIP-65 Decentralized Circuit Breaker\r\n    // The factor amount expressed in decimal format\r\n    // E.g. 3e18 = factor 3, meaning movement up to 3x and above or down to 1/3x and below\r\n    function priceDeviationThresholdFactor() external view returns (uint) {\r\n        return getPriceDeviationThresholdFactor();\r\n    }\r\n\r\n    // The raio of collateral\r\n    // Expressed in 18 decimals. So 800% cratio is 100/800 = 0.125 (0.125e18)\r\n    function issuanceRatio() external view returns (uint) {\r\n        return getIssuanceRatio();\r\n    }\r\n\r\n    // How long a fee period lasts at a minimum. It is required for\r\n    // anyone to roll over the periods, so they are not guaranteed\r\n    // to roll over at exactly this duration, but the contract enforces\r\n    // that they cannot roll over any quicker than this duration.\r\n    function feePeriodDuration() external view returns (uint) {\r\n        return getFeePeriodDuration();\r\n    }\r\n\r\n    // Users are unable to claim fees if their collateralisation ratio drifts out of target threshold\r\n    function targetThreshold() external view returns (uint) {\r\n        return getTargetThreshold();\r\n    }\r\n\r\n    // SIP-15 Liquidations\r\n    // liquidation time delay after address flagged (seconds)\r\n    function liquidationDelay() external view returns (uint) {\r\n        return getLiquidationDelay();\r\n    }\r\n\r\n    // SIP-15 Liquidations\r\n    // issuance ratio when account can be flagged for liquidation (with 18 decimals), e.g 0.5 issuance ratio\r\n    // when flag means 1/0.5 = 200% cratio\r\n    function liquidationRatio() external view returns (uint) {\r\n        return getLiquidationRatio();\r\n    }\r\n\r\n    // SIP-15 Liquidations\r\n    // penalty taken away from target of liquidation (with 18 decimals). E.g. 10% is 0.1e18\r\n    function liquidationPenalty() external view returns (uint) {\r\n        return getLiquidationPenalty();\r\n    }\r\n\r\n    // How long will the ExchangeRates contract assume the rate of any asset is correct\r\n    function rateStalePeriod() external view returns (uint) {\r\n        return getRateStalePeriod();\r\n    }\r\n\r\n    function exchangeFeeRate(bytes32 currencyKey) external view returns (uint) {\r\n        return getExchangeFeeRate(currencyKey);\r\n    }\r\n\r\n    function minimumStakeTime() external view returns (uint) {\r\n        return getMinimumStakeTime();\r\n    }\r\n\r\n    function debtSnapshotStaleTime() external view returns (uint) {\r\n        return getDebtSnapshotStaleTime();\r\n    }\r\n\r\n    function aggregatorWarningFlags() external view returns (address) {\r\n        return getAggregatorWarningFlags();\r\n    }\r\n\r\n    // SIP-63 Trading incentives\r\n    // determines if Exchanger records fee entries in TradingRewards\r\n    function tradingRewardsEnabled() external view returns (bool) {\r\n        return getTradingRewardsEnabled();\r\n    }\r\n\r\n    function crossDomainMessageGasLimit(CrossDomainMessageGasLimits gasLimitType) external view returns (uint) {\r\n        return getCrossDomainMessageGasLimit(gasLimitType);\r\n    }\r\n\r\n    // SIP 112: ETH Wrappr\r\n    // The maximum amount of ETH held by the EtherWrapper.\r\n    function etherWrapperMaxETH() external view returns (uint) {\r\n        return getEtherWrapperMaxETH();\r\n    }\r\n\r\n    // SIP 112: ETH Wrappr\r\n    // The fee for depositing ETH into the EtherWrapper.\r\n    function etherWrapperMintFeeRate() external view returns (uint) {\r\n        return getEtherWrapperMintFeeRate();\r\n    }\r\n\r\n    // SIP 112: ETH Wrappr\r\n    // The fee for burning sETH and releasing ETH from the EtherWrapper.\r\n    function etherWrapperBurnFeeRate() external view returns (uint) {\r\n        return getEtherWrapperBurnFeeRate();\r\n    }\r\n\r\n    // SIP-120 Atomic exchanges\r\n    // max allowed volume per block for atomic exchanges\r\n    function atomicMaxVolumePerBlock() external view returns (uint) {\r\n        return getAtomicMaxVolumePerBlock();\r\n    }\r\n\r\n    // SIP-120 Atomic exchanges\r\n    // time window (in seconds) for TWAP prices when considered for atomic exchanges\r\n    function atomicTwapWindow() external view returns (uint) {\r\n        return getAtomicTwapWindow();\r\n    }\r\n\r\n    // SIP-120 Atomic exchanges\r\n    // equivalent asset to use for a synth when considering external prices for atomic exchanges\r\n    function atomicEquivalentForDexPricing(bytes32 currencyKey) external view returns (address) {\r\n        return getAtomicEquivalentForDexPricing(currencyKey);\r\n    }\r\n\r\n    // SIP-120 Atomic exchanges\r\n    // fee rate override for atomic exchanges into a synth\r\n    function atomicExchangeFeeRate(bytes32 currencyKey) external view returns (uint) {\r\n        return getAtomicExchangeFeeRate(currencyKey);\r\n    }\r\n\r\n    // SIP-120 Atomic exchanges\r\n    // price dampener for chainlink prices when considered for atomic exchanges\r\n    function atomicPriceBuffer(bytes32 currencyKey) external view returns (uint) {\r\n        return getAtomicPriceBuffer(currencyKey);\r\n    }\r\n\r\n    // SIP-120 Atomic exchanges\r\n    // consideration window for determining synth volatility\r\n    function atomicVolatilityConsiderationWindow(bytes32 currencyKey) external view returns (uint) {\r\n        return getAtomicVolatilityConsiderationWindow(currencyKey);\r\n    }\r\n\r\n    // SIP-120 Atomic exchanges\r\n    // update threshold for determining synth volatility\r\n    function atomicVolatilityUpdateThreshold(bytes32 currencyKey) external view returns (uint) {\r\n        return getAtomicVolatilityUpdateThreshold(currencyKey);\r\n    }\r\n\r\n    // ========== RESTRICTED ==========\r\n\r\n    function setCrossDomainMessageGasLimit(CrossDomainMessageGasLimits _gasLimitType, uint _crossDomainMessageGasLimit)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _crossDomainMessageGasLimit >= MIN_CROSS_DOMAIN_GAS_LIMIT &&\r\n                _crossDomainMessageGasLimit <= MAX_CROSS_DOMAIN_GAS_LIMIT,\r\n            \"Out of range xDomain gasLimit\"\r\n        );\r\n        flexibleStorage().setUIntValue(\r\n            SETTING_CONTRACT_NAME,\r\n            _getGasLimitSetting(_gasLimitType),\r\n            _crossDomainMessageGasLimit\r\n        );\r\n        emit CrossDomainMessageGasLimitChanged(_gasLimitType, _crossDomainMessageGasLimit);\r\n    }\r\n\r\n    function setTradingRewardsEnabled(bool _tradingRewardsEnabled) external onlyOwner {\r\n        flexibleStorage().setBoolValue(SETTING_CONTRACT_NAME, SETTING_TRADING_REWARDS_ENABLED, _tradingRewardsEnabled);\r\n        emit TradingRewardsEnabled(_tradingRewardsEnabled);\r\n    }\r\n\r\n    function setWaitingPeriodSecs(uint _waitingPeriodSecs) external onlyOwner {\r\n        flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_WAITING_PERIOD_SECS, _waitingPeriodSecs);\r\n        emit WaitingPeriodSecsUpdated(_waitingPeriodSecs);\r\n    }\r\n\r\n    function setPriceDeviationThresholdFactor(uint _priceDeviationThresholdFactor) external onlyOwner {\r\n        flexibleStorage().setUIntValue(\r\n            SETTING_CONTRACT_NAME,\r\n            SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR,\r\n            _priceDeviationThresholdFactor\r\n        );\r\n        emit PriceDeviationThresholdUpdated(_priceDeviationThresholdFactor);\r\n    }\r\n\r\n    function setIssuanceRatio(uint _issuanceRatio) external onlyOwner {\r\n        require(_issuanceRatio <= MAX_ISSUANCE_RATIO, \"New issuance ratio cannot exceed MAX_ISSUANCE_RATIO\");\r\n        flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_ISSUANCE_RATIO, _issuanceRatio);\r\n        emit IssuanceRatioUpdated(_issuanceRatio);\r\n    }\r\n\r\n    function setFeePeriodDuration(uint _feePeriodDuration) external onlyOwner {\r\n        require(_feePeriodDuration >= MIN_FEE_PERIOD_DURATION, \"value < MIN_FEE_PERIOD_DURATION\");\r\n        require(_feePeriodDuration <= MAX_FEE_PERIOD_DURATION, \"value > MAX_FEE_PERIOD_DURATION\");\r\n\r\n        flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_FEE_PERIOD_DURATION, _feePeriodDuration);\r\n\r\n        emit FeePeriodDurationUpdated(_feePeriodDuration);\r\n    }\r\n\r\n    function setTargetThreshold(uint _percent) external onlyOwner {\r\n        require(_percent <= MAX_TARGET_THRESHOLD, \"Threshold too high\");\r\n\r\n        uint _targetThreshold = _percent.mul(SafeDecimalMath.unit()).div(100);\r\n\r\n        flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_TARGET_THRESHOLD, _targetThreshold);\r\n\r\n        emit TargetThresholdUpdated(_targetThreshold);\r\n    }\r\n\r\n    function setLiquidationDelay(uint time) external onlyOwner {\r\n        require(time <= MAX_LIQUIDATION_DELAY, \"Must be less than 30 days\");\r\n        require(time >= MIN_LIQUIDATION_DELAY, \"Must be greater than 1 day\");\r\n\r\n        flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_DELAY, time);\r\n\r\n        emit LiquidationDelayUpdated(time);\r\n    }\r\n\r\n    // The collateral / issuance ratio ( debt / collateral ) is higher when there is less collateral backing their debt\r\n    // Upper bound liquidationRatio is 1 + penalty (100% + 10% = 110%) to allow collateral value to cover debt and liquidation penalty\r\n    function setLiquidationRatio(uint _liquidationRatio) external onlyOwner {\r\n        require(\r\n            _liquidationRatio <= MAX_LIQUIDATION_RATIO.divideDecimal(SafeDecimalMath.unit().add(getLiquidationPenalty())),\r\n            \"liquidationRatio > MAX_LIQUIDATION_RATIO / (1 + penalty)\"\r\n        );\r\n\r\n        // MIN_LIQUIDATION_RATIO is a product of target issuance ratio * RATIO_FROM_TARGET_BUFFER\r\n        // Ensures that liquidation ratio is set so that there is a buffer between the issuance ratio and liquidation ratio.\r\n        uint MIN_LIQUIDATION_RATIO = getIssuanceRatio().multiplyDecimal(RATIO_FROM_TARGET_BUFFER);\r\n        require(_liquidationRatio >= MIN_LIQUIDATION_RATIO, \"liquidationRatio < MIN_LIQUIDATION_RATIO\");\r\n\r\n        flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_RATIO, _liquidationRatio);\r\n\r\n        emit LiquidationRatioUpdated(_liquidationRatio);\r\n    }\r\n\r\n    function setLiquidationPenalty(uint penalty) external onlyOwner {\r\n        require(penalty <= MAX_LIQUIDATION_PENALTY, \"penalty > MAX_LIQUIDATION_PENALTY\");\r\n\r\n        flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_PENALTY, penalty);\r\n\r\n        emit LiquidationPenaltyUpdated(penalty);\r\n    }\r\n\r\n    function setRateStalePeriod(uint period) external onlyOwner {\r\n        flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_RATE_STALE_PERIOD, period);\r\n\r\n        emit RateStalePeriodUpdated(period);\r\n    }\r\n\r\n    function setExchangeFeeRateForSynths(bytes32[] calldata synthKeys, uint256[] calldata exchangeFeeRates)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(synthKeys.length == exchangeFeeRates.length, \"Array lengths dont match\");\r\n        for (uint i = 0; i < synthKeys.length; i++) {\r\n            require(exchangeFeeRates[i] <= MAX_EXCHANGE_FEE_RATE, \"MAX_EXCHANGE_FEE_RATE exceeded\");\r\n            flexibleStorage().setUIntValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_EXCHANGE_FEE_RATE, synthKeys[i])),\r\n                exchangeFeeRates[i]\r\n            );\r\n            emit ExchangeFeeUpdated(synthKeys[i], exchangeFeeRates[i]);\r\n        }\r\n    }\r\n\r\n    function setMinimumStakeTime(uint _seconds) external onlyOwner {\r\n        require(_seconds <= MAX_MINIMUM_STAKE_TIME, \"stake time exceed maximum 1 week\");\r\n        flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_MINIMUM_STAKE_TIME, _seconds);\r\n        emit MinimumStakeTimeUpdated(_seconds);\r\n    }\r\n\r\n    function setDebtSnapshotStaleTime(uint _seconds) external onlyOwner {\r\n        flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_DEBT_SNAPSHOT_STALE_TIME, _seconds);\r\n        emit DebtSnapshotStaleTimeUpdated(_seconds);\r\n    }\r\n\r\n    function setAggregatorWarningFlags(address _flags) external onlyOwner {\r\n        require(_flags != address(0), \"Valid address must be given\");\r\n        flexibleStorage().setAddressValue(SETTING_CONTRACT_NAME, SETTING_AGGREGATOR_WARNING_FLAGS, _flags);\r\n        emit AggregatorWarningFlagsUpdated(_flags);\r\n    }\r\n\r\n    function setEtherWrapperMaxETH(uint _maxETH) external onlyOwner {\r\n        flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_ETHER_WRAPPER_MAX_ETH, _maxETH);\r\n        emit EtherWrapperMaxETHUpdated(_maxETH);\r\n    }\r\n\r\n    function setEtherWrapperMintFeeRate(uint _rate) external onlyOwner {\r\n        require(_rate <= MAX_ETHER_WRAPPER_MINT_FEE_RATE, \"rate > MAX_ETHER_WRAPPER_MINT_FEE_RATE\");\r\n        flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_ETHER_WRAPPER_MINT_FEE_RATE, _rate);\r\n        emit EtherWrapperMintFeeRateUpdated(_rate);\r\n    }\r\n\r\n    function setEtherWrapperBurnFeeRate(uint _rate) external onlyOwner {\r\n        require(_rate <= MAX_ETHER_WRAPPER_BURN_FEE_RATE, \"rate > MAX_ETHER_WRAPPER_BURN_FEE_RATE\");\r\n        flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_ETHER_WRAPPER_BURN_FEE_RATE, _rate);\r\n        emit EtherWrapperBurnFeeRateUpdated(_rate);\r\n    }\r\n\r\n    function setAtomicMaxVolumePerBlock(uint _maxVolume) external onlyOwner {\r\n        require(_maxVolume <= MAX_ATOMIC_VOLUME_PER_BLOCK, \"Atomic max volume exceed maximum uint192\");\r\n        flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_ATOMIC_MAX_VOLUME_PER_BLOCK, _maxVolume);\r\n        emit AtomicMaxVolumePerBlockUpdated(_maxVolume);\r\n    }\r\n\r\n    function setAtomicTwapWindow(uint _window) external onlyOwner {\r\n        require(_window >= MIN_ATOMIC_TWAP_WINDOW, \"Atomic twap window under minimum 1 min\");\r\n        require(_window <= MAX_ATOMIC_TWAP_WINDOW, \"Atomic twap window exceed maximum 1 day\");\r\n        flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_ATOMIC_TWAP_WINDOW, _window);\r\n        emit AtomicTwapWindowUpdated(_window);\r\n    }\r\n\r\n    function setAtomicEquivalentForDexPricing(bytes32 _currencyKey, address _equivalent) external onlyOwner {\r\n        flexibleStorage().setAddressValue(\r\n            SETTING_CONTRACT_NAME,\r\n            keccak256(abi.encodePacked(SETTING_ATOMIC_EQUIVALENT_FOR_DEX_PRICING, _currencyKey)),\r\n            _equivalent\r\n        );\r\n        emit AtomicEquivalentForDexPricingUpdated(_currencyKey, _equivalent);\r\n    }\r\n\r\n    function setAtomicExchangeFeeRate(bytes32 _currencyKey, uint256 _exchangeFeeRate) external onlyOwner {\r\n        require(_exchangeFeeRate <= MAX_EXCHANGE_FEE_RATE, \"MAX_EXCHANGE_FEE_RATE exceeded\");\r\n        flexibleStorage().setUIntValue(\r\n            SETTING_CONTRACT_NAME,\r\n            keccak256(abi.encodePacked(SETTING_ATOMIC_EXCHANGE_FEE_RATE, _currencyKey)),\r\n            _exchangeFeeRate\r\n        );\r\n        emit AtomicExchangeFeeUpdated(_currencyKey, _exchangeFeeRate);\r\n    }\r\n\r\n    function setAtomicPriceBuffer(bytes32 _currencyKey, uint _buffer) external onlyOwner {\r\n        flexibleStorage().setUIntValue(\r\n            SETTING_CONTRACT_NAME,\r\n            keccak256(abi.encodePacked(SETTING_ATOMIC_PRICE_BUFFER, _currencyKey)),\r\n            _buffer\r\n        );\r\n        emit AtomicPriceBufferUpdated(_currencyKey, _buffer);\r\n    }\r\n\r\n    function setAtomicVolatilityConsiderationWindow(bytes32 _currencyKey, uint _window) external onlyOwner {\r\n        if (_window != 0) {\r\n            require(\r\n                _window >= MIN_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW,\r\n                \"Atomic volatility consideration window under minimum 1 min\"\r\n            );\r\n            require(\r\n                _window <= MAX_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW,\r\n                \"Atomic volatility consideration window exceed maximum 1 day\"\r\n            );\r\n        }\r\n        flexibleStorage().setUIntValue(\r\n            SETTING_CONTRACT_NAME,\r\n            keccak256(abi.encodePacked(SETTING_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW, _currencyKey)),\r\n            _window\r\n        );\r\n        emit AtomicVolatilityConsiderationWindowUpdated(_currencyKey, _window);\r\n    }\r\n\r\n    function setAtomicVolatilityUpdateThreshold(bytes32 _currencyKey, uint _threshold) external onlyOwner {\r\n        flexibleStorage().setUIntValue(\r\n            SETTING_CONTRACT_NAME,\r\n            keccak256(abi.encodePacked(SETTING_ATOMIC_VOLATILITY_UPDATE_THRESHOLD, _currencyKey)),\r\n            _threshold\r\n        );\r\n        emit AtomicVolatilityUpdateThresholdUpdated(_currencyKey, _threshold);\r\n    }\r\n\r\n    // ========== EVENTS ==========\r\n    event CrossDomainMessageGasLimitChanged(CrossDomainMessageGasLimits gasLimitType, uint newLimit);\r\n    event TradingRewardsEnabled(bool enabled);\r\n    event WaitingPeriodSecsUpdated(uint waitingPeriodSecs);\r\n    event PriceDeviationThresholdUpdated(uint threshold);\r\n    event IssuanceRatioUpdated(uint newRatio);\r\n    event FeePeriodDurationUpdated(uint newFeePeriodDuration);\r\n    event TargetThresholdUpdated(uint newTargetThreshold);\r\n    event LiquidationDelayUpdated(uint newDelay);\r\n    event LiquidationRatioUpdated(uint newRatio);\r\n    event LiquidationPenaltyUpdated(uint newPenalty);\r\n    event RateStalePeriodUpdated(uint rateStalePeriod);\r\n    event ExchangeFeeUpdated(bytes32 synthKey, uint newExchangeFeeRate);\r\n    event MinimumStakeTimeUpdated(uint minimumStakeTime);\r\n    event DebtSnapshotStaleTimeUpdated(uint debtSnapshotStaleTime);\r\n    event AggregatorWarningFlagsUpdated(address flags);\r\n    event EtherWrapperMaxETHUpdated(uint maxETH);\r\n    event EtherWrapperMintFeeRateUpdated(uint rate);\r\n    event EtherWrapperBurnFeeRateUpdated(uint rate);\r\n    event AtomicMaxVolumePerBlockUpdated(uint newMaxVolume);\r\n    event AtomicTwapWindowUpdated(uint newWindow);\r\n    event AtomicEquivalentForDexPricingUpdated(bytes32 synthKey, address equivalent);\r\n    event AtomicExchangeFeeUpdated(bytes32 synthKey, uint newExchangeFeeRate);\r\n    event AtomicPriceBufferUpdated(bytes32 synthKey, uint newBuffer);\r\n    event AtomicVolatilityConsiderationWindowUpdated(bytes32 synthKey, uint newVolatilityConsiderationWindow);\r\n    event AtomicVolatilityUpdateThresholdUpdated(bytes32 synthKey, uint newVolatilityUpdateThreshold);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"flags\",\"type\":\"address\"}],\"name\":\"AggregatorWarningFlagsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"synthKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"equivalent\",\"type\":\"address\"}],\"name\":\"AtomicEquivalentForDexPricingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"synthKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExchangeFeeRate\",\"type\":\"uint256\"}],\"name\":\"AtomicExchangeFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxVolume\",\"type\":\"uint256\"}],\"name\":\"AtomicMaxVolumePerBlockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"synthKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuffer\",\"type\":\"uint256\"}],\"name\":\"AtomicPriceBufferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWindow\",\"type\":\"uint256\"}],\"name\":\"AtomicTwapWindowUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"synthKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVolatilityConsiderationWindow\",\"type\":\"uint256\"}],\"name\":\"AtomicVolatilityConsiderationWindowUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"synthKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVolatilityUpdateThreshold\",\"type\":\"uint256\"}],\"name\":\"AtomicVolatilityUpdateThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum MixinSystemSettings.CrossDomainMessageGasLimits\",\"name\":\"gasLimitType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"CrossDomainMessageGasLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtSnapshotStaleTime\",\"type\":\"uint256\"}],\"name\":\"DebtSnapshotStaleTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"EtherWrapperBurnFeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxETH\",\"type\":\"uint256\"}],\"name\":\"EtherWrapperMaxETHUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"EtherWrapperMintFeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"synthKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExchangeFeeRate\",\"type\":\"uint256\"}],\"name\":\"ExchangeFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeePeriodDuration\",\"type\":\"uint256\"}],\"name\":\"FeePeriodDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRatio\",\"type\":\"uint256\"}],\"name\":\"IssuanceRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"LiquidationDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPenalty\",\"type\":\"uint256\"}],\"name\":\"LiquidationPenaltyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRatio\",\"type\":\"uint256\"}],\"name\":\"LiquidationRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumStakeTime\",\"type\":\"uint256\"}],\"name\":\"MinimumStakeTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"PriceDeviationThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rateStalePeriod\",\"type\":\"uint256\"}],\"name\":\"RateStalePeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTargetThreshold\",\"type\":\"uint256\"}],\"name\":\"TargetThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"TradingRewardsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"waitingPeriodSecs\",\"type\":\"uint256\"}],\"name\":\"WaitingPeriodSecsUpdated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ATOMIC_TWAP_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ATOMIC_VOLUME_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CROSS_DOMAIN_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ETHER_WRAPPER_BURN_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ETHER_WRAPPER_MINT_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_EXCHANGE_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_FEE_PERIOD_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ISSUANCE_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_LIQUIDATION_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_LIQUIDATION_PENALTY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_LIQUIDATION_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_MINIMUM_STAKE_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TARGET_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_ATOMIC_TWAP_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_CROSS_DOMAIN_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_FEE_PERIOD_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_LIQUIDATION_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATIO_FROM_TARGET_BUFFER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aggregatorWarningFlags\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"atomicEquivalentForDexPricing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"atomicExchangeFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"atomicMaxVolumePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"atomicPriceBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"atomicTwapWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"atomicVolatilityConsiderationWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"atomicVolatilityUpdateThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"enum MixinSystemSettings.CrossDomainMessageGasLimits\",\"name\":\"gasLimitType\",\"type\":\"uint8\"}],\"name\":\"crossDomainMessageGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debtSnapshotStaleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherWrapperBurnFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherWrapperMaxETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherWrapperMintFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"exchangeFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePeriodDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuanceRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidationPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceDeviationThresholdFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateStalePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rebuildCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract AddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolverAddressesRequired\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"addresses\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flags\",\"type\":\"address\"}],\"name\":\"setAggregatorWarningFlags\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_currencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_equivalent\",\"type\":\"address\"}],\"name\":\"setAtomicEquivalentForDexPricing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_currencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeFeeRate\",\"type\":\"uint256\"}],\"name\":\"setAtomicExchangeFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxVolume\",\"type\":\"uint256\"}],\"name\":\"setAtomicMaxVolumePerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_currencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_buffer\",\"type\":\"uint256\"}],\"name\":\"setAtomicPriceBuffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_window\",\"type\":\"uint256\"}],\"name\":\"setAtomicTwapWindow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_currencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_window\",\"type\":\"uint256\"}],\"name\":\"setAtomicVolatilityConsiderationWindow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_currencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setAtomicVolatilityUpdateThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"enum MixinSystemSettings.CrossDomainMessageGasLimits\",\"name\":\"_gasLimitType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_crossDomainMessageGasLimit\",\"type\":\"uint256\"}],\"name\":\"setCrossDomainMessageGasLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"setDebtSnapshotStaleTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setEtherWrapperBurnFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxETH\",\"type\":\"uint256\"}],\"name\":\"setEtherWrapperMaxETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setEtherWrapperMintFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"synthKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"exchangeFeeRates\",\"type\":\"uint256[]\"}],\"name\":\"setExchangeFeeRateForSynths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePeriodDuration\",\"type\":\"uint256\"}],\"name\":\"setFeePeriodDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_issuanceRatio\",\"type\":\"uint256\"}],\"name\":\"setIssuanceRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setLiquidationDelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"name\":\"setLiquidationPenalty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidationRatio\",\"type\":\"uint256\"}],\"name\":\"setLiquidationRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"setMinimumStakeTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceDeviationThresholdFactor\",\"type\":\"uint256\"}],\"name\":\"setPriceDeviationThresholdFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setRateStalePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setTargetThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingRewardsEnabled\",\"type\":\"bool\"}],\"name\":\"setTradingRewardsEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_waitingPeriodSecs\",\"type\":\"uint256\"}],\"name\":\"setWaitingPeriodSecs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingRewardsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"waitingPeriodSecs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SystemSettings","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000386d4369003dbd3aa0b35345303d1fa28f3054d600000000000000000000000033a0eefab850a842d3c203751fc287d6d402b0d7","EVMVersion":"Default","Library":"SafeDecimalMath:84d626b2bb4d0f064067e4bf80fce7055d8f3e7b","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://42fb36f2a5907b6260a89c3007290220b540846d0bda6901dfca72bf95932ffb"}]}