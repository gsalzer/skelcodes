{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/registry/implementations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IndexInterface {\\n    function master() external view returns (address);\\n}\\n\\ncontract Setup {\\n    address public defaultImplementation;\\n\\n    mapping(bytes4 => address) internal sigImplementations;\\n\\n    mapping(address => bytes4[]) internal implementationSigs;\\n}\\n\\ncontract Implementations is Setup {\\n    event LogSetDefaultImplementation(\\n        address indexed oldImplementation,\\n        address indexed newImplementation\\n    );\\n    event LogAddImplementation(address indexed implementation, bytes4[] sigs);\\n    event LogRemoveImplementation(\\n        address indexed implementation,\\n        bytes4[] sigs\\n    );\\n\\n    IndexInterface public immutable stakeAllIndex;\\n\\n    constructor(address _stakeAllIndex) {\\n        stakeAllIndex = IndexInterface(_stakeAllIndex);\\n    }\\n\\n    modifier isMaster() {\\n        require(\\n            msg.sender == stakeAllIndex.master(),\\n            \\\"Implementations: not-master\\\"\\n        );\\n        _;\\n    }\\n\\n    function setDefaultImplementation(address _defaultImplementation)\\n        external\\n        isMaster\\n    {\\n        require(\\n            _defaultImplementation != address(0),\\n            \\\"Implementations: _defaultImplementation address not valid\\\"\\n        );\\n        require(\\n            _defaultImplementation != defaultImplementation,\\n            \\\"Implementations: _defaultImplementation cannot be same\\\"\\n        );\\n        emit LogSetDefaultImplementation(\\n            defaultImplementation,\\n            _defaultImplementation\\n        );\\n        defaultImplementation = _defaultImplementation;\\n    }\\n\\n    function addImplementation(address _implementation, bytes4[] calldata _sigs)\\n        external\\n        isMaster\\n    {\\n        require(\\n            _implementation != address(0),\\n            \\\"Implementations: _implementation not valid.\\\"\\n        );\\n        require(\\n            implementationSigs[_implementation].length == 0,\\n            \\\"Implementations: _implementation already added.\\\"\\n        );\\n        for (uint256 i = 0; i < _sigs.length; i++) {\\n            bytes4 _sig = _sigs[i];\\n            require(\\n                sigImplementations[_sig] == address(0),\\n                \\\"Implementations: _sig already added\\\"\\n            );\\n            sigImplementations[_sig] = _implementation;\\n        }\\n        implementationSigs[_implementation] = _sigs;\\n        emit LogAddImplementation(_implementation, _sigs);\\n    }\\n\\n    function removeImplementation(address _implementation) external isMaster {\\n        require(\\n            _implementation != address(0),\\n            \\\"Implementations: _implementation not valid.\\\"\\n        );\\n        require(\\n            implementationSigs[_implementation].length != 0,\\n            \\\"Implementations: _implementation not found.\\\"\\n        );\\n        bytes4[] memory sigs = implementationSigs[_implementation];\\n        for (uint256 i = 0; i < sigs.length; i++) {\\n            bytes4 sig = sigs[i];\\n            delete sigImplementations[sig];\\n        }\\n        delete implementationSigs[_implementation];\\n        emit LogRemoveImplementation(_implementation, sigs);\\n    }\\n}\\n\\ncontract StakeAllImplementations is Implementations {\\n    constructor(address _stakeAllIndex)\\n        public\\n        Implementations(_stakeAllIndex)\\n    {}\\n\\n    function getImplementation(bytes4 _sig) external view returns (address) {\\n        address _implementation = sigImplementations[_sig];\\n        return\\n            _implementation == address(0)\\n                ? defaultImplementation\\n                : _implementation;\\n    }\\n\\n    function getImplementationSigs(address _impl)\\n        external\\n        view\\n        returns (bytes4[] memory)\\n    {\\n        return implementationSigs[_impl];\\n    }\\n\\n    function getSigImplementation(bytes4 _sig) external view returns (address) {\\n        return sigImplementations[_sig];\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeAllIndex\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4[]\",\"name\":\"sigs\",\"type\":\"bytes4[]\"}],\"name\":\"LogAddImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4[]\",\"name\":\"sigs\",\"type\":\"bytes4[]\"}],\"name\":\"LogRemoveImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"LogSetDefaultImplementation\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"_sigs\",\"type\":\"bytes4[]\"}],\"name\":\"addImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_sig\",\"type\":\"bytes4\"}],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"}],\"name\":\"getImplementationSigs\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_sig\",\"type\":\"bytes4\"}],\"name\":\"getSigImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"removeImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultImplementation\",\"type\":\"address\"}],\"name\":\"setDefaultImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAllIndex\",\"outputs\":[{\"internalType\":\"contract IndexInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakeAllImplementations","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000086d9b80cf2907843b4030c8aa60f1bc8d92a226c","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}