{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.8.0;\r\n\r\n// Sources flattened with hardhat v2.6.2 https://hardhat.org\r\n\r\n// File contracts/Math/Math.sol\r\n\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Math/SafeMath.sol\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Common/Context.sol\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ERC20/IERC20.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/Utils/Address.sol\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ERC20/ERC20.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\n \r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    \r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory __name, string memory __symbol) public {\r\n        _name = __name;\r\n        _symbol = __symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.approve(address spender, uint256 amount)\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for `accounts`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\r\n\r\n        _approve(account, _msgSender(), decreasedAllowance);\r\n        _burn(account, amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal virtual {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of `from`'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:using-hooks.adoc[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n// File contracts/Curve/IveFXS.sol\r\n\r\npragma abicoder v2;\r\n\r\ninterface IveFXS {\r\n\r\n    struct LockedBalance {\r\n        int128 amount;\r\n        uint256 end;\r\n    }\r\n\r\n    function commit_transfer_ownership(address addr) external;\r\n    function apply_transfer_ownership() external;\r\n    function commit_smart_wallet_checker(address addr) external;\r\n    function apply_smart_wallet_checker() external;\r\n    function toggleEmergencyUnlock() external;\r\n    function recoverERC20(address token_addr, uint256 amount) external;\r\n    function get_last_user_slope(address addr) external view returns (int128);\r\n    function user_point_history__ts(address _addr, uint256 _idx) external view returns (uint256);\r\n    function locked__end(address _addr) external view returns (uint256);\r\n    function checkpoint() external;\r\n    function deposit_for(address _addr, uint256 _value) external;\r\n    function create_lock(uint256 _value, uint256 _unlock_time) external;\r\n    function increase_amount(uint256 _value) external;\r\n    function increase_unlock_time(uint256 _unlock_time) external;\r\n    function withdraw() external;\r\n    function balanceOf(address addr) external view returns (uint256);\r\n    function balanceOf(address addr, uint256 _t) external view returns (uint256);\r\n    function balanceOfAt(address addr, uint256 _block) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function totalSupply(uint256 t) external view returns (uint256);\r\n    function totalSupplyAt(uint256 _block) external view returns (uint256);\r\n    function totalFXSSupply() external view returns (uint256);\r\n    function totalFXSSupplyAt(uint256 _block) external view returns (uint256);\r\n    function changeController(address _newController) external;\r\n    function token() external view returns (address);\r\n    function supply() external view returns (uint256);\r\n    function locked(address addr) external view returns (LockedBalance memory);\r\n    function epoch() external view returns (uint256);\r\n    function point_history(uint256 arg0) external view returns (int128 bias, int128 slope, uint256 ts, uint256 blk, uint256 fxs_amt);\r\n    function user_point_history(address arg0, uint256 arg1) external view returns (int128 bias, int128 slope, uint256 ts, uint256 blk, uint256 fxs_amt);\r\n    function user_point_epoch(address arg0) external view returns (uint256);\r\n    function slope_changes(uint256 arg0) external view returns (int128);\r\n    function controller() external view returns (address);\r\n    function transfersEnabled() external view returns (bool);\r\n    function emergencyUnlockActive() external view returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function version() external view returns (string memory);\r\n    function decimals() external view returns (uint256);\r\n    function future_smart_wallet_checker() external view returns (address);\r\n    function smart_wallet_checker() external view returns (address);\r\n    function admin() external view returns (address);\r\n    function future_admin() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Uniswap/TransferHelper.sol\r\n\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Misc_AMOs/stakedao/IStakeDaoVault.sol\r\n\r\n\r\ninterface IStakeDaoVault {\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function available() external view returns (uint256);\r\n  function balance() external view returns (uint256);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function controller() external view returns (address);\r\n  function decimals() external view returns (uint8);\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\r\n  function deposit(uint256 _amount) external;\r\n  function depositAll() external;\r\n  function earn() external;\r\n  function getPricePerFullShare() external view returns (uint256);\r\n  function governance() external view returns (address);\r\n  function harvest(address reserve, uint256 amount) external;\r\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n  function max() external view returns (uint256);\r\n  function min() external view returns (uint256);\r\n  function name() external view returns (string memory);\r\n  function setController(address _controller) external;\r\n  function setGovernance(address _governance) external;\r\n  function setMin(uint256 _min) external;\r\n  function symbol() external view returns (string memory);\r\n  function token() external view returns (address);\r\n  function totalSupply() external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  function withdraw(uint256 _shares) external;\r\n  function withdrawAll() external;\r\n}\r\n\r\n\r\n// // Part: IController\r\n\r\n// interface IController {\r\n//     function withdraw(address, uint256) external;\r\n\r\n//     function balanceOf(address) external view returns (uint256);\r\n\r\n//     function earn(address, uint256) external;\r\n\r\n//     function want(address) external view returns (address);\r\n\r\n//     function rewards() external view returns (address);\r\n\r\n//     function vaults(address) external view returns (address);\r\n\r\n//     function strategies(address) external view returns (address);\r\n// }\r\n\r\n// // Part: OpenZeppelin/openzeppelin-contracts@2.5.1/Address\r\n\r\n// /**\r\n//  * @dev Collection of functions related to the address type\r\n//  */\r\n// library Address {\r\n//     /**\r\n//      * @dev Returns true if `account` is a contract.\r\n//      *\r\n//      * [IMPORTANT]\r\n//      * ====\r\n//      * It is unsafe to assume that an address for which this function returns\r\n//      * false is an externally-owned account (EOA) and not a contract.\r\n//      *\r\n//      * Among others, `isContract` will return false for the following \r\n//      * types of addresses:\r\n//      *\r\n//      *  - an externally-owned account\r\n//      *  - a contract in construction\r\n//      *  - an address where a contract will be created\r\n//      *  - an address where a contract lived, but was destroyed\r\n//      * ====\r\n//      */\r\n//     function isContract(address account) internal view returns (bool) {\r\n//         // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n//         // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n//         // for accounts without code, i.e. `keccak256('')`\r\n//         bytes32 codehash;\r\n//         bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n//         // solhint-disable-next-line no-inline-assembly\r\n//         assembly { codehash := extcodehash(account) }\r\n//         return (codehash != accountHash && codehash != 0x0);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Converts an `address` into `address payable`. Note that this is\r\n//      * simply a type cast: the actual underlying value is not changed.\r\n//      *\r\n//      * _Available since v2.4.0._\r\n//      */\r\n//     function toPayable(address account) internal pure returns (address payable) {\r\n//         return address(uint160(account));\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n//      * `recipient`, forwarding all available gas and reverting on errors.\r\n//      *\r\n//      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n//      * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n//      * imposed by `transfer`, making them unable to receive funds via\r\n//      * `transfer`. {sendValue} removes this limitation.\r\n//      *\r\n//      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n//      *\r\n//      * IMPORTANT: because control is transferred to `recipient`, care must be\r\n//      * taken to not create reentrancy vulnerabilities. Consider using\r\n//      * {ReentrancyGuard} or the\r\n//      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n//      *\r\n//      * _Available since v2.4.0._\r\n//      */\r\n//     function sendValue(address payable recipient, uint256 amount) internal {\r\n//         require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n//         // solhint-disable-next-line avoid-call-value\r\n//         (bool success, ) = recipient.call.value(amount)(\"\");\r\n//         require(success, \"Address: unable to send value, recipient may have reverted\");\r\n//     }\r\n// }\r\n\r\n// // Part: OpenZeppelin/openzeppelin-contracts@2.5.1/Context\r\n\r\n// /*\r\n//  * @dev Provides information about the current execution context, including the\r\n//  * sender of the transaction and its data. While these are generally available\r\n//  * via msg.sender and msg.data, they should not be accessed in such a direct\r\n//  * manner, since when dealing with GSN meta-transactions the account sending and\r\n//  * paying for execution may not be the actual sender (as far as an application\r\n//  * is concerned).\r\n//  *\r\n//  * This contract is only required for intermediate, library-like contracts.\r\n//  */\r\n// contract Context {\r\n//     // Empty internal constructor, to prevent people from mistakenly deploying\r\n//     // an instance of this contract, which should be used via inheritance.\r\n//     constructor () internal { }\r\n//     // solhint-disable-previous-line no-empty-blocks\r\n\r\n//     function _msgSender() internal view returns (address payable) {\r\n//         return msg.sender;\r\n//     }\r\n\r\n//     function _msgData() internal view returns (bytes memory) {\r\n//         this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n//         return msg.data;\r\n//     }\r\n// }\r\n\r\n// // Part: OpenZeppelin/openzeppelin-contracts@2.5.1/IERC20\r\n\r\n// /**\r\n//  * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n//  * the optional functions; to access them see {ERC20Detailed}.\r\n//  */\r\n// interface IERC20 {\r\n//     /**\r\n//      * @dev Returns the amount of tokens in existence.\r\n//      */\r\n//     function totalSupply() external view returns (uint256);\r\n\r\n//     /**\r\n//      * @dev Returns the amount of tokens owned by `account`.\r\n//      */\r\n//     function balanceOf(address account) external view returns (uint256);\r\n\r\n//     /**\r\n//      * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n//      *\r\n//      * Returns a boolean value indicating whether the operation succeeded.\r\n//      *\r\n//      * Emits a {Transfer} event.\r\n//      */\r\n//     function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n//     /**\r\n//      * @dev Returns the remaining number of tokens that `spender` will be\r\n//      * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n//      * zero by default.\r\n//      *\r\n//      * This value changes when {approve} or {transferFrom} are called.\r\n//      */\r\n//     function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n//     /**\r\n//      * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n//      *\r\n//      * Returns a boolean value indicating whether the operation succeeded.\r\n//      *\r\n//      * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n//      * that someone may use both the old and the new allowance by unfortunate\r\n//      * transaction ordering. One possible solution to mitigate this race\r\n//      * condition is to first reduce the spender's allowance to 0 and set the\r\n//      * desired value afterwards:\r\n//      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n//      *\r\n//      * Emits an {Approval} event.\r\n//      */\r\n//     function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n//     /**\r\n//      * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n//      * allowance mechanism. `amount` is then deducted from the caller's\r\n//      * allowance.\r\n//      *\r\n//      * Returns a boolean value indicating whether the operation succeeded.\r\n//      *\r\n//      * Emits a {Transfer} event.\r\n//      */\r\n//     function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n//     /**\r\n//      * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n//      * another (`to`).\r\n//      *\r\n//      * Note that `value` may be zero.\r\n//      */\r\n//     event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n//     /**\r\n//      * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n//      * a call to {approve}. `value` is the new allowance.\r\n//      */\r\n//     event Approval(address indexed owner, address indexed spender, uint256 value);\r\n// }\r\n\r\n// // Part: OpenZeppelin/openzeppelin-contracts@2.5.1/SafeMath\r\n\r\n// /**\r\n//  * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n//  * checks.\r\n//  *\r\n//  * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n//  * in bugs, because programmers usually assume that an overflow raises an\r\n//  * error, which is the standard behavior in high level programming languages.\r\n//  * `SafeMath` restores this intuition by reverting the transaction when an\r\n//  * operation overflows.\r\n//  *\r\n//  * Using this library instead of the unchecked operations eliminates an entire\r\n//  * class of bugs, so it's recommended to use it always.\r\n//  */\r\n// library SafeMath {\r\n//     /**\r\n//      * @dev Returns the addition of two unsigned integers, reverting on\r\n//      * overflow.\r\n//      *\r\n//      * Counterpart to Solidity's `+` operator.\r\n//      *\r\n//      * Requirements:\r\n//      * - Addition cannot overflow.\r\n//      */\r\n//     function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         uint256 c = a + b;\r\n//         require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n//         return c;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the subtraction of two unsigned integers, reverting on\r\n//      * overflow (when the result is negative).\r\n//      *\r\n//      * Counterpart to Solidity's `-` operator.\r\n//      *\r\n//      * Requirements:\r\n//      * - Subtraction cannot overflow.\r\n//      */\r\n//     function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         return sub(a, b, \"SafeMath: subtraction overflow\");\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n//      * overflow (when the result is negative).\r\n//      *\r\n//      * Counterpart to Solidity's `-` operator.\r\n//      *\r\n//      * Requirements:\r\n//      * - Subtraction cannot overflow.\r\n//      *\r\n//      * _Available since v2.4.0._\r\n//      */\r\n//     function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n//         require(b <= a, errorMessage);\r\n//         uint256 c = a - b;\r\n\r\n//         return c;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the multiplication of two unsigned integers, reverting on\r\n//      * overflow.\r\n//      *\r\n//      * Counterpart to Solidity's `*` operator.\r\n//      *\r\n//      * Requirements:\r\n//      * - Multiplication cannot overflow.\r\n//      */\r\n//     function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n//         // benefit is lost if 'b' is also tested.\r\n//         // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n//         if (a == 0) {\r\n//             return 0;\r\n//         }\r\n\r\n//         uint256 c = a * b;\r\n//         require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n//         return c;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the integer division of two unsigned integers. Reverts on\r\n//      * division by zero. The result is rounded towards zero.\r\n//      *\r\n//      * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n//      * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n//      * uses an invalid opcode to revert (consuming all remaining gas).\r\n//      *\r\n//      * Requirements:\r\n//      * - The divisor cannot be zero.\r\n//      */\r\n//     function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         return div(a, b, \"SafeMath: division by zero\");\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n//      * division by zero. The result is rounded towards zero.\r\n//      *\r\n//      * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n//      * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n//      * uses an invalid opcode to revert (consuming all remaining gas).\r\n//      *\r\n//      * Requirements:\r\n//      * - The divisor cannot be zero.\r\n//      *\r\n//      * _Available since v2.4.0._\r\n//      */\r\n//     function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n//         // Solidity only automatically asserts when dividing by 0\r\n//         require(b > 0, errorMessage);\r\n//         uint256 c = a / b;\r\n//         // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n//         return c;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n//      * Reverts when dividing by zero.\r\n//      *\r\n//      * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n//      * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n//      * invalid opcode to revert (consuming all remaining gas).\r\n//      *\r\n//      * Requirements:\r\n//      * - The divisor cannot be zero.\r\n//      */\r\n//     function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         return mod(a, b, \"SafeMath: modulo by zero\");\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n//      * Reverts with custom message when dividing by zero.\r\n//      *\r\n//      * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n//      * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n//      * invalid opcode to revert (consuming all remaining gas).\r\n//      *\r\n//      * Requirements:\r\n//      * - The divisor cannot be zero.\r\n//      *\r\n//      * _Available since v2.4.0._\r\n//      */\r\n//     function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n//         require(b != 0, errorMessage);\r\n//         return a % b;\r\n//     }\r\n// }\r\n\r\n// // Part: OpenZeppelin/openzeppelin-contracts@2.5.1/ERC20\r\n\r\n// /**\r\n//  * @dev Implementation of the {IERC20} interface.\r\n//  *\r\n//  * This implementation is agnostic to the way tokens are created. This means\r\n//  * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n//  * For a generic mechanism see {ERC20Mintable}.\r\n//  *\r\n//  * TIP: For a detailed writeup see our guide\r\n//  * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n//  * to implement supply mechanisms].\r\n//  *\r\n//  * We have followed general OpenZeppelin guidelines: functions revert instead\r\n//  * of returning `false` on failure. This behavior is nonetheless conventional\r\n//  * and does not conflict with the expectations of ERC20 applications.\r\n//  *\r\n//  * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n//  * This allows applications to reconstruct the allowance for all accounts just\r\n//  * by listening to said events. Other implementations of the EIP may not emit\r\n//  * these events, as it isn't required by the specification.\r\n//  *\r\n//  * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n//  * functions have been added to mitigate the well-known issues around setting\r\n//  * allowances. See {IERC20-approve}.\r\n//  */\r\n// contract ERC20 is Context, IERC20 {\r\n//     using SafeMath for uint256;\r\n\r\n//     mapping (address => uint256) private _balances;\r\n\r\n//     mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n//     uint256 private _totalSupply;\r\n\r\n//     /**\r\n//      * @dev See {IERC20-totalSupply}.\r\n//      */\r\n//     function totalSupply() public view returns (uint256) {\r\n//         return _totalSupply;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev See {IERC20-balanceOf}.\r\n//      */\r\n//     function balanceOf(address account) public view returns (uint256) {\r\n//         return _balances[account];\r\n//     }\r\n\r\n//     /**\r\n//      * @dev See {IERC20-transfer}.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - `recipient` cannot be the zero address.\r\n//      * - the caller must have a balance of at least `amount`.\r\n//      */\r\n//     function transfer(address recipient, uint256 amount) public returns (bool) {\r\n//         _transfer(_msgSender(), recipient, amount);\r\n//         return true;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev See {IERC20-allowance}.\r\n//      */\r\n//     function allowance(address owner, address spender) public view returns (uint256) {\r\n//         return _allowances[owner][spender];\r\n//     }\r\n\r\n//     /**\r\n//      * @dev See {IERC20-approve}.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - `spender` cannot be the zero address.\r\n//      */\r\n//     function approve(address spender, uint256 amount) public returns (bool) {\r\n//         _approve(_msgSender(), spender, amount);\r\n//         return true;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev See {IERC20-transferFrom}.\r\n//      *\r\n//      * Emits an {Approval} event indicating the updated allowance. This is not\r\n//      * required by the EIP. See the note at the beginning of {ERC20};\r\n//      *\r\n//      * Requirements:\r\n//      * - `sender` and `recipient` cannot be the zero address.\r\n//      * - `sender` must have a balance of at least `amount`.\r\n//      * - the caller must have allowance for `sender`'s tokens of at least\r\n//      * `amount`.\r\n//      */\r\n//     function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n//         _transfer(sender, recipient, amount);\r\n//         _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n//         return true;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n//      *\r\n//      * This is an alternative to {approve} that can be used as a mitigation for\r\n//      * problems described in {IERC20-approve}.\r\n//      *\r\n//      * Emits an {Approval} event indicating the updated allowance.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - `spender` cannot be the zero address.\r\n//      */\r\n//     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n//         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n//         return true;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n//      *\r\n//      * This is an alternative to {approve} that can be used as a mitigation for\r\n//      * problems described in {IERC20-approve}.\r\n//      *\r\n//      * Emits an {Approval} event indicating the updated allowance.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - `spender` cannot be the zero address.\r\n//      * - `spender` must have allowance for the caller of at least\r\n//      * `subtractedValue`.\r\n//      */\r\n//     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n//         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n//         return true;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n//      *\r\n//      * This is internal function is equivalent to {transfer}, and can be used to\r\n//      * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n//      *\r\n//      * Emits a {Transfer} event.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - `sender` cannot be the zero address.\r\n//      * - `recipient` cannot be the zero address.\r\n//      * - `sender` must have a balance of at least `amount`.\r\n//      */\r\n//     function _transfer(address sender, address recipient, uint256 amount) internal {\r\n//         require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n//         require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n//         _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n//         _balances[recipient] = _balances[recipient].add(amount);\r\n//         emit Transfer(sender, recipient, amount);\r\n//     }\r\n\r\n//     /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n//      * the total supply.\r\n//      *\r\n//      * Emits a {Transfer} event with `from` set to the zero address.\r\n//      *\r\n//      * Requirements\r\n//      *\r\n//      * - `to` cannot be the zero address.\r\n//      */\r\n//     function _mint(address account, uint256 amount) internal {\r\n//         require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n//         _totalSupply = _totalSupply.add(amount);\r\n//         _balances[account] = _balances[account].add(amount);\r\n//         emit Transfer(address(0), account, amount);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Destroys `amount` tokens from `account`, reducing the\r\n//      * total supply.\r\n//      *\r\n//      * Emits a {Transfer} event with `to` set to the zero address.\r\n//      *\r\n//      * Requirements\r\n//      *\r\n//      * - `account` cannot be the zero address.\r\n//      * - `account` must have at least `amount` tokens.\r\n//      */\r\n//     function _burn(address account, uint256 amount) internal {\r\n//         require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n//         _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n//         _totalSupply = _totalSupply.sub(amount);\r\n//         emit Transfer(account, address(0), amount);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n//      *\r\n//      * This is internal function is equivalent to `approve`, and can be used to\r\n//      * e.g. set automatic allowances for certain subsystems, etc.\r\n//      *\r\n//      * Emits an {Approval} event.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - `owner` cannot be the zero address.\r\n//      * - `spender` cannot be the zero address.\r\n//      */\r\n//     function _approve(address owner, address spender, uint256 amount) internal {\r\n//         require(owner != address(0), \"ERC20: approve from the zero address\");\r\n//         require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n//         _allowances[owner][spender] = amount;\r\n//         emit Approval(owner, spender, amount);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n//      * from the caller's allowance.\r\n//      *\r\n//      * See {_burn} and {_approve}.\r\n//      */\r\n//     function _burnFrom(address account, uint256 amount) internal {\r\n//         _burn(account, amount);\r\n//         _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n//     }\r\n// }\r\n\r\n// // Part: OpenZeppelin/openzeppelin-contracts@2.5.1/ERC20Detailed\r\n\r\n// /**\r\n//  * @dev Optional functions from the ERC20 standard.\r\n//  */\r\n// contract ERC20Detailed is IERC20 {\r\n//     string private _name;\r\n//     string private _symbol;\r\n//     uint8 private _decimals;\r\n\r\n//     /**\r\n//      * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n//      * these values are immutable: they can only be set once during\r\n//      * construction.\r\n//      */\r\n//     constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n//         _name = name;\r\n//         _symbol = symbol;\r\n//         _decimals = decimals;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the name of the token.\r\n//      */\r\n//     function name() public view returns (string memory) {\r\n//         return _name;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the symbol of the token, usually a shorter version of the\r\n//      * name.\r\n//      */\r\n//     function symbol() public view returns (string memory) {\r\n//         return _symbol;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the number of decimals used to get its user representation.\r\n//      * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n//      * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n//      *\r\n//      * Tokens usually opt for a value of 18, imitating the relationship between\r\n//      * Ether and Wei.\r\n//      *\r\n//      * NOTE: This information is only used for _display_ purposes: it in\r\n//      * no way affects any of the arithmetic of the contract, including\r\n//      * {IERC20-balanceOf} and {IERC20-transfer}.\r\n//      */\r\n//     function decimals() public view returns (uint8) {\r\n//         return _decimals;\r\n//     }\r\n// }\r\n\r\n// // Part: OpenZeppelin/openzeppelin-contracts@2.5.1/SafeERC20\r\n\r\n// /**\r\n//  * @title SafeERC20\r\n//  * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n//  * contract returns false). Tokens that return no value (and instead revert or\r\n//  * throw on failure) are also supported, non-reverting calls are assumed to be\r\n//  * successful.\r\n//  * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n//  * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n//  */\r\n// library SafeERC20 {\r\n//     using SafeMath for uint256;\r\n//     using Address for address;\r\n\r\n//     function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n//         callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n//     }\r\n\r\n//     function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n//         callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n//     }\r\n\r\n//     function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n//         // safeApprove should only be called when setting an initial allowance,\r\n//         // or when resetting it to zero. To increase and decrease it, use\r\n//         // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n//         // solhint-disable-next-line max-line-length\r\n//         require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n//             \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n//         );\r\n//         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n//     }\r\n\r\n//     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n//         uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n//         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n//     }\r\n\r\n//     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n//         uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n//         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n//      * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n//      * @param token The token targeted by the call.\r\n//      * @param data The call data (encoded using abi.encode or one of its variants).\r\n//      */\r\n//     function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n//         // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n//         // we're implementing it ourselves.\r\n\r\n//         // A Solidity high level call has three parts:\r\n//         //  1. The target address is checked to verify it contains contract code\r\n//         //  2. The call itself is made, and success asserted\r\n//         //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n//         // solhint-disable-next-line max-line-length\r\n//         require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n//         // solhint-disable-next-line avoid-low-level-calls\r\n//         (bool success, bytes memory returndata) = address(token).call(data);\r\n//         require(success, \"SafeERC20: low-level call failed\");\r\n\r\n//         if (returndata.length > 0) { // Return data is optional\r\n//             // solhint-disable-next-line max-line-length\r\n//             require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n//         }\r\n//     }\r\n// }\r\n\r\n// // File: Vault.sol\r\n\r\n// contract Vault is ERC20, ERC20Detailed {\r\n//     using SafeERC20 for IERC20;\r\n//     using Address for address;\r\n//     using SafeMath for uint256;\r\n\r\n//     IERC20 public token;\r\n\r\n//     uint256 public min = 9500;\r\n//     uint256 public constant max = 10000;\r\n\r\n//     address public governance;\r\n//     address public controller;\r\n\r\n//     constructor (\r\n//         address _token,\r\n//         address _controller,\r\n//         address _governance\r\n//     )\r\n//         public\r\n//         ERC20Detailed(\r\n//             string(\r\n//                 abi.encodePacked(\"Stake DAO \", ERC20Detailed(_token).name())\r\n//             ),\r\n//             string(abi.encodePacked(\"sd\", ERC20Detailed(_token).symbol())),\r\n//             ERC20Detailed(_token).decimals()\r\n//         )\r\n//     {\r\n//         token = IERC20(_token);\r\n//         controller = _controller;\r\n//         governance = _governance;\r\n//     }\r\n\r\n//     function balance() public view returns (uint256) {\r\n//         return\r\n//             token.balanceOf(address(this)).add(\r\n//                 IController(controller).balanceOf(address(token))\r\n//             );\r\n//     }\r\n\r\n//     function setMin(uint256 _min) external {\r\n//         require(msg.sender == governance, \"!governance\");\r\n//         min = _min;\r\n//     }\r\n\r\n//     function setGovernance(address _governance) public {\r\n//         require(msg.sender == governance, \"!governance\");\r\n//         governance = _governance;\r\n//     }\r\n\r\n//     function setController(address _controller) public {\r\n//         require(msg.sender == governance, \"!governance\");\r\n//         controller = _controller;\r\n//     }\r\n\r\n//     // Custom logic in here for how much the vault allows to be borrowed\r\n//     // Sets minimum required on-hand to keep small withdrawals cheap\r\n//     function available() public view returns (uint256) {\r\n//         return token.balanceOf(address(this)).mul(min).div(max);\r\n//     }\r\n\r\n//     function earn() public {\r\n//         uint256 _bal = available();\r\n//         token.safeTransfer(controller, _bal);\r\n//         IController(controller).earn(address(token), _bal);\r\n//     }\r\n\r\n//     function depositAll() external {\r\n//         deposit(token.balanceOf(msg.sender));\r\n//     }\r\n\r\n//     function deposit(uint256 _amount) public {\r\n//         uint256 _pool = balance();\r\n//         uint256 _before = token.balanceOf(address(this));\r\n//         token.safeTransferFrom(msg.sender, address(this), _amount);\r\n//         uint256 _after = token.balanceOf(address(this));\r\n//         _amount = _after.sub(_before); // Additional check for deflationary tokens\r\n//         uint256 shares = 0;\r\n//         if (totalSupply() == 0) {\r\n//             shares = _amount;\r\n//         } else {\r\n//             shares = (_amount.mul(totalSupply())).div(_pool);\r\n//         }\r\n//         _mint(msg.sender, shares);\r\n//     }\r\n\r\n//     function withdrawAll() external {\r\n//         withdraw(balanceOf(msg.sender));\r\n//     }\r\n\r\n//     // Used to swap any borrowed reserve over the debt limit to liquidate to 'token'\r\n//     function harvest(address reserve, uint256 amount) external {\r\n//         require(msg.sender == controller, \"!controller\");\r\n//         require(reserve != address(token), \"token\");\r\n//         IERC20(reserve).safeTransfer(controller, amount);\r\n//     }\r\n\r\n//     // No rebalance implementation for lower fees and faster swaps\r\n//     function withdraw(uint256 _shares) public {\r\n//         uint256 r = (balance().mul(_shares)).div(totalSupply());\r\n//         _burn(msg.sender, _shares);\r\n\r\n//         // Check balance\r\n//         uint256 b = token.balanceOf(address(this));\r\n//         if (b < r) {\r\n//             uint256 _withdraw = r.sub(b);\r\n//             IController(controller).withdraw(address(token), _withdraw);\r\n//             uint256 _after = token.balanceOf(address(this));\r\n//             uint256 _diff = _after.sub(b);\r\n//             if (_diff < _withdraw) {\r\n//                 r = b.add(_diff);\r\n//             }\r\n//         }\r\n\r\n//         token.safeTransfer(msg.sender, r);\r\n//     }\r\n\r\n//     function getPricePerFullShare() public view returns (uint256) {\r\n//         return\r\n//             totalSupply() == 0 ? 1e18 : balance().mul(1e18).div(totalSupply());\r\n//     }\r\n// }\r\n\r\n\r\n// File contracts/Curve/IFraxGaugeController.sol\r\n\r\n\r\n// https://github.com/swervefi/swerve/edit/master/packages/swerve-contracts/interfaces/IGaugeController.sol\r\n\r\ninterface IFraxGaugeController {\r\n    struct Point {\r\n        uint256 bias;\r\n        uint256 slope;\r\n    }\r\n\r\n    struct VotedSlope {\r\n        uint256 slope;\r\n        uint256 power;\r\n        uint256 end;\r\n    }\r\n\r\n    // Public variables\r\n    function admin() external view returns (address);\r\n    function future_admin() external view returns (address);\r\n    function token() external view returns (address);\r\n    function voting_escrow() external view returns (address);\r\n    function n_gauge_types() external view returns (int128);\r\n    function n_gauges() external view returns (int128);\r\n    function gauge_type_names(int128) external view returns (string memory);\r\n    function gauges(uint256) external view returns (address);\r\n    function vote_user_slopes(address, address)\r\n        external\r\n        view\r\n        returns (VotedSlope memory);\r\n    function vote_user_power(address) external view returns (uint256);\r\n    function last_user_vote(address, address) external view returns (uint256);\r\n    function points_weight(address, uint256)\r\n        external\r\n        view\r\n        returns (Point memory);\r\n    function time_weight(address) external view returns (uint256);\r\n    function points_sum(int128, uint256) external view returns (Point memory);\r\n    function time_sum(uint256) external view returns (uint256);\r\n    function points_total(uint256) external view returns (uint256);\r\n    function time_total() external view returns (uint256);\r\n    function points_type_weight(int128, uint256)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    function time_type_weight(uint256) external view returns (uint256);\r\n\r\n    // Getter functions\r\n    function gauge_types(address) external view returns (int128);\r\n    function gauge_relative_weight(address) external view returns (uint256);\r\n    function gauge_relative_weight(address, uint256) external view returns (uint256);\r\n    function get_gauge_weight(address) external view returns (uint256);\r\n    function get_type_weight(int128) external view returns (uint256);\r\n    function get_total_weight() external view returns (uint256);\r\n    function get_weights_sum_per_type(int128) external view returns (uint256);\r\n\r\n    // External functions\r\n    function commit_transfer_ownership(address) external;\r\n    function apply_transfer_ownership() external;\r\n    function add_gauge(\r\n        address,\r\n        int128,\r\n        uint256\r\n    ) external;\r\n    function checkpoint() external;\r\n    function checkpoint_gauge(address) external;\r\n    function global_emission_rate() external view returns (uint256);\r\n    function gauge_relative_weight_write(address)\r\n        external\r\n        returns (uint256);\r\n    function gauge_relative_weight_write(address, uint256)\r\n        external\r\n        returns (uint256);\r\n    function add_type(string memory, uint256) external;\r\n    function change_type_weight(int128, uint256) external;\r\n    function change_gauge_weight(address, uint256) external;\r\n    function change_global_emission_rate(uint256) external;\r\n    function vote_for_gauge_weights(address, uint256) external;\r\n}\r\n\r\n\r\n// File contracts/Curve/IFraxGaugeFXSRewardsDistributor.sol\r\n\r\n\r\ninterface IFraxGaugeFXSRewardsDistributor {\r\n  function acceptOwnership() external;\r\n  function curator_address() external view returns(address);\r\n  function currentReward(address gauge_address) external view returns(uint256 reward_amount);\r\n  function distributeReward(address gauge_address) external returns(uint256 weeks_elapsed, uint256 reward_tally);\r\n  function distributionsOn() external view returns(bool);\r\n  function gauge_whitelist(address) external view returns(bool);\r\n  function is_middleman(address) external view returns(bool);\r\n  function last_time_gauge_paid(address) external view returns(uint256);\r\n  function nominateNewOwner(address _owner) external;\r\n  function nominatedOwner() external view returns(address);\r\n  function owner() external view returns(address);\r\n  function recoverERC20(address tokenAddress, uint256 tokenAmount) external;\r\n  function setCurator(address _new_curator_address) external;\r\n  function setGaugeController(address _gauge_controller_address) external;\r\n  function setGaugeState(address _gauge_address, bool _is_middleman, bool _is_active) external;\r\n  function setTimelock(address _new_timelock) external;\r\n  function timelock_address() external view returns(address);\r\n  function toggleDistributions() external;\r\n}\r\n\r\n\r\n// File contracts/Utils/ReentrancyGuard.sol\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Staking/Owned.sol\r\n\r\n\r\n// https://docs.synthetix.io/contracts/Owned\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    constructor (address _owner) public {\r\n        require(_owner != address(0), \"Owner address cannot be 0\");\r\n        owner = _owner;\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    function nominateNewOwner(address _owner) external onlyOwner {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\r\n        _;\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n\r\n\r\n// File contracts/Staking/StakingRewardsMultiGauge.sol\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n// ====================================================================\r\n// |     ______                   _______                             |\r\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\r\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\  |\r\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\r\n// | /_/   /_/   \\__,_/_/|_|  /_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/   |\r\n// |                                                                  |\r\n// ====================================================================\r\n// ===================== StakingRewardsMultiGauge =====================\r\n// ====================================================================\r\n// veFXS-enabled\r\n// Multiple tokens with different reward rates can be emitted\r\n// Multiple teams can set the reward rates for their token(s)\r\n// Those teams can also use a gauge, or an external function with \r\n// Apes together strong\r\n\r\n// Frax Finance: https://github.com/FraxFinance\r\n\r\n// Primary Author(s)\r\n// Travis Moore: https://github.com/FortisFortuna\r\n\r\n// Reviewer(s) / Contributor(s)\r\n// Jason Huan: https://github.com/jasonhuan \r\n// Sam Kazemian: https://github.com/samkazemian\r\n// Saddle Team: https://github.com/saddle-finance\r\n// Fei Team: https://github.com/fei-protocol\r\n// Alchemix Team: https://github.com/alchemix-finance\r\n// Liquity Team: https://github.com/liquity\r\n\r\n// Originally inspired by Synthetix.io, but heavily modified by the Frax team\r\n// https://raw.githubusercontent.com/Synthetixio/synthetix/develop/contracts/StakingRewards.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n// -------------------- VARIES --------------------\r\n\r\n// mStable\r\n// import '../Misc_AMOs/mstable/IFeederPool.sol';\r\n\r\n// StakeDAO\r\n\r\n// import '../Curve/IMetaImplementationUSD.sol';\r\n\r\n// Uniswap V2\r\n// import '../Uniswap/Interfaces/IUniswapV2Pair.sol';\r\n\r\n// ------------------------------------------------\r\n\r\n\r\n\r\n// Inheritance\r\n\r\ncontract StakingRewardsMultiGauge is Owned, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    // Instances\r\n    IveFXS private veFXS = IveFXS(0xc8418aF6358FFddA74e09Ca9CC3Fe03Ca6aDC5b0);\r\n\r\n    // -------------------- VARIES --------------------\r\n    \r\n    // mStable\r\n    // IFeederPool public stakingToken;\r\n\r\n    // StakeDAO Vault\r\n    IStakeDaoVault public stakingToken;\r\n    \r\n    // Uniswap V2\r\n    // IUniswapV2Pair public stakingToken;\r\n\r\n    // ------------------------------------------------\r\n\r\n    IFraxGaugeFXSRewardsDistributor public rewards_distributor;\r\n\r\n    // FRAX\r\n    address private constant frax_address = 0x853d955aCEf822Db058eb8505911ED77F175b99e;\r\n    \r\n    // Constant for various precisions\r\n    uint256 private constant MULTIPLIER_PRECISION = 1e18;\r\n\r\n    // Time tracking\r\n    uint256 public periodFinish;\r\n    uint256 public lastUpdateTime;\r\n\r\n    // Lock time and multiplier settings\r\n    uint256 public lock_max_multiplier = uint256(3e18); // E18. 1x = e18\r\n    uint256 public lock_time_for_max_multiplier = 3 * 365 * 86400; // 3 years\r\n    uint256 public lock_time_min = 86400; // 1 * 86400  (1 day)\r\n\r\n    // veFXS related\r\n    uint256 public vefxs_per_frax_for_max_boost = uint256(4e18); // E18. 4e18 means 4 veFXS must be held by the staker per 1 FRAX\r\n    uint256 public vefxs_max_multiplier = uint256(2e18); // E18. 1x = 1e18\r\n    mapping(address => uint256) private _vefxsMultiplierStored;\r\n\r\n    // Reward addresses, gauge addresses, reward rates, and reward managers\r\n    mapping(address => address) public rewardManagers; // token addr -> manager addr\r\n    address[] public rewardTokens;\r\n    address[] public gaugeControllers;\r\n    uint256[] public rewardRatesManual;\r\n    string[] public rewardSymbols;\r\n    mapping(address => uint256) public rewardTokenAddrToIdx; // token addr -> token index\r\n    \r\n    // Reward period\r\n    uint256 public rewardsDuration = 604800; // 7 * 86400  (7 days)\r\n\r\n    // Reward tracking\r\n    uint256[] private rewardsPerTokenStored;\r\n    mapping(address => mapping(uint256 => uint256)) private userRewardsPerTokenPaid; // staker addr -> token id -> paid amount\r\n    mapping(address => mapping(uint256 => uint256)) private rewards; // staker addr -> token id -> reward amount\r\n    mapping(address => uint256) private lastRewardClaimTime; // staker addr -> timestamp\r\n    uint256[] private last_gauge_relative_weights;\r\n    uint256[] private last_gauge_time_totals;\r\n\r\n    // Balance tracking\r\n    uint256 private _total_liquidity_locked;\r\n    uint256 private _total_combined_weight;\r\n    mapping(address => uint256) private _locked_liquidity;\r\n    mapping(address => uint256) private _combined_weights;\r\n\r\n    // List of valid migrators (set by governance)\r\n    mapping(address => bool) public valid_migrators;\r\n\r\n    // Stakers set which migrator(s) they want to use\r\n    mapping(address => mapping(address => bool)) public staker_allowed_migrators;\r\n\r\n    // Uniswap V2 ONLY\r\n    bool frax_is_token0;\r\n\r\n    // Stake tracking\r\n    mapping(address => LockedStake[]) private lockedStakes;\r\n\r\n    // Greylisting of bad addresses\r\n    mapping(address => bool) public greylist;\r\n\r\n    // Administrative booleans\r\n    bool public stakesUnlocked; // Release locked stakes in case of emergency\r\n    bool public migrationsOn; // Used for migrations. Prevents new stakes, but allows LP and reward withdrawals\r\n    bool public withdrawalsPaused; // For emergencies\r\n    bool public rewardsCollectionPaused; // For emergencies\r\n    bool public stakingPaused; // For emergencies\r\n\r\n    /* ========== STRUCTS ========== */\r\n    \r\n    struct LockedStake {\r\n        bytes32 kek_id;\r\n        uint256 start_timestamp;\r\n        uint256 liquidity;\r\n        uint256 ending_timestamp;\r\n        uint256 lock_multiplier; // 6 decimals of precision. 1x = 1000000\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyByOwner() {\r\n        require(msg.sender == owner, \"Not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyTknMgrs(address reward_token_address) {\r\n        require(msg.sender == owner || isTokenManagerFor(msg.sender, reward_token_address), \"Not owner or tkn mgr\");\r\n        _;\r\n    }\r\n\r\n\r\n    modifier isMigrating() {\r\n        require(migrationsOn == true, \"Not in migration\");\r\n        _;\r\n    }\r\n\r\n    modifier notStakingPaused() {\r\n        require(stakingPaused == false, \"Staking paused\");\r\n        _;\r\n    }\r\n\r\n    modifier updateRewardAndBalance(address account, bool sync_too) {\r\n        _updateRewardAndBalance(account, sync_too);\r\n        _;\r\n    }\r\n    \r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor (\r\n        address _owner,\r\n        address _stakingToken,\r\n        address _rewards_distributor_address,\r\n        string[] memory _rewardSymbols,\r\n        address[] memory _rewardTokens,\r\n        address[] memory _rewardManagers,\r\n        uint256[] memory _rewardRatesManual,\r\n        address[] memory _gaugeControllers\r\n    ) Owned(_owner){\r\n\r\n        // -------------------- VARIES --------------------\r\n        // mStable\r\n        // stakingToken = IFeederPool(_stakingToken);\r\n\r\n        // StakeDAO\r\n        stakingToken = IStakeDaoVault(_stakingToken);\r\n\r\n        // Uniswap V2\r\n        // stakingToken = IUniswapV2Pair(_stakingToken);\r\n        // address token0 = stakingToken.token0();\r\n        // if (token0 == frax_address) frax_is_token0 = true;\r\n        // else frax_is_token0 = false;\r\n        // ------------------------------------------------\r\n\r\n        rewards_distributor = IFraxGaugeFXSRewardsDistributor(_rewards_distributor_address);\r\n\r\n        rewardTokens = _rewardTokens;\r\n        gaugeControllers = _gaugeControllers;\r\n        rewardRatesManual = _rewardRatesManual;\r\n        rewardSymbols = _rewardSymbols;\r\n\r\n        for (uint256 i = 0; i < _rewardTokens.length; i++){ \r\n            // For fast token address -> token ID lookups later\r\n            rewardTokenAddrToIdx[_rewardTokens[i]] = i;\r\n\r\n            // Initialize the stored rewards\r\n            rewardsPerTokenStored.push(0);\r\n\r\n            // Initialize the reward managers\r\n            rewardManagers[_rewardTokens[i]] = _rewardManagers[i];\r\n\r\n            // Push in empty relative weights to initialize the array\r\n            last_gauge_relative_weights.push(0);\r\n\r\n            // Push in empty time totals to initialize the array\r\n            last_gauge_time_totals.push(0);\r\n        }\r\n\r\n        // Other booleans\r\n        stakesUnlocked = false;\r\n\r\n        // Initialization\r\n        lastUpdateTime = block.timestamp;\r\n        periodFinish = block.timestamp.add(rewardsDuration);\r\n\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    // Total locked liquidity tokens\r\n    function totalLiquidityLocked() external view returns (uint256) {\r\n        return _total_liquidity_locked;\r\n    }\r\n\r\n    // Locked liquidity for a given account\r\n    function lockedLiquidityOf(address account) external view returns (uint256) {\r\n        return _locked_liquidity[account];\r\n    }\r\n\r\n    // Total 'balance' used for calculating the percent of the pool the account owns\r\n    // Takes into account the locked stake time multiplier\r\n    function totalCombinedWeight() external view returns (uint256) {\r\n        return _total_combined_weight;\r\n    }\r\n\r\n    // Combined weight for a specific account\r\n    function combinedWeightOf(address account) external view returns (uint256) {\r\n        return _combined_weights[account];\r\n    }\r\n\r\n    function fraxPerLPToken() public view returns (uint256) {\r\n        // Get the amount of FRAX 'inside' of the lp tokens\r\n        uint256 frax_per_lp_token;\r\n\r\n        // // Uniswap V2\r\n        // // ============================================\r\n        // {\r\n        //     uint256 total_frax_reserves;\r\n        //     (uint256 reserve0, uint256 reserve1, ) = (stakingToken.getReserves());\r\n        //     if (frax_is_token0) total_frax_reserves = reserve0;\r\n        //     else total_frax_reserves = reserve1;\r\n\r\n        //     frax_per_lp_token = total_frax_reserves.mul(1e18).div(stakingToken.totalSupply());\r\n        // }\r\n\r\n        // // mStable\r\n        // // ============================================\r\n        // {\r\n        //     uint256 total_frax_reserves;\r\n        //     (, IFeederPool.BassetData memory vaultData) = (stakingToken.getBasset(frax_address));\r\n        //     total_frax_reserves = uint256(vaultData.vaultBalance);\r\n        //     frax_per_lp_token = total_frax_reserves.mul(1e18).div(stakingToken.totalSupply());\r\n        // }\r\n\r\n        // StakeDAO\r\n        // ============================================\r\n        {\r\n            uint256 frax3crv_held = stakingToken.balance();\r\n\r\n            // Optimistically assume 50/50 FRAX/3CRV ratio in the metapool to save gas\r\n            frax_per_lp_token = frax3crv_held.mul(1e18).div(stakingToken.totalSupply()) / 2;\r\n        }\r\n\r\n        return frax_per_lp_token;\r\n    }\r\n\r\n    function userStakedFrax(address account) public view returns (uint256) {\r\n        return (fraxPerLPToken()).mul(_locked_liquidity[account]).div(1e18);\r\n    }\r\n\r\n    function minVeFXSForMaxBoost(address account) public view returns (uint256) {\r\n        return (userStakedFrax(account)).mul(vefxs_per_frax_for_max_boost).div(MULTIPLIER_PRECISION);\r\n    }\r\n\r\n    function veFXSMultiplier(address account) public view returns (uint256) {\r\n        // The claimer gets a boost depending on amount of veFXS they have relative to the amount of FRAX 'inside'\r\n        // of their locked LP tokens\r\n        uint256 veFXS_needed_for_max_boost = minVeFXSForMaxBoost(account);\r\n        if (veFXS_needed_for_max_boost > 0){ \r\n            uint256 user_vefxs_fraction = (veFXS.balanceOf(account)).mul(MULTIPLIER_PRECISION).div(veFXS_needed_for_max_boost);\r\n            \r\n            uint256 vefxs_multiplier = ((user_vefxs_fraction).mul(vefxs_max_multiplier)).div(MULTIPLIER_PRECISION);\r\n\r\n            // Cap the boost to the vefxs_max_multiplier\r\n            if (vefxs_multiplier > vefxs_max_multiplier) vefxs_multiplier = vefxs_max_multiplier;\r\n\r\n            return vefxs_multiplier;        \r\n        }\r\n        else return 0; // This will happen with the first stake, when user_staked_frax is 0\r\n    }\r\n\r\n    // Calculated the combined weight for an account\r\n    function calcCurCombinedWeight(address account) public view\r\n        returns (\r\n            uint256 old_combined_weight,\r\n            uint256 new_vefxs_multiplier,\r\n            uint256 new_combined_weight\r\n        )\r\n    {\r\n        // Get the old combined weight\r\n        old_combined_weight = _combined_weights[account];\r\n\r\n        // Get the veFXS multipliers\r\n        // For the calculations, use the midpoint (analogous to midpoint Riemann sum)\r\n        new_vefxs_multiplier = veFXSMultiplier(account);\r\n\r\n        uint256 midpoint_vefxs_multiplier;\r\n        if (_locked_liquidity[account] == 0 && _combined_weights[account] == 0) {\r\n            // This is only called for the first stake to make sure the veFXS multiplier is not cut in half\r\n            midpoint_vefxs_multiplier = new_vefxs_multiplier;\r\n        }\r\n        else {\r\n            midpoint_vefxs_multiplier = ((new_vefxs_multiplier).add(_vefxsMultiplierStored[account])).div(2);\r\n        }\r\n\r\n        // Loop through the locked stakes, first by getting the liquidity * lock_multiplier portion\r\n        new_combined_weight = 0;\r\n        for (uint256 i = 0; i < lockedStakes[account].length; i++) {\r\n            LockedStake memory thisStake = lockedStakes[account][i];\r\n            uint256 lock_multiplier = thisStake.lock_multiplier;\r\n\r\n            // If the lock is expired\r\n            if (thisStake.ending_timestamp <= block.timestamp) {\r\n                // If the lock expired in the time since the last claim, the weight needs to be proportionately averaged this time\r\n                if (lastRewardClaimTime[account] < thisStake.ending_timestamp){\r\n                    uint256 time_before_expiry = (thisStake.ending_timestamp).sub(lastRewardClaimTime[account]);\r\n                    uint256 time_after_expiry = (block.timestamp).sub(thisStake.ending_timestamp);\r\n\r\n                    // Get the weighted-average lock_multiplier\r\n                    uint256 numerator = ((lock_multiplier).mul(time_before_expiry)).add(((MULTIPLIER_PRECISION).mul(time_after_expiry)));\r\n                    lock_multiplier = numerator.div(time_before_expiry.add(time_after_expiry));\r\n                }\r\n                // Otherwise, it needs to just be 1x\r\n                else {\r\n                    lock_multiplier = MULTIPLIER_PRECISION;\r\n                }\r\n            }\r\n\r\n            uint256 liquidity = thisStake.liquidity;\r\n            uint256 combined_boosted_amount = liquidity.mul(lock_multiplier.add(midpoint_vefxs_multiplier)).div(MULTIPLIER_PRECISION);\r\n            new_combined_weight = new_combined_weight.add(combined_boosted_amount);\r\n        }\r\n    }\r\n\r\n    // All the locked stakes for a given account\r\n    function lockedStakesOf(address account) external view returns (LockedStake[] memory) {\r\n        return lockedStakes[account];\r\n    }\r\n\r\n    // All the locked stakes for a given account\r\n    function getRewardSymbols() external view returns (string[] memory) {\r\n        return rewardSymbols;\r\n    }\r\n\r\n    // All the reward tokens\r\n    function getAllRewardTokens() external view returns (address[] memory) {\r\n        return rewardTokens;\r\n    }\r\n    \r\n    // Multiplier amount, given the length of the lock\r\n    function lockMultiplier(uint256 secs) public view returns (uint256) {\r\n        uint256 lock_multiplier =\r\n            uint256(MULTIPLIER_PRECISION).add(\r\n                secs\r\n                    .mul(lock_max_multiplier.sub(MULTIPLIER_PRECISION))\r\n                    .div(lock_time_for_max_multiplier)\r\n            );\r\n        if (lock_multiplier > lock_max_multiplier) lock_multiplier = lock_max_multiplier;\r\n        return lock_multiplier;\r\n    }\r\n\r\n    // Last time the reward was applicable\r\n    function lastTimeRewardApplicable() internal view returns (uint256) {\r\n        return Math.min(block.timestamp, periodFinish);\r\n    }\r\n\r\n    function rewardRates(uint256 token_idx) public view returns (uint256 rwd_rate) {\r\n        address gauge_controller_address = gaugeControllers[token_idx];\r\n        if (gauge_controller_address != address(0)) {\r\n            rwd_rate = (IFraxGaugeController(gauge_controller_address).global_emission_rate()).mul(last_gauge_relative_weights[token_idx]).div(1e18);\r\n        }\r\n        else {\r\n            rwd_rate = rewardRatesManual[token_idx];\r\n        }\r\n    }\r\n\r\n    // Amount of reward tokens per LP token\r\n    function rewardsPerToken() public view returns (uint256[] memory newRewardsPerTokenStored) {\r\n        if (_total_liquidity_locked == 0 || _total_combined_weight == 0) {\r\n            return rewardsPerTokenStored;\r\n        }\r\n        else {\r\n            newRewardsPerTokenStored = new uint256[](rewardTokens.length);\r\n            for (uint256 i = 0; i < rewardsPerTokenStored.length; i++){ \r\n                newRewardsPerTokenStored[i] = rewardsPerTokenStored[i].add(\r\n                    lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRates(i)).mul(1e18).div(_total_combined_weight)\r\n                );\r\n            }\r\n            return newRewardsPerTokenStored;\r\n        }\r\n    }\r\n\r\n    // Amount of reward tokens an account has earned / accrued\r\n    // Note: In the edge-case of one of the account's stake expiring since the last claim, this will\r\n    // return a slightly inflated number\r\n    function earned(address account) public view returns (uint256[] memory new_earned) {\r\n        uint256[] memory reward_arr = rewardsPerToken();\r\n        new_earned = new uint256[](rewardTokens.length);\r\n\r\n        if (_combined_weights[account] == 0){\r\n            for (uint256 i = 0; i < rewardTokens.length; i++){ \r\n                new_earned[i] = 0;\r\n            }\r\n        }\r\n        else {\r\n            for (uint256 i = 0; i < rewardTokens.length; i++){ \r\n                new_earned[i] = (_combined_weights[account])\r\n                    .mul(reward_arr[i].sub(userRewardsPerTokenPaid[account][i]))\r\n                    .div(1e18)\r\n                    .add(rewards[account][i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Total reward tokens emitted in the given period\r\n    function getRewardForDuration() external view returns (uint256[] memory rewards_per_duration_arr) {\r\n        rewards_per_duration_arr = new uint256[](rewardRatesManual.length);\r\n\r\n        for (uint256 i = 0; i < rewardRatesManual.length; i++){ \r\n            rewards_per_duration_arr[i] = rewardRates(i).mul(rewardsDuration);\r\n        }\r\n    }\r\n\r\n    // See if the caller_addr is a manager for the reward token \r\n    function isTokenManagerFor(address caller_addr, address reward_token_addr) public view returns (bool){\r\n        if (caller_addr == owner) return true; // Contract owner\r\n        else if (rewardManagers[reward_token_addr] == caller_addr) return true; // Reward manager\r\n        return false; \r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    // Staker can allow a migrator \r\n    function stakerAllowMigrator(address migrator_address) external {\r\n        require(valid_migrators[migrator_address], \"Invalid migrator address\");\r\n        staker_allowed_migrators[msg.sender][migrator_address] = true; \r\n    }\r\n\r\n    // Staker can disallow a previously-allowed migrator  \r\n    function stakerDisallowMigrator(address migrator_address) external {\r\n        // Delete from the mapping\r\n        delete staker_allowed_migrators[msg.sender][migrator_address];\r\n    }\r\n\r\n    function _updateRewardAndBalance(address account, bool sync_too) internal {\r\n        // Need to retro-adjust some things if the period hasn't been renewed, then start a new one\r\n        if (sync_too){\r\n            sync();\r\n        }\r\n        \r\n        if (account != address(0)) {\r\n            // To keep the math correct, the user's combined weight must be recomputed to account for their\r\n            // ever-changing veFXS balance.\r\n            (   \r\n                uint256 old_combined_weight,\r\n                uint256 new_vefxs_multiplier,\r\n                uint256 new_combined_weight\r\n            ) = calcCurCombinedWeight(account);\r\n\r\n            // Calculate the earnings first\r\n            _syncEarned(account);\r\n\r\n            // Update the user's stored veFXS multipliers\r\n            _vefxsMultiplierStored[account] = new_vefxs_multiplier;\r\n\r\n            // Update the user's and the global combined weights\r\n            if (new_combined_weight >= old_combined_weight) {\r\n                uint256 weight_diff = new_combined_weight.sub(old_combined_weight);\r\n                _total_combined_weight = _total_combined_weight.add(weight_diff);\r\n                _combined_weights[account] = old_combined_weight.add(weight_diff);\r\n            } else {\r\n                uint256 weight_diff = old_combined_weight.sub(new_combined_weight);\r\n                _total_combined_weight = _total_combined_weight.sub(weight_diff);\r\n                _combined_weights[account] = old_combined_weight.sub(weight_diff);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function _syncEarned(address account) internal {\r\n        if (account != address(0)) {\r\n            // Calculate the earnings\r\n            uint256[] memory earned_arr = earned(account);\r\n\r\n            // Update the rewards array\r\n            for (uint256 i = 0; i < earned_arr.length; i++){ \r\n                rewards[account][i] = earned_arr[i];\r\n            }\r\n\r\n            // Update the rewards paid array\r\n            for (uint256 i = 0; i < earned_arr.length; i++){ \r\n                userRewardsPerTokenPaid[account][i] = rewardsPerTokenStored[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    // Two different stake functions are needed because of delegateCall and msg.sender issues\r\n    function stakeLocked(uint256 liquidity, uint256 secs) nonReentrant public {\r\n        _stakeLocked(msg.sender, msg.sender, liquidity, secs, block.timestamp);\r\n    }\r\n\r\n    // If this were not internal, and source_address had an infinite approve, this could be exploitable\r\n    // (pull funds from source_address and stake for an arbitrary staker_address)\r\n    function _stakeLocked(\r\n        address staker_address, \r\n        address source_address, \r\n        uint256 liquidity, \r\n        uint256 secs,\r\n        uint256 start_timestamp\r\n    ) internal updateRewardAndBalance(staker_address, true) {\r\n        require(!stakingPaused, \"Staking paused\");\r\n        require(liquidity > 0, \"Must stake more than zero\");\r\n        require(greylist[staker_address] == false, \"Address has been greylisted\");\r\n        require(secs >= lock_time_min, \"Minimum stake time not met\");\r\n        require(secs <= lock_time_for_max_multiplier,\"Trying to lock for too long\");\r\n\r\n        uint256 lock_multiplier = lockMultiplier(secs);\r\n        bytes32 kek_id = keccak256(abi.encodePacked(staker_address, start_timestamp, liquidity, _locked_liquidity[staker_address]));\r\n        lockedStakes[staker_address].push(LockedStake(\r\n            kek_id,\r\n            start_timestamp,\r\n            liquidity,\r\n            start_timestamp.add(secs),\r\n            lock_multiplier\r\n        ));\r\n\r\n        // Pull the tokens from the source_address\r\n        TransferHelper.safeTransferFrom(address(stakingToken), source_address, address(this), liquidity);\r\n\r\n        // Update liquidities\r\n        _total_liquidity_locked = _total_liquidity_locked.add(liquidity);\r\n        _locked_liquidity[staker_address] = _locked_liquidity[staker_address].add(liquidity);\r\n\r\n        // Need to call to update the combined weights\r\n        _updateRewardAndBalance(staker_address, false);\r\n\r\n        // Needed for edge case if the staker only claims once, and after the lock expired\r\n        if (lastRewardClaimTime[staker_address] == 0) lastRewardClaimTime[staker_address] = block.timestamp;\r\n\r\n        emit StakeLocked(staker_address, liquidity, secs, kek_id, source_address);\r\n    }\r\n\r\n    // Two different withdrawLocked functions are needed because of delegateCall and msg.sender issues\r\n    function withdrawLocked(bytes32 kek_id) nonReentrant public {\r\n        require(withdrawalsPaused == false, \"Withdrawals paused\");\r\n        _withdrawLocked(msg.sender, msg.sender, kek_id);\r\n    }\r\n\r\n    // No withdrawer == msg.sender check needed since this is only internally callable and the checks are done in the wrapper\r\n    // functions like withdraw(), migrator_withdraw_unlocked() and migrator_withdraw_locked()\r\n    function _withdrawLocked(address staker_address, address destination_address, bytes32 kek_id) internal  {\r\n        // Collect rewards first and then update the balances\r\n        _getReward(staker_address, destination_address);\r\n\r\n        LockedStake memory thisStake;\r\n        thisStake.liquidity = 0;\r\n        uint theArrayIndex;\r\n        for (uint256 i = 0; i < lockedStakes[staker_address].length; i++){ \r\n            if (kek_id == lockedStakes[staker_address][i].kek_id){\r\n                thisStake = lockedStakes[staker_address][i];\r\n                theArrayIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        require(thisStake.kek_id == kek_id, \"Stake not found\");\r\n        require(block.timestamp >= thisStake.ending_timestamp || stakesUnlocked == true || valid_migrators[msg.sender] == true, \"Stake is still locked!\");\r\n\r\n        uint256 liquidity = thisStake.liquidity;\r\n\r\n        if (liquidity > 0) {\r\n            // Update liquidities\r\n            _total_liquidity_locked = _total_liquidity_locked.sub(liquidity);\r\n            _locked_liquidity[staker_address] = _locked_liquidity[staker_address].sub(liquidity);\r\n\r\n            // Remove the stake from the array\r\n            delete lockedStakes[staker_address][theArrayIndex];\r\n\r\n            // Need to call to update the combined weights\r\n            _updateRewardAndBalance(staker_address, false);\r\n\r\n            // Give the tokens to the destination_address\r\n            // Should throw if insufficient balance\r\n            stakingToken.transfer(destination_address, liquidity);\r\n\r\n            emit WithdrawLocked(staker_address, liquidity, kek_id, destination_address);\r\n        }\r\n\r\n    }\r\n    \r\n    // Two different getReward functions are needed because of delegateCall and msg.sender issues\r\n    function getReward() external nonReentrant returns (uint256[] memory) {\r\n        require(rewardsCollectionPaused == false,\"Rewards collection paused\");\r\n        return _getReward(msg.sender, msg.sender);\r\n    }\r\n\r\n    // No withdrawer == msg.sender check needed since this is only internally callable\r\n    function _getReward(address rewardee, address destination_address) internal updateRewardAndBalance(rewardee, true) returns (uint256[] memory rewards_before) {\r\n        // Update the rewards array and distribute rewards\r\n        rewards_before = new uint256[](rewardTokens.length);\r\n\r\n        for (uint256 i = 0; i < rewardTokens.length; i++){ \r\n            rewards_before[i] = rewards[rewardee][i];\r\n            rewards[rewardee][i] = 0;\r\n            ERC20(rewardTokens[i]).transfer(destination_address, rewards_before[i]);\r\n            emit RewardPaid(rewardee, rewards_before[i], rewardTokens[i], destination_address);\r\n        }\r\n\r\n        lastRewardClaimTime[rewardee] = block.timestamp;\r\n    }\r\n\r\n    // If the period expired, renew it\r\n    function retroCatchUp() internal {\r\n        // Pull in rewards from the rewards distributor\r\n        rewards_distributor.distributeReward(address(this));\r\n\r\n        // Ensure the provided reward amount is not more than the balance in the contract.\r\n        // This keeps the reward rate in the right range, preventing overflows due to\r\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\r\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\r\n        uint256 num_periods_elapsed = uint256(block.timestamp.sub(periodFinish)) / rewardsDuration; // Floor division to the nearest period\r\n        \r\n        // Make sure there are enough tokens to renew the reward period\r\n        for (uint256 i = 0; i < rewardTokens.length; i++){ \r\n            require(rewardRates(i).mul(rewardsDuration).mul(num_periods_elapsed + 1) <= ERC20(rewardTokens[i]).balanceOf(address(this)), string(abi.encodePacked(\"Not enough reward tokens available: \", rewardTokens[i])) );\r\n        }\r\n        \r\n        // uint256 old_lastUpdateTime = lastUpdateTime;\r\n        // uint256 new_lastUpdateTime = block.timestamp;\r\n\r\n        // lastUpdateTime = periodFinish;\r\n        periodFinish = periodFinish.add((num_periods_elapsed.add(1)).mul(rewardsDuration));\r\n\r\n        _updateStoredRewardsAndTime();\r\n\r\n        emit RewardsPeriodRenewed(address(stakingToken));\r\n    }\r\n\r\n    function _updateStoredRewardsAndTime() internal {\r\n        // Get the rewards\r\n        uint256[] memory rewards_per_token = rewardsPerToken();\r\n\r\n        // Update the rewardsPerTokenStored\r\n        for (uint256 i = 0; i < rewardsPerTokenStored.length; i++){ \r\n            rewardsPerTokenStored[i] = rewards_per_token[i];\r\n        }\r\n\r\n        // Update the last stored time\r\n        lastUpdateTime = lastTimeRewardApplicable();\r\n    }\r\n\r\n    function sync_gauge_weights(bool force_update) public {\r\n        // Loop through the gauge controllers\r\n        for (uint256 i = 0; i < gaugeControllers.length; i++){ \r\n            address gauge_controller_address = gaugeControllers[i];\r\n            if (gauge_controller_address != address(0)) {\r\n                if (force_update || (block.timestamp > last_gauge_time_totals[i])){\r\n                    // Update the gauge_relative_weight\r\n                    last_gauge_relative_weights[i] = IFraxGaugeController(gauge_controller_address).gauge_relative_weight_write(address(this), block.timestamp);\r\n                    last_gauge_time_totals[i] = IFraxGaugeController(gauge_controller_address).time_total();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function sync() public {\r\n        // Sync the gauge weight, if applicable\r\n        sync_gauge_weights(false);\r\n\r\n        if (block.timestamp >= periodFinish) {\r\n            retroCatchUp();\r\n        }\r\n        else {\r\n            _updateStoredRewardsAndTime();\r\n        }\r\n    }\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    // Migrator can stake for someone else (they won't be able to withdraw it back though, only staker_address can). \r\n    function migrator_stakeLocked_for(address staker_address, uint256 amount, uint256 secs, uint256 start_timestamp) external isMigrating {\r\n        require(staker_allowed_migrators[staker_address][msg.sender] && valid_migrators[msg.sender], \"Mig. invalid or unapproved\");\r\n        _stakeLocked(staker_address, msg.sender, amount, secs, start_timestamp);\r\n    }\r\n\r\n    // Used for migrations\r\n    function migrator_withdraw_locked(address staker_address, bytes32 kek_id) external isMigrating {\r\n        require(staker_allowed_migrators[staker_address][msg.sender] && valid_migrators[msg.sender], \"Mig. invalid or unapproved\");\r\n        _withdrawLocked(staker_address, msg.sender, kek_id);\r\n    }\r\n\r\n    // Adds supported migrator address \r\n    function addMigrator(address migrator_address) external onlyByOwner {\r\n        valid_migrators[migrator_address] = true;\r\n    }\r\n\r\n    // Remove a migrator address\r\n    function removeMigrator(address migrator_address) external onlyByOwner {\r\n        require(valid_migrators[migrator_address] == true, \"Address nonexistant\");\r\n        \r\n        // Delete from the mapping\r\n        delete valid_migrators[migrator_address];\r\n    }\r\n\r\n    // Added to support recovering LP Rewards and other mistaken tokens from other systems to be distributed to holders\r\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyTknMgrs(tokenAddress) {\r\n        // Check if the desired token is a reward token\r\n        bool isRewardToken = false;\r\n        for (uint256 i = 0; i < rewardTokens.length; i++){ \r\n            if (rewardTokens[i] == tokenAddress) {\r\n                isRewardToken = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Only the reward managers can take back their reward tokens\r\n        if (isRewardToken && rewardManagers[tokenAddress] == msg.sender){\r\n            ERC20(tokenAddress).transfer(msg.sender, tokenAmount);\r\n            emit Recovered(msg.sender, tokenAddress, tokenAmount);\r\n            return;\r\n        }\r\n\r\n        // Other tokens, like the staking token, airdrops, or accidental deposits, can be withdrawn by the owner\r\n        else if (!isRewardToken && (msg.sender == owner)){\r\n            ERC20(tokenAddress).transfer(msg.sender, tokenAmount);\r\n            emit Recovered(msg.sender, tokenAddress, tokenAmount);\r\n            return;\r\n        }\r\n\r\n        // If none of the above conditions are true\r\n        else {\r\n            revert(\"No valid tokens to recover\");\r\n        }\r\n    }\r\n\r\n    function setRewardsDuration(uint256 _rewardsDuration) external onlyByOwner {\r\n        require(_rewardsDuration >= 86400, \"Rewards duration too short\");\r\n        require(\r\n            periodFinish == 0 || block.timestamp > periodFinish,\r\n            \"Reward period incomplete\"\r\n        );\r\n        rewardsDuration = _rewardsDuration;\r\n        emit RewardsDurationUpdated(rewardsDuration);\r\n    }\r\n\r\n    function setMultipliers(uint256 _lock_max_multiplier, uint256 _vefxs_max_multiplier, uint256 _vefxs_per_frax_for_max_boost) external onlyByOwner {\r\n        require(_lock_max_multiplier >= MULTIPLIER_PRECISION, \"Mult must be >= MULTIPLIER_PRECISION\");\r\n        require(_vefxs_max_multiplier >= 0, \"veFXS mul must be >= 0\");\r\n        require(_vefxs_per_frax_for_max_boost > 0, \"veFXS pct max must be >= 0\");\r\n\r\n        lock_max_multiplier = _lock_max_multiplier;\r\n        vefxs_max_multiplier = _vefxs_max_multiplier;\r\n        vefxs_per_frax_for_max_boost = _vefxs_per_frax_for_max_boost;\r\n\r\n        emit MaxVeFXSMultiplier(vefxs_max_multiplier);\r\n        emit LockedStakeMaxMultiplierUpdated(lock_max_multiplier);\r\n        emit veFXSPerFraxForMaxBoostUpdated(vefxs_per_frax_for_max_boost);\r\n    }\r\n\r\n    function setLockedStakeTimeForMinAndMaxMultiplier(uint256 _lock_time_for_max_multiplier, uint256 _lock_time_min) external onlyByOwner {\r\n        require(_lock_time_for_max_multiplier >= 1, \"Mul max time must be >= 1\");\r\n        require(_lock_time_min >= 1, \"Mul min time must be >= 1\");\r\n\r\n        lock_time_for_max_multiplier = _lock_time_for_max_multiplier;\r\n        lock_time_min = _lock_time_min;\r\n\r\n        emit LockedStakeTimeForMaxMultiplier(lock_time_for_max_multiplier);\r\n        emit LockedStakeMinTime(_lock_time_min);\r\n    }\r\n\r\n    function greylistAddress(address _address) external onlyByOwner {\r\n        greylist[_address] = !(greylist[_address]);\r\n    }\r\n\r\n    function unlockStakes() external onlyByOwner {\r\n        stakesUnlocked = !stakesUnlocked;\r\n    }\r\n\r\n    function toggleStaking() external onlyByOwner {\r\n        stakingPaused = !stakingPaused;\r\n    }\r\n\r\n    function toggleMigrations() external onlyByOwner {\r\n        migrationsOn = !migrationsOn;\r\n    }\r\n\r\n    function toggleWithdrawals() external onlyByOwner {\r\n        withdrawalsPaused = !withdrawalsPaused;\r\n    }\r\n\r\n    function toggleRewardsCollection() external onlyByOwner {\r\n        rewardsCollectionPaused = !rewardsCollectionPaused;\r\n    }\r\n\r\n    // The owner or the reward token managers can set reward rates \r\n    function setRewardRate(address reward_token_address, uint256 new_rate, bool sync_too) external onlyTknMgrs(reward_token_address) {\r\n        rewardRatesManual[rewardTokenAddrToIdx[reward_token_address]] = new_rate;\r\n        \r\n        if (sync_too){\r\n            sync();\r\n        }\r\n    }\r\n\r\n    // The owner or the reward token managers can set reward rates \r\n    function setGaugeController(address reward_token_address, address _rewards_distributor_address, address _gauge_controller_address, bool sync_too) external onlyTknMgrs(reward_token_address) {\r\n        gaugeControllers[rewardTokenAddrToIdx[reward_token_address]] = _gauge_controller_address;\r\n        rewards_distributor = IFraxGaugeFXSRewardsDistributor(_rewards_distributor_address);\r\n\r\n        if (sync_too){\r\n            sync();\r\n        }\r\n    }\r\n\r\n    // The owner or the reward token managers can change managers\r\n    function changeTokenManager(address reward_token_address, address new_manager_address) external onlyTknMgrs(reward_token_address) {\r\n        rewardManagers[reward_token_address] = new_manager_address;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event StakeLocked(address indexed user, uint256 amount, uint256 secs, bytes32 kek_id, address source_address);\r\n    event WithdrawLocked(address indexed user, uint256 amount, bytes32 kek_id, address destination_address);\r\n    event RewardPaid(address indexed user, uint256 reward, address token_address, address destination_address);\r\n    event RewardsDurationUpdated(uint256 newDuration);\r\n    event Recovered(address destination_address, address token, uint256 amount);\r\n    event RewardsPeriodRenewed(address token);\r\n    event LockedStakeMaxMultiplierUpdated(uint256 multiplier);\r\n    event LockedStakeTimeForMaxMultiplier(uint256 secs);\r\n    event LockedStakeMinTime(uint256 secs);\r\n    event MaxVeFXSMultiplier(uint256 multiplier);\r\n    event veFXSPerFraxForMaxBoostUpdated(uint256 scale_factor);\r\n}\r\n\r\n\r\n// File contracts/Staking/Variants/StakingRewardsMultiGauge_StakeDAO.sol\r\n\r\ncontract StakingRewardsMultiGauge_StakeDAO is StakingRewardsMultiGauge {\r\n    constructor (\r\n        address _owner,\r\n        address _stakingToken, \r\n        address _rewards_distributor_address,\r\n        string[] memory _rewardSymbols,\r\n        address[] memory _rewardTokens,\r\n        address[] memory _rewardManagers,\r\n        uint256[] memory _rewardRates,\r\n        address[] memory _gaugeControllers\r\n    ) \r\n    StakingRewardsMultiGauge(_owner, _stakingToken, _rewards_distributor_address, _rewardSymbols, _rewardTokens, _rewardManagers, _rewardRates, _gaugeControllers)\r\n    {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewards_distributor_address\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_rewardSymbols\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_rewardManagers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardRates\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_gaugeControllers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"LockedStakeMaxMultiplierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"LockedStakeMinTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"LockedStakeTimeForMaxMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"MaxVeFXSMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination_address\",\"type\":\"address\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RewardsPeriodRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source_address\",\"type\":\"address\"}],\"name\":\"StakeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination_address\",\"type\":\"address\"}],\"name\":\"WithdrawLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scale_factor\",\"type\":\"uint256\"}],\"name\":\"veFXSPerFraxForMaxBoostUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"migrator_address\",\"type\":\"address\"}],\"name\":\"addMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calcCurCombinedWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"old_combined_weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_vefxs_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_combined_weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward_token_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"new_manager_address\",\"type\":\"address\"}],\"name\":\"changeTokenManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"combinedWeightOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"new_earned\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fraxPerLPToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gaugeControllers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewards_per_duration_arr\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardSymbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"greylist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"greylistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller_addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_token_addr\",\"type\":\"address\"}],\"name\":\"isTokenManagerFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"lockMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock_max_multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock_time_for_max_multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock_time_min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedLiquidityOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedStakesOf\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"start_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ending_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lock_multiplier\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingRewardsMultiGauge.LockedStake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationsOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start_timestamp\",\"type\":\"uint256\"}],\"name\":\"migrator_stakeLocked_for\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"}],\"name\":\"migrator_withdraw_locked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"minVeFXSForMaxBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"migrator_address\",\"type\":\"address\"}],\"name\":\"removeMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token_idx\",\"type\":\"uint256\"}],\"name\":\"rewardRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rwd_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardRatesManual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardSymbols\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardTokenAddrToIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsCollectionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"newRewardsPerTokenStored\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards_distributor\",\"outputs\":[{\"internalType\":\"contract IFraxGaugeFXSRewardsDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward_token_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewards_distributor_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge_controller_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sync_too\",\"type\":\"bool\"}],\"name\":\"setGaugeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lock_time_for_max_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lock_time_min\",\"type\":\"uint256\"}],\"name\":\"setLockedStakeTimeForMinAndMaxMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lock_max_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vefxs_max_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vefxs_per_frax_for_max_boost\",\"type\":\"uint256\"}],\"name\":\"setMultipliers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward_token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"new_rate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sync_too\",\"type\":\"bool\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"stakeLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"migrator_address\",\"type\":\"address\"}],\"name\":\"stakerAllowMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"migrator_address\",\"type\":\"address\"}],\"name\":\"stakerDisallowMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staker_allowed_migrators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakesUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IStakeDaoVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"force_update\",\"type\":\"bool\"}],\"name\":\"sync_gauge_weights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMigrations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleRewardsCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCombinedWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidityLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"userStakedFrax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"valid_migrators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"veFXSMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vefxs_max_multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vefxs_per_frax_for_max_boost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"}],\"name\":\"withdrawLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalsPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakingRewardsMultiGauge_StakeDAO","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"100000","ConstructorArguments":"000000000000000000000000ff5b4bcbf765fe363269114e1c765229a29edefd0000000000000000000000005af15da84a4a6edf2d9fa6720de921e1026e37b7000000000000000000000000278dc748eda1d8efef1adfb518542612b49fcd34000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002ab6a60d23ca0dfca7761b7ab56459d9c964d000000000000000000000000073968b9a57c6e53d41345fd57a6e6ae27d6cdb2f0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000234d953a9404bf9dbc3b526271d440cd2870bcd2000000000000000000000000f930ebbd05ef8b25b1797b9b2109ddc9b0d43063000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000a86cc92e3da00000000000000000000000000000000000000000000000000000a86cc92e3da000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"ipfs://92cb052ff4655d13562470bc5cd9a0eb275980daac617e040bce4a52ce186701"}]}