{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.7.4;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.7.4;\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.4;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function isOwner(address userAddress) public view returns (bool) {\\n        return _owner == userAddress;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.7.4;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"},\"TBIRDPresale_Ethereum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n *\\n *\\n *    TBIRD Presale Contract\\n *\\n *\\n *\\n **/\\n\\npragma solidity ^0.7.4;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nabstract contract DateTimeAPI {\\n    /*\\n     *  Abstract contract for interfacing with the DateTime contract.\\n     *\\n     */\\n    function isLeapYear(uint16 year) public pure virtual returns (bool);\\n\\n    function toTimestamp(\\n        uint16 year,\\n        uint8 month,\\n        uint8 day\\n    ) public pure virtual returns (uint256 timestamp);\\n\\n    function toTimestamp(\\n        uint16 year,\\n        uint8 month,\\n        uint8 day,\\n        uint8 hour,\\n        uint8 minute,\\n        uint8 second\\n    ) public pure virtual returns (uint256 timestamp);\\n}\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\\ncontract TBIRDPresale is Ownable {\\n    using SafeMath for uint256;\\n\\n    uint256 public privPresaleStartTime = 1633723200;\\n    uint256 public privPresaleEndTime = 1633896000;\\n\\n    uint256 public pubPresaleStartTime = 1633723200;\\n    uint256 public pubPresaleEndTime = 1633896000;\\n\\n    uint256 public privPresaleCap = 60_000_000e9; //10% of total supply\\n    uint256 public pubPresaleCap = 60_000_000e9; //10% of total supply\\n\\n    uint256 public privPresalePrice = 8000; // $0.008 USDC (decimal 6)\\n    uint256 public pubPresalePrice = 9000; // $0.009 USDC\\n\\n    uint256 public privPresaleMinLimit = 200_000e6; //USD\\n    uint256 public pubPresaleMinLimit = 10_000e6; //USD\\n\\n    struct User {\\n        uint256 ethAmount;\\n        uint256 tbirdAmount;\\n        address polygonWalletAddress;\\n    }\\n\\n    mapping(address =\\u003e bool) privWhiteList;\\n    mapping(address =\\u003e User) privUsers;\\n    mapping(uint256 =\\u003e address) privUserIDs;\\n    uint256 public privUserCount = 0;\\n    uint256 public privSoldTokenAmount = 0;\\n    uint256 public privTotalPurchased = 0;\\n\\n    mapping(address =\\u003e bool) pubWhiteList;\\n    mapping(address =\\u003e User) pubUsers;\\n    mapping(uint256 =\\u003e address) pubUserIDs;\\n    uint256 public pubUserCount = 0;\\n    uint256 public pubSoldTokenAmount = 0;\\n    uint256 public pubTotalPurchased = 0;\\n\\n    AggregatorV3Interface internal priceFeedETH;\\n\\n    address serviceWallet;\\n\\n    constructor() {\\n        priceFeedETH = AggregatorV3Interface(\\n            0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\\n        );\\n    }\\n\\n    function buyPrivTBIRD(address polygonWalletAddress) external payable {\\n        require(checkPrivWhiteList(msg.sender), \\\"Not white list user\\\");\\n\\n        uint256 ethAmount = msg.value;\\n        uint256 ethPrice = getETHPrice();\\n        uint256 usdAmount = ethAmount.mul(ethPrice).div(1e20);\\n        require(usdAmount \\u003e= privPresaleMinLimit, \\\"Less than minimun limit\\\");\\n\\n        uint256 tbirdAmount = usdAmount.mul(1e9).div(privPresalePrice);\\n        privSoldTokenAmount = privSoldTokenAmount.add(tbirdAmount);\\n        require(\\n            privSoldTokenAmount \\u003c= privPresaleCap,\\n            \\\"Insufficient Token Balance\\\"\\n        );\\n\\n        if (privUserExists(msg.sender)) {\\n            User storage user = privUsers[msg.sender];\\n            user.ethAmount = user.ethAmount.add(ethAmount);\\n            user.tbirdAmount = user.tbirdAmount.add(tbirdAmount);\\n            user.polygonWalletAddress = polygonWalletAddress;\\n        } else {\\n            privUsers[msg.sender] = User({\\n                ethAmount: ethAmount,\\n                tbirdAmount: tbirdAmount,\\n                polygonWalletAddress: polygonWalletAddress\\n            });\\n            privUserIDs[privUserCount] = msg.sender;\\n\\n            privUserCount++;\\n        }\\n\\n        privTotalPurchased = privTotalPurchased.add(ethAmount);\\n    }\\n\\n    //auto claiming, system will send $TBIRD token to user\\u0027s polygon wallet.\\n    function buyPubTBIRD(address polygonWalletAddress) external payable {\\n        require(checkPubWhiteList(msg.sender), \\\"Not white list user\\\");\\n\\n        uint256 ethAmount = msg.value;\\n        uint256 ethPrice = getETHPrice();\\n        uint256 usdAmount = ethAmount.mul(ethPrice).div(1e20);\\n        require(usdAmount \\u003e= pubPresaleMinLimit, \\\"Less than minimun limit\\\");\\n\\n        uint256 tbirdAmount = usdAmount.mul(1e9).div(pubPresalePrice);\\n        pubSoldTokenAmount = pubSoldTokenAmount.add(tbirdAmount);\\n        require(\\n            pubSoldTokenAmount \\u003c= pubPresaleCap,\\n            \\\"Insufficient Token Balance\\\"\\n        );\\n\\n        if (pubUserExists(msg.sender)) {\\n            User storage user = pubUsers[msg.sender];\\n            user.ethAmount = user.ethAmount.add(ethAmount);\\n            user.tbirdAmount = user.tbirdAmount.add(tbirdAmount);\\n            user.polygonWalletAddress = polygonWalletAddress;\\n        } else {\\n            pubUsers[msg.sender] = User({\\n                ethAmount: ethAmount,\\n                tbirdAmount: tbirdAmount,\\n                polygonWalletAddress: polygonWalletAddress\\n            });\\n            pubUserIDs[pubUserCount] = msg.sender;\\n            pubUserCount++;\\n        }\\n\\n        pubTotalPurchased = pubTotalPurchased.add(ethAmount);\\n    }\\n\\n    function privUserExists(address userAddress) public view returns (bool) {\\n        return (privUsers[userAddress].ethAmount != 0);\\n    }\\n\\n    function pubUserExists(address userAddress) public view returns (bool) {\\n        return (pubUsers[userAddress].ethAmount != 0);\\n    }\\n\\n    function privSaleUserInfo(uint256 index)\\n        public\\n        view\\n        returns (\\n            uint256 ethAmount,\\n            uint256 tbirdAmount,\\n            address polygonWalletAddress\\n        )\\n    {\\n        require(index \\u003c privUserCount, \\\"Invalid index\\\");\\n\\n        return privSaleUserInfoFromAddress(privUserIDs[index]);\\n    }\\n\\n    function privSaleUserInfoFromAddress(address userAddress)\\n        public\\n        view\\n        returns (\\n            uint256 ethAmount,\\n            uint256 tbirdAmount,\\n            address polygonWalletAddress\\n        )\\n    {\\n        require(privUserExists(userAddress), \\\"Not exists\\\");\\n\\n        User memory user = privUsers[userAddress];\\n\\n        ethAmount = user.ethAmount;\\n        tbirdAmount = user.tbirdAmount;\\n        polygonWalletAddress = user.polygonWalletAddress;\\n    }\\n\\n    function pubSaleUserInfo(uint256 index)\\n        public\\n        view\\n        returns (\\n            uint256 ethAmount,\\n            uint256 tbirdAmount,\\n            address polygonWalletAddress\\n        )\\n    {\\n        require(index \\u003c pubUserCount, \\\"Invalid index\\\");\\n\\n        return pubSaleUserInfoFromAddress(pubUserIDs[index]);\\n    }\\n\\n    function pubSaleUserInfoFromAddress(address userAddress)\\n        public\\n        view\\n        returns (\\n            uint256 ethAmount,\\n            uint256 tbirdAmount,\\n            address polygonWalletAddress\\n        )\\n    {\\n        require(pubUserExists(userAddress), \\\"Not exists\\\");\\n\\n        User memory user = pubUsers[userAddress];\\n\\n        ethAmount = user.ethAmount;\\n        tbirdAmount = user.tbirdAmount;\\n        polygonWalletAddress = user.polygonWalletAddress;\\n    }\\n\\n    function estimateAmount(uint256 ethAmount, uint256 price)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 ethPrice = getETHPrice();\\n        uint256 usdAmount = ethAmount.mul(ethPrice).div(1e20);\\n        uint256 tbirdAmount = usdAmount.mul(1e9).div(price);\\n\\n        return (usdAmount, tbirdAmount);\\n    }\\n\\n    function getETHPrice() public view returns (uint256) {\\n        (\\n            uint80 roundID,\\n            int256 price,\\n            uint256 startedAt,\\n            uint256 timeStamp,\\n            uint80 answeredInRound\\n        ) = priceFeedETH.latestRoundData();\\n\\n        return uint256(price);\\n    }\\n\\n    function checkPrivWhiteList(address userAddress)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return true;    //allowed all\\n        // if (privWhiteList[userAddress]) return true;\\n\\n        // return false;\\n    }\\n\\n    function checkPubWhiteList(address userAddress) public view returns (bool) {\\n        return true;    //allowed all\\n        // if (pubWhiteList[userAddress]) return true;\\n\\n        // return false;\\n    }\\n\\n    function setTime(\\n        uint16 year,\\n        uint8 month,\\n        uint8 day,\\n        uint8 hour,\\n        uint8 minute,\\n        uint8 second,\\n        uint8 flag\\n    ) public onlyOwner {\\n        uint256 timestamp = toTimestamp(year, month, day, hour, minute, second);\\n\\n        if (flag == 0) privPresaleStartTime = timestamp;\\n        else if (flag == 1) privPresaleEndTime = timestamp;\\n        else if (flag == 2) pubPresaleStartTime = timestamp;\\n        else if (flag == 3) pubPresaleEndTime = timestamp;\\n    }\\n\\n    function setPrivPresaleCap(uint256 cap) public onlyOwner {\\n        privPresaleCap = cap;\\n    }\\n\\n    function setPubPresaleCap(uint256 cap) public onlyOwner {\\n        pubPresaleCap = cap;\\n    }\\n\\n    function setPrivPresaleMinLimit(uint256 _privPresaleMinLimit)\\n        public\\n        onlyOwner\\n    {\\n        privPresaleMinLimit = _privPresaleMinLimit;\\n    }\\n\\n    function setPubPresaleMinLimit(uint256 _pubPresaleMinLimit)\\n        public\\n        onlyOwner\\n    {\\n        pubPresaleMinLimit = _pubPresaleMinLimit;\\n    }\\n\\n    function addPrivWhiteList(address userAddress) public onlyOwner {\\n        require(checkPrivWhiteList(userAddress) != true, \\\"Already exists\\\");\\n        privWhiteList[userAddress] = true;\\n    }\\n\\n    function removePrivWhiteList(address userAddress) public onlyOwner {\\n        require(checkPrivWhiteList(userAddress) == true, \\\"No exist.\\\");\\n        require(privUserExists(userAddress) == false, \\\"Already purchased\\\");\\n        privWhiteList[userAddress] = false;\\n    }\\n\\n    function addPubWhiteList(address userAddress) public onlyOwner {\\n        require(checkPubWhiteList(userAddress) != true, \\\"Already exists\\\");\\n        pubWhiteList[userAddress] = true;\\n    }\\n\\n    function removePubWhiteList(address userAddress) public onlyOwner {\\n        require(checkPubWhiteList(userAddress) == true, \\\"No exist.\\\");\\n        require(pubUserExists(userAddress) == false, \\\"Already purchased\\\");\\n        pubWhiteList[userAddress] = false;\\n    }\\n\\n    function setServiceWallet(address _serviceWallet) public onlyOwner {\\n        serviceWallet = _serviceWallet;\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        address payable wallet = address(uint160(serviceWallet));\\n        uint256 amount = address(this).balance;\\n        wallet.transfer(amount);\\n    }\\n\\n    /**\\n     * Utils\\n     */\\n    //////////////////////////////////////////////////////////////////\\n\\n    function isLeapYear(uint16 year) private pure returns (bool) {\\n        if (year % 4 != 0) {\\n            return false;\\n        }\\n        if (year % 100 != 0) {\\n            return true;\\n        }\\n        if (year % 400 != 0) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    function toTimestamp(\\n        uint16 year,\\n        uint8 month,\\n        uint8 day\\n    ) private pure returns (uint256 timestamp) {\\n        return toTimestamp(year, month, day, 0, 0, 0);\\n    }\\n\\n    function toTimestamp(\\n        uint16 year,\\n        uint8 month,\\n        uint8 day,\\n        uint8 hour,\\n        uint8 minute,\\n        uint8 second\\n    ) private pure returns (uint256 timestamp) {\\n        uint32 DAY_IN_SECONDS = 86400;\\n        uint32 YEAR_IN_SECONDS = 31536000;\\n        uint32 LEAP_YEAR_IN_SECONDS = 31622400;\\n\\n        uint32 HOUR_IN_SECONDS = 3600;\\n        uint32 MINUTE_IN_SECONDS = 60;\\n\\n        uint16 ORIGIN_YEAR = 1970;\\n\\n        uint16 i;\\n\\n        // Year\\n        for (i = ORIGIN_YEAR; i \\u003c year; i++) {\\n            if (isLeapYear(i)) {\\n                timestamp += LEAP_YEAR_IN_SECONDS;\\n            } else {\\n                timestamp += YEAR_IN_SECONDS;\\n            }\\n        }\\n\\n        // Month\\n        uint8[12] memory monthDayCounts;\\n        monthDayCounts[0] = 31;\\n        if (isLeapYear(year)) {\\n            monthDayCounts[1] = 29;\\n        } else {\\n            monthDayCounts[1] = 28;\\n        }\\n        monthDayCounts[2] = 31;\\n        monthDayCounts[3] = 30;\\n        monthDayCounts[4] = 31;\\n        monthDayCounts[5] = 30;\\n        monthDayCounts[6] = 31;\\n        monthDayCounts[7] = 31;\\n        monthDayCounts[8] = 30;\\n        monthDayCounts[9] = 31;\\n        monthDayCounts[10] = 30;\\n        monthDayCounts[11] = 31;\\n\\n        for (i = 1; i \\u003c month; i++) {\\n            timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\\n        }\\n\\n        // Day\\n        timestamp += DAY_IN_SECONDS * (day - 1);\\n\\n        // Hour\\n        timestamp += HOUR_IN_SECONDS * (hour);\\n\\n        // Minute\\n        timestamp += MINUTE_IN_SECONDS * (minute);\\n\\n        // Second\\n        timestamp += second;\\n\\n        return timestamp;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"addPrivWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"addPubWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"polygonWalletAddress\",\"type\":\"address\"}],\"name\":\"buyPrivTBIRD\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"polygonWalletAddress\",\"type\":\"address\"}],\"name\":\"buyPubTBIRD\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"checkPrivWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"checkPubWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"estimateAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privPresaleCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privPresaleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privPresaleMinLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privPresalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privPresaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"privSaleUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tbirdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"polygonWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"privSaleUserInfoFromAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tbirdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"polygonWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privSoldTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privTotalPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"privUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pubPresaleCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pubPresaleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pubPresaleMinLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pubPresalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pubPresaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"pubSaleUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tbirdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"polygonWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"pubSaleUserInfoFromAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tbirdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"polygonWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pubSoldTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pubTotalPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pubUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"pubUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"removePrivWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"removePubWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"setPrivPresaleCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_privPresaleMinLimit\",\"type\":\"uint256\"}],\"name\":\"setPrivPresaleMinLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"setPubPresaleCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pubPresaleMinLimit\",\"type\":\"uint256\"}],\"name\":\"setPubPresaleMinLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_serviceWallet\",\"type\":\"address\"}],\"name\":\"setServiceWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"day\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minute\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"second\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"setTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"TBIRDPresale","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://eb32f1454bb2417be94b3aa4f9d441a3c744a6463d5bb1cdb3b28a10aed70f6d"}]}