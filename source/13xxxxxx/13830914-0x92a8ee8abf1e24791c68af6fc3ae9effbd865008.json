{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Models/TokenCharacter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n/*\\r\\n\\r\\n\\r\\n▄▄▄█████▓ ██░ ██ ▓█████     ██░ ██ ▓█████  ██▓  ██████ ▄▄▄█████▓\\r\\n▓  ██▒ ▓▒▓██░ ██▒▓█   ▀    ▓██░ ██▒▓█   ▀ ▓██▒▒██    ▒ ▓  ██▒ ▓▒\\r\\n▒ ▓██░ ▒░▒██▀▀██░▒███      ▒██▀▀██░▒███   ▒██▒░ ▓██▄   ▒ ▓██░ ▒░\\r\\n░ ▓██▓ ░ ░▓█ ░██ ▒▓█  ▄    ░▓█ ░██ ▒▓█  ▄ ░██░  ▒   ██▒░ ▓██▓ ░ \\r\\n  ▒██▒ ░ ░▓█▒░██▓░▒████▒   ░▓█▒░██▓░▒████▒░██░▒██████▒▒  ▒██▒ ░ \\r\\n  ▒ ░░    ▒ ░░▒░▒░░ ▒░ ░    ▒ ░░▒░▒░░ ▒░ ░░▓  ▒ ▒▓▒ ▒ ░  ▒ ░░   \\r\\n    ░     ▒ ░▒░ ░ ░ ░  ░    ▒ ░▒░ ░ ░ ░  ░ ▒ ░░ ░▒  ░ ░    ░    \\r\\n  ░       ░  ░░ ░   ░       ░  ░░ ░   ░    ▒ ░░  ░  ░    ░      \\r\\n          ░  ░  ░   ░  ░    ░  ░  ░   ░  ░ ░        ░           \\r\\n                                                                \\r\\n\\r\\n            ;`.                       ,'/\\r\\n            |`.`-.      _____      ,-;,'|\\r\\n            |  `-.\\\\__,-'     `-.__//'   |\\r\\n            |     `|               \\\\ ,  |\\r\\n            `.  ```                 ,  .'\\r\\n              \\\\_`      \\\\     /      `_/\\r\\n                \\\\    ^  \\\\   /   ^   /\\r\\n                 |   X   ____   X  |\\r\\n                 |     ,'    `.    |\\r\\n                 |    (  O' O  )   |\\r\\n                 `.    \\\\__,.__/   ,'\\r\\n                   `-._  `--'  _,'\\r\\n                       `------'\\r\\n\\r\\ncreated with curiosity by .pwa group 2021.\\r\\n\\r\\n    gm. wgmi.\\r\\n\\r\\n            if you're reading this, you are early.\\r\\n\\r\\n*/\\r\\n\\r\\nimport \\\"./ERC721Custom.sol\\\";        //Custom ERC721 implementation\\r\\nimport \\\"./Base/Pausable.sol\\\";       //Pause critical functions\\r\\n\\r\\ncontract TokenCharacter is Pausable, ERC721 {\\r\\n\\r\\n    uint16 public constant MAX_CHARACTERS = 15000; //The hard limit. We may create less than this.\\r\\n\\r\\n    constructor() ERC721(\\r\\n        \\\"The Heist Characters\\\",\\r\\n        \\\"HEIST\\\",\\r\\n        MAX_CHARACTERS)\\r\\n    {\\r\\n        //gm\\r\\n    }\\r\\n\\r\\n    function Mint(uint8 amount, address to) external onlyControllers whenNotPaused {\\r\\n        for (uint256 i = 0; i < amount; i++ ){\\r\\n            _mint(to, _totalMinted + 1); //start at tokenID = 1\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/Models/ERC721Custom.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n//Custom ERC721 implemention for lower minting.\\r\\n//We stand on the shoulders of giants.\\r\\n// -8C30\\r\\n\\r\\nimport \\\"./Base/Controllable.sol\\\";\\r\\nimport \\\"../Interfaces/I_MetadataHandler.sol\\\";\\r\\n\\r\\ncontract ERC721 is Controllable {\\r\\n\\r\\n    //ERC721 events\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenID);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed tokenID);\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n    \\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    uint16 public immutable maxSupply;\\r\\n\\r\\n    //we only have 15k max tokens, so we're using uint16 for slight gas saving on gameplay functions\\r\\n    //but keeping uint256 interfaces for compatibility\\r\\n\\r\\n    uint16 public _totalMinted; //if contract allows burning, then # of minted can be > supply\\r\\n    uint16 public _totalSupply16;\\r\\n    \\r\\n    mapping(uint16 => address) public _ownerOf16;\\r\\n    mapping(uint16 => address) public getApproved;\\r\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\r\\n\\r\\n    I_MetadataHandler metaDataHandler;\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint16 _maxSupply\\r\\n    ) {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n        maxSupply = _maxSupply;\\r\\n    }\\r\\n    \\r\\n    //Explicit version returning uint256 to fit with the EIP 721 specification\\r\\n    function totalSupply() view external returns (uint256) {\\r\\n        return uint256(_totalSupply16);\\r\\n    }\\r\\n\\r\\n    //Explicit version returning uint256 to fit with the EIP 721 specification\\r\\n    function ownerOf(uint256 tokenID) view external returns (address) {\\r\\n        return _ownerOf16[uint16(tokenID)];\\r\\n    }\\r\\n    \\r\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool supported) {\\r\\n        supported = interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f; // || interfaceId == 0x780e9d63;\\r\\n    }\\r\\n    \\r\\n    function approve(address spender, uint256 tokenID) external {\\r\\n        uint16 _tokenID = uint16(tokenID);\\r\\n        address owner_ = _ownerOf16[_tokenID];\\r\\n        require(msg.sender == owner_ || isApprovedForAll[owner_][msg.sender], \\\"ERC721: Not approved\\\");\\r\\n        \\r\\n        getApproved[_tokenID] = spender;\\r\\n        emit Approval(owner_, spender, tokenID); \\r\\n    }\\r\\n    \\r\\n    function setApprovalForAll(address operator, bool approved) external {\\r\\n        isApprovedForAll[msg.sender][operator] = approved;\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    //called by the user who owns it\\r\\n    function transfer_16(address to, uint16 tokenID) external {\\r\\n        require(msg.sender == _ownerOf16[tokenID], \\\"ERC721: Not owner\\\");\\r\\n        _transfer(msg.sender, to, tokenID);\\r\\n    }\\r\\n\\r\\n    //called by the user who owns it\\r\\n    function transfer(address to, uint256 tokenID) external {\\r\\n        uint16 _tokenID = uint16(tokenID);\\r\\n        require(msg.sender == _ownerOf16[_tokenID], \\\"ERC721: Not owner\\\");\\r\\n        _transfer(msg.sender, to, _tokenID);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address owner_, address to, uint256 tokenID) public {        \\r\\n        uint16 _tokenID = uint16(tokenID);\\r\\n        require(\\r\\n            msg.sender == owner_ \\r\\n            || controllers[msg.sender]\\r\\n            || msg.sender == getApproved[_tokenID]\\r\\n            || isApprovedForAll[owner_][msg.sender], \\r\\n            \\\"ERC721: Not approved\\\"\\r\\n        );\\r\\n        \\r\\n        _transfer(owner_, to, _tokenID);\\r\\n    }\\r\\n    \\r\\n    function safeTransferFrom(address, address to, uint256 tokenID) external {\\r\\n        safeTransferFrom(address(0), to, tokenID, \\\"\\\");\\r\\n    }\\r\\n    \\r\\n    function safeTransferFrom(address, address to, uint256 tokenID, bytes memory data) public {\\r\\n        transferFrom(address(0), to, tokenID); \\r\\n        \\r\\n        if (to.code.length != 0) {\\r\\n            (, bytes memory returned) = to.staticcall(abi.encodeWithSelector(0x150b7a02,\\r\\n                msg.sender, address(0), tokenID, data));\\r\\n                \\r\\n            bytes4 selector = abi.decode(returned, (bytes4));\\r\\n            \\r\\n            require(selector == 0x150b7a02, \\\"ERC721: Address cannot receive\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //metadata\\r\\n    function setMetadataHandler(address newHandlerAddress) external onlyOwner {\\r\\n        metaDataHandler = I_MetadataHandler(newHandlerAddress);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenID) external view returns (string memory) {\\r\\n        uint16 _tokenID = uint16(tokenID);\\r\\n        require(_ownerOf16[_tokenID] != address(0), \\\"ERC721: Nonexistent token\\\");\\r\\n        require(address(metaDataHandler) != address(0),\\\"ERC721: No metadata handler set\\\");\\r\\n\\r\\n        return metaDataHandler.tokenURI(tokenID); \\r\\n    }\\r\\n    \\r\\n    //internal\\r\\n    function _transfer(address from, address to, uint16 tokenID) internal {\\r\\n        require(_ownerOf16[tokenID] == from, \\\"ERC721: Not owner\\\");\\r\\n        \\r\\n        delete getApproved[tokenID];\\r\\n        \\r\\n        _ownerOf16[tokenID] = to;\\r\\n        emit Transfer(from, to, tokenID); \\r\\n\\r\\n    }\\r\\n\\r\\n    //specific tokenID allows ressurection after burning in the future if desired\\r\\n    function _mint(address to, uint16 tokenID) internal { \\r\\n        require(_ownerOf16[tokenID] == address(0), \\\"ERC721: Token already minted\\\");\\r\\n        require(_totalSupply16 < maxSupply, \\\"ERC721: Reached Max Supply\\\");    \\r\\n\\r\\n        _ownerOf16[tokenID] = to;\\r\\n        _totalMinted++;\\r\\n        _totalSupply16++;\\r\\n\\r\\n        emit Transfer(address(0), to, tokenID); \\r\\n    }\\r\\n    \\r\\n    function _burn(uint16 tokenID) internal {\\r\\n        address owner_ = _ownerOf16[tokenID];\\r\\n        \\r\\n        require(owner_ != address(0), \\\"ERC721: Nonexistent token\\\");\\r\\n        \\r\\n        _totalSupply16--;\\r\\n        \\r\\n        delete _ownerOf16[tokenID];\\r\\n                \\r\\n        emit Transfer(owner_, address(0), tokenID); \\r\\n    }\\r\\n\\r\\n    //We do not require balance for any logic contracts, so this view is only used by UI \\r\\n    function balanceOf(address owner_) public view returns (uint256) {\\r\\n        require(owner_ != address(0), \\\"ERC721: Non-existant address\\\");\\r\\n\\r\\n        uint count = 0;\\r\\n        for(uint16 i = 1; i < _totalSupply16 + 1; i++) {\\r\\n            if(owner_ == _ownerOf16[i])\\r\\n            count++;\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    //ERC-721 Enumerable\\r\\n    function tokenOfOwnerByIndex(address owner_, uint256 index) public view returns (uint256 tokenId) {\\r\\n        require(index < balanceOf(owner_), \\\"ERC721: Index greater than owner balance\\\");\\r\\n\\r\\n        uint count;\\r\\n        for(uint16 i = 1; i < _totalSupply16 + 1; i++) {\\r\\n            if(owner_== _ownerOf16[i]){\\r\\n                if(count == index)\\r\\n                    return i;\\r\\n                else\\r\\n                    count++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(false, \\\"ERC721Enumerable: owner index out of bounds\\\");\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    function tokenByIndex(uint256 _index) external view returns (uint256){\\r\\n        require(_index > 0, \\\"ERC721Enumerable: Invalid index\\\");\\r\\n        require(_index < _totalSupply16, \\\"ERC721Enumerable: Invalid index\\\");\\r\\n        return _index;\\r\\n    }\\r\\n    */\\r\\n}\"\r\n    },\r\n    \"contracts/Models/Base/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n\\r\\n//allows pausing of critical functions in the contract\\r\\ncontract Pausable is Ownable {\\r\\n\\r\\n    bool public paused = false; //start unpaused\\r\\n\\r\\n    event Paused();\\r\\n    event Unpaused();\\r\\n\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused,\\\"Contract is paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenPaused() {\\r\\n        require(paused,\\\"Contract is not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function Pause() onlyOwner whenNotPaused external {\\r\\n        paused = true;\\r\\n        emit Paused();\\r\\n    }\\r\\n\\r\\n    function Unpause() onlyOwner whenPaused external {\\r\\n        paused = false;\\r\\n        emit Unpaused();\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/Models/Base/Controllable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n//Simple way of allowing authorized controllers to perform privileged functions\\r\\ncontract Controllable is Ownable {\\r\\n\\r\\n    mapping(address => bool) controllers; //authorized addresses\\r\\n\\r\\n    modifier onlyControllers() {\\r\\n        require(controllers[msg.sender], \\\"Controllable: Authorized controllers only.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function addController(address newController) external onlyOwner {\\r\\n        controllers[newController] = true;\\r\\n    }\\r\\n\\r\\n    function addControllers(address[] calldata newControllers) external onlyOwner {\\r\\n        for (uint i=0; i < newControllers.length; i++) {\\r\\n            controllers[newControllers[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeController(address toDelete) external onlyOwner {\\r\\n        controllers[toDelete] = false; //same as del\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/Interfaces/I_MetadataHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ninterface I_MetadataHandler {\\r\\n\\r\\n    function tokenURI(uint256 tokenID) external view returns (string memory); //our implementation may even be pure\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_CHARACTERS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"_ownerOf16\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalMinted\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply16\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newControllers\",\"type\":\"address[]\"}],\"name\":\"addControllers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toDelete\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newHandlerAddress\",\"type\":\"address\"}],\"name\":\"setMetadataHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"tokenID\",\"type\":\"uint16\"}],\"name\":\"transfer_16\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenCharacter","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}