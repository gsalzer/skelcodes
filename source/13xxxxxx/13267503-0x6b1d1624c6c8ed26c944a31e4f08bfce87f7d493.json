{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.7;\r\n\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function burn(address from, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IXDaiBridge {\r\n    function relayTokens(address _receiver, uint256 _amount) external returns (bool);\r\n}\r\n\r\ncontract EthergyBridge{\r\n    \r\n    address public xdaiBridge = 0x4aa42145Aa6Ebf72e164C9bBC74fbD3788045016;\r\n    address public dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    address public dao;\r\n    \r\n    event DAIBridge(address target, uint amount);\r\n    event DAIBridge1(uint amount);\r\n    \r\n    constructor(address _dao) public\r\n    {\r\n        dao = _dao;\r\n    }\r\n\r\n\r\n    function bridge() external {\r\n        uint256 balance = IERC20(dai).balanceOf(address(this));\r\n        require(balance > 0, \"No sufficent DAI on the smart contract\");\r\n        IERC20(dai).approve(xdaiBridge, balance);\r\n        IXDaiBridge(xdaiBridge).relayTokens(dao, balance);\r\n        \r\n        emit DAIBridge(dao, balance);\r\n    }\r\n    \r\n    \r\n    function bridge1() external {\r\n        uint256 balance = IERC20(dai).balanceOf(address(this));\r\n        require(balance > 0, \"No sufficent DAI on the smart contract\");\r\n        \r\n        emit DAIBridge(dao, balance);\r\n    }\r\n    \r\n\r\n    function bridge2() external {\r\n        uint256 balance = IERC20(dai).balanceOf(address(this));\r\n        require(balance > 0, \"No sufficent DAI on the smart contract\");\r\n        IERC20(dai).approve(xdaiBridge, balance);\r\n        \r\n        emit DAIBridge(dao, balance);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DAIBridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DAIBridge1\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xdaiBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EthergyBridge","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c146c87c8e66719fa1e151d5a7d6df9f0d3ad156","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3c15cfdc7908b56345068842d6e3e3dd51f345e2e1b51aa5ed858288f3b1e6ee"}]}