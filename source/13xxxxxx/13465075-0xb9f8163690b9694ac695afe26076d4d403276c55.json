{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/QuiltGenerator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\n/// @title: Quilt generator library\\n/// @author: Quilt stitcher\\n/*\\n++++++ -  - - - - - - - - - - - - - - +++ - - - - - - - - - - - - - - - - ++++++\\n.                                                                              .\\n.                                 quilts.art                                   .\\n.                             We like the Quilts!                              .\\n.                                                                              .\\n++++++ -  - - - - - - - - - - - - - - +++ - - - - - - - - - - - - - - - - ++++++\\n.                                                                              .\\n.                                                                              .\\n.           =##%%%%+    +%%%%%%+    +%%%%%%+    +%%%%%%+    +%%%%##=           .\\n.          :%%%%%%%%%%%+%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*%%%%%%%%%%%%:          .\\n.        :#%%%%%%%%%%%+-%%%%%%%%%%%%%%+-%%%%%%%%%%%%%%+-%%%%%%%%%%%%%#.        .\\n.     -%%%%%%%%%%%%%%=--%%%%%%%%%%%%%=--%%%%%%%%%%%%%=--%%%%%%%%%%%%%+#%%-     .\\n.     %%%%%%%%%%%%%#=---%%%%%%%%%%%#=---%%%%%%%%%%%#=---%%%%%%%%%%%#=-%%%%     .\\n.     %%%%%%%%%%%%#-----%%%%%%%%%%#-----%%%%%%%%%%#-----%%%%%%%%%%#---%%%%     .\\n.     *%%%%%%%%%%*------%%%%%%%%%*------%%%%%%%%%*------%%%%%%%%%*----#%%*     .\\n.       %%%%%%%%*-------%%%%%%%%*-------%%%%%%%%*-------%%%%%%%%*-------       .\\n.       %%%%%%%+--------%%%%%%%+--------%%%%%%%+--------%%%%%%%+--------       .\\n.     *%%%%%%%+---------%%%%%%+---------%%%%%%+---------%%%%%%+-------*%%*     .\\n.     %%%%%%%=----------%%%%%=----------%%%%%=----------%%%%%=--------%%%%     .\\n.     %%%%%#=-----------%%%#=-----------%%%#=-----------%%%#=---------%%%%     .\\n.     %%%%#-------------%%#-------------%%#-------------%%#-----------%%%%     .\\n.     *%%*--------------%*--------------%*--------------%*------------*%%*     .\\n.       *---------------*---------------*---------------*---------------       .\\n.                                                                              .\\n.     *%%*                                                            *%%*     .\\n.     %%%%                                                            %%%%     .\\n.     %%%%                                                            %%%%     .\\n.     %%%%                                                            %%%%     .\\n.     *%%*           -+**+-                          -+**+-           *%%*     .\\n.                   *%%%%%%*                        *%%%%%%*                   .\\n.                   *%%%%%%*                        *%%%%%%*                   .\\n.     *%%*           -+**+-                          -+**+-           *%%*     .\\n.     %%%%                                                            %%%%     .\\n.     %%%%                                                            %%%%     .\\n.     -%%*                                                            *%%-     .\\n.                                                                              .\\n.           *%%%%%%+    +%%%%%%+    +%%%%%%+    +%%%%%%+    +%%%%%%*           .\\n.           =##%%%%+    +%%%%%%+    +%%%%%%+    +%%%%%%+    +%%%%##=           .\\n.                                                                              .\\n.                                                                              .\\n++++++ -  - - - - - - - - - - - - - - +++ - - - - - - - - - - - - - - - - ++++++\\n*/\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary QuiltGenerator {\\n    struct QuiltStruct {\\n        uint256[5][5] patches;\\n        uint256 quiltX;\\n        uint256 quiltY;\\n        uint256 quiltW;\\n        uint256 quiltH;\\n        uint256 xOff;\\n        uint256 yOff;\\n        uint256 maxX;\\n        uint256 maxY;\\n        uint256 patchXCount;\\n        uint256 patchYCount;\\n        uint256 roundness;\\n        uint256 themeIndex;\\n        uint256 backgroundIndex;\\n        uint256 backgroundThemeIndex;\\n        uint256 calmnessFactor;\\n        bool includesSpecialPatch;\\n        bool hovers;\\n        bool animatedBg;\\n    }\\n\\n    struct RandValues {\\n        uint256 x;\\n        uint256 y;\\n        uint256 roundness;\\n        uint256 theme;\\n        uint256 bg;\\n        uint256 cf;\\n        uint256 spX;\\n        uint256 spY;\\n    }\\n\\n    function getQuiltForSeed(string memory seed)\\n        external\\n        pure\\n        returns (QuiltStruct memory, string memory)\\n    {\\n        QuiltStruct memory quilt;\\n        RandValues memory rand;\\n\\n        // Determine how big the quilt is\\n        rand.x = random(seed, \\\"X\\\") % 100;\\n        rand.y = random(seed, \\\"Y\\\") % 100;\\n\\n        if (rand.x < 1) {\\n            quilt.patchXCount = 1;\\n        } else if (rand.x < 10) {\\n            quilt.patchXCount = 2;\\n        } else if (rand.x < 60) {\\n            quilt.patchXCount = 3;\\n        } else if (rand.x < 90) {\\n            quilt.patchXCount = 4;\\n        } else {\\n            quilt.patchXCount = 5;\\n        }\\n\\n        if (quilt.patchXCount == 1) {\\n            quilt.patchYCount = 1;\\n        } else if (rand.y < 10) {\\n            quilt.patchYCount = 2;\\n        } else if (rand.y < 60) {\\n            quilt.patchYCount = 3;\\n        } else if (rand.y < 90) {\\n            quilt.patchYCount = 4;\\n        } else {\\n            quilt.patchYCount = 5;\\n        }\\n\\n        if (quilt.patchXCount == 2 && quilt.patchYCount == 5) {\\n            quilt.patchXCount = 3;\\n        }\\n        if (quilt.patchYCount == 2 && quilt.patchXCount == 5) {\\n            quilt.patchYCount = 3;\\n        }\\n\\n        // Patch selection\\n        quilt.includesSpecialPatch = random(seed, \\\"ISP\\\") % 4000 > 3996;\\n        rand.spX = random(seed, \\\"SPX\\\") % quilt.patchXCount;\\n        rand.spY = random(seed, \\\"SPY\\\") % quilt.patchYCount;\\n        for (uint256 col = 0; col < quilt.patchXCount; col++) {\\n            for (uint256 row = 0; row < quilt.patchYCount; row++) {\\n                quilt.patches[col][row] =\\n                    random(seed, string(abi.encodePacked(\\\"P\\\", col, row))) %\\n                    15;\\n\\n                if (quilt.includesSpecialPatch) {\\n                    quilt.patches[rand.spX][rand.spY] = 15;\\n                }\\n            }\\n        }\\n\\n        // Coordinates and dimensions for the quilts\\n        quilt.maxX = 64 * quilt.patchXCount + (quilt.patchXCount - 1) * 4;\\n        quilt.maxY = 64 * quilt.patchYCount + (quilt.patchYCount - 1) * 4;\\n        quilt.xOff = (500 - quilt.maxX) / 2;\\n        quilt.yOff = (500 - quilt.maxY) / 2;\\n        quilt.quiltW = quilt.maxX + 32;\\n        quilt.quiltH = quilt.maxY + 32;\\n        quilt.quiltX = quilt.xOff + 0 - 16;\\n        quilt.quiltY = quilt.yOff + 0 - 16;\\n\\n        // Patch roundness\\n        rand.roundness = random(seed, \\\"R\\\") % 100;\\n        if (rand.roundness < 70) {\\n            quilt.roundness = 8;\\n        } else if (rand.roundness < 90) {\\n            quilt.roundness = 16;\\n        } else {\\n            quilt.roundness = 0;\\n        }\\n\\n        // Color theme\\n        rand.theme = random(seed, \\\"T\\\") % 1000;\\n        if (rand.theme < 115) {\\n            quilt.themeIndex = 0;\\n        } else if (rand.theme < 230) {\\n            quilt.themeIndex = 1;\\n        } else if (rand.theme < 345) {\\n            quilt.themeIndex = 2;\\n        } else if (rand.theme < 460) {\\n            quilt.themeIndex = 3;\\n        } else if (rand.theme < 575) {\\n            quilt.themeIndex = 4;\\n        } else if (rand.theme < 690) {\\n            quilt.themeIndex = 5;\\n        } else if (rand.theme < 805) {\\n            quilt.themeIndex = 6;\\n        } else if (rand.theme < 930) {\\n            quilt.themeIndex = 7;\\n        } else if (rand.theme < 990) {\\n            quilt.themeIndex = 8;\\n        } else {\\n            quilt.themeIndex = 9;\\n        }\\n\\n        quilt.backgroundThemeIndex = random(seed, \\\"SBGT\\\") % 100 > 33\\n            ? random(seed, \\\"SBGT\\\") % 10\\n            : quilt.themeIndex;\\n\\n        // Background variant\\n        rand.bg = random(seed, \\\"BG\\\") % 100;\\n        if (rand.bg < 70) {\\n            quilt.backgroundIndex = 0;\\n        } else if (rand.bg < 80) {\\n            quilt.backgroundIndex = 1;\\n        } else if (rand.bg < 90) {\\n            quilt.backgroundIndex = 2;\\n        } else {\\n            quilt.backgroundIndex = 3;\\n        }\\n\\n        // How calm or wavey a quilt is\\n        rand.cf = random(seed, \\\"CF\\\") % 100;\\n        if (rand.cf < 50) {\\n            quilt.calmnessFactor = 1;\\n        } else if (rand.cf < 70) {\\n            quilt.calmnessFactor = 2;\\n        } else if (rand.cf < 95) {\\n            quilt.calmnessFactor = 3;\\n        } else {\\n            quilt.calmnessFactor = 4;\\n        }\\n\\n        // Animations\\n        quilt.hovers = random(seed, \\\"H\\\") % 100 > 90;\\n        quilt.animatedBg = random(seed, \\\"ABG\\\") % 100 > 70;\\n\\n        string[4][10] memory colors = [\\n            [\\\"#5c457b\\\", \\\"#ff8fa4\\\", \\\"#f9bdbd\\\", \\\"#fbced6\\\"],\\n            [\\\"#006d77\\\", \\\"#ffafcc\\\", \\\"#ffe5ef\\\", \\\"#bde0fe\\\"],\\n            [\\\"#3d405b\\\", \\\"#f2cc8f\\\", \\\"#e07a5f\\\", \\\"#f4f1de\\\"],\\n            [\\\"#333d29\\\", \\\"#656d4a\\\", \\\"#dda15e\\\", \\\"#c2c5aa\\\"],\\n            [\\\"#6d2e46\\\", \\\"#d5b9b2\\\", \\\"#a26769\\\", \\\"#ece2d0\\\"],\\n            [\\\"#006d77\\\", \\\"#83c5be\\\", \\\"#ffddd2\\\", \\\"#edf6f9\\\"],\\n            [\\\"#351f39\\\", \\\"#726a95\\\", \\\"#719fb0\\\", \\\"#a0c1b8\\\"],\\n            [\\\"#472e2a\\\", \\\"#e78a46\\\", \\\"#fac459\\\", \\\"#fde3ae\\\"],\\n            [\\\"#0d1b2a\\\", \\\"#2f4865\\\", \\\"#7b88a7\\\", \\\"#b4c0d0\\\"],\\n            [\\\"#222222\\\", \\\"#eeeeee\\\", \\\"#bbbbbb\\\", \\\"#eeeeee\\\"]\\n        ];\\n\\n        string[16] memory patches = [\\n            '<path fill=\\\"url(#c3)\\\" d=\\\"M0 0h64v64H0z\\\"/><path fill=\\\"url(#c1)\\\" d=\\\"M0 0h64v32H0z\\\"/><path fill=\\\"url(#c2)\\\" d=\\\"M0 32 16 0v32H0Zm16 0L32 0v32H16Zm16 0L48 0v32H32Zm16 0L64 0v32H48Z\\\"/><circle cx=\\\"16\\\" cy=\\\"48\\\" r=\\\"4\\\" fill=\\\"url(#c1)\\\"/><circle cx=\\\"48\\\" cy=\\\"48\\\" r=\\\"4\\\" fill=\\\"url(#c1)\\\"/>',\\n            '<path fill=\\\"url(#c2)\\\" d=\\\"M0 0h64v64H0z\\\"/><path fill=\\\"url(#c1)\\\" d=\\\"M32 0h32v64H32z\\\"/><path fill=\\\"url(#c3)\\\" d=\\\"M0 64 64 0v64H0Z\\\"/><circle cx=\\\"46\\\" cy=\\\"46\\\" r=\\\"10\\\" fill=\\\"url(#c2)\\\"/>',\\n            '<path fill=\\\"url(#c2)\\\" d=\\\"M0 0h64v64H0z\\\"/><path fill=\\\"url(#c1)\\\" d=\\\"m52 16 8-16h16l-8 16v16l8 16v16H60V48l-8-16V16Zm-64 0 8-16h16L4 16v16l8 16v16H-4V48l-8-16V16Z\\\"/><path fill=\\\"url(#c3)\\\" d=\\\"m4 16 8-16h16l-8 16v16l8 16v16H12V48L4 32V16Zm32 0 8-16h16l-8 16v16l8 16v16H44V48l-8-16V16Z\\\"/>',\\n            '<path fill=\\\"url(#c1)\\\" d=\\\"M0 0h64v64H0z\\\"/><path fill=\\\"url(#c3)\\\" d=\\\"M0 60h64v8H0zm0-16h64v8H0zm0-16h64v8H0zm0-16h64v8H0zM0-4h64v8H0z\\\"/>',\\n            '<path fill=\\\"url(#c1)\\\" d=\\\"M0 0h64v64H0z\\\"/><path fill=\\\"url(#c3)\\\" d=\\\"M16 0H8L0 8v8L16 0Zm16 0h-8L0 24v8L32 0Zm16 0h-8L0 40v8L48 0Zm16 0h-8L0 56v8L64 0Zm0 16V8L8 64h8l48-48Zm0 16v-8L24 64h8l32-32Zm0 16v-8L40 64h8l16-16Zm0 16v-8l-8 8h8Z\\\"/>',\\n            '<path fill=\\\"url(#c3)\\\" d=\\\"M0 0h64v64H0z\\\"/><path fill=\\\"url(#c1)\\\" d=\\\"M0 64 32 0v64H0Zm32 0L64 0v64H32Z\\\"/>',\\n            '<path fill=\\\"url(#c1)\\\" d=\\\"M0 0h64v64H0z\\\"/><path fill=\\\"url(#c3)\\\" d=\\\"M0 64 64 0v64H0Z\\\"/>',\\n            '<path fill=\\\"url(#c3)\\\" d=\\\"M0 0h64v64H0z\\\"/><path fill=\\\"url(#c1)\\\" d=\\\"M0 16V0h64L48 16V0L32 16V0L16 16V0L0 16Z\\\"/><path fill=\\\"url(#c2)\\\" d=\\\"M0 48V32h64L48 48V32L32 48V32L16 48V32L0 48Z\\\"/>',\\n            '<path fill=\\\"url(#c3)\\\" d=\\\"M0 0h64v64H0z\\\"/><path fill=\\\"url(#c1)\\\" d=\\\"M0 0h48v48H0z\\\"/><path fill=\\\"url(#c2)\\\" d=\\\"M0 48 48 0v48H0Z\\\"/><circle cx=\\\"23\\\" cy=\\\"25\\\" r=\\\"8\\\" fill=\\\"url(#c3)\\\"/>',\\n            '<path fill=\\\"url(#c3)\\\" d=\\\"M0 0h64v64H0z\\\"/><path fill=\\\"url(#c1)\\\" d=\\\"M0 0h32v32H0zm32 32h32v32H32z\\\"/>',\\n            '<path fill=\\\"url(#c1)\\\" d=\\\"M0 0h64v64H0z\\\"/><path fill=\\\"url(#c3)\\\" d=\\\"M16 0 0 16v16l16-16 16 16 16-16 16 16V16L48 0 32 16 16 0Zm0 32L0 48v16l16-16 16 16 16-16 16 16V48L48 32 32 48 16 32Z\\\"/>',\\n            '<path fill=\\\"url(#c3)\\\" d=\\\"M0 0h64v64H0z\\\"/><path fill=\\\"url(#c1)\\\" d=\\\"M8 8h40v8H8z\\\"/><path fill=\\\"url(#c2)\\\" d=\\\"M24 32h8v8h-8zm8-8h8v8h-8z\\\"/><path fill=\\\"url(#c1)\\\" d=\\\"M24 24h8v8h-8zm8 8h8v8h-8zM16 48h40v8H16z\\\"/><path fill=\\\"url(#c2)\\\" d=\\\"M8 16h8v40H8zm40-8h8v40h-8z\\\"/>',\\n            '<path fill=\\\"url(#c3)\\\" d=\\\"M0 0h64v64H0z\\\"/><path fill=\\\"url(#c1)\\\" d=\\\"m24 4 8 8-8 8V4Zm0 40 8 8-8 8V44Zm-4-20-8 8-8-8h16Zm40 0-8 8-8-8h16ZM40 4l-8 8 8 8V4Zm0 40-8 8 8 8V44Zm-20-4-8-8-8 8h16Zm40 0-8-8-8 8h16Z\\\"/><path fill=\\\"url(#c2)\\\" d=\\\"M24 24h16v16H24z\\\"/>',\\n            '<path fill=\\\"url(#c1)\\\" d=\\\"M0 0h64v64H0z\\\"/><path fill=\\\"url(#c2)\\\" d=\\\"m32 0 16 16-16 16V0Zm0 64L16 48l16-16v32ZM48 0l16 16-16 16V0ZM16 64 .0000014 48 16 32v32Z\\\"/><path fill=\\\"url(#c3)\\\" d=\\\"M0 16 16 2e-7 32 16H0Zm64 32L48 64 32 48h32ZM32 32 16 16 0 32h32Zm0 0 16 16 16-16H32Z\\\"/>',\\n            '<path fill=\\\"url(#c2)\\\" d=\\\"M0 0h64v64H0z\\\"/><path fill=\\\"url(#c3)\\\" d=\\\"M0 0h64v64H0z\\\"/><path fill=\\\"url(#c2)\\\" d=\\\"M32 32-.0000014.0000019 32 5e-7V32Zm0 0 32 32H32V32Z\\\"/><path fill=\\\"url(#c1)\\\" d=\\\"M32 32-.00000381 64l.0000028-32H32Zm0 0L64 0v32H32Z\\\"/>',\\n            '<rect width=\\\"64\\\" height=\\\"64\\\" fill=\\\"url(#c2)\\\"/><path fill=\\\"url(#c1)\\\" d=\\\"M9 50v14h46V50h-2v-6h-2v-6h-2v-4h-2v-2h-4v2h-2v4H23v-4h-2v-2h-4v2h-2v4h-2v6h-2v6H9Z\\\"/><path fill=\\\"url(#c3)\\\" d=\\\"M11 50v14h42V50h-2v-6h-2v-6h-2v-4h-4v4h-2v2H23v-2h-2v-4h-4v4h-2v6h-2v6h-2Z\\\"/><path fill=\\\"url(#c2)\\\" d=\\\"M23 44v-4h4v4h-4Zm6 0v-4h6v4h-6Zm8 0v-4h4v4h-4ZM13 54h-2v8h2v-8Zm38 8v-8h2v8h-2Z\\\"/><path fill=\\\"url(#c1)\\\" d=\\\"M15 48v-2h2v2h2v2h-2v2h-2v-2h2v-2h-2Zm6 2v-4h4v4h-4Zm8 2v-2h2v-2h2v2h2v2h-6Zm10-2v-4h4v4h-4Zm8-4h2v2h-2v2h2v2h-2v-2h-2v-2h2v-2Z\\\"/>'\\n        ];\\n\\n        string[4] memory backgrounds = [\\n            string(\\n                abi.encodePacked(\\n                    '<pattern id=\\\"bp\\\" width=\\\"64\\\" height=\\\"64\\\" patternUnits=\\\"userSpaceOnUse\\\"><circle cx=\\\"32\\\" cy=\\\"32\\\" r=\\\"8\\\" fill=\\\"transparent\\\" stroke=\\\"url(#c1)\\\" stroke-width=\\\"1\\\" opacity=\\\".6\\\"/></pattern><filter id=\\\"bf\\\"><feTurbulence type=\\\"fractalNoise\\\" baseFrequency=\\\"0.2\\\" numOctaves=\\\"1\\\" seed=\\\"',\\n                    seed,\\n                    '\\\"/><feDisplacementMap in=\\\"SourceGraphic\\\" xChannelSelector=\\\"B\\\" scale=\\\"200\\\"/></filter><g filter=\\\"url(#bf)\\\"><rect x=\\\"-50%\\\" y=\\\"-50%\\\" width=\\\"200%\\\" height=\\\"200%\\\" fill=\\\"url(#bp)\\\">',\\n                    quilt.animatedBg\\n                        ? '<animateTransform attributeName=\\\"transform\\\" type=\\\"translate\\\" dur=\\\"4s\\\" values=\\\"0,0; 0,64;\\\"  repeatCount=\\\"indefinite\\\"/>'\\n                        : \\\"\\\",\\n                    \\\"</rect></g>\\\"\\n                )\\n            ),\\n            string(\\n                abi.encodePacked(\\n                    '<pattern id=\\\"bp\\\" width=\\\"128\\\" height=\\\"128\\\" patternUnits=\\\"userSpaceOnUse\\\"><path d=\\\"m64 16 32 32H64V16ZM128 16l32 32h-32V16ZM0 16l32 32H0V16ZM128 76l-32 32h32V76ZM64 76l-32 32h32V76Z\\\" fill=\\\"url(#c2)\\\"/></pattern><filter id=\\\"bf\\\"><feTurbulence type=\\\"fractalNoise\\\" baseFrequency=\\\"0.002\\\" numOctaves=\\\"1\\\" seed=\\\"',\\n                    seed,\\n                    '\\\"/><feDisplacementMap in=\\\"SourceGraphic\\\" scale=\\\"100\\\"/></filter><g filter=\\\"url(#bf)\\\"><rect x=\\\"-50%\\\" y=\\\"-50%\\\" width=\\\"200%\\\" height=\\\"200%\\\" fill=\\\"url(#bp)\\\" opacity=\\\".2\\\">',\\n                    quilt.animatedBg\\n                        ? '<animateTransform attributeName=\\\"transform\\\" type=\\\"translate\\\" dur=\\\"4s\\\" values=\\\"0,0; 0,128;\\\" repeatCount=\\\"indefinite\\\"/>'\\n                        : \\\"\\\",\\n                    \\\"</rect></g>\\\"\\n                )\\n            ),\\n            string(\\n                abi.encodePacked(\\n                    '<pattern id=\\\"bp\\\" width=\\\"64\\\" height=\\\"64\\\" patternUnits=\\\"userSpaceOnUse\\\"><path d=\\\"M32 0L0 32V64L32 32L64 64V32L32 0Z\\\" fill=\\\"url(#c1)\\\" opacity=\\\".1\\\"/></pattern><filter id=\\\"bf\\\"><feTurbulence type=\\\"fractalNoise\\\" baseFrequency=\\\"0.004\\\" numOctaves=\\\"1\\\" seed=\\\"',\\n                    seed,\\n                    '\\\"/><feDisplacementMap in=\\\"SourceGraphic\\\" scale=\\\"200\\\"/></filter><g filter=\\\"url(#bf)\\\"><rect x=\\\"-50%\\\" y=\\\"-50%\\\" width=\\\"200%\\\" height=\\\"200%\\\" fill=\\\"url(#bp)\\\">',\\n                    quilt.animatedBg\\n                        ? '<animateTransform attributeName=\\\"transform\\\" type=\\\"translate\\\" dur=\\\"4s\\\" values=\\\"0,0; -128,0;\\\" repeatCount=\\\"indefinite\\\"/>'\\n                        : \\\"\\\",\\n                    \\\"</rect></g>\\\"\\n                )\\n            ),\\n            string(\\n                abi.encodePacked(\\n                    '<pattern id=\\\"bp\\\" width=\\\"80\\\" height=\\\"40\\\" patternUnits=\\\"userSpaceOnUse\\\"><path d=\\\"M0 20a20 20 0 1 1 0 1M40 0a20 20 0 1 0 40 0m0 40a20 20 0 1 0 -40 0\\\" fill=\\\"url(#c2)\\\" opacity=\\\".2\\\"/></pattern><filter id=\\\"bf\\\"><feTurbulence type=\\\"fractalNoise\\\" baseFrequency=\\\"0.02\\\" numOctaves=\\\"1\\\" seed=\\\"',\\n                    seed,\\n                    '\\\"/><feDisplacementMap in=\\\"SourceGraphic\\\" scale=\\\"200\\\"/></filter><g filter=\\\"url(#bf)\\\"><rect x=\\\"-50%\\\" y=\\\"-50%\\\" width=\\\"200%\\\" height=\\\"200%\\\" fill=\\\"url(#bp)\\\">',\\n                    quilt.animatedBg\\n                        ? '<animateTransform attributeName=\\\"transform\\\" type=\\\"translate\\\" dur=\\\"4s\\\" values=\\\"0,0; 0,-80;\\\" repeatCount=\\\"indefinite\\\"/>'\\n                        : \\\"\\\",\\n                    \\\"</rect></g>\\\"\\n                )\\n            )\\n        ];\\n\\n        // Build the SVG from various parts\\n        string[7] memory svgParts;\\n\\n        for (uint256 col = 0; col < quilt.patchXCount; col++) {\\n            for (uint256 row = 0; row < quilt.patchYCount; row++) {\\n                uint256 x = quilt.xOff + 68 * col;\\n                uint256 y = quilt.yOff + 68 * row;\\n                uint256 patchPartIndex = quilt.patches[col][row];\\n\\n                // Patch masks\\n                svgParts[0] = string(\\n                    abi.encodePacked(\\n                        svgParts[0],\\n                        '<mask id=\\\"s',\\n                        Strings.toString(col + 1),\\n                        Strings.toString(row + 1),\\n                        '\\\"><rect rx=\\\"',\\n                        Strings.toString(quilt.roundness),\\n                        '\\\" x=\\\"',\\n                        Strings.toString(x),\\n                        '\\\" y=\\\"',\\n                        Strings.toString(y),\\n                        '\\\" width=\\\"64\\\" height=\\\"64\\\" fill=\\\"white\\\"/></mask>'\\n                    )\\n                );\\n\\n                // Patches\\n                svgParts[5] = string(\\n                    abi.encodePacked(\\n                        svgParts[5],\\n                        '<g mask=\\\"url(#s',\\n                        Strings.toString(col + 1),\\n                        Strings.toString(row + 1),\\n                        ')\\\"><g transform=\\\"translate(',\\n                        Strings.toString(x),\\n                        \\\" \\\",\\n                        Strings.toString(y),\\n                        ')\\\">',\\n                        patches[patchPartIndex],\\n                        \\\"</g></g>\\\"\\n                    )\\n                );\\n\\n                // Patch stitches\\n                svgParts[6] = string(\\n                    abi.encodePacked(\\n                        svgParts[6],\\n                        '<rect rx=\\\"',\\n                        Strings.toString(quilt.roundness),\\n                        '\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke=\\\"url(#c1)\\\" stroke-dasharray=\\\"4 4\\\" x=\\\"',\\n                        Strings.toString(x),\\n                        '\\\" y=\\\"',\\n                        Strings.toString(y),\\n                        '\\\" width=\\\"64\\\" height=\\\"64\\\" fill=\\\"transparent\\\"/>'\\n                    )\\n                );\\n            }\\n        }\\n\\n        // Color theme\\n        svgParts[1] = string(\\n            abi.encodePacked(\\n                '<linearGradient id=\\\"c1\\\"><stop stop-color=\\\"',\\n                colors[quilt.themeIndex][0],\\n                '\\\"/></linearGradient><linearGradient id=\\\"c2\\\"><stop stop-color=\\\"',\\n                colors[quilt.themeIndex][1],\\n                '\\\"/></linearGradient><linearGradient id=\\\"c3\\\"><stop stop-color=\\\"',\\n                colors[quilt.themeIndex][2],\\n                '\\\"/></linearGradient><linearGradient id=\\\"c4\\\"><stop stop-color=\\\"',\\n                colors[quilt.backgroundThemeIndex][3],\\n                '\\\"/></linearGradient>'\\n            )\\n        );\\n\\n        // Image background\\n        svgParts[2] = backgrounds[quilt.backgroundIndex];\\n\\n        // Quilt shadow\\n        svgParts[3] = string(\\n            abi.encodePacked(\\n                '<rect transform=\\\"translate(',\\n                Strings.toString(quilt.quiltX + 8),\\n                \\\" \\\",\\n                Strings.toString(quilt.quiltY + 8),\\n                ')\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"',\\n                Strings.toString(quilt.quiltW),\\n                '\\\" height=\\\"',\\n                Strings.toString(quilt.quiltH),\\n                '\\\" rx=\\\"',\\n                Strings.toString(\\n                    quilt.roundness == 0 ? 0 : quilt.roundness + 8\\n                ),\\n                '\\\" fill=\\\"url(#c1)\\\"/>'\\n            )\\n        );\\n\\n        // Quilt background\\n        svgParts[4] = string(\\n            abi.encodePacked(\\n                '<rect x=\\\"',\\n                Strings.toString(quilt.quiltX),\\n                '\\\" y=\\\"',\\n                Strings.toString(quilt.quiltY),\\n                '\\\" width=\\\"',\\n                Strings.toString(quilt.quiltW),\\n                '\\\" height=\\\"',\\n                Strings.toString(quilt.quiltH),\\n                '\\\" rx=\\\"',\\n                Strings.toString(\\n                    quilt.roundness == 0 ? 0 : quilt.roundness + 8\\n                ),\\n                '\\\" fill=\\\"url(#c2)\\\" stroke=\\\"url(#c1)\\\" stroke-width=\\\"2\\\"/>'\\n            )\\n        );\\n\\n        string memory svg = string(\\n            abi.encodePacked(\\n                '<svg width=\\\"500\\\" height=\\\"500\\\" viewBox=\\\"0 0 500 500\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><defs>',\\n                svgParts[0], // Patch masks\\n                svgParts[1], // Color theme\\n                '</defs><rect width=\\\"500\\\" height=\\\"500\\\" fill=\\\"url(#c4)\\\"/>',\\n                svgParts[2], // Image background\\n                '<filter id=\\\"f\\\" x=\\\"-50%\\\" y=\\\"-50%\\\" width=\\\"200%\\\" height=\\\"200%\\\"><feTurbulence baseFrequency=\\\"',\\n                quilt.calmnessFactor * 3 >= 10 ? \\\"0.0\\\" : \\\"0.00\\\",\\n                Strings.toString(quilt.calmnessFactor * 3),\\n                '\\\" seed=\\\"',\\n                seed,\\n                '\\\"/><feDisplacementMap in=\\\"SourceGraphic\\\" scale=\\\"10\\\"/></filter><g><g filter=\\\"url(#f)\\\">',\\n                svgParts[3] // Quilt shadow\\n            )\\n        );\\n\\n        svg = string(\\n            abi.encodePacked(\\n                svg,\\n                quilt.hovers\\n                    ? '<animateTransform attributeName=\\\"transform\\\" type=\\\"scale\\\" additive=\\\"sum\\\" dur=\\\"4s\\\" values=\\\"1 1; 1.005 1.02; 1 1;\\\" calcMode=\\\"spline\\\" keySplines=\\\"0.45, 0, 0.55, 1; 0.45, 0, 0.55, 1;\\\" repeatCount=\\\"indefinite\\\"/>'\\n                    : \\\"\\\",\\n                '</g><g filter=\\\"url(#f)\\\">',\\n                svgParts[4], // Quilt background\\n                svgParts[5], // Patches\\n                svgParts[6], // Patch stitches\\n                quilt.hovers\\n                    ? '<animateTransform attributeName=\\\"transform\\\" type=\\\"translate\\\" dur=\\\"4s\\\" values=\\\"0,0; -4,-16; 0,0;\\\" calcMode=\\\"spline\\\" keySplines=\\\"0.45, 0, 0.55, 1; 0.45, 0, 0.55, 1;\\\" repeatCount=\\\"indefinite\\\"/>'\\n                    : \\\"\\\",\\n                \\\"</g></g></svg>\\\"\\n            )\\n        );\\n\\n        return (quilt, svg);\\n    }\\n\\n    function random(string memory seed, string memory key)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return uint256(keccak256(abi.encodePacked(key, seed)));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"seed\",\"type\":\"string\"}],\"name\":\"getQuiltForSeed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[5][5]\",\"name\":\"patches\",\"type\":\"uint256[5][5]\"},{\"internalType\":\"uint256\",\"name\":\"quiltX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quiltY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quiltW\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quiltH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xOff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yOff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"patchXCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"patchYCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"themeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"backgroundIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"backgroundThemeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calmnessFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"includesSpecialPatch\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hovers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"animatedBg\",\"type\":\"bool\"}],\"internalType\":\"struct QuiltGenerator.QuiltStruct\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"QuiltGenerator","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}