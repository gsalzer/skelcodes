{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@ribbon-finance/rvol/contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity >0.6.0 <0.8.7;\\n\\ninterface IPriceOracle {\\n    function decimals() external view returns (uint256 _decimals);\\n\\n    function latestAnswer() external view returns (uint256 price);\\n}\\n\"\r\n    },\r\n    \"@ribbon-finance/rvol/contracts/interfaces/IVolatilityOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity >0.6.0 <0.8.7;\\n\\ninterface IVolatilityOracle {\\n    function commit(address pool) external;\\n\\n    function twap(address pool) external returns (uint256 price);\\n\\n    function vol(address pool)\\n        external\\n        view\\n        returns (uint256 standardDeviation);\\n\\n    function annualizedVol(address pool)\\n        external\\n        view\\n        returns (uint256 annualStdev);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRibbon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface IStrikeSelection {\\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function delta() external view returns (uint256);\\n}\\n\\ninterface IOptionsPremiumPricer {\\n    function getPremium(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getOptionDelta(\\n        uint256 spotPrice,\\n        uint256 strikePrice,\\n        uint256 volatility,\\n        uint256 expiryTimestamp\\n    ) external view returns (uint256 delta);\\n\\n    function getUnderlyingPrice() external view returns (uint256);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function volatilityOracle() external view returns (address);\\n\\n    function pool() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/StrikeSelection.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {\\n    IPriceOracle\\n} from \\\"@ribbon-finance/rvol/contracts/interfaces/IPriceOracle.sol\\\";\\nimport {IOptionsPremiumPricer} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {\\n    IVolatilityOracle\\n} from \\\"@ribbon-finance/rvol/contracts/interfaces/IVolatilityOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract StrikeSelection is Ownable {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * Immutables\\n     */\\n    IOptionsPremiumPricer public immutable optionsPremiumPricer;\\n\\n    IVolatilityOracle public immutable volatilityOracle;\\n\\n    // delta for options strike price selection. 1 is 10000 (10**4)\\n    uint256 public delta;\\n\\n    // step in absolute terms at which we will increment\\n    // (ex: 100 * 10 ** assetOracleDecimals means we will move at increments of 100 points)\\n    uint256 public step;\\n\\n    // multiplier to shift asset prices\\n    uint256 private immutable assetOracleMultiplier;\\n\\n    // Delta are in 4 decimal places. 1 * 10**4 = 1 delta.\\n    uint256 private constant DELTA_MULTIPLIER = 10**4;\\n\\n    // ChainLink's USD Price oracles return results in 8 decimal places\\n    uint256 private constant ORACLE_PRICE_MULTIPLIER = 10**8;\\n\\n    event DeltaSet(uint256 oldDelta, uint256 newDelta, address indexed owner);\\n    event StepSet(uint256 oldStep, uint256 newStep, address indexed owner);\\n\\n    constructor(\\n        address _optionsPremiumPricer,\\n        uint256 _delta,\\n        uint256 _step\\n    ) {\\n        require(_optionsPremiumPricer != address(0), \\\"!_optionsPremiumPricer\\\");\\n        require(_delta > 0, \\\"!_delta\\\");\\n        require(_delta <= DELTA_MULTIPLIER, \\\"newDelta cannot be more than 1\\\");\\n        require(_step > 0, \\\"!_step\\\");\\n        optionsPremiumPricer = IOptionsPremiumPricer(_optionsPremiumPricer);\\n        volatilityOracle = IVolatilityOracle(\\n            IOptionsPremiumPricer(_optionsPremiumPricer).volatilityOracle()\\n        );\\n        // ex: delta = 7500 (.75)\\n        delta = _delta;\\n        uint256 _assetOracleMultiplier =\\n            10 **\\n                IPriceOracle(\\n                    IOptionsPremiumPricer(_optionsPremiumPricer).priceOracle()\\n                )\\n                    .decimals();\\n\\n        // ex: step = 1000\\n        step = _step.mul(_assetOracleMultiplier);\\n\\n        assetOracleMultiplier = _assetOracleMultiplier;\\n    }\\n\\n    /**\\n     * @notice Gets the strike price satisfying the delta value\\n     * given the expiry timestamp and whether option is call or put\\n     * @param expiryTimestamp is the unix timestamp of expiration\\n     * @param isPut is whether option is put or call\\n     * @return newStrikePrice is the strike price of the option (ex: for BTC might be 45000 * 10 ** 8)\\n     * @return newDelta is the delta of the option given its parameters\\n     */\\n\\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\\n        external\\n        view\\n        returns (uint256 newStrikePrice, uint256 newDelta)\\n    {\\n        require(\\n            expiryTimestamp > block.timestamp,\\n            \\\"Expiry must be in the future!\\\"\\n        );\\n\\n        // asset price\\n        uint256 assetPrice = optionsPremiumPricer.getUnderlyingPrice();\\n\\n        // asset's annualized volatility\\n        uint256 annualizedVol =\\n            volatilityOracle.annualizedVol(optionsPremiumPricer.pool()).mul(\\n                10**10\\n            );\\n\\n        // For each asset prices with step of 'step' (down if put, up if call)\\n        //   if asset's getOptionDelta(currStrikePrice, spotPrice, annualizedVol, t) == (isPut ? 1 - delta:delta)\\n        //   with certain margin of error\\n        //        return strike price\\n\\n        uint256 strike =\\n            isPut\\n                ? assetPrice.sub(assetPrice % step).sub(step)\\n                : assetPrice.add(step - (assetPrice % step)).add(step);\\n        uint256 targetDelta = isPut ? DELTA_MULTIPLIER.sub(delta) : delta;\\n        uint256 prevDelta = DELTA_MULTIPLIER;\\n\\n        while (true) {\\n            uint256 currDelta =\\n                optionsPremiumPricer.getOptionDelta(\\n                    assetPrice.mul(ORACLE_PRICE_MULTIPLIER).div(\\n                        assetOracleMultiplier\\n                    ),\\n                    strike,\\n                    annualizedVol,\\n                    expiryTimestamp\\n                );\\n            //  If the current delta is between the previous\\n            //  strike price delta and current strike price delta\\n            //  then we are done\\n            bool foundTargetStrikePrice =\\n                isPut\\n                    ? targetDelta >= prevDelta && targetDelta <= currDelta\\n                    : targetDelta <= prevDelta && targetDelta >= currDelta;\\n\\n            if (foundTargetStrikePrice) {\\n                uint256 finalDelta =\\n                    _getBestDelta(prevDelta, currDelta, targetDelta, isPut);\\n                uint256 finalStrike =\\n                    _getBestStrike(finalDelta, prevDelta, strike, isPut);\\n                require(\\n                    isPut\\n                        ? finalStrike <= assetPrice\\n                        : finalStrike >= assetPrice,\\n                    \\\"Invalid strike price\\\"\\n                );\\n                // make decimals consistent with oToken strike price decimals (10 ** 8)\\n                return (\\n                    finalStrike.mul(ORACLE_PRICE_MULTIPLIER).div(\\n                        assetOracleMultiplier\\n                    ),\\n                    finalDelta\\n                );\\n            }\\n\\n            strike = isPut ? strike.sub(step) : strike.add(step);\\n\\n            prevDelta = currDelta;\\n        }\\n    }\\n\\n    /**\\n     * @notice Rounds to best delta value\\n     * @param prevDelta is the delta of the previous strike price\\n     * @param currDelta is delta of the current strike price\\n     * @param targetDelta is the delta we are targeting\\n     * @param isPut is whether its a put\\n     * @return the best delta value\\n     */\\n    function _getBestDelta(\\n        uint256 prevDelta,\\n        uint256 currDelta,\\n        uint256 targetDelta,\\n        bool isPut\\n    ) private pure returns (uint256) {\\n        uint256 finalDelta;\\n\\n        // for tie breaks (ex: 0.05 <= 0.1 <= 0.15) round to higher strike price\\n        // for calls and lower strike price for puts for deltas\\n        if (isPut) {\\n            uint256 upperBoundDiff = currDelta.sub(targetDelta);\\n            uint256 lowerBoundDiff = targetDelta.sub(prevDelta);\\n            finalDelta = lowerBoundDiff <= upperBoundDiff\\n                ? prevDelta\\n                : currDelta;\\n        } else {\\n            uint256 upperBoundDiff = prevDelta.sub(targetDelta);\\n            uint256 lowerBoundDiff = targetDelta.sub(currDelta);\\n            finalDelta = lowerBoundDiff <= upperBoundDiff\\n                ? currDelta\\n                : prevDelta;\\n        }\\n\\n        return finalDelta;\\n    }\\n\\n    /**\\n     * @notice Rounds to best delta value\\n     * @param finalDelta is the best delta value we found\\n     * @param prevDelta is delta of the previous strike price\\n     * @param strike is the strike of the previous iteration\\n     * @param isPut is whether its a put\\n     * @return the best strike\\n     */\\n    function _getBestStrike(\\n        uint256 finalDelta,\\n        uint256 prevDelta,\\n        uint256 strike,\\n        bool isPut\\n    ) private view returns (uint256) {\\n        if (finalDelta != prevDelta) {\\n            return strike;\\n        }\\n        return isPut ? strike.add(step) : strike.sub(step);\\n    }\\n\\n    /**\\n     * @notice Sets new delta value\\n     * @param newDelta is the new delta value\\n     */\\n    function setDelta(uint256 newDelta) external onlyOwner {\\n        require(newDelta > 0, \\\"!newDelta\\\");\\n        require(newDelta <= DELTA_MULTIPLIER, \\\"newDelta cannot be more than 1\\\");\\n        uint256 oldDelta = delta;\\n        delta = newDelta;\\n        emit DeltaSet(oldDelta, newDelta, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Sets new step value\\n     * @param newStep is the new step value\\n     */\\n    function setStep(uint256 newStep) external onlyOwner {\\n        require(newStep > 0, \\\"!newStep\\\");\\n        uint256 oldStep = step;\\n        step = newStep.mul(assetOracleMultiplier);\\n        emit StepSet(oldStep, newStep, msg.sender);\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_optionsPremiumPricer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_delta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_step\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDelta\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"DeltaSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldStep\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStep\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"StepSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"delta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"}],\"name\":\"getStrikePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newStrikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDelta\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionsPremiumPricer\",\"outputs\":[{\"internalType\":\"contract IOptionsPremiumPricer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelta\",\"type\":\"uint256\"}],\"name\":\"setDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStep\",\"type\":\"uint256\"}],\"name\":\"setStep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"step\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volatilityOracle\",\"outputs\":[{\"internalType\":\"contract IVolatilityOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StrikeSelection","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cf38c16253912a827f38b5b2c08e6059a0194e8c00000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000064","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}