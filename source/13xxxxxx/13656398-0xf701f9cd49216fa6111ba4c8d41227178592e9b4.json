{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/dungeonsRender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\n\\n/// @title Rendering code to draw an svg of the dungeon\\n\\n/*****************************************************\\n0000000                                        0000000\\n0001100  Crypts and Caverns                    0001100\\n0001100     9000 generative on-chain dungeons  0001100\\n0003300                                        0003300\\n*****************************************************/\\n\\npragma solidity ^0.8.0;\\n\\nimport { IDungeons } from './interfaces/IDungeons.sol';\\n\\ncontract dungeonsRender {\\n\\n     struct Maps {\\n        // Data structure that stores our different maps (layout, doors, points)\\n        uint256[] layout;\\n        uint256[] doors;\\n        uint256[] points;\\n    }\\n\\n    struct RenderHelper {   // Helper variables when iterating through and drawing dungeon tiles\\n        uint256 pixel;\\n        uint256 start;\\n        uint256[] layout;\\n        string parts;\\n        uint256 counter;\\n        uint256 numRects;\\n        uint256 lastStart;\\n    }\\n\\n    struct EntityHelper {\\n        uint256 size;\\n        uint256 environment;\\n    }\\n\\n    string[24] private colors = [\\n        // Array contains sets of 4 colors:\\n        // 0 = bg, 1 = wall, 2 = door, 3 = point\\n        // To calculate, multiply environment (int 0-5) by 4 and add the above numbers.\\n        // Desert\\n        \\\"F3D899\\\",   // 0\\n        \\\"160F09\\\",   // 1\\n        \\\"FAAA00\\\",   // 2\\n        \\\"00A29D\\\",   // 3\\n        // Stone Temple\\n        \\\"967E67\\\",   // 4\\n        \\\"F3D899\\\",   // 5\\n        \\\"3C2A1A\\\",   // 6\\n        \\\"006669\\\",   // 7\\n        // Forest Ruins\\n        \\\"2F590E\\\",   // 8\\n        \\\"A98C00\\\",   // 9\\n        \\\"802F1A\\\",   // 10\\n        \\\"C55300\\\",   // 11\\n        // Mountain Deep\\n        \\\"36230F\\\",   // 12\\n        \\\"744936\\\",   // 13\\n        \\\"802F1A\\\",   // 14\\n        \\\"FFA800\\\",   // 15\\n        //Underwater Keep\\n        \\\"006669\\\",   // 16\\n        \\\"004238\\\",   // 17\\n        \\\"967E67\\\",   // 18\\n        \\\"F9B569\\\",   // 19\\n        // Ember\\\"s Glow\\n        \\\"340D07\\\",   // 20\\n        \\\"5D0503\\\",   // 21\\n        \\\"B75700\\\",   // 22\\n        \\\"FF1800\\\"    // 23\\n    ];\\n\\n    string[6] private environmentName = [\\n        // Names mapped to the above colors\\n        \\\"Desert Oasis\\\",\\n        \\\"Stone Temple\\\",\\n        \\\"Forest Ruins\\\",\\n        \\\"Mountain Deep\\\",\\n        \\\"Underwater Keep\\\",\\n        \\\"Ember's Glow\\\"\\n    ];\\n    \\n    function draw(IDungeons.Dungeon memory dungeon, uint8[] memory x, uint8[] memory y, uint8[] memory entityData) external view returns (string memory) {\\n        // Hardcoded to save memory: Width = 100\\n\\n        string memory parts;\\n\\n        // Setup SVG and draw our background\\n        // We write at 100x100 and scale it 5x to 500x500 to avoid safari small rendering\\n        parts = string(abi.encodePacked(\\n            '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 500 500\\\" shape-rendering=\\\"crispEdges\\\" transform-origin=\\\"center\\\"><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#',\\n            colors[dungeon.environment * 4],\\n            '\\\" />'));\\n\\n        // Draw the name at the top of the image\\n        parts = drawNameplate(parts, dungeon.dungeonName);\\n\\n        // Draw the dungeon layout and entities\\n        (uint256 start, uint256 pixel) = getWidth(dungeon.size);   // Calculate width of each pixel and where we should start the dungeon\\n        \\n        RenderHelper memory helper = RenderHelper(pixel, start, fromBytes(dungeon.layout), \\\"\\\", 0, 0, 0);    // Struct to save memory for render calls so we don't get 'stack too deep' in our drawChunk() function\\n\\n        parts = string(abi.encodePacked(\\n            parts, \\n            chunkDungeon(dungeon, helper),  // Break dungeon walls into chunks and render each section\\n            drawEntities(x, y, entityData, dungeon, helper),\\n            '</svg>'));\\n        \\n        return parts; \\n    }\\n\\n    function drawNameplate(string memory parts, string memory name) internal pure returns (string memory) {\\n    // Draw a nameplate w/ map title at the top of the map.\\n        // Calculate length of string\\n        uint256 nameLength = uint256(bytes(name).length);   \\n        uint256 fontSize;\\n        uint256 multiplier;\\n        if(nameLength <= 25) {\\n            fontSize = 5;\\n            multiplier = 3;\\n        } else {\\n            fontSize = 4;\\n            multiplier = 2;\\n            nameLength += 7;   // Hack because we can't use fractions for our multiplier\\n        }\\n\\n        // Draw black border behind nameplates\\n        parts = string(\\n                abi.encodePacked(\\n                    parts,\\n                    '<g transform=\\\"scale (5 5)\\\"><rect x=\\\"', // Scale nameplate by 5x (transform for 100->500)\\n                    toString((100 - ((nameLength+3)*multiplier)) / 2),    // assume letters are 3 'pixels', add 3 letters worth of spacing (1.5 per side)\\n                    '\\\" y=\\\"-1\\\" width=\\\"',\\n                    toString((nameLength+3)*multiplier),\\n                    '\\\" height=\\\"9\\\" stroke-width=\\\"0.3\\\" stroke=\\\"black\\\" fill=\\\"#FFA800\\\" />'\\n                ));\\n\\n        // Draw text on top of nameplate\\n        parts = string(\\n                    abi.encodePacked(\\n                        parts,\\n                        '<text x=\\\"50\\\" y=\\\"5.5\\\" width=\\\"',\\n                        toString(nameLength * 3),\\n                        '\\\" font-family=\\\"monospace\\\" font-size=\\\"',\\n                        toString(fontSize), \\n                        '\\\" text-anchor=\\\"middle\\\">',\\n                        name,\\n                        '</text></g>'\\n                    ));\\n        \\n        return(parts);\\n    }\\n\\n    function chunkDungeon(IDungeons.Dungeon memory dungeon, RenderHelper memory helper) internal view returns (string memory) {\\n        // Loop through and figure out how many rectangles we'll need (so we can calculate array size)\\n        \\n        for(uint256 y = 0; y < dungeon.size; y++) {\\n            \\n            helper.lastStart = helper.counter;\\n            string memory rowParts;\\n\\n            for(uint256 x = 0; x < dungeon.size; x++) {\\n                if(getBit(helper.layout, helper.counter) == 1 && helper.counter > 0 && getBit(helper.layout, helper.counter-1) == 0) {\\n                    // Last tile was a wall, current tile is floor. Need a new rect.\\n                    helper.numRects++;\\n\\n                    // Draw rect with last known X and width of currentX - lastX.\\n                    rowParts = drawTile(rowParts, helper.start + (helper.lastStart % dungeon.size)*helper.pixel, helper.start + (helper.lastStart / dungeon.size)*helper.pixel, (helper.counter - helper.lastStart)*helper.pixel, helper.pixel, colors[dungeon.environment * 4 + 1]);\\n\\n                } else if(getBit(helper.layout, helper.counter) == 0 && helper.counter > 0 && getBit(helper.layout, helper.counter-1) == 1) {\\n                    // Last tile was a floor, start tracking X so we can get a width\\n                    helper.lastStart = helper.counter;\\n                }\\n                helper.counter++;\\n            }\\n\\n            // If the last tile on a row is a wall, we need a new rect\\n            if(getBit(helper.layout, helper.counter-1) == 0) {\\n                helper.numRects++;\\n                rowParts = drawTile(rowParts, helper.start + (helper.lastStart % dungeon.size)*helper.pixel, helper.start + (helper.lastStart / dungeon.size)*helper.pixel, (helper.counter - helper.lastStart)*helper.pixel, helper.pixel, colors[dungeon.environment * 4 + 1]);\\n            }\\n            helper.parts = string(abi.encodePacked(helper.parts, rowParts));\\n            rowParts = \\\"\\\";  // Reset for the next row\\n        }\\n        return helper.parts;\\n    }\\n\\n    function drawEntities(uint8[] memory x, uint8[] memory y, uint8[] memory entityData, IDungeons.Dungeon memory dungeon, RenderHelper memory helper) internal view returns (string memory) {\\n    // Draw each entity as a pixel on the map\\n        string memory parts;\\n        for(uint256 i = 0; i < entityData.length; i++) {\\n            parts = drawTile(parts, helper.start + (x[i] % dungeon.size)*helper.pixel, helper.start + y[i]*helper.pixel, helper.pixel, helper.pixel, colors[dungeon.environment * 4 + 2 + entityData[i]]);\\n        }\\n        return parts;\\n    }\\n\\n\\n    function drawTile(string memory row, uint256 x, uint256 y, uint256 width, uint256 pixel, string memory color) internal pure returns(string memory) {\\n        row = string(\\n            abi.encodePacked(\\n                row,\\n                '<rect x=\\\"',\\n                toString(x),\\n                '\\\" y=\\\"',\\n                toString(y),\\n                '\\\" width=\\\"', \\n                toString(width),\\n                '\\\" height=\\\"',\\n                toString(pixel),\\n                '\\\" fill=\\\"#',\\n                color, \\n                '\\\" />'\\n            ));\\n        \\n        return(row);\\n\\n    }\\n\\n    function getWidth(uint256 size) internal pure returns(uint256, uint256) {\\n        uint256 pixel = 500 / (size + 3*2);   // Each 'pixel' should be equal widths and take into account dungeon size + allocate padding (3 pixels) on both sides\\n        uint256 start = (500 - pixel*size) / 2;     // Remove the width and divide by two to get the midpoint where we should start\\n        return(start, pixel);\\n    }\\n\\n    /**\\n    * @dev - Assembles a tokenURI for output. Normally we would do this in dungeons.sol but needed to save memory\\n    */\\n    function tokenURI(uint256 tokenId, IDungeons.Dungeon memory dungeon, uint256[] memory entities) public view returns(string memory) {\\n        string memory output; \\n\\n        // Generate dungeon\\n        output = this.draw(dungeon, dungeon.entities.x, dungeon.entities.y, dungeon.entities.entityType);\\n\\n        string memory size = string(abi.encodePacked(toString(dungeon.size), 'x', toString(dungeon.size)));\\n\\n        // Base64 Encode svg and output\\n        string memory json = Base64.encode(bytes(string(\\n            abi.encodePacked('{\\\"name\\\": \\\"Crypts and Caverns #', toString(tokenId),\\n             '\\\", \\\"description\\\": \\\"Crypts and Caverns is an onchain map generator that produces an infinite set of dungeons. Enemies, treasure, etc intentionally omitted for others to interpret. Feel free to use Crypts and Caverns in any way you want.\\\", \\\"attributes\\\": [ {\\\"trait_type\\\": \\\"name\\\", \\\"value\\\": \\\"',\\n             dungeon.dungeonName, \\n             '\\\"}, {\\\"trait_type\\\": \\\"size\\\", \\\"value\\\": \\\"',\\n             size, \\n             '\\\"}, {\\\"trait_type\\\": \\\"environment\\\", \\\"value\\\": \\\"',\\n             environmentName[dungeon.environment],\\n             '\\\"}, {\\\"trait_type\\\": \\\"doors\\\", \\\"value\\\": \\\"',\\n             toString(entities[1]),\\n             '\\\"}, {\\\"trait_type\\\": \\\"points of interest\\\", \\\"value\\\": \\\"',\\n             toString(entities[0]), \\n             '\\\"}, {\\\"trait_type\\\": \\\"affinity\\\", \\\"value\\\": \\\"',\\n             dungeon.affinity,\\n             '\\\"}, {\\\"trait_type\\\": \\\"legendary\\\", \\\"value\\\": \\\"',\\n             dungeon.legendary == 1 ? 'Yes' : 'No',\\n             '\\\"}, {\\\"trait_type\\\": \\\"structure\\\", \\\"value\\\": \\\"',\\n             dungeon.structure == 0 ? 'Crypt' : 'Cavern',\\n             '\\\"}],\\\"image\\\": \\\"data:image/svg+xml;base64,',\\n              Base64.encode(bytes(output)),\\n             '\\\"}'))));\\n\\n        output = string(abi.encodePacked('data:application/json;base64,', json));\\n        \\n        return output;\\n    }\\n    \\n    function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT license\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /* Bitwise Helper Functions */\\n    function getBit(uint256[] memory map, uint256 position) internal pure returns(uint256) {\\n    // Returns whether a bit is set or off at a given position in our map (credit: @cjpais)\\n        (uint256 quotient, uint256 remainder) = getDivided(position, 256);\\n        require(position <= 255 + (quotient * 256));\\n        return (map[quotient] >> (255 - remainder)) & 1;\\n    }\\n\\n\\n    function getDivided(uint256 numerator, uint256 denominator) public pure returns (uint256 quotient, uint256 remainder)\\n    {\\n        require(denominator > 0);\\n        quotient = numerator / denominator;\\n        remainder = numerator - denominator * quotient;\\n    }\\n\\n    function getNumIntsRequired(bytes memory data) public pure returns (uint256)\\n    {\\n    // Calculate the number of ints needed to contain the number of bytes in data\\n        require(data.length > 0);\\n\\n        (uint256 quotient, uint256 remainder) = getDivided(data.length, 32);\\n\\n        if (remainder > 0) return quotient + 1;\\n        return quotient;\\n    }\\n\\n\\n    function fromBytes(bytes memory encodedMap) internal pure returns (uint256[] memory) {\\n    // Converts a bytes array to a map (two uint256)\\n        uint256 num = getNumIntsRequired(encodedMap);\\n        uint256[] memory result = new uint256[](num);\\n\\n        uint256 offset = 0;\\n        uint256 x;\\n\\n        for (uint256 i = 0; i < num; i++) {\\n            assembly {\\n                x := mload(add(encodedMap, add(0x20, offset)))\\n                mstore(add(result, add(0x20, offset)), x)\\n            }\\n            offset += 0x20;\\n        }\\n\\n        return result;\\n    }\\n}\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 { \\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n        return string(result);\\n     }\\n} \"\r\n    },\r\n    \"contracts/interfaces/IDungeons.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for Crypts and Caverns\\n\\n/*****************************************************\\n0000000                                        0000000\\n0001100  Crypts and Caverns                    0001100\\n0001100     9000 generative on-chain dungeons  0001100\\n0003300                                        0003300\\n*****************************************************/\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDungeons {\\n    struct Dungeon {\\n        uint8 size;\\n        uint8 environment;\\n        uint8 structure;  // crypt or cavern\\n        uint8 legendary;\\n        bytes layout;\\n        EntityData entities;\\n        string affinity;\\n        string dungeonName;\\n    }\\n\\n    struct EntityData {\\n        uint8[] x;\\n        uint8[] y;\\n        uint8[] entityType;\\n    }\\n\\n    function claim(uint256 tokenId) external payable;\\n    function claimMany(uint256[] memory tokenArray) external payable;\\n    function ownerClaim(uint256 tokenId) external payable;\\n    function mint() external payable;\\n    function openClaim() external;\\n    function withdraw(address payable recipient, uint256 amount) external;\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n    function getLayout(uint256 tokenId) external view returns (bytes memory);\\n    function getSize(uint256 tokenId) external view returns (uint8);\\n    function getEntities(uint256 tokenId) external view returns (uint8[] memory, uint8[] memory, uint8[] memory);\\n    function getEnvironment(uint256 tokenId) external view returns (uint8);\\n    function getName(uint256 tokenId) external view returns (string memory);\\n    function getNumPoints(uint256 tokenId) external view returns (uint256);\\n    function getNumDoors(uint256 tokenId) external view returns (uint256);\\n    function getSvg(uint256 tokenId) external view returns (string memory);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"environment\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"structure\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"legendary\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"layout\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"x\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"y\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"entityType\",\"type\":\"uint8[]\"}],\"internalType\":\"struct IDungeons.EntityData\",\"name\":\"entities\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"affinity\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dungeonName\",\"type\":\"string\"}],\"internalType\":\"struct IDungeons.Dungeon\",\"name\":\"dungeon\",\"type\":\"tuple\"},{\"internalType\":\"uint8[]\",\"name\":\"x\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"y\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"entityData\",\"type\":\"uint8[]\"}],\"name\":\"draw\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"getDivided\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quotient\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainder\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getNumIntsRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"environment\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"structure\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"legendary\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"layout\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"x\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"y\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"entityType\",\"type\":\"uint8[]\"}],\"internalType\":\"struct IDungeons.EntityData\",\"name\":\"entities\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"affinity\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dungeonName\",\"type\":\"string\"}],\"internalType\":\"struct IDungeons.Dungeon\",\"name\":\"dungeon\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"entities\",\"type\":\"uint256[]\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"dungeonsRender","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}