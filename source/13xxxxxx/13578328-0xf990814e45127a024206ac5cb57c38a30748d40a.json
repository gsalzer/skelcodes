{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\ncontract GebAuth {\r\n    // --- Authorization ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"GebAuth/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n\r\n    constructor () public {\r\n        authorizedAccounts[msg.sender] = 1;\r\n        emit AddAuthorization(msg.sender);\r\n    }\r\n}\r\n\r\nabstract contract GebLenderFirstResortRewardsLike {\r\n    function modifyParameters(bytes32, uint256) virtual external;\r\n}\r\ncontract MinimalLenderFirstResortOverlay is GebAuth {\r\n    GebLenderFirstResortRewardsLike public staking;\r\n\r\n    // Max amount of staked tokens to keep\r\n    uint256                         public maxStakedTokensToKeep;\r\n\r\n    constructor(address staking_, uint256 maxStakedTokensToKeep_) public GebAuth() {\r\n        require(staking_ != address(0), \"MinimalLenderFirstResortOverlay/null-address\");\r\n        require(maxStakedTokensToKeep_ > 0, \"MinimalLenderFirstResortOverlay/null-maxStakedTokensToKeep\");\r\n        staking               = GebLenderFirstResortRewardsLike(staking_);\r\n        maxStakedTokensToKeep = maxStakedTokensToKeep_;\r\n    }\r\n\r\n    /*\r\n    * @notify Modify escrowPaused\r\n    * @param parameter Must be \"escrowPaused\"\r\n    * @param data The new value for escrowPaused\r\n    */\r\n    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\r\n        if (parameter == \"escrowPaused\") {\r\n            staking.modifyParameters(parameter, data);\r\n        } else if (parameter == \"minStakedTokensToKeep\") {\r\n            require(data <= maxStakedTokensToKeep, \"MinimalLenderFirstResortOverlay/minStakedTokensToKeep-over-limit\");\r\n            staking.modifyParameters(parameter, data);\r\n        }\r\n        else revert(\"MinimalLenderFirstResortOverlay/modify-forbidden-param\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staking_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxStakedTokensToKeep_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakedTokensToKeep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract GebLenderFirstResortRewardsLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MinimalLenderFirstResortOverlay","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000069c6c08b91010c88c95775b6fd768e5b04efc1060000000000000000000000000000000000000000000034f086f3b33b68400000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ad41610c18cc98e2908de5a79ff5a3681f32ec7cab3b2a207205e6df7175e8d8"}]}