{"status":"1","message":"OK","result":[{"SourceCode":"// Verified using https://dapp.tools\n\n// hevm: flattened sources of src/auth/authorities/RolesAuthority.sol\n// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.7.0;\n\n////// src/auth/Auth.sol\n/* pragma solidity >=0.7.0; */\n\n/// @notice Provides a flexible and updatable auth pattern which is completely separate from application logic.\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\nabstract contract Auth {\n    /*///////////////////////////////////////////////////////////////\n                                  EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event AuthorityUpdated(Authority indexed authority);\n\n    event OwnerUpdated(address indexed owner);\n\n    /*///////////////////////////////////////////////////////////////\n                       OWNER AND AUTHORITY STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    Authority public authority;\n\n    address public owner;\n\n    constructor() {\n        owner = msg.sender;\n\n        emit OwnerUpdated(msg.sender);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                  OWNER AND AUTHORITY SETTER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function setOwner(address newOwner) external requiresAuth {\n        owner = newOwner;\n\n        emit OwnerUpdated(owner);\n    }\n\n    function setAuthority(Authority newAuthority) external requiresAuth {\n        authority = newAuthority;\n\n        emit AuthorityUpdated(authority);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        AUTHORIZATION LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    modifier requiresAuth() {\n        require(isAuthorized(msg.sender, msg.sig), \"UNAUTHORIZED\");\n\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        }\n\n        if (src == owner) {\n            return true;\n        }\n\n        Authority _authority = authority;\n\n        if (_authority == Authority(address(0))) {\n            return false;\n        }\n\n        return _authority.canCall(src, address(this), sig);\n    }\n}\n\n/// @notice A generic interface for a contract which provides authorization data to an Auth instance.\ninterface Authority {\n    function canCall(\n        address src,\n        address dst,\n        bytes4 sig\n    ) external view returns (bool);\n}\n\n////// src/auth/authorities/RolesAuthority.sol\n/* pragma solidity >=0.7.0; */\n\n/* import {Auth, Authority} from \"../Auth.sol\"; */\n\n/// @notice Role based Authority that supports up to 256 roles.\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-roles/blob/master/src/roles.sol)\ncontract RolesAuthority is Auth, Authority {\n    /*///////////////////////////////////////////////////////////////\n                                  EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event UserRootUpdated(address indexed who, bool enabled);\n\n    event UserRoleUpdated(address indexed who, uint8 indexed role, bool enabled);\n\n    event PublicCapabilityUpdated(address indexed code, bytes4 indexed sig, bool enabled);\n\n    event RoleCapabilityUpdated(uint8 indexed role, address indexed code, bytes4 indexed sig, bool enabled);\n\n    /*///////////////////////////////////////////////////////////////\n                                  ROLES\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(address => bool) internal rootUsers;\n\n    mapping(address => bytes32) internal userRoles;\n\n    mapping(address => mapping(bytes4 => bytes32)) internal roleCapabilities;\n\n    mapping(address => mapping(bytes4 => bool)) internal publicCapabilities;\n\n    /*///////////////////////////////////////////////////////////////\n                        USER ROLE GETTER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function isUserRoot(address who) public view returns (bool) {\n        return rootUsers[who];\n    }\n\n    function getUserRoles(address who) public view returns (bytes32) {\n        return userRoles[who];\n    }\n\n    function getRoleCapabilities(address code, bytes4 sig) public view returns (bytes32) {\n        return roleCapabilities[code][sig];\n    }\n\n    function isCapabilityPublic(address code, bytes4 sig) public view returns (bool) {\n        return publicCapabilities[code][sig];\n    }\n\n    function doesUserHaveRole(address who, uint8 role) external view returns (bool) {\n        bytes32 roles = getUserRoles(who);\n        bytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\n        return bytes32(0) != roles & shifted;\n    }\n\n    function canCall(\n        address caller,\n        address code,\n        bytes4 sig\n    ) public view virtual override returns (bool) {\n        if (isCapabilityPublic(code, sig) || isUserRoot(caller)) {\n            return true;\n        } else {\n            bytes32 hasRoles = getUserRoles(caller);\n            bytes32 needsOneOf = getRoleCapabilities(code, sig);\n            return bytes32(0) != hasRoles & needsOneOf;\n        }\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       USER/ROLE SETTER FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function setRootUser(address who, bool enabled) external requiresAuth {\n        rootUsers[who] = enabled;\n\n        emit UserRootUpdated(who, enabled);\n    }\n\n    function setUserRole(\n        address who,\n        uint8 role,\n        bool enabled\n    ) public requiresAuth {\n        bytes32 lastRoles = userRoles[who];\n        bytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\n        if (enabled) {\n            userRoles[who] = lastRoles | shifted;\n        } else {\n            userRoles[who] = lastRoles & ~shifted;\n        }\n\n        emit UserRoleUpdated(who, role, enabled);\n    }\n\n    function setPublicCapability(\n        address code,\n        bytes4 sig,\n        bool enabled\n    ) public requiresAuth {\n        publicCapabilities[code][sig] = enabled;\n\n        emit PublicCapabilityUpdated(code, sig, enabled);\n    }\n\n    function setRoleCapability(\n        uint8 role,\n        address code,\n        bytes4 sig,\n        bool enabled\n    ) public requiresAuth {\n        bytes32 lastRoles = roleCapabilities[code][sig];\n        bytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\n        if (enabled) {\n            roleCapabilities[code][sig] = lastRoles | shifted;\n        } else {\n            roleCapabilities[code][sig] = lastRoles & ~shifted;\n        }\n\n        emit RoleCapabilityUpdated(role, code, sig, enabled);\n    }\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Authority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"code\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"PublicCapabilityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"code\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"RoleCapabilityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"UserRoleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"UserRootUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract Authority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"code\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"doesUserHaveRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"code\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"getRoleCapabilities\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getUserRoles\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"code\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"isCapabilityPublic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isUserRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Authority\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"code\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setPublicCapability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"code\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setRoleCapability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setRootUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setUserRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RolesAuthority","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"100000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}