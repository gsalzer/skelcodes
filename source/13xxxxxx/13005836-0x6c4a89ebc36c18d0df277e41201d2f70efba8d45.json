{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TokenRedeemer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"./ISuper1155.sol\\\";\\r\\n\\r\\n/**\\r\\n  @title TokenRedeemer\\r\\n  @author 0xthrpw\\r\\n\\r\\n  This contract allows an erc1155 of a given group to be redeemed or burned\\r\\n  in exchange for a token from a new group\\r\\n*/\\r\\ncontract TokenRedeemer is Ownable, ReentrancyGuard {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  ISuper1155 public super1155;\\r\\n\\r\\n  address public burnAddress;\\r\\n\\r\\n  bool public customBurn;\\r\\n\\r\\n  struct RedemptionConfig {\\r\\n    uint256 amountOut;\\r\\n    bool burnOnRedemption;\\r\\n  }\\r\\n\\r\\n  // groupIdIn => groupIdOut => config\\r\\n  mapping (uint256 => mapping(uint256 => RedemptionConfig)) public redemptionConfigs;\\r\\n\\r\\n  // groupId => tokenId => redeemer\\r\\n  mapping (uint256 => mapping(uint256 => address)) public redeemers;\\r\\n\\r\\n  // groupId => tokenId => redeemed\\r\\n  mapping (uint256 => mapping(uint256 => bool)) public redeemed;\\r\\n\\r\\n  event TokenRedemption(address user, uint256 tokenIn, uint256[] tokensOut);\\r\\n  event ConfigUpdate(uint256 groupIdIn, uint256 groupIdOut, uint256 amountOut, bool burnOnRedemption);\\r\\n\\r\\n  /**\\r\\n    On deployment, set `_super1155` as the token to redeem,  set the burn\\r\\n    address as `_burnTarget` and enable use of a custom burn address by setting\\r\\n    _customBurn\\r\\n\\r\\n    @param _super1155 The token for which this contract will allow redemptions\\r\\n    @param _burnTarget The address that will be used for burning tokens\\r\\n    @param _customBurn Boolean for enabling a custom burn address\\r\\n  */\\r\\n  constructor(ISuper1155 _super1155, address _burnTarget, bool _customBurn) public {\\r\\n    super1155 = _super1155;\\r\\n    customBurn = _customBurn;\\r\\n    if(customBurn){\\r\\n      require(_burnTarget != address(0), \\\"TokenRedeemer::constructor: Custom burn address cannot be 0 address\\\");\\r\\n      burnAddress = _burnTarget;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    Redeem a specific token `_tokenId` for a token from group `_groupIdOut`\\r\\n\\r\\n    @param _tokenId The bitpacked 1155 token id\\r\\n    @param _groupIdOut The group id of the token to receive\\r\\n  */\\r\\n  function redeem(uint256 _tokenId, uint256 _groupIdOut) external nonReentrant {\\r\\n    _redeemToken(_tokenId, _groupIdOut);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    Redeem a specific set of tokens `_tokenIds` for a set of token from group `_groupIdOut`\\r\\n\\r\\n    @param _tokenIds An array of bitpacked 1155 token ids\\r\\n    @param _groupIdOut The group id of the token to receive\\r\\n  */\\r\\n  function redeemMult(uint256[] calldata _tokenIds, uint256 _groupIdOut) external nonReentrant {\\r\\n    for(uint256 n = 0; n < _tokenIds.length; n++){\\r\\n      _redeemToken(_tokenIds[n], _groupIdOut);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    Redeem a token for n number of tokens in return.  This function parses the\\r\\n    tokens group id, determines the appropriate exchange token and amount, if\\r\\n    necessary burns the deposited token and mints the receipt token(s)\\r\\n\\r\\n    @param _tokenId The bitpacked 1155 token id\\r\\n    @param _groupIdOut The group ID of the token being received\\r\\n  */\\r\\n  function _redeemToken(uint256 _tokenId, uint256 _groupIdOut) internal {\\r\\n    uint256 _groupIdIn = _tokenId >> 128;\\r\\n    require(!redeemed[_groupIdOut][_tokenId], \\\"TokenRedeemer::redeem: token has already been redeemed for this group\\\" );\\r\\n\\r\\n    RedemptionConfig memory config = redemptionConfigs[_groupIdIn][_groupIdOut];\\r\\n    uint256 redemptionAmount = config.amountOut;\\r\\n\\r\\n    {\\r\\n      require(_groupIdOut != uint256(0), \\\"TokenRedeemer::redeem: invalid group id from token\\\");\\r\\n      require(redemptionAmount != uint256(0), \\\"TokenRedeemer::redeem: invalid redemption amount\\\");\\r\\n\\r\\n      uint256 balanceOfSender = super1155.balanceOf(address(msg.sender), _tokenId);\\r\\n      require(balanceOfSender != 0, \\\"TokenRedeemer::redeem: msg sender is not token owner\\\");\\r\\n    }\\r\\n\\r\\n    (bool groupInit, , , , , , , , , uint256 mintCount,) = super1155.itemGroups(_groupIdOut);\\r\\n    require(groupInit, \\\"TokenRedeemer::redeem: item group not initialized\\\");\\r\\n\\r\\n    uint256[] memory ids = new uint256[](redemptionAmount);\\r\\n    uint256[] memory amounts = new uint[](redemptionAmount);\\r\\n\\r\\n    uint256 newgroupIdPrep = _groupIdOut << 128;\\r\\n    for(uint256 i = 0; i < redemptionAmount; i++){\\r\\n      ids[i] = newgroupIdPrep.add(mintCount).add(1).add(i);\\r\\n      amounts[i] = uint256(1);\\r\\n    }\\r\\n\\r\\n    redeemers[_groupIdOut][_tokenId] = address(msg.sender);\\r\\n    redeemed[_groupIdOut][_tokenId] = true;\\r\\n\\r\\n    if(config.burnOnRedemption){\\r\\n      if(customBurn){\\r\\n        super1155.safeTransferFrom(msg.sender, burnAddress, _tokenId, 1, \\\"\\\");\\r\\n      }else{\\r\\n        super1155.burnBatch(msg.sender, _asSingletonArray(_tokenId), _asSingletonArray(1));\\r\\n      }\\r\\n    }\\r\\n\\r\\n    super1155.mintBatch(msg.sender, ids, amounts, \\\"\\\");\\r\\n\\r\\n    emit TokenRedemption(msg.sender, _tokenId, ids);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    Configure redemption amounts for each group.  ONE token of _groupIdin results\\r\\n    in _amountOut number of _groupIdOut tokens\\r\\n\\r\\n    @param _groupIdIn The group ID of the token being redeemed\\r\\n    @param _groupIdIn The group ID of the token being received\\r\\n    @param _data The redemption config data input.\\r\\n  */\\r\\n\\r\\n  function setRedemptionConfig(uint256 _groupIdIn, uint256 _groupIdOut, RedemptionConfig calldata _data) external onlyOwner {\\r\\n    require(_groupIdIn != _groupIdOut, \\\"TokenRedeemer:setRedemptionAmounts: token in must be different from token out\\\");\\r\\n\\r\\n    redemptionConfigs[_groupIdIn][_groupIdOut] = RedemptionConfig({\\r\\n      amountOut: _data.amountOut,\\r\\n      burnOnRedemption: _data.burnOnRedemption\\r\\n    });\\r\\n\\r\\n    emit ConfigUpdate(_groupIdIn, _groupIdOut, _data.amountOut, _data.burnOnRedemption);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    This private helper function converts a number into a single-element array.\\r\\n\\r\\n    @param _element The element to convert to an array.\\r\\n    @return The array containing the single `_element`.\\r\\n  */\\r\\n  function _asSingletonArray(uint256 _element) private pure returns (uint256[] memory) {\\r\\n    uint256[] memory array = new uint256[](1);\\r\\n    array[0] = _element;\\r\\n    return array;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ISuper1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface ISuper1155 {\\r\\n  function BURN (  ) external view returns ( bytes32 );\\r\\n  function CONFIGURE_GROUP (  ) external view returns ( bytes32 );\\r\\n  function LOCK_CREATION (  ) external view returns ( bytes32 );\\r\\n  function LOCK_ITEM_URI (  ) external view returns ( bytes32 );\\r\\n  function LOCK_URI (  ) external view returns ( bytes32 );\\r\\n  function MANAGER (  ) external view returns ( bytes32 );\\r\\n  function MINT (  ) external view returns ( bytes32 );\\r\\n  function SET_METADATA (  ) external view returns ( bytes32 );\\r\\n  function SET_PROXY_REGISTRY (  ) external view returns ( bytes32 );\\r\\n  function SET_URI (  ) external view returns ( bytes32 );\\r\\n  function UNIVERSAL (  ) external view returns ( bytes32 );\\r\\n  function ZERO_RIGHT (  ) external view returns ( bytes32 );\\r\\n  \\r\\n  function balanceOf ( address _owner, uint256 _id ) external view returns ( uint256 );\\r\\n  function balanceOfBatch ( address[] memory _owners, uint256[] memory _ids ) external view returns ( uint256[] memory );\\r\\n  function burn ( address _burner, uint256 _id, uint256 _amount ) external;\\r\\n  function burnBatch ( address _burner, uint256[] memory _ids, uint256[] memory _amounts ) external;\\r\\n  function burnCount ( uint256 ) external view returns ( uint256 );\\r\\n  function circulatingSupply ( uint256 ) external view returns ( uint256 );\\r\\n  function configureGroup ( uint256 _groupId, bytes calldata _data ) external;\\r\\n  function groupBalances ( uint256, address ) external view returns ( uint256 );\\r\\n  function hasRightUntil ( address _address, bytes32 _circumstance, bytes32 _right ) external view returns ( uint256 );\\r\\n  function isApprovedForAll ( address _owner, address _operator ) external view returns ( bool );\\r\\n  function itemGroups ( uint256 ) external view returns ( bool initialized, string memory _name, uint8 supplyType, uint256 supplyData, uint8 itemType, uint256 itemData, uint8 burnType, uint256 burnData, uint256 _circulatingSupply, uint256 _mintCount, uint256 _burnCount );\\r\\n  function lock (  ) external;\\r\\n  function lockURI ( string memory _uri, uint256 _id ) external;\\r\\n  function lockURI ( string memory _uri ) external;\\r\\n  function locked (  ) external view returns ( bool );\\r\\n  function managerRight ( bytes32 ) external view returns ( bytes32 );\\r\\n  function metadata ( uint256 ) external view returns ( string memory );\\r\\n  function metadataFrozen ( uint256 ) external view returns ( bool );\\r\\n  function metadataUri (  ) external view returns ( string memory );\\r\\n  function mintBatch ( address _recipient, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data ) external;\\r\\n  function mintCount ( uint256 ) external view returns ( uint256 );\\r\\n  function name (  ) external view returns ( string memory );\\r\\n  function owner (  ) external view returns ( address );\\r\\n  function permissions ( address, bytes32, bytes32 ) external view returns ( uint256 );\\r\\n  function proxyRegistryAddress (  ) external view returns ( address );\\r\\n  function renounceOwnership (  ) external;\\r\\n  function safeBatchTransferFrom ( address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data ) external;\\r\\n  function safeTransferFrom ( address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data ) external;\\r\\n  function setApprovalForAll ( address _operator, bool _approved ) external;\\r\\n  function setManagerRight ( bytes32 _managedRight, bytes32 _managerRight ) external;\\r\\n  function setMetadata ( uint256 _id, string memory _metadata ) external;\\r\\n  function setPermit ( address _address, bytes32 _circumstance, bytes32 _right, uint256 _expirationTime ) external;\\r\\n  function setProxyRegistry ( address _proxyRegistryAddress ) external;\\r\\n  function setURI ( string memory _uri ) external;\\r\\n  function supportsInterface ( bytes4 interfaceId ) external view returns ( bool );\\r\\n  function totalBalances ( address ) external view returns ( uint256 );\\r\\n  function transferOwnership ( address newOwner ) external;\\r\\n  function uri ( uint256 ) external view returns ( string memory );\\r\\n  function uriLocked (  ) external view returns ( bool );\\r\\n  function version (  ) external view returns ( uint256 );\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ISuper1155\",\"name\":\"_super1155\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnTarget\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_customBurn\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupIdIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupIdOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"burnOnRedemption\",\"type\":\"bool\"}],\"name\":\"ConfigUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokensOut\",\"type\":\"uint256[]\"}],\"name\":\"TokenRedemption\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_groupIdOut\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_groupIdOut\",\"type\":\"uint256\"}],\"name\":\"redeemMult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"redeemed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"redeemers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"redemptionConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burnOnRedemption\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupIdIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_groupIdOut\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burnOnRedemption\",\"type\":\"bool\"}],\"internalType\":\"struct TokenRedeemer.RedemptionConfig\",\"name\":\"_data\",\"type\":\"tuple\"}],\"name\":\"setRedemptionConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"super1155\",\"outputs\":[{\"internalType\":\"contract ISuper1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenRedeemer","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000071b11ac923c967cd5998f23f6dae0d779a6ac8af00000000000000000000000000000000000000000000000000000000deadbeef0000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}