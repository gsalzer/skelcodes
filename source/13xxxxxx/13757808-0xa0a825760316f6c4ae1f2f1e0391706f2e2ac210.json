{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.1.2 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/proxy/Initializable.sol\r\n\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !Address.isContract(address(this));\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/proxy/Clones.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\r\n * deploying minimal proxy contracts, also known as \"clones\".\r\n *\r\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\r\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\r\n *\r\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\r\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\r\n * deterministic method.\r\n *\r\n * _Available since v3.4._\r\n */\r\nlibrary Clones {\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\r\n     *\r\n     * This function uses the create opcode, which should never revert.\r\n     */\r\n    function clone(address master) internal returns (address instance) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, master))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create(0, ptr, 0x37)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\r\n     *\r\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\r\n     * the clone. Using the same `master` and `salt` multiple time will revert, since\r\n     * the clones cannot be deployed twice at the same address.\r\n     */\r\n    function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, master))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create2(0, ptr, 0x37, salt)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create2 failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, master))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\r\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\r\n            mstore(add(ptr, 0x4c), salt)\r\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\r\n            predicted := keccak256(add(ptr, 0x37), 0x55)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {\r\n        return predictDeterministicAddress(master, salt, address(this));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/governance/IMaintainersRegistry.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IMaintainersRegistry {\r\n    function isMaintainer(address _address) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/governance/ICongressMembersRegistry.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * ICongressMembersRegistry contract.\r\n * @author Nikola Madjarevic\r\n * Date created: 13.9.21.\r\n * Github: madjarevicn\r\n */\r\n\r\ninterface ICongressMembersRegistry {\r\n    function isMember(address _address) external view returns (bool);\r\n    function getMinimalQuorum() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/system/TokensFarmUpgradable.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n//to be fixed\r\ncontract TokensFarmUpgradable {\r\n\r\n    // Address of tokens congress\r\n    address public tokensFarmCongress;\r\n    // Instance of maintainers registry object\r\n    IMaintainersRegistry public maintainersRegistry;\r\n\r\n    // Only maintainer modifier\r\n    modifier onlyMaintainer {\r\n        require(\r\n            maintainersRegistry.isMaintainer(msg.sender),\r\n            \"TokensFarmUpgradable: Restricted only to Maintainer\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Only tokens farm congress modifier\r\n    modifier onlyTokensFarmCongress {\r\n        require(\r\n            msg.sender == tokensFarmCongress,\r\n            \"TokensFarmUpgradable: Restricted only to TokensFarmCongress\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice function to set congress and maintainers registry address\r\n     *\r\n     * @param _tokensFarmCongress - address of tokens farm congress\r\n     * @param _maintainersRegistry - address of maintainers registry\r\n     */\r\n    function setCongressAndMaintainersRegistry(\r\n        address _tokensFarmCongress,\r\n        address _maintainersRegistry\r\n    )\r\n        internal\r\n    {\r\n        require(\r\n            _tokensFarmCongress != address(0x0),\r\n            \"tokensFarmCongress can not be 0x0 address\"\r\n        );\r\n        require(\r\n            _maintainersRegistry != address(0x0),\r\n            \"_maintainersRegistry can not be 0x0 address\"\r\n        );\r\n\r\n        tokensFarmCongress = _tokensFarmCongress;\r\n        maintainersRegistry = IMaintainersRegistry(_maintainersRegistry);\r\n    }\r\n\r\n    /**\r\n     * @notice function to set new maintainers registry address\r\n     *\r\n     * @param _maintainersRegistry - address of new maintainers registry\r\n     */\r\n    function setMaintainersRegistry(\r\n        address _maintainersRegistry\r\n    )\r\n        external\r\n        onlyTokensFarmCongress\r\n    {\r\n        require(\r\n            _maintainersRegistry != address(0x0),\r\n            \"_maintainersRegistry can not be 0x0 address\"\r\n        );\r\n\r\n        maintainersRegistry = IMaintainersRegistry(_maintainersRegistry);\r\n    }\r\n\r\n    /**\r\n    * @notice function to set new congress registry address\r\n    *\r\n    * @param _tokensFarmCongress - address of new tokens farm congress\r\n    */\r\n    function setTokensFarmCongress(\r\n        address _tokensFarmCongress\r\n    )\r\n        external\r\n        onlyTokensFarmCongress\r\n    {\r\n        require(\r\n            _tokensFarmCongress != address(0x0),\r\n            \"_maintainersRegistry can not be 0x0 address\"\r\n        );\r\n\r\n        tokensFarmCongress = _tokensFarmCongress;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/ITokensFarm.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ITokensFarm {\r\n    function fund(uint256 _amount) external;\r\n    function setMinTimeToStake(uint256 _minTimeToStake) external;\r\n    function setIsEarlyWithdrawAllowed(bool _isEarlyWithdrawAllowed) external;\r\n    function setStakeFeePercent(uint256 _stakeFeePercent) external;\r\n    function setRewardFeePercent(uint256 _rewardFeePercent) external;\r\n    function setFlatFeeAmount(uint256 _flatFeeAmount) external;\r\n    function setIsFlatFeeAllowed(bool _isFlatFeeAllowed) external;\r\n    function withdrawCollectedFeesERC() external;\r\n    function withdrawCollectedFeesETH() external;\r\n    function withdrawTokensIfStuck(address _erc20, uint256 _amount, address _beneficiary) external;\r\n    function initialize(\r\n        address _erc20, uint256 _rewardPerSecond, uint256 _startTime, uint256 _minTimeToStake,\r\n        bool _isEarlyWithdrawAllowed, uint256 _penalty, address _tokenStaked, uint256 _stakeFeePercent,\r\n        uint256 _rewardFeePercent, uint256 _flatFeeAmount, address payable _feeCollector, bool _isFlatFeeAllowed,\r\n        address _farmImplementation\r\n    ) external;\r\n    function setFeeCollector(address payable _feeCollector) external ;\r\n}\r\n\r\n\r\n// File contracts/TokensFarmFactory.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract TokensFarmFactory is TokensFarmUpgradable, Initializable {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Clones for *;\r\n\r\n    // Array of Tokens Farm that are deployed\r\n    address[] public deployedTokensFarms;\r\n\r\n    // FeeCollector + CongressAddress\r\n    address payable public feeCollector;\r\n\r\n    // Address of deployed tokens farm contract\r\n    address public farmImplementation;\r\n\r\n    // Events\r\n    event DeployedFarm(address indexed farmAddress);\r\n    event TokensFarmImplementationSet(address indexed farmImplementation);\r\n    event FeeCollectorSet(address indexed feeCollector);\r\n\r\n    /**\r\n     * @notice function sets initial state of contract\r\n     *\r\n     * @param _farmImplementation- address of deployed farm\r\n     * @param _tokensFarmCongress - address of farm congress\r\n     * @param _maintainersRegistry - address of maintainers registry\r\n     * @param _feeCollector - address of feeCollector\r\n     */\r\n    function initialize(\r\n        address _farmImplementation,\r\n        address _tokensFarmCongress,\r\n        address _maintainersRegistry,\r\n        address payable _feeCollector\r\n    )\r\n        external\r\n        initializer\r\n    {\r\n        require(\r\n            _farmImplementation != address(0),\r\n            \"farmImplementation can not be 0x0 address\"\r\n        );\r\n        require(\r\n            _feeCollector != address(0),\r\n            \"_feeCollector can not be 0x0 address\"\r\n        );\r\n\r\n        // set congress and maintainers registry address\r\n        setCongressAndMaintainersRegistry(\r\n            _tokensFarmCongress,\r\n            _maintainersRegistry\r\n        );\r\n\r\n        // address of fee collector\r\n        feeCollector = _feeCollector;\r\n        // address of tokens farm contract\r\n        farmImplementation = _farmImplementation;\r\n    }\r\n\r\n    /**\r\n     * @notice function funds the farm\r\n     *\r\n     * @param _farmAddress - function will operate on\r\n     * farm with this address\r\n     * @param _rewardToken - address of reward token\r\n     * @param _amount - funding the farm with this amount of tokens\r\n     */\r\n    function _fundInternal(\r\n        address _farmAddress,\r\n        address _rewardToken,\r\n        uint256 _amount\r\n    )\r\n        internal\r\n    {\r\n        require(\r\n            _farmAddress != address(0x0),\r\n            \"Farm's address can't be 0x0 address\"\r\n        );\r\n\r\n        // instance of erc20 contract\r\n        IERC20 rewardToken = IERC20(_rewardToken);\r\n        // approval of transaction\r\n        rewardToken.approve(_farmAddress, _amount);\r\n\r\n        ITokensFarm tokensFarm = ITokensFarm(_farmAddress);\r\n        tokensFarm.fund(_amount);\r\n    }\r\n\r\n    /**\r\n     * @notice function to check does factory has enough funds\r\n     *\r\n     * @param _rewardToken - address of reward token\r\n     * @param _totalBudget - funding the farm\r\n     * with this amount of tokens\r\n     */\r\n    function _sufficientFunds(\r\n        address _rewardToken,\r\n        uint256 _totalBudget\r\n    )\r\n        internal\r\n        view\r\n        returns(bool)\r\n    {\r\n        // instance of erc20 contract\r\n        IERC20 rewardToken = IERC20(_rewardToken);\r\n        return rewardToken.balanceOf(address(this)) >= _totalBudget;\r\n    }\r\n\r\n    /**\r\n     * @notice function deploys and funds farms\r\n     *\r\n     * @dev store their addresses in array\r\n     * @dev deploys tokens farm proxy contract\r\n     * @dev initializing of contract\r\n     *\r\n     * @param _rewardToken - address of reward token\r\n     * @param _rewardPerSecond - number of reward per second\r\n     * @param _minTimeToStake - how much time needs to past before staking\r\n     * @param _isEarlyWithdrawAllowed - is early withdraw allowed or not\r\n     * @param _penalty - ENUM(what type of penalty)\r\n     * @param _tokenStaked - address of token which is staked\r\n     * @param _stakeFeePercent - fee percent for staking\r\n     * @param _rewardFeePercent - fee percent for reward distribution\r\n     * @param _flatFeeAmount - flat fee amount\r\n     * @param _isFlatFeeAllowed - is flat fee  allowed or not\r\n     */\r\n    function deployAndFundTokensFarm(\r\n        address _rewardToken,\r\n        uint256 _rewardPerSecond,\r\n        uint256 _minTimeToStake,\r\n        bool _isEarlyWithdrawAllowed,\r\n        uint256 _penalty,\r\n        address _tokenStaked,\r\n        uint256 _stakeFeePercent,\r\n        uint256 _rewardFeePercent,\r\n        uint256 _flatFeeAmount,\r\n        bool _isFlatFeeAllowed,\r\n        uint256 _totalBudget\r\n    )\r\n        external\r\n        onlyMaintainer\r\n    {\r\n        require(\r\n            _sufficientFunds(_rewardToken, _totalBudget),\r\n            \"There is not enough tokens left in factory to fund\"\r\n        );\r\n\r\n        // Creates clone of TokensFarm smart contract\r\n        address clone = Clones.clone(farmImplementation);\r\n\r\n        // Deploy tokens farm;\r\n        ITokensFarm(clone).initialize(\r\n            _rewardToken,\r\n            _rewardPerSecond,\r\n            block.timestamp + 10,\r\n            _minTimeToStake,\r\n            _isEarlyWithdrawAllowed,\r\n            _penalty,\r\n            _tokenStaked,\r\n            _stakeFeePercent,\r\n            _rewardFeePercent,\r\n            _flatFeeAmount,\r\n            feeCollector,\r\n            _isFlatFeeAllowed,\r\n            farmImplementation\r\n        );\r\n\r\n        // Add deployed farm to array of deployed farms\r\n        deployedTokensFarms.push(clone);\r\n        // Funding the farm\r\n        _fundInternal(clone, _rewardToken, _totalBudget);\r\n        // Emits event with farms address\r\n        emit DeployedFarm(clone);\r\n    }\r\n\r\n    /**\r\n     * @notice function funds again the farm if necessary\r\n     *\r\n     * @param farmAddress - function will operate\r\n     * on farm with this address\r\n     * param rewardToken - address of reward token\r\n     * @param amount - funding the farm with this amount of tokens\r\n     */\r\n    function fundTheSpecificFarm(\r\n        address farmAddress,\r\n        address rewardToken,\r\n        uint256 amount\r\n    )\r\n        external\r\n        onlyMaintainer\r\n    {\r\n        _fundInternal(farmAddress, rewardToken, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice function withdraws collected fees in ERC value\r\n     *\r\n     * @param farmAddress - function will operate on\r\n     * farm with this address\r\n     */\r\n    function withdrawCollectedFeesERCOnSpecificFarm(\r\n        address farmAddress\r\n    )\r\n        external\r\n        onlyTokensFarmCongress\r\n    {\r\n        require(\r\n            farmAddress != address(0x0),\r\n            \"Farm's address can't be 0x0 address\"\r\n        );\r\n\r\n\r\n        ITokensFarm tokensFarm = ITokensFarm(farmAddress);\r\n        tokensFarm.withdrawCollectedFeesERC();\r\n    }\r\n\r\n    /**\r\n     * @notice function withdraws collected fees in ETH value\r\n     *\r\n     * @param farmAddress - function will operate on\r\n     * farm with this address\r\n     */\r\n    function withdrawCollectedFeesETHOnSpecificFarm(\r\n        address farmAddress\r\n    )\r\n        external\r\n        onlyTokensFarmCongress\r\n    {\r\n        require(\r\n            farmAddress != address(0x0),\r\n            \"Farm's address can't be 0x0 address\"\r\n        );\r\n\r\n        ITokensFarm tokensFarm = ITokensFarm(farmAddress);\r\n        tokensFarm.withdrawCollectedFeesETH();\r\n    }\r\n\r\n    /**\r\n     * @notice function withdraws stuck tokens on farm\r\n     *\r\n     * @param farmAddress - function will operate on\r\n     * farm with this address\r\n     * @param _erc20 - address of token that is stuck\r\n     * @param _amount - how many was deposited\r\n     * @param _beneficiary - address of user\r\n     * that deposited by mistake\r\n     */\r\n    function withdrawTokensIfStuckOnSpecificFarm(\r\n        address farmAddress,\r\n        address _erc20,\r\n        uint256 _amount,\r\n        address _beneficiary\r\n    )\r\n        external\r\n        onlyTokensFarmCongress\r\n    {\r\n        require(\r\n            farmAddress != address(0x0),\r\n            \"Farm's address can't be 0x0 address\"\r\n        );\r\n\r\n        ITokensFarm tokensFarm = ITokensFarm(farmAddress);\r\n        tokensFarm.withdrawTokensIfStuck(_erc20, _amount, _beneficiary);\r\n    }\r\n\r\n    /**\r\n     * @notice function is setting address of deployed\r\n     * tokens farm contract\r\n     *\r\n     * @param  _farmImplementation - address of new tokens farm contract\r\n     */\r\n    function setTokensFarmImplementation(\r\n        address _farmImplementation\r\n    )\r\n        external\r\n        onlyTokensFarmCongress\r\n    {\r\n        require(\r\n            _farmImplementation != address(0),\r\n            \"farmImplementation can not be 0x0 address\"\r\n        );\r\n\r\n        farmImplementation = _farmImplementation;\r\n        emit TokensFarmImplementationSet(farmImplementation);\r\n    }\r\n\r\n    /**\r\n     * @notice function is setting new address of fee collector\r\n     *\r\n     * @param  _feeCollector - address of new fee collector\r\n     */\r\n    function setFeeCollector(\r\n        address payable _feeCollector\r\n    )\r\n        external\r\n        onlyTokensFarmCongress\r\n    {\r\n        require(\r\n            _feeCollector != address(0),\r\n            \"Fee Collector can not be 0x0 address\"\r\n        );\r\n\r\n        feeCollector = _feeCollector;\r\n        emit FeeCollectorSet(feeCollector);\r\n    }\r\n\r\n    /**\r\n     * @notice function is setting new address of fee collector\r\n     * on active farm\r\n     *\r\n     * @param  farmAddress - address of farm\r\n     */\r\n    function setCurrentFeeCollectorOnSpecificFarm(\r\n        address farmAddress\r\n    )\r\n        external\r\n        onlyTokensFarmCongress\r\n    {\r\n        require(\r\n            farmAddress != address(0x0),\r\n            \"Farm address can not be 0x0 address\"\r\n        );\r\n\r\n        ITokensFarm tokensFarm = ITokensFarm(farmAddress);\r\n        tokensFarm.setFeeCollector(feeCollector);\r\n    }\r\n\r\n    /**\r\n     * @notice function is setting variable minTimeToStake in tokens farm\r\n     *\r\n     * @param farmAddress - function will operate on farm with this address\r\n     * @param _minTimeToStake - value of variable that needs to be set\r\n     */\r\n    function setMinTimeToStakeOnSpecificFarm(\r\n        address farmAddress,\r\n        uint256 _minTimeToStake\r\n    )\r\n        external\r\n        onlyMaintainer\r\n    {\r\n        require(\r\n            farmAddress != address(0x0),\r\n            \"Farm's address can't be 0x0 address\"\r\n        );\r\n        require(_minTimeToStake >= 0, \"Minimal time can't be under 0\");\r\n\r\n\r\n        ITokensFarm tokensFarm = ITokensFarm(farmAddress);\r\n        tokensFarm.setMinTimeToStake(_minTimeToStake);\r\n    }\r\n\r\n    /**\r\n     * @notice function is setting state if isEarlyWithdrawAllowed in tokens farm\r\n     *\r\n     * @param farmAddress - function will operate on farm with this address\r\n     * @param _isEarlyWithdrawAllowed - state of variable that needs to be set\r\n     */\r\n    function setIsEarlyWithdrawAllowedOnSpecificFarm(\r\n        address farmAddress,\r\n        bool _isEarlyWithdrawAllowed\r\n    )\r\n        external\r\n        onlyMaintainer\r\n    {\r\n        require(\r\n            farmAddress != address(0x0),\r\n            \"Farm's address can't be 0x0 address\"\r\n        );\r\n\r\n        ITokensFarm tokensFarm = ITokensFarm(farmAddress);\r\n        tokensFarm.setIsEarlyWithdrawAllowed(_isEarlyWithdrawAllowed);\r\n    }\r\n\r\n    /**\r\n     * @notice function is setting variable stakeFeePercent in tokens farm\r\n     *\r\n     * @param farmAddress - function will operate on farm with this address\r\n     * @param _stakeFeePercent - value of variable that needs to be set\r\n     */\r\n    function setStakeFeePercentOnSpecificFarm(\r\n        address farmAddress,\r\n        uint256 _stakeFeePercent\r\n    )\r\n        external\r\n        onlyMaintainer\r\n    {\r\n        require(\r\n            farmAddress != address(0x0),\r\n            \"Farm's address can't be 0x0 address\"\r\n        );\r\n        require(\r\n            _stakeFeePercent > 0 && _stakeFeePercent < 100,\r\n            \"Stake fee percent must be between 0 and 100\"\r\n        );\r\n\r\n        ITokensFarm tokensFarm = ITokensFarm(farmAddress);\r\n        tokensFarm.setStakeFeePercent(_stakeFeePercent);\r\n    }\r\n\r\n    /**\r\n     * @notice function is setting variable rewardFeePercent in tokens farm\r\n     *\r\n     * @param farmAddress - function will operate on farm with this address\r\n     * @param _rewardFeePercent - value of variable that needs to be set\r\n     */\r\n    function setRewardFeePercentOnSpecificFarm(\r\n        address farmAddress,\r\n        uint256 _rewardFeePercent\r\n    )\r\n        external\r\n        onlyMaintainer\r\n    {\r\n        require(\r\n            farmAddress != address(0x0),\r\n            \"Farm's address can't be 0x0 address\"\r\n        );\r\n        require(\r\n            _rewardFeePercent > 0 && _rewardFeePercent < 100,\r\n            \"Reward fee percent must be between 0 and 100\"\r\n        );\r\n\r\n        ITokensFarm tokensFarm = ITokensFarm(farmAddress);\r\n        tokensFarm.setRewardFeePercent(_rewardFeePercent);\r\n    }\r\n\r\n    /**\r\n     * @notice function is setting variable flatFeeAmount in tokens farm\r\n     *\r\n     * @param farmAddress - function will operate on farm with this address\r\n     * @param _flatFeeAmount - value of variable that needs to be set\r\n     */\r\n    function setFlatFeeAmountOnSpecificFarm(\r\n        address farmAddress,\r\n        uint256 _flatFeeAmount\r\n    )\r\n        external\r\n        onlyMaintainer\r\n    {\r\n        require(\r\n            farmAddress != address(0x0),\r\n            \"Farm's address can't be 0x0 address\"\r\n        );\r\n        require(_flatFeeAmount >= 0, \"Flat fee can't be under 0\");\r\n\r\n        ITokensFarm tokensFarm = ITokensFarm(farmAddress);\r\n        tokensFarm.setFlatFeeAmount(_flatFeeAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice function is setting variable isFlatFeeAllowed in tokens farm\r\n     *\r\n     * @param farmAddress - function will operate on farm with this address\r\n     * @param _isFlatFeeAllowed - state of variable that needs to be set\r\n     */\r\n    function setIsFlatFeeAllowedOnSpecificFarm(\r\n        address farmAddress,\r\n        bool _isFlatFeeAllowed\r\n    )\r\n        external\r\n        onlyMaintainer\r\n    {\r\n        require(\r\n            farmAddress != address(0x0),\r\n            \"Farm's address can't be 0x0 address\"\r\n        );\r\n\r\n        ITokensFarm tokensFarm = ITokensFarm(farmAddress);\r\n        tokensFarm.setIsFlatFeeAllowed(_isFlatFeeAllowed);\r\n    }\r\n\r\n    /**\r\n     * @notice function returns address of last deployed farm\r\n     *\r\n     * @dev can be used on BE as additional checksum next to event emitted in tx\r\n     *\r\n     * @return address of last deployed farm\r\n     */\r\n    function getLastDeployedFarm()\r\n        external\r\n        view\r\n        returns (address)\r\n    {\r\n        if (deployedTokensFarms.length == 0) {\r\n            // Means no farms deployed yet.\r\n            return address(0);\r\n        }\r\n\r\n        // Deployed last deployed farm.\r\n        return deployedTokensFarms[deployedTokensFarms.length - 1];\r\n    }\r\n\r\n    /**\r\n     * @notice function returns array,\r\n     * of deployed farms(from start to end)\r\n     *\r\n     * @param start - beginning index of array\r\n     * @param end - ending index of array\r\n     *\r\n     * @return array made of address of deployed tokens farm\r\n     */\r\n    function getDeployedTokensFarm(\r\n        uint256 start,\r\n        uint256 end\r\n    )\r\n        external\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        require(start < end, \"Start should be less than end\");\r\n        require(\r\n            start >= 0 && end <= deployedTokensFarms.length,\r\n            \"One of the index is out of range\"\r\n        );\r\n\r\n        address[] memory tokensFarms = new address[](end - start);\r\n        uint256 counter;\r\n\r\n        for (uint256 i = start; i < end; i++) {\r\n            tokensFarms[counter] = deployedTokensFarms[i];\r\n            counter++;\r\n        }\r\n\r\n        return tokensFarms;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"}],\"name\":\"DeployedFarm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farmImplementation\",\"type\":\"address\"}],\"name\":\"TokensFarmImplementationSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTimeToStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isEarlyWithdrawAllowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_penalty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenStaked\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_flatFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isFlatFeeAllowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_totalBudget\",\"type\":\"uint256\"}],\"name\":\"deployAndFundTokensFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployedTokensFarms\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundTheSpecificFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getDeployedTokensFarm\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastDeployedFarm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokensFarmCongress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_maintainersRegistry\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintainersRegistry\",\"outputs\":[{\"internalType\":\"contract IMaintainersRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"}],\"name\":\"setCurrentFeeCollectorOnSpecificFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_flatFeeAmount\",\"type\":\"uint256\"}],\"name\":\"setFlatFeeAmountOnSpecificFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isEarlyWithdrawAllowed\",\"type\":\"bool\"}],\"name\":\"setIsEarlyWithdrawAllowedOnSpecificFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isFlatFeeAllowed\",\"type\":\"bool\"}],\"name\":\"setIsFlatFeeAllowedOnSpecificFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maintainersRegistry\",\"type\":\"address\"}],\"name\":\"setMaintainersRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTimeToStake\",\"type\":\"uint256\"}],\"name\":\"setMinTimeToStakeOnSpecificFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardFeePercent\",\"type\":\"uint256\"}],\"name\":\"setRewardFeePercentOnSpecificFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeFeePercent\",\"type\":\"uint256\"}],\"name\":\"setStakeFeePercentOnSpecificFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokensFarmCongress\",\"type\":\"address\"}],\"name\":\"setTokensFarmCongress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmImplementation\",\"type\":\"address\"}],\"name\":\"setTokensFarmImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensFarmCongress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"}],\"name\":\"withdrawCollectedFeesERCOnSpecificFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"}],\"name\":\"withdrawCollectedFeesETHOnSpecificFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawTokensIfStuckOnSpecificFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokensFarmFactory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://825052de76fe4e2b1401d4627f7d09d29c4469efea43ec9ef187e4b3ed318b49"}]}