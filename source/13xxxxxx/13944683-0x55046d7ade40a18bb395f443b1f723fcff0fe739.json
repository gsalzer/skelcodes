{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/vesting/Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Upgradeable as IERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {SafeERC20Upgradeable as SafeERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {MerkleProofUpgradeable as MerkleProof} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\\\";\\nimport \\\"../access/BumperAccessControl.sol\\\";\\nimport \\\"../staking/StakeRewards.sol\\\";\\n\\ncontract Vesting is PausableUpgradeable, BumperAccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    struct VestingInfo {\\n        uint256 start; // timestamp of start vesting\\n        uint256 end; // timestamp of end vesting\\n        uint256 cliff; // timestamp of cliff vesting\\n        uint256 vestingPerSec; // token release rate\\n        uint256 totalAmount; // total vested amount in current schedule\\n        uint256 onStartAmount; // amount is available immediately after start\\n        uint256 previousAmount; // amount from previous shedule\\n        uint256 claimedV1;  // claimed amount from first version vesting\\n    }\\n\\n    address public tokenBUMP;\\n    bytes32 public merkleRoot;\\n\\n    // Deprecated. This is a packed array of booleans.\\n    mapping(uint256 => uint256) private claimedBitMap;\\n\\n    // Deprecated. Pause list of investors\\n    mapping(address => bool) private investorPause;\\n\\n    // Total claimed for recipient\\n    mapping(address => uint256) public recipientClaimed;\\n\\n    address public staking;\\n    \\n    // This event is triggered whenever a call to #claim succeeds.\\n    // The index field is used for the staking amount\\n    event Claimed(uint256 index, address indexed account, uint256 amount, uint256 timestamp);\\n\\n    modifier verifyProofs(\\n        address account, \\n        VestingInfo memory vestingInfo,\\n        bytes32[] memory merkleProof\\n    ) { \\n        bytes32 node = keccak256(\\n            abi.encodePacked(\\n                account,\\n                vestingInfo.start,\\n                vestingInfo.end,\\n                vestingInfo.cliff,\\n                vestingInfo.vestingPerSec,\\n                vestingInfo.totalAmount,\\n                vestingInfo.onStartAmount,\\n                vestingInfo.previousAmount,\\n                vestingInfo.claimedV1\\n                )\\n        );\\n        require(\\n            MerkleProof.verify(merkleProof, merkleRoot, node),\\n            \\\"Invalid proof\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    ///@notice Will initialize state variables of this contract\\n    ///@param _whitelistAddresses Array of white list addresses\\n    function initialize(\\n        address _token,\\n        bytes32 _merkleRoot,\\n        address[] calldata _whitelistAddresses,\\n        address _staking\\n    ) \\n        public \\n        initializer \\n    {\\n        __Pausable_init();\\n        _BumperAccessControl_init(_whitelistAddresses);\\n        // token should NOT be 0 address\\n        require(_token != address(0), \\\"address(0)\\\");\\n        tokenBUMP = _token;\\n        merkleRoot = _merkleRoot;\\n        if(_staking != address(0)) {\\n            staking = _staking;\\n            IERC20(tokenBUMP).safeApprove(staking, type(uint256).max);\\n        }\\n        // contract is paused by default\\n        _pause();\\n    }\\n\\n    /// @notice Claim amount of tokens.\\n    /// @dev Can only be invoked if the contract is NOT paused.\\n    /// @param account Investor address to which funds will be transferred\\n    /// @param vestingInfo Vesting schedule info\\n    /// @param merkleProof Proof of data accuracy\\n    function claim(\\n        address account, \\n        VestingInfo memory vestingInfo,\\n        bytes32[] memory merkleProof\\n    )\\n        external \\n        whenNotPaused\\n        verifyProofs(account, vestingInfo, merkleProof)\\n    {   \\n        _restoreClaimedV1(account, vestingInfo);\\n\\n        uint256 amount = getClaimableAmountFor(account, vestingInfo);\\n\\n        require(\\n            amount > 0,\\n            \\\"Nothing to claim\\\"\\n        );\\n\\n        recipientClaimed[account] +=  amount;\\n\\n        IERC20(tokenBUMP).safeTransfer(account, amount);\\n        emit Claimed(0, account, amount, block.timestamp);\\n    }\\n\\n    /// @notice Stake vested tokens.\\n    /// @dev Can only be invoked if the contract is NOT paused.\\n    /// @dev If claimAmount equal stakingAmount then all amount will be staked.\\n    /// @dev If claimAmount is bigger stakingAmount then stakingAmount will be staked,\\n    /// @dev difference will be transfer to account.\\n    /// @param account Investor address\\n    /// @param vestingInfo Vesting schedule info\\n    /// @param stakingOption Staking option\\n    /// @param autorenew - auto-renewal staking when its finished\\n    /// @param claimAmount - amount to be claimed\\n    /// @param stakingAmount - amount to be staked\\n    /// @param merkleProof Proof of data accuracy\\n    function stakeVestedTokens(\\n        address account,\\n        VestingInfo memory vestingInfo,\\n        uint16 stakingOption,\\n        bool autorenew,\\n        uint256 claimAmount,\\n        uint256 stakingAmount,\\n        bytes32[] memory merkleProof\\n    )\\n        external\\n        whenNotPaused\\n        verifyProofs(account, vestingInfo, merkleProof)\\n    {\\n        _restoreClaimedV1(account, vestingInfo);\\n\\n        uint256 amount = getClaimableAmountFor(account, vestingInfo);\\n\\n        require(\\n            amount > 0,\\n            \\\"Nothing to claim\\\"\\n        );\\n        \\n        require(\\n            amount >= claimAmount,\\n            \\\"Wrong claimAmount\\\"\\n        );\\n\\n        require(\\n            claimAmount >= stakingAmount,\\n            \\\"Wrong stakingAmount\\\"\\n        );\\n\\n        recipientClaimed[account] +=  claimAmount;\\n\\n        StakeRewards(staking).stakeFor(stakingAmount, stakingOption, account, autorenew);\\n\\n        if (claimAmount > stakingAmount) {\\n            IERC20(tokenBUMP).safeTransfer(account, claimAmount - stakingAmount);\\n        }\\n        \\n        emit Claimed(stakingAmount, account, claimAmount, block.timestamp);\\n    }\\n\\n    /// @notice Staking own and vested tokens with permit.\\n    /// @dev Can only be invoked if the contract is NOT paused.\\n    /// @param account Investor address\\n    /// @param vestingInfo Vesting schedule info\\n    /// @param stakingOption Staking option\\n    /// @param autorenew - auto-renewal staking when its finished\\n    /// @param ownAmount - own amount to be staked\\n    /// @param merkleProof Proof of data accuracy\\n    function stakeOwnAndVestedTokensWithPermit(\\n        address account,\\n        VestingInfo memory vestingInfo,\\n        uint16 stakingOption,\\n        bool autorenew,\\n        uint256 ownAmount,\\n        bytes32[] memory merkleProof,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n        whenNotPaused\\n        verifyProofs(account, vestingInfo, merkleProof)\\n    {\\n        IERC20Permit(tokenBUMP).permit(\\n            account,\\n            address(this),\\n            ownAmount,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        _stakeOwnedAndVestedTokens(account, vestingInfo, stakingOption, autorenew, ownAmount);\\n    }\\n\\n    /// @notice Staking own and vested tokens with approve.\\n    /// @dev Can only be invoked if the contract is NOT paused.\\n    /// @param account Investor address\\n    /// @param vestingInfo Vesting schedule info\\n    /// @param stakingOption Staking option\\n    /// @param autorenew - auto-renewal staking when its finished\\n    /// @param ownAmount - own amount to be staked\\n    /// @param merkleProof Proof of data accuracy\\n    function stakeOwnAndVestedTokensWithApprove(\\n        address account,\\n        VestingInfo memory vestingInfo,\\n        uint16 stakingOption,\\n        bool autorenew,\\n        uint256 ownAmount,\\n        bytes32[] memory merkleProof\\n    )\\n        external\\n        whenNotPaused\\n        verifyProofs(account, vestingInfo, merkleProof)\\n    {\\n        _stakeOwnedAndVestedTokens(account, vestingInfo, stakingOption, autorenew, ownAmount);\\n    }\\n\\n\\n    function _stakeOwnedAndVestedTokens(\\n        address account,\\n        VestingInfo memory vestingInfo,\\n        uint16 stakingOption,\\n        bool autorenew,\\n        uint256 ownAmount\\n    )\\n        internal\\n    {\\n        _restoreClaimedV1(account, vestingInfo);\\n\\n        uint256 amount = getClaimableAmountFor(account, vestingInfo);\\n\\n        require(\\n            amount > 0,\\n            \\\"Nothing to claim\\\"\\n        );\\n        \\n        recipientClaimed[account] +=  amount;\\n\\n        IERC20(tokenBUMP).safeTransferFrom(account, address(this), ownAmount);\\n\\n        StakeRewards(staking).stakeFor(ownAmount + amount, stakingOption, account, autorenew);\\n\\n        emit Claimed(ownAmount + amount, account, amount, block.timestamp);\\n    }\\n\\n    /// @notice Restores balances for investors of the first version of vesting.\\n    /// @param account Investor address to which funds will be transferred\\n    /// @param vestingInfo Vesting schedule info\\n    function _restoreClaimedV1(\\n        address account, \\n        VestingInfo memory vestingInfo\\n    ) \\n        internal \\n    { \\n        if (vestingInfo.claimedV1 > recipientClaimed[account]) {\\n            recipientClaimed[account] = vestingInfo.claimedV1;\\n        }\\n    }\\n\\n    /// @notice Get amount of tokens that can be claimed by a recipient at the current timestamp.\\n    /// @param account A non-terminated recipient address.\\n    /// @param vestingInfo Vesting schedule info\\n    /// @return Amount of tokens that can be claimed by a recipient at the current timestamp.\\n    function getClaimableAmountFor(\\n        address account, \\n        VestingInfo memory vestingInfo\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalClaimed = recipientClaimed[account];\\n        if (vestingInfo.claimedV1 > totalClaimed) {\\n            totalClaimed = vestingInfo.claimedV1;\\n        }\\n        \\n        uint256 locked = totalLockedOf(vestingInfo);\\n        \\n        if (vestingInfo.totalAmount + vestingInfo.previousAmount > locked + totalClaimed) {\\n            return vestingInfo.totalAmount + vestingInfo.previousAmount -\\n                (locked + totalClaimed);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice Get total locked tokens of a specific recipient.\\n    /// @param vestingInfo Vesting schedule info\\n    /// @return Total locked tokens of a specific recipient.\\n    function totalLockedOf(VestingInfo memory vestingInfo)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        // We know that vestingPerSec is constant for a recipient for entirety of their vesting period\\n        // lockedTokens = vestingPerSec*(endTime-(startTime+cliffDuration))\\n\\n        if (block.timestamp >= vestingInfo.end) {\\n            // If the period has passed nothing to block\\n            return 0;\\n        } else if (\\n            block.timestamp >= vestingInfo.start + vestingInfo.cliff\\n        ) {\\n            // If the period has not yet passed block diff, OnStartVesting not blocked\\n            return (vestingInfo.end - block.timestamp) * vestingInfo.vestingPerSec;\\n        } else {\\n            // Everything will be blocked\\n            return vestingInfo.totalAmount;\\n        }\\n    }\\n\\n    function setStakingContract(address _staking) \\n        external \\n        onlyGovernanceOrOwner\\n    {\\n        staking = _staking;\\n        IERC20(tokenBUMP).safeApprove(staking, type(uint256).max);\\n    }\\n\\n    /// @notice Transfer tokens from the contract to the address.\\n    /// @dev Only owner of the vesting escrow can invoke this function.\\n    function withdraw(\\n        address to,\\n        address token,\\n        uint256 amount\\n    ) \\n        external \\n        onlyGovernanceOrOwner \\n    {\\n        IERC20(token).safeTransfer(to, amount);\\n    }\\n\\n    /// @notice Set Merkle root\\n    /// @dev Only owner of the vesting escrow can invoke this function.\\n    function setMerkleRoot(bytes32 root) \\n        external \\n        onlyGovernanceOrOwner \\n    {\\n        merkleRoot = root;\\n    }\\n\\n    /// @notice Pause vesting contract\\n    /// @dev Only owner of the vesting escrow can invoke this function.\\n    function pause() \\n        external \\n        onlyGovernanceOrOwner \\n        whenNotPaused \\n    {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause vesting contract\\n    /// @dev Only owner of the vesting escrow can invoke this function.\\n    function unpause() \\n        external \\n        onlyGovernanceOrOwner \\n        whenPaused \\n    {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProofUpgradeable {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/BumperAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n///@title BumperAccessControl contract is used to restrict access of functions to onlyGovernance and onlyOwner.\\n///@notice This contains suitable modifiers to restrict access of functions to onlyGovernance and onlyOwner.\\ncontract BumperAccessControl is\\n    Initializable,\\n    ContextUpgradeable,\\n    OwnableUpgradeable\\n{\\n    ///@dev This stores if a particular address is considered as whitelist or not in form of mapping.\\n    mapping(address => bool) internal whitelist;\\n\\n    event AddressAddedToWhitelist(address newWhitelistAddress);\\n    event AddressRemovedFromWhitelist(address removedWhitelistAddress);\\n\\n    function _BumperAccessControl_init(address[] memory _whitelist)\\n        internal\\n        initializer\\n    {\\n        __Context_init_unchained();\\n        __Ownable_init();\\n        ///Setting white list addresses as true\\n        for (uint256 i = 0; i < _whitelist.length; i++) {\\n            whitelist[_whitelist[i]] = true;\\n        }\\n    }\\n\\n    modifier onlyGovernance {\\n        require(whitelist[_msgSender()], \\\"!whitelist\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernanceOrOwner {\\n        require(\\n            whitelist[_msgSender()] || owner() == _msgSender(),\\n            \\\"!ownerOrWhitelist\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev It sets this address as true in whitelist address mapping\\n    ///@param addr Address that is set as whitelist address\\n    function addAddressToWhitelist(address addr) external onlyOwner {\\n        whitelist[addr] = true;\\n        emit AddressAddedToWhitelist(addr);\\n    }\\n\\n    ///@dev It sets passed address as false in whitelist address mapping\\n    ///@param addr Address that is removed as whitelist address\\n    function removeAddressFromWhitelist(address addr) external onlyOwner {\\n        whitelist[addr] = false;\\n        emit AddressRemovedFromWhitelist(addr);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/StakeRewards.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Upgradeable as IERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {SafeERC20Upgradeable as SafeERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {IERC20PermitUpgradeable as IERC20Permit} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"../access/BumperAccessControl.sol\\\";\\nimport \\\"../interfaces/IStakeChangedReceiver.sol\\\";\\n \\n/// @notice one user's stake information \\nstruct StakeInfo {\\n    uint amount;    // amount of tokens in stake\\n    uint lastCI;   \\n    uint64 start;\\n    uint16 option; // selected option\\n    bool autorenew; // if true user don't have to do anything for continue staking\\n    uint64 end;\\n    uint64 requestedAt;\\n    uint claimed;\\n}\\n\\n/// @notice period option(period in days and percentage assign with period )\\nstruct StakeOption {\\n    uint total;       // amounts of stakes in each option\\n    uint128 emission;          // calculated emission for each option\\n    uint index;             // cummulative index for each option\\n}\\n\\n/// @title Solo-staking token contract\\n/// @notice Staking token for one of pre-defined periods with different rewards and bonus percentage.\\ncontract StakeRewards is Initializable, BumperAccessControl {\\n\\n    using SafeERC20 for IERC20;\\n\\n    function multipliers() public pure returns (uint16[4] memory) \\n    { \\n        return [uint16(100), uint16(150), uint16(275), uint16(600) ]; \\n    }\\n\\n    function periods() public pure returns (uint32[4] memory) {\\n        return [uint32(0), uint32(30 days), uint32(60 days), uint32(90 days)];\\n    }\\n\\n    // store information about users stakes\\n    mapping(address => StakeInfo[]) public usersStake;\\n    // store information about stake options\\n    StakeOption[] public stakeOptions;\\n\\n    // total emission per second for all options (5000 BUMP / day)\\n    uint public constant totalEmissionPerSecond = uint(5000) * uint(10**18) / 24 / 60 / 60; \\n\\n    address public stakeToken; // address of token\\n    uint64 public unlockTimestamp; // timestamp where this contract will unlocked\\n    uint32 public constant withdrawWindow = 2 days; // withdraw window for autorenew option. \\n    uint32 public constant cooldownPeriod = 10 days;\\n    uint public lastIndexTimestamp;\\n\\n    // emitted when user successfuly staked tokens\\n    event Staked(address sender, uint256 amount, uint256 period, bool autorenew, uint timestamp, uint16 option);\\n\\n    // emitted when user successfuly claimed tokens\\n    event Claimed(address sender, uint256 amount, uint timestamp, uint16 option);\\n\\n    // emitted when user successfuly unstaked tokens\\n    event Withdrawn(address sender, uint256 amount, uint256 rewards, uint timestamp, uint16 option );\\n\\n    // emitted when user successfuly requested withdraw\\n    event WithdrawRequested(address indexed sender, uint256 amount, uint256 timestamp, uint16 option );\\n\\n    modifier unlocked() {\\n        require(unlockTimestamp < uint64(block.timestamp), \\\"locked\\\");\\n        _;\\n    }\\n\\n    ///@notice Will initialize state variables of this contract\\n    /// @param _whitelistAddresses addresses who can govern this account\\n    /// @param _stakeToken is staked token address\\n    /// @param _unlockTimestamp timestamp of end public sale period\\n    function initialize(\\n        address[] calldata _whitelistAddresses,\\n        address _stakeToken,\\n        uint64 _unlockTimestamp\\n    ) external initializer {\\n        _BumperAccessControl_init(_whitelistAddresses);\\n        stakeToken = _stakeToken;\\n        unlockTimestamp = _unlockTimestamp;\\n\\n        // create stake options (it can be change later by governance)\\n        stakeOptions.push(StakeOption(0, 0, 0)); //  0 days, 1\\n        stakeOptions.push(StakeOption(0, 0, 0)); // 30 days, 1.5\\n        stakeOptions.push(StakeOption(0, 0, 0)); // 60 days, 2.75\\n        stakeOptions.push(StakeOption(0, 0, 0)); // 90 days, 6\\n    }\\n\\n    /// -------------------  EXTERNAL, PUBLIC, VIEW, HELPERS  -------------------\\n    /// @notice return all user stakes\\n    function getUserStakes(address _account)\\n        public\\n        view\\n        returns (StakeInfo[] memory)\\n    {\\n        return usersStake[_account];\\n    }\\n\\n    /// @notice return stake options array\\n    function getStakeOptions() public view returns (StakeOption[] memory) {\\n        return stakeOptions;\\n    }\\n\\n    /// @notice returns how many tokens free\\n    function freeAmount() public view returns (uint256) { \\n        uint total;\\n        for (uint16 i = 0; i < stakeOptions.length; i++) {\\n            total += stakeOptions[i].total;\\n        } \\n        return\\n            IERC20(stakeToken).balanceOf(address(this)) - total;\\n    }\\n\\n    /// -------------------  EXTERNAL, PUBLIC, STATE CHANGE -------------------\\n    /// @notice stake tokens for give option\\n    /// @param amount - amount of tokens\\n    /// @param option - index of the option in stakeOptions mapping\\n    /// @param autorenew - auto-renewal staking when its finished\\n    function stake(uint256 amount, uint16 option, bool autorenew) external unlocked {\\n        require(amount > 0, \\\"!amount\\\");\\n        IERC20(stakeToken).safeTransferFrom(msg.sender, address(this), amount);\\n        _stakeFor(amount, option, autorenew, msg.sender );\\n    }\\n\\n    /// @notice special function for stake user token from whitelisted addresses (used for future integration with other contracts)\\n    /// @param amount - amount of tokens,\\n    /// @param option - index of the option in stakeOptions mapping\\n    /// @param account - address of user account\\n    /// @param autorenew - auto-renewal staking when its finished\\n    function stakeFor(\\n        uint256 amount,\\n        uint16 option,\\n        address account,\\n        bool autorenew\\n    ) external {\\n        require(amount > 0, \\\"!amount\\\");\\n        IERC20(stakeToken).safeTransferFrom(msg.sender, address(this), amount);        \\n        _stakeFor(amount, option, autorenew, account);\\n    }\\n\\n    /// @notice stake tokens using permit flow\\n    /// @param amount - amount of tokens,\\n    /// @param option - index of the option in stakeOptions mapping\\n    /// @param autorenew - auto-renewal staking when its finished\\n    /// @param deadline - deadline for permit    \\n    /// @param v - permit v\\n    /// @param r - permit r\\n    /// @param s - permit s\\n    function stakeWithPermit(\\n        uint256 amount,\\n        uint16 option,\\n        bool autorenew,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external unlocked {\\n        require(amount > 0, \\\"!amount\\\");\\n        IERC20Permit(stakeToken).permit(\\n            msg.sender,\\n            address(this),\\n            amount,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n        IERC20(stakeToken).safeTransferFrom(msg.sender, address(this), amount);\\n        _stakeFor(amount, option, autorenew, msg.sender);        \\n    }\\n\\n    /// @notice internal function for stake logic implementation (without transfer tokens)\\n    /// @param amount - amount of tokens,\\n    /// @param option - index of the option in stakeOptions mapping\\n    /// @param account - address of user account\\n    function _stakeFor(\\n        uint256 amount,\\n        uint16 option,\\n        bool autorenew,\\n        address account\\n    ) internal {\\n        require(option < stakeOptions.length, \\\"!option\\\");\\n\\n        _updateIndexes();\\n\\n        StakeOption storage opt = stakeOptions[option];\\n\\n        StakeInfo memory newStake = StakeInfo(\\n            amount,\\n            opt.index,\\n            uint64(block.timestamp),\\n            option,\\n            autorenew,\\n            autorenew ? 0 : uint64(block.timestamp + periods()[option]),\\n            0,\\n            0\\n        );\\n\\n        usersStake[account].push(newStake);\\n        opt.total += amount;\\n\\n        _updateEmissions();\\n\\n        emit Staked(account, amount, periods()[option]/1 days, autorenew, block.timestamp, option );\\n    }\\n\\n    /// @notice withdraw tokens\\n    /// @param stakeIndex - index in users stakes array\\n    function withdraw(uint16 stakeIndex) external unlocked {\\n        StakeInfo[] storage stakeInfoList = usersStake[msg.sender];       \\n        require(stakeInfoList.length > stakeIndex, \\\"!index\\\");\\n\\n        _updateIndexes();\\n\\n        StakeInfo memory s = stakeInfoList[stakeIndex];\\n        StakeOption storage opt = stakeOptions[s.option];\\n        (uint rewards, , bool withdrawable,) = calcRewards(s, opt);\\n        require(withdrawable, \\\"!withdraw\\\" );\\n\\n        // reduce amount of option\\n        opt.total -= s.amount;\\n\\n        // get amount to withdraw\\n        uint256 amountToWithdraw = s.amount + rewards;\\n\\n        // remove stake from the user stakes array\\n        stakeInfoList[stakeIndex] = stakeInfoList[stakeInfoList.length - 1];\\n        stakeInfoList.pop();\\n\\n        // transfer tokens to user\\n        IERC20(stakeToken).safeTransfer(msg.sender, amountToWithdraw);\\n\\n        _updateEmissions();\\n\\n        emit Withdrawn( msg.sender, s.amount, rewards, block.timestamp, stakeIndex );\\n    }\\n\\n    /// @notice set autorenew\\n    function switchAutorenew(uint16 stakeIndex) external unlocked {\\n        StakeInfo[] storage stakeInfoList = usersStake[msg.sender];\\n        require(stakeInfoList.length > stakeIndex, \\\"!index\\\");\\n        StakeInfo storage s = stakeInfoList[stakeIndex];\\n\\n        if (s.autorenew) {\\n            uint64 numOfperiods = uint64(block.timestamp - s.start) / periods()[s.option] + 1;\\n            s.end = s.start + numOfperiods * periods()[s.option];\\n            s.autorenew = false;     \\n        }\\n        else {\\n            require( block.timestamp < s.start + periods()[s.option], \\\"end\\\" );\\n            s.end = 0;\\n            s.autorenew = true;\\n        }\\n    }\\n\\n    /// @notice claim rewards for the stake\\n    function claimRewards(uint16 stakeIndex) external unlocked {\\n        StakeInfo[] storage stakeInfoList = usersStake[msg.sender];\\n        require(stakeInfoList.length > stakeIndex, \\\"!index\\\");\\n        StakeInfo storage s = stakeInfoList[stakeIndex];\\n\\n        StakeOption memory opt = stakeOptions[s.option];\\n        opt.index = calculateCumulativeIndex(s.option);\\n        (uint rewards, bool claimable, , ) = calcRewards(s, opt);\\n        require( claimable && rewards > 0, \\\"!rewards\\\" );\\n\\n        s.claimed += rewards;\\n\\n        IERC20(stakeToken).safeTransfer(msg.sender, rewards);\\n\\n        emit Claimed(msg.sender, rewards, block.timestamp, stakeIndex );\\n    }\\n    \\n    /// @notice calculate rewards and check if user can claim/withdraw tokens\\n    function calcRewards(StakeInfo memory s, StakeOption memory opt) public view returns (uint rewards, bool claimable, bool withdrawable, uint endOfLastPeriod) {\\n\\n        rewards = (opt.index - s.lastCI) * s.amount / 10**18; \\n\\n        if (periods()[s.option] == 0) { // flexible staking\\n            endOfLastPeriod = block.timestamp;\\n            claimable = rewards > 0;\\n            withdrawable = block.timestamp > (s.requestedAt + cooldownPeriod) && \\n                block.timestamp < (s.requestedAt + cooldownPeriod + withdrawWindow);\\n        }\\n        else if (s.autorenew) { \\n            uint numOfPeriods = (block.timestamp - s.start) / periods()[s.option];  \\n            endOfLastPeriod = s.start + (numOfPeriods * periods()[s.option]);\\n            withdrawable = block.timestamp > endOfLastPeriod && block.timestamp < endOfLastPeriod + withdrawWindow;\\n        }\\n        else { // no autorenew and option with lockup period\\n            endOfLastPeriod = s.end;\\n\\n            if (block.timestamp > s.end) {\\n                uint extraTime = block.timestamp - s.end;\\n                uint extraRewards = rewards * extraTime / (s.end - s.start + extraTime);\\n                rewards -= extraRewards;\\n            }\\n            withdrawable = block.timestamp > s.end;\\n        }\\n        if (rewards > s.claimed)\\n            rewards -= s.claimed;\\n        else\\n            rewards = 0;\\n            \\n        claimable = rewards > 0;\\n    }\\n    \\n    /// @notice calculate rewards by index of stake\\n    function calcRewardsByIndex(uint16 stakeIndex) public view returns (uint rewards, bool claimable, bool withdrawable, uint endOfLastPeriod) {\\n        StakeInfo memory s = usersStake[msg.sender][stakeIndex];\\n        StakeOption memory opt = stakeOptions[ s.option ];\\n        opt.index = calculateCumulativeIndex(s.option);\\n        (rewards,claimable,withdrawable,endOfLastPeriod) = calcRewards( s, opt );\\n    }\\n\\n    /// @notice Restake tokens of given stake to new stake with given option with or without rewards\\n    function restake(uint16 stakeIndex, uint16 option, bool withRewards, bool autorenew) external  unlocked\\n    {\\n        require(option < stakeOptions.length, \\\"!option\\\");\\n        require(stakeIndex < usersStake[msg.sender].length, \\\"!index\\\");\\n\\n        _updateIndexes();\\n\\n        StakeInfo memory s = usersStake[msg.sender][stakeIndex];\\n        StakeOption memory opt = stakeOptions[s.option];\\n        (uint rewards, , bool withdrawable, ) = calcRewards(s,opt);\\n        require(withdrawable, \\\"!withdraw\\\");\\n\\n        stakeOptions[s.option].total -= s.amount;\\n\\n        uint amount = s.amount + (withRewards ? rewards : 0);        \\n        StakeInfo memory newStake = StakeInfo(\\n            amount,\\n            stakeOptions[option].index,\\n            uint64(block.timestamp),\\n            option,\\n            autorenew,\\n            autorenew ? 0 : uint64( block.timestamp + periods()[s.option]),\\n            0,\\n            0\\n        );\\n\\n        usersStake[msg.sender][stakeIndex] = newStake;\\n\\n        stakeOptions[option].total += amount;\\n\\n        if (!withRewards){\\n            IERC20(stakeToken).safeTransfer(msg.sender, rewards);\\n        }\\n\\n        _updateEmissions();\\n\\n        emit Staked(msg.sender, amount, periods()[newStake.option], autorenew, block.timestamp, option );        \\n    }\\n\\n    /// @notice create a request to withdraw tokens from stake\\n    /// @dev must be call before withdraw function \\n    function requestWithdraw(uint16 stakeIndex) external unlocked { \\n        require(stakeIndex < usersStake[msg.sender].length, \\\"!index\\\");\\n        StakeInfo storage s = usersStake[msg.sender][stakeIndex];\\n        require(s.option == 0, \\\"!option\\\");\\n        require(block.timestamp > s.requestedAt + cooldownPeriod, \\\"requested\\\" );\\n\\n        s.requestedAt = uint64(block.timestamp);\\n\\n        emit WithdrawRequested(msg.sender, s.amount, block.timestamp, stakeIndex );\\n    }\\n\\n    /// @notice calculate total weithed amount of tokens in all options\\n    function totalWeigthedAmount() public view returns (uint weithedAmountSum) {\\n        for (uint16 i = 0; i < stakeOptions.length; i++) {\\n            weithedAmountSum += multipliers()[i] * stakeOptions[i].total;\\n        }\\n    }\\n\\n    /// @notice calculate total amount of tokens in all options\\n    function totalAmount() public view returns (uint amount, uint weithedAmountSum) {\\n        weithedAmountSum = totalWeigthedAmount();\\n        for (uint16 i = 0; i < stakeOptions.length; i++) {\\n            amount += stakeOptions[i].total;\\n        } \\n    }\\n    /// @notice calculate current emission rate per second by staked amount of tokens (it can be more than fact emission because of users can unstake with delay)\\n    function _updateIndexes() internal {\\n        for (uint16 i = 0; i < stakeOptions.length; i++) {\\n            stakeOptions[i].index = calculateCumulativeIndex(i);\\n        }\\n        lastIndexTimestamp = block.timestamp;\\n    }\\n\\n    /// @notice calculate current emission rate per second by staked amount of tokens (it can be more than fact emission because of users can unstake with delay)\\n    function _updateEmissions() internal {\\n        uint weigthedAmountSum = totalWeigthedAmount();\\n        uint16[4] memory m = multipliers();\\n        for (uint16 i = 0; i < stakeOptions.length; i++) {\\n            StakeOption storage option = stakeOptions[i];\\n            if (weigthedAmountSum > 0) {\\n                option.emission = uint64(totalEmissionPerSecond  * (option.total * m[i]) / weigthedAmountSum);\\n            }\\n            else \\n                option.emission = 0;\\n        }\\n    }\\n\\n    /// @notice Calculate cumulative index\\n    /// @param option option index\\n    function calculateCumulativeIndex(\\n        uint16 option\\n    ) public view returns (uint index) {\\n        StakeOption storage opt = stakeOptions[option];\\n        if (opt.total > 0) {\\n            index = opt.index + (block.timestamp - lastIndexTimestamp) * opt.emission * 10**18 /opt.total;\\n        } else {\\n            index = opt.index;\\n        }\\n    }\\n\\n    /// @notice update unlock timestamp when the contract will go live\\n    function updateUnlockTimestamp(uint64 _timestamp) external onlyGovernanceOrOwner {\\n        require(_timestamp > 0, \\\"!timestamp\\\");\\n        unlockTimestamp = _timestamp;\\n    }\\n\\n    /// @notice emergency withdraw tokens from the contract\\n    /// @param token - address of the token\\n    /// @param amount - amount to withdraw\\n    function withdrawExtraTokens(address token, uint256 amount)\\n        external\\n        onlyGovernanceOrOwner\\n    {\\n        if (token == stakeToken) {\\n            require(amount <= freeAmount(), \\\"!free\\\");\\n        }\\n        IERC20(token).safeTransfer(msg.sender, amount);\\n    }\\n\\n    /// @notice Pause staking contract\\n    /// @dev Only owner of the staking can invoke this function.\\n    function pause() \\n        external\\n        onlyGovernanceOrOwner \\n    {\\n        unlockTimestamp = type(uint64).max;\\n    }\\n\\n    /// @notice Unpause staking contract\\n    /// @dev Only owner of the staking can invoke this function.\\n    function unpause() \\n        external\\n        onlyGovernanceOrOwner \\n    {\\n        unlockTimestamp = 0;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakeChangedReceiver.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ninterface IStakeChangedReceiver {\\n  function notify(uint newEmissionPerBlock ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWhitelistAddress\",\"type\":\"address\"}],\"name\":\"AddressAddedToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"removedWhitelistAddress\",\"type\":\"address\"}],\"name\":\"AddressRemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onStartAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedV1\",\"type\":\"uint256\"}],\"internalType\":\"struct Vesting.VestingInfo\",\"name\":\"vestingInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onStartAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedV1\",\"type\":\"uint256\"}],\"internalType\":\"struct Vesting.VestingInfo\",\"name\":\"vestingInfo\",\"type\":\"tuple\"}],\"name\":\"getClaimableAmountFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_whitelistAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recipientClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onStartAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedV1\",\"type\":\"uint256\"}],\"internalType\":\"struct Vesting.VestingInfo\",\"name\":\"vestingInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"stakingOption\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"autorenew\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ownAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"stakeOwnAndVestedTokensWithApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onStartAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedV1\",\"type\":\"uint256\"}],\"internalType\":\"struct Vesting.VestingInfo\",\"name\":\"vestingInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"stakingOption\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"autorenew\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ownAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"stakeOwnAndVestedTokensWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onStartAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedV1\",\"type\":\"uint256\"}],\"internalType\":\"struct Vesting.VestingInfo\",\"name\":\"vestingInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"stakingOption\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"autorenew\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"stakeVestedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBUMP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onStartAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedV1\",\"type\":\"uint256\"}],\"internalType\":\"struct Vesting.VestingInfo\",\"name\":\"vestingInfo\",\"type\":\"tuple\"}],\"name\":\"totalLockedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Vesting","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}