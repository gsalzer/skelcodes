{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/var/www/price/votium/contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n\\n\\t  address private _owner = 0xe39b8617D571CEe5e75e1EC6B2bb40DdC8CF6Fa3; // Votium multi-sig address\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"/var/www/price/votium/contracts/SpaceAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Votium Space Auction\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\ninterface Swap {\\n  function SwapStake(uint256, uint256, uint8) external; // in, out, method\\n}\\ninterface Stash {\\n  function lockCRV(uint256) external;\\n}\\n\\n\\ncontract SpaceAuction is Ownable {\\n\\n  using SafeERC20 for IERC20;\\n\\n  /* ========== STATE VARIABLES ========== */\\n\\n  Swap public swapper;    // interface with sushi/curve swap contract\\n  address public stash;   // interface with merkle stash contract\\n\\n  struct Bids {\\n    address owner;        // bidder\\n    uint256 maxPerVote;   // max paid per 1 vote\\n    uint256 maxTotal;     // max paid total\\n    bool invalid;         // becomes invalid if at the end of the auction, the bidder's snapshot vote does not match their registered hash\\n  }\\n\\n  struct ProposalData {\\n    uint256 deadline;     // set to 2 hours before snapshot voting ends\\n    uint256 winningBid;   // not set until proposal status is at least 1. Is not final until 2\\n    uint256 power;        // number of votes cast on behalf of the winner. Is not final until 2\\n    uint8 status;\\n      // 0 = open auction (or no auction, if deadline = 0)\\n      // 1 = winner selected\\n      // 2 = winning hash confirmed to be valid\\n      // 3 = closed with vote confirmation\\n      // 4 = no winner/no vote confirmation\\n      // Any user can force status 4 if deadline is more than 6 hours old and team has not verified final vote count\\n    Bids[] bids; // array of 'Bids' struct found above\\n  }\\n\\n  struct Bidders {\\n    bytes32 msgHash;\\n    uint256 balance;\\n    uint256 bidId;\\n  }\\n\\n  mapping(bytes32 => mapping(address => Bidders)) public bidder;        // maps proposal id + address to Bidders\\n  mapping(bytes32 => ProposalData) public proposal;                     // maps proposal id to ProposalData\\n  bytes32[] public proposals;                                           // public registry of proposal ids\\n\\n  mapping(address => bool) public approvedTeam;                         // for team functions that do not require multi-sig security\\n\\n  address public platform = 0xe39b8617D571CEe5e75e1EC6B2bb40DdC8CF6Fa3; // Team multi-sig address\\n\\n  uint256 public slashFee = 300;                                        // 3% initial slash fee\\n  uint256 public constant DENOMINATOR = 10000;                          // denominates Ratio as % with 2 decimals (100 = 1%)\\n\\n  mapping(bytes32 => bool) public winningHashes;                        // tells vote proxy contract if a vote is valid\\n\\n  IERC20 public CRV = IERC20(0xD533a949740bb3306d119CC777fa900bA034cd52);\\n\\n  /* ========== CONSTRUCTOR ========== */\\n\\n  constructor(address _swapper, address _stash) {\\n    swapper = Swap(_swapper);        // sets swap contract address to interface\\n    stash = _stash;                  // sets merkle stash address without interface\\n    approvedTeam[msg.sender] = true; // adds deployer address to approved team functions\\n  }\\n\\n  /* ========== OWNER FUNCTIONS ========== */\\n\\n  // Update swapper contract\\n  function updateSwapper(address _swapper) public onlyOwner {\\n    swapper = Swap(_swapper);\\n  }\\n  // Update stash contract\\n  function updateStash(address _stash) public onlyOwner {\\n    stash = _stash;\\n  }\\n  // Lever for changing fees\\n  function setFees(uint256 _slash) public onlyOwner {\\n    require(_slash < 1000, \\\"!<1000\\\");  // Allowable range of 0 to 10% for slash\\n    slashFee = _slash;\\n  }\\n  // add or remove address from team functions\\n  function modifyTeam(address _member, bool _approval) public onlyOwner {\\n    approvedTeam[_member] = _approval;\\n  }\\n  // approve a vote msg hash in case snapshot is down during the timestamped window for the user submitted hash\\n  function emergencyValidation(bytes32 _hash) public onlyOwner {\\n    winningHashes[_hash] = true;\\n  }\\n  /* ========== APPROVED TEAM FUNCTIONS ======= */\\n\\n  // begin auction\\n  function initiateAuction(bytes32 _proposal, uint256 _deadline) public onlyTeam {\\n    require(proposal[_proposal].deadline == 0, \\\"exists\\\");\\n    proposal[_proposal].deadline = _deadline;\\n    proposals.push(_proposal);\\n  }\\n\\n  // select winner of auction\\n  function selectWinner(bytes32 _proposal, uint256 _votes) public onlyTeam {\\n    require(proposal[_proposal].deadline < block.timestamp, \\\"Auction has not ended\\\");\\n    require(proposal[_proposal].status < 2, \\\"!<2\\\");\\n    (uint256 w, bool hasWinner) = winnerIf(_proposal, _votes);\\n    require(hasWinner == true, \\\"No qualifying bids\\\");\\n    proposal[_proposal].winningBid = w;\\n    proposal[_proposal].power = _votes;\\n    proposal[_proposal].status = 1;\\n  }\\n\\n  // confirm a registered hash belongs to a valid vote to prevent arbitrary msgs from be signed on behalf of the vote contract\\n  function confirmWinner(bytes32 _proposal) public onlyTeam {\\n    require(proposal[_proposal].status == 1, \\\"!1\\\");\\n    bytes32 _hash = bidder[_proposal][proposal[_proposal].bids[proposal[_proposal].winningBid].owner].msgHash;\\n    winningHashes[_hash] = true;\\n    proposal[_proposal].status = 2;\\n  }\\n\\n  // used to slash bid trolls who register a msg hash that does not correspond with their snapshot vote\\n  // can also be used in an emergency either by the request of Curve team or Convex team, if a winning bidder\\n  // is beleived to be a malicious party acting against the best interest of any of the respective platforms\\n  // _slash should only 'true' if the bid is completely invalid\\n  function invalidateWinner(bytes32 _proposal, bool _slash) public onlyTeam {\\n    require(proposal[_proposal].status == 1, \\\"!1\\\"); // Can only invalidate if the winner has not been confirmed\\n    uint256 w = proposal[_proposal].winningBid;\\n    require(proposal[_proposal].bids[w].invalid == false, \\\"already invalidated\\\"); // prevents double slashing\\n    proposal[_proposal].bids[w].invalid = true;\\n    if(_slash == true) {\\n      uint256 slashed = bidder[_proposal][proposal[_proposal].bids[w].owner].balance*slashFee/DENOMINATOR; // calculate slashed amount\\n      bidder[_proposal][proposal[_proposal].bids[w].owner].balance -= slashed;  // remove slashed amount from user balance\\n      CRV.safeTransfer(platform, slashed); // send slashed amount to platform multi-sig\\n    }\\n  }\\n\\n  // finalize an auction with number of confirmed votes after proposal ends\\n  function finalize(bytes32 _proposal, uint256 _votes, uint256 _minOut, uint8 _method) public onlyTeam {\\n    require(proposal[_proposal].status == 2, \\\"!2\\\"); // Can only finalize if winner confirmed\\n    if(_votes == 0) {\\n      proposal[_proposal].status = 4; // finalize with no winner\\n    } else {\\n      // calculate paid total based on final number of votes received\\n      Bids memory currentBid = proposal[_proposal].bids[proposal[_proposal].winningBid];\\n      uint256 paidTotal = currentBid.maxTotal;\\n      uint256 paidPer = paidTotal/_votes;\\n      if(paidPer > currentBid.maxPerVote) {\\n        paidPer = currentBid.maxPerVote;\\n        paidTotal = paidPer*_votes;\\n      }\\n      bidder[_proposal][currentBid.owner].balance -= paidTotal; // removed paid total from winner balance\\n      if(_minOut == 0) {\\n        // call stash to lock->stake directly\\n        CRV.approve(stash, paidTotal);\\n        Stash(stash).lockCRV(paidTotal);\\n      } else {\\n        // call swapper to swap and stake on behalf of stash\\n        CRV.approve(address(swapper), paidTotal);\\n        swapper.SwapStake(paidTotal, _minOut, _method);\\n      }\\n      proposal[_proposal].status = 3; // set status to finalized with winner\\n    }\\n  }\\n\\n  /* ========== VIEWS ========== */\\n\\n  // length of proposals registery\\n  function proposalsLength() public view returns (uint256) {\\n    return proposals.length;\\n  }\\n\\n  // length of bids array in a proposal\\n  function bidsInProposal(bytes32 _proposal) public view returns (uint256) {\\n    return proposal[_proposal].bids.length;\\n  }\\n\\n  // view specific bid in a given proposal\\n  function viewBid(bytes32 _proposal, uint256 _bid) public view returns (Bids memory bid) {\\n    bid = proposal[_proposal].bids[_bid];\\n  }\\n\\n  // called by vote proxy contract as part of EIP1271 contract signing\\n  function isWinningSignature(bytes32 _hash, bytes memory _signature) public view returns (bool) {\\n    return winningHashes[_hash];\\n  }\\n\\n  // Calculates winner of a proposal based on reported voting power\\n  function winnerIf(bytes32 _proposal, uint256 _votes) public view returns (uint256 winningId, bool hasWinner) {\\n    require(_votes > 0, \\\"!>0\\\"); // cannot calculate winner of zero votes\\n    uint256 paidPer;\\n    uint256 highest;\\n    // cycle through all bids in proposal\\n    for(uint256 i=0;i<proposal[_proposal].bids.length;i++) {\\n      // ignore invalidated bids\\n      if(proposal[_proposal].bids[i].invalid == false) {\\n        paidPer = proposal[_proposal].bids[i].maxTotal/_votes; // assume max total is paid\\n        // if max payment exceeds max per vote allowance, revert to max per vote\\n        if(paidPer > proposal[_proposal].bids[i].maxPerVote) { paidPer = proposal[_proposal].bids[i].maxPerVote; }\\n        if(paidPer > highest) {\\n          winningId = i;\\n          highest = paidPer;\\n        }\\n      }\\n    }\\n    // verify a winner has been selected\\n    if(highest > 0) { hasWinner = true; }\\n  }\\n\\n  /* ========== PUBLIC FUNCTIONS ========== */\\n\\n  // if an auction is not finalized 30 hours after deadline, any user can force status 4 (no winner)\\n  function forceNoWinner(bytes32 _proposal) public {\\n    require(proposal[_proposal].deadline+30 hours < block.timestamp, \\\"<30hrs\\\");\\n    require(proposal[_proposal].status < 3, \\\"final\\\");\\n    proposal[_proposal].status = 4;\\n  }\\n\\n  // register a vote hash to attach to a proposal\\n  function registerHash(bytes32 _proposal, bytes32 _hash) public {\\n    require(proposal[_proposal].deadline > block.timestamp, \\\"expired\\\");\\n    bidder[_proposal][msg.sender].msgHash = _hash;\\n  }\\n\\n  // place bid\\n  function placeBid(bytes32 _proposal, uint256 _maxPerVote, uint256 _maxTotal) public {\\n    require(_maxTotal > 0, \\\"Cannot bid 0\\\");\\n    require(_maxPerVote > 0, \\\"Cannot bid 0\\\");\\n    require(proposal[_proposal].deadline > block.timestamp, \\\"expired\\\");\\n    require(bidder[_proposal][msg.sender].balance == 0, \\\"Already bid\\\");\\n    require(bidder[_proposal][msg.sender].msgHash != keccak256(\\\"\\\"), \\\"No hash\\\");\\n    // transfer funds to this contract\\n    CRV.safeTransferFrom(msg.sender, address(this), _maxTotal);\\n    // form bid entry\\n    Bids memory currentEntry;\\n    currentEntry.owner = msg.sender;\\n    currentEntry.maxPerVote = _maxPerVote;\\n    currentEntry.maxTotal = _maxTotal;\\n    proposal[_proposal].bids.push(currentEntry);\\n    bidder[_proposal][msg.sender].bidId = proposal[_proposal].bids.length-1;\\n    bidder[_proposal][msg.sender].balance = _maxTotal;\\n  }\\n\\n  // increase a current bid\\n  function increaseBid(bytes32 _proposal, uint256 bidId, uint256 _maxPerVote, uint256 _maxTotal) public {\\n    require(proposal[_proposal].deadline > block.timestamp, \\\"expired\\\");\\n    require(proposal[_proposal].bids[bidId].owner == msg.sender, \\\"!owner\\\");\\n    // if maxPerVote is greater than original, perform adjustment\\n    if(_maxPerVote > proposal[_proposal].bids[bidId].maxPerVote) {\\n      proposal[_proposal].bids[bidId].maxPerVote = _maxPerVote;\\n    }\\n    // if maxTotal is greater than original, perform adjustment\\n    if(_maxTotal > proposal[_proposal].bids[bidId].maxTotal) {\\n      uint256 increase = _maxTotal-proposal[_proposal].bids[bidId].maxTotal;\\n      CRV.safeTransferFrom(msg.sender, address(this), increase);\\n      proposal[_proposal].bids[bidId].maxTotal += increase;\\n      bidder[_proposal][msg.sender].balance += increase;\\n    }\\n  }\\n\\n  // roll a balance from a finalized auction into a bid for an active auction\\n  function rollBalance(bytes32 _proposalA, bytes32 _proposalB, uint256 _maxPerVote) public {\\n    require(proposal[_proposalB].deadline > block.timestamp, \\\"Invalid B\\\"); // Can only roll into active auction\\n    require(proposal[_proposalA].status > 2, \\\"Invalid A\\\");  // Can only roll out of finalized auction\\n    require(bidder[_proposalB][msg.sender].balance == 0, \\\"Already bid\\\"); // Address cannot have two bids\\n    require(bidder[_proposalB][msg.sender].msgHash != keccak256(\\\"\\\"), \\\"No hash\\\"); // Address must first register a vote hash\\n    require(_maxPerVote > 0, \\\"bid 0\\\"); // Cannot bid 0\\n    require(bidder[_proposalA][msg.sender].balance > 0, \\\"0 balance\\\"); // No balance to transfer\\n\\n    uint256 bal = bidder[_proposalA][msg.sender].balance; // store original auction balance\\n    bidder[_proposalA][msg.sender].balance = 0; // set original auction balance to 0\\n    // form bid entry\\n    Bids memory currentEntry;\\n    currentEntry.owner = msg.sender;\\n    currentEntry.maxPerVote = _maxPerVote;\\n    currentEntry.maxTotal = bal;\\n    proposal[_proposalB].bids.push(currentEntry);\\n    bidder[_proposalB][msg.sender].balance = bal; // set user balance of new auction\\n  }\\n\\n  // withdraw from finalized auction\\n  function withdraw(bytes32 _proposal) public {\\n    require(proposal[_proposal].status > 2, \\\"not final\\\");\\n    uint256 bal = bidder[_proposal][msg.sender].balance; // store balance\\n    if(bal > 0) {\\n      bidder[_proposal][msg.sender].balance = 0; // set balance to 0\\n      CRV.safeTransfer(msg.sender, bal); // send stored balance to user\\n    }\\n  }\\n\\n  /* ========== MODIFIERS ========== */\\n\\n  modifier onlyTeam() {\\n    require(approvedTeam[msg.sender] == true, \\\"Team only\\\");\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stash\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CRV\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bidder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposal\",\"type\":\"bytes32\"}],\"name\":\"bidsInProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposal\",\"type\":\"bytes32\"}],\"name\":\"confirmWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"emergencyValidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposal\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_votes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_method\",\"type\":\"uint8\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposal\",\"type\":\"bytes32\"}],\"name\":\"forceNoWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposal\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotal\",\"type\":\"uint256\"}],\"name\":\"increaseBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposal\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"initiateAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposal\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_slash\",\"type\":\"bool\"}],\"name\":\"invalidateWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isWinningSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approval\",\"type\":\"bool\"}],\"name\":\"modifyTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposal\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotal\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winningBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposal\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"registerHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalA\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_proposalB\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerVote\",\"type\":\"uint256\"}],\"name\":\"rollBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposal\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_votes\",\"type\":\"uint256\"}],\"name\":\"selectWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slash\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract Swap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stash\",\"type\":\"address\"}],\"name\":\"updateStash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"updateSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposal\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"}],\"name\":\"viewBid\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxPerVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotal\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"invalid\",\"type\":\"bool\"}],\"internalType\":\"struct SpaceAuction.Bids\",\"name\":\"bid\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposal\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_votes\",\"type\":\"uint256\"}],\"name\":\"winnerIf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"winningId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasWinner\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"winningHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposal\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SpaceAuction","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b58f3295b3db1a9bc0f909d591c6f0e6004884870000000000000000000000006f76c6c2fefa72bac17d2864e05b93abe7b1441c","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}