{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/oracles/UniswapTwapOracleDispatch.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IOracleDispatch.sol\\\";\\nimport \\\"../lib/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../lib/uniswap/IUniswapV2Factory.sol\\\";\\nimport \\\"../utils/RevestAccessControl.sol\\\";\\nimport \\\"../lib/FixedPoint.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * TWAPs are uninitialized when created. Then immediately queried for their first datapoint.\\n * On the second updateTwap() call, initialization becomes true.\\n */\\ncontract UniswapTwapOracleDispatch is IOracleDispatch, RevestAccessControl {\\n\\n    // Maps oracle id to twap oracle struct\\n    mapping(uint => TwapLock) public twaps;\\n\\n    // 30 seconds\\n    uint public constant MIN_UPDATE = 30;\\n\\n    address public uniswap;\\n\\n    struct TwapLock {\\n        // Should conform to IUniswapV2Pair interface\\n        address pairAddress;\\n        // Handle edge case where price could be 0 at first init\\n        bool initialized;\\n        uint timestampLatest;\\n        uint lastUpdateCumulativePrice;\\n        uint lastUpdateTwapPrice;\\n    }\\n    constructor(address provider, address uni) RevestAccessControl(provider) {\\n        uniswap = uni;\\n    }\\n\\n    //  Will return true if oracle already initialized, if oracle has successfully been initialized by this call,\\n    //  or if oracle does not need to be initialized\\n    function initializeOracle(address asset, address compareTo) external override returns (bool) {\\n        address pair = IUniswapV2Factory(uniswap).getPair(asset, compareTo);\\n        IUniswapV2Pair uni_pair = IUniswapV2Pair(pair);\\n        bool inverted = uni_pair.token1() == asset;\\n        ERC20 metaTest = ERC20(compareTo);\\n        {\\n            // Check that the contract supports the decimals() method as a smoke test for ERC20 validity\\n            metaTest.decimals();\\n        }\\n        if(pair == address(0)) {\\n            // If pair DNE, cannot create oracle\\n            return false;\\n        }\\n        TwapLock memory twap;\\n        twap.timestampLatest = block.timestamp;\\n        twap.lastUpdateCumulativePrice = inverted ?  IUniswapV2Pair(pair).price1CumulativeLast() : IUniswapV2Pair(pair).price0CumulativeLast();\\n        twap.pairAddress = pair;\\n        twaps[getOracleID(asset, compareTo)] = twap;\\n        return true;\\n    }\\n\\n    //  Attempts to update oracle and returns true if successful. Returns true if update unnecessary\\n    function updateOracle(address asset, address compareTo) external override returns (bool) {\\n        uint oracleId = getOracleID(asset, compareTo);\\n        TwapLock storage twap = twaps[oracleId];\\n\\n        if(block.timestamp <= twap.timestampLatest + MIN_UPDATE) {\\n            // Wait until safe update period has passed to update TWAP\\n            return false;\\n        }\\n        IUniswapV2Pair pair = IUniswapV2Pair(twap.pairAddress);\\n        bool inverted = pair.token1() == asset;\\n        uint cumLast = inverted ? pair.price1CumulativeLast() : pair.price0CumulativeLast();\\n\\n        uint lastTimeTwapUpdated = twap.timestampLatest;\\n        uint lastPrice = twap.lastUpdateCumulativePrice;\\n\\n        (, , uint lastTime) = pair.getReserves();\\n\\n        if(cumLast - lastPrice <= 0 || lastTime - lastTimeTwapUpdated <= 0) {\\n            // There has been no value on the Uniswap pair since the last update\\n            // Attempt to force the uni pair to sync\\n            pair.sync();\\n            // Reset variables\\n            cumLast = inverted ? pair.price1CumulativeLast() : pair.price0CumulativeLast();\\n            (, , lastTime) = pair.getReserves();\\n            if(cumLast - lastPrice <= 0 || lastTime - lastTimeTwapUpdated <= 0) {\\n                // If this has failed, we must return false\\n                return false;\\n            }\\n        }\\n\\n        if(!twap.initialized) {\\n            if(twap.timestampLatest == 0) {\\n                twap.timestampLatest = lastTime;\\n                twap.pairAddress = IUniswapV2Factory(uniswap).getPair(asset, compareTo);\\n            }\\n            else {\\n                twap.lastUpdateTwapPrice = getTwapPrice(compareTo, cumLast, lastTime, lastTimeTwapUpdated, lastPrice);\\n                twap.lastUpdateCumulativePrice = cumLast;\\n                twap.timestampLatest = lastTime;\\n                twap.initialized = true;\\n            }\\n        }\\n        else {\\n            twap.lastUpdateTwapPrice = getTwapPrice(compareTo, cumLast, lastTime, lastTimeTwapUpdated, lastPrice);\\n            twap.lastUpdateCumulativePrice = cumLast;\\n            twap.timestampLatest = lastTime;\\n        }\\n        return true;\\n    }\\n\\n    //  Return true because no poke is needed\\n    function pokeOracle(address asset, address compareTo) external pure override returns (bool) {\\n        return true;\\n    }\\n\\n    //  Gets the value of the asset\\n    function getValueOfAsset(\\n        address asset,\\n        address compareTo,\\n        bool risingEdge\\n    ) external view override returns (uint) {\\n        if(twaps[getOracleID(asset, compareTo)].initialized) {\\n            return twaps[getOracleID(asset, compareTo)].lastUpdateTwapPrice;\\n        } else {\\n            if(risingEdge) {\\n                return 0;\\n            } else {\\n                return 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n            }\\n        }\\n\\n    }\\n\\n    function oracleNeedsInitialization(address asset, address compareTo) external pure override returns (bool) {\\n        return true;\\n    }\\n\\n    //  Oracle will need updatess\\n    function oracleNeedsUpdates(address asset, address compareTo) external pure override returns (bool) {\\n        return true;\\n    }\\n\\n\\n    //  Oracle never needs poking\\n    function oracleNeedsPoking(address asset, address compareTo) external pure override returns (bool) {\\n        return false;\\n    }\\n\\n    //  Oracle never needs poking\\n    function getTimePeriodAfterPoke(address asset, address compareTo) external pure override returns (uint) {\\n        return 0;\\n    }\\n\\n\\n    //  Returns a direct reference to the address that the specific contract for this pair is registered at\\n    function getOracleForPair(address asset, address compareTo) public view override returns (address) {\\n        return twaps[getOracleID(asset, compareTo)].pairAddress;\\n    }\\n\\n    //  Returns a boolean if this oracle can provide data for the requested pair, used during FNFT creation\\n    function getPairHasOracle(address asset, address compareTo) external view override returns (bool) {\\n        return twaps[getOracleID(asset, compareTo)].pairAddress != address(0);\\n    }\\n\\n    function canOracleBeCreatedForRoute(address asset, address compareTo) external view override returns (bool) {\\n        return asset != compareTo && IUniswapV2Factory(uniswap).getPair(asset, compareTo) != address(0);\\n    }\\n\\n    function getInstantPrice(address asset, address compareTo) external view override returns (uint) {\\n        return getAssetPrice(asset, compareTo, address(0));\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    function getTwapPrice(address compareTo, uint cumulativeLast, uint timestamp, uint lastTime, uint lastCumPrice) internal view returns (uint) {\\n        ERC20 erc20 = ERC20(compareTo);\\n        uint decimals = 10 ** erc20.decimals();\\n        FixedPoint.uq144x112 memory priceAverage = FixedPoint.uq144x112(decimals * ((cumulativeLast - lastCumPrice) / (timestamp - lastTime)));\\n        uint twapPrice = FixedPoint.decode144(priceAverage);\\n        return twapPrice;\\n    }\\n\\n    function getAssetPrice(address asset, address compareTo, address pairAdd) internal view returns (uint) {\\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAdd == address(0) ? getOracleForPair(asset, compareTo) : pairAdd );\\n\\n        ERC20 erc20 = ERC20(compareTo);\\n        uint decimals = 10 ** erc20.decimals();\\n\\n        (uint reserve0, uint reserve1, ) = pair.getReserves();\\n\\n        if (pair.token0() == asset) {\\n            return decimals * reserve1 / reserve0;\\n        } else if (pair.token1() == asset) {\\n            return decimals * reserve0 / reserve1;\\n        } else {\\n            require(false, \\\"Asset not part of oracle\\\");\\n        }\\n    }\\n\\n    //  Will return 0 if Oracle DNE\\n    function getOracleID(address asset, address compareTo) internal pure returns (uint) {\\n        return uint(keccak256(abi.encodePacked(asset, compareTo)));\\n    }\\n\\n\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracleDispatch.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOracleDispatch {\\n\\n    // Attempts to update oracle and returns true if successful. Returns true if update unnecessary\\n    function updateOracle(address asset, address compareTo) external returns (bool);\\n\\n    // Will return true if oracle does not need to be poked or if poke was successful\\n    function pokeOracle(address asset, address compareTo) external returns (bool);\\n\\n    // Will return true if oracle already initialized, if oracle has successfully been initialized by this call,\\n    // or if oracle does not need to be initialized\\n    function initializeOracle(address asset, address compareTo) external returns (bool);\\n\\n    // Gets the value of the asset\\n    // Oracle = the oracle address in specific. Optional parameter\\n    // Inverted pair = whether or not this call represents an inversion of typical type (ERC20 underlying, USDC compareTo) to (USDC underlying, ERC20 compareTo)\\n    // Must take inverse of value in this case to get REAL value\\n    function getValueOfAsset(\\n        address asset,\\n        address compareTo,\\n        bool risingEdge\\n    )  external view returns (uint);\\n\\n    // Does this oracle need to be updated prior to our reading the price?\\n    // Return false if we are within desired time period\\n    // Or if this type of oracle does not require updates\\n    function oracleNeedsUpdates(address asset, address compareTo) external view returns (bool);\\n\\n    // Does this oracle need to be poked prior to update and withdrawal?\\n    function oracleNeedsPoking(address asset, address compareTo) external view returns (bool);\\n\\n    function oracleNeedsInitialization(address asset, address compareTo) external view returns (bool);\\n\\n    //Only ever called if oracle needs initialization\\n    function canOracleBeCreatedForRoute(address asset, address compareTo) external view returns (bool);\\n\\n    // How long to wait after poking the oracle before you can update it again and withdraw\\n    function getTimePeriodAfterPoke(address asset, address compareTo) external view returns (uint);\\n\\n    // Returns a direct reference to the address that the specific contract for this pair is registered at\\n    function getOracleForPair(address asset, address compareTo) external view returns (address);\\n\\n    // Returns a boolean if this oracle can provide data for the requested pair, used during FNFT creation\\n    function getPairHasOracle(address asset, address compareTo) external view returns (bool);\\n\\n    //Returns the instantaneous price of asset and the decimals for that price\\n    function getInstantPrice(address asset, address compareTo) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/uniswap/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint);\\n\\n    function price1CumulativeLast() external view returns (uint);\\n\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/uniswap/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/RevestAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IAddressRegistry.sol\\\";\\nimport \\\"../interfaces/ILockManager.sol\\\";\\nimport \\\"../interfaces/IRewardsHandler.sol\\\";\\nimport \\\"../interfaces/ITokenVault.sol\\\";\\nimport \\\"../interfaces/IRevestToken.sol\\\";\\nimport \\\"../interfaces/IFNFTHandler.sol\\\";\\nimport \\\"../lib/uniswap/IUniswapV2Factory.sol\\\";\\nimport \\\"../interfaces/IInterestHandler.sol\\\";\\n\\n\\ncontract RevestAccessControl is Ownable {\\n    IAddressRegistry internal addressesProvider;\\n    address addressProvider;\\n\\n    constructor(address provider) Ownable() {\\n        addressesProvider = IAddressRegistry(provider);\\n        addressProvider = provider;\\n    }\\n\\n    modifier onlyRevest() {\\n        require(_msgSender() != address(0), \\\"E004\\\");\\n        require(\\n                _msgSender() == addressesProvider.getLockManager() ||\\n                _msgSender() == addressesProvider.getRewardsHandler() ||\\n                _msgSender() == addressesProvider.getTokenVault() ||\\n                _msgSender() == addressesProvider.getRevest() ||\\n                _msgSender() == addressesProvider.getRevestToken(),\\n            \\\"E016\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRevestController() {\\n        require(_msgSender() != address(0), \\\"E004\\\");\\n        require(_msgSender() == addressesProvider.getRevest(), \\\"E017\\\");\\n        _;\\n    }\\n\\n    modifier onlyTokenVault() {\\n        require(_msgSender() != address(0), \\\"E004\\\");\\n        require(_msgSender() == addressesProvider.getTokenVault(), \\\"E017\\\");\\n        _;\\n    }\\n\\n    function setAddressRegistry(address registry) external onlyOwner {\\n        addressesProvider = IAddressRegistry(registry);\\n    }\\n\\n    function getAdmin() internal view returns (address) {\\n        return addressesProvider.getAdmin();\\n    }\\n\\n    function getRevest() internal view returns (IRevest) {\\n        return IRevest(addressesProvider.getRevest());\\n    }\\n\\n    function getRevestToken() internal view returns (IRevestToken) {\\n        return IRevestToken(addressesProvider.getRevestToken());\\n    }\\n\\n    function getLockManager() internal view returns (ILockManager) {\\n        return ILockManager(addressesProvider.getLockManager());\\n    }\\n\\n    function getTokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(addressesProvider.getTokenVault());\\n    }\\n\\n    function getUniswapV2() internal view returns (IUniswapV2Factory) {\\n        return IUniswapV2Factory(addressesProvider.getDEX(0));\\n    }\\n\\n    function getFNFTHandler() internal view returns (IFNFTHandler) {\\n        return IFNFTHandler(addressesProvider.getRevestFNFT());\\n    }\\n\\n    function getRewardsHandler() internal view returns (IRewardsHandler) {\\n        return IRewardsHandler(addressesProvider.getRewardsHandler());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/FixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\\n        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\\n        return uq112x112(self._x / uint224(x));\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\\n        uint z;\\n        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), \\\"FixedPoint: MULTIPLICATION_OVERFLOW\\\");\\n        return uq144x112(z);\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAddressRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Provider interface for Revest FNFTs\\n * @dev\\n *\\n */\\ninterface IAddressRegistry {\\n\\n    function initialize(\\n        address lock_manager_,\\n        address liquidity_,\\n        address revest_token_,\\n        address token_vault_,\\n        address revest_,\\n        address fnft_,\\n        address metadata_,\\n        address admin_,\\n        address rewards_\\n    ) external;\\n\\n    function getAdmin() external view returns (address);\\n\\n    function setAdmin(address admin) external;\\n\\n    function getLockManager() external view returns (address);\\n\\n    function setLockManager(address manager) external;\\n\\n    function getTokenVault() external view returns (address);\\n\\n    function setTokenVault(address vault) external;\\n\\n    function getRevestFNFT() external view returns (address);\\n\\n    function setRevestFNFT(address fnft) external;\\n\\n    function getMetadataHandler() external view returns (address);\\n\\n    function setMetadataHandler(address metadata) external;\\n\\n    function getRevest() external view returns (address);\\n\\n    function setRevest(address revest) external;\\n\\n    function getDEX(uint index) external view returns (address);\\n\\n    function setDex(address dex) external;\\n\\n    function getRevestToken() external view returns (address);\\n\\n    function setRevestToken(address token) external;\\n\\n    function getRewardsHandler() external view returns(address);\\n\\n    function setRewardsHandler(address esc) external;\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function getLPs() external view returns (address);\\n\\n    function setLPs(address liquidToken) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILockManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IRevest.sol\\\";\\n\\ninterface ILockManager {\\n\\n    function createLock(uint fnftId, IRevest.LockParam memory lock) external returns (uint);\\n\\n    function getLock(uint lockId) external view returns (IRevest.Lock memory);\\n\\n    function fnftIdToLockId(uint fnftId) external view returns (uint);\\n\\n    function fnftIdToLock(uint fnftId) external view returns (IRevest.Lock memory);\\n\\n    function pointFNFTToLock(uint fnftId, uint lockId) external;\\n\\n    function lockTypes(uint tokenId) external view returns (IRevest.LockType);\\n\\n    function unlockFNFT(uint fnftId, address sender) external returns (bool);\\n\\n    function getLockMaturity(uint fnftId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardsHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\ninterface IRewardsHandler {\\n\\n    struct UserBalance {\\n        uint allocPoint; // Allocation points\\n        uint lastMul;\\n    }\\n\\n    function receiveFee(address token, uint amount) external;\\n\\n    function updateLPShares(uint fnftId, uint newShares) external;\\n\\n    function updateBasicShares(uint fnftId, uint newShares) external;\\n\\n    function getAllocPoint(uint fnftId, address token, bool isBasic) external view returns (uint);\\n\\n    function claimRewards(uint fnftId, address caller) external returns (uint);\\n\\n    function setStakingContract(address stake) external;\\n\\n    function getRewards(uint fnftId, address token) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IRevest.sol\\\";\\n\\ninterface ITokenVault {\\n\\n    function createFNFT(\\n        uint fnftId,\\n        IRevest.FNFTConfig memory fnftConfig,\\n        uint quantity,\\n        address from\\n    ) external;\\n\\n    function withdrawToken(\\n        uint fnftId,\\n        uint quantity,\\n        address user\\n    ) external;\\n\\n    function depositToken(\\n        uint fnftId,\\n        uint amount,\\n        uint quantity\\n    ) external;\\n\\n    function cloneFNFTConfig(IRevest.FNFTConfig memory old) external returns (IRevest.FNFTConfig memory);\\n\\n    function mapFNFTToToken(\\n        uint fnftId,\\n        IRevest.FNFTConfig memory fnftConfig\\n    ) external;\\n\\n    function handleMultipleDeposits(\\n        uint fnftId,\\n        uint newFNFTId,\\n        uint amount\\n    ) external;\\n\\n    function splitFNFT(\\n        uint fnftId,\\n        uint[] memory newFNFTIds,\\n        uint[] memory proportions,\\n        uint quantity\\n    ) external;\\n\\n    function getFNFT(uint fnftId) external view returns (IRevest.FNFTConfig memory);\\n    function getFNFTCurrentValue(uint fnftId) external view returns (uint);\\n    function getNontransferable(uint fnftId) external view returns (bool);\\n    function getSplitsRemaining(uint fnftId) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRevestToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRevestToken is IERC20 {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFNFTHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\n\\ninterface IFNFTHandler  {\\n    function mint(address account, uint id, uint amount, bytes memory data) external;\\n\\n    function mintBatchRec(address[] memory recipients, uint[] memory quantities, uint id, uint newSupply, bytes memory data) external;\\n\\n    function mintBatch(address to, uint[] memory ids, uint[] memory amounts, bytes memory data) external;\\n\\n    function setURI(string memory newuri) external;\\n\\n    function burn(address account, uint id, uint amount) external;\\n\\n    function burnBatch(address account, uint[] memory ids, uint[] memory amounts) external;\\n\\n    function getBalance(address tokenHolder, uint id) external view returns (uint);\\n\\n    function getSupply(uint fnftId) external view returns (uint);\\n\\n    function getNextId() external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInterestHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IInterestHandler  {\\n\\n    function registerDeposit(uint fnftId) external;\\n\\n    function getPrincipal(uint fnftId) external view returns (uint);\\n\\n    function getInterest(uint fnftId) external view returns (uint);\\n\\n    function getAmountToWithdraw(uint fnftId) external view returns (uint);\\n\\n    function getUnderlyingToken(uint fnftId) external view returns (address);\\n\\n    function getUnderlyingValue(uint fnftId) external view returns (uint);\\n\\n    //These methods exist for external operations\\n    function getPrincipalDetail(uint historic, uint amount, address asset) external view returns (uint);\\n\\n    function getInterestDetail(uint historic, uint amount, address asset) external view returns (uint);\\n\\n    function getUnderlyingTokenDetail(address asset) external view returns (address);\\n\\n    function getInterestRate(address asset) external view returns (uint);\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRevest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\ninterface IRevest {\\n    event FNFTTimeLockMinted(\\n        address indexed asset,\\n        address indexed from,\\n        uint indexed fnftId,\\n        uint endTime,\\n        uint[] quantities,\\n        FNFTConfig fnftConfig\\n    );\\n\\n    event FNFTValueLockMinted(\\n        address indexed primaryAsset,\\n        address indexed from,\\n        uint indexed fnftId,\\n        address compareTo,\\n        address oracleDispatch,\\n        uint[] quantities,\\n        FNFTConfig fnftConfig\\n    );\\n\\n    event FNFTAddressLockMinted(\\n        address indexed asset,\\n        address indexed from,\\n        uint indexed fnftId,\\n        address trigger,\\n        uint[] quantities,\\n        FNFTConfig fnftConfig\\n    );\\n\\n    event FNFTWithdrawn(\\n        address indexed from,\\n        uint indexed fnftId,\\n        uint indexed quantity\\n    );\\n\\n    event FNFTSplit(\\n        address indexed from,\\n        uint[] indexed newFNFTId,\\n        uint[] indexed proportions,\\n        uint quantity\\n    );\\n\\n    event FNFTUnlocked(\\n        address indexed from,\\n        uint indexed fnftId\\n    );\\n\\n    event FNFTMaturityExtended(\\n        address indexed from,\\n        uint indexed fnftId,\\n        uint indexed newExtendedTime\\n    );\\n\\n    event FNFTAddionalDeposited(\\n        address indexed from,\\n        uint indexed newFNFTId,\\n        uint indexed quantity,\\n        uint amount\\n    );\\n\\n    struct FNFTConfig {\\n        address asset; // The token being stored\\n        address pipeToContract; // Indicates if FNFT will pipe to another contract\\n        uint depositAmount; // How many tokens\\n        uint depositMul; // Deposit multiplier\\n        uint split; // Number of splits remaining\\n        uint depositStopTime; //\\n        bool maturityExtension; // Maturity extensions remaining\\n        bool isMulti; //\\n        bool nontransferrable; // False by default (transferrable) //\\n    }\\n\\n    // Refers to the global balance for an ERC20, encompassing possibly many FNFTs\\n    struct TokenTracker {\\n        uint lastBalance;\\n        uint lastMul;\\n    }\\n\\n    enum LockType {\\n        DoesNotExist,\\n        TimeLock,\\n        ValueLock,\\n        AddressLock\\n    }\\n\\n    struct LockParam {\\n        address addressLock;\\n        uint timeLockExpiry;\\n        LockType lockType;\\n        ValueLock valueLock;\\n    }\\n\\n    struct Lock {\\n        address addressLock;\\n        LockType lockType;\\n        ValueLock valueLock;\\n        uint timeLockExpiry;\\n        uint creationTime;\\n        bool unlocked;\\n    }\\n\\n    struct ValueLock {\\n        address asset;\\n        address compareTo;\\n        address oracle;\\n        uint unlockValue;\\n        bool unlockRisingEdge;\\n    }\\n\\n    function mintTimeLock(\\n        uint endTime,\\n        address[] memory recipients,\\n        uint[] memory quantities,\\n        IRevest.FNFTConfig memory fnftConfig\\n    ) external payable returns (uint);\\n\\n    function mintValueLock(\\n        address primaryAsset,\\n        address compareTo,\\n        uint unlockValue,\\n        bool unlockRisingEdge,\\n        address oracleDispatch,\\n        address[] memory recipients,\\n        uint[] memory quantities,\\n        IRevest.FNFTConfig memory fnftConfig\\n    ) external payable returns (uint);\\n\\n    function mintAddressLock(\\n        address trigger,\\n        bytes memory arguments,\\n        address[] memory recipients,\\n        uint[] memory quantities,\\n        IRevest.FNFTConfig memory fnftConfig\\n    ) external payable returns (uint);\\n\\n    function withdrawFNFT(uint tokenUID, uint quantity) external;\\n\\n    function unlockFNFT(uint tokenUID) external;\\n\\n    function splitFNFT(\\n        uint fnftId,\\n        uint[] memory proportions,\\n        uint quantity\\n    ) external returns (uint[] memory newFNFTIds);\\n\\n    function depositAdditionalToFNFT(\\n        uint fnftId,\\n        uint amount,\\n        uint quantity\\n    ) external returns (uint);\\n\\n    function setFlatWeiFee(uint wethFee) external;\\n\\n    function setERC20Fee(uint erc20) external;\\n\\n    function getFlatWeiFee() external returns (uint);\\n\\n    function getERC20Fee() external returns (uint);\\n\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uni\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_UPDATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"compareTo\",\"type\":\"address\"}],\"name\":\"canOracleBeCreatedForRoute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"compareTo\",\"type\":\"address\"}],\"name\":\"getInstantPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"compareTo\",\"type\":\"address\"}],\"name\":\"getOracleForPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"compareTo\",\"type\":\"address\"}],\"name\":\"getPairHasOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"compareTo\",\"type\":\"address\"}],\"name\":\"getTimePeriodAfterPoke\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"compareTo\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"risingEdge\",\"type\":\"bool\"}],\"name\":\"getValueOfAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"compareTo\",\"type\":\"address\"}],\"name\":\"initializeOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"compareTo\",\"type\":\"address\"}],\"name\":\"oracleNeedsInitialization\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"compareTo\",\"type\":\"address\"}],\"name\":\"oracleNeedsPoking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"compareTo\",\"type\":\"address\"}],\"name\":\"oracleNeedsUpdates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"compareTo\",\"type\":\"address\"}],\"name\":\"pokeOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"setAddressRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"twaps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestampLatest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateCumulativePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTwapPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"compareTo\",\"type\":\"address\"}],\"name\":\"updateOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UniswapTwapOracleDispatch","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"000000000000000000000000d721a90dd7e010c8c5e022cc0100c55ac78e0fc40000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}