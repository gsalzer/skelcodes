{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Counters.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev ERC721 token with storage based token URI management.\r\n */\r\nabstract contract ERC721URIStorage is ERC721 {\r\n    using Strings for uint256;\r\n\r\n    // Optional mapping for token URIs\r\n    mapping(uint256 => string) private _tokenURIs;\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\r\n\r\n        string memory _tokenURI = _tokenURIs[tokenId];\r\n        string memory base = _baseURI();\r\n\r\n        // If there is no base URI, return the token URI.\r\n        if (bytes(base).length == 0) {\r\n            return _tokenURI;\r\n        }\r\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\r\n        if (bytes(_tokenURI).length > 0) {\r\n            return string(abi.encodePacked(base, _tokenURI));\r\n        }\r\n\r\n        return super.tokenURI(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\r\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\r\n        _tokenURIs[tokenId] = _tokenURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual override {\r\n        super._burn(tokenId);\r\n\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n// File: contracts/PartyBones.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PartyBones is ERC721URIStorage, ERC721Enumerable, Ownable, Pausable {\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter public _mintedTokens;\r\n    uint internal constant MAX_Bones = 10300;\r\n    uint internal ticket_price = 60000000000000000; // 0.06 ETH\r\n    uint private prime_seed;\r\n    \r\n    // No more than 10,300 bones to be sold\r\n    modifier saleIsOpen{\r\n        require(_mintedTokens.current() < MAX_Bones, \"Sale end\");\r\n        _;\r\n    }\r\n    \r\n    // Modify sale price\r\n    function change_ticket_price(uint new_price) public onlyOwner returns(uint)\r\n    {\r\n        ticket_price = new_price;\r\n        return(new_price);\r\n    }\r\n    \r\n    // View price\r\n    function price() public view returns (uint256) {\r\n        return ticket_price; \r\n    }\r\n    \r\n    string private baseURI = \"\";\r\n    \r\n    constructor () payable ERC721(\"PB\", \"Party Bones\") {}\r\n    \r\n    mapping (uint256 => string) boneNames;\r\n    \r\n    mapping(address => bool) public authorised_contracts;\r\n    \r\n    // Contracts for Party Bone Merging authorised and removed here\r\n    function addAuthorisedAddress(address _address) public onlyOwner {\r\n        authorised_contracts[_address] = true;\r\n    }\r\n    \r\n    function removeAuthorisedAddress(address _address) public onlyOwner {\r\n        authorised_contracts[_address] = false;\r\n    }\r\n    \r\n    // Modifier to only alow merging contracts to interact with this function\r\n    modifier onlyAuthorised()\r\n    {\r\n        require(authorised_contracts[msg.sender]);\r\n        _;\r\n    }\r\n    \r\n    // set seed number for non-serialised minting\r\n    function set_seed_Prime(uint prime_number) onlyOwner public\r\n    {\r\n        prime_seed = prime_number;\r\n    }\r\n\r\n    // returns current token minting count\r\n    function check_mintedCount() view public returns (uint256)\r\n    {\r\n        return _mintedTokens.current();\r\n    }\r\n    \r\n    // modify the base URI \r\n    function change_base_URI(string memory new_base_URI)\r\n        onlyOwner\r\n        public\r\n    {\r\n        baseURI = new_base_URI;\r\n    }\r\n    \r\n    // check token's URI\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override(ERC721, ERC721URIStorage)\r\n        returns (string memory)\r\n    {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n    \r\n    // writing bone names as metadata associated with token\r\n    function set_tokenID_description(uint256 tokenId, string memory nameofbone)\r\n        onlyOwner\r\n        public\r\n    {\r\n        boneNames[tokenId] = nameofbone;\r\n    }\r\n    \r\n    function _baseURI() internal view override returns (string memory) {\r\n        return baseURI;\r\n    }\r\n    \r\n    // pause minting and merging\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n    \r\n    // unpause minting and merging \r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n    \r\n    // check name of a bone\r\n    function check_bone_ID_name(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        string memory nameofbone = boneNames[tokenId];\r\n        return nameofbone;\r\n    }\r\n    \r\n    \r\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\r\n        super._burn(tokenId);\r\n    }\r\n    \r\n    // burn Party Bone (I wouldn't!)\r\n    function burn(uint256 tokenid)\r\n        public\r\n        returns (uint256)\r\n    {\r\n        require(msg.sender == ownerOf(tokenid), \"This wallet does not own the tokenID!\");\r\n        _burn(tokenid);\r\n        return tokenid;\r\n    }\r\n    \r\n    // admin only function for burning in case something messes up\r\n    function burn_admin(uint256 tokenid)\r\n        public\r\n        onlyOwner\r\n        returns (uint256)\r\n    {\r\n        _burn(tokenid);\r\n        return tokenid;\r\n    }\r\n    \r\n    // bones are burned when merged for a limb\r\n    function burn_for_limb(uint256 tokenid)\r\n        public\r\n        onlyAuthorised\r\n        whenNotPaused\r\n        returns (uint256)\r\n    {\r\n        _burn(tokenid);\r\n        return tokenid;\r\n    }\r\n    \r\n    // primary sale function for the admin - for airdrops mainly and creator team\r\n    function mint_primary_admin(address address_, uint256 numberOfTokens)\r\n        public\r\n        onlyOwner\r\n        returns (uint256)\r\n    {\r\n        require(_mintedTokens.current() + numberOfTokens <= MAX_Bones, \"This exceeds the maximum number of Party Bones on sale!\");\r\n        for(uint256 i = 0; i < numberOfTokens; i++) {\r\n            uint256 newItemId  = (((prime_seed*_mintedTokens.current()^2))) % MAX_Bones + 1;\r\n            _mintedTokens.increment();\r\n            _mint(address_, newItemId);\r\n        }\r\n        \r\n        return _mintedTokens.current();\r\n    }\r\n    \r\n    // mint function for admin - in case something goes wrong \r\n    \r\n    function mint_admin(address address_, uint256[] memory tokenIds)\r\n        public\r\n        onlyOwner\r\n        returns (uint256[] memory)\r\n    {\r\n        for(uint256 i = 0; i < tokenIds.length; i++) {\r\n            _mint(address_, tokenIds[i]);\r\n        }\r\n        \r\n        return tokenIds;\r\n    }\r\n    \r\n    // mint your Party Bone!\r\n    function createBone(uint256 numberOfTokens)\r\n        public\r\n        payable\r\n        saleIsOpen\r\n        whenNotPaused\r\n    {   \r\n        require(numberOfTokens < 21, \"No more than 20 Tokens at one time!\");\r\n        require(_mintedTokens.current() + numberOfTokens <= MAX_Bones, \"This exceeds the maximum number of Party Bones on sale!\");\r\n        require(ticket_price * numberOfTokens <= msg.value, \"Please send correct amount\");\r\n        require(msg.sender == tx.origin, \"Can only mint through a wallet\");\r\n        for(uint256 i = 0; i < numberOfTokens; i++) {\r\n            uint256 newItemId  = (((prime_seed*_mintedTokens.current()^2))) % MAX_Bones + 1;\r\n            _mintedTokens.increment();\r\n            _mint(msg.sender, newItemId);\r\n        }\r\n    }\r\n    \r\n    // only owner - check contract balance\r\n    function checkContractBalance()\r\n        public\r\n        onlyOwner\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    // only owner - withdraw contract balance to wallet\r\n    function withdraw()\r\n        public\r\n        payable\r\n        onlyOwner\r\n    {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n    \r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        override(ERC721, ERC721Enumerable)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n    \r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\r\n        internal\r\n        override(ERC721, ERC721Enumerable)\r\n    {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n    \r\n    // retrieve tokens by owner\r\n    function retrieveTokens(address owner) public view returns (uint256[] memory tokens) {\r\n        uint256 iterator = balanceOf(owner);\r\n        uint256[] memory tokenlist = new uint256[](iterator);\r\n        for (uint256 i = 0; i < iterator; i++){\r\n            tokenlist[i] = tokenOfOwnerByIndex(owner, i);\r\n        }\r\n        return tokenlist;\r\n    }\r\n    \r\n    // retrieve names of tokens by owner\r\n    function retrieveTokenNames(address owner) external view returns (string[] memory tokens) {\r\n        uint256 iterator = balanceOf(owner);\r\n        string[] memory tokenlist = new string[](iterator);\r\n        for (uint256 i = 0; i < iterator; i++){\r\n            tokenlist[i] = check_bone_ID_name(tokenOfOwnerByIndex(owner, i));\r\n        }\r\n        return tokenlist;\r\n    }\r\n    \r\n}\r\n\r\ncontract PartyStructures is ERC721URIStorage, ERC721Enumerable, Ownable, Pausable {\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter public _mintedTokens;\r\n\r\n    string private baseURI = \"\";\r\n    \r\n    constructor () payable ERC721(\"PS\", \"Party Structures\") {}\r\n    \r\n    mapping (uint256 => string) structureNames;\r\n    \r\n    mapping(address => bool) public authorised_contracts;\r\n    \r\n    // Contracts for Party Structure Merging authorised and removed here\r\n    function addAuthorisedAddress(address _address) public onlyOwner {\r\n        authorised_contracts[_address] = true;\r\n    }\r\n    \r\n    function removeAuthorisedAddress(address _address) public onlyOwner {\r\n        authorised_contracts[_address] = false;\r\n    }\r\n    \r\n    // Modifier to only alow merging contracts to interact with this function\r\n    modifier onlyAuthorised()\r\n    {\r\n        require(authorised_contracts[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    // returns current token minting count\r\n    function check_mintedCount() view public returns (uint256)\r\n    {\r\n        return _mintedTokens.current();\r\n    }\r\n    \r\n    // modify the base URI \r\n    function change_base_URI(string memory new_base_URI)\r\n        onlyOwner\r\n        public\r\n    {\r\n        baseURI = new_base_URI;\r\n    }\r\n    \r\n    // check token's URI\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override(ERC721, ERC721URIStorage)\r\n        returns (string memory)\r\n    {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n    \r\n    // writing structure names as metadata associated with token\r\n    function set_tokenID_description(uint256 tokenId, string memory nameofstructure)\r\n        onlyOwner\r\n        public\r\n    {\r\n        structureNames[tokenId] = nameofstructure;\r\n    }\r\n    \r\n    // writing structure names as metadata associated with token\r\n    function set_tokenID_description_merging(uint256 tokenId, string memory nameofstructure)\r\n        internal\r\n    {\r\n        structureNames[tokenId] = nameofstructure;\r\n    }\r\n    \r\n    function _baseURI() internal view override returns (string memory) {\r\n        return baseURI;\r\n    }\r\n    \r\n    // pause minting and merging\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n    \r\n    // unpause minting and merging \r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n    \r\n    // check structure name\r\n    function check_structure_ID_name(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        string memory nameofstructure = structureNames[tokenId];\r\n        return nameofstructure;\r\n    }\r\n    \r\n    \r\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\r\n        super._burn(tokenId);\r\n    }\r\n    \r\n    // burn Party Structure (I wouldn't!)\r\n    function burn(uint256 tokenid)\r\n        public\r\n        returns (uint256)\r\n    {\r\n        require(msg.sender == ownerOf(tokenid), \"This wallet does not own the tokenID!\");\r\n        _burn(tokenid);\r\n        return tokenid;\r\n    }\r\n    \r\n    // admin only function for burning in case something messes up\r\n    function burn_admin(uint256 tokenid)\r\n        public\r\n        onlyOwner\r\n        returns (uint256)\r\n    {\r\n        _burn(tokenid);\r\n        return tokenid;\r\n    }\r\n    \r\n    // structures are burned when merged for a new structure\r\n    function burn_for_limb(uint256 tokenid)\r\n        public\r\n        onlyAuthorised\r\n        whenNotPaused\r\n        returns (uint256)\r\n    {\r\n        _burn(tokenid);\r\n        return tokenid;\r\n    }\r\n    \r\n\r\n    // mint function for admin - in case something goes wrong \r\n    \r\n    function mint_admin(address address_, uint256[] memory tokenIds)\r\n        public\r\n        onlyOwner\r\n        returns (uint256[] memory)\r\n    {\r\n        for(uint256 i = 0; i < tokenIds.length; i++) {\r\n            _mint(address_, tokenIds[i]);\r\n        }\r\n        \r\n        return tokenIds;\r\n    }\r\n    \r\n    // mint your Party Structure!\r\n    function createStructure(address address_, string memory name_of_structure)\r\n        public\r\n        onlyAuthorised\r\n        returns (uint256)\r\n    {   \r\n        _mintedTokens.increment();\r\n        uint256 newItemId  = _mintedTokens.current();\r\n        _mint(address_, newItemId);\r\n        set_tokenID_description_merging(newItemId, name_of_structure);\r\n        return newItemId;\r\n    }\r\n    \r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        override(ERC721, ERC721Enumerable)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n    \r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\r\n        internal\r\n        override(ERC721, ERC721Enumerable)\r\n    {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n    \r\n    // retrieve tokens by owner\r\n    function retrieveTokens(address owner) public view returns (uint256[] memory tokens) {\r\n        uint256 iterator = balanceOf(owner);\r\n        uint256[] memory tokenlist = new uint256[](iterator);\r\n        for (uint256 i = 0; i < iterator; i++){\r\n            tokenlist[i] = tokenOfOwnerByIndex(owner, i);\r\n        }\r\n        return tokenlist;\r\n    }\r\n    \r\n    // retrieve names of tokens by owner\r\n    function retrieveTokenNames(address owner) external view returns (string[] memory tokens) {\r\n        uint256 iterator = balanceOf(owner);\r\n        string[] memory tokenlist = new string[](iterator);\r\n        for (uint256 i = 0; i < iterator; i++){\r\n            tokenlist[i] = check_structure_ID_name(tokenOfOwnerByIndex(owner, i));\r\n        }\r\n        return tokenlist;\r\n    }\r\n    \r\n}\r\n\r\ncontract PartyArms is Ownable, Pausable{\r\n    \r\n    address addressPartyBones;\r\n    \r\n    address addressPartyStructures;\r\n    \r\n    function setaddressPartyBones(address address_) onlyOwner public\r\n    {\r\n        addressPartyBones = address_;\r\n    }\r\n \r\n    function setaddressPartyStructures(address address_) onlyOwner public\r\n    {\r\n        addressPartyStructures = address_;\r\n    }\r\n\r\n    function LeftPinky(uint256 LeftHandDistalPhalange5TokenId, uint256 LeftHandProximalPhalange5TokenId, uint256 LeftHandIntermediatePhalange5TokenId)\r\n\tpublic\r\n\treturns (uint256)\r\n    {\r\n    \tPartyBones partyBones = PartyBones(addressPartyBones);\r\n    \tPartyStructures partyStructures = PartyStructures(addressPartyStructures);\r\n    \tuint256[3] memory tokenlist = [LeftHandDistalPhalange5TokenId, LeftHandProximalPhalange5TokenId, LeftHandIntermediatePhalange5TokenId];\r\n    \tuint8[3] memory modulus_list = [40, 54, 44];\r\n    \r\n    \t for (uint256 i = 0; i < 3; i++){\r\n    \t\trequire(tokenlist[i] % 206 == modulus_list[i] , 'Please check your Token IDs!');\r\n    \t\trequire(msg.sender == partyBones.ownerOf(tokenlist[i]));\r\n    \t}\r\n    \r\n    \tfor (uint256 i = 0; i < 3; i++){\r\n    \t\tpartyBones.burn_for_limb(tokenlist[i]);\r\n    \t}\r\n    \r\n    \tuint256 newItemId = partyStructures.createStructure(msg.sender, 'Left Pinky');\r\n    \r\n    \treturn newItemId;\r\n    }\r\n    \r\n    function LeftRing(uint256 LeftHandDistalPhalange4TokenId, uint256 LeftHandProximalPhalange4TokenId, uint256 LeftHandIntermediatePhalange4TokenId)\r\n\tpublic\r\n\treturns (uint256)\r\n    {\r\n    \tPartyBones partyBones = PartyBones(addressPartyBones);\r\n    \tPartyStructures partyStructures = PartyStructures(addressPartyStructures);\r\n    \tuint256[3] memory tokenlist = [LeftHandDistalPhalange4TokenId, LeftHandProximalPhalange4TokenId, LeftHandIntermediatePhalange4TokenId];\r\n    \tuint8[3] memory modulus_list = [39, 53, 43];\r\n    \r\n    \t for (uint256 i = 0; i < 3; i++){\r\n    \t\trequire(tokenlist[i] % 206 == modulus_list[i] , 'Please check your Token IDs!');\r\n    \t\trequire(msg.sender == partyBones.ownerOf(tokenlist[i]));\r\n    \t}\r\n    \r\n    \tfor (uint256 i = 0; i < 3; i++){\r\n    \t\tpartyBones.burn_for_limb(tokenlist[i]);\r\n    \t}\r\n    \r\n    \tuint256 newItemId = partyStructures.createStructure(msg.sender, 'Left Ring');\r\n    \r\n    \treturn newItemId;\r\n    }\r\n    \r\n    function LeftMiddle(uint256 LeftHandDistalPhalange3TokenId, uint256 LeftHandProximalPhalange3TokenId, uint256 LeftHandIntermediatePhalange3TokenId)\r\n\tpublic\r\n\treturns (uint256)\r\n    {\r\n    \tPartyBones partyBones = PartyBones(addressPartyBones);\r\n    \tPartyStructures partyStructures = PartyStructures(addressPartyStructures);\r\n    \tuint256[3] memory tokenlist = [LeftHandDistalPhalange3TokenId, LeftHandProximalPhalange3TokenId, LeftHandIntermediatePhalange3TokenId];\r\n    \tuint8[3] memory modulus_list = [38, 52, 42];\r\n    \r\n    \t for (uint256 i = 0; i < 3; i++){\r\n    \t\trequire(tokenlist[i] % 206 == modulus_list[i] , 'Please check your Token IDs!');\r\n    \t\trequire(msg.sender == partyBones.ownerOf(tokenlist[i]));\r\n    \t}\r\n    \r\n    \tfor (uint256 i = 0; i < 3; i++){\r\n    \t\tpartyBones.burn_for_limb(tokenlist[i]);\r\n    \t}\r\n    \r\n    \tuint256 newItemId = partyStructures.createStructure(msg.sender, 'Left Middle');\r\n    \r\n    \treturn newItemId;\r\n    }\r\n    \r\n    function LeftIndex(uint256 LeftHandDistalPhalange2TokenId, uint256 LeftHandProximalPhalange2TokenId, uint256 LeftHandIntermediatePhalange2TokenId)\r\n\tpublic\r\n\treturns (uint256)\r\n\t{\r\n    \tPartyBones partyBones = PartyBones(addressPartyBones);\r\n    \tPartyStructures partyStructures = PartyStructures(addressPartyStructures);\r\n    \tuint256[3] memory tokenlist = [LeftHandDistalPhalange2TokenId, LeftHandProximalPhalange2TokenId, LeftHandIntermediatePhalange2TokenId];\r\n    \tuint8[3] memory modulus_list = [37, 51, 41];\r\n    \r\n    \t for (uint256 i = 0; i < 3; i++){\r\n    \t\trequire(tokenlist[i] % 206 == modulus_list[i] , 'Please check your Token IDs!');\r\n    \t\trequire(msg.sender == partyBones.ownerOf(tokenlist[i]));\r\n    \t}\r\n    \r\n    \tfor (uint256 i = 0; i < 3; i++){\r\n    \t\tpartyBones.burn_for_limb(tokenlist[i]);\r\n    \t}\r\n    \r\n    \tuint256 newItemId = partyStructures.createStructure(msg.sender, 'Left Index');\r\n    \r\n    \treturn newItemId;\r\n\t}\r\n\r\n    function LeftThumb(uint256 LeftHandDistalPhalange1TokenId, uint256 LeftHandProximalPhalange1TokenId)\r\n\tpublic\r\n\treturns (uint256)\r\n\t{\r\n    \tPartyBones partyBones = PartyBones(addressPartyBones);\r\n    \tPartyStructures partyStructures = PartyStructures(addressPartyStructures);\r\n    \tuint256[2] memory tokenlist = [LeftHandDistalPhalange1TokenId, LeftHandProximalPhalange1TokenId];\r\n    \tuint8[2] memory modulus_list = [36, 50];\r\n    \r\n    \t for (uint256 i = 0; i < 2; i++){\r\n    \t\trequire(tokenlist[i] % 206 == modulus_list[i] , 'Please check your Token IDs!');\r\n    \t\trequire(msg.sender == partyBones.ownerOf(tokenlist[i]));\r\n    \t}\r\n    \r\n    \tfor (uint256 i = 0; i < 2; i++){\r\n    \t\tpartyBones.burn_for_limb(tokenlist[i]);\r\n    \t}\r\n    \r\n    \tuint256 newItemId = partyStructures.createStructure(msg.sender, 'Left Thumb');\r\n\r\n\t    return newItemId;\r\n\t}\r\n    \r\n    function LeftHand(uint256 LeftHandMetacarpal1TokenId, uint256 LeftHandMetacarpal2TokenId, uint256 LeftHandMetacarpal3TokenId, \r\n\tuint256 LeftHandMetacarpal4TokenId, uint256 LeftHandMetacarpal5TokenId, uint256 LeftThumbTokenId, uint256 LeftIndexTokenId, \r\n\tuint256 LeftMiddleTokenId, uint256 LeftRingTokenId, uint256 LeftPinkyTokenId)\r\n\tpublic\r\n\treturns (uint256)\r\n\t{\r\n    \tPartyBones partyBones = PartyBones(addressPartyBones);\r\n    \tPartyStructures partyStructures = PartyStructures(addressPartyStructures);\r\n    \tuint256[10] memory tokenlist = [LeftHandMetacarpal1TokenId, LeftHandMetacarpal2TokenId, LeftHandMetacarpal3TokenId, LeftHandMetacarpal4TokenId, LeftHandMetacarpal5TokenId, LeftThumbTokenId, LeftIndexTokenId, LeftMiddleTokenId, LeftRingTokenId, LeftPinkyTokenId];\r\n    \tuint8[5] memory modulus_list = [45, 46, 47, 48, 49];\r\n    \tstring[5] memory structure_names = ['Left Thumb', 'Left Index', 'Left Middle', 'Left Ring', 'Left Pinky'];\r\n    \r\n    \t for (uint256 i = 0; i < 5; i++){\r\n    \t\trequire(tokenlist[i] % 206 == modulus_list[i] , 'Please check your Token IDs!');\r\n    \t\trequire(msg.sender == partyBones.ownerOf(tokenlist[i]));\r\n    \t}\r\n    \r\n    \tfor (uint256 i = 0; i < 5; i++){\r\n    \t\tpartyBones.burn_for_limb(tokenlist[i]);\r\n    \t}\r\n    \r\n    \r\n    \t for (uint256 i = 5; i < 10; i++){\r\n    \t\trequire( keccak256(bytes(partyStructures.check_structure_ID_name(tokenlist[i]))) == keccak256(bytes(structure_names[i-5])) , 'Please check your Token IDs!' );\r\n    \t\trequire(msg.sender == partyStructures.ownerOf(tokenlist[i]));\r\n    \t}\r\n    \r\n    \tfor (uint256 i = 5; i < 10; i++){\r\n    \t\tpartyStructures.burn_for_limb(tokenlist[i]);\r\n    \t}\r\n    \r\n    \tuint256 newItemId = partyStructures.createStructure(msg.sender, 'Left Hand');\r\n    \r\n    \treturn newItemId;\r\n\t}\r\n\t\r\n\tfunction LeftWrist(uint256 LeftCapitateTokenId, uint256 LeftHamateTokenId, uint256 LeftLunateTokenId, \r\n\tuint256 LeftPisiformTokenId, uint256 LeftScaphoidTokenId, uint256 LeftTrapeziumTokenId, uint256 LeftTrapezoidTokenId, uint256 LeftTriquetralTokenId)\r\n\tpublic\r\n\treturns (uint256)\r\n\t{\r\n    \tPartyBones partyBones = PartyBones(addressPartyBones);\r\n    \tPartyStructures partyStructures = PartyStructures(addressPartyStructures);\r\n    \tuint256[8] memory tokenlist = [LeftCapitateTokenId, LeftHamateTokenId, LeftLunateTokenId, LeftPisiformTokenId, LeftScaphoidTokenId, LeftTrapeziumTokenId, LeftTrapezoidTokenId, LeftTriquetralTokenId];\r\n    \tuint8[8] memory modulus_list = [13, 35, 60, 73, 87, 93, 94, 95];\r\n    \r\n    \t for (uint256 i = 0; i < 8; i++){\r\n    \t\trequire(tokenlist[i] % 206 == modulus_list[i] , 'Please check your Token IDs!');\r\n    \t\trequire(msg.sender == partyBones.ownerOf(tokenlist[i]));\r\n    \t}\r\n    \r\n    \tfor (uint256 i = 0; i < 8; i++){\r\n    \t\tpartyBones.burn_for_limb(tokenlist[i]);\r\n    \t}\r\n    \r\n    \tuint256 newItemId = partyStructures.createStructure(msg.sender, 'Left Wrist');\r\n    \r\n    \treturn newItemId;\r\n\t}\r\n\t\r\n\tfunction LeftArm(uint256 LeftUlnaTokenId, uint256 LeftRadiusTokenId, uint256 LeftHumerusTokenId, \r\n\tuint256 LeftWristTokenId, uint256 LeftHandTokenId)\r\n\tpublic\r\n\treturns (uint256)\r\n\t{\r\n    \tPartyBones partyBones = PartyBones(addressPartyBones);\r\n    \tPartyStructures partyStructures = PartyStructures(addressPartyStructures);\r\n    \tuint256[5] memory tokenlist = [LeftUlnaTokenId, LeftRadiusTokenId, LeftHumerusTokenId, LeftWristTokenId, LeftHandTokenId];\r\n    \tuint8[3] memory modulus_list = [96, 74, 56];\r\n    \tstring[2] memory structure_names = ['Left Wrist', 'Left Hand'];\r\n    \r\n    \t for (uint256 i = 0; i < 3; i++){\r\n    \t\trequire(tokenlist[i] % 206 == modulus_list[i] , 'Please check your Token IDs!');\r\n    \t\trequire(msg.sender == partyBones.ownerOf(tokenlist[i]));\r\n    \t}\r\n    \r\n    \tfor (uint256 i = 0; i < 3; i++){\r\n    \t\tpartyBones.burn_for_limb(tokenlist[i]);\r\n    \t}\r\n    \r\n    \r\n    \t for (uint256 i = 3; i < 5; i++){\r\n    \t\trequire( keccak256(bytes(partyStructures.check_structure_ID_name(tokenlist[i]))) == keccak256(bytes(structure_names[i-3])) , 'Please check your Token IDs!' );\r\n    \t\trequire(msg.sender == partyStructures.ownerOf(tokenlist[i]));\r\n    \t}\r\n    \r\n    \tfor (uint256 i = 3; i < 5; i++){\r\n    \t\tpartyStructures.burn_for_limb(tokenlist[i]);\r\n    \t}\r\n    \r\n    \tuint256 newItemId = partyStructures.createStructure(msg.sender, 'Left Arm');\r\n    \r\n    \treturn newItemId;\r\n\t}\r\n\t\r\n\tfunction RightPinky(uint256 RightHandDistalPhalange5TokenId, uint256 RightHandProximalPhalange5TokenId, uint256 RightHandIntermediatePhalange5TokenId)\r\n\tpublic\r\n\treturns (uint256)\r\n\t{\r\n    \tPartyBones partyBones = PartyBones(addressPartyBones);\r\n    \tPartyStructures partyStructures = PartyStructures(addressPartyStructures);\r\n    \tuint256[3] memory tokenlist = [RightHandDistalPhalange5TokenId, RightHandProximalPhalange5TokenId, RightHandIntermediatePhalange5TokenId];\r\n    \tuint8[3] memory modulus_list = [133, 147, 137];\r\n    \r\n    \t for (uint256 i = 0; i < 3; i++){\r\n    \t\trequire(tokenlist[i] % 206 == modulus_list[i] , 'Please check your Token IDs!');\r\n    \t\trequire(msg.sender == partyBones.ownerOf(tokenlist[i]));\r\n    \t}\r\n    \r\n    \tfor (uint256 i = 0; i < 3; i++){\r\n    \t\tpartyBones.burn_for_limb(tokenlist[i]);\r\n    \t}\r\n    \r\n    \tuint256 newItemId = partyStructures.createStructure(msg.sender, 'Right Pinky');\r\n    \r\n    \treturn newItemId;\r\n\t}\r\n\t\r\n\tfunction RightRing(uint256 RightHandDistalPhalange4TokenId, uint256 RightHandProximalPhalange4TokenId, uint256 RightHandIntermediatePhalange4TokenId)\r\n\tpublic\r\n\treturns (uint256)\r\n\t{\r\n    \tPartyBones partyBones = PartyBones(addressPartyBones);\r\n    \tPartyStructures partyStructures = PartyStructures(addressPartyStructures);\r\n    \tuint256[3] memory tokenlist = [RightHandDistalPhalange4TokenId, RightHandProximalPhalange4TokenId, RightHandIntermediatePhalange4TokenId];\r\n    \tuint8[3] memory modulus_list = [132, 146, 136];\r\n    \r\n    \t for (uint256 i = 0; i < 3; i++){\r\n    \t\trequire(tokenlist[i] % 206 == modulus_list[i] , 'Please check your Token IDs!');\r\n    \t\trequire(msg.sender == partyBones.ownerOf(tokenlist[i]));\r\n    \t}\r\n    \r\n    \tfor (uint256 i = 0; i < 3; i++){\r\n    \t\tpartyBones.burn_for_limb(tokenlist[i]);\r\n    \t}\r\n    \r\n    \tuint256 newItemId = partyStructures.createStructure(msg.sender, 'Right Ring');\r\n    \r\n    \treturn newItemId;\r\n\t}\r\n\t\r\n\tfunction RightMiddle(uint256 RightHandDistalPhalange3TokenId, uint256 RightHandProximalPhalange3TokenId, uint256 RightHandIntermediatePhalange3TokenId)\r\n\tpublic\r\n\treturns (uint256)\r\n\t{\r\n    \tPartyBones partyBones = PartyBones(addressPartyBones);\r\n    \tPartyStructures partyStructures = PartyStructures(addressPartyStructures);\r\n    \tuint256[3] memory tokenlist = [RightHandDistalPhalange3TokenId, RightHandProximalPhalange3TokenId, RightHandIntermediatePhalange3TokenId];\r\n    \tuint8[3] memory modulus_list = [131, 145, 135];\r\n    \r\n    \t for (uint256 i = 0; i < 3; i++){\r\n    \t\trequire(tokenlist[i] % 206 == modulus_list[i] , 'Please check your Token IDs!');\r\n    \t\trequire(msg.sender == partyBones.ownerOf(tokenlist[i]));\r\n    \t}\r\n    \r\n    \tfor (uint256 i = 0; i < 3; i++){\r\n    \t\tpartyBones.burn_for_limb(tokenlist[i]);\r\n    \t}\r\n    \r\n    \tuint256 newItemId = partyStructures.createStructure(msg.sender, 'Right Middle');\r\n    \r\n    \treturn newItemId;\r\n\t}\r\n\t\r\n\tfunction RightIndex(uint256 RightHandDistalPhalange2TokenId, uint256 RightHandProximalPhalange2TokenId, uint256 RightHandIntermediatePhalange2TokenId)\r\n\tpublic\r\n\treturns (uint256)\r\n\t{\r\n    \tPartyBones partyBones = PartyBones(addressPartyBones);\r\n    \tPartyStructures partyStructures = PartyStructures(addressPartyStructures);\r\n    \tuint256[3] memory tokenlist = [RightHandDistalPhalange2TokenId, RightHandProximalPhalange2TokenId, RightHandIntermediatePhalange2TokenId];\r\n    \tuint8[3] memory modulus_list = [130, 144, 134];\r\n    \r\n    \t for (uint256 i = 0; i < 3; i++){\r\n    \t\trequire(tokenlist[i] % 206 == modulus_list[i] , 'Please check your Token IDs!');\r\n    \t\trequire(msg.sender == partyBones.ownerOf(tokenlist[i]));\r\n    \t}\r\n    \r\n    \tfor (uint256 i = 0; i < 3; i++){\r\n    \t\tpartyBones.burn_for_limb(tokenlist[i]);\r\n    \t}\r\n    \r\n    \tuint256 newItemId = partyStructures.createStructure(msg.sender, 'Right Index');\r\n    \r\n    \treturn newItemId;\r\n\t}\r\n    \r\n    function RightThumb(uint256 RightHandDistalPhalange1TokenId, uint256 RightHandProximalPhalange1TokenId)\r\n\tpublic\r\n\treturns (uint256)\r\n\t{\r\n    \tPartyBones partyBones = PartyBones(addressPartyBones);\r\n    \tPartyStructures partyStructures = PartyStructures(addressPartyStructures);\r\n    \tuint256[2] memory tokenlist = [RightHandDistalPhalange1TokenId, RightHandProximalPhalange1TokenId];\r\n    \tuint8[2] memory modulus_list = [129, 143];\r\n    \r\n    \t for (uint256 i = 0; i < 2; i++){\r\n    \t\trequire(tokenlist[i] % 206 == modulus_list[i] , 'Please check your Token IDs!');\r\n    \t\trequire(msg.sender == partyBones.ownerOf(tokenlist[i]));\r\n    \t}\r\n    \r\n    \tfor (uint256 i = 0; i < 2; i++){\r\n    \t\tpartyBones.burn_for_limb(tokenlist[i]);\r\n    \t}\r\n    \r\n    \tuint256 newItemId = partyStructures.createStructure(msg.sender, 'Right Thumb');\r\n    \r\n    \treturn newItemId;\r\n\t}\r\n\t\r\n\tfunction RightHand(uint256 RightHandMetacarpal1TokenId, uint256 RightHandMetacarpal2TokenId, uint256 RightHandMetacarpal3TokenId, \r\n\tuint256 RightHandMetacarpal4TokenId, uint256 RightHandMetacarpal5TokenId, uint256 RightThumbTokenId, uint256 RightIndexTokenId, \r\n\tuint256 RightMiddleTokenId, uint256 RightRingTokenId, uint256 RightPinkyTokenId)\r\n\tpublic\r\n\treturns (uint256)\r\n\t{\r\n    \tPartyBones partyBones = PartyBones(addressPartyBones);\r\n    \tPartyStructures partyStructures = PartyStructures(addressPartyStructures);\r\n    \tuint256[10] memory tokenlist = [RightHandMetacarpal1TokenId, RightHandMetacarpal2TokenId, RightHandMetacarpal3TokenId, RightHandMetacarpal4TokenId, RightHandMetacarpal5TokenId, RightThumbTokenId, RightIndexTokenId, RightMiddleTokenId, RightRingTokenId, RightPinkyTokenId];\r\n    \tuint8[5] memory modulus_list = [138, 139, 140, 141, 142];\r\n    \tstring[5] memory structure_names = ['Right Thumb', 'Right Index', 'Right Middle', 'Right Ring', 'Right Pinky'];\r\n    \r\n    \t for (uint256 i = 0; i < 5; i++){\r\n    \t\trequire(tokenlist[i] % 206 == modulus_list[i] , 'Please check your Token IDs!');\r\n    \t\trequire(msg.sender == partyBones.ownerOf(tokenlist[i]));\r\n    \t}\r\n    \r\n    \tfor (uint256 i = 0; i < 5; i++){\r\n    \t\tpartyBones.burn_for_limb(tokenlist[i]);\r\n    \t}\r\n    \r\n    \r\n    \t for (uint256 i = 5; i < 10; i++){\r\n    \t\trequire( keccak256(bytes(partyStructures.check_structure_ID_name(tokenlist[i]))) == keccak256(bytes(structure_names[i-5])) , 'Please check your Token IDs!' );\r\n    \t\trequire(msg.sender == partyStructures.ownerOf(tokenlist[i]));\r\n    \t}\r\n    \r\n    \tfor (uint256 i = 5; i < 10; i++){\r\n    \t\tpartyStructures.burn_for_limb(tokenlist[i]);\r\n    \t}\r\n    \r\n    \tuint256 newItemId = partyStructures.createStructure(msg.sender, 'Right Hand');\r\n    \r\n    \treturn newItemId;\r\n\t}\r\n    \r\n    function RightWrist(uint256 RightCapitateTokenId, uint256 RightHamateTokenId, uint256 RightLunateTokenId, \r\n\tuint256 RightPisiformTokenId, uint256 RightScaphoidTokenId, uint256 RightTrapeziumTokenId, uint256 RightTrapezoidTokenId, uint256 RightTriquetralTokenId)\r\n\tpublic\r\n\treturns (uint256)\r\n\t{\r\n    \tPartyBones partyBones = PartyBones(addressPartyBones);\r\n    \tPartyStructures partyStructures = PartyStructures(addressPartyStructures);\r\n    \tuint256[8] memory tokenlist = [RightCapitateTokenId, RightHamateTokenId, RightLunateTokenId, RightPisiformTokenId, RightScaphoidTokenId, RightTrapeziumTokenId, RightTrapezoidTokenId, RightTriquetralTokenId];\r\n    \tuint8[8] memory modulus_list = [106, 128, 153, 166, 180, 186, 187, 188];\r\n    \r\n    \t for (uint256 i = 0; i < 8; i++){\r\n    \t\trequire(tokenlist[i] % 206 == modulus_list[i] , 'Please check your Token IDs!');\r\n    \t\trequire(msg.sender == partyBones.ownerOf(tokenlist[i]));\r\n    \t}\r\n    \r\n    \tfor (uint256 i = 0; i < 8; i++){\r\n    \t\tpartyBones.burn_for_limb(tokenlist[i]);\r\n    \t}\r\n    \r\n    \tuint256 newItemId = partyStructures.createStructure(msg.sender, 'Right Wrist');\r\n    \r\n    \treturn newItemId;\r\n\t}\r\n    \r\n    function RightArm(uint256 RightUlnaTokenId, uint256 RightRadiusTokenId, uint256 RightHumerusTokenId, \r\n\tuint256 RightWristTokenId, uint256 RightHandTokenId)\r\n\tpublic\r\n\treturns (uint256)\r\n\t{\r\n    \tPartyBones partyBones = PartyBones(addressPartyBones);\r\n    \tPartyStructures partyStructures = PartyStructures(addressPartyStructures);\r\n    \tuint256[5] memory tokenlist = [RightUlnaTokenId, RightRadiusTokenId, RightHumerusTokenId, RightWristTokenId, RightHandTokenId];\r\n    \tuint8[3] memory modulus_list = [189, 167, 149];\r\n    \tstring[2] memory structure_names = ['Right Wrist', 'Right Hand'];\r\n    \r\n    \t for (uint256 i = 0; i < 3; i++){\r\n    \t\trequire(tokenlist[i] % 206 == modulus_list[i] , 'Please check your Token IDs!');\r\n    \t\trequire(msg.sender == partyBones.ownerOf(tokenlist[i]));\r\n    \t}\r\n    \r\n    \tfor (uint256 i = 0; i < 3; i++){\r\n    \t\tpartyBones.burn_for_limb(tokenlist[i]);\r\n    \t}\r\n    \r\n    \r\n    \t for (uint256 i = 3; i < 5; i++){\r\n    \t\trequire( keccak256(bytes(partyStructures.check_structure_ID_name(tokenlist[i]))) == keccak256(bytes(structure_names[i-3])) , 'Please check your Token IDs!' );\r\n    \t\trequire(msg.sender == partyStructures.ownerOf(tokenlist[i]));\r\n    \t}\r\n    \r\n    \tfor (uint256 i = 3; i < 5; i++){\r\n    \t\tpartyStructures.burn_for_limb(tokenlist[i]);\r\n    \t}\r\n    \r\n    \tuint256 newItemId = partyStructures.createStructure(msg.sender, 'Right Arm');\r\n    \r\n    \treturn newItemId;\r\n\t}\r\n\t\r\n\t\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LeftUlnaTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftRadiusTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftHumerusTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftWristTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftHandTokenId\",\"type\":\"uint256\"}],\"name\":\"LeftArm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LeftHandMetacarpal1TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftHandMetacarpal2TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftHandMetacarpal3TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftHandMetacarpal4TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftHandMetacarpal5TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftThumbTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftIndexTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftMiddleTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftRingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftPinkyTokenId\",\"type\":\"uint256\"}],\"name\":\"LeftHand\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LeftHandDistalPhalange2TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftHandProximalPhalange2TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftHandIntermediatePhalange2TokenId\",\"type\":\"uint256\"}],\"name\":\"LeftIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LeftHandDistalPhalange3TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftHandProximalPhalange3TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftHandIntermediatePhalange3TokenId\",\"type\":\"uint256\"}],\"name\":\"LeftMiddle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LeftHandDistalPhalange5TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftHandProximalPhalange5TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftHandIntermediatePhalange5TokenId\",\"type\":\"uint256\"}],\"name\":\"LeftPinky\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LeftHandDistalPhalange4TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftHandProximalPhalange4TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftHandIntermediatePhalange4TokenId\",\"type\":\"uint256\"}],\"name\":\"LeftRing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LeftHandDistalPhalange1TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftHandProximalPhalange1TokenId\",\"type\":\"uint256\"}],\"name\":\"LeftThumb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LeftCapitateTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftHamateTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftLunateTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftPisiformTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftScaphoidTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftTrapeziumTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftTrapezoidTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LeftTriquetralTokenId\",\"type\":\"uint256\"}],\"name\":\"LeftWrist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"RightUlnaTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightRadiusTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightHumerusTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightWristTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightHandTokenId\",\"type\":\"uint256\"}],\"name\":\"RightArm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"RightHandMetacarpal1TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightHandMetacarpal2TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightHandMetacarpal3TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightHandMetacarpal4TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightHandMetacarpal5TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightThumbTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightIndexTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightMiddleTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightRingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightPinkyTokenId\",\"type\":\"uint256\"}],\"name\":\"RightHand\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"RightHandDistalPhalange2TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightHandProximalPhalange2TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightHandIntermediatePhalange2TokenId\",\"type\":\"uint256\"}],\"name\":\"RightIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"RightHandDistalPhalange3TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightHandProximalPhalange3TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightHandIntermediatePhalange3TokenId\",\"type\":\"uint256\"}],\"name\":\"RightMiddle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"RightHandDistalPhalange5TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightHandProximalPhalange5TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightHandIntermediatePhalange5TokenId\",\"type\":\"uint256\"}],\"name\":\"RightPinky\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"RightHandDistalPhalange4TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightHandProximalPhalange4TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightHandIntermediatePhalange4TokenId\",\"type\":\"uint256\"}],\"name\":\"RightRing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"RightHandDistalPhalange1TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightHandProximalPhalange1TokenId\",\"type\":\"uint256\"}],\"name\":\"RightThumb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"RightCapitateTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightHamateTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightLunateTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightPisiformTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightScaphoidTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightTrapeziumTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightTrapezoidTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RightTriquetralTokenId\",\"type\":\"uint256\"}],\"name\":\"RightWrist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"setaddressPartyBones\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"setaddressPartyStructures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PartyArms","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b8845d1706378d626a700b503e76dfd425fd0f30b3bcd8bc663f2aadc1fad9be"}]}