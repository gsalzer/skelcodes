{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: Delayed Release MIT\r\npragma solidity ^0.8.0;\r\n\r\n// !!! THIS CONTRACT IS MIGRATED TO 0x3C2Eb40D25a4b2B5A068a959a40d57D63Dc98B95 !!!\r\n\r\n/*\r\n    ERC20I (ERC20 0xInuarashi Edition)\r\n    Minified and Gas Optimized\r\n    From the efforts of the 0x Collective\r\n    https://0xcollective.net\r\n*/\r\n\r\ncontract ERC20I {\r\n    // Token Params\r\n    string public name;\r\n    string public symbol;\r\n    constructor(string memory name_, string memory symbol_) {\r\n        name = name_;\r\n        symbol = symbol_;\r\n    }\r\n\r\n    // Decimals\r\n    uint8 public constant decimals = 18;\r\n\r\n    // Supply\r\n    uint256 public totalSupply;\r\n    \r\n    // Mappings of Balances\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    // Events\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // Internal Functions\r\n    function _mint(address to_, uint256 amount_) internal {\r\n        totalSupply += amount_;\r\n        balanceOf[to_] += amount_;\r\n        emit Transfer(address(0x0), to_, amount_);\r\n    }\r\n    function _burn(address from_, uint256 amount_) internal {\r\n        balanceOf[from_] -= amount_;\r\n        totalSupply -= amount_;\r\n        emit Transfer(from_, address(0x0), amount_);\r\n    }\r\n\r\n    // Public Functions\r\n    function approve(address spender_, uint256 amount_) public virtual returns (bool) {\r\n        allowance[msg.sender][spender_] = amount_;\r\n        emit Approval(msg.sender, spender_, amount_);\r\n        return true;\r\n    }\r\n    function transfer(address to_, uint256 amount_) public virtual returns (bool) {\r\n        balanceOf[msg.sender] -= amount_;\r\n        balanceOf[to_] += amount_;\r\n        emit Transfer(msg.sender, to_, amount_);\r\n        return true;\r\n    }\r\n    function transferFrom(address from_, address to_, uint256 amount_) public virtual returns (bool) {\r\n        if (allowance[from_][msg.sender] != type(uint256).max) {\r\n            allowance[from_][msg.sender] -= amount_; }\r\n        balanceOf[from_] -= amount_;\r\n        balanceOf[to_] += amount_;\r\n        emit Transfer(from_, to_, amount_);\r\n        return true;\r\n    }\r\n\r\n    // 0xInuarashi Custom Functions\r\n    function multiTransfer(address[] memory to_, uint256[] memory amounts_) public virtual {\r\n        require(to_.length == amounts_.length, \"ERC20I: To and Amounts length Mismatch!\");\r\n        for (uint256 i = 0; i < to_.length; i++) {\r\n            transfer(to_[i], amounts_[i]);\r\n        }\r\n    }\r\n    function multiTransferFrom(address[] memory from_, address[] memory to_, uint256[] memory amounts_) public virtual {\r\n        require(from_.length == to_.length && from_.length == amounts_.length, \"ERC20I: From, To, and Amounts length Mismatch!\");\r\n        for (uint256 i = 0; i < from_.length; i++) {\r\n            transferFrom(from_[i], to_[i], amounts_[i]);\r\n        }\r\n    }\r\n}\r\n\r\ncontract MartianEssence is ERC20I {\r\n    // Access\r\n    address public owner;\r\n    constructor() ERC20I(\"Martian Essence\", \"MES\") { \r\n        owner = msg.sender;\r\n        \r\n        // treasury mint. we will never use this except to benefit community.\r\n        // this is around 5% of theoretical total supply.\r\n        _mint(msg.sender, 10000000 ether);\r\n    }\r\n    modifier onlyOwner { require(msg.sender == owner, \"You are not the owner!\"); _; }\r\n    function setNewOwner(address address_) external onlyOwner { owner = address_; }\r\n\r\n    // Times\r\n    uint40 public yieldStartTime = 0;\r\n    uint40 public yieldEndTime = 1956502799; // 2031-12-31_23-59-59\r\n    function setYieldEndTime(uint40 yieldEndTime_) external onlyOwner { yieldEndTime = yieldEndTime_; }\r\n\r\n    // Controllers\r\n    mapping(address => bool) public mesControllers;\r\n    modifier onlyControllers { require(mesControllers[msg.sender], \"You are not a controller!\"); _; }\r\n    function setController(address address_, bool bool_) external onlyOwner { mesControllers[address_] = bool_; }\r\n\r\n    // Yield Info\r\n    uint256 public globalModulus = (10 ** 14);\r\n    uint40 public halvingRate = 1; // This is not used\r\n    struct Yield { uint40 yieldRate_; uint40 lastUpdatedTime_; uint176 pendingRewards_; }\r\n    mapping(address => Yield) public addressToYield;\r\n    function getGlobalModulus(uint256 modulus_) external onlyOwner { globalModulus = modulus_; }\r\n    function setHalvingRate(uint40 rate_) external onlyOwner { halvingRate = rate_; }\r\n\r\n    // Events\r\n    event Claim(address to_, uint256 amount_);\r\n\r\n    // Administration\r\n    function setYieldRate(address address_, uint256 yieldRate_) external onlyControllers {\r\n        uint40 _yieldRate = uint40(yieldRate_ / globalModulus);\r\n        addressToYield[address_].yieldRate_ = _yieldRate;\r\n    }\r\n    function addYieldRate(address address_, uint256 yieldRateAdd_) external onlyControllers {\r\n        uint40 _yieldRateAdd = uint40(yieldRateAdd_ / globalModulus);\r\n        addressToYield[address_].yieldRate_ += _yieldRateAdd;\r\n    }\r\n    function subYieldRate(address address_, uint256 yieldRateSub_) external onlyControllers {\r\n        uint40 _yieldRateSub = uint40(yieldRateSub_ / globalModulus);\r\n        addressToYield[address_].yieldRate_ -= _yieldRateSub;\r\n    }\r\n\r\n    // Credits System\r\n    function deductCredits(address address_, uint256 amount_) external onlyControllers {\r\n        uint40 _amount = uint40(amount_ / globalModulus);\r\n        require(addressToYield[address_].pendingRewards_ >= _amount, \"Not enough credits!\");\r\n        addressToYield[address_].pendingRewards_ -= _amount;\r\n    }\r\n    function addCredits(address address_, uint256 amount_) external onlyControllers {\r\n        uint40 _amount = uint40(amount_ / globalModulus);\r\n        addressToYield[address_].pendingRewards_ += _amount;\r\n    }\r\n\r\n    // ERC20 Burn\r\n    function burn(address from_, uint256 amount_) external onlyControllers {\r\n        _burn(from_, amount_);\r\n    }\r\n\r\n    // Internal View Functions\r\n    function __getSmallerValueUint40(uint40 a, uint40 b) internal pure returns (uint40) {\r\n        return a < b ? a : b;\r\n    }\r\n    function __calculateYieldReward(address address_) internal view returns (uint176) {\r\n        uint40 _totalYieldRate = addressToYield[address_].yieldRate_; \r\n        \r\n        if (_totalYieldRate == 0) { return 0; }\r\n        \r\n        uint40 _time = __getSmallerValueUint40(uint40(block.timestamp), yieldEndTime);\r\n        uint40 _lastUpdate = addressToYield[address_].lastUpdatedTime_;\r\n\r\n        if (_lastUpdate > yieldStartTime) {\r\n            return (_totalYieldRate * (_time - _lastUpdate) / 1 days) / halvingRate;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // Internal Write Functions\r\n    function __updateYieldReward(address address_) internal {\r\n        uint40 _time = __getSmallerValueUint40(uint40(block.timestamp), yieldEndTime);\r\n        uint40 _lastUpdate = addressToYield[address_].lastUpdatedTime_;\r\n\r\n        if (_lastUpdate > 0) { addressToYield[address_].pendingRewards_ += __calculateYieldReward(address_); }\r\n        if (_lastUpdate != yieldEndTime) { addressToYield[address_].lastUpdatedTime_ = _time; }\r\n    }\r\n    function __claimYieldReward(address address_) internal {\r\n        uint176 _pendingRewards = addressToYield[address_].pendingRewards_;\r\n\r\n        if (_pendingRewards > 0) { \r\n            addressToYield[address_].pendingRewards_ = 0;\r\n\r\n            uint256 _expandedReward = uint256(_pendingRewards * globalModulus);\r\n\r\n            _mint(address_, _expandedReward);\r\n            emit Claim(address_, _expandedReward);\r\n        } \r\n    }\r\n\r\n    // Public Write Functions\r\n    function updateReward(address address_) public {\r\n        __updateYieldReward(address_); \r\n    }\r\n    function claimTokens(address address_) public {\r\n        __updateYieldReward(address_);\r\n        __claimYieldReward(address_);\r\n    }\r\n\r\n    // Public Write Multi-Functions\r\n    function multiUpdateReward(address[] memory addresses_) public {\r\n        for (uint256 i = 0; i < addresses_.length; i++) {\r\n            updateReward(addresses_[i]);\r\n        }\r\n    }\r\n    function multiClaimTokens(address[] memory addresses_) public {\r\n        for (uint256 i = 0; i < addresses_.length; i++) {\r\n            claimTokens(addresses_[i]);\r\n        }\r\n    }\r\n\r\n    // Public View Functions\r\n    function getStorageClaimableTokens(address address_) public view returns (uint256) {\r\n        return uint256(addressToYield[address_].pendingRewards_ * globalModulus);\r\n    }\r\n    function getPendingClaimableTokens(address address_) public view returns (uint256) {\r\n        return uint256(__calculateYieldReward(address_) * globalModulus);\r\n    }\r\n    function getTotalClaimableTokens(address address_) public view returns (uint256) {\r\n        return uint256((addressToYield[address_].pendingRewards_ + __calculateYieldReward(address_)) * globalModulus);\r\n    }\r\n    function getYieldRateOfAddress(address address_) public view returns (uint256) {\r\n        return uint256(addressToYield[address_].yieldRate_ * globalModulus); \r\n    }\r\n    function raw_getStorageClaimableTokens(address address_) public view returns (uint256) {\r\n        return addressToYield[address_].pendingRewards_;\r\n    }\r\n    function raw_getPendingClaimableTokens(address address_) public view returns (uint256) {\r\n        return __calculateYieldReward(address_);\r\n    }\r\n    function raw_getTotalClaimableTokens(address address_) public view returns (uint256) {\r\n        return addressToYield[address_].pendingRewards_ + __calculateYieldReward(address_);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"addCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"yieldRateAdd_\",\"type\":\"uint256\"}],\"name\":\"addYieldRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToYield\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"yieldRate_\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdatedTime_\",\"type\":\"uint40\"},{\"internalType\":\"uint176\",\"name\":\"pendingRewards_\",\"type\":\"uint176\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"deductCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modulus_\",\"type\":\"uint256\"}],\"name\":\"getGlobalModulus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"getPendingClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"getStorageClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"getTotalClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"getYieldRateOfAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalModulus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halvingRate\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mesControllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses_\",\"type\":\"address[]\"}],\"name\":\"multiClaimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from_\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"multiTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses_\",\"type\":\"address[]\"}],\"name\":\"multiUpdateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"raw_getPendingClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"raw_getStorageClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"raw_getTotalClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"rate_\",\"type\":\"uint40\"}],\"name\":\"setHalvingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"setNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"yieldEndTime_\",\"type\":\"uint40\"}],\"name\":\"setYieldEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"yieldRate_\",\"type\":\"uint256\"}],\"name\":\"setYieldRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"yieldRateSub_\",\"type\":\"uint256\"}],\"name\":\"subYieldRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldEndTime\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldStartTime\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MartianEssence","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://99a4c23b5acad23d2777bc5ade9f2cb22732fa32266a50d0c8337aa0b872af4f"}]}