{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.7.0;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\nlibrary SafeMath {\r\n    function add(uint128 x, uint128 y) internal pure returns (uint128 z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint128 x, uint128 y) internal pure returns (uint128 z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint128 x, uint128 y) internal pure returns (uint128 z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\ninterface IFeswap {\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address dst, uint rawAmount) external returns (bool);\r\n}\r\n\r\ncontract FeswMultiVester {\r\n    using SafeMath for uint128;\r\n\r\n    struct VesterInfo {\r\n        uint128 vestingAmount;\r\n        uint32 vestingBegin;\r\n        uint32 vestingCliff;\r\n        uint32 vestingEnd;\r\n        uint32 lastClaimTime;\r\n    }\r\n\r\n    address public Fesw;\r\n    address public owner;\r\n    address public recipient;\r\n \r\n    uint64 public numTotalVester;\r\n    uint64 public noVesterClaimable;\r\n\r\n   // Mapping VesterInfoID to the Vester\r\n    mapping (uint64 => VesterInfo) public allVesters;\r\n\r\n    constructor(address Fesw_, address recipient_) {    \r\n        owner = msg.sender;\r\n        Fesw = Fesw_;\r\n        recipient = recipient_;\r\n    }\r\n\r\n    receive() external payable { }  \r\n\r\n    function setOwner(address owner_) public {\r\n        require(msg.sender == owner, 'Owner not allowed');\r\n        owner = owner_;\r\n    }\r\n\r\n    function setRecipient(address recipient_) public {\r\n        require(msg.sender == recipient, 'Recipient not allowed');\r\n        recipient = recipient_;\r\n    }\r\n\r\n    function deployVester(  uint vestingAmount_,\r\n                            uint vestingBegin_,\r\n                            uint vestingCliff_,\r\n                            uint vestingEnd_) public {\r\n\r\n        require(msg.sender == owner, 'Deploy not allowed');\r\n        require(vestingAmount_ > 0, 'Wrong p0');\r\n        require(uint32(vestingBegin_) > block.timestamp, 'Wrong p1');\r\n        require(uint32(vestingCliff_) > uint32(vestingBegin_), 'Wrong p2');\r\n        require(uint32(vestingEnd_) > uint32(vestingCliff_), 'Wrong p3');\r\n\r\n        // Prepare vesterInfo infomation\r\n        VesterInfo memory vesterInfo;\r\n\r\n        vesterInfo.vestingAmount    = uint128(vestingAmount_);\r\n        vesterInfo.vestingBegin     = uint32(vestingBegin_);\r\n        vesterInfo.vestingCliff     = uint32(vestingCliff_);\r\n        vesterInfo.vestingEnd       = uint32(vestingEnd_);\r\n        vesterInfo.lastClaimTime    = uint32(vestingBegin_);\r\n\r\n        allVesters[numTotalVester] = vesterInfo;\r\n        numTotalVester += 1;\r\n    }\r\n\r\n    function claim() public {\r\n        VesterInfo storage vesterInfo = allVesters[noVesterClaimable];\r\n\r\n        require(vesterInfo.vestingAmount > 0, 'Not claimable');\r\n        require(block.timestamp >= vesterInfo.vestingCliff, 'Not time yet');\r\n        uint amount;\r\n        if (block.timestamp >= vesterInfo.vestingEnd) {\r\n            noVesterClaimable += 1;                                 // Next vester could be non-available\r\n            if(noVesterClaimable == numTotalVester) {               // for last vester, claim all\r\n                amount = IFeswap(Fesw).balanceOf(address(this));\r\n            } else {\r\n                amount = vesterInfo.vestingAmount.mul(vesterInfo.vestingEnd - vesterInfo.lastClaimTime) / (vesterInfo.vestingEnd - vesterInfo.vestingBegin);\r\n            }\r\n        } else {\r\n            amount = vesterInfo.vestingAmount.mul(uint32(block.timestamp) - vesterInfo.lastClaimTime) / (vesterInfo.vestingEnd - vesterInfo.vestingBegin);\r\n            vesterInfo.lastClaimTime = uint32(block.timestamp);\r\n        }\r\n        IFeswap(Fesw).transfer(recipient, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Fesw_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Fesw\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"allVesters\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"vestingAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"vestingBegin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vestingCliff\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vestingEnd\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastClaimTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingBegin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingCliff_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingEnd_\",\"type\":\"uint256\"}],\"name\":\"deployVester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noVesterClaimable\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTotalVester\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"setRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FeswMultiVester","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"0000000000000000000000004269eaec0710b874ea55e2aedc8fb66223522bbe000000000000000000000000603770d6e4fb1a66845d28955068f10d610f35f8","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3ece19ed4c208a255276ff27eab3cb95dceed1fd0982997f99b64f38e034ec16"}]}