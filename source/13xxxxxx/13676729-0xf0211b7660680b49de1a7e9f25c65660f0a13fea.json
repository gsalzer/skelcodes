{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT AND GPL-3.0\r\n// File: OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/access/IAccessControl.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n// File: OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/utils/Context.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/utils/Strings.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/access/AccessControl.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/MotionSettings.sol\r\n\r\n// SPDX-FileCopyrightText: 2021 Lido <info@lido.fi>\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n/// @author psirex\r\n/// @notice Provides methods to update motion duration, objections threshold, and limit of active motions of Easy Track\r\ncontract MotionSettings is AccessControl {\r\n    // -------------\r\n    // EVENTS\r\n    // -------------\r\n    event MotionDurationChanged(uint256 _motionDuration);\r\n    event MotionsCountLimitChanged(uint256 _newMotionsCountLimit);\r\n    event ObjectionsThresholdChanged(uint256 _newThreshold);\r\n\r\n    // -------------\r\n    // ERRORS\r\n    // -------------\r\n\r\n    string private constant ERROR_VALUE_TOO_SMALL = \"VALUE_TOO_SMALL\";\r\n    string private constant ERROR_VALUE_TOO_LARGE = \"VALUE_TOO_LARGE\";\r\n\r\n    // ------------\r\n    // CONSTANTS\r\n    // ------------\r\n    /// @notice Upper bound for motionsCountLimit variable.\r\n    uint256 public constant MAX_MOTIONS_LIMIT = 24;\r\n\r\n    /// @notice Upper bound for objectionsThreshold variable.\r\n    /// @dev Stored in basis points (1% = 100)\r\n    uint256 public constant MAX_OBJECTIONS_THRESHOLD = 500;\r\n\r\n    /// @notice Lower bound for motionDuration variable\r\n    uint256 public constant MIN_MOTION_DURATION = 48 hours;\r\n\r\n    /// ------------------\r\n    /// STORAGE VARIABLES\r\n    /// ------------------\r\n\r\n    /// @notice Percent from total supply of governance tokens required to reject motion.\r\n    /// @dev Value stored in basis points: 1% == 100.\r\n    uint256 public objectionsThreshold;\r\n\r\n    /// @notice Max count of active motions\r\n    uint256 public motionsCountLimit;\r\n\r\n    /// @notice Minimal time required to pass before enacting of motion\r\n    uint256 public motionDuration;\r\n\r\n    // ------------\r\n    // CONSTRUCTOR\r\n    // ------------\r\n    constructor(\r\n        address _admin,\r\n        uint256 _motionDuration,\r\n        uint256 _motionsCountLimit,\r\n        uint256 _objectionsThreshold\r\n    ) {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\r\n        _setMotionDuration(_motionDuration);\r\n        _setMotionsCountLimit(_motionsCountLimit);\r\n        _setObjectionsThreshold(_objectionsThreshold);\r\n    }\r\n\r\n    // ------------------\r\n    // EXTERNAL METHODS\r\n    // ------------------\r\n\r\n    /// @notice Sets the minimal time required to pass before enacting of motion\r\n    function setMotionDuration(uint256 _motionDuration) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        _setMotionDuration(_motionDuration);\r\n    }\r\n\r\n    /// @notice Sets percent from total supply of governance tokens required to reject motion\r\n    function setObjectionsThreshold(uint256 _objectionsThreshold)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        _setObjectionsThreshold(_objectionsThreshold);\r\n    }\r\n\r\n    /// @notice Sets max count of active motions.\r\n    function setMotionsCountLimit(uint256 _motionsCountLimit)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        _setMotionsCountLimit(_motionsCountLimit);\r\n    }\r\n\r\n    function _setMotionDuration(uint256 _motionDuration) internal {\r\n        require(_motionDuration >= MIN_MOTION_DURATION, ERROR_VALUE_TOO_SMALL);\r\n        motionDuration = _motionDuration;\r\n        emit MotionDurationChanged(_motionDuration);\r\n    }\r\n\r\n    function _setObjectionsThreshold(uint256 _objectionsThreshold) internal {\r\n        require(_objectionsThreshold <= MAX_OBJECTIONS_THRESHOLD, ERROR_VALUE_TOO_LARGE);\r\n        objectionsThreshold = _objectionsThreshold;\r\n        emit ObjectionsThresholdChanged(_objectionsThreshold);\r\n    }\r\n\r\n    function _setMotionsCountLimit(uint256 _motionsCountLimit) internal {\r\n        require(_motionsCountLimit <= MAX_MOTIONS_LIMIT, ERROR_VALUE_TOO_LARGE);\r\n        motionsCountLimit = _motionsCountLimit;\r\n        emit MotionsCountLimitChanged(_motionsCountLimit);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IEVMScriptFactory.sol\r\n\r\n// SPDX-FileCopyrightText: 2021 Lido <info@lido.fi>\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/// @author psirex\r\n/// @notice Interface which every EVMScript factory used in EasyTrack contract has to implement\r\ninterface IEVMScriptFactory {\r\n    function createEVMScript(address _creator, bytes memory _evmScriptCallData)\r\n        external\r\n        returns (bytes memory);\r\n}\r\n\r\n// File: contracts/libraries/BytesUtils.sol\r\n\r\n// SPDX-FileCopyrightText: 2021 Lido <info@lido.fi>\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/// @author psirex\r\n/// @notice Contains methods to extract primitive types from bytes\r\nlibrary BytesUtils {\r\n    function bytes24At(bytes memory data, uint256 location) internal pure returns (bytes24 result) {\r\n        uint256 word = uint256At(data, location);\r\n        assembly {\r\n            result := word\r\n        }\r\n    }\r\n\r\n    function addressAt(bytes memory data, uint256 location) internal pure returns (address result) {\r\n        uint256 word = uint256At(data, location);\r\n        assembly {\r\n            result := shr(\r\n                96,\r\n                and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000)\r\n            )\r\n        }\r\n    }\r\n\r\n    function uint32At(bytes memory _data, uint256 _location) internal pure returns (uint32 result) {\r\n        uint256 word = uint256At(_data, _location);\r\n\r\n        assembly {\r\n            result := shr(\r\n                224,\r\n                and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\r\n            )\r\n        }\r\n    }\r\n\r\n    function uint256At(bytes memory data, uint256 location) internal pure returns (uint256 result) {\r\n        assembly {\r\n            result := mload(add(data, add(0x20, location)))\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/EVMScriptPermissions.sol\r\n\r\n// SPDX-FileCopyrightText: 2021 Lido <info@lido.fi>\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n/// @author psirex\r\n/// @notice Provides methods to convinient work with permissions bytes\r\n/// @dev Permissions - is a list of tuples (address, bytes4) encoded into a bytes representation.\r\n/// Each tuple (address, bytes4) describes a method allowed to be called by EVMScript\r\nlibrary EVMScriptPermissions {\r\n    using BytesUtils for bytes;\r\n\r\n    // -------------\r\n    // CONSTANTS\r\n    // -------------\r\n\r\n    /// Bytes size of SPEC_ID in EVMScript\r\n    uint256 private constant SPEC_ID_SIZE = 4;\r\n\r\n    /// Size of the address type in bytes\r\n    uint256 private constant ADDRESS_SIZE = 20;\r\n\r\n    /// Bytes size of calldata length in EVMScript\r\n    uint256 private constant CALLDATA_LENGTH_SIZE = 4;\r\n\r\n    /// Bytes size of method selector\r\n    uint256 private constant METHOD_SELECTOR_SIZE = 4;\r\n\r\n    /// Bytes size of one item in permissions\r\n    uint256 private constant PERMISSION_SIZE = ADDRESS_SIZE + METHOD_SELECTOR_SIZE;\r\n\r\n    // ------------------\r\n    // INTERNAL METHODS\r\n    // ------------------\r\n\r\n    /// @notice Validates that passed EVMScript calls only methods allowed in permissions.\r\n    /// @dev Returns false if provided permissions are invalid (has a wrong length or empty)\r\n    function canExecuteEVMScript(bytes memory _permissions, bytes memory _evmScript)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        uint256 location = SPEC_ID_SIZE; // first 4 bytes reserved for SPEC_ID\r\n        if (!isValidPermissions(_permissions) || _evmScript.length <= location) {\r\n            return false;\r\n        }\r\n\r\n        while (location < _evmScript.length) {\r\n            (bytes24 methodToCall, uint32 callDataLength) = _getNextMethodId(_evmScript, location);\r\n            if (!_hasPermission(_permissions, methodToCall)) {\r\n                return false;\r\n            }\r\n            location += ADDRESS_SIZE + CALLDATA_LENGTH_SIZE + callDataLength;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @notice Validates that bytes with permissions not empty and has correct length\r\n    function isValidPermissions(bytes memory _permissions) internal pure returns (bool) {\r\n        return _permissions.length > 0 && _permissions.length % PERMISSION_SIZE == 0;\r\n    }\r\n\r\n    // Retrieves bytes24 which describes tuple (address, bytes4)\r\n    // from EVMScript starting from _location position\r\n    function _getNextMethodId(bytes memory _evmScript, uint256 _location)\r\n        private\r\n        pure\r\n        returns (bytes24, uint32)\r\n    {\r\n        address recipient = _evmScript.addressAt(_location);\r\n        uint32 callDataLength = _evmScript.uint32At(_location + ADDRESS_SIZE);\r\n        uint32 functionSelector =\r\n            _evmScript.uint32At(_location + ADDRESS_SIZE + CALLDATA_LENGTH_SIZE);\r\n        return (bytes24(uint192(functionSelector)) | bytes20(recipient), callDataLength);\r\n    }\r\n\r\n    // Validates that passed _methodToCall contained in permissions\r\n    function _hasPermission(bytes memory _permissions, bytes24 _methodToCall)\r\n        private\r\n        pure\r\n        returns (bool)\r\n    {\r\n        uint256 location = 0;\r\n        while (location < _permissions.length) {\r\n            bytes24 permission = _permissions.bytes24At(location);\r\n            if (permission == _methodToCall) {\r\n                return true;\r\n            }\r\n            location += PERMISSION_SIZE;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n// File: contracts/EVMScriptFactoriesRegistry.sol\r\n\r\n// SPDX-FileCopyrightText: 2021 Lido <info@lido.fi>\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n/// @author psirex\r\n/// @notice Provides methods to add/remove EVMScript factories\r\n/// and contains an internal method for the convenient creation of EVMScripts\r\ncontract EVMScriptFactoriesRegistry is AccessControl {\r\n    using EVMScriptPermissions for bytes;\r\n\r\n    // -------------\r\n    // EVENTS\r\n    // -------------\r\n\r\n    event EVMScriptFactoryAdded(address indexed _evmScriptFactory, bytes _permissions);\r\n    event EVMScriptFactoryRemoved(address indexed _evmScriptFactory);\r\n\r\n    // ------------\r\n    // STORAGE VARIABLES\r\n    // ------------\r\n\r\n    /// @notice List of allowed EVMScript factories\r\n    address[] public evmScriptFactories;\r\n\r\n    // Position of the EVMScript factory in the `evmScriptFactories` array,\r\n    // plus 1 because index 0 means a value is not in the set.\r\n    mapping(address => uint256) internal evmScriptFactoryIndices;\r\n\r\n    /// @notice Permissions of current list of allowed EVMScript factories.\r\n    mapping(address => bytes) public evmScriptFactoryPermissions;\r\n\r\n    // ------------\r\n    // CONSTRUCTOR\r\n    // ------------\r\n    constructor(address _admin) {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\r\n    }\r\n\r\n    // ------------------\r\n    // EXTERNAL METHODS\r\n    // ------------------\r\n\r\n    /// @notice Adds new EVMScript Factory to the list of allowed EVMScript factories with given permissions.\r\n    /// Be careful about factories and their permissions added via this method. Only reviewed and tested\r\n    /// factories must be added via this method.\r\n    function addEVMScriptFactory(address _evmScriptFactory, bytes memory _permissions)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(_permissions.isValidPermissions(), \"INVALID_PERMISSIONS\");\r\n        require(!_isEVMScriptFactory(_evmScriptFactory), \"EVM_SCRIPT_FACTORY_ALREADY_ADDED\");\r\n        evmScriptFactories.push(_evmScriptFactory);\r\n        evmScriptFactoryIndices[_evmScriptFactory] = evmScriptFactories.length;\r\n        evmScriptFactoryPermissions[_evmScriptFactory] = _permissions;\r\n        emit EVMScriptFactoryAdded(_evmScriptFactory, _permissions);\r\n    }\r\n\r\n    /// @notice Removes EVMScript factory from the list of allowed EVMScript factories\r\n    /// @dev To delete a EVMScript factory from the rewardPrograms array in O(1),\r\n    /// we swap the element to delete with the last one in the array, and then remove\r\n    /// the last element (sometimes called as 'swap and pop').\r\n    function removeEVMScriptFactory(address _evmScriptFactory)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        uint256 index = _getEVMScriptFactoryIndex(_evmScriptFactory);\r\n        uint256 lastIndex = evmScriptFactories.length - 1;\r\n\r\n        if (index != lastIndex) {\r\n            address lastEVMScriptFactory = evmScriptFactories[lastIndex];\r\n            evmScriptFactories[index] = lastEVMScriptFactory;\r\n            evmScriptFactoryIndices[lastEVMScriptFactory] = index + 1;\r\n        }\r\n\r\n        evmScriptFactories.pop();\r\n        delete evmScriptFactoryIndices[_evmScriptFactory];\r\n        delete evmScriptFactoryPermissions[_evmScriptFactory];\r\n        emit EVMScriptFactoryRemoved(_evmScriptFactory);\r\n    }\r\n\r\n    /// @notice Returns current list of EVMScript factories\r\n    function getEVMScriptFactories() external view returns (address[] memory) {\r\n        return evmScriptFactories;\r\n    }\r\n\r\n    /// @notice Returns if passed address are listed as EVMScript factory in the registry\r\n    function isEVMScriptFactory(address _maybeEVMScriptFactory) external view returns (bool) {\r\n        return _isEVMScriptFactory(_maybeEVMScriptFactory);\r\n    }\r\n\r\n    // ------------------\r\n    // INTERNAL METHODS\r\n    // ------------------\r\n\r\n    /// @notice Creates EVMScript using given EVMScript factory\r\n    /// @dev Checks permissions of resulting EVMScript and reverts with error\r\n    /// if script tries to call methods not listed in permissions\r\n    function _createEVMScript(\r\n        address _evmScriptFactory,\r\n        address _creator,\r\n        bytes memory _evmScriptCallData\r\n    ) internal returns (bytes memory _evmScript) {\r\n        require(_isEVMScriptFactory(_evmScriptFactory), \"EVM_SCRIPT_FACTORY_NOT_FOUND\");\r\n        _evmScript = IEVMScriptFactory(_evmScriptFactory).createEVMScript(\r\n            _creator,\r\n            _evmScriptCallData\r\n        );\r\n        bytes memory permissions = evmScriptFactoryPermissions[_evmScriptFactory];\r\n        require(permissions.canExecuteEVMScript(_evmScript), \"HAS_NO_PERMISSIONS\");\r\n    }\r\n\r\n    // ------------------\r\n    // PRIVATE METHODS\r\n    // ------------------\r\n\r\n    function _getEVMScriptFactoryIndex(address _evmScriptFactory)\r\n        private\r\n        view\r\n        returns (uint256 _index)\r\n    {\r\n        _index = evmScriptFactoryIndices[_evmScriptFactory];\r\n        require(_index > 0, \"EVM_SCRIPT_FACTORY_NOT_FOUND\");\r\n        _index -= 1;\r\n    }\r\n\r\n    function _isEVMScriptFactory(address _maybeEVMScriptFactory) private view returns (bool) {\r\n        return evmScriptFactoryIndices[_maybeEVMScriptFactory] > 0;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IEVMScriptExecutor.sol\r\n\r\n// SPDX-FileCopyrightText: 2021 Lido <info@lido.fi>\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/// @notice Interface of EVMScript executor used by EasyTrack\r\ninterface IEVMScriptExecutor {\r\n    function executeEVMScript(bytes memory _evmScript) external returns (bytes memory);\r\n}\r\n\r\n// File: OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/security/Pausable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: contracts/EasyTrack.sol\r\n\r\n// SPDX-FileCopyrightText: 2021 Lido <info@lido.fi>\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IMiniMeToken {\r\n    function balanceOfAt(address _owner, uint256 _blockNumber) external pure returns (uint256);\r\n\r\n    function totalSupplyAt(uint256 _blockNumber) external view returns (uint256);\r\n}\r\n\r\n/// @author psirex\r\n/// @notice Contains main logic of Easy Track\r\ncontract EasyTrack is Pausable, AccessControl, MotionSettings, EVMScriptFactoriesRegistry {\r\n    struct Motion {\r\n        uint256 id;\r\n        address evmScriptFactory;\r\n        address creator;\r\n        uint256 duration;\r\n        uint256 startDate;\r\n        uint256 snapshotBlock;\r\n        uint256 objectionsThreshold;\r\n        uint256 objectionsAmount;\r\n        bytes32 evmScriptHash;\r\n    }\r\n\r\n    // -------------\r\n    // EVENTS\r\n    // -------------\r\n    event MotionCreated(\r\n        uint256 indexed _motionId,\r\n        address _creator,\r\n        address indexed _evmScriptFactory,\r\n        bytes _evmScriptCallData,\r\n        bytes _evmScript\r\n    );\r\n    event MotionObjected(\r\n        uint256 indexed _motionId,\r\n        address indexed _objector,\r\n        uint256 _weight,\r\n        uint256 _newObjectionsAmount,\r\n        uint256 _newObjectionsAmountPct\r\n    );\r\n    event MotionRejected(uint256 indexed _motionId);\r\n    event MotionCanceled(uint256 indexed _motionId);\r\n    event MotionEnacted(uint256 indexed _motionId);\r\n    event EVMScriptExecutorChanged(address indexed _evmScriptExecutor);\r\n\r\n    // -------------\r\n    // ERRORS\r\n    // -------------\r\n    string private constant ERROR_ALREADY_OBJECTED = \"ALREADY_OBJECTED\";\r\n    string private constant ERROR_NOT_ENOUGH_BALANCE = \"NOT_ENOUGH_BALANCE\";\r\n    string private constant ERROR_NOT_CREATOR = \"NOT_CREATOR\";\r\n    string private constant ERROR_MOTION_NOT_PASSED = \"MOTION_NOT_PASSED\";\r\n    string private constant ERROR_UNEXPECTED_EVM_SCRIPT = \"UNEXPECTED_EVM_SCRIPT\";\r\n    string private constant ERROR_MOTION_NOT_FOUND = \"MOTION_NOT_FOUND\";\r\n    string private constant ERROR_MOTIONS_LIMIT_REACHED = \"MOTIONS_LIMIT_REACHED\";\r\n\r\n    // -------------\r\n    // ROLES\r\n    // -------------\r\n    bytes32 public constant PAUSE_ROLE = keccak256(\"PAUSE_ROLE\");\r\n    bytes32 public constant UNPAUSE_ROLE = keccak256(\"UNPAUSE_ROLE\");\r\n    bytes32 public constant CANCEL_ROLE = keccak256(\"CANCEL_ROLE\");\r\n\r\n    // -------------\r\n    // CONSTANTS\r\n    // -------------\r\n\r\n    // Stores 100% in basis points\r\n    uint256 internal constant HUNDRED_PERCENT = 10000;\r\n\r\n    // ------------\r\n    // STORAGE VARIABLES\r\n    // ------------\r\n\r\n    /// @notice List of active motions\r\n    Motion[] public motions;\r\n\r\n    // Id of the lastly created motion\r\n    uint256 internal lastMotionId;\r\n\r\n    /// @notice Address of governanceToken which implements IMiniMeToken interface\r\n    IMiniMeToken public governanceToken;\r\n\r\n    /// @notice Address of current EVMScriptExecutor\r\n    IEVMScriptExecutor public evmScriptExecutor;\r\n\r\n    // Position of the motion in the `motions` array, plus 1\r\n    // because index 0 means a value is not in the set.\r\n    mapping(uint256 => uint256) internal motionIndicesByMotionId;\r\n\r\n    /// @notice Stores if motion with given id has been objected from given address.\r\n    mapping(uint256 => mapping(address => bool)) public objections;\r\n\r\n    // ------------\r\n    // CONSTRUCTOR\r\n    // ------------\r\n    constructor(\r\n        address _governanceToken,\r\n        address _admin,\r\n        uint256 _motionDuration,\r\n        uint256 _motionsCountLimit,\r\n        uint256 _objectionsThreshold\r\n    )\r\n        EVMScriptFactoriesRegistry(_admin)\r\n        MotionSettings(_admin, _motionDuration, _motionsCountLimit, _objectionsThreshold)\r\n    {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\r\n        _setupRole(PAUSE_ROLE, _admin);\r\n        _setupRole(UNPAUSE_ROLE, _admin);\r\n        _setupRole(CANCEL_ROLE, _admin);\r\n\r\n        governanceToken = IMiniMeToken(_governanceToken);\r\n    }\r\n\r\n    // ------------------\r\n    // EXTERNAL METHODS\r\n    // ------------------\r\n\r\n    /// @notice Creates new motion\r\n    /// @param _evmScriptFactory Address of EVMScript factory registered in Easy Track\r\n    /// @param _evmScriptCallData Encoded call data of EVMScript factory\r\n    /// @return _newMotionId Id of created motion\r\n    function createMotion(address _evmScriptFactory, bytes memory _evmScriptCallData)\r\n        external\r\n        whenNotPaused\r\n        returns (uint256 _newMotionId)\r\n    {\r\n        require(motions.length < motionsCountLimit, ERROR_MOTIONS_LIMIT_REACHED);\r\n\r\n        Motion storage newMotion = motions.push();\r\n        _newMotionId = ++lastMotionId;\r\n\r\n        newMotion.id = _newMotionId;\r\n        newMotion.creator = msg.sender;\r\n        newMotion.startDate = block.timestamp;\r\n        newMotion.snapshotBlock = block.number;\r\n        newMotion.duration = motionDuration;\r\n        newMotion.objectionsThreshold = objectionsThreshold;\r\n        newMotion.evmScriptFactory = _evmScriptFactory;\r\n        motionIndicesByMotionId[_newMotionId] = motions.length;\r\n\r\n        bytes memory evmScript =\r\n            _createEVMScript(_evmScriptFactory, msg.sender, _evmScriptCallData);\r\n        newMotion.evmScriptHash = keccak256(evmScript);\r\n\r\n        emit MotionCreated(\r\n            _newMotionId,\r\n            msg.sender,\r\n            _evmScriptFactory,\r\n            _evmScriptCallData,\r\n            evmScript\r\n        );\r\n    }\r\n\r\n    /// @notice Enacts motion with given id\r\n    /// @param _motionId Id of motion to enact\r\n    /// @param _evmScriptCallData Encoded call data of EVMScript factory. Same as passed on the creation\r\n    /// of motion with the given motion id. Transaction reverts if EVMScript factory call data differs\r\n    function enactMotion(uint256 _motionId, bytes memory _evmScriptCallData)\r\n        external\r\n        whenNotPaused\r\n    {\r\n        Motion storage motion = _getMotion(_motionId);\r\n        require(motion.startDate + motion.duration <= block.timestamp, ERROR_MOTION_NOT_PASSED);\r\n\r\n        address creator = motion.creator;\r\n        bytes32 evmScriptHash = motion.evmScriptHash;\r\n        address evmScriptFactory = motion.evmScriptFactory;\r\n\r\n        _deleteMotion(_motionId);\r\n        emit MotionEnacted(_motionId);\r\n\r\n        bytes memory evmScript = _createEVMScript(evmScriptFactory, creator, _evmScriptCallData);\r\n        require(evmScriptHash == keccak256(evmScript), ERROR_UNEXPECTED_EVM_SCRIPT);\r\n\r\n        evmScriptExecutor.executeEVMScript(evmScript);\r\n    }\r\n\r\n    /// @notice Submits an objection from `governanceToken` holder.\r\n    /// @param _motionId Id of motion to object\r\n    function objectToMotion(uint256 _motionId) external {\r\n        Motion storage motion = _getMotion(_motionId);\r\n        require(!objections[_motionId][msg.sender], ERROR_ALREADY_OBJECTED);\r\n        objections[_motionId][msg.sender] = true;\r\n\r\n        uint256 snapshotBlock = motion.snapshotBlock;\r\n        uint256 objectorBalance = governanceToken.balanceOfAt(msg.sender, snapshotBlock);\r\n        require(objectorBalance > 0, ERROR_NOT_ENOUGH_BALANCE);\r\n\r\n        uint256 totalSupply = governanceToken.totalSupplyAt(snapshotBlock);\r\n        uint256 newObjectionsAmount = motion.objectionsAmount + objectorBalance;\r\n        uint256 newObjectionsAmountPct = (HUNDRED_PERCENT * newObjectionsAmount) / totalSupply;\r\n\r\n        emit MotionObjected(\r\n            _motionId,\r\n            msg.sender,\r\n            objectorBalance,\r\n            newObjectionsAmount,\r\n            newObjectionsAmountPct\r\n        );\r\n\r\n        if (newObjectionsAmountPct < motion.objectionsThreshold) {\r\n            motion.objectionsAmount = newObjectionsAmount;\r\n        } else {\r\n            _deleteMotion(_motionId);\r\n            emit MotionRejected(_motionId);\r\n        }\r\n    }\r\n\r\n    /// @notice Cancels motion with given id\r\n    /// @param _motionId Id of motion to cancel\r\n    /// @dev Method reverts if it is called with not existed _motionId\r\n    function cancelMotion(uint256 _motionId) external {\r\n        Motion storage motion = _getMotion(_motionId);\r\n        require(motion.creator == msg.sender, ERROR_NOT_CREATOR);\r\n        _deleteMotion(_motionId);\r\n        emit MotionCanceled(_motionId);\r\n    }\r\n\r\n    /// @notice Cancels all motions with given ids\r\n    /// @param _motionIds Ids of motions to cancel\r\n    function cancelMotions(uint256[] memory _motionIds) external onlyRole(CANCEL_ROLE) {\r\n        for (uint256 i = 0; i < _motionIds.length; ++i) {\r\n            if (motionIndicesByMotionId[_motionIds[i]] > 0) {\r\n                _deleteMotion(_motionIds[i]);\r\n                emit MotionCanceled(_motionIds[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Cancels all active motions\r\n    function cancelAllMotions() external onlyRole(CANCEL_ROLE) {\r\n        uint256 motionsCount = motions.length;\r\n        while (motionsCount > 0) {\r\n            motionsCount -= 1;\r\n            uint256 motionId = motions[motionsCount].id;\r\n            _deleteMotion(motionId);\r\n            emit MotionCanceled(motionId);\r\n        }\r\n    }\r\n\r\n    /// @notice Sets new EVMScriptExecutor\r\n    /// @param _evmScriptExecutor Address of new EVMScriptExecutor\r\n    function setEVMScriptExecutor(address _evmScriptExecutor)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        evmScriptExecutor = IEVMScriptExecutor(_evmScriptExecutor);\r\n        emit EVMScriptExecutorChanged(_evmScriptExecutor);\r\n    }\r\n\r\n    /// @notice Pauses Easy Track if it isn't paused.\r\n    /// Paused Easy Track can't create and enact motions\r\n    function pause() external whenNotPaused onlyRole(PAUSE_ROLE) {\r\n        _pause();\r\n    }\r\n\r\n    /// @notice Unpauses Easy Track if it is paused\r\n    function unpause() external whenPaused onlyRole(UNPAUSE_ROLE) {\r\n        _unpause();\r\n    }\r\n\r\n    /// @notice Returns if an _objector can submit an objection to motion with id equals to _motionId or not\r\n    /// @param _motionId Id of motion to check opportunity to object\r\n    /// @param _objector Address of objector\r\n    function canObjectToMotion(uint256 _motionId, address _objector) external view returns (bool) {\r\n        Motion storage motion = _getMotion(_motionId);\r\n        uint256 balance = governanceToken.balanceOfAt(_objector, motion.snapshotBlock);\r\n        return balance > 0 && !objections[_motionId][_objector];\r\n    }\r\n\r\n    /// @notice Returns list of active motions\r\n    function getMotions() external view returns (Motion[] memory) {\r\n        return motions;\r\n    }\r\n\r\n    /// @notice Returns motion with the given id\r\n    /// @param _motionId Id of motion to retrieve\r\n    function getMotion(uint256 _motionId) external view returns (Motion memory) {\r\n        return _getMotion(_motionId);\r\n    }\r\n\r\n    // -------\r\n    // PRIVATE METHODS\r\n    // -------\r\n\r\n    // Removes motion from list of active moitons\r\n    // To delete a motion from the moitons array in O(1), we swap the element to delete with the last one in\r\n    // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n    function _deleteMotion(uint256 _motionId) private {\r\n        uint256 index = motionIndicesByMotionId[_motionId] - 1;\r\n        uint256 lastIndex = motions.length - 1;\r\n\r\n        if (index != lastIndex) {\r\n            Motion storage lastMotion = motions[lastIndex];\r\n            motions[index] = lastMotion;\r\n            motionIndicesByMotionId[lastMotion.id] = index + 1;\r\n        }\r\n\r\n        motions.pop();\r\n        delete motionIndicesByMotionId[_motionId];\r\n    }\r\n\r\n    // Returns motion with given id if it exists\r\n    function _getMotion(uint256 _motionId) private view returns (Motion storage) {\r\n        uint256 _motionIndex = motionIndicesByMotionId[_motionId];\r\n        require(_motionIndex > 0, ERROR_MOTION_NOT_FOUND);\r\n        return motions[_motionIndex - 1];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_motionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_motionsCountLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_objectionsThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_evmScriptExecutor\",\"type\":\"address\"}],\"name\":\"EVMScriptExecutorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_evmScriptFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_permissions\",\"type\":\"bytes\"}],\"name\":\"EVMScriptFactoryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_evmScriptFactory\",\"type\":\"address\"}],\"name\":\"EVMScriptFactoryRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_motionId\",\"type\":\"uint256\"}],\"name\":\"MotionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_motionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_evmScriptFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_evmScriptCallData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_evmScript\",\"type\":\"bytes\"}],\"name\":\"MotionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_motionDuration\",\"type\":\"uint256\"}],\"name\":\"MotionDurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_motionId\",\"type\":\"uint256\"}],\"name\":\"MotionEnacted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_motionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_objector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newObjectionsAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newObjectionsAmountPct\",\"type\":\"uint256\"}],\"name\":\"MotionObjected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_motionId\",\"type\":\"uint256\"}],\"name\":\"MotionRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMotionsCountLimit\",\"type\":\"uint256\"}],\"name\":\"MotionsCountLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newThreshold\",\"type\":\"uint256\"}],\"name\":\"ObjectionsThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CANCEL_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MOTIONS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_OBJECTIONS_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_MOTION_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNPAUSE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evmScriptFactory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_permissions\",\"type\":\"bytes\"}],\"name\":\"addEVMScriptFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_motionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_objector\",\"type\":\"address\"}],\"name\":\"canObjectToMotion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelAllMotions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_motionId\",\"type\":\"uint256\"}],\"name\":\"cancelMotion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_motionIds\",\"type\":\"uint256[]\"}],\"name\":\"cancelMotions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evmScriptFactory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_evmScriptCallData\",\"type\":\"bytes\"}],\"name\":\"createMotion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMotionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_motionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_evmScriptCallData\",\"type\":\"bytes\"}],\"name\":\"enactMotion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"evmScriptExecutor\",\"outputs\":[{\"internalType\":\"contract IEVMScriptExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"evmScriptFactories\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"evmScriptFactoryPermissions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEVMScriptFactories\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_motionId\",\"type\":\"uint256\"}],\"name\":\"getMotion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"evmScriptFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"objectionsThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"objectionsAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"evmScriptHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct EasyTrack.Motion\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMotions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"evmScriptFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"objectionsThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"objectionsAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"evmScriptHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct EasyTrack.Motion[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceToken\",\"outputs\":[{\"internalType\":\"contract IMiniMeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maybeEVMScriptFactory\",\"type\":\"address\"}],\"name\":\"isEVMScriptFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"motionDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"motions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"evmScriptFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"objectionsThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"objectionsAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"evmScriptHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"motionsCountLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_motionId\",\"type\":\"uint256\"}],\"name\":\"objectToMotion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"objections\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"objectionsThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evmScriptFactory\",\"type\":\"address\"}],\"name\":\"removeEVMScriptFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evmScriptExecutor\",\"type\":\"address\"}],\"name\":\"setEVMScriptExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_motionDuration\",\"type\":\"uint256\"}],\"name\":\"setMotionDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_motionsCountLimit\",\"type\":\"uint256\"}],\"name\":\"setMotionsCountLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_objectionsThreshold\",\"type\":\"uint256\"}],\"name\":\"setObjectionsThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EasyTrack","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005a98fcbea516cf06857215779fd812ca3bef1b320000000000000000000000002a61d3ba5030ef471c74f612962c7367eca3a62d000000000000000000000000000000000000000000000000000000000003f480000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000032","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ecdb8428956cdd9ad9c235db202faec40e0ba95a4aed08dfb9c3e1dd93d2bf2c"}]}