{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Snap.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// www.snaptoken.finance\\n\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMWX0kdooolllllooooodxOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMWXkdlc:;:::cccccccc::;;;;cokXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMW0dc;:cccccccccccccccccccccc:;cdKWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMWk::ccccccccccccccccccccccccccc:;;o0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMWk;:ccccccccccccccccccccccccccccccc;;oXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMK:,ccccccccccccccccccccccccccccccccc:;:OWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMWd,:ccccccccccccccccccccccccccccccccccc:;xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMO:;ccccccccccccccccccccccccccccccccccccc;:0MMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMXc,:cccccc::ccc::cccc:ccccccccccccccccccc::0MMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMKdc,,::cccc:;::::::::c:;;:ccccccccccccccccc;cKMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMWo,::;,;ccc:;;::::::::cc:;;:cccccccccccccccc;dWMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMNo,;,;;';cc::;;,,;,,;;;::::;:cccccccccccccc:;kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMO::;'.,;:ccc:;,;;;;;:;,,,::::c::::ccccc:::c;cKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMO;::;,;c:::cccc::;,,,,,'.';::c:,,::::c:::::;oWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMNo,c;,:::::::cc:::,..''...,;;;;;;;;::::::::,dWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMWo'::,:c::;::::::cc:;,,..,;;,,;;,,;;:::;;;;;xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMO,':::ccc:;;;:cccccc::::c:::;;;''',,,;;;;;':0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMWO;';,,:ccccc:;::::cccccccccc;;c:,,,''...;::oKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMXx,,:c;,:c:cccc;,;:ccccc:::cc::cc;';::;;,';d0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMWNK0kd;,,;c:,;c::::c:;;:cccc::,,;:ccc:;,,:cccc:;xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//0Oxdooc::;,;:::c:',c;;:c:;;:cccccc:;;;;;ccc:,,;cccc;oXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//;,;;:cccc:::;;ccc,.';;:c;;:c::::::cccc;;;;;;;;:c:;;oKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//ccc:::ccccc:;:ccc:. .';c;,::;,,;;;;::::::::cccc;':ONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//cccccccccccc:::ccc'  .,c:;:c:::::::;,,;;:;;::;;,lXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//ccccccccccccc:;:cc,.  .:c:ccccc:;;;;,,::;,;;;,,oXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//ccccc;;:ccccc;;:cc;.   'cccccccc::;;,;::;:::;;oXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//cc:,,',:::cc:,;ccc:.   .;ccccccccccccccc:,,ckKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//:,.',;:::::;,;cccc:.... .:cccccccc:::cc:'..l0XNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//..,:,:c:c:;,;ccccc:'';.  ...',,,;;;;:cc,.  .':lONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//..,,;:cc:,,;cc;;:c:',c,.         ..'''..    ...,:d0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//::;,,,,,',:cc:,,:c:,;c:;,,'....       .'''..''';;.,cdkKNNWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//..',:::;,,;;::;;:c:;::::;,,;,..  ..  ..;:cccc:::c:;;;,,;;coxONWMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//,,'',;::c:;;;,,',::;:c:,',:;...  ...',..;cccccccccc;,''''''';cdONMMMMMMMMMMMMMMMMMMMMMMMMM\\n//ccc::::cccccc:::;;,',c,.,::'.,;.  ';',;'.,,;;;;::cc:::cccc:::c:;lkXMMMMMMMMMMMMMMMMMMMMMMM\\n//ccccccccccccccccc:;'';',:;,'',;,..',,,,;,;;;:cc:::::ccccccccccccc:lOWMMMMMMMMMMMMMMMMMMMMM\\n//cccccccccccccccccccc;,,;,,::::::::::cc::;;;;,,,'...';:ccccc:ccccc:,,xWMMMMMMMMMMMMMMMMMMMM\\n//:::cccccccccccccccccc::::cccccccccccc:::::::::::;;;;;:::cccccccccc:',OMMMMMMMMMMMMMMMMMMMM\\n//:::cccccccccccccccccc::cccccccccccccccccccccccccccccc:;,;c:ccccccccc;c0WMMMMMMMMMMMMMMMMMM\\n//:::cccccccccccccccccc;,:c:cccccccccccccccccccccccccccc:,':cccccccccc:;:0WMMMMMMMMMMMMMMMMM\\n//::ccccccccccccccccccc;,:c:ccccccccccccccccccccccccccccc:',cccccccccc::;:OWMMMMMMMMMMMMMMMM\\n//::ccccccccccccccccccc;,::::ccccccccccccccccccccccccccccc,':c:ccccccc::c;cKMMMMMMMMMMMMMMMM\\n\\n// Next generation tokenomics:\\n//\\n// - Inflationary on buy pressure - 8% of the buy pressure rewards to holders in native tokens\\n// - Deflationary on sell pressure - 11% of the sell pressure is sold for eth and\\n//      - 8% + 1% (deflationary) is sold for buyback and burn of the native tokens to organically rising price floor\\n//      - 2% is sold for marketing to push this project further\\n//\\n// This token has rewards as RFI with 20% tax but in reality it has half that value.\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\n\\ncontract Snap is Context, IERC20, Ownable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    string private _name = 'SNAP!';\\n    string private _symbol = 'SNAP!';\\n    uint8 private _decimals = 9;\\n\\n    uint256 private constant MAX_UINT256 = ~uint256(0);\\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 100_000_000_000_000 * 10**9;\\n    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\\n\\n    uint256 public constant MAG = 10 ** 9;\\n    uint256 public rateOfChange = MAG;\\n\\n    uint256 private _totalSupply;\\n    uint256 public _gonsPerFragment;\\n\\n    mapping (address => uint256) public _gonBalances;\\n    mapping (address => uint256) public _excludedBalances;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    mapping (address => bool) private _isExcludedFromFee;\\n    mapping (address => bool) private _isExcludedFromReward;\\n    mapping (address => bool) private _isBlackListedBot;\\n    mapping (address => bool) private uniswapV2Pairs;\\n    address[] private _blackListedBots;\\n\\n    uint256 private _taxFee = 8;\\n    uint256 private _marketingFee = 2;\\n    uint256 private _buyBackFee = _taxFee + 1;\\n    uint256 private _swapEth = 1 * 10**16;\\n    uint256 private _swapImpact = 10;\\n    uint256 private launchTime;\\n\\n    uint256 private _previousTaxFee = _taxFee;\\n    uint256 private _previousMarketingFee = _marketingFee;\\n    uint256 private _previousBuyBackFee = _buyBackFee;\\n\\n    address payable private _marketingWalletAddress;\\n    address private immutable _deadWalletAddress = 0x000000000000000000000000000000000000dEaD;\\n\\n    IUniswapV2Router02 public uniswapV2Router;\\n\\n    bool inSwapAndLiquify = false;\\n    bool public swapAndLiquifyEnabled = true;\\n\\n    bool public tradingOpen = false;\\n\\n    uint256 private _maxTxAmount = INITIAL_FRAGMENTS_SUPPLY.div(200);\\n\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 ethReceived,\\n        uint256 tokensIntoLiqudity\\n    );\\n\\n    event SwapETHForTokens(\\n        uint256 amountIn,\\n        address[] path\\n    );\\n\\n    event SwapTokensForETH(\\n        uint256 amountIn,\\n        address[] path\\n    );\\n\\n    modifier lockTheSwap {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n\\n    constructor (address marketingWalletAddress) {\\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\\n        _gonBalances[_msgSender()] = TOTAL_GONS;\\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\n\\n        // PancakeSwap: 0x10ED43C718714eb63d5aA57B78B54704E256024E\\n        // Uniswap V2: 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n        // Sushi: 0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\n        uniswapV2Pairs[_uniswapV2Pair] = true;\\n        uniswapV2Router = _uniswapV2Router;\\n\\n        // Exclude owner and this contract from fee\\n        _marketingWalletAddress = payable(marketingWalletAddress);\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[_marketingWalletAddress] = true;\\n\\n        _isExcludedFromReward[_uniswapV2Pair] = true;\\n        _isExcludedFromReward[address(this)] = true;\\n\\n        _isBlackListedBot[address(0xa1ceC245c456dD1bd9F2815a6955fEf44Eb4191b)] = true;\\n        _blackListedBots.push(address(0xa1ceC245c456dD1bd9F2815a6955fEf44Eb4191b));\\n\\n        _isBlackListedBot[address(0x27F9Adb26D532a41D97e00206114e429ad58c679)] = true;\\n        _blackListedBots.push(address(0x27F9Adb26D532a41D97e00206114e429ad58c679));\\n\\n        _isBlackListedBot[address(0x9282dc5c422FA91Ff2F6fF3a0b45B7BF97CF78E7)] = true;\\n        _blackListedBots.push(address(0x9282dc5c422FA91Ff2F6fF3a0b45B7BF97CF78E7));\\n\\n        _isBlackListedBot[address(0xfad95B6089c53A0D1d861eabFaadd8901b0F8533)] = true;\\n        _blackListedBots.push(address(0xfad95B6089c53A0D1d861eabFaadd8901b0F8533));\\n\\n        _isBlackListedBot[address(0xfe9d99ef02E905127239E85A611c29ad32c31c2F)] = true;\\n        _blackListedBots.push(address(0xfe9d99ef02E905127239E85A611c29ad32c31c2F));\\n\\n        _isBlackListedBot[address(0x59341Bc6b4f3Ace878574b05914f43309dd678c7)] = true;\\n        _blackListedBots.push(address(0x59341Bc6b4f3Ace878574b05914f43309dd678c7));\\n\\n        _isBlackListedBot[address(0x136F4B5b6A306091b280E3F251fa0E21b1280Cd5)] = true;\\n        _blackListedBots.push(address(0x136F4B5b6A306091b280E3F251fa0E21b1280Cd5));\\n\\n        _isBlackListedBot[address(0xf1CA09CE745bfa38258b26cd839ef0E8DE062A40)] = true;\\n        _blackListedBots.push(address(0xf1CA09CE745bfa38258b26cd839ef0E8DE062A40));\\n\\n        _isBlackListedBot[address(0x8719c2829944150F59E3428CA24f6Fc018E43890)] = true;\\n        _blackListedBots.push(address(0x8719c2829944150F59E3428CA24f6Fc018E43890));\\n\\n        _isBlackListedBot[address(0xa8E0771582EA33A9d8e6d2Ccb65A8D10Bd0Ea517)] = true;\\n        _blackListedBots.push(address(0xa8E0771582EA33A9d8e6d2Ccb65A8D10Bd0Ea517));\\n\\n        _isBlackListedBot[address(0xF3DaA7465273587aec8b2d2706335e06068ccce4)] = true;\\n        _blackListedBots.push(address(0xF3DaA7465273587aec8b2d2706335e06068ccce4));\\n\\n        _isBlackListedBot[address(0x9272A2c7083Da2B1C2F0739d9655D1A09764DEAD)] = true;\\n        _blackListedBots.push(address(0x9272A2c7083Da2B1C2F0739d9655D1A09764DEAD));\\n\\n        emit Transfer(address(0), _msgSender(), _totalSupply);\\n    }\\n\\n    //to receive ETH from uniswapV2Router when swapping\\n    receive() external payable {}\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_isExcludedFromReward[account]) {\\n            return _excludedBalances[account];\\n        } else {\\n            return _gonBalances[account].div(_gonsPerFragment);\\n        }\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function setExcludeFromFee(address account, bool excluded) external onlyOwner() {\\n        _isExcludedFromFee[account] = excluded;\\n    }\\n\\n    function setExcludeFromReward(address account, bool excluded) public onlyOwner() {\\n        if (excluded) {\\n            require(!_isExcludedFromReward[account], \\\"Account is already excluded\\\");\\n            _isExcludedFromReward[account] = true;\\n            _excludedBalances[account] = _gonBalances[account].div(_gonsPerFragment);\\n            _gonBalances[account] = 0;\\n        } else {\\n            require(_isExcludedFromReward[account], \\\"Account is not excluded\\\");\\n            _isExcludedFromReward[account] = false;\\n            _gonBalances[account] = _excludedBalances[account].mul(_gonsPerFragment);\\n            _excludedBalances[account] = 0;\\n        }\\n    }\\n\\n    function addBotToBlackList(address account) external onlyOwner() {\\n        require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not blacklist Uniswap router.');\\n        require(!_isBlackListedBot[account], \\\"Account is already blacklisted\\\");\\n        _isBlackListedBot[account] = true;\\n        _blackListedBots.push(account);\\n    }\\n\\n    function removeBotFromBlackList(address account) external onlyOwner() {\\n        require(_isBlackListedBot[account], \\\"Account is not blacklisted\\\");\\n        for (uint256 i = 0; i < _blackListedBots.length; i++) {\\n            if (_blackListedBots[i] == account) {\\n                _blackListedBots[i] = _blackListedBots[_blackListedBots.length - 1];\\n                _isBlackListedBot[account] = false;\\n                _blackListedBots.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function removeAllFee() private {\\n        if (_taxFee == 0 && _marketingFee == 0 && _buyBackFee == 0) return;\\n\\n        _previousTaxFee = _taxFee;\\n        _previousMarketingFee = _marketingFee;\\n        _previousBuyBackFee = _buyBackFee;\\n\\n        _taxFee = 0;\\n        _marketingFee = 0;\\n        _buyBackFee = 0;\\n    }\\n\\n    function restoreAllFee() private {\\n        _taxFee = _previousTaxFee;\\n        _marketingFee = _previousMarketingFee;\\n        _buyBackFee = _previousBuyBackFee;\\n    }\\n\\n    function isExcludedFromFee(address account) public view returns(bool) {\\n        return _isExcludedFromFee[account];\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function rebasePlus(uint256 _amount) private {\\n        _totalSupply = _totalSupply.add(_amount.mul(_taxFee).div(100));\\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) private {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"ERC20: Transfer amount must be greater than zero\\\");\\n        require(!_isBlackListedBot[sender], \\\"You have no power here!\\\");\\n        require(!_isBlackListedBot[recipient], \\\"You have no power here!\\\");\\n        require(!_isBlackListedBot[tx.origin], \\\"You have no power here!\\\");\\n\\n        if (sender != owner() && recipient != owner()) {\\n            require(amount <= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount.\\\");\\n            // sorry about that, but sniper bots nowadays are buying multiple times, hope I have something more robust to prevent them to nuke the launch :-(\\n            if (uniswapV2Pairs[sender]) {\\n                require(tradingOpen, \\\"Wait for opened trading\\\");\\n                require(balanceOf(recipient) <= _maxTxAmount, \\\"Already bought maxTxAmount, wait till check off\\\");\\n                require(balanceOf(tx.origin) <= _maxTxAmount, \\\"Already bought maxTxAmount, wait till check off\\\");\\n\\n                if (block.timestamp == launchTime) {\\n                    _isBlackListedBot[recipient] = true;\\n                    _blackListedBots.push(recipient);\\n                }\\n            }\\n\\n            // do not trigger dext warning when transferring from deployer\\n            if (!inSwapAndLiquify && swapAndLiquifyEnabled && !uniswapV2Pairs[sender]) {\\n                swapTokens(amount, uniswapV2Pairs[recipient]);\\n            }\\n        }\\n\\n        //indicates if fee should be deducted from transfer\\n        bool takeFee = true;\\n\\n        //if any account belongs to _isExcludedFromFee account then remove the fee\\n        if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){\\n            takeFee = false;\\n        }\\n\\n        if (sender != owner() && recipient != owner() && uniswapV2Pairs[sender]) {\\n            rebasePlus(amount);\\n            takeFee = false;\\n        }\\n\\n        _tokenTransfer(sender, recipient, amount, takeFee);\\n    }\\n\\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) internal {\\n        if (!takeFee)\\n            removeAllFee();\\n\\n        uint256 burnAmount = amount.mul(_buyBackFee.add(_marketingFee)).div(100);\\n        uint256 transferAmount = amount.sub(burnAmount);\\n\\n        uint256 gonTotalValue = amount.mul(_gonsPerFragment);\\n        uint256 gonValue = transferAmount.mul(_gonsPerFragment);\\n        uint256 gonBurnValue = burnAmount.mul(_gonsPerFragment);\\n\\n        if (!_isExcludedFromReward[sender]) {\\n            _gonBalances[sender] = _gonBalances[sender].sub(gonTotalValue);\\n        } else {\\n            _excludedBalances[sender] = _excludedBalances[sender].sub(amount);\\n        }\\n\\n        if (!_isExcludedFromReward[recipient]) {\\n            _gonBalances[recipient] = _gonBalances[recipient].add(gonValue);\\n        } else {\\n            _excludedBalances[recipient] = _excludedBalances[recipient].add(transferAmount);\\n        }\\n\\n        _excludedBalances[address(this)] = _excludedBalances[address(this)].add(burnAmount);\\n\\n        emit Transfer(sender, recipient, transferAmount);\\n        emit Transfer(sender, address(this), burnAmount);\\n\\n        if (!takeFee)\\n            restoreAllFee();\\n    }\\n\\n    event SwapAndLiquifyFailed(bytes failErr);\\n\\n    function swapTokens(uint256 amount, bool isSell) private lockTheSwap {\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        uint256 contractEthBalance = address(this).balance;\\n\\n        uint256 maxAddedToSlipPage = amount.mul(_swapImpact).div(100);\\n        if (isSell && contractTokenBalance > maxAddedToSlipPage) {\\n            contractTokenBalance = maxAddedToSlipPage;\\n        }\\n        swapTokensForEth(contractTokenBalance);\\n\\n        if (contractEthBalance > _swapEth) {\\n            uint256 toTransfer = contractEthBalance.mul(_marketingFee).div(_marketingFee.add(_buyBackFee));\\n\\n            sendETHToWallet(toTransfer);\\n            swapEthForTokens(address(this), contractEthBalance.sub(toTransfer));\\n        }\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private {\\n        // generate the uniswap pair path of token -> weth\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        // make the swap\\n        try uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        ) {\\n            emit SwapTokensForETH(tokenAmount, path);\\n        } catch (bytes memory e) {\\n            emit SwapAndLiquifyFailed(e);\\n        }\\n    }\\n\\n    function swapEthForTokens(address token, uint256 amount) private {\\n        // generate the uniswap pair path of weth -> token\\n        address[] memory path = new address[](2);\\n        path[0] = uniswapV2Router.WETH();\\n        path[1] = token;\\n\\n        _approve(address(this), address(uniswapV2Router), amount);\\n\\n        // make the swap\\n        try uniswapV2Router.swapExactETHForTokens{value: amount}(\\n            0, // accept any amount of Tokens\\n            path,\\n            _deadWalletAddress,\\n            block.timestamp.add(300)\\n        ) {\\n            emit SwapETHForTokens(amount, path);\\n        } catch (bytes memory e) {\\n            emit SwapAndLiquifyFailed(e);\\n        }\\n    }\\n\\n    function sendETHToWallet(uint256 amount) private {\\n        _marketingWalletAddress.call{value: amount}(\\\"\\\");\\n    }\\n\\n    function openTrading() public onlyOwner() {\\n        tradingOpen = true;\\n        launchTime = block.timestamp;\\n    }\\n\\n    // We are exposing these functions to be able to manual swap and send\\n    // in case the token is highly valued and 5M becomes too much\\n    function manualSwap() external onlyOwner() {\\n        uint256 contractBalance = balanceOf(address(this));\\n        swapTokensForEth(contractBalance);\\n    }\\n\\n    function manualSwapAmount(uint256 amount) public onlyOwner() {\\n        uint256 contractBalance = balanceOf(address(this));\\n        require(contractBalance >= amount, 'contract balance should be greater then amount');\\n\\n        swapTokensForEth(amount);\\n    }\\n\\n    function manualSend() public onlyOwner() {\\n        uint256 contractETHBalance = address(this).balance;\\n        sendETHToWallet(contractETHBalance);\\n    }\\n\\n    function manualSwapAndSend(uint256 amount) external onlyOwner() {\\n        manualSwapAmount(amount);\\n        manualSend();\\n    }\\n\\n    function setSwapAndLiquifyEnabled(bool _swapAndLiquifyEnabled) external onlyOwner(){\\n        swapAndLiquifyEnabled = _swapAndLiquifyEnabled;\\n    }\\n\\n    function _getMaxTxAmount() private view returns(uint256) {\\n        return _maxTxAmount;\\n    }\\n\\n    function _getETHBalance() public view returns(uint256 balance) {\\n        return address(this).balance;\\n    }\\n\\n    function _setTaxFee(uint256 taxFee) external onlyOwner() {\\n        require(taxFee >= 0 && taxFee <= 49, 'taxFee should be in 0 - 49');\\n        _taxFee = taxFee;\\n    }\\n\\n    function _setMarketingFee(uint256 marketingFee) external onlyOwner() {\\n        require(marketingFee >= 0 && marketingFee <= 49, 'marketingFee should be in 0 - 49');\\n        _marketingFee = marketingFee;\\n    }\\n\\n    function _setBuyBackFee(uint256 buyBackFee) external onlyOwner() {\\n        require(buyBackFee >= 0 && buyBackFee <= 49, 'buyBackFee should be in 0 - 49');\\n        _buyBackFee = buyBackFee;\\n    }\\n\\n    function _setMarketingWallet(address payable marketingWalletAddress) external onlyOwner() {\\n        _marketingWalletAddress = marketingWalletAddress;\\n    }\\n\\n    function _setSwapEthLimit(uint256 swapEthLimit) external onlyOwner() {\\n        _swapEth = swapEthLimit;\\n    }\\n\\n    function _setSwapImpact(uint256 swapImpact) external onlyOwner() {\\n        _swapImpact = swapImpact;\\n    }\\n\\n    function _setMainRouter(address router, address _uniswapV2Pair) external onlyOwner() {\\n        uniswapV2Pairs[_uniswapV2Pair] = true;\\n        uniswapV2Router = IUniswapV2Router02(router);\\n        setExcludeFromReward(_uniswapV2Pair, true);\\n    }\\n\\n    function _setLiquidityPair(address _uniswapV2Pair, bool isPair) external onlyOwner() {\\n        uniswapV2Pairs[_uniswapV2Pair] = isPair;\\n        setExcludeFromReward(_uniswapV2Pair, isPair);\\n    }\\n\\n    function _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\\n        require(maxTxAmount >= 10**9 , 'maxTxAmount should be greater than total 1e9');\\n        _maxTxAmount = maxTxAmount;\\n    }\\n\\n    function recoverTokens(uint256 tokenAmount) public virtual onlyOwner() {\\n        _approve(address(this), owner(), tokenAmount);\\n        _transfer(address(this), owner(), tokenAmount);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"failErr\",\"type\":\"bytes\"}],\"name\":\"SwapAndLiquifyFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_excludedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_gonBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_gonsPerFragment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyBackFee\",\"type\":\"uint256\"}],\"name\":\"_setBuyBackFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2Pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPair\",\"type\":\"bool\"}],\"name\":\"_setLiquidityPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Pair\",\"type\":\"address\"}],\"name\":\"_setMainRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"}],\"name\":\"_setMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingWalletAddress\",\"type\":\"address\"}],\"name\":\"_setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"_setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapEthLimit\",\"type\":\"uint256\"}],\"name\":\"_setSwapEthLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapImpact\",\"type\":\"uint256\"}],\"name\":\"_setSwapImpact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"_setTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBotToBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualSwapAndSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateOfChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBotFromBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setExcludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapAndLiquifyEnabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Snap","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e52894d7187903ef634ee9b115a1f6b7334bfe7c","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}