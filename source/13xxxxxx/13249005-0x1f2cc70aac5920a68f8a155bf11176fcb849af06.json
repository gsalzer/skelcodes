{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/BirbStoreV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.22 <0.9.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\n\\r\\ninterface Gen2Contract{\\r\\n  function getTimesMated(uint birbID) external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract BirbStoreV2 is Context, Pausable, Ownable{\\r\\n  address internal Gen2Address;\\r\\n  address internal Gen1Address;\\r\\n\\r\\n  address payable internal communityWallet = payable(0x690d89B461dD2038b3601382b485807eac45741D);\\r\\n  address payable internal smith = payable(0x8fEC7D1Ac56ddAB94A14F8395a19D83387aD2af9); \\r\\n  address payable internal fappablo = payable(0xb72e9541FE46384D6942291F7B11db6bBB7dA956);\\r\\n  address payable internal astronio = payable(0x9cCF31738Efcd642ABbe39202F7BD78f1495B8A4);\\r\\n  address payable internal devasto = payable(0xC6c3fBdE140DdF82723c181Ee390de5b63087411);\\r\\n\\r\\n  uint feePercent = 5;\\r\\n\\r\\n  mapping(uint => uint) public prices;\\r\\n  mapping(uint => address) public owners;\\r\\n  mapping(uint => uint) public expirations;\\r\\n\\r\\n  constructor(address _Gen1Address, address _Gen2Address) {\\r\\n    Gen1Address = _Gen1Address;\\r\\n    Gen2Address = _Gen2Address;\\r\\n  }\\r\\n  \\r\\n  event depositedInStore(uint birbId, uint price, address seller, uint expireBlock);\\r\\n  event removedFromStore(uint birbId, uint price, bool sale, address receiver);\\r\\n\\r\\n  function multiDepositForSale(uint[] memory birbIds, uint[] memory birbPrices, uint expireBlock) external whenNotPaused{\\r\\n    uint i;\\r\\n\\r\\n    require(birbIds.length <= 32,\\\"Too many Birbs\\\");\\r\\n    for(i = 0; i < birbIds.length; i++){\\r\\n      require(birbIds[i] < 16383,\\\"One of the birbs does not exist\\\");\\r\\n      require(Gen2Contract(Gen2Address).getTimesMated(birbIds[i]) == 0,\\\"All Birbs must be virgin\\\");\\r\\n      require(birbPrices[i] > 0 ether && birbPrices[i] < 10000 ether,\\\"Invalid price\\\"); \\r\\n      if(birbIds[i] <= 8192){\\r\\n        require(IERC721(Gen1Address).ownerOf(birbIds[i]) == _msgSender(),\\\"You must own all the Birbs\\\");\\r\\n      }else{\\r\\n        require(IERC721(Gen2Address).ownerOf(birbIds[i]) == _msgSender(),\\\"You must own all the Birbs\\\");\\r\\n      }\\r\\n      prices[birbIds[i]] = birbPrices[i];\\r\\n      owners[birbIds[i]] = _msgSender();\\r\\n      expirations[birbIds[i]] = expireBlock;\\r\\n      emit depositedInStore(birbIds[i], birbPrices[i], _msgSender(), expireBlock);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function sendViaCall(address payable _to, uint amount) internal {\\r\\n      (bool sent, bytes memory data) = _to.call{value: amount}(\\\"\\\");\\r\\n      require(sent, \\\"Failed to send Ether\\\");\\r\\n  }\\r\\n\\r\\n  function multiBuy(uint[] memory birbIds) external payable whenNotPaused{\\r\\n    uint i;\\r\\n    uint totalPrice = 0;\\r\\n      \\r\\n    require(birbIds.length <= 32,\\\"Too many Birbs\\\");\\r\\n    for(i = 0; i < birbIds.length; i++){\\r\\n      require(birbIds[i] < 16383,\\\"One of the Birbs does not exists\\\");\\r\\n      require(prices[birbIds[i]] > 0,\\\"One of the Birbs has an invalid price\\\");\\r\\n      require(expirations[birbIds[i]] > block.number || expirations[birbIds[i]] == 0,\\\"One of the Birbs is not on sale anymore\\\");\\r\\n      require(Gen2Contract(Gen2Address).getTimesMated(birbIds[i]) == 0,\\\"One of the Birbs is not virgin\\\");\\r\\n      if(birbIds[i] <= 8192){\\r\\n        require(IERC721(Gen1Address).ownerOf(birbIds[i]) == owners[birbIds[i]],\\\"One of the Birbs changed owner\\\");\\r\\n      }else{\\r\\n        require(IERC721(Gen2Address).ownerOf(birbIds[i]) == owners[birbIds[i]],\\\"One of the Birbs changed owner\\\");\\r\\n      }\\r\\n      totalPrice = totalPrice + prices[birbIds[i]];\\r\\n    }\\r\\n\\r\\n    require(msg.value == totalPrice,\\\"Invalid msg.value\\\");\\r\\n\\r\\n    address owner;\\r\\n    for(i = 0; i < birbIds.length; i++){\\r\\n      uint amountAfterFee = prices[birbIds[i]] - (prices[birbIds[i]]*5)/100;\\r\\n      owner = owners[birbIds[i]];\\r\\n      owners[birbIds[i]] = address(0x0);\\r\\n      prices[birbIds[i]] = 0;\\r\\n      if(birbIds[i] <= 8192){\\r\\n        IERC721(Gen1Address).safeTransferFrom(owner, _msgSender(), birbIds[i]);\\r\\n      }else{\\r\\n        IERC721(Gen2Address).safeTransferFrom(owner, _msgSender(), birbIds[i]);\\r\\n      }\\r\\n      sendViaCall(payable (owner),amountAfterFee);\\r\\n      emit removedFromStore(birbIds[i], prices[birbIds[i]], true, _msgSender());\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function removeBirbsFromSale(uint[] memory birbIds) external whenNotPaused{\\r\\n    uint i;\\r\\n    require(birbIds.length <= 32,\\\"Too many Birbs\\\");\\r\\n    for(i = 0; i < birbIds.length; i++){\\r\\n      require(birbIds[i] < 16383,\\\"One of the Birbs does not exists\\\");\\r\\n      require(owners[birbIds[i]] == _msgSender(),\\\"You must be the owner of all the Birbs\\\");\\r\\n      if(birbIds[i] <= 8192){\\r\\n        require(IERC721(Gen1Address).ownerOf(birbIds[i]) == owners[birbIds[i]],\\\"One of the Birbs changed owner\\\");\\r\\n      }else{\\r\\n        require(IERC721(Gen2Address).ownerOf(birbIds[i]) == owners[birbIds[i]],\\\"One of the Birbs changed owner\\\");\\r\\n      }\\r\\n      owners[birbIds[i]] = address(0x0);\\r\\n      prices[birbIds[i]] = 0;\\r\\n      emit removedFromStore(birbIds[i], prices[birbIds[i]], false, _msgSender());\\r\\n    } \\r\\n  }\\r\\n\\r\\n  function withdrawFunds() external {\\r\\n    uint halfBalance = address(this).balance / 2;\\r\\n    uint halfOfHalfBalance = halfBalance / 2;\\r\\n    uint thirdOfHalfOfHalfBalance = halfOfHalfBalance / 3;\\r\\n    communityWallet.transfer(halfBalance);\\r\\n    smith.transfer(halfOfHalfBalance);\\r\\n    fappablo.transfer(thirdOfHalfOfHalfBalance);\\r\\n    astronio.transfer(thirdOfHalfOfHalfBalance);\\r\\n    devasto.transfer(thirdOfHalfOfHalfBalance);\\r\\n  }\\r\\n\\r\\n  function pause() external onlyOwner whenNotPaused{\\r\\n    _pause();\\r\\n  }\\r\\n\\r\\n  function unpause() external onlyOwner whenPaused{\\r\\n    _unpause();\\r\\n  }\\r\\n\\r\\n  function setFees(uint _feePercent) external onlyOwner{\\r\\n    feePercent = _feePercent;\\r\\n  }\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Gen1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Gen2Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"birbId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expireBlock\",\"type\":\"uint256\"}],\"name\":\"depositedInStore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"birbId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sale\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"removedFromStore\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expirations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"birbIds\",\"type\":\"uint256[]\"}],\"name\":\"multiBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"birbIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"birbPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"expireBlock\",\"type\":\"uint256\"}],\"name\":\"multiDepositForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"birbIds\",\"type\":\"uint256[]\"}],\"name\":\"removeBirbsFromSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BirbStoreV2","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000091f7bb6900d65d004a659f34205beafc3b4e136c0000000000000000000000008a5da222a428d46ff46bd7cc914d6aabd11d364f","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}