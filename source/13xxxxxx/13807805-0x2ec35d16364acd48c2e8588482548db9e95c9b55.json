{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// \r\n// OpenZeppelin Contracts v4.3.2 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.3.2 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @title nonReentrant module to prevent recursive calling of functions\r\n * @dev See https://medium.com/coinmonks/protect-your-solidity-smart-contracts-from-reentrancy-attacks-9972c3af7c21\r\n */\r\n \r\nabstract contract nonReentrant {\r\n    bool private _reentryKey = false;\r\n    modifier reentryLock {\r\n        require(!_reentryKey, \"cannot reenter a locked function\");\r\n        _reentryKey = true;\r\n        _;\r\n        _reentryKey = false;\r\n    }\r\n}\r\n\r\n\r\ninterface Ethalien {\r\n    \r\n    function tokensOfWalletOwner(address _owner) external view returns (uint[] memory);\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n    \r\n}\r\n\r\ninterface BabyEthalien {\r\n    \r\n    function publicMint(uint256 _quantity, address _breederAddress) external ;\r\n    \r\n}\r\n\r\ninterface Star {\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n    \r\n}\r\n\r\n// ***********************************\r\n//           Ethalien Breeding\r\n// ***********************************\r\n/*\r\n *     \r\n *\r\n*/\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract ethAlienBreeding is Ownable, nonReentrant{\r\n\t\r\n\tEthalien public ethalien;\r\n\tBabyEthalien public ethbaby;\r\n    Star public star;\r\n    bool mintState = false;\r\n\t\r\n\tmapping(uint => bool) public hasBreeded;\r\n    \r\n    function setEthAlienAddress(address _ethAlienAddress) public onlyOwner {\r\n        ethalien = Ethalien(_ethAlienAddress);\r\n    }\r\n\t\r\n    function setEthBabyAddress(address _ethBabyAddress) public onlyOwner {\r\n        ethbaby = BabyEthalien(_ethBabyAddress);\r\n    } \r\n\r\n    function setStarAddress(address _starAddress) public onlyOwner {\r\n        star = Star(_starAddress);\r\n    }\r\n\r\n\r\n    function changeMintState() public onlyOwner {\r\n        mintState = !mintState;\r\n    } \r\n\r\n\r\n\t// in website mint function, user must run a call to Ethalien contract to\r\n\t// approve(THIS CONTRACT ADDRESS, token ID)\r\n\t\r\n\tfunction alienOrgy(uint256[] memory tokenIds) public {\r\n\t\trequire(msg.sender == tx.origin, \"No transaction from smart contracts!\");\r\n        require(mintState == true, \"Breeding must be active\" );\r\n        require(tokenIds.length % 2 == 0, \"Odd number of Aliens!\");\r\n\r\n\t\tfor (uint i = 0; i < tokenIds.length/2; i++) {\r\n\r\n            breedAlien(tokenIds[i*2], tokenIds[i*2+1]);\r\n\r\n        }\r\n\t\t\r\n\r\n\t}\r\n\t\r\n function breedAlien(uint A, uint B) internal reentryLock{\r\n        require(hasBreeded[A] == false && hasBreeded[B] == false, \"Invalid breeding pair\");\r\n           require(ethalien.ownerOf(A) == msg.sender, \"Claimant is not the owner\");\r\n   require(ethalien.ownerOf(B) == msg.sender, \"Claimant is not the owner\");\r\n              \r\n        hasBreeded[A] = true;\r\n        hasBreeded[B] = true;\r\n\r\n      star.transferFrom(msg.sender ,0x000000000000000000000000000000000000dEaD, 300 ether) ;\r\n        ethbaby.publicMint(1, msg.sender);\r\n                \r\n    } \r\n\r\n\r\n    function checkaliens(uint A) public view returns (bool){\r\n        return hasBreeded[A];\r\n    }\r\n\r\n    function checkState() public view returns (bool){\r\n        return mintState;\r\n    }\r\n\r\n    \r\n\t\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"alienOrgy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeMintState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"}],\"name\":\"checkaliens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethalien\",\"outputs\":[{\"internalType\":\"contract Ethalien\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethbaby\",\"outputs\":[{\"internalType\":\"contract BabyEthalien\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasBreeded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethAlienAddress\",\"type\":\"address\"}],\"name\":\"setEthAlienAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethBabyAddress\",\"type\":\"address\"}],\"name\":\"setEthBabyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_starAddress\",\"type\":\"address\"}],\"name\":\"setStarAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"star\",\"outputs\":[{\"internalType\":\"contract Star\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ethAlienBreeding","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c0e4b810a0100a16783a19fd164f64e42bdd2bdb4710dd68f6ea80a3469fae74"}]}