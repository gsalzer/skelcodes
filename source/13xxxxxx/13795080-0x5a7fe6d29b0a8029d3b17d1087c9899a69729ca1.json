{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Coral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./interfaces/ISharkGame.sol\\\";\\nimport \\\"./interfaces/ISharks.sol\\\";\\nimport \\\"./interfaces/IChum.sol\\\";\\nimport \\\"./interfaces/ICoral.sol\\\";\\nimport \\\"./interfaces/IRandomizer.sol\\\";\\n\\ncontract Coral is ICoral, Ownable, ReentrancyGuard, IERC721Receiver, Pausable {\\n  // struct to store a stake's token, owner, and earning values\\n  struct Stake {\\n    uint16 tokenId;\\n    uint80 value;\\n    uint256 timestamp;\\n    address owner;\\n  }\\n\\n  event TokenStaked(address indexed owner, uint256 indexed tokenId, ISharks.SGTokenType indexed tokenType);\\n  event TokenClaimed(uint256 indexed tokenId, bool indexed unstaked, ISharks.SGTokenType indexed tokenType, uint256 earned);\\n\\n  // reference to the WnD NFT contract\\n  ISharks public sharksNft;\\n  // reference to the WnD NFT contract\\n  ISharkGame public sharkGame;\\n  // reference to the $CHUM contract for minting $CHUM earnings\\n  IChum public chumToken;\\n  // reference to Randomizer\\n  IRandomizer public randomizer;\\n\\n  // count of each type staked\\n  mapping(ISharks.SGTokenType => uint16) public numStaked;\\n  // maps tokenId to stake\\n  mapping(uint16 => Stake) public coral;\\n  // maps types to all tokens staked of a given type\\n  mapping(ISharks.SGTokenType => uint16[]) public coralByType;\\n  // maps tokenId to index in coralByType\\n  mapping(uint16 => uint256) public  coralByTypeIndex;\\n  // any rewards distributed when none of a type are staked\\n  uint256[] public unaccountedRewards = [0, 0, 0];\\n  // amount of $CHUM stolen through fees by species\\n  // minnows never get any but are included for consistency\\n  uint256[] public chumStolen = [0, 0, 0];\\n  // have orcas been staked yet\\n  bool public orcasEnabled = false;\\n\\n  // array indices map to SGTokenType enum entries\\n  // minnows earn 10000 chum per day\\n  // sharks earn 0 chum per day but get fees\\n  // orcas earn 20000 chum per day\\n  uint256[] public DAILY_CHUM_RATES = [10000 ether, 0, 20000 ether];\\n  // wizards must have 2 days worth of $CHUM to unstake or else they're still guarding the tower\\n  uint256 public constant MINIMUM_TO_EXIT = 2 days;\\n  // sharks have a 5% chance of losing all earnings on being unstaked\\n  uint256 public constant SHARK_RISK_CHANCE = 5;\\n  // sharks take a 20% tax on all $CHUM claimed by minnows\\n  uint256 public constant MINNOW_CLAIM_TAX = 20;\\n  // orcas take a 10% tax on all $CHUM claimed by sharks\\n  uint256 public constant SHARK_CLAIM_TAX = 10;\\n  // there will only ever be (roughly) 5 billion $CHUM earned through staking\\n  uint256 public constant MAXIMUM_GLOBAL_CHUM = 5000000000 ether;\\n\\n  // amount of $CHUM earned so far\\n  uint256 public totalChumEarned;\\n  // the last time $CHUM was claimed\\n  uint256 private lastClaimTimestamp;\\n\\n  // emergency rescue to allow unstaking without any checks but without $CHUM\\n  bool public rescueEnabled = false;\\n\\n  /**\\n   */\\n  constructor() {\\n    _pause();\\n  }\\n\\n  /** CRITICAL TO SETUP */\\n\\n  modifier requireContractsSet() {\\n      require(address(sharksNft) != address(0) && address(chumToken) != address(0)\\n        && address(sharkGame) != address(0) && address(randomizer) != address(0), \\\"Contracts not set\\\");\\n      _;\\n  }\\n\\n  function setContracts(address _sharksNft, address _chum, address _sharkGame, address _rand) external onlyOwner {\\n    sharksNft = ISharks(_sharksNft);\\n    chumToken = IChum(_chum);\\n    sharkGame = ISharkGame(_sharkGame);\\n    randomizer = IRandomizer(_rand);\\n  }\\n\\n  /** STAKING */\\n\\n  /**\\n   * adds Wizards and Dragons to the Tower and Flight\\n   * @param account the address of the staker\\n   * @param tokenIds the IDs of the Wizards and Dragons to stake\\n   */\\n  function addManyToCoral(address account, uint16[] calldata tokenIds) external override _updateEarnings nonReentrant {\\n    require(tx.origin == _msgSender() || _msgSender() == address(sharkGame), \\\"Only EOA\\\");\\n    require(account == tx.origin, \\\"account to sender mismatch\\\");\\n    for (uint i = 0; i < tokenIds.length; i++) {\\n      uint16 tokenId = tokenIds[i];\\n      if (_msgSender() != address(sharkGame)) { // dont do this step if its a mint + stake\\n        require(sharksNft.ownerOf(tokenIds[i]) == _msgSender(), \\\"You don't own this token\\\");\\n        sharksNft.transferFrom(_msgSender(), address(this), tokenIds[i]);\\n      } else if (tokenId == 0) {\\n        continue; // there may be gaps in the array for stolen tokens\\n      }\\n\\n      ISharks.SGTokenType tokenType = sharksNft.getTokenType(tokenId);\\n      coral[tokenId] = Stake({\\n        owner: account,\\n        tokenId: uint16(tokenId),\\n        value: uint80(chumStolen[uint8(tokenType)]),\\n        timestamp: block.timestamp\\n      });\\n      coralByTypeIndex[tokenId] = coralByType[tokenType].length;\\n      coralByType[tokenType].push(tokenId);\\n      numStaked[tokenType] += 1;\\n      if (tokenType == ISharks.SGTokenType.ORCA) {\\n        orcasEnabled = true;\\n      }\\n      emit TokenStaked(account, tokenId, tokenType);\\n    }\\n  }\\n\\n  /** CLAIMING / UNSTAKING */\\n\\n  /**\\n   * realize $CHUM earnings and optionally unstake tokens from the Tower / Flight\\n   * to unstake a Wizard it will require it has 2 days worth of $CHUM unclaimed\\n   * @param tokenIds the IDs of the tokens to claim earnings from\\n   * @param unstake whether or not to unstake ALL of the tokens listed in tokenIds\\n   */\\n  function claimManyFromCoral(uint16[] calldata tokenIds, bool unstake) external whenNotPaused _updateEarnings nonReentrant {\\n    require(tx.origin == _msgSender() || _msgSender() == address(sharkGame), \\\"Only EOA\\\");\\n    uint256 owed = 0;\\n    for (uint i = 0; i < tokenIds.length; i++) {\\n      uint16 tokenId = tokenIds[i];\\n      Stake memory stake = coral[tokenId];\\n      require(stake.owner != address(0), \\\"Token is not staked\\\");\\n      uint256 tokenOwed = this.calculateRewards(stake);\\n      ISharks.SGTokenType tokenType = sharksNft.getTokenType(tokenId);\\n\\n      if (unstake) {\\n        // changed to a random orca holder if this token is stolen by an orca\\n        address recipient = _msgSender();\\n        if (tokenType == ISharks.SGTokenType.MINNOW) {\\n          // minnows have a 50% chance of losing all earnings on being unstaked\\n          if (randomizer.random() & 1 == 1) {\\n            uint256 orcasSteal = tokenOwed * 3 / 10;\\n            _payTax(orcasSteal, ISharks.SGTokenType.ORCA);\\n            _payTax(tokenOwed - orcasSteal, ISharks.SGTokenType.SHARK);\\n            tokenOwed = 0;\\n          }\\n        } else if (tokenType == ISharks.SGTokenType.SHARK) {\\n          uint256 seed = randomizer.random();\\n          // 5% chance of orca stealing the shark on unstake\\n          if (orcasEnabled && (seed & 0xFFFF) % 100 < SHARK_RISK_CHANCE) {\\n            // change the recipient to a random orca owner\\n            recipient = this.randomTokenOwner(ISharks.SGTokenType.ORCA, seed);\\n          }\\n        }\\n\\n        delete coral[tokenId];\\n        if (coralByType[tokenType].length > 1) {\\n          coralByTypeIndex[coralByType[tokenType][coralByType[tokenType].length - 1]] = coralByTypeIndex[tokenId];\\n          coralByType[tokenType][coralByTypeIndex[tokenId]] = coralByType[tokenType][coralByType[tokenType].length - 1];\\n        }\\n        coralByType[tokenType].pop();\\n        numStaked[tokenType] -= 1;\\n        // Always transfer last to guard against reentrancy\\n        sharksNft.safeTransferFrom(address(this), recipient, tokenId, \\\"\\\");\\n      } else {\\n        if (tokenType == ISharks.SGTokenType.MINNOW) {\\n          uint256 sharksSteal = tokenOwed * MINNOW_CLAIM_TAX / 100;\\n          _payTax(sharksSteal, ISharks.SGTokenType.SHARK);\\n          tokenOwed -= sharksSteal;\\n        } else if (tokenType == ISharks.SGTokenType.SHARK && orcasEnabled) {\\n          uint256 orcasSteal = tokenOwed * SHARK_CLAIM_TAX / 100;\\n          _payTax(orcasSteal, ISharks.SGTokenType.ORCA);\\n          tokenOwed -= orcasSteal;\\n        }\\n        coral[tokenId] = Stake({\\n          owner: _msgSender(),\\n          tokenId: uint16(tokenId),\\n          value: uint80(chumStolen[uint8(tokenType)]),\\n          timestamp: block.timestamp\\n        }); // reset stake\\n      }\\n      owed += tokenOwed;\\n      emit TokenClaimed(tokenId, unstake, tokenType, owed);\\n    }\\n    chumToken.updateOriginAccess();\\n    if (owed == 0) {\\n      return;\\n    }\\n    chumToken.mint(_msgSender(), owed);\\n  }\\n\\n  function calculateRewards(Stake calldata stake) external view returns (uint256 owed) {\\n    uint64 lastTokenWrite = sharksNft.getTokenWriteBlock(stake.tokenId);\\n    // Must check this, as getTokenTraits will be allowed since this contract is an admin\\n    require(lastTokenWrite < block.number, \\\"hmmmm what doing?\\\");\\n    uint8 tokenType = uint8(sharksNft.getTokenType(stake.tokenId));\\n    uint256 dailyRate = DAILY_CHUM_RATES[tokenType];\\n    if (dailyRate > 0) {\\n      if (totalChumEarned < MAXIMUM_GLOBAL_CHUM) {\\n        owed = (block.timestamp - stake.timestamp) * DAILY_CHUM_RATES[tokenType] / 1 days;\\n      } else if (stake.timestamp > lastClaimTimestamp) {\\n        owed = 0; // $CHUM production stopped already\\n      } else {\\n        owed = (lastClaimTimestamp - stake.timestamp) * DAILY_CHUM_RATES[tokenType] / 1 days; // stop earning additional $CHUM if it's all been earned\\n      }\\n    }\\n    owed += chumStolen[tokenType] - stake.value;\\n  }\\n\\n  /**\\n   * emergency unstake tokens\\n   * @param tokenIds the IDs of the tokens to claim earnings from\\n   */\\n  function rescue(uint16[] calldata tokenIds) external nonReentrant {\\n    require(rescueEnabled, \\\"RESCUE DISABLED\\\");\\n    uint16 tokenId;\\n    ISharks.SGTokenType tokenType;\\n    Stake memory stake;\\n    for (uint i = 0; i < tokenIds.length; i++) {\\n      tokenId = tokenIds[i];\\n      tokenType = sharksNft.getTokenType(tokenId);\\n      stake = coral[tokenId];\\n      require(stake.owner == _msgSender(), \\\"SWIPER, NO SWIPING\\\");\\n      delete coral[tokenId];\\n      if (coralByType[tokenType].length > 1) {\\n        coralByTypeIndex[coralByType[tokenType][coralByType[tokenType].length - 1]] = coralByTypeIndex[tokenId];\\n        coralByType[tokenType][coralByTypeIndex[tokenId]] = coralByType[tokenType][coralByType[tokenType].length - 1];\\n      }\\n      coralByType[tokenType].pop();\\n      numStaked[tokenType] -= 1;\\n      // Always transfer last to guard against reentrancy\\n      sharksNft.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\");\\n      emit TokenClaimed(tokenId, true, tokenType, 0);\\n    }\\n  }\\n\\n  /** ACCOUNTING */\\n\\n  /**\\n   * add $CHUM to claimable pot for the Flight\\n   * @param amount $CHUM to add to the pot\\n   */\\n  function _payTax(uint256 amount, ISharks.SGTokenType tokenType) internal {\\n    if (numStaked[tokenType] == 0) { // if there's no staked sharks/orcas\\n      unaccountedRewards[uint8(tokenType)] += amount; // keep track of $CHUM due to sharks/orcas\\n      return;\\n    }\\n    // makes sure to include any unaccounted $CHUM\\n    chumStolen[uint8(tokenType)] += (amount + unaccountedRewards[uint8(tokenType)]) / numStaked[tokenType];\\n    unaccountedRewards[uint8(tokenType)] = 0;\\n  }\\n\\n  /**\\n   * tracks $CHUM earnings to ensure it stops once 2.5 billion is eclipsed\\n   */\\n  modifier _updateEarnings() {\\n    if (totalChumEarned < MAXIMUM_GLOBAL_CHUM) {\\n      totalChumEarned +=\\n        (block.timestamp - lastClaimTimestamp)\\n        * numStaked[ISharks.SGTokenType.MINNOW]\\n        * DAILY_CHUM_RATES[uint8(ISharks.SGTokenType.MINNOW)] / 1 days\\n      + (block.timestamp - lastClaimTimestamp)\\n        * numStaked[ISharks.SGTokenType.ORCA]\\n        * DAILY_CHUM_RATES[uint8(ISharks.SGTokenType.ORCA)] / 1 days;\\n      lastClaimTimestamp = block.timestamp;\\n    }\\n    _;\\n  }\\n\\n  /** ADMIN */\\n\\n  /**\\n   * allows owner to enable \\\"rescue mode\\\"\\n   * simplifies accounting, prioritizes tokens out in emergency\\n   */\\n  function setRescueEnabled(bool _enabled) external onlyOwner {\\n    rescueEnabled = _enabled;\\n  }\\n\\n  /**\\n   * enables owner to pause / unpause contract\\n   */\\n  function setPaused(bool _paused) external requireContractsSet onlyOwner {\\n    if (_paused) _pause();\\n    else _unpause();\\n  }\\n\\n  /** READ ONLY */\\n\\n  /**\\n   * chooses a random Dragon thief when a newly minted token is stolen\\n   * @param seed a random value to choose a Dragon from\\n   * @return the owner of the randomly selected Dragon thief\\n   */\\n  function randomTokenOwner(ISharks.SGTokenType tokenType, uint256 seed) external view override returns (address) {\\n    uint256 numStakedOfType = numStaked[tokenType];\\n    if (numStakedOfType == 0) {\\n      return address(0x0);\\n    }\\n    uint256 i = (seed & 0xFFFFFFFF) % numStakedOfType; // choose a value from 0 to total rank staked\\n    return coral[coralByType[tokenType][i]].owner;\\n  }\\n\\n  function onERC721Received(\\n        address,\\n        address from,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n      require(from == address(0x0), \\\"Cannot send to Coral directly\\\");\\n      return IERC721Receiver.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IChum.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface IChum {\\n    function mint(address to, uint256 amount) external;\\n    function burn(address from, uint256 amount) external;\\n    function updateOriginAccess() external;\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICoral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ISharks.sol\\\";\\n\\ninterface ICoral {\\n  function addManyToCoral(address account, uint16[] calldata tokenIds) external;\\n  function randomTokenOwner(ISharks.SGTokenType tokenType, uint256 seed) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRandomizer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRandomizer {\\n    function random() external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISharkGame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISharkGame {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISharks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface ISharks is IERC721Enumerable {\\n    // game data storage\\n    enum SGTokenType {\\n        MINNOW,\\n        SHARK,\\n        ORCA\\n    }\\n\\n    struct SGToken {\\n        SGTokenType tokenType;\\n        uint8 base;\\n        uint8 accessory;\\n    }\\n\\n    function minted() external returns (uint16);\\n    function updateOriginAccess(uint16[] memory tokenIds) external;\\n    function mint(address recipient, uint256 seed) external;\\n    function burn(uint256 tokenId) external;\\n    function getMaxTokens() external view returns (uint16);\\n    function getPaidTokens() external view returns (uint16);\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n    function getTokenTraits(uint256 tokenId) external view returns (SGToken memory);\\n    function getTokenWriteBlock(uint256 tokenId) external view returns(uint64);\\n    function getTokenType(uint256 tokenId) external view returns(SGTokenType);\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"enum ISharks.SGTokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"name\":\"TokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum ISharks.SGTokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"name\":\"TokenStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DAILY_CHUM_RATES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_GLOBAL_CHUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_TO_EXIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINNOW_CLAIM_TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHARK_CLAIM_TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHARK_RISK_CHANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"addManyToCoral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint80\",\"name\":\"value\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct Coral.Stake\",\"name\":\"stake\",\"type\":\"tuple\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"owed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chumStolen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chumToken\",\"outputs\":[{\"internalType\":\"contract IChum\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"unstake\",\"type\":\"bool\"}],\"name\":\"claimManyFromCoral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"coral\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint80\",\"name\":\"value\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ISharks.SGTokenType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coralByType\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"coralByTypeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ISharks.SGTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"numStaked\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orcasEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ISharks.SGTokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"randomTokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomizer\",\"outputs\":[{\"internalType\":\"contract IRandomizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sharksNft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chum\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sharkGame\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rand\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setRescueEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharkGame\",\"outputs\":[{\"internalType\":\"contract ISharkGame\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharksNft\",\"outputs\":[{\"internalType\":\"contract ISharks\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalChumEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unaccountedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Coral","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"50","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}