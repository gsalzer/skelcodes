{"status":"1","message":"OK","result":[{"SourceCode":"/** \r\n *  SourceUnit: c:\\Users\\Jad\\Documents\\code\\NFTC\\nftc-monorepo\\blockend\\contracts\\tokens\\ArtCirculationCrowdsale.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [////IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * ////IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: c:\\Users\\Jad\\Documents\\code\\NFTC\\nftc-monorepo\\blockend\\contracts\\tokens\\ArtCirculationCrowdsale.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * ////IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: c:\\Users\\Jad\\Documents\\code\\NFTC\\nftc-monorepo\\blockend\\contracts\\tokens\\ArtCirculationCrowdsale.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: c:\\Users\\Jad\\Documents\\code\\NFTC\\nftc-monorepo\\blockend\\contracts\\tokens\\ArtCirculationCrowdsale.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: c:\\Users\\Jad\\Documents\\code\\NFTC\\nftc-monorepo\\blockend\\contracts\\tokens\\ArtCirculationCrowdsale.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: c:\\Users\\Jad\\Documents\\code\\NFTC\\nftc-monorepo\\blockend\\contracts\\tokens\\ArtCirculationCrowdsale.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n////import \"../IERC20.sol\";\r\n////import \"../../../utils/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: c:\\Users\\Jad\\Documents\\code\\NFTC\\nftc-monorepo\\blockend\\contracts\\tokens\\ArtCirculationCrowdsale.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n////import \"../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n/** \r\n *  SourceUnit: c:\\Users\\Jad\\Documents\\code\\NFTC\\nftc-monorepo\\blockend\\contracts\\tokens\\ArtCirculationCrowdsale.sol\r\n*/\r\n\r\n/////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\n/// @notice access control base class\r\n////import \"../../node_modules/@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/// @notice ERC20 interface class\r\n////import \"../../node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/// @notice ERC20 interface class\r\n////import \"../../node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n/// @notice SafeMath library for uint calculations with overflow protections\r\n////import \"../../node_modules/@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\n/// @notice Security: ReentrancyGuard class\r\n////import \"../../node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\n/**\r\n * @title Crowdsale\r\n * @notice ERC20-ready ICO smart contract for ACT & ACG token\r\n * @author Jad A. Jabbour @ NFT Contemporary\r\n**/\r\ncontract ArtCirculationCrowdsale is\r\n            Ownable,\r\n            ReentrancyGuard\r\n{\r\n    /// @notice using safe math for uints\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Enum representing crowdsale phases\r\n    enum Phase {\r\n        Seed,\r\n        Public1, \r\n        Public2, \r\n        Public3, \r\n        Public4,\r\n        Paused,\r\n        Stopped\r\n    }\r\n\r\n    /// @notice on sale ACT token \r\n    IERC20 private _acToken;\r\n\r\n    /// @notice on sale Governance token \r\n    IERC20 private _gToken;\r\n\r\n    /// @notice Address where funds are collected\r\n    address payable private _wallet;\r\n\r\n    /// @notice The rate per 1 wei of funds received for ACT per phase\r\n    mapping(Phase => uint256) private _actRate;\r\n\r\n    /// @notice The rate per 1 wei of funds received for Governance per phase\r\n    mapping(Phase => uint256) private _gRate;\r\n\r\n    /// @notice Amount of wei raised per Phase\r\n    mapping(Phase => uint256) private _weiRaised;\r\n\r\n    /// @notice Total amount of wei raised\r\n    uint256 private _totWeiRaised;\r\n\r\n    /// @notice the address whitelist for restricted tokens mapped by phase by token\r\n    mapping(Phase => mapping(address => mapping(address => bool))) private _whitelist;\r\n\r\n    /// @notice the address whitelist for restricted tokens mapped by phase by token\r\n    mapping(Phase => mapping(address => bool)) private _shouldWhitelistCheck;\r\n\r\n    /// @notice crowdsale timeframe\r\n    mapping(Phase => uint32) private _openingTime;\r\n    mapping(Phase => uint32) private _closingTime;\r\n\r\n    /// @notice public record of ether transfered to this contract per address per phase\r\n    mapping(Phase => mapping(address => mapping(address => uint))) public record;\r\n\r\n    /// @notice the current phase of the crowdsale\r\n    Phase private _phase;\r\n\r\n    /// @notice whitelist modifier\r\n    modifier requireWhitelist(address token){\r\n        require(token != address(0), 'ACC:Internal error::token address missing');\r\n        if(_shouldWhitelistCheck[_phase][token]){\r\n            require(_whitelist[_phase][token][_msgSender()], 'ACC::Whitelisted buyers only');\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @notice open/close time restriction modifier with phase checker\r\n    modifier openCloseRestrict(){\r\n        require(_phase != Phase.Paused && _phase != Phase.Stopped, 'ACC::Crowdsale is paused or stopped');\r\n        require(block.timestamp >= _openingTime[_phase], 'ACC::Crowdsale has not begun yet'); /* solium-disable-line */\r\n        require(block.timestamp < _closingTime[_phase], 'ACC::Crowdsale has already ended'); /* solium-disable-line */\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     * @param token address of the token contract\r\n     * @param phase the crowdsale phase this purcahse was registered at\r\n    **/\r\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint value, uint amount, address token, Phase phase);\r\n\r\n    /**\r\n     * @notice Event published when a phase is triggered\r\n     * @param phase the crowdsale phase this purcahse was registered at\r\n    **/\r\n    event PhaseTriggered(Phase phase, uint act_rate, uint g_rate);\r\n\r\n    /**\r\n     * @notice constructor\r\n     * @param acToken the crowdsaled ACT token\r\n     * @param gToken the crowdsaled ACG token\r\n     * @param actRate the rate at which the ACT token is being sold per wei @ Seed phase\r\n     * @param gRate the rate at which the ACG token is being sold per wei @ Seed phase\r\n     * @param wallet the wallet that will recieve te funds paid by accounts\r\n     * @param act_whitelist whitelisted addresses for ACT token purchase elligibility @ Seed phase\r\n     * @param g_whitelist whitelisted addresses for governance token purchase elligibility @ Seed phase\r\n     * @param openingAt the opening timestamp for the crowdsale @ Seed phase\r\n     * @param closingAt the closing timestamp for the crowdsale @ Seed phase\r\n    **/\r\n    constructor (\r\n        IERC20 acToken,\r\n        IERC20 gToken,\r\n        uint actRate,\r\n        uint gRate,\r\n        address payable wallet,\r\n        address[] memory act_whitelist,\r\n        address[] memory g_whitelist,\r\n        uint32 openingAt, \r\n        uint32 closingAt \r\n    ) Ownable() ReentrancyGuard() {\r\n        __ArtCirculationCrowdsale_init(acToken, gToken, actRate, gRate, wallet, act_whitelist, g_whitelist, openingAt, closingAt);\r\n    }\r\n\r\n    /**\r\n     * @notice The rate is the conversion between wei and the smallest and indivisible\r\n     * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\r\n     * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\r\n     * @param acToken the crowdsaled ACT token\r\n     * @param gToken the crowdsaled ACG token\r\n     * @param actRate the rate at which the ACT token is being sold per wei @ Seed phase\r\n     * @param gRate the rate at which the ACG token is being sold per wei @ Seed phase\r\n     * @param wallet the wallet that will recieve te funds paid by accounts\r\n     * @param act_whitelist whitelisted addresses for ACT token purchase elligibility @ Seed phase\r\n     * @param g_whitelist whitelisted addresses for governance token purchase elligibility @ Seed phase\r\n     * @param openingAt the opening timestamp for the crowdsale @ Seed phase\r\n     * @param closingAt the closing timestamp for the crowdsale @ Seed phase\r\n    **/\r\n    function __ArtCirculationCrowdsale_init(\r\n        IERC20 acToken,\r\n        IERC20 gToken,\r\n        uint actRate,\r\n        uint gRate,\r\n        address payable wallet,\r\n        address[] memory act_whitelist,\r\n        address[] memory g_whitelist,\r\n        uint32 openingAt, \r\n        uint32 closingAt \r\n    ) internal {\r\n        require(actRate > 0, \"ACC: rate is 0\");\r\n        require(gRate > 0, \"ACC: rate is 0\");\r\n        require(wallet != address(0), \"ACC: wallet is the zero address\");\r\n        require(address(acToken) != address(0), \"ACC: token is the zero address\");\r\n        require(address(gToken) != address(0), \"ACC: token is the zero address\");\r\n        require(openingAt > block.timestamp, \"ACC: invalid seed start time\");\r\n        require(closingAt > openingAt, \"ACC: invalid seed end time\");\r\n\r\n        _phase = Phase.Seed;\r\n        _actRate[_phase] = actRate;\r\n        _gRate[_phase] = gRate;\r\n        _wallet = wallet;\r\n        _acToken = acToken;\r\n        _gToken = gToken;\r\n        _openingTime[_phase] = openingAt;\r\n        _closingTime[_phase] = closingAt;\r\n\r\n        /// @notice lock Seed phase to whitelist\r\n        _shouldWhitelistCheck[_phase][address(acToken)] = true;\r\n        _shouldWhitelistCheck[_phase][address(gToken)] = true;\r\n\r\n        /// @notice populate whitelist for ACT\r\n        for(uint i=0;i<act_whitelist.length;i++){\r\n            _whitelist[_phase][address(_acToken)][act_whitelist[i]] = true;\r\n        }\r\n\r\n        /// @notice populate whitelist for ACG\r\n        for(uint i=0;i<g_whitelist.length;i++){\r\n            _whitelist[_phase][address(_gToken)][g_whitelist[i]] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev fallback function ***DO NOT OVERRIDE***\r\n     * @notice that other contracts will transfer funds with a base gas stipend\r\n     * of 2300, which is not enough to call buyTokens. Consider calling\r\n     * buyTokens directly when purchasing tokens from a contract.\r\n    **/\r\n    receive() external payable {\r\n        revert('ACC: Use buyTokens or buyGTokens');\r\n    }\r\n\r\n    /// @notice gets the current phase of the crowdsale and the open/close time \r\n    function getPhase() public view returns (Phase, uint32, uint32) {\r\n        return (_phase, _openingTime[_phase], _closingTime[_phase]);\r\n    }\r\n\r\n    /**\r\n     * @notice Updates the phase rates and the open/close times and whitelists\r\n     * @param phase the phase ID to set next\r\n     * @param actRate the rate at which the ACT token is being sold per wei @ next phase\r\n     * @param gRate the rate at which the ACG token is being sold per wei @ next phase\r\n     * @param act_whitelist whitelisted addresses for ACT token purchase elligibility @ next phase\r\n     * @param g_whitelist whitelisted addresses for governance token purchase elligibility @ next phase\r\n     * @param openingAt the opening timestamp for the crowdsale @ next phase\r\n     * @param closingAt the closing timestamp for the crowdsale @ next phase\r\n    **/\r\n    function setPhase(\r\n        Phase phase, \r\n        uint actRate,\r\n        uint gRate,\r\n        address[] memory act_whitelist,\r\n        address[] memory g_whitelist,\r\n        uint32 openingAt,\r\n        uint32 closingAt\r\n    ) public onlyOwner{\r\n        if(phase != Phase.Paused && phase != Phase.Stopped){\r\n            require(actRate > 0, \"ACC: rate is 0\");\r\n            require(gRate > 0, \"ACC: rate is 0\");\r\n        }\r\n\r\n        require(openingAt > block.timestamp, \"ACC: invalid phase start time\");\r\n        require(closingAt > openingAt, \"ACC: invalid phase end time\");\r\n        \r\n        /// @notice set phase\r\n        _phase = phase;\r\n\r\n        /// @notice set phase rates\r\n        _actRate[_phase] = actRate;\r\n        _gRate[_phase] = gRate;\r\n\r\n        /// @notice phase timeframe\r\n        _openingTime[_phase] = openingAt; \r\n        _closingTime[_phase] = closingAt;\r\n\r\n        /// @notice lock Seed phase to whitelist\r\n        _shouldWhitelistCheck[_phase][address(_acToken)] = act_whitelist.length > 0;\r\n        _shouldWhitelistCheck[_phase][address(_gToken)] = g_whitelist.length > 0;\r\n\r\n        /// @notice populate whitelist for ACT\r\n        for(uint i=0;i<act_whitelist.length;i++){\r\n            _whitelist[_phase][address(_acToken)][act_whitelist[i]] = true;\r\n        }\r\n\r\n        /// @notice populate whitelist for ACG\r\n        for(uint i=0;i<g_whitelist.length;i++){\r\n            _whitelist[_phase][address(_gToken)][g_whitelist[i]] = true;\r\n        }\r\n\r\n        emit PhaseTriggered(_phase, actRate, gRate); \r\n    }\r\n\r\n    /**\r\n     * @return the tokens being sold.\r\n    **/\r\n    function tokensOnSale() public view returns (IERC20, IERC20) {\r\n        return (_acToken, _gToken);\r\n    }\r\n\r\n    /**\r\n     * @return the address where funds are collected.\r\n    **/\r\n    function collectorWallet() public view returns (address payable) {\r\n        return _wallet;\r\n    }\r\n\r\n    /**\r\n     * @return the number of tokens units a buyer gets per wei.\r\n    **/\r\n    function rates() public view returns (uint, uint) {\r\n        return (_actRate[_phase], _gRate[_phase]);\r\n    }\r\n\r\n    /**\r\n     * @return the amount of wei raised in current phase\r\n    **/\r\n    function phaseWeiRaised() public view returns (uint) {\r\n        return _weiRaised[_phase];\r\n    }    \r\n    \r\n    /**\r\n     * @return the amount of wei raised current phase\r\n    **/\r\n    function totalWeiRaised() public view returns (uint) {\r\n        return _totWeiRaised;\r\n    }\r\n\r\n    /// @return whether an address is whitelisted or not\r\n    function isWhitelisted(address toCheck, address token) public view returns (bool){\r\n        require(toCheck != address(0), 'ACC::Address cannot be 0');\r\n        require(token != address(0), 'ACC::Address cannot be 0');\r\n        return _shouldWhitelistCheck[_phase][token] ? _whitelist[_phase][token][toCheck] : true;\r\n    }\r\n\r\n    /**\r\n     * @notice changes the collector wallet address\r\n    **/\r\n    function changeCollectorWallet(address payable _payable) public onlyOwner {\r\n        require(_payable != address(0), 'ACC:: Address cannot be 0');\r\n        _wallet = _payable;\r\n    }\r\n\r\n    /// @notice adds an address to the whitelist for current phase for specific token\r\n    function addWhitelist(address toAdd, address token) public onlyOwner returns (bool){\r\n        require(toAdd != address(0), 'ACC::Address cannot be 0');\r\n        _whitelist[_phase][token][toAdd] = true;\r\n        return _whitelist[_phase][token][toAdd];\r\n    } \r\n\r\n    /// @notice removes an address to the whitelist for current phase for specific token\r\n    function removeWhitelist(address toRemove, address token) public onlyOwner returns (bool){\r\n        require(toRemove != address(0), 'ACC::Address cannot be 0');\r\n        _whitelist[_phase][token][toRemove] = false;\r\n        return !_whitelist[_phase][token][toRemove];\r\n    } \r\n\r\n    /**\r\n     * @notice buyToken can be called directly as opposed to the payable fallback\r\n     * @dev low level token purchase ***DO NOT OVERRIDE***\r\n     * This function has a non-reentrancy guard, so it shouldn't be called by\r\n     * another `nonReentrant` function.\r\n    **/\r\n    function buyTokens() public nonReentrant openCloseRestrict requireWhitelist(address(_acToken)) payable {\r\n        uint weiAmount = msg.value;\r\n        address beneficiary = _msgSender();\r\n        _preValidatePurchase(beneficiary, weiAmount);\r\n\r\n        uint tokens = _getTokenAmount(weiAmount);\r\n        _totWeiRaised = _totWeiRaised.add(weiAmount);\r\n        _weiRaised[_phase] = _weiRaised[_phase].add(weiAmount);\r\n        _processPurchase(beneficiary, tokens, _acToken);\r\n\r\n        emit TokensPurchased(_msgSender(), beneficiary, weiAmount, tokens, address(_acToken), _phase);\r\n\r\n        _updatePurchasingState(beneficiary, weiAmount, address(_acToken));\r\n        _postValidatePurchase();\r\n    }\r\n\r\n    /**\r\n     * @notice buyGToken can be called directly as opposed to the payable fallback\r\n     * @dev low level token purchase ***DO NOT OVERRIDE***\r\n     * This function has a non-reentrancy guard, so it shouldn't be called by\r\n     * another `nonReentrant` function.\r\n    **/\r\n    function buyGTokens() public nonReentrant openCloseRestrict requireWhitelist(address(_gToken)) payable {\r\n        uint weiAmount = msg.value;\r\n        address beneficiary = _msgSender();\r\n        _preValidatePurchase(beneficiary, weiAmount);\r\n\r\n        uint tokens = _getGTokenAmount(weiAmount);\r\n        _totWeiRaised = _totWeiRaised.add(weiAmount);\r\n        _weiRaised[_phase] = _weiRaised[_phase].add(weiAmount);\r\n        _processPurchase(beneficiary, tokens, _gToken);\r\n\r\n        emit TokensPurchased(_msgSender(), beneficiary, weiAmount, tokens, address(_gToken), _phase);\r\n\r\n        _updatePurchasingState(beneficiary, weiAmount, address(_gToken));\r\n        _postValidatePurchase();\r\n    }\r\n\r\n    /**\r\n     * @notice Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\r\n     * @param beneficiary Address performing the token purchase\r\n     * @param weiAmount Value in wei involved in the purchase\r\n    **/\r\n    function _preValidatePurchase(address beneficiary, uint weiAmount) internal view {\r\n        require(beneficiary != address(0), \"ACC: beneficiary is the zero address\");\r\n        require(weiAmount != 0, \"ACC: weiAmount is 0\");\r\n        this;\r\n    }\r\n\r\n    /**\r\n     * @notice Validation of an executed purchase. and fund forwarding\r\n    **/\r\n    function _postValidatePurchase() internal { /* solium-disable-line */\r\n        /// @notice forward fund to receiver wallet\r\n        _forwardFunds();\r\n    }\r\n\r\n    /**\r\n     * @notice Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\r\n     * its tokens.\r\n     * @param beneficiary Address performing the token purchase\r\n     * @param tokenAmount Number of tokens to be emitted\r\n    **/\r\n    function _deliverTokens(address beneficiary, uint tokenAmount, IERC20 toToken) internal {\r\n        toToken.safeTransfer(beneficiary, tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\r\n     * tokens.\r\n     * @param beneficiary Address receiving the tokens\r\n     * @param tokenAmount Number of tokens to be purchased\r\n    **/\r\n    function _processPurchase(address beneficiary, uint tokenAmount, IERC20 toToken) internal {\r\n        _deliverTokens(beneficiary, tokenAmount, toToken);\r\n    }\r\n\r\n    /**\r\n     * @notice Override for extensions that require an internal state to check for validity\r\n     * @param beneficiary Address receiving the tokens\r\n     * @param weiAmount Value in wei involved in the purchase\r\n     * @param toToken the token purchased by the account\r\n    **/\r\n    function _updatePurchasingState(address beneficiary, uint weiAmount, address toToken) internal { /* solium-disable-line */\r\n        /// @notice adds the amount of wei to the account record for the current phase\r\n        record[_phase][toToken][beneficiary] = record[_phase][toToken][beneficiary].add(weiAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Override to extend the way in which ether is converted to tokens.\r\n     * @param weiAmount Value in wei to be converted into tokens\r\n     * @return Number of tokens that can be purchased with the specified _weiAmount\r\n    **/\r\n    function _getTokenAmount(uint weiAmount) internal view returns (uint) {\r\n        return weiAmount.mul(_actRate[_phase]);\r\n    }\r\n\r\n    /**\r\n     * @notice Override to extend the way in which ether is converted to tokens.\r\n     * @param weiAmount Value in wei to be converted into tokens\r\n     * @return Number of G tokens that can be purchased with the specified _weiAmount\r\n    **/\r\n    function _getGTokenAmount(uint weiAmount) internal view returns (uint) {\r\n        return weiAmount.mul(_gRate[_phase]);\r\n    }\r\n\r\n    /**\r\n     * @notice Determines how ETH is stored/forwarded on purchases.\r\n    **/\r\n    function _forwardFunds() internal {\r\n        /// @notice forward fund to receiver wallet using CALL to avoid 2300 stipend limit\r\n        (bool success,) = _wallet.call{value: msg.value}('');\r\n        require(success, 'ACC:: Failed to forward funds');\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"acToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"gToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gRate\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"act_whitelist\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"g_whitelist\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"openingAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"closingAt\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ArtCirculationCrowdsale.Phase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"act_rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"g_rate\",\"type\":\"uint256\"}],\"name\":\"PhaseTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ArtCirculationCrowdsale.Phase\",\"name\":\"phase\",\"type\":\"uint8\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAdd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyGTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_payable\",\"type\":\"address\"}],\"name\":\"changeCollectorWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectorWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhase\",\"outputs\":[{\"internalType\":\"enum ArtCirculationCrowdsale.Phase\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toCheck\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phaseWeiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ArtCirculationCrowdsale.Phase\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"record\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toRemove\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ArtCirculationCrowdsale.Phase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"actRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gRate\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"act_whitelist\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"g_whitelist\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"openingAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"closingAt\",\"type\":\"uint32\"}],\"name\":\"setPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensOnSale\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ArtCirculationCrowdsale","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b3070eb6930fe1fd9c27cf455891bcc748426ec80000000000000000000000003f7674ddeb6422b77719b48c914158021034801e000000000000000000000000000000000000000000000000000000000001046a0000000000000000000000000000000000000000000000000000000000000683000000000000000000000000fa3e1613ea57c1a3983bcef44072af559ff57711000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000061877d47000000000000000000000000000000000000000000000000000000006365f1a7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000e40fbe4d24577f9f1350b77bd3f6baa473b7ab1000000000000000000000000f59f3c290f662f9ef38c0f052c6ceee90ae06e0b","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ed15e62f8119159b307b6aa3b4a2d1046e28250612d7b8001286c9c13afd802d"}]}