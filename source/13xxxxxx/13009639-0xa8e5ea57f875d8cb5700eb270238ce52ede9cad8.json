{"status":"1","message":"OK","result":[{"SourceCode":"{\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner Access\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    function _setOwner(address newOwner) internal {\\n        owner = newOwner;\\n    }\\n}\\n\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n\\n\\n\"},\"StakingVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./TransferHelper.sol\\\";\\n\\ninterface Token {\\n    function decimals() external view returns (uint256);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function burn(uint256 _value) external returns (bool success);\\n}\\n\\ncontract StakingVault is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    struct VaultInfo {\\n        uint256 id;\\n        uint256 poolSize;\\n        uint256 minimumAmount;\\n        uint256 maturityPeriod; // in timemillseconds\\n        uint256 APY; // in 10^2\\n        uint256 earlyWithDrawTime; // in timemillseconds\\n        uint256 withDrawPenality; // in 10^2\\n        uint256 investmentPeriod; // in timemillseconds\\n        uint256 startTimeStamp;\\n        uint256 userAmountAdded;\\n        string name;\\n        uint256 maximumAmount;\\n    }\\n    mapping(uint256 =\\u003e VaultInfo) public VaultMapping;\\n    uint256 public vaultId;\\n    address public XIVTokenContractAddress =\\n        0x44f262622248027f8E2a8Fb1090c4Cf85072392C; //XIV contract address\\n    struct userVaultInfo {\\n        uint256 investMentVaultId;\\n        uint256 investmentAmount;\\n        uint256 maturityPeriod; // in timemillseconds\\n        uint256 APY; // in 10^2\\n        uint256 earlyWithDrawTime; // in timemillseconds\\n        uint256 withDrawPenality; // in 10^2\\n        uint256 startTimeStamp;\\n        uint256 stakingTimeStamp;\\n        string name;\\n        bool isActive;\\n    }\\n    mapping(address =\\u003e mapping(uint256 =\\u003e userVaultInfo)) public userMapping;\\n    uint256 oneYear;\\n    mapping(uint256 =\\u003e bool) public addedToColdmapping;\\n\\n    bool isInitialized;\\n\\n    function initialize(address owner, address _XIVTokenContractAddress)\\n        public\\n    {\\n        require(!isInitialized, \\\"Already initialized\\\");\\n        _setOwner(owner);\\n        isInitialized = true;\\n        XIVTokenContractAddress = _XIVTokenContractAddress;\\n        oneYear = 365 days;\\n    }\\n\\n    function createVault(\\n        uint256 _poolSize,\\n        uint256 _maturityPeriod,\\n        uint256 _minimumAmount,\\n        uint256 _maximumAmount,\\n        uint256 _APY,\\n        uint256 _earlyWithDrawTime,\\n        uint256 _withDrawPenality,\\n        uint256 _investmentPeriod,\\n        string memory _name\\n    ) external onlyOwner {\\n        vaultId = vaultId.add(1);\\n        require(\\n            _maturityPeriod \\u003e _earlyWithDrawTime,\\n            \\\"Early withdraw \\u003e Maturity\\\"\\n        );\\n        require(\\n            _earlyWithDrawTime \\u003e _investmentPeriod,\\n            \\\"Investment period \\u003e Early withdraw\\\"\\n        );\\n        VaultInfo memory vInfo = VaultInfo({\\n            id: vaultId,\\n            poolSize: _poolSize,\\n            minimumAmount: _minimumAmount,\\n            maximumAmount: _maximumAmount,\\n            maturityPeriod: _maturityPeriod,\\n            APY: _APY,\\n            earlyWithDrawTime: _earlyWithDrawTime,\\n            withDrawPenality: _withDrawPenality,\\n            investmentPeriod: _investmentPeriod,\\n            startTimeStamp: block.timestamp,\\n            userAmountAdded: 0,\\n            name: _name\\n        });\\n        VaultMapping[vaultId] = vInfo;\\n    }\\n\\n    function updateVault(\\n        uint256 id,\\n        uint256 _poolSize,\\n        uint256 _maturityPeriod,\\n        uint256 _minimumAmount,\\n        uint256 _maximumAmount,\\n        uint256 _APY,\\n        uint256 _earlyWithDrawTime,\\n        uint256 _withDrawPenality,\\n        uint256 _investmentPeriod,\\n        string memory _name\\n    ) external onlyOwner {\\n        require(\\n            (block.timestamp \\u003e\\n                (\\n                    VaultMapping[id].startTimeStamp.add(\\n                        VaultMapping[id].maturityPeriod\\n                    )\\n                )),\\n            \\\"Wait till maturity.\\\"\\n        );\\n        require(\\n            VaultMapping[id].userAmountAdded == 0,\\n            \\\"Repay for this vault.\\\"\\n        );\\n        require(\\n            _maturityPeriod \\u003e _earlyWithDrawTime,\\n            \\\"Early withdraw \\u003e Maturity\\\"\\n        );\\n        require(\\n            _earlyWithDrawTime \\u003e _investmentPeriod,\\n            \\\"Investment period \\u003e Early withdraw\\\"\\n        );\\n        VaultMapping[id].poolSize = _poolSize;\\n        VaultMapping[id].minimumAmount = _minimumAmount;\\n        VaultMapping[id].maximumAmount = _maximumAmount;\\n        VaultMapping[id].maturityPeriod = _maturityPeriod;\\n        VaultMapping[id].APY = _APY;\\n        VaultMapping[id].earlyWithDrawTime = _earlyWithDrawTime;\\n        VaultMapping[id].withDrawPenality = _withDrawPenality;\\n        VaultMapping[id].investmentPeriod = _investmentPeriod;\\n        VaultMapping[id].name = _name;\\n        VaultMapping[id].startTimeStamp = 0;\\n    }\\n\\n    function activateVault(uint256 _activeVaultId) external onlyOwner {\\n        require(vaultId \\u003e= _activeVaultId, \\\"Enter valid vault.\\\");\\n        require(\\n            (block.timestamp \\u003e\\n                (\\n                    VaultMapping[_activeVaultId].startTimeStamp.add(\\n                        VaultMapping[_activeVaultId].maturityPeriod\\n                    )\\n                )),\\n            \\\"re-activation allowed after maturity.\\\"\\n        );\\n        require(\\n            VaultMapping[_activeVaultId].userAmountAdded == 0,\\n            \\\"Repay for this vault.\\\"\\n        );\\n        VaultMapping[_activeVaultId].startTimeStamp = block.timestamp;\\n        VaultMapping[_activeVaultId].userAmountAdded = 0;\\n    }\\n\\n    function fillPool(uint256 amount, uint256 _VaultId) external nonReentrant {\\n        VaultInfo memory vInfo = VaultMapping[_VaultId];\\n        require(\\n            block.timestamp \\u003c=\\n                (vInfo.startTimeStamp.add(vInfo.investmentPeriod)),\\n            \\\"Pool filling is closed.\\\"\\n        );\\n        require(vInfo.minimumAmount \\u003c= (amount), \\\"Enter more Amount.\\\");\\n        require(vInfo.maximumAmount \\u003e= (amount), \\\"Enter less Amount.\\\");\\n        require(\\n            vInfo.poolSize \\u003e= (vInfo.userAmountAdded.add(amount)),\\n            \\\"Add less amount.\\\"\\n        );\\n        Token tokenObj = Token(XIVTokenContractAddress);\\n        //check if user has balance\\n        require(\\n            tokenObj.balanceOf(msg.sender) \\u003e= amount,\\n            \\\"Insufficient XIV balance\\\"\\n        );\\n        //check if user has provided allowance\\n        require(\\n            tokenObj.allowance(msg.sender, address(this)) \\u003e= amount,\\n            \\\"Provide token approval to contract\\\"\\n        );\\n        if (\\n            (userMapping[msg.sender][_VaultId].startTimeStamp !=\\n                vInfo.startTimeStamp) \\u0026\\u0026\\n            (userMapping[msg.sender][_VaultId].isActive)\\n        ) {\\n            require(\\n                false,\\n                \\\"Claim current investment before staking.\\\"\\n            );\\n        }\\n        TransferHelper.safeTransferFrom(\\n            XIVTokenContractAddress,\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n        userVaultInfo memory userVInfo = userVaultInfo({\\n            investMentVaultId: vInfo.id,\\n            investmentAmount: userMapping[msg.sender][_VaultId]\\n                .investmentAmount\\n                .add(amount),\\n            maturityPeriod: vInfo.maturityPeriod,\\n            APY: vInfo.APY,\\n            earlyWithDrawTime: vInfo.earlyWithDrawTime,\\n            withDrawPenality: vInfo.withDrawPenality,\\n            startTimeStamp: vInfo.startTimeStamp,\\n            stakingTimeStamp: block.timestamp,\\n            name: vInfo.name,\\n            isActive: true\\n        });\\n        userMapping[msg.sender][_VaultId] = userVInfo;\\n        VaultMapping[_VaultId].userAmountAdded = (\\n            VaultMapping[_VaultId].userAmountAdded\\n        ).add(amount);\\n    }\\n\\n    function transferToColdWallet(address walletAddress, uint256 _VaultId)\\n        external\\n        onlyOwner\\n    {\\n        VaultInfo memory vInfo = VaultMapping[_VaultId];\\n        require(\\n            !(addedToColdmapping[_VaultId]),\\n            \\\"Already Added to Cold Wallet\\\"\\n        );\\n        Token tokenObj = Token(XIVTokenContractAddress);\\n        require(\\n            tokenObj.balanceOf(address(this)) \\u003e= vInfo.userAmountAdded,\\n            \\\"Insufficient XIV balance\\\"\\n        );\\n        require(\\n            block.timestamp \\u003e\\n                ((vInfo.startTimeStamp).add(vInfo.investmentPeriod)),\\n            \\\"Investment Period is active.\\\"\\n        );\\n        addedToColdmapping[_VaultId] = true;\\n        TransferHelper.safeTransfer(\\n            XIVTokenContractAddress,\\n            walletAddress,\\n            vInfo.userAmountAdded\\n        );\\n    }\\n\\n    function calculateReturnValue(uint256 _vaultId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        VaultInfo memory vInfo = VaultMapping[_vaultId];\\n        return (\\n            vInfo.userAmountAdded.add(\\n                (\\n                    (vInfo.APY).mul(vInfo.userAmountAdded).mul(\\n                        vInfo.maturityPeriod\\n                    )\\n                ).div((oneYear).mul(10**4))\\n            )\\n        );\\n    }\\n\\n    function transferToContract(uint256 _vaultId, uint256 _amount)\\n        external\\n        onlyOwner\\n    {\\n        uint256 calculateAmount = calculateReturnValue(_vaultId);\\n        require(\\n            VaultMapping[_vaultId].userAmountAdded \\u003e 0,\\n            \\\"Vault not valid to recieve funds\\\"\\n        );\\n        require(_amount \\u003e= calculateAmount, \\\"Enter more amount.\\\");\\n        Token tokenObj = Token(XIVTokenContractAddress);\\n        //check if user has balance\\n        require(\\n            tokenObj.balanceOf(msg.sender) \\u003e= _amount,\\n            \\\"Insufficient XIV balance\\\"\\n        );\\n        //check if user has provided allowance\\n        require(\\n            tokenObj.allowance(msg.sender, address(this)) \\u003e= _amount,\\n            \\\"Provide token approval to contract\\\"\\n        );\\n        TransferHelper.safeTransferFrom(\\n            XIVTokenContractAddress,\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        addedToColdmapping[_vaultId] = false;\\n        VaultMapping[_vaultId].userAmountAdded = 0;\\n    }\\n\\n    function claimAmount(uint256 _VaultId) external nonReentrant {\\n        Token tokenObj = Token(XIVTokenContractAddress);\\n        userVaultInfo memory uVaultInfo = userMapping[msg.sender][_VaultId];\\n        require(userMapping[msg.sender][_VaultId].isActive, \\\"Already claimed.\\\");\\n        uint256 userClaimAmount;\\n        uint256 investmentAmount;\\n        require(\\n            block.timestamp \\u003e\\n                (uVaultInfo.startTimeStamp.add(uVaultInfo.earlyWithDrawTime)),\\n            \\\"Can not claim too early.\\\"\\n        );\\n        require(\\n            (uVaultInfo.earlyWithDrawTime \\u003e 0) ||\\n                (block.timestamp \\u003e\\n                    (uVaultInfo.startTimeStamp.add(uVaultInfo.maturityPeriod))),\\n            \\\"Can not claim too early.\\\"\\n        );\\n        if (\\n            block.timestamp \\u003e\\n            (uVaultInfo.startTimeStamp.add(uVaultInfo.earlyWithDrawTime)) \\u0026\\u0026\\n            block.timestamp \\u003c\\n            (uVaultInfo.startTimeStamp.add(uVaultInfo.maturityPeriod))\\n        ) {\\n            uint256 panelty = (\\n                uVaultInfo.withDrawPenality.mul(uVaultInfo.investmentAmount)\\n            ).div(10**4);\\n            userClaimAmount = uVaultInfo.investmentAmount.sub(panelty);\\n            investmentAmount=userClaimAmount;\\n        } else {\\n            userClaimAmount = uVaultInfo.investmentAmount.add(\\n                (\\n                    uVaultInfo.APY.mul(uVaultInfo.investmentAmount).mul(\\n                        uVaultInfo.maturityPeriod\\n                    )\\n                ).div((oneYear).mul(10**4))\\n            );\\n            investmentAmount=uVaultInfo.investmentAmount;\\n        }\\n        require(\\n            tokenObj.balanceOf(address(this)) \\u003e= userClaimAmount,\\n            \\\"The contract does not have enough XIV balance.\\\"\\n        );\\n        TransferHelper.safeTransfer(\\n            XIVTokenContractAddress,\\n            msg.sender,\\n            userClaimAmount\\n        );\\n        if (VaultMapping[uVaultInfo.investMentVaultId].userAmountAdded \\u003e 0) {\\n            VaultMapping[uVaultInfo.investMentVaultId]\\n                .userAmountAdded = VaultMapping[uVaultInfo.investMentVaultId]\\n                .userAmountAdded\\n                .sub(investmentAmount);\\n        }\\n        userMapping[msg.sender][_VaultId].isActive = false;\\n        userMapping[msg.sender][_VaultId].investmentAmount = 0;\\n    }\\n\\n    function makeTransfer(\\n        address payable[] memory addressArray,\\n        uint256[] memory amountArray\\n    ) external onlyOwner {\\n        require(\\n            addressArray.length == amountArray.length,\\n            \\\"Arrays must be of same size.\\\"\\n        );\\n        Token tokenInstance = Token(XIVTokenContractAddress);\\n        for (uint256 i = 0; i \\u003c addressArray.length; i++) {\\n            require(\\n                tokenInstance.balanceOf(address(this)) \\u003e= amountArray[i],\\n                \\\"contract has insufficient token balance.\\\"\\n            );\\n            TransferHelper.safeTransfer(\\n                XIVTokenContractAddress,\\n                addressArray[i],\\n                amountArray[i]\\n            );\\n        }\\n    }\\n\\n    function updateXIVAddress(address _XIVTokenContractAddress)\\n        external\\n        onlyOwner\\n    {\\n        XIVTokenContractAddress = _XIVTokenContractAddress;\\n    }\\n}\\n\\n\"},\"TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes(\\u0027approve(address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))),\\n            \\u0027TransferHelper::safeApprove: approve failed\\u0027\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes(\\u0027transfer(address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))),\\n            \\u0027TransferHelper::safeTransfer: transfer failed\\u0027\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes(\\u0027transferFrom(address,address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))),\\n            \\u0027TransferHelper::transferFrom: transferFrom failed\\u0027\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\u0027TransferHelper::safeTransferETH: ETH transfer failed\\u0027);\\n    }\\n}\\n\\n\\n\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"VaultMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyWithDrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withDrawPenality\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investmentPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userAmountAdded\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maximumAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XIVTokenContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_activeVaultId\",\"type\":\"uint256\"}],\"name\":\"activateVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addedToColdmapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"calculateReturnValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_VaultId\",\"type\":\"uint256\"}],\"name\":\"claimAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maturityPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maximumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_APY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earlyWithDrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withDrawPenality\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investmentPeriod\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_VaultId\",\"type\":\"uint256\"}],\"name\":\"fillPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_XIVTokenContractAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"addressArray\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountArray\",\"type\":\"uint256[]\"}],\"name\":\"makeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_VaultId\",\"type\":\"uint256\"}],\"name\":\"transferToColdWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maturityPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maximumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_APY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earlyWithDrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withDrawPenality\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investmentPeriod\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"updateVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_XIVTokenContractAddress\",\"type\":\"address\"}],\"name\":\"updateXIVAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"investMentVaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investmentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyWithDrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withDrawPenality\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakingVault","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9914fe8531bb06f9096f80bf563f141f856592a1e8901bf6f583f0d88cbed924"}]}