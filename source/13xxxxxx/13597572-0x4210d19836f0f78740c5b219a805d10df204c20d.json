{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/helpers/AssetParametersViewer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IVaultParameters.sol\\\";\\nimport \\\"../interfaces/vault-managers/parameters/IVaultManagerParameters.sol\\\";\\nimport \\\"../interfaces/vault-managers/parameters/IVaultManagerBorrowFeeParameters.sol\\\";\\n\\n\\n/**\\n * @notice Views collaterals in one request to save node requests and speed up dapps.\\n *\\n * @dev It makes no sense to clog a node with hundreds of RPC requests and slow a client app/dapp. Since usually\\n *      a huge amount of gas is available to node static calls, we can aggregate asset data in a huge batch on the\\n *      node's side and pull it to the client.\\n */\\ncontract AssetParametersViewer {\\n    IVaultParameters public immutable vaultParameters;\\n\\n    IVaultManagerParameters public immutable vaultManagerParameters;\\n    IVaultManagerBorrowFeeParameters public immutable vaultManagerBorrowFeeParameters;\\n\\n    struct AssetParameters {\\n        // asset address\\n        address asset;\\n\\n        // Percentage with 3 decimals\\n        uint stabilityFee;\\n\\n        // Percentage with 0 decimals\\n        uint liquidationFee;\\n\\n        // Percentage with 0 decimals\\n        uint initialCollateralRatio;\\n\\n        // Percentage with 0 decimals\\n        uint liquidationRatio;\\n\\n        // Percentage with 3 decimals\\n        uint liquidationDiscount;\\n\\n        // Devaluation period in blocks\\n        uint devaluationPeriod;\\n\\n        // USDP mint limit\\n        uint tokenDebtLimit;\\n\\n        // Oracle types enabled for this asset\\n        uint[] oracles;\\n\\n        // Percentage with 0 decimals\\n        uint minColPercent;\\n\\n        // Percentage with 0 decimals\\n        uint maxColPercent;\\n\\n        // Percentage with 2 decimals (basis points)\\n        uint borrowFee;\\n    }\\n\\n\\n    constructor(address _vaultManagerParameters, address _vaultManagerBorrowFeeParameters) {\\n        IVaultManagerParameters vmp = IVaultManagerParameters(_vaultManagerParameters);\\n        vaultManagerParameters = vmp;\\n        vaultParameters = IVaultParameters(vmp.vaultParameters());\\n        vaultManagerBorrowFeeParameters = IVaultManagerBorrowFeeParameters(_vaultManagerBorrowFeeParameters);\\n    }\\n\\n    /**\\n     * @notice Get parameters of one asset\\n     * @param asset asset address\\n     * @param maxOracleTypesToSearch since complete list of oracle types is unknown, we'll check types up to this number\\n     */\\n    function getAssetParameters(address asset, uint maxOracleTypesToSearch)\\n        public\\n        view\\n        returns (AssetParameters memory r)\\n    {\\n        r.asset = asset;\\n        r.stabilityFee = vaultParameters.stabilityFee(asset);\\n        r.liquidationFee = vaultParameters.liquidationFee(asset);\\n\\n        r.initialCollateralRatio = vaultManagerParameters.initialCollateralRatio(asset);\\n        r.liquidationRatio = vaultManagerParameters.liquidationRatio(asset);\\n        r.liquidationDiscount = vaultManagerParameters.liquidationDiscount(asset);\\n        r.devaluationPeriod = vaultManagerParameters.devaluationPeriod(asset);\\n\\n        r.tokenDebtLimit = vaultParameters.tokenDebtLimit(asset);\\n\\n        r.minColPercent = vaultManagerParameters.minColPercent(asset);\\n        r.maxColPercent = vaultManagerParameters.maxColPercent(asset);\\n\\n        r.borrowFee = vaultManagerBorrowFeeParameters.getBorrowFee(asset);\\n\\n        // Memory arrays can't be reallocated so we'll overprovision\\n        uint[] memory foundOracleTypes = new uint[](maxOracleTypesToSearch);\\n        uint actualOraclesCount = 0;\\n\\n        for (uint _type = 0; _type < maxOracleTypesToSearch; ++_type) {\\n            if (vaultParameters.isOracleTypeEnabled(_type, asset)) {\\n                foundOracleTypes[actualOraclesCount++] = _type;\\n            }\\n        }\\n\\n        r.oracles = new uint[](actualOraclesCount);\\n        for (uint i = 0; i < actualOraclesCount; ++i) {\\n            r.oracles[i] = foundOracleTypes[i];\\n        }\\n    }\\n\\n    /**\\n     * @notice Get parameters of many assets\\n     * @param assets asset addresses\\n     * @param maxOracleTypesToSearch since complete list of oracle types is unknown, we'll check types up to this number\\n     */\\n    function getMultiAssetParameters(address[] calldata assets, uint maxOracleTypesToSearch)\\n        external\\n        view\\n        returns (AssetParameters[] memory r)\\n    {\\n        uint length = assets.length;\\n        r = new AssetParameters[](length);\\n        for (uint i = 0; i < length; ++i) {\\n            r[i] = getAssetParameters(assets[i], maxOracleTypesToSearch);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\n\\ninterface IVaultParameters {\\n    function canModifyVault ( address ) external view returns ( bool );\\n    function foundation (  ) external view returns ( address );\\n    function isManager ( address ) external view returns ( bool );\\n    function isOracleTypeEnabled ( uint256, address ) external view returns ( bool );\\n    function liquidationFee ( address ) external view returns ( uint256 );\\n    function setCollateral ( address asset, uint256 stabilityFeeValue, uint256 liquidationFeeValue, uint256 usdpLimit, uint256[] calldata oracles ) external;\\n    function setFoundation ( address newFoundation ) external;\\n    function setLiquidationFee ( address asset, uint256 newValue ) external;\\n    function setManager ( address who, bool permit ) external;\\n    function setOracleType ( uint256 _type, address asset, bool enabled ) external;\\n    function setStabilityFee ( address asset, uint256 newValue ) external;\\n    function setTokenDebtLimit ( address asset, uint256 limit ) external;\\n    function setVaultAccess ( address who, bool permit ) external;\\n    function stabilityFee ( address ) external view returns ( uint256 );\\n    function tokenDebtLimit ( address ) external view returns ( uint256 );\\n    function vault (  ) external view returns ( address );\\n    function vaultParameters (  ) external view returns ( address );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vault-managers/parameters/IVaultManagerParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\n\\ninterface IVaultManagerParameters {\\n    function devaluationPeriod ( address ) external view returns ( uint256 );\\n    function initialCollateralRatio ( address ) external view returns ( uint256 );\\n    function liquidationDiscount ( address ) external view returns ( uint256 );\\n    function liquidationRatio ( address ) external view returns ( uint256 );\\n    function maxColPercent ( address ) external view returns ( uint256 );\\n    function minColPercent ( address ) external view returns ( uint256 );\\n    function setColPartRange ( address asset, uint256 min, uint256 max ) external;\\n    function setCollateral (\\n        address asset,\\n        uint256 stabilityFeeValue,\\n        uint256 liquidationFeeValue,\\n        uint256 initialCollateralRatioValue,\\n        uint256 liquidationRatioValue,\\n        uint256 liquidationDiscountValue,\\n        uint256 devaluationPeriodValue,\\n        uint256 usdpLimit,\\n        uint256[] calldata oracles,\\n        uint256 minColP,\\n        uint256 maxColP\\n    ) external;\\n    function setDevaluationPeriod ( address asset, uint256 newValue ) external;\\n    function setInitialCollateralRatio ( address asset, uint256 newValue ) external;\\n    function setLiquidationDiscount ( address asset, uint256 newValue ) external;\\n    function setLiquidationRatio ( address asset, uint256 newValue ) external;\\n    function vaultParameters (  ) external view returns ( address );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vault-managers/parameters/IVaultManagerBorrowFeeParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\n\\ninterface IVaultManagerBorrowFeeParameters {\\n\\n    /**\\n     * @notice 1 = 100% = 10000 basis points\\n     **/\\n    function BASIS_POINTS_IN_1() external view returns (uint);\\n\\n    /**\\n     * @notice Borrow fee receiver\\n     **/\\n    function feeReceiver() external view returns (address);\\n\\n    /**\\n     * @notice Sets the borrow fee receiver. Only manager is able to call this function\\n     * @param newFeeReceiver The address of fee receiver\\n     **/\\n    function setFeeReceiver(address newFeeReceiver) external;\\n\\n    /**\\n     * @notice Sets the base borrow fee in basis points (1bp = 0.01% = 0.0001). Only manager is able to call this function\\n     * @param newBaseBorrowFeeBasisPoints The borrow fee in basis points\\n     **/\\n    function setBaseBorrowFee(uint16 newBaseBorrowFeeBasisPoints) external;\\n\\n    /**\\n     * @notice Sets the borrow fee for a particular collateral in basis points (1bp = 0.01% = 0.0001). Only manager is able to call this function\\n     * @param asset The address of the main collateral token\\n     * @param newEnabled Is custom fee enabled for asset\\n     * @param newFeeBasisPoints The borrow fee in basis points\\n     **/\\n    function setAssetBorrowFee(address asset, bool newEnabled, uint16 newFeeBasisPoints) external;\\n\\n    /**\\n     * @notice Returns borrow fee for particular collateral in basis points (1bp = 0.01% = 0.0001)\\n     * @param asset The address of the main collateral token\\n     * @return feeBasisPoints The borrow fee in basis points\\n     **/\\n    function getBorrowFee(address asset) external view returns (uint16 feeBasisPoints);\\n\\n    /**\\n     * @notice Returns borrow fee for usdp amount for particular collateral\\n     * @param asset The address of the main collateral token\\n     * @return The borrow fee\\n     **/\\n    function calcBorrowFeeAmount(address asset, uint usdpAmount) external view returns (uint);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultManagerParameters\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultManagerBorrowFeeParameters\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxOracleTypesToSearch\",\"type\":\"uint256\"}],\"name\":\"getAssetParameters\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialCollateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devaluationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenDebtLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"oracles\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minColPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxColPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowFee\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetParametersViewer.AssetParameters\",\"name\":\"r\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"maxOracleTypesToSearch\",\"type\":\"uint256\"}],\"name\":\"getMultiAssetParameters\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialCollateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devaluationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenDebtLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"oracles\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minColPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxColPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowFee\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetParametersViewer.AssetParameters[]\",\"name\":\"r\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManagerBorrowFeeParameters\",\"outputs\":[{\"internalType\":\"contract IVaultManagerBorrowFeeParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManagerParameters\",\"outputs\":[{\"internalType\":\"contract IVaultManagerParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParameters\",\"outputs\":[{\"internalType\":\"contract IVaultParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AssetParametersViewer","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000203153522b9eaef4ae17c6e99851ee7b2f7d312e000000000000000000000000cba7154bfbf898d9ab0cf0e259abab6ccbfb4894","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}