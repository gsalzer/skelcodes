{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-only\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IEligibility {\r\n\r\n//    function getGate(uint) external view returns (struct Gate)\r\n//    function addGate(uint...) external\r\n\r\n    function isEligible(uint, address, bytes32[] memory) external view returns (bool eligible);\r\n\r\n    function passThruGate(uint, address, bytes32[] memory) external;\r\n}\r\n\r\nlibrary MerkleLib {\r\n\r\n    function verifyProof(bytes32 root, bytes32 leaf, bytes32[] memory proof) public pure returns (bool) {\r\n        bytes32 currentHash = leaf;\r\n\r\n        for (uint i = 0; i < proof.length; i += 1) {\r\n            currentHash = parentHash(currentHash, proof[i]);\r\n        }\r\n\r\n        return currentHash == root;\r\n    }\r\n\r\n    function parentHash(bytes32 a, bytes32 b) public pure returns (bytes32) {\r\n        if (a < b) {\r\n            return keccak256(abi.encode(a, b));\r\n        } else {\r\n            return keccak256(abi.encode(b, a));\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract MerkleEligibility is IEligibility {\r\n    using MerkleLib for bytes32;\r\n    \r\n    address public management;\r\n    address public gateMaster;\r\n\r\n    struct Gate {\r\n        bytes32 root;\r\n        uint maxWithdrawalsAddress;\r\n        uint maxWithdrawalsTotal;\r\n        uint totalWithdrawals;\r\n    }\r\n\r\n    mapping (uint => Gate) public gates;\r\n    mapping(uint => mapping(address => uint)) public timesWithdrawn;\r\n    uint public numGates = 0;\r\n\r\n    modifier managementOnly() {\r\n        require (msg.sender == management, 'Only management may call this');\r\n        _;\r\n    }\r\n\r\n    constructor(address _mgmt, address _gateMaster) {\r\n        management = _mgmt;\r\n        gateMaster = _gateMaster;\r\n    }\r\n\r\n    function addGate(bytes32 merkleRoot, uint maxWithdrawalsAddress, uint maxWithdrawalsTotal) external managementOnly returns (uint index) {\r\n        // increment the number of roots\r\n        numGates += 1;\r\n\r\n        gates[numGates] = Gate(merkleRoot, maxWithdrawalsAddress, maxWithdrawalsTotal, 0);\r\n        return numGates;\r\n    }\r\n\r\n    function getGate(uint index) external view returns (bytes32, uint, uint, uint) {\r\n        Gate memory gate = gates[index];\r\n        return (gate.root, gate.maxWithdrawalsAddress, gate.maxWithdrawalsTotal, gate.totalWithdrawals);\r\n    }\r\n\r\n    function isEligible(uint index, address recipient, bytes32[] memory proof) public override view returns (bool eligible) {\r\n        Gate memory gate = gates[index];\r\n        // We need to pack the 20 bytes address to the 32 bytes value\r\n        bytes32 leaf = keccak256(abi.encode(recipient));\r\n        bool countValid = timesWithdrawn[index][recipient] < gate.maxWithdrawalsAddress;\r\n        return countValid && gate.totalWithdrawals < gate.maxWithdrawalsTotal && gate.root.verifyProof(leaf, proof);\r\n    }\r\n\r\n    function passThruGate(uint index, address recipient, bytes32[] memory proof) external override {\r\n        require(msg.sender == gateMaster, \"Only gatemaster may call this.\");\r\n\r\n        // close re-entrance gate, prevent double withdrawals\r\n        require(isEligible(index, recipient, proof), \"Address is not eligible\");\r\n\r\n        timesWithdrawn[index][recipient] += 1;\r\n        Gate storage gate = gates[index];\r\n        gate.totalWithdrawals += 1;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mgmt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gateMaster\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxWithdrawalsAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWithdrawalsTotal\",\"type\":\"uint256\"}],\"name\":\"addGate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gates\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxWithdrawalsAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWithdrawalsTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getGate\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"isEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"eligible\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"management\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numGates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"passThruGate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"timesWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MerkleEligibility","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000288fe43139741f91a8cbb6f4add83811c794851b000000000000000000000000a6fffd38a523d95b744ddc82a2a3c5e1cd77d8ee","EVMVersion":"Default","Library":"MerkleLib:458efd41740ffb27d86a9157050c0707b41e9520","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bad272a331b3686fac807fd4beffc2ef3def0f834e78057892158e0a440314f5"}]}