{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Registry.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Registry is Ownable {\\r\\n    event ContractAddressUpdated(\\r\\n        string indexed _name,\\r\\n        bytes32 indexed _code,\\r\\n        address indexed _newAddress\\r\\n    );\\r\\n\\r\\n    event TokenMapped(\\r\\n        address indexed _mainchainToken,\\r\\n        address indexed _sidechainToken,\\r\\n        uint32 _standard\\r\\n    );\\r\\n\\r\\n    string public constant GATEWAY = \\\"GATEWAY\\\";\\r\\n    string public constant WETH_TOKEN = \\\"WETH_TOKEN\\\";\\r\\n    string public constant ACKNOWLEDGEMENT = \\\"ACKNOWLEDGEMENT\\\";\\r\\n\\r\\n    struct TokenMapping {\\r\\n        address mainchainToken;\\r\\n        address sidechainToken;\\r\\n        uint32 standard; // 20, 721 or any other standards\\r\\n    }\\r\\n\\r\\n    mapping(bytes32 => address) public contractAddresses;\\r\\n    mapping(address => TokenMapping) public mainchainMap;\\r\\n    mapping(address => TokenMapping) public sidechainMap;\\r\\n\\r\\n    function getContract(string calldata _name)\\r\\n        external\\r\\n        view\\r\\n        returns (address _address)\\r\\n    {\\r\\n        bytes32 _code = getCode(_name);\\r\\n        _address = contractAddresses[_code];\\r\\n        require(_address != address(0));\\r\\n    }\\r\\n\\r\\n    function isTokenMapped(\\r\\n        address _token,\\r\\n        uint32 _standard,\\r\\n        bool _isMainchain\\r\\n    ) external view returns (bool) {\\r\\n        TokenMapping memory _mapping = _getTokenMapping(_token, _isMainchain);\\r\\n\\r\\n        return\\r\\n            _mapping.mainchainToken != address(0) &&\\r\\n            _mapping.sidechainToken != address(0) &&\\r\\n            _mapping.standard == _standard;\\r\\n    }\\r\\n\\r\\n    function updateContract(string calldata _name, address _newAddress)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        bytes32 _code = getCode(_name);\\r\\n        contractAddresses[_code] = _newAddress;\\r\\n\\r\\n        emit ContractAddressUpdated(_name, _code, _newAddress);\\r\\n    }\\r\\n\\r\\n    function mapToken(\\r\\n        address _mainchainToken,\\r\\n        address _sidechainToken,\\r\\n        uint32 _standard\\r\\n    ) external onlyOwner {\\r\\n        TokenMapping memory _map = TokenMapping(\\r\\n            _mainchainToken,\\r\\n            _sidechainToken,\\r\\n            _standard\\r\\n        );\\r\\n\\r\\n        mainchainMap[_mainchainToken] = _map;\\r\\n        sidechainMap[_sidechainToken] = _map;\\r\\n\\r\\n        emit TokenMapped(_mainchainToken, _sidechainToken, _standard);\\r\\n    }\\r\\n\\r\\n    function clearMapToken(address _mainchainToken, address _sidechainToken)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        TokenMapping storage _mainchainMap = mainchainMap[_mainchainToken];\\r\\n        _clearMapEntry(_mainchainMap);\\r\\n\\r\\n        TokenMapping storage _sidechainMap = sidechainMap[_sidechainToken];\\r\\n        _clearMapEntry(_sidechainMap);\\r\\n    }\\r\\n\\r\\n    function getMappedToken(address _token, bool _isMainchain)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address _mainchainToken,\\r\\n            address _sidechainToken,\\r\\n            uint32 _standard\\r\\n        )\\r\\n    {\\r\\n        TokenMapping memory _mapping = _getTokenMapping(_token, _isMainchain);\\r\\n        _mainchainToken = _mapping.mainchainToken;\\r\\n        _sidechainToken = _mapping.sidechainToken;\\r\\n        _standard = _mapping.standard;\\r\\n    }\\r\\n\\r\\n    function getCode(string memory _name) public pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(_name));\\r\\n    }\\r\\n\\r\\n    function _getTokenMapping(address _token, bool isMainchain)\\r\\n        internal\\r\\n        view\\r\\n        returns (TokenMapping memory _mapping)\\r\\n    {\\r\\n        if (isMainchain) {\\r\\n            _mapping = mainchainMap[_token];\\r\\n        } else {\\r\\n            _mapping = sidechainMap[_token];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _clearMapEntry(TokenMapping storage _entry) internal {\\r\\n        _entry.mainchainToken = address(0);\\r\\n        _entry.sidechainToken = address(0);\\r\\n        _entry.standard = 0;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"ContractAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_mainchainToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sidechainToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_standard\",\"type\":\"uint32\"}],\"name\":\"TokenMapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACKNOWLEDGEMENT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GATEWAY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_TOKEN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mainchainToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sidechainToken\",\"type\":\"address\"}],\"name\":\"clearMapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"contractAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getCode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isMainchain\",\"type\":\"bool\"}],\"name\":\"getMappedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_mainchainToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sidechainToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_standard\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_standard\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_isMainchain\",\"type\":\"bool\"}],\"name\":\"isTokenMapped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mainchainMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"mainchainToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sidechainToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"standard\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mainchainToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sidechainToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_standard\",\"type\":\"uint32\"}],\"name\":\"mapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sidechainMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"mainchainToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sidechainToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"standard\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Registry","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}