{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocol/Controller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\n\\nimport \\\"contracts/interfaces/IERC20.sol\\\";\\nimport \\\"contracts/interfaces/apwine/tokens/IFutureYieldToken.sol\\\";\\nimport \\\"contracts/interfaces/apwine/IFutureVault.sol\\\";\\nimport \\\"contracts/interfaces/apwine/IFutureWallet.sol\\\";\\n\\nimport \\\"contracts/utils/RegistryStorage.sol\\\";\\n\\n/**\\n * @title Controller contract\\n * @notice The controller dictates the futureVault mechanisms and serves as an interface for main user interaction with futures\\n */\\ncontract Controller is Initializable, RegistryStorage {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n    using SafeERC20Upgradeable for IERC20;\\n    using SafeMathUpgradeable for uint256;\\n\\n    /* Attributes */\\n\\n    mapping(uint256 => uint256) private nextPeriodSwitchByDuration;\\n    mapping(address => uint256) private nextPerformanceFeeFactor; // represented as x/(10**18)\\n\\n    mapping(uint256 => mapping(uint256 => bool)) private periodSwitchedByDurationDisabled;\\n\\n    EnumerableSetUpgradeable.UintSet private durations;\\n    mapping(uint256 => EnumerableSetUpgradeable.AddressSet) private futureVaultsByDuration;\\n    mapping(uint256 => uint256) private periodIndexByDurations;\\n\\n    mapping(address => bool) private toBeTerminatedByFutureVault;\\n    EnumerableSetUpgradeable.AddressSet private futureVaultsTerminated;\\n    mapping(address => bool) private withdrawalsPausedByFutureVault;\\n    mapping(address => bool) private depositsPausedByFutureVault;\\n\\n    /* Events */\\n    event NextPeriodSwitchSet(uint256 _periodDuration, uint256 _nextSwitchTimestamp);\\n    event NewPeriodDurationIndexSet(uint256 _periodIndex);\\n    event FutureRegistered(IFutureVault _futureVault);\\n    event FutureUnregistered(IFutureVault _futureVault);\\n    event StartingDelaySet(uint256 _startingDelay);\\n    event NewPerformanceFeeFactor(IFutureVault _futureVault, uint256 _feeFactor);\\n    event FutureTerminated(IFutureVault _futureVault);\\n    event DepositPauseChanged(IFutureVault _futureVault, bool _depositPaused);\\n    event WithdrawalPauseChanged(IFutureVault _futureVault, bool _withdrawalPaused);\\n    event FutureSetToBeTerminated(IFutureVault _futureVault);\\n    event PeriodSwitchedByDurationDisabled(uint256 _periodDuration, uint256 _periodIndex);\\n    event DelegationPauseChanged(bool _delegationPaused);\\n\\n    /* PlatformController Settings */\\n    uint256 public STARTING_DELAY;\\n    bool public DELEGATION_ENABLED;\\n\\n    /* Modifiers */\\n\\n    modifier futureVaultIsValid(IFutureVault _futureVault) {\\n        require(registry.isRegisteredFutureVault(address(_futureVault)), \\\"Controller: ERR_FUTURE_ADDRESS\\\");\\n        _;\\n    }\\n\\n    modifier durationIsPresent(uint256 _duration) {\\n        require(durations.contains(_duration), \\\"Controller: Period Duration not Found\\\");\\n        _;\\n    }\\n\\n    modifier delegationIsEnabled() {\\n        require(DELEGATION_ENABLED, \\\"Controller: Delegation not enabled\\\");\\n        _;\\n    }\\n\\n    /* Initializer */\\n\\n    /**\\n     * @notice Initializer of the Controller contract\\n     * @param _registry the address of the registry\\n     * @param _admin the address of the admin\\n     */\\n    function initialize(IRegistry _registry, address _admin) external initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _setupRole(ADMIN_ROLE, _admin);\\n        registry = _registry;\\n        DELEGATION_ENABLED = true;\\n    }\\n\\n    /* User Methods */\\n\\n    /**\\n     * @notice Withdraw deposited funds from APWine\\n     * @param _futureVault the interface of the futureVault to withdraw the IBT from\\n     * @param _amount the amount to withdraw\\n     */\\n    function withdraw(IFutureVault _futureVault, uint256 _amount) external futureVaultIsValid(_futureVault) {\\n        _futureVault.withdraw(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Deposit funds into ongoing period\\n     * @param _futureVault the interface of the futureVault to be deposit the funds in\\n     * @param _amount the amount to deposit on the ongoing period\\n     * @dev part of the amount depostied will be used to buy back the yield already generated proportionaly to the amount deposited\\n     */\\n    function deposit(IFutureVault _futureVault, uint256 _amount) external futureVaultIsValid(_futureVault) {\\n        _futureVault.deposit(msg.sender, _amount);\\n        IERC20(_futureVault.getIBTAddress()).safeTransferFrom(msg.sender, address(_futureVault), _amount);\\n    }\\n\\n    /**\\n     * @notice Create a delegation from one address to another for a futureVault\\n     * @param _futureVault the corresponding futureVault interface\\n     * @param _receiver the address receiving the futureVault FYTs\\n     * @param _amount the of futureVault FYTs to delegate\\n     */\\n    function createFYTDelegationTo(\\n        IFutureVault _futureVault,\\n        address _receiver,\\n        uint256 _amount\\n    ) external delegationIsEnabled futureVaultIsValid(_futureVault) {\\n        _futureVault.createFYTDelegationTo(msg.sender, _receiver, _amount);\\n    }\\n\\n    /**\\n     * @notice Remove a delegation from one address to another for a futureVault\\n     * @param _futureVault the corresponding futureVault interface\\n     * @param _receiver the address receiving the futureVault FYTs\\n     * @param _amount the of futureVault FYTs to remove from the delegation\\n     */\\n    function withdrawFYTDelegationFrom(\\n        IFutureVault _futureVault,\\n        address _receiver,\\n        uint256 _amount\\n    ) external futureVaultIsValid(_futureVault) {\\n        _futureVault.withdrawFYTDelegationFrom(msg.sender, _receiver, _amount);\\n    }\\n\\n    /* Future admin methods */\\n\\n    /**\\n     * @notice Register a newly created futureVault in the registry\\n     * @param _futureVault the interface of the new futureVault\\n     */\\n    function registerNewFutureVault(IFutureVault _futureVault) external onlyAdmin {\\n        registry.addFutureVault(address(_futureVault));\\n        uint256 futureDuration = _futureVault.PERIOD_DURATION();\\n        if (!durations.contains(futureDuration)) durations.add(futureDuration);\\n        futureVaultsByDuration[futureDuration].add(address(_futureVault));\\n        emit FutureRegistered(_futureVault);\\n    }\\n\\n    /**\\n     * @notice Unregister a futureVault from the registry\\n     * @param _futureVault the interface of the futureVault to unregister\\n     */\\n    function unregisterFutureVault(IFutureVault _futureVault) external onlyAdmin {\\n        registry.removeFutureVault(address(_futureVault));\\n\\n        uint256 futureDuration = _futureVault.PERIOD_DURATION();\\n        futureVaultsByDuration[futureDuration].remove(address(_futureVault));\\n        if (durations.contains(futureDuration) && futureVaultsByDuration[futureDuration].length() == 0)\\n            durations.remove(futureDuration);\\n        emit FutureUnregistered(_futureVault);\\n    }\\n\\n    /**\\n     * @notice Change the delay for starting a new period\\n     * @param _startingDelay the new delay (+-) to start the next period\\n     */\\n    function setPeriodStartingDelay(uint256 _startingDelay) public onlyAdmin {\\n        STARTING_DELAY = _startingDelay;\\n        emit StartingDelaySet(_startingDelay);\\n    }\\n\\n    /**\\n     * @notice Set the next period switch timestamp for the futureVault with corresponding duration\\n     * @param _periodDuration the period duration\\n     * @param _nextPeriodTimestamp the next period switch timestamp\\n     */\\n    function setNextPeriodSwitchTimestamp(uint256 _periodDuration, uint256 _nextPeriodTimestamp)\\n        external\\n        onlyAdmin\\n        durationIsPresent(_periodDuration)\\n    {\\n        nextPeriodSwitchByDuration[_periodDuration] = _nextPeriodTimestamp;\\n        emit NextPeriodSwitchSet(_periodDuration, _nextPeriodTimestamp);\\n    }\\n\\n    /**\\n     * @notice Set the next period duration index\\n     * @param _periodDuration the period duration\\n     * @param _newPeriodIndex the next period duration index\\n     * @dev should only be called if there is a need of arbitrarily chaging the indexes in the FYT/PT naming\\n     */\\n    function setPeriodDurationIndex(uint256 _periodDuration, uint256 _newPeriodIndex)\\n        external\\n        onlyAdmin\\n        durationIsPresent(_periodDuration)\\n    {\\n        periodIndexByDurations[_periodDuration] = _newPeriodIndex;\\n        emit NewPeriodDurationIndexSet(_newPeriodIndex);\\n    }\\n\\n    /**\\n     * @notice Set the performance fee factor for one futureVault, represented as x/(10**18)\\n     * @param _futureVault the instance of the futureVault\\n     * @param _feeFactor the performance fee factor of the futureVault\\n     */\\n    function setNextPerformanceFeeFactor(IFutureVault _futureVault, uint256 _feeFactor) external onlyAdmin {\\n        require(_feeFactor <= 10**18, \\\"Controller: ERR_FEE_FACTOR\\\");\\n        nextPerformanceFeeFactor[address(_futureVault)] = _feeFactor;\\n        emit NewPerformanceFeeFactor(_futureVault, _feeFactor);\\n    }\\n\\n    /**\\n     * @notice Start all futures that have a defined period duration to synchronize them\\n     * @param _periodDuration the period duration of the futures to start\\n     */\\n    function startFuturesByPeriodDuration(uint256 _periodDuration)\\n        external\\n        onlyStartFuture\\n        durationIsPresent(_periodDuration)\\n    {\\n        uint256 perodIndexByDuration = periodIndexByDurations[_periodDuration];\\n        require(\\n            !periodSwitchedByDurationDisabled[_periodDuration][perodIndexByDuration],\\n            \\\"Controller: period cannot be switched with duration\\\"\\n        );\\n        uint256 numberOfVaults = futureVaultsByDuration[_periodDuration].length();\\n        for (uint256 i = 0; i < numberOfVaults; i++) {\\n            address futureVault = futureVaultsByDuration[_periodDuration].at(i);\\n            _startFuture(IFutureVault(futureVault));\\n        }\\n        nextPeriodSwitchByDuration[_periodDuration] = nextPeriodSwitchByDuration[_periodDuration].add(_periodDuration);\\n        periodIndexByDurations[_periodDuration] = perodIndexByDuration.add(1);\\n        emit NextPeriodSwitchSet(_periodDuration, nextPeriodSwitchByDuration[_periodDuration]);\\n    }\\n\\n    /**\\n     * @notice Start a specific future\\n     * @param _futureVault the interface of the futureVault to start\\n     * @dev should not be called if planning to use startFuturesByPeriodDuration in the same period\\n     */\\n    function startFuture(IFutureVault _futureVault) external onlyStartFuture futureVaultIsValid(_futureVault) {\\n        uint256 periodDuration = _futureVault.PERIOD_DURATION();\\n        uint256 periodIndex = periodIndexByDurations[periodDuration];\\n        periodSwitchedByDurationDisabled[periodDuration][periodIndex] = true;\\n        _startFuture(_futureVault);\\n        emit PeriodSwitchedByDurationDisabled(periodDuration, periodIndex);\\n    }\\n\\n    function _startFuture(IFutureVault _futureVault) internal {\\n        _futureVault.startNewPeriod();\\n        if (toBeTerminatedByFutureVault[address(_futureVault)]) {\\n            futureVaultsTerminated.add(address(_futureVault));\\n            futureVaultsByDuration[_futureVault.PERIOD_DURATION()].remove(address(_futureVault));\\n            emit FutureTerminated(_futureVault);\\n        }\\n    }\\n\\n    /**\\n     * @notice Start a specific future\\n     * @param _futureVault the interface of the futureVault to terminate\\n     * @param _user the address of user to exit from the pool\\n     */\\n    function exitTerminatedFuture(IFutureVault _futureVault, address _user)\\n        external\\n        onlyStartFuture\\n        futureVaultIsValid(_futureVault)\\n    {\\n        _futureVault.exitTerminatedFuture(_user);\\n    }\\n\\n    /* Future Vault rewards mechanism */\\n\\n    function harvestVaultRewards(IFutureVault _futureVault) external onlyHarvestReward futureVaultIsValid(_futureVault) {\\n        _futureVault.harvestRewards();\\n    }\\n\\n    function redeemAllVaultRewards(IFutureVault _futureVault) external onlyHarvestReward futureVaultIsValid(_futureVault) {\\n        _futureVault.redeemAllVaultRewards();\\n    }\\n\\n    function redeemVaultRewards(IFutureVault _futureVault, address _rewardToken)\\n        external\\n        onlyHarvestReward\\n        futureVaultIsValid(_futureVault)\\n    {\\n        _futureVault.redeemVaultRewards(_rewardToken);\\n    }\\n\\n    function harvestWalletRewards(IFutureVault _futureVault) external onlyHarvestReward futureVaultIsValid(_futureVault) {\\n        IFutureWallet(_futureVault.getFutureWalletAddress()).harvestRewards();\\n    }\\n\\n    function redeemAllWalletRewards(IFutureVault _futureVault) external onlyHarvestReward futureVaultIsValid(_futureVault) {\\n        IFutureWallet(_futureVault.getFutureWalletAddress()).redeemAllWalletRewards();\\n    }\\n\\n    function redeemWalletRewards(IFutureVault _futureVault, address _rewardToken)\\n        external\\n        onlyHarvestReward\\n        futureVaultIsValid(_futureVault)\\n    {\\n        IFutureWallet(_futureVault.getFutureWalletAddress()).redeemWalletRewards(_rewardToken);\\n    }\\n\\n    /* Getters */\\n\\n    /**\\n     * @notice Getter for the registry address of the protocol\\n     * @return the address of the protocol registry\\n     */\\n    function getRegistryAddress() external view returns (address) {\\n        return address(registry);\\n    }\\n\\n    /**\\n     * @notice Getter for the period index depending on the period duration of the futureVault\\n     * @param _periodDuration the duration of the periods\\n     * @return the period index\\n     */\\n    function getPeriodIndex(uint256 _periodDuration) public view returns (uint256) {\\n        return periodIndexByDurations[_periodDuration];\\n    }\\n\\n    /**\\n     * @notice Getter for the beginning timestamp of the next period for the futures with a defined period duration\\n     * @param _periodDuration the duration of the periods\\n     * @return the timestamp of the beginning of the next period\\n     */\\n    function getNextPeriodStart(uint256 _periodDuration) public view returns (uint256) {\\n        return nextPeriodSwitchByDuration[_periodDuration];\\n    }\\n\\n    /**\\n     * @notice Getter for the next performance fee factor of one futureVault\\n     * @param _futureVault the interface of the futureVault\\n     * @return the next performance fee factor of the futureVault\\n     */\\n    function getNextPerformanceFeeFactor(IFutureVault _futureVault) external view returns (uint256) {\\n        return nextPerformanceFeeFactor[address(_futureVault)];\\n    }\\n\\n    /**\\n     * @notice Getter for the performance fee factor of one futureVault\\n     * @param _futureVault the interface of the futureVault\\n     * @return the performance fee factor of the futureVault\\n     */\\n    function getCurrentPerformanceFeeFactor(IFutureVault _futureVault)\\n        external\\n        view\\n        futureVaultIsValid(_futureVault)\\n        returns (uint256)\\n    {\\n        return _futureVault.getPerformanceFeeFactor();\\n    }\\n\\n    /**\\n     * @notice Getter for the list of futureVault durations registered in the contract\\n     * @return durationsList which consists of futureVault durations\\n     */\\n    function getDurations() external view returns (uint256[] memory durationsList) {\\n        durationsList = new uint256[](durations.length());\\n        uint256 numberOfDurations = durations.length();\\n        for (uint256 i = 0; i < numberOfDurations; i++) {\\n            durationsList[i] = durations.at(i);\\n        }\\n    }\\n\\n    /**\\n     * @notice Getter for the futures by period duration\\n     * @param _periodDuration the period duration of the futures to return\\n     */\\n    function getFuturesWithDuration(uint256 _periodDuration) external view returns (address[] memory filteredFutures) {\\n        uint256 listLength = futureVaultsByDuration[_periodDuration].length();\\n        filteredFutures = new address[](listLength);\\n        for (uint256 i = 0; i < listLength; i++) {\\n            filteredFutures[i] = futureVaultsByDuration[_periodDuration].at(i);\\n        }\\n    }\\n\\n    /* Security functions */\\n\\n    /**\\n     * @notice Terminate a futureVault\\n     * @param _futureVault the interface of the futureVault to terminate\\n     * @dev should only be called in extraordinary situations by the admin of the contract\\n     */\\n    function setFutureToTerminate(IFutureVault _futureVault) external onlyAdmin {\\n        toBeTerminatedByFutureVault[address(_futureVault)] = true;\\n        emit FutureSetToBeTerminated(_futureVault);\\n    }\\n\\n    /**\\n     * @notice Getter for the futureVault period state\\n     * @param _futureVault the interface of the futureVault\\n     * @return true if the futureVault is terminated\\n     */\\n    function isFutureTerminated(address _futureVault) external view returns (bool) {\\n        return futureVaultsTerminated.contains(_futureVault);\\n    }\\n\\n    /**\\n     * @notice Getter for the futureVault period state\\n     * @param _futureVault the interface of the futureVault\\n     * @return true if the futureVault is set to be terminated at its expiration\\n     */\\n    function isFutureSetToBeTerminated(address _futureVault) external view returns (bool) {\\n        return toBeTerminatedByFutureVault[_futureVault];\\n    }\\n\\n    /**\\n     * @notice Toggle withdrawals\\n     * @param _futureVault the interface of the futureVault to toggle\\n     * @dev should only be called in extraordinary situations by the admin of the contract\\n     */\\n    function toggleWithdrawalPause(IFutureVault _futureVault) external onlyAdmin {\\n        bool withdrawalPaused = !withdrawalsPausedByFutureVault[address(_futureVault)];\\n        withdrawalsPausedByFutureVault[address(_futureVault)] = withdrawalPaused;\\n        emit WithdrawalPauseChanged(_futureVault, withdrawalPaused);\\n    }\\n\\n    /**\\n     * @notice Getter for the futureVault withdrawals state\\n     * @param _futureVault the interface of the futureVault\\n     * @return true is new withdrawals are paused, false otherwise\\n     */\\n    function isWithdrawalsPaused(address _futureVault) external view returns (bool) {\\n        return withdrawalsPausedByFutureVault[_futureVault];\\n    }\\n\\n    /**\\n     * @notice Toggle deposit\\n     * @param _futureVault the interface of the futureVault to toggle\\n     * @dev should only be called in extraordinary situations by the admin of the contract\\n     */\\n    function toggleDepositPause(IFutureVault _futureVault) external onlyAdmin {\\n        bool depositPaused = !depositsPausedByFutureVault[address(_futureVault)];\\n        depositsPausedByFutureVault[address(_futureVault)] = depositPaused;\\n        emit DepositPauseChanged(_futureVault, depositPaused);\\n    }\\n\\n    /**\\n     * @notice Toggle delegation\\n     * @dev should only be called in extraordinary situations by the admin of the contract\\n     */\\n    function toggleDelegationPause() external onlyAdmin {\\n        DELEGATION_ENABLED = !DELEGATION_ENABLED;\\n        emit DelegationPauseChanged(DELEGATION_ENABLED);\\n    }\\n\\n    /**\\n     * @notice Getter for the futureVault deposits state\\n     * @param _futureVault the interface of the futureVault\\n     * @return true is new deposits are paused, false otherwise\\n     */\\n    function isDepositsPaused(address _futureVault) external view returns (bool) {\\n        return depositsPausedByFutureVault[_futureVault];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IERC20 is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/apwine/tokens/IFutureYieldToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IFutureYieldToken is IERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Returns the current balance of one user (without the claimable amount)\\n     * @param account the address of the account to check the balance of\\n     * @return the current fyt balance of this address\\n     */\\n    function recordedBalanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the current balance of one user including unclaimed FYT\\n     * @param account the address of the account to check the balance of\\n     * @return the total FYT balance of one address\\n     */\\n    function balanceOf(address account) external view override returns (uint256);\\n\\n    /**\\n     * @notice Getter for the future vault link to this fyt\\n     * @return the address of the future vault\\n     */\\n    function futureVault() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the internal period index of this fyt\\n     * @return the internal period index\\n     */\\n    function internalPeriodID() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/apwine/IFutureVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"contracts/interfaces/apwine/tokens/IPT.sol\\\";\\nimport \\\"contracts/interfaces/apwine/IRegistry.sol\\\";\\nimport \\\"contracts/interfaces/apwine/IFutureWallet.sol\\\";\\n\\ninterface IFutureVault {\\n    /* Events */\\n    event NewPeriodStarted(uint256 _newPeriodIndex);\\n    event FutureWalletSet(address _futureWallet);\\n    event RegistrySet(IRegistry _registry);\\n    event FundsDeposited(address _user, uint256 _amount);\\n    event FundsWithdrawn(address _user, uint256 _amount);\\n    event PTSet(IPT _pt);\\n    event LiquidityTransfersPaused();\\n    event LiquidityTransfersResumed();\\n    event DelegationCreated(address _delegator, address _receiver, uint256 _amount);\\n    event DelegationRemoved(address _delegator, address _receiver, uint256 _amount);\\n\\n    /* Params */\\n    /**\\n     * @notice Getter for the PERIOD future parameter\\n     * @return returns the period duration of the future\\n     */\\n    function PERIOD_DURATION() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the PLATFORM_NAME future parameter\\n     * @return returns the platform of the future\\n     */\\n    function PLATFORM_NAME() external view returns (string memory);\\n\\n    /**\\n     * @notice Start a new period\\n     * @dev needs corresponding permissions for sender\\n     */\\n    function startNewPeriod() external;\\n\\n    /**\\n     * @notice Exit a terminated pool\\n     * @param _user the user to exit from the pool\\n     * @dev only pt are required as there  aren't any new FYTs\\n     */\\n    function exitTerminatedFuture(address _user) external;\\n\\n    /**\\n     * @notice Update the state of the user and mint claimable pt\\n     * @param _user user adress\\n     */\\n    function updateUserState(address _user) external;\\n\\n    /**\\n     * @notice Send the user their owed FYT (and pt if there are some claimable)\\n     * @param _user address of the user to send the FYT to\\n     */\\n    function claimFYT(address _user, uint256 _amount) external;\\n\\n    /**\\n     * @notice Deposit funds into ongoing period\\n     * @param _user user adress\\n     * @param _amount amount of funds to unlock\\n     * @dev part of the amount deposited will be used to buy back the yield already generated proportionally to the amount deposited\\n     */\\n    function deposit(address _user, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sender unlocks the locked funds corresponding to their pt holding\\n     * @param _user user adress\\n     * @param _amount amount of funds to unlock\\n     * @dev will require a transfer of FYT of the ongoing period corresponding to the funds unlocked\\n     */\\n    function withdraw(address _user, uint256 _amount) external;\\n\\n    /**\\n     * @notice Create a delegation from one address to another\\n     * @param _delegator the address delegating its future FYTs\\n     * @param _receiver the address receiving the future FYTs\\n     * @param _amount the of future FYTs to delegate\\n     */\\n    function createFYTDelegationTo(\\n        address _delegator,\\n        address _receiver,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Remove a delegation from one address to another\\n     * @param _delegator the address delegating its future FYTs\\n     * @param _receiver the address receiving the future FYTs\\n     * @param _amount the of future FYTs to remove from the delegation\\n     */\\n    function withdrawFYTDelegationFrom(\\n        address _delegator,\\n        address _receiver,\\n        uint256 _amount\\n    ) external;\\n\\n    /* Getters */\\n\\n    /**\\n     * @notice Getter the total number of FYTs on address is delegating\\n     * @param _delegator the delegating address\\n     * @return totalDelegated the number of FYTs delegated\\n     */\\n    function getTotalDelegated(address _delegator) external view returns (uint256 totalDelegated);\\n\\n    /**\\n     * @notice Getter for next period index\\n     * @return next period index\\n     * @dev index starts at 1\\n     */\\n    function getNextPeriodIndex() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for current period index\\n     * @return current period index\\n     * @dev index starts at 1\\n     */\\n    function getCurrentPeriodIndex() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the amount of pt that the user can claim\\n     * @param _user user to check the check the claimable pt of\\n     * @return the amount of pt claimable by the user\\n     */\\n    function getClaimablePT(address _user) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the amount (in underlying) of premium redeemable with the corresponding amount of fyt/pt to be burned\\n     * @param _user user adress\\n     * @return premiumLocked the premium amount unlockage at this period (in underlying), amountRequired the amount of pt/fyt required for that operation\\n     */\\n    function getUserEarlyUnlockablePremium(address _user)\\n        external\\n        view\\n        returns (uint256 premiumLocked, uint256 amountRequired);\\n\\n    /**\\n     * @notice Getter for user IBT amount that is unlockable\\n     * @param _user the user to unlock the IBT from\\n     * @return the amount of IBT the user can unlock\\n     */\\n    function getUnlockableFunds(address _user) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the amount of FYT that the user can claim for a certain period\\n     * @param _user the user to check the claimable FYT of\\n     * @param _periodIndex period ID to check the claimable FYT of\\n     * @return the amount of FYT claimable by the user for this period ID\\n     */\\n    function getClaimableFYTForPeriod(address _user, uint256 _periodIndex) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the yield currently generated by one pt for the current period\\n     * @return the amount of yield (in IBT) generated during the current period\\n     */\\n    function getUnrealisedYieldPerPT() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the number of pt that can be minted for an amoumt deposited now\\n     * @param _amount the amount to of IBT to deposit\\n     * @return the number of pt that can be minted for that amount\\n     */\\n    function getPTPerAmountDeposited(uint256 _amount) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for premium in underlying tokens that can be redeemed at the end of the period of the deposit\\n     * @param _amount the amount of underlying deposited\\n     * @return the number of underlying of the ibt deposited that will be redeemable\\n     */\\n    function getPremiumPerUnderlyingDeposited(uint256 _amount) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for total underlying deposited in the vault\\n     * @return the total amount of funds deposited in the vault (in underlying)\\n     */\\n    function getTotalUnderlyingDeposited() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the total yield generated during one period\\n     * @param _periodID the period id\\n     * @return the total yield in underlying value\\n     */\\n    function getYieldOfPeriod(uint256 _periodID) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for controller address\\n     * @return the controller address\\n     */\\n    function getControllerAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for futureWallet address\\n     * @return futureWallet address\\n     */\\n    function getFutureWalletAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the IBT address\\n     * @return IBT address\\n     */\\n    function getIBTAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for future pt address\\n     * @return pt address\\n     */\\n    function getPTAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for FYT address of a particular period\\n     * @param _periodIndex period index\\n     * @return FYT address\\n     */\\n    function getFYTofPeriod(uint256 _periodIndex) external view returns (address);\\n\\n    /**\\n     * @notice Getter for the terminated state of the future\\n     * @return true if this vault is terminated\\n     */\\n    function isTerminated() external view returns (bool);\\n\\n    /**\\n     * @notice Getter for the performance fee factor of the current period\\n     * @return the performance fee factor of the futureVault\\n     */\\n    function getPerformanceFeeFactor() external view returns (uint256);\\n\\n    /* Rewards mecanisms*/\\n\\n    /**\\n     * @notice Harvest all rewards from the vault\\n     */\\n    function harvestRewards() external;\\n\\n    /**\\n     * @notice Transfer all the redeemable rewards to set defined recipient\\n     */\\n    function redeemAllVaultRewards() external;\\n\\n    /**\\n     * @notice Transfer the specified token reward balance tot the defined recipient\\n     * @param _rewardToken the reward token to redeem the balance of\\n     */\\n    function redeemVaultRewards(address _rewardToken) external;\\n\\n    /**\\n     * @notice Add a token to the list of reward tokens\\n     * @param _token the reward token to add to the list\\n     * @dev the token must be different than the ibt\\n     */\\n    function addRewardsToken(address _token) external;\\n\\n    /**\\n     * @notice Getter to check if a token is in the reward tokens list\\n     * @param _token the token to check if it is in the list\\n     * @return true if the token is a reward token\\n     */\\n    function isRewardToken(address _token) external view returns (bool);\\n\\n    /**\\n     * @notice Getter for the reward token at an index\\n     * @param _index the index of the reward token in the list\\n     * @return the address of the token at this index\\n     */\\n    function getRewardTokenAt(uint256 _index) external view returns (address);\\n\\n    /**\\n     * @notice Getter for the size of the list of reward tokens\\n     * @return the number of token in the list\\n     */\\n    function getRewardTokensCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the address of the rewards recipient\\n     * @return the address of the rewards recipient\\n     */\\n    function getRewardsRecipient() external view returns (address);\\n\\n    /**\\n     * @notice Setter for the address of the rewards recipient\\n     */\\n    function setRewardRecipient(address _recipient) external;\\n\\n    /* Admin functions */\\n\\n    /**\\n     * @notice Set futureWallet address\\n     */\\n    function setFutureWallet(IFutureWallet _futureWallet) external;\\n\\n    /**\\n     * @notice Set Registry\\n     */\\n    function setRegistry(IRegistry _registry) external;\\n\\n    /**\\n     * @notice Pause liquidity transfers\\n     */\\n    function pauseLiquidityTransfers() external;\\n\\n    /**\\n     * @notice Resume liquidity transfers\\n     */\\n    function resumeLiquidityTransfers() external;\\n\\n    /**\\n     * @notice Convert an amount of IBTs in its equivalent in underlying tokens\\n     * @param _amount the amount of IBTs\\n     * @return the corresponding amount of underlying\\n     */\\n    function convertIBTToUnderlying(uint256 _amount) external view returns (uint256);\\n\\n    /**\\n     * @notice Convert an amount of underlying tokens in its equivalent in IBTs\\n     * @param _amount the amount of underlying tokens\\n     * @return the corresponding amount of IBTs\\n     */\\n    function convertUnderlyingtoIBT(uint256 _amount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/apwine/IFutureWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\ninterface IFutureWallet {\\n    /* Events */\\n\\n    event YieldRedeemed(address _user, uint256 _periodIndex);\\n    event WithdrawalsPaused();\\n    event WithdrawalsResumed();\\n\\n    /**\\n     * @notice register the yield of an expired period\\n     * @param _amount the amount of yield to be registered\\n     */\\n    function registerExpiredFuture(uint256 _amount) external;\\n\\n    /**\\n     * @notice redeem the yield of the underlying yield of the FYT held by the sender\\n     * @param _periodIndex the index of the period to redeem the yield from\\n     */\\n    function redeemYield(uint256 _periodIndex) external;\\n\\n    /**\\n     * @notice return the yield that could be redeemed by an address for a particular period\\n     * @param _periodIndex the index of the corresponding period\\n     * @param _user the FYT holder\\n     * @return the yield that could be redeemed by the token holder for this period\\n     */\\n    function getRedeemableYield(uint256 _periodIndex, address _user) external view returns (uint256);\\n\\n    /**\\n     * @notice getter for the address of the future corresponding to this future wallet\\n     * @return the address of the future\\n     */\\n    function getFutureVaultAddress() external view returns (address);\\n\\n    /**\\n     * @notice getter for the address of the IBT corresponding to this future wallet\\n     * @return the address of the IBT\\n     */\\n    function getIBTAddress() external view returns (address);\\n\\n    /* Rewards mecanisms*/\\n\\n    /**\\n     * @notice Harvest all rewards from the future wallet\\n     */\\n    function harvestRewards() external;\\n\\n    /**\\n     * @notice Transfer all the redeemable rewards to set defined recipient\\n     */\\n    function redeemAllWalletRewards() external;\\n\\n    /**\\n     * @notice Transfer the specified token reward balance tot the defined recipient\\n     * @param _rewardToken the reward token to redeem the balance of\\n     */\\n    function redeemWalletRewards(address _rewardToken) external;\\n\\n    /**\\n     * @notice Getter for the address of the rewards recipient\\n     * @return the address of the rewards recipient\\n     */\\n    function getRewardsRecipient() external view returns (address);\\n\\n    /**\\n     * @notice Setter for the address of the rewards recipient\\n     */\\n    function setRewardRecipient(address _recipient) external;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/RegistryStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"contracts/interfaces/apwine/IRegistry.sol\\\";\\n\\nimport \\\"contracts/utils/RoleCheckable.sol\\\";\\n\\ncontract RegistryStorage is RoleCheckable {\\n    IRegistry internal registry;\\n\\n    event RegistryChanged(IRegistry _registry);\\n\\n    /* User Methods */\\n\\n    /**\\n     * @notice Setter for the registry address\\n     * @param _registry the address of the new registry\\n     */\\n    function setRegistry(IRegistry _registry) external onlyAdmin {\\n        registry = _registry;\\n        emit RegistryChanged(_registry);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/apwine/tokens/IPT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IPT is IERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) external;\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @notice Returns the current balance of one user (without the claimable amount)\\n     * @param account the address of the account to check the balance of\\n     * @return the current pt balance of this address\\n     */\\n    function recordedBalanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the current balance of one user including the pt that were not claimed yet\\n     * @param account the address of the account to check the balance of\\n     * @return the total pt balance of one address\\n     */\\n    function balanceOf(address account) external view override returns (uint256);\\n\\n    /**\\n     * @notice Getter for the future vault link to this pt\\n     * @return the address of the future vault\\n     */\\n    function futureVault() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/apwine/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IRegistry {\\n    /* Setters */\\n    /**\\n     * @notice Setter for the treasury address\\n     * @param _newTreasury the address of the new treasury\\n     */\\n    function setTreasury(address _newTreasury) external;\\n\\n    /**\\n     * @notice Setter for the controller address\\n     * @param _newController the address of the new controller\\n     */\\n    function setController(address _newController) external;\\n\\n    /**\\n     * @notice Setter for the APWine IBT logic address\\n     * @param _PTLogic the address of the new APWine IBT logic\\n     */\\n    function setPTLogic(address _PTLogic) external;\\n\\n    /**\\n     * @notice Setter for the APWine FYT logic address\\n     * @param _FYTLogic the address of the new APWine FYT logic\\n     */\\n    function setFYTLogic(address _FYTLogic) external;\\n\\n    /**\\n     * @notice Getter for the controller address\\n     * @return the address of the controller\\n     */\\n    function getControllerAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the treasury address\\n     * @return the address of the treasury\\n     */\\n    function getTreasuryAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the token factory address\\n     * @return the token factory address\\n     */\\n    function getTokensFactoryAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for APWine IBT logic address\\n     * @return the APWine IBT logic address\\n     */\\n    function getPTLogicAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for APWine FYT logic address\\n     * @return the APWine FYT logic address\\n     */\\n    function getFYTLogicAddress() external view returns (address);\\n\\n    /* Futures */\\n    /**\\n     * @notice Add a future to the registry\\n     * @param _future the address of the future to add to the registry\\n     */\\n    function addFutureVault(address _future) external;\\n\\n    /**\\n     * @notice Remove a future from the registry\\n     * @param _future the address of the future to remove from the registry\\n     */\\n    function removeFutureVault(address _future) external;\\n\\n    /**\\n     * @notice Getter to check if a future is registered\\n     * @param _future the address of the future to check the registration of\\n     * @return true if it is, false otherwise\\n     */\\n    function isRegisteredFutureVault(address _future) external view returns (bool);\\n\\n    /**\\n     * @notice Getter for the future registered at an index\\n     * @param _index the index of the future to return\\n     * @return the address of the corresponding future\\n     */\\n    function getFutureVaultAt(uint256 _index) external view returns (address);\\n\\n    /**\\n     * @notice Getter for number of future registered\\n     * @return the number of future registered\\n     */\\n    function futureVaultCount() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/RoleCheckable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\ncontract RoleCheckable is AccessControlUpgradeable {\\n    /* ACR Roles*/\\n\\n    // keccak256(\\\"DEFAULT_ADMIN_ROLE\\\");\\n    bytes32 internal constant ADMIN_ROLE = 0x1effbbff9c66c5e59634f24fe842750c60d18891155c32dd155fc2d661a4c86d;\\n    // keccak256(\\\"CONTROLLER_ROLE\\\")\\n    bytes32 internal constant CONTROLLER_ROLE = 0x7b765e0e932d348852a6f810bfa1ab891e259123f02db8cdcde614c570223357;\\n    // keccak256(\\\"START_FUTURE\\\")\\n    bytes32 internal constant START_FUTURE = 0xeb5092aab714e6356486bc97f25dd7a5c1dc5c7436a9d30e8d4a527fba24de1c;\\n    // keccak256(\\\"FUTURE_ROLE\\\")\\n    bytes32 internal constant FUTURE_ROLE = 0x52d2dbc4d362e84c42bdfb9941433968ba41423559d7559b32db1183b22b148f;\\n    // keccak256(\\\"HARVEST_REWARDS\\\")\\n    bytes32 internal constant HARVEST_REWARDS = 0xf2683e58e5a2a04c1ed32509bfdbf1e9ebc725c63f4c95425d2afd482bfdb0f8;\\n\\n    /* Modifiers */\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"RoleCheckable: Caller should be ADMIN\\\");\\n        _;\\n    }\\n\\n    modifier onlyStartFuture() {\\n        require(hasRole(START_FUTURE, msg.sender), \\\"RoleCheckable: Caller should have START FUTURE Role\\\");\\n        _;\\n    }\\n\\n    modifier onlyHarvestReward() {\\n        require(hasRole(HARVEST_REWARDS, msg.sender), \\\"RoleCheckable: Caller should have HARVEST REWARDS Role\\\");\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(hasRole(CONTROLLER_ROLE, msg.sender), \\\"RoleCheckable: Caller should be CONTROLLER\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using AddressUpgradeable for address;\\n\\n    struct RoleData {\\n        EnumerableSetUpgradeable.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_delegationPaused\",\"type\":\"bool\"}],\"name\":\"DelegationPauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_depositPaused\",\"type\":\"bool\"}],\"name\":\"DepositPauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"}],\"name\":\"FutureRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"}],\"name\":\"FutureSetToBeTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"}],\"name\":\"FutureTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"}],\"name\":\"FutureUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeFactor\",\"type\":\"uint256\"}],\"name\":\"NewPerformanceFeeFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_periodIndex\",\"type\":\"uint256\"}],\"name\":\"NewPeriodDurationIndexSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_periodDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nextSwitchTimestamp\",\"type\":\"uint256\"}],\"name\":\"NextPeriodSwitchSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_periodDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_periodIndex\",\"type\":\"uint256\"}],\"name\":\"PeriodSwitchedByDurationDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IRegistry\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"RegistryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startingDelay\",\"type\":\"uint256\"}],\"name\":\"StartingDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_withdrawalPaused\",\"type\":\"bool\"}],\"name\":\"WithdrawalPauseChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATION_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STARTING_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createFYTDelegationTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"exitTerminatedFuture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"}],\"name\":\"getCurrentPerformanceFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDurations\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"durationsList\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodDuration\",\"type\":\"uint256\"}],\"name\":\"getFuturesWithDuration\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"filteredFutures\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"}],\"name\":\"getNextPerformanceFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodDuration\",\"type\":\"uint256\"}],\"name\":\"getNextPeriodStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodDuration\",\"type\":\"uint256\"}],\"name\":\"getPeriodIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"}],\"name\":\"harvestVaultRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"}],\"name\":\"harvestWalletRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_futureVault\",\"type\":\"address\"}],\"name\":\"isDepositsPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_futureVault\",\"type\":\"address\"}],\"name\":\"isFutureSetToBeTerminated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_futureVault\",\"type\":\"address\"}],\"name\":\"isFutureTerminated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_futureVault\",\"type\":\"address\"}],\"name\":\"isWithdrawalsPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"}],\"name\":\"redeemAllVaultRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"}],\"name\":\"redeemAllWalletRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"redeemVaultRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"redeemWalletRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"}],\"name\":\"registerNewFutureVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"}],\"name\":\"setFutureToTerminate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeFactor\",\"type\":\"uint256\"}],\"name\":\"setNextPerformanceFeeFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextPeriodTimestamp\",\"type\":\"uint256\"}],\"name\":\"setNextPeriodSwitchTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPeriodIndex\",\"type\":\"uint256\"}],\"name\":\"setPeriodDurationIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startingDelay\",\"type\":\"uint256\"}],\"name\":\"setPeriodStartingDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"}],\"name\":\"startFuture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodDuration\",\"type\":\"uint256\"}],\"name\":\"startFuturesByPeriodDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleDelegationPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"}],\"name\":\"toggleDepositPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"}],\"name\":\"toggleWithdrawalPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"}],\"name\":\"unregisterFutureVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFutureVault\",\"name\":\"_futureVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFYTDelegationFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Controller","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}