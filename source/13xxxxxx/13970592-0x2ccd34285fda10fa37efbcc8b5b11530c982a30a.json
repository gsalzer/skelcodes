{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.11;\r\n\r\n/// @title A minimalist service for posting messages.\r\n/// @author Cyril Kato\r\n/// @notice This contract could be used for microblogging.\r\ncontract Log {\r\n    address private immutable OWNER_ADDR;\r\n\r\n    event Post(string message);\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Not owner\");\r\n\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        OWNER_ADDR = msg.sender;\r\n    }\r\n\r\n    /// @notice Post a message.\r\n    /// @dev IPFS CIDs may be posted.\r\n    /// @param _message The message to post.\r\n    function post(string memory _message) external onlyOwner() {\r\n        emit Post(_message);\r\n    }\r\n\r\n    function isOwner() private view returns (bool) {\r\n        return msg.sender == OWNER_ADDR;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Post\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"post\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Log","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://11a075133a819c15c9c5aca546ee19a9b22f0091cc4996291abf5e1abcfcd4e2"}]}