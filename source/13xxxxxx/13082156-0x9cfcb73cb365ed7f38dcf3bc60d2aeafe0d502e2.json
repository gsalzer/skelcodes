{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IMinerManage {\r\n\r\n    function setOracleAddress(address _oracleAddress) external;\r\n    function minerAdjustedStoragePowerInTiB(string memory minerId) external view returns(uint256);\r\n    function whiteList(address walletAddress) external returns(bool);\r\n    function minerInfoMap(address walletAddress) external returns(string memory);\r\n    function getMinerList() external view returns(string[] memory);\r\n    function getMinerId(address walletAddress) external view returns(string memory);\r\n}\r\n\r\ninterface IMiningNFTManage {\r\n\r\n    function getMinerIdByTokenId(uint256 _tokenId) external view returns(string memory);\r\n    \r\n}\r\n\r\ninterface IMiningNFT is IERC1155{\r\n\r\n    function getInitialTokenId() external pure returns(uint256);\r\n    function getCurrentTokenId() external view returns(uint256);\r\n\r\n    function mint(address account, uint256 amount) external returns(uint256);\r\n\r\n    function burn(address account,uint256 tokenId, uint256 amount) external ;\r\n}\r\n\r\ninterface IFilChainStatOracle {\r\n    function sectorInitialPledge() external view returns(uint256);\r\n    function minerAdjustedPower(string memory _minerId) external view returns(uint256);\r\n    function minerMiningEfficiency(string memory _minerId) external view returns(uint256);\r\n    function minerSectorInitialPledge(string memory _minerId) external view returns(uint256);\r\n    function minerTotalAdjustedPower() external view returns(uint256);\r\n    function avgMiningEfficiency() external view returns(uint256);\r\n    function latest24hBlockReward() external view returns(uint256);\r\n    function rewardAttenuationFactor() external view returns(uint256);\r\n    function networkStoragePower() external view returns(uint256);\r\n    function dailyStoragePowerIncrease() external view returns(uint256);\r\n    function removeMinerAdjustedPower(string memory _minerId) external;\r\n    \r\n}\r\n\r\ninterface IMiningNFTMintingLimitation {\r\n    function getMinerMintLimitationInTiB(string memory _minerId) external view returns(uint256);\r\n    function checkLimitation(string memory _minerId, uint256 _minerTotalMinted, uint256 _allMinersTotalMinted) external view returns(bool, string memory);\r\n}\r\n\r\ncontract MiningNFTManage is Ownable{\r\n    using SafeMath for uint256;\r\n\r\n    struct TokenInfo{\r\n        string minerId;\r\n        uint256 supply;\r\n        uint256 initialPledgePerTiB;\r\n    }\r\n\r\n    mapping(string=>uint256) public mintedAmount; // in TiB\r\n    mapping(string=>uint256[]) minerMintedTokens;\r\n    mapping(uint256=>TokenInfo) public tokenInfoMap;\r\n    mapping(string=>uint256) public minerTotalPledgedAmount;\r\n\r\n    uint256 public totalMintedInTiB;\r\n    uint256 public totalSectorInitialPledge; // attoFil/TiB\r\n    \r\n    IMinerManage public minerManage;\r\n    IMiningNFT public miningNFT;\r\n    IFilChainStatOracle public filChainStatOracle;\r\n    IMiningNFTMintingLimitation public miningNFTMintingLimitation;\r\n\r\n    event Mint(address indexed account, uint256 indexed tokenId, uint256 amount);\r\n    event Burn(address indexed account, uint256 indexed tokenId, uint256 amount);\r\n    event RemoveToken(address indexed account, string indexed minerId, uint256 tokenId);\r\n    event MiningNftMintingLimitationChanged(address limitation, address newLimitation);\r\n    event MinerManageChanged(address minerManage, address newMinerManage);\r\n    event FilChainStatOracleChanged(address filChainStatOracle, address newFilChainStatOracle);\r\n\r\n    constructor(IMinerManage _minerManage, IMiningNFT _miningNFT, IFilChainStatOracle _filChainStatOracle, IMiningNFTMintingLimitation _miningNFTMintingLimitation){\r\n        minerManage = _minerManage;\r\n        miningNFT = _miningNFT;\r\n        filChainStatOracle = _filChainStatOracle;\r\n        miningNFTMintingLimitation = _miningNFTMintingLimitation;\r\n    }\r\n    \r\n    function setMiningNFTMintingLimitation(IMiningNFTMintingLimitation _miningNFTMintingLimitation) public onlyOwner{\r\n        require(address(_miningNFTMintingLimitation) != address(0), \"address should not be 0\");\r\n        address origin = address(miningNFTMintingLimitation);\r\n        miningNFTMintingLimitation = _miningNFTMintingLimitation;\r\n        emit MiningNftMintingLimitationChanged(origin, address(_miningNFTMintingLimitation));\r\n    }\r\n\r\n    function setMinerManage(IMinerManage _minerManage) external onlyOwner{\r\n        require(address(_minerManage) != address(0), \"address should not be 0\");\r\n        address originMinerManage = address(minerManage);\r\n        minerManage = _minerManage;\r\n        emit MinerManageChanged(originMinerManage, address(_minerManage));\r\n    }\r\n\r\n    function setFilChainStatOracle(IFilChainStatOracle _filChainStatOracle) external onlyOwner{\r\n        require(address(_filChainStatOracle) != address(0), \"address should not be 0\");\r\n        emit FilChainStatOracleChanged(address(filChainStatOracle), address(_filChainStatOracle));\r\n        filChainStatOracle = _filChainStatOracle;\r\n    }\r\n\r\n    function getMinerMintedTokensByWalletAddress(address _walletAddress) external view returns(uint256[] memory){\r\n        string memory minerId = minerManage.getMinerId(_walletAddress);\r\n        return minerMintedTokens[minerId];\r\n    }\r\n\r\n    function getMinerMintedTokens(string memory _minerId) external view returns(uint256[] memory){\r\n        return minerMintedTokens[_minerId];\r\n    }\r\n\r\n    function getMinerIdByTokenId(uint256 _tokenId) external view returns(string memory){\r\n        return tokenInfoMap[_tokenId].minerId;\r\n    }\r\n\r\n    function getLastMintedTokenId(string memory _minerId) external view returns(uint256){\r\n        uint256[] memory mintedTokens = minerMintedTokens[_minerId];\r\n        if(mintedTokens.length>0){\r\n            return mintedTokens[mintedTokens.length - 1];\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function mint(uint256 _amount) external {\r\n        require(minerManage.whiteList(_msgSender()), \"sender not in whitelist\");\r\n\r\n        string memory minerId = minerManage.getMinerId(_msgSender());\r\n        uint256 minerMintedAmount = mintedAmount[minerId];\r\n\r\n        (bool success, string memory message) = miningNFTMintingLimitation.checkLimitation(minerId, minerMintedAmount.add(_amount), totalMintedInTiB.add(_amount));\r\n        require(success, message);\r\n\r\n        mintedAmount[minerId] = minerMintedAmount.add(_amount);\r\n        totalMintedInTiB = totalMintedInTiB.add(_amount);\r\n\r\n        uint256 newTokenId = miningNFT.mint(_msgSender(), _amount);\r\n        minerMintedTokens[minerId].push(newTokenId);\r\n\r\n        uint256 sectorInitialPledge = filChainStatOracle.sectorInitialPledge();\r\n        require(sectorInitialPledge > 0, \"sectorInitialPledge should be >0\");\r\n        \r\n        tokenInfoMap[newTokenId] = TokenInfo(minerId, _amount, sectorInitialPledge);\r\n        uint256 pledgeAmount = sectorInitialPledge.mul(_amount);\r\n        totalSectorInitialPledge = totalSectorInitialPledge.add(pledgeAmount);\r\n        minerTotalPledgedAmount[minerId] = minerTotalPledgedAmount[minerId].add(pledgeAmount);\r\n\r\n        emit Mint(_msgSender(), newTokenId, _amount);\r\n    }\r\n\r\n    function burn(uint256 _tokenId, uint256 _amount) external {\r\n        address account = _msgSender();\r\n        require(miningNFT.balanceOf(account, _tokenId)>=_amount, \"burn amount exceed balance\");\r\n        \r\n        string memory minerId = minerManage.getMinerId(_msgSender());\r\n        mintedAmount[minerId] = mintedAmount[minerId].sub(_amount);\r\n        totalMintedInTiB = totalMintedInTiB.sub(_amount);\r\n\r\n        uint256 tokenSectorInitialPledge = tokenInfoMap[_tokenId].initialPledgePerTiB;\r\n        uint256 pledgeAmount = tokenSectorInitialPledge.mul(_amount);\r\n        totalSectorInitialPledge = totalSectorInitialPledge.sub(pledgeAmount);\r\n        minerTotalPledgedAmount[minerId] = minerTotalPledgedAmount[minerId].sub(pledgeAmount);\r\n\r\n        miningNFT.burn(account, _tokenId, _amount);\r\n        removeMintedToken(_tokenId);\r\n        emit Burn(account, _tokenId, _amount);\r\n    }\r\n\r\n    function removeMintedToken(uint256 _tokenId) internal{\r\n        if(miningNFT.balanceOf(_msgSender(), _tokenId) == 0){\r\n            string memory minerId = minerManage.getMinerId(_msgSender());\r\n            uint256[] storage mintedTokens = minerMintedTokens[minerId];\r\n\r\n            for(uint i=0; i<mintedTokens.length; i++){\r\n                if(mintedTokens[i] == _tokenId){\r\n                    mintedTokens[i] = mintedTokens[mintedTokens.length - 1];\r\n                    mintedTokens.pop();\r\n                    emit RemoveToken(_msgSender(), minerId, _tokenId);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAvgInitialPledge() public view returns(uint256){\r\n        if(totalMintedInTiB==0) return 0;\r\n        return totalSectorInitialPledge.div(totalMintedInTiB);\r\n    }\r\n\r\n    function getMinerTotalPledgeFilAmount(string memory _minerId) public view returns(uint256){\r\n        return minerTotalPledgedAmount[_minerId];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IMinerManage\",\"name\":\"_minerManage\",\"type\":\"address\"},{\"internalType\":\"contract IMiningNFT\",\"name\":\"_miningNFT\",\"type\":\"address\"},{\"internalType\":\"contract IFilChainStatOracle\",\"name\":\"_filChainStatOracle\",\"type\":\"address\"},{\"internalType\":\"contract IMiningNFTMintingLimitation\",\"name\":\"_miningNFTMintingLimitation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"filChainStatOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFilChainStatOracle\",\"type\":\"address\"}],\"name\":\"FilChainStatOracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minerManage\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMinerManage\",\"type\":\"address\"}],\"name\":\"MinerManageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"limitation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLimitation\",\"type\":\"address\"}],\"name\":\"MiningNftMintingLimitationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"minerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"RemoveToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"filChainStatOracle\",\"outputs\":[{\"internalType\":\"contract IFilChainStatOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvgInitialPledge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_minerId\",\"type\":\"string\"}],\"name\":\"getLastMintedTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getMinerIdByTokenId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_minerId\",\"type\":\"string\"}],\"name\":\"getMinerMintedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"getMinerMintedTokensByWalletAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_minerId\",\"type\":\"string\"}],\"name\":\"getMinerTotalPledgeFilAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minerManage\",\"outputs\":[{\"internalType\":\"contract IMinerManage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"minerTotalPledgedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningNFT\",\"outputs\":[{\"internalType\":\"contract IMiningNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningNFTMintingLimitation\",\"outputs\":[{\"internalType\":\"contract IMiningNFTMintingLimitation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"mintedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFilChainStatOracle\",\"name\":\"_filChainStatOracle\",\"type\":\"address\"}],\"name\":\"setFilChainStatOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMinerManage\",\"name\":\"_minerManage\",\"type\":\"address\"}],\"name\":\"setMinerManage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMiningNFTMintingLimitation\",\"name\":\"_miningNFTMintingLimitation\",\"type\":\"address\"}],\"name\":\"setMiningNFTMintingLimitation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenInfoMap\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"minerId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPledgePerTiB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMintedInTiB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSectorInitialPledge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MiningNFTManage","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002d7a678eb9196d0de4f5467141038dbc949c97a1000000000000000000000000ad1ed31e70b569d78d1930537179a940dda4a9cf000000000000000000000000ca106916ca1f9c53442435036edf9b137b381c900000000000000000000000000b72c88a4f5e81d96da2ea3e8a26d0113de9d3ac","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cc040d299963d418263bb2546efb47ef480dc5f779a9d89e7c1e258dc2ecbd43"}]}