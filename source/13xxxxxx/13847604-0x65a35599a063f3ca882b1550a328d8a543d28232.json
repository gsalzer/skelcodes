{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.9;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts/vesting/IVesting.sol\r\n// Author : Tokeny Solutions\r\n\r\ninterface IVesting {\r\n\r\n    // events\r\n    event UpdatedTreasury(address newTreasury);\r\n    event UpdatedTeam(address newTeam);\r\n    event UpdatedEcosystemFund(address newEcosystemFund);\r\n    event UpdatedLongTermLockUp(address newLongTermLockUp);\r\n    event TokenSet(address token);\r\n    event InitialDeposit(address _to, uint256 _amount, uint _cliff, uint _vesting);\r\n    event TokensClaimed(address _holder, uint256 _amount);\r\n    event ReferenceDateSet(uint256 _referenceDate);\r\n\r\n    // functions\r\n    function setToken(address token) external;\r\n    function initialized() external view returns(bool);\r\n    function treasury() external view returns(address);\r\n    function updateTreasuryWallet(address newTreasury) external;\r\n    function team() external view returns(address);\r\n    function updateTeamWallet(address newTeam) external;\r\n    function ecosystemFund() external view returns(address);\r\n    function updateEcosystemFundWallet(address newEcosystemFund) external;\r\n    function longTermLockUp() external view returns(address);\r\n    function updateLongTermLockUpWallet(address newLongTermLockUp) external;\r\n    function initialDeposit(address _to, uint256 _amount, uint _cliff, uint _vesting) external;\r\n    function claim() external;\r\n    function claimFor(address _holder) external;\r\n    function claimAll() external;\r\n    function getBalances(address _holder) external view returns(uint, uint, uint);\r\n\r\n}\r\n\r\n// File: contracts/vesting/Vesting.sol\r\n// Author : Tokeny Solutions\r\n\r\n\r\ncontract Vesting is Ownable, IVesting {\r\n    using SafeERC20 for IERC20Metadata;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 public referenceDate = 0;\r\n    uint32 private constant MONTH = 30 days;\r\n\r\n    struct VestingData {\r\n        uint cliff; // Number of months during which the holder's tokens are locked in cliff\r\n        uint vesting; // Total Number of months during which the holder's tokens are vested\r\n        uint256 totalVestedAmount; // amount of tokens in vesting on the contract for a given address and a given vesting schema\r\n        uint256 releasedAmount; // amount of tokens already released from totalVestedAmount\r\n    }\r\n\r\n    mapping(address => VestingData) public _vestingData;\r\n\r\n    address private _treasury;\r\n    address private _team;\r\n    address private _ecosystemFund;\r\n    address private _longTermLockUp;\r\n    IERC20Metadata private _token;\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev contract constructor\r\n     * @param treasury_ the treasury address\r\n     * @param team_ the team address\r\n     * @param ecosystemFund_ the ecosystem fund address\r\n     * @param longTermLockUp_ the long term lockup address\r\n     * @param owner the owner address\r\n     */\r\n    constructor(\r\n        address treasury_,\r\n        address team_,\r\n        address ecosystemFund_,\r\n        address longTermLockUp_,\r\n        address owner,\r\n        uint256 _referenceDate)  {\r\n        _treasury = treasury_;\r\n        _team = team_;\r\n        _ecosystemFund =ecosystemFund_;\r\n        _longTermLockUp = longTermLockUp_;\r\n        _initialized = false;\r\n        _transferOwnership(owner);\r\n        _setReferenceDate(_referenceDate);\r\n    }\r\n\r\n    /**\r\n     * @dev internal function used to set the reference date for the start of vesting\r\n     * @param _referenceDate the date of reference in UNIX time\r\n     * can be called only once\r\n     */\r\n    function _setReferenceDate(uint256 _referenceDate) internal {\r\n        require(referenceDate == 0, 'Reference date has already been initialized');\r\n        require(_referenceDate != 0, 'Cannot set reference date to 0');\r\n        referenceDate = _referenceDate;\r\n        emit ReferenceDateSet(_referenceDate);\r\n    }\r\n\r\n    /**\r\n     * @dev initialization function setting the address of BMEX token\r\n     * can be called only once, after that the contract is set to initialized\r\n     */\r\n    function setToken(address token) external override {\r\n        require(!initialized(), 'token address already set');\r\n        _token = IERC20Metadata(token);\r\n        _initialized = true;\r\n        emit TokenSet(token);\r\n    }\r\n\r\n    /**\r\n     * @dev getter function for initialization status (token initialization)\r\n     */\r\n    function initialized() public view override returns(bool) {\r\n        return _initialized;\r\n    }\r\n\r\n    /**\r\n     * @dev getter function for treasury wallet address\r\n     */\r\n    function treasury() public view override returns(address) {\r\n        return _treasury;\r\n    }\r\n\r\n    /**\r\n     * @dev function used to update the wallet of treasury\r\n     * the vesting data corresponding to the treasury will be transferred to the new wallet\r\n     * @param newTreasury the new wallet used for treasury\r\n     * only owner can call this function\r\n     */\r\n    function updateTreasuryWallet(address newTreasury) external override onlyOwner {\r\n        require(newTreasury != address(0), 'cannot be address zero');\r\n        require(_vestingData[newTreasury].totalVestedAmount == 0, 'address already set');\r\n        _vestingData[newTreasury] = _vestingData[_treasury];\r\n        delete _vestingData[_treasury];\r\n        _treasury = newTreasury;\r\n        emit UpdatedTreasury(newTreasury);\r\n    }\r\n\r\n    /**\r\n     * @dev getter function for team wallet address\r\n     */\r\n    function team() public view override returns(address) {\r\n        return _team;\r\n    }\r\n\r\n    /**\r\n     * @dev function used to update the team wallet\r\n     * the vesting data corresponding to the team will be transferred to the new wallet\r\n     * @param newTeam the new wallet used for team\r\n     * only owner can call this function\r\n     */\r\n    function updateTeamWallet(address newTeam) external override onlyOwner {\r\n        require(newTeam != address(0), 'cannot be address zero');\r\n        require(_vestingData[newTeam].totalVestedAmount == 0, 'address already set');\r\n        _vestingData[newTeam] = _vestingData[_team];\r\n        delete _vestingData[_team];\r\n        _team = newTeam;\r\n        emit UpdatedTeam(newTeam);\r\n    }\r\n\r\n    /**\r\n     * @dev getter function for ecosystemFund wallet address\r\n     */\r\n    function ecosystemFund() public view override returns(address) {\r\n        return _ecosystemFund;\r\n    }\r\n\r\n    /**\r\n     * @dev function used to update the wallet of ecosystem fund\r\n     * the vesting data corresponding to the ecosystem fund will be transferred to the new wallet\r\n     * @param newEcosystemFund the new wallet used for ecosystem fund\r\n     * only owner can call this function\r\n     */\r\n    function updateEcosystemFundWallet(address newEcosystemFund) external override onlyOwner {\r\n        require(newEcosystemFund != address(0), 'cannot be address zero');\r\n        require(_vestingData[newEcosystemFund].totalVestedAmount == 0, 'address already set');\r\n        _vestingData[newEcosystemFund] = _vestingData[_ecosystemFund];\r\n        delete _vestingData[_ecosystemFund];\r\n        _ecosystemFund = newEcosystemFund;\r\n        emit UpdatedEcosystemFund(newEcosystemFund);\r\n    }\r\n\r\n    /**\r\n     * @dev getter function for long term lockup wallet address\r\n     */\r\n    function longTermLockUp() public view override returns(address) {\r\n        return _longTermLockUp;\r\n    }\r\n\r\n    /**\r\n     * @dev function used to update the wallet of long term lockup\r\n     * the vesting data corresponding to the long term lockup will be transferred to the new wallet\r\n     * @param newLongTermLockUp the new wallet used for long term lockup\r\n     * only owner can call this function\r\n     */\r\n    function updateLongTermLockUpWallet(address newLongTermLockUp) external override onlyOwner {\r\n        require(newLongTermLockUp != address(0), 'cannot be address zero');\r\n        require(_vestingData[newLongTermLockUp].totalVestedAmount == 0, 'address already set');\r\n        _vestingData[newLongTermLockUp] = _vestingData[_longTermLockUp];\r\n        delete _vestingData[_longTermLockUp];\r\n        _longTermLockUp = newLongTermLockUp;\r\n        emit UpdatedLongTermLockUp(newLongTermLockUp);\r\n    }\r\n\r\n    /**\r\n     * @dev function allowing to make a deposit of tokens on the vesting contract for one of the 4 wallets\r\n     * pre registered, if an initial deposit already exists, the function will fail\r\n     * @param _to the address of the token holder\r\n     * @param _amount the amount of tokens belonging to _to\r\n     * @param _cliff the duration of cliff, in months\r\n     * @param _vesting the duration of the vesting, in months, including the cliff\r\n     */\r\n    function initialDeposit(\r\n        address _to,\r\n        uint256 _amount,\r\n        uint _cliff,\r\n        uint _vesting\r\n    ) external override {\r\n        // Validate input parameters\r\n        require(\r\n            _to == treasury() ||\r\n            _to == team() ||\r\n            _to == ecosystemFund() ||\r\n            _to == longTermLockUp(), 'invalid address parameter');\r\n        require(_amount > 0, 'Value must be positive');\r\n        require(_vestingData[_to].totalVestedAmount == 0, 'not initial deposit');\r\n        // transfer tokens on the vesting contract\r\n        _token.safeTransferFrom(msg.sender, address(this), _amount);\r\n        _vestingData[_to].totalVestedAmount = _amount;\r\n        _vestingData[_to].releasedAmount = 0;\r\n        _vestingData[_to].cliff = _cliff;\r\n        _vestingData[_to].vesting = _vesting;\r\n\r\n        emit InitialDeposit(_to, _amount, _cliff, _vesting);\r\n    }\r\n\r\n    /**\r\n     * @dev internal function calculating the available tokens of a token holder, related to the vesting scheme\r\n     * and holdings of this holder\r\n     */\r\n    function _getAvailableBalance(address _holder) internal view returns (uint256) {\r\n        if (_vestingData[_holder].totalVestedAmount == _vestingData[_holder].releasedAmount) {\r\n            //All tokens released\r\n            return 0;\r\n        }\r\n\r\n        // solhint-disable-next-line not-rely-on-time\r\n        uint256 currentTime = block.timestamp;\r\n\r\n        uint256 startVesting = referenceDate + (_vestingData[_holder].cliff * MONTH);\r\n        if (currentTime < startVesting) {\r\n            return 0; // All balance is still locked\r\n        }\r\n\r\n        uint256 vestingTicks = (currentTime - referenceDate) / MONTH;\r\n\r\n        // Divide with 10^12 resolution\r\n        uint256 tokensPerTick = (_vestingData[_holder].totalVestedAmount * (10**12 / _vestingData[_holder].vesting)) /\r\n        10**12;\r\n        uint256 unlockedBalance = tokensPerTick * vestingTicks;\r\n        if (vestingTicks >= _vestingData[_holder].vesting) {\r\n            unlockedBalance = _vestingData[_holder].totalVestedAmount;\r\n        }\r\n\r\n        if (_vestingData[_holder].releasedAmount >= unlockedBalance) {\r\n            return 0;\r\n        } else {\r\n            return unlockedBalance - _vestingData[_holder].releasedAmount;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev function that allows a token owner to claim tokens for himself\r\n     * if there is some free tokens they will be sent out of the vesting contract to the owner wallet\r\n     */\r\n    function claim() external override {\r\n        claimFor(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev function that claims tokens on behalf of a wallet\r\n     * this function can be called by anyone\r\n     * if there is some free tokens they will be sent out of the vesting contract to the owner wallet\r\n     * owner needs to actually exist otherwise the function will fail\r\n     */\r\n    function claimFor(address _holder) public override {\r\n        require(\r\n            _holder == treasury() ||\r\n            _holder == team() ||\r\n            _holder == ecosystemFund() ||\r\n            _holder == longTermLockUp(), 'invalid holder');\r\n        uint256 availableBalance = _getAvailableBalance(_holder);\r\n        if (availableBalance > 0) {\r\n            _token.safeTransfer(_holder, availableBalance);\r\n            _vestingData[_holder].releasedAmount += availableBalance;\r\n            emit TokensClaimed(_holder, availableBalance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev function that claims tokens on behalf of all the wallets at the same time\r\n     * this function can be called by anyone\r\n     * if there is some free tokens they will be sent out of the vesting contract to their owners\r\n     */\r\n    function claimAll() external override {\r\n        claimFor(treasury());\r\n        claimFor(team());\r\n        claimFor(ecosystemFund());\r\n        claimFor(longTermLockUp());\r\n    }\r\n\r\n    /**\r\n     * @dev Get the balances of the holder on the vesting contract.\r\n     * totalBalance is the balance that is on the vesting contract and belongs to the holder\r\n     * lockedBalance is the share of total balance that is locked on the vesting contract\r\n     * freeBalance is the share of the total balance that can be claimed by calling a claim function on the contract\r\n     * @param _holder the wallet of the token holder, it has to be one of the 4 wallets holding tokens\r\n     */\r\n    function getBalances(address _holder) external view override returns\r\n    (\r\n        uint totalBalance,\r\n        uint lockedBalance,\r\n        uint freeBalance\r\n    )\r\n    {\r\n        require(\r\n            _holder == treasury() ||\r\n            _holder == team() ||\r\n            _holder == ecosystemFund() ||\r\n            _holder == longTermLockUp(), 'invalid holder');\r\n\r\n        totalBalance = _vestingData[_holder].totalVestedAmount - _vestingData[_holder].releasedAmount;\r\n        freeBalance = _getAvailableBalance(_holder);\r\n        lockedBalance = totalBalance - freeBalance;\r\n    }\r\n\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"team_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ecosystemFund_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"longTermLockUp_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referenceDate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vesting\",\"type\":\"uint256\"}],\"name\":\"InitialDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_referenceDate\",\"type\":\"uint256\"}],\"name\":\"ReferenceDateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newEcosystemFund\",\"type\":\"address\"}],\"name\":\"UpdatedEcosystemFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLongTermLockUp\",\"type\":\"address\"}],\"name\":\"UpdatedLongTermLockUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTeam\",\"type\":\"address\"}],\"name\":\"UpdatedTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"UpdatedTreasury\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_vestingData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVestedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"claimFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecosystemFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vesting\",\"type\":\"uint256\"}],\"name\":\"initialDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"longTermLockUp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referenceDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newEcosystemFund\",\"type\":\"address\"}],\"name\":\"updateEcosystemFundWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLongTermLockUp\",\"type\":\"address\"}],\"name\":\"updateLongTermLockUpWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTeam\",\"type\":\"address\"}],\"name\":\"updateTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"updateTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Vesting","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c41e1f8a2d11af20dea4a228b20ee16a5184bf83000000000000000000000000c327855674831b97c5ee6d9eafbbbb0fd51f2631000000000000000000000000724606fe3d8fa673f0f7f8f5dc6704bf3cd07835000000000000000000000000cf9a927b40874a5157fc2a8ace5cd77c20f5d1200000000000000000000000008b0b1d6a3b46b676cd6da234cc1bf444fd2f6a320000000000000000000000000000000000000000000000000000000061cf2900","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f13f4fc7c48485a694d289ab76d9fee44fe3cf496c01b4a4137d959bc766b69f"}]}