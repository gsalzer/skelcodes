{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TransferController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./ITransferController.sol\\\";\\r\\n\\r\\n//implementation to control transfer of q2\\r\\n\\r\\ncontract TransferController is ITransferController, Ownable {\\r\\n    mapping(address => bool) public whitelistedAddresses;\\r\\n\\r\\n    mapping(address => bool) moderator;\\r\\n\\r\\n    // add addresss to transfer q2\\r\\n    function addAddressToWhiteList(address[] memory _users, bool status)\\r\\n        public\\r\\n        override\\r\\n        returns (bool isWhitelisted)\\r\\n    {\\r\\n        require(msg.sender == owner || moderator[msg.sender]);\\r\\n        for (uint256 x = 0; x < _users.length; x++) {\\r\\n            if (!isWhiteListed(_users[x])) {\\r\\n                whitelistedAddresses[_users[x]] = status;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function isWhiteListed(address _user) public view override returns (bool) {\\r\\n        return whitelistedAddresses[_user];\\r\\n    }\\r\\n\\r\\n    function addModerator(address _user, bool status) public onlyOwner {\\r\\n        moderator[_user] = status;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\ncontract Ownable {\\r\\n  address public owner;\\r\\n\\r\\n  // Event\\r\\n  event OwnershipChanged(address indexed oldOwner, address indexed newOwner);\\r\\n\\r\\n  // Modifier\\r\\n  modifier onlyOwner {\\r\\n    require(msg.sender == owner);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(){\\r\\n    owner = msg.sender;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n   * @param newOwner The address to transfer ownership to.\\r\\n   */\\r\\n  function transferOwnership(address newOwner) onlyOwner public {\\r\\n    require(newOwner != address(0));\\r\\n    emit OwnershipChanged(owner, newOwner);\\r\\n    owner = newOwner;\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"contracts/ITransferController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\n//Interface to control transfer of q2\\r\\ninterface ITransferController {\\r\\n    function addAddressToWhiteList(address[] memory _users, bool status)\\r\\n       external \\r\\n        returns (bool);\\r\\n\\r\\n    function isWhiteListed(address _user)  external view returns (bool);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addAddressToWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TransferController","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}