{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/PRUF_INTERFACES.sol\r\n\r\n/*--------------------------------------------------------PRÃ¼F0.8.6\r\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\ _____/\\\\\\\\\\\\\\\\\\ _______/\\\\__/\\\\ ___/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\        \r\n__\\/\\\\\\/////////\\\\\\ _/\\\\\\///////\\\\\\ ____\\//__\\//____\\/\\\\\\///////////__       \r\n___\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\/\\\\\\ ________________\\/\\\\\\ ____________      \r\n____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\/\\\\\\\\\\\\\\\\\\\\\\/_____/\\\\\\____/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\ ____     \r\n_____\\/\\\\\\/////////____\\/\\\\\\//////\\\\\\ ___\\/\\\\\\___\\/\\\\\\_\\/\\\\\\///////______\r\n______\\/\\\\\\ ____________\\/\\\\\\ ___\\//\\\\\\ __\\/\\\\\\___\\/\\\\\\_\\/\\\\\\ ____________\r\n_______\\/\\\\\\ ____________\\/\\\\\\ ____\\//\\\\\\ _\\/\\\\\\___\\/\\\\\\_\\/\\\\\\ ____________\r\n________\\/\\\\\\ ____________\\/\\\\\\ _____\\//\\\\\\_\\//\\\\\\\\\\\\\\\\\\ _\\/\\\\\\ ____________\r\n_________\\/// _____________\\/// _______\\/// __\\///////// __\\/// _____________\r\n*---------------------------------------------------------------------------*/\r\n\r\n/*-----------------------------------------------------------------\r\n *  TO DO\r\n *   need to enumerate all holding adresses?\r\n *---------------------------------------------------------------*/\r\n\r\n// SPDX-License-Identifier: UNLICENSED AND MIT\r\npragma solidity ^0.8.6;\r\n\r\nstruct Record {\r\n    uint8 assetStatus; // Status - Transferrable, locked, in transfer, stolen, lost, etc.\r\n    uint8 modCount; // Number of times asset has been forceModded.\r\n    //uint8 currency; //currency for price information (0=not for sale, 1=ETH, 2=PRUF, 3=DAI, 4=WBTC.... )\r\n    uint16 numberOfTransfers; //number of transfers and forcemods\r\n    uint32 node; // Type of asset\r\n    uint32 countDown; // Variable that can only be decreased from countDownStart\r\n    uint32 int32temp; // int32 for persisting transitional data\r\n    //uint120 price; //price set for items offered for sale\r\n    bytes32 mutableStorage1; // Publically viewable asset description\r\n    bytes32 nonMutableStorage1; // Publically viewable immutable notes\r\n    bytes32 mutableStorage2; // Publically viewable asset description\r\n    bytes32 nonMutableStorage2; // Publically viewable immutable notes\r\n    bytes32 rightsHolder; // KEK256 Registered owner\r\n}\r\n\r\n//     proposed ISO standardized\r\n//     struct Record {\r\n//     uint8 assetStatus; // Status - Transferrable, locked, in transfer, stolen, lost, etc.\r\n//     uint32 node; // Type of asset\r\n//     uint32 countDown; // Variable that can only be decreased from countDownStart\r\n//     uint32 int32temp; // int32 for persisting transitional data\r\n//     bytes32 mutableStorage1; // Publically viewable asset description\r\n//     bytes32 nonMutableStorage1; // Publically viewable immutable notes\r\n//     bytes32 mutableStorage2; // Publically viewable asset description\r\n//     bytes32 nonMutableStorage2; // Publically viewable immutable notes\r\n//     bytes32 rightsHolder; // KEK256  owner\r\n// }\r\n\r\nstruct Node {\r\n    //Struct for holding and manipulating node data\r\n    string name; // NameHash for node\r\n    uint32 nodeRoot; // asset type root (bicyles - USA Bicycles)             //immutable\r\n    uint8 custodyType; // custodial or noncustodial, special asset types       //immutable\r\n    uint8 managementType; // type of management for asset creation, import, export //immutable\r\n    uint8 storageProvider; // Storage Provider\r\n    uint32 discount; // price sharing //internal admin                                      //immutable\r\n    address referenceAddress; // Used with wrap / decorate\r\n    uint8 switches; // bitwise Flags for node control                          //immutable\r\n    bytes32 CAS1; //content adressable storage pointer 1\r\n    bytes32 CAS2; //content adressable storage pointer 1\r\n}\r\n\r\nstruct ContractDataHash {\r\n    //Struct for holding and manipulating contract authorization data\r\n    uint8 contractType; // Auth Level / type\r\n    bytes32 nameHash; // Contract Name hashed\r\n}\r\n\r\nstruct DefaultContract {\r\n    //Struct for holding and manipulating contract authorization data\r\n    uint8 contractType; // Auth Level / type\r\n    string name; // Contract name\r\n}\r\n\r\nstruct escrowData {\r\n    bytes32 controllingContractNameHash; //hash of the name of the controlling escrow contract\r\n    bytes32 escrowOwnerAddressHash; //hash of an address designated as an executor for the escrow contract\r\n    uint256 timelock;\r\n}\r\n\r\nstruct escrowDataExtLight {\r\n    //used only in recycle\r\n    //1 slot\r\n    uint8 escrowData; //used by recycle\r\n    uint8 u8_1;\r\n    uint8 u8_2;\r\n    uint8 u8_3;\r\n    uint16 u16_1;\r\n    uint16 u16_2;\r\n    uint32 u32_1;\r\n    address addr_1; //used by recycle\r\n}\r\n\r\nstruct escrowDataExtHeavy {\r\n    //specific uses not defined\r\n    // 5 slots\r\n    uint32 u32_2;\r\n    uint32 u32_3;\r\n    uint32 u32_4;\r\n    address addr_2;\r\n    bytes32 b32_1;\r\n    bytes32 b32_2;\r\n    uint256 u256_1;\r\n    uint256 u256_2;\r\n}\r\n\r\nstruct Costs {\r\n    //make these require full epoch to change???\r\n    uint256 serviceCost; // Cost in the given item category\r\n    address paymentAddress; // 2nd-party fee beneficiary address\r\n}\r\n\r\nstruct Invoice {\r\n    //invoice struct to facilitate payment messaging in-contract\r\n    uint32 node;\r\n    address rootAddress;\r\n    address NTHaddress;\r\n    uint256 rootPrice;\r\n    uint256 NTHprice;\r\n}\r\n\r\nstruct ID {\r\n    //ID struct for ID info\r\n    uint256 trustLevel; //admin only\r\n    bytes32 URI; //caller address match\r\n    string userName; //admin only///caller address match can set\r\n}\r\n\r\nstruct Stake {\r\n    uint256 stakedAmount; //tokens in stake\r\n    uint256 mintTime; //blocktime of creation\r\n    uint256 startTime; //blocktime of creation or most recent payout\r\n    uint256 interval; //staking interval in seconds\r\n    uint256 bonusPercentage; // % per reward period, in tenths of a percent, assigned to this stake on creation\r\n    uint256 maximum; // maximum tokens allowed to be held by this stake\r\n}\r\n\r\n/*\r\n * @dev Interface for UTIL_TKN\r\n * INHERITANCE:\r\n\r\n\r\n\r\n\r\n\r\n */\r\ninterface UTIL_TKN_Interface {\r\n    /*\r\n     * @dev PERMENANTLY !!!  Kill trusted agent and payable\r\n     */\r\n    function killTrustedAgent(uint256 _key) external;\r\n\r\n    /*\r\n     * @dev Set calling wallet to a \"cold Wallet\" that cannot be manipulated by TRUSTED_AGENT or PAYABLE permissioned functions\r\n     */\r\n    function setColdWallet() external;\r\n\r\n    /*\r\n     * @dev un-set calling wallet to a \"cold Wallet\", enabling manipulation by TRUSTED_AGENT and PAYABLE permissioned functions\r\n     */\r\n    function unSetColdWallet() external;\r\n\r\n    /*\r\n     * @dev return an adresses \"cold wallet\" status\r\n     */\r\n    function isColdWallet(address _addr) external returns (uint256);\r\n\r\n    /*\r\n     * @dev Set adress of payment contract\r\n     */\r\n    function AdminSetSharesAddress(address _paymentAddress) external;\r\n\r\n    /*\r\n     * @dev Deducts token payment from transaction\r\n     * Requirements:\r\n     * - the caller must have PAYABLE_ROLE.\r\n     * - the caller must have a pruf token balance of at least `_rootPrice + _NTHprice`.\r\n     */\r\n    // ---- NON-LEGACY\r\n    // function payForService(address _senderAddress, Invoice calldata invoice)\r\n    //     external;\r\n\r\n    //---- LEGACY\r\n    function payForService(\r\n        address _senderAddress,\r\n        address _rootAddress,\r\n        uint256 _rootPrice,\r\n        address _NTHaddress,\r\n        uint256 _NTHprice\r\n    ) external;\r\n\r\n    /*\r\n     * @dev arbitrary burn (requires TRUSTED_AGENT_ROLE)   ****USE WITH CAUTION\r\n     */\r\n    function trustedAgentBurn(address _addr, uint256 _amount) external;\r\n\r\n    /*\r\n     * @dev arbitrary transfer (requires TRUSTED_AGENT_ROLE)   ****USE WITH CAUTION\r\n     */\r\n    function trustedAgentTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    /*\r\n     * @dev Take a balance snapshot, returns snapshot ID\r\n     * - the caller must have the `SNAPSHOT_ROLE`.\r\n     */\r\n    function takeSnapshot() external returns (uint256);\r\n\r\n    /**\r\n     * @dev Creates `amount` new tokens for `to`.\r\n     *\r\n     * See {ERC20-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the `MINTER_ROLE`.\r\n     */\r\n    function mint(address to, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Pauses all token transfers.\r\n     *\r\n     * See {ERC20Pausable} and {Pausable-_pause}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the `PAUSER_ROLE`.\r\n     */\r\n    function pause() external;\r\n\r\n    /**\r\n     * @dev Unpauses all token transfers.\r\n     *\r\n     * See {ERC20Pausable} and {Pausable-_unpause}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the `PAUSER_ROLE`.\r\n     */\r\n    function unpause() external;\r\n\r\n    /**\r\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\r\n     */\r\n    function balanceOfAt(address account, uint256 snapshotId)\r\n        external\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\r\n     */\r\n    function totalSupplyAt(uint256 snapshotId) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Returns the cap on the token's total supply.\r\n     */\r\n    function cap() external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index)\r\n        external\r\n        returns (address);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------\r\n/*\r\n * @dev Interface for NODE_TKN\r\n * INHERITANCE:\r\n\r\n\r\n\r\n */\r\ninterface NODE_TKN_Interface {\r\n    /*\r\n     * @dev Mints node token, must be isContractAdmin\r\n     */\r\n    function mintNodeToken(\r\n        address _recipientAddress,\r\n        uint256 tokenId,\r\n        string calldata _tokenURI\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Transfers the ownership of a given token ID to another address.\r\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     * Requires the _msgSender() to be the owner, approved, or operator.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the _msgSender() to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the _msgSender() to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata _data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address tokenHolderAdress);\r\n\r\n    /**\r\n     * @dev Returns 170 if the specified token exists, otherwise zero\r\n     *\r\n     */\r\n    function tokenExists(uint256 tokenId) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory tokenName);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory tokenSymbol);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (string memory URI);\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        external\r\n        view\r\n        returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------\r\n/*\r\n * @dev Interface for STAKE_TKN\r\n * INHERITANCE:\r\n\r\n\r\n\r\n */\r\ninterface STAKE_TKN_Interface {\r\n    /**\r\n     * @dev Mints Stake Token * Requires the _msgSender() to have MINTER_ROLE\r\n     * @param _recipientAddress address to receive the token\r\n     * @param _tokenId Token ID to mint\r\n     */\r\n    function mintStakeToken(address _recipientAddress, uint256 _tokenId)\r\n        external\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Burn a stake token\r\n     * @param _tokenId - Token ID to burn\r\n     */\r\n    function burnStakeToken(uint256 _tokenId) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Transfers the ownership of a given token ID to another address.\r\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     * Requires the _msgSender() to be the owner, approved, or operator.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the _msgSender() to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the _msgSender() to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata _data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address tokenHolderAdress);\r\n\r\n    /**\r\n     * @dev Returns 170 if the specified token exists, otherwise zero\r\n     *\r\n     */\r\n    function tokenExists(uint256 tokenId) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory tokenName);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory tokenSymbol);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (string memory URI);\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        external\r\n        view\r\n        returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------\r\n\r\n/*\r\n * @dev Interface for A_TKN\r\n * INHERITANCE:\r\n\r\n\r\n\r\n */\r\ninterface A_TKN_Interface {\r\n    /*\r\n     * @dev Set storage contract to interface with\r\n     */\r\n    function OO_setStorageContract(address _storageAddress) external;\r\n\r\n    /*\r\n     * @dev Address Setters\r\n     */\r\n    function resolveContractAddresses() external;\r\n\r\n    /*\r\n     * @dev Mint new asset token\r\n     */\r\n    function mintAssetToken(\r\n        address _recipientAddress,\r\n        uint256 tokenId,\r\n        string calldata _tokenURI\r\n    ) external returns (uint256);\r\n\r\n    /*\r\n     * @dev Set new token URI String\r\n     */\r\n    function setURI(uint256 tokenId, string calldata _tokenURI)\r\n        external\r\n        returns (uint256);\r\n\r\n    // /*\r\n    //  * @dev Reassures user that token is minted in the PRUF system\r\n    //  */\r\n    // function validatePipToken(\r\n    //     uint256 tokenId,\r\n    //     uint32 _node,\r\n    //     string calldata _authCode\r\n    // ) external view;\r\n\r\n    /*\r\n     * @dev See if token exists\r\n     */\r\n    function tokenExists(uint256 tokenId) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Transfers the ownership of a given token ID to another address.\r\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     * Requires the _msgSender() to be the owner, approved, or operator.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers the ownership of a given token ID to another address by a TRUSTED_AGENT.\r\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     * Requires the _msgSender() to be the owner, approved, or operator.\r\n     * @param _from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function trustedAgentTransferFrom(\r\n        address _from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Burns a token\r\n     */\r\n    function trustedAgentBurn(uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the _msgSender() to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the _msgSender() to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata _data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely burns a token and sets the corresponding RGT to zero in storage.\r\n     */\r\n    function discard(uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev return an adresses \"cold wallet\" status\r\n     * WALLET ADDRESSES SET TO \"Cold\" DO NOT WORK WITH TRUSTED_AGENT FUNCTIONS\r\n     * @param _addr - address to check\r\n     * returns 170 if adress is set to \"cold wallet\" status\r\n     */\r\n    function isColdWallet(address _addr) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId)\r\n        external\r\n        returns (address tokenHolderAdress);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external returns (string memory tokenName);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external returns (string memory tokenSymbol);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external returns (string memory URI);\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        external\r\n        returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external returns (uint256);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------\r\n/*\r\n * @dev Interface for MARKET_TKN\r\n * INHERITANCE:\r\n\r\n\r\n\r\n */\r\ninterface MARKET_TKN_Interface {\r\n    /*\r\n     * @dev Set storage contract to interface with\r\n     */\r\n    function OO_setStorageContract(address _storageAddress) external;\r\n\r\n    /*\r\n     * @dev Address Setters\r\n     */\r\n    function resolveContractAddresses() external;\r\n\r\n    /*\r\n     * @dev Mint new asset token\r\n     */\r\n    function mintConsignmentToken(\r\n        address _recipientAddress,\r\n        uint256 tokenId,\r\n        string calldata _tokenURI\r\n    ) external returns (uint256);\r\n\r\n    /*\r\n     * @dev Set new token URI String\r\n     */\r\n    function setURI(uint256 tokenId, string calldata _tokenURI)\r\n        external\r\n        returns (uint256);\r\n\r\n    /*\r\n     * @dev See if token exists\r\n     */\r\n    function tokenExists(uint256 tokenId) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Transfers the ownership of a given token ID to another address.\r\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     * Requires the _msgSender() to be the owner, approved, or operator.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Burns a token\r\n     */\r\n    function trustedAgentBurn(uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the _msgSender() to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata _data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId)\r\n        external\r\n        returns (address tokenHolderAdress);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external returns (string memory tokenName);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external returns (string memory tokenSymbol);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external returns (string memory URI);\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        external\r\n        returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external returns (uint256);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------\r\n/*\r\n * @dev Interface for ID_TKN\r\n * INHERITANCE:\r\n\r\n\r\n\r\n */\r\ninterface ID_TKN_Interface {\r\n    /*\r\n     * @dev Mint new PRUF_ID token\r\n     */\r\n    function mintIDtoken(\r\n        address _recipientAddress,\r\n        uint256 _tokenId,\r\n        string calldata _URI\r\n    ) external returns (uint256);\r\n\r\n    /*\r\n     * @dev remint ID Token\r\n     * must set a new and unuiqe rgtHash\r\n     * burns old token\r\n     * Sends new token to original Caller\r\n     */\r\n    function reMintIDtoken(address _recipientAddress, uint256 tokenId)\r\n        external\r\n        returns (uint256);\r\n\r\n    /*\r\n     * @dev See if token exists\r\n     */\r\n    function tokenExists(uint256 tokenId) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev @dev Blocks the transfer of a given token ID to another address\r\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     * Requires the _msgSender() to be the owner, approved, or operator.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely blocks the transfer of a given token ID to another address\r\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the _msgSender() to be the owner, approved, or operator\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely blocks the transfer of a given token ID to another address\r\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the _msgSender() to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata _data\r\n    ) external;\r\n\r\n    /*\r\n     * @dev Set new ID data fields\r\n     */\r\n    function setTrustLevel(uint256 _tokenId, uint256 _trustLevel) external;\r\n\r\n    /*\r\n     * @dev get ID data\r\n     */\r\n    function IdData(uint256 _tokenId) external view returns (ID memory);\r\n\r\n    /*\r\n     * @dev get ID trustLevel\r\n     */\r\n    function trustedLevel(uint256 _tokenId) external view returns (uint256);\r\n\r\n    /*\r\n     * @dev get ID trustLevel by address (token 0 at address)\r\n     */\r\n    function trustedLevelByAddress(address _addr)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address tokenHolderAdress);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory tokenName);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory tokenSymbol);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (string memory URI);\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        external\r\n        view\r\n        returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------\r\n/*\r\n * @dev Interface for NODE_MGR\r\n * INHERITANCE:\r\n\r\n     \r\n */\r\ninterface NODE_MGR_Interface {\r\n    /*\r\n     * @dev Transfers a name from one node to another\r\n     * !! -------- to be used with great caution and only as a result of community governance action -----------\r\n     * Designed to remedy brand infringement issues. This breaks decentralization and must eventually be given\r\n     * over to some kind of governance contract.\r\n     * Destination node must have content adressable storage Set to 0xFFF.....\r\n     *\r\n     */\r\n    function transferName(\r\n        uint32 _fromNode,\r\n        uint32 _toNode,\r\n        string calldata _name\r\n    ) external;\r\n\r\n    /*\r\n     * @dev Modifies an node with minimal controls\r\n     */\r\n    function modifyNode(\r\n        uint32 _node,\r\n        uint32 _nodeRoot,\r\n        uint8 _custodyType,\r\n        uint8 _managementType,\r\n        uint8 _storageProvider,\r\n        uint32 _discount,\r\n        address _refAddress,\r\n        uint8 _switches,\r\n        bytes32 _CAS1,\r\n        bytes32 _CAS2\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Modifies node.switches bitwise (see NODE option switches in ZZ_PRUF_DOCS)\r\n     * @param _node - node to be modified\r\n     * @param _position - uint position of bit to be modified\r\n     * @param _bit - switch - 1 or 0 (true or false)\r\n     */\r\n    function modifyNodeSwitches(\r\n        uint32 _node,\r\n        uint8 _position,\r\n        uint8 _bit\r\n    ) external;\r\n\r\n    /*\r\n     * @dev Mints node token and creates an node. Mints to @address\r\n     * Requires that:\r\n     *  name is unuiqe\r\n     *  node is not provisioned with a root (proxy for not yet registered)\r\n     *  that ACtoken does not exist\r\n     *  _discount 10000 = 100 percent price share , cannot exceed\r\n     */\r\n    function createNode(\r\n        uint32 _node,\r\n        string calldata _name,\r\n        uint32 _nodeRoot,\r\n        uint8 _custodyType,\r\n        uint8 _managementType,\r\n        uint8 _storageProvider,\r\n        uint32 _discount,\r\n        bytes32 _CAS1,\r\n        bytes32 _CAS2,\r\n        address _recipientAddress\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Burns (amount) tokens and mints a new node token to the caller address\r\n     *\r\n     * Requirements:\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function purchaseNode(\r\n        string calldata _name,\r\n        uint32 _nodeRoot,\r\n        uint8 _custodyType,\r\n        bytes32 _CAS1,\r\n        bytes32 _CAS2\r\n    ) external returns (uint256);\r\n\r\n    /*\r\n     * @dev Authorize / Deauthorize / Authorize users for an address be permitted to make record modifications\r\n     */\r\n    function addUser(\r\n        uint32 _node,\r\n        bytes32 _addrHash,\r\n        uint8 _userType\r\n    ) external;\r\n\r\n    /*\r\n     * @dev Modifies an node\r\n     * Sets a new node name. Nodees cannot be moved to a new root or custody type.\r\n     * Requires that:\r\n     *  caller holds ACtoken\r\n     *  name is unuiqe or same as old name\r\n     */\r\n    function updateNodeName(uint32 _node, string calldata _name) external;\r\n\r\n    /*\r\n     * @dev Modifies an node\r\n     * Sets a new node content adressable storage Address. Nodees cannot be moved to a new root or custody type.\r\n     * Requires that:\r\n     *  caller holds ACtoken\r\n     */\r\n    function updateNodeCAS(\r\n        uint32 _node,\r\n        bytes32 _CAS1,\r\n        bytes32 _CAS2\r\n    ) external;\r\n\r\n    /*\r\n     * @dev Set function costs and payment address per node, in Wei\r\n     */\r\n    function setOperationCosts(\r\n        uint32 _node,\r\n        uint16 _service,\r\n        uint256 _serviceCost,\r\n        address _paymentAddress\r\n    ) external;\r\n\r\n    /*\r\n     * @dev Modifies an node\r\n     * Sets the immutable data on an node\r\n     * Requires that:\r\n     * caller holds ACtoken\r\n     * node is managementType 255 (unconfigured)\r\n     */\r\n    function updateACImmutable(\r\n        uint32 _node,\r\n        uint8 _managementType,\r\n        uint8 _storageProvider,\r\n        address _refAddress\r\n    ) external;\r\n\r\n    //-------------------------------------------Read-only functions ----------------------------------------------\r\n\r\n    /**\r\n     * @dev get bit from .switches at specified position\r\n     * @param _node - node associated with query\r\n     * @param _position - bit position associated with query\r\n     *\r\n     * @return 1 or 0 (enabled or disabled)\r\n     */\r\n    function getSwitchAt(uint32 _node, uint8 _position)\r\n        external\r\n        returns (uint256);\r\n\r\n    /*\r\n     * @dev get a User Record\r\n     */\r\n    function getUserType(bytes32 _userHash, uint32 _node)\r\n        external\r\n        view\r\n        returns (uint8);\r\n\r\n    /*\r\n     * @dev get the authorization status of a management type 0 = not allowed\r\n     */\r\n    function getManagementTypeStatus(uint8 _managementType)\r\n        external\r\n        view\r\n        returns (uint8);\r\n\r\n    /*\r\n     * @dev get the authorization status of a storage type 0 = not allowed\r\n     */\r\n    function getStorageProviderStatus(uint8 _storageProvider)\r\n        external\r\n        view\r\n        returns (uint8);\r\n\r\n    /*\r\n     * @dev get the authorization status of a custody type 0 = not allowed\r\n     */\r\n    function getCustodyTypeStatus(uint8 _custodyType)\r\n        external\r\n        view\r\n        returns (uint8);\r\n\r\n    // /*\r\n    //  * @dev Retrieve node_data @ _node\r\n    //  */\r\n    // functiongetNode_data(uint32 _node)\r\n    //     external\r\n    //     returns (\r\n    //         uint32,\r\n    //         uint8,\r\n    //         uint8,\r\n    //         uint32,\r\n    //         address\r\n    //     );\r\n\r\n    /* CAN'T RETURN A STRUCT WITH A STRING WITHOUT WIERDNESS-0.8.1\r\n     * @dev Retrieve node_data @ _node\r\n     */\r\n    function getExtendedNodeData(uint32 _node)\r\n        external\r\n        view\r\n        returns (Node memory);\r\n\r\n    /*\r\n     * @dev compare the root of two Nodees\r\n     */\r\n    function isSameRootNode(uint32 _node1, uint32 _node2)\r\n        external\r\n        view\r\n        returns (uint8);\r\n\r\n    /*\r\n     * @dev Retrieve Node_name @ _tokenId\r\n     */\r\n    function getNodeName(uint32 _tokenId) external view returns (string memory);\r\n\r\n    /*\r\n     * @dev Retrieve node_index @ Node_name\r\n     */\r\n    function resolveNode(string calldata _name) external view returns (uint32);\r\n\r\n    /*\r\n     * @dev return current node token index pointer\r\n     */\r\n    function currentNodePricingInfo() external view returns (uint256, uint256);\r\n\r\n    /*\r\n     * @dev Retrieve function costs per node, per service type, in Wei\r\n     */\r\n    function getServiceCosts(uint32 _node, uint16 _service)\r\n        external\r\n        view\r\n        returns (Invoice memory);\r\n\r\n    /*\r\n     * @dev Retrieve Node_discount @ _node, in percent NTH share, * 100 (9000 = 90%)\r\n     */\r\n    function getNodeDiscount(uint32 _node) external view returns (uint32);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------\r\n/*\r\n * @dev Interface for STOR\r\n * INHERITANCE:\r\n\r\n\r\n\r\n */\r\ninterface STOR_Interface {\r\n    /*\r\n     * @dev Triggers stopped state. (pausable)\r\n     */\r\n    function pause() external;\r\n\r\n    /*\r\n     * @dev Returns to normal state. (pausable)\r\n     */\r\n    function unpause() external;\r\n\r\n    /*\r\n     * @dev ASet the default 11 authorized contracts\r\n     */\r\n    function enableDefaultContractsForNode(uint32 _node) external;\r\n\r\n    /*\r\n     * @dev Authorize / Deauthorize / Authorize contract NAMES permitted to make record modifications, per Node\r\n     * allows ACtokenHolder to auithorize or deauthorize specific contracts to work within their node\r\n     */\r\n    function enableContractForNode(\r\n        string calldata _name,\r\n        uint32 _node,\r\n        uint8 _contractAuthLevel\r\n    ) external;\r\n\r\n    /*\r\n     * @dev Make a new record, writing to the 'database' mapping with basic initial asset data\r\n     */\r\n    function newRecord(\r\n        bytes32 _idxHash,\r\n        bytes32 _rgtHash,\r\n        uint32 _node,\r\n        uint32 _countDownStart\r\n    ) external;\r\n\r\n    /*\r\n     * @dev Modify a record, writing to the 'database' mapping with updates to multiple fields\r\n     */\r\n    function modifyRecord(\r\n        bytes32 _idxHash,\r\n        bytes32 _rgtHash,\r\n        uint8 _newAssetStatus,\r\n        uint32 _countDown,\r\n        uint32 _int32temp,\r\n        uint256 _incrementForceModCount,\r\n        uint256 _incrementNumberOfTransfers\r\n    ) external;\r\n\r\n    /*\r\n     * @dev Change node of an asset - writes to node in the 'Record' struct of the 'database' at _idxHash\r\n     */\r\n    function changeNode(bytes32 _idxHash, uint32 _newNode) external;\r\n\r\n    /*\r\n     * @dev Set an asset to stolen or lost. Allows narrow modification of status 6/12 assets, normally locked\r\n     */\r\n    function setLostOrStolen(bytes32 _idxHash, uint8 _newAssetStatus) external;\r\n\r\n    /*\r\n     * @dev Set an asset to escrow locked status (6/50/56).\r\n     */\r\n    function setEscrow(bytes32 _idxHash, uint8 _newAssetStatus) external;\r\n\r\n    /*\r\n     * @dev remove an asset from escrow status. Implicitly trusts escrowManager ECR_MGR contract\r\n     */\r\n    function endEscrow(bytes32 _idxHash) external;\r\n\r\n    // /*\r\n    //  * @dev Modify record sale price and currency data\r\n    //  */\r\n    // function setPrice(\r\n    //     bytes32 _idxHash,\r\n    //     uint120 _price,\r\n    //     uint8 _currency\r\n    // ) external;\r\n\r\n    // /*\r\n    //  * @dev set record sale price and currency data to zero\r\n    //  */\r\n    // function clearPrice(bytes32 _idxHash) external;\r\n\r\n    /*\r\n     * @dev Modify record mutableStorage1 data\r\n     */\r\n    function modifyMutableStorage(\r\n        bytes32 _idxHash,\r\n        bytes32 _mutableStorage1,\r\n        bytes32 _mutableStorage2\r\n    ) external;\r\n\r\n    /*\r\n     * @dev Write record NonMutableStorage data\r\n     */\r\n    function modifyNonMutableStorage(\r\n        bytes32 _idxHash,\r\n        bytes32 _nonMutableStorage1,\r\n        bytes32 _nonMutableStorage2\r\n    ) external;\r\n\r\n    /*\r\n     * @dev return a record from the database, including rgt\r\n     */\r\n    function retrieveRecord(bytes32 _idxHash) external returns (Record memory);\r\n\r\n    // function retrieveRecord(bytes32 _idxHash)\r\n    //     external\r\n    //     view\r\n    //     returns (\r\n    //         bytes32,\r\n    //         uint8,\r\n    //         uint32,\r\n    //         uint32,\r\n    //         uint32,\r\n    //         bytes32,\r\n    //         bytes32\r\n    //     );\r\n\r\n    /*\r\n     * @dev return a record from the database w/o rgt\r\n     */\r\n    function retrieveShortRecord(bytes32 _idxHash)\r\n        external\r\n        view\r\n        returns (\r\n            uint8,\r\n            uint8,\r\n            uint32,\r\n            uint32,\r\n            uint32,\r\n            bytes32,\r\n            bytes32,\r\n            bytes32,\r\n            bytes32,\r\n            uint16\r\n        );\r\n\r\n    /*\r\n     * @dev return the pricing and currency data from a record\r\n     */\r\n    function getPriceData(bytes32 _idxHash)\r\n        external\r\n        view\r\n        returns (uint120, uint8);\r\n\r\n    /*\r\n     * @dev Compare record.rightsholder with supplied bytes32 rightsholder\r\n     * return 170 if matches, 0 if not\r\n     */\r\n    function _verifyRightsHolder(bytes32 _idxHash, bytes32 _rgtHash)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * @dev Compare record.rightsholder with supplied bytes32 rightsholder (writes an emit in blockchain for independant verification)\r\n     */\r\n    function blockchainVerifyRightsHolder(bytes32 _idxHash, bytes32 _rgtHash)\r\n        external\r\n        returns (uint8);\r\n\r\n    /*\r\n     * @dev //returns the address of a contract with name _name. This is for web3 implementations to find the right contract to interact with\r\n     * example :  Frontend = ****** so web 3 first asks storage where to find frontend, then calls for frontend functions.\r\n     */\r\n    function resolveContractAddress(string calldata _name)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    /*\r\n     * @dev //returns the contract type of a contract with address _addr.\r\n     */\r\n    function ContractInfoHash(address _addr, uint32 _node)\r\n        external\r\n        view\r\n        returns (uint8, bytes32);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------\r\n/*\r\n * @dev Interface for ECR_MGR\r\n * INHERITANCE:\r\n\r\n     \r\n */\r\ninterface ECR_MGR_Interface {\r\n    /*\r\n     * @dev Set an asset to escrow status (6/50/56). Sets timelock for unix timestamp of escrow end.\r\n     */\r\n    function setEscrow(\r\n        bytes32 _idxHash,\r\n        uint8 _newAssetStatus,\r\n        bytes32 _escrowOwnerAddressHash,\r\n        uint256 _timelock\r\n    ) external;\r\n\r\n    /*\r\n     * @dev remove an asset from escrow status\r\n     */\r\n    function endEscrow(bytes32 _idxHash) external;\r\n\r\n    /*\r\n     * @dev Set data in EDL mapping\r\n     * Must be setter contract\r\n     * Must be in  escrow\r\n     */\r\n    function setEscrowDataLight(\r\n        bytes32 _idxHash,\r\n        escrowDataExtLight calldata _escrowDataLight\r\n    ) external;\r\n\r\n    /*\r\n     * @dev Set data in EDL mapping\r\n     * Must be setter contract\r\n     * Must be in  escrow\r\n     */\r\n    function setEscrowDataHeavy(\r\n        bytes32 _idxHash,\r\n        escrowDataExtHeavy calldata escrowDataHeavy\r\n    ) external;\r\n\r\n    /*\r\n     * @dev Permissive removal of asset from escrow status after time-out\r\n     */\r\n    function permissiveEndEscrow(bytes32 _idxHash) external;\r\n\r\n    /*\r\n     * @dev return escrow OwnerHash\r\n     */\r\n    function retrieveEscrowOwner(bytes32 _idxHash)\r\n        external\r\n        returns (bytes32 hashOfEscrowOwnerAdress);\r\n\r\n    /*\r\n     * @dev return escrow data @ IDX\r\n     */\r\n    function retrieveEscrowData(bytes32 _idxHash)\r\n        external\r\n        returns (escrowData memory);\r\n\r\n    /*\r\n     * @dev return EscrowDataLight @ IDX\r\n     */\r\n    function retrieveEscrowDataLight(bytes32 _idxHash)\r\n        external\r\n        view\r\n        returns (escrowDataExtLight memory);\r\n\r\n    /*\r\n     * @dev return EscrowDataHeavy @ IDX\r\n     */\r\n    function retrieveEscrowDataHeavy(bytes32 _idxHash)\r\n        external\r\n        view\r\n        returns (escrowDataExtHeavy memory);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------\r\n/*\r\n * @dev Interface for RCLR\r\n * INHERITANCE:\r\n\r\n\r\n */\r\ninterface RCLR_Interface {\r\n    function discard(bytes32 _idxHash, address _sender) external;\r\n\r\n    function recycle(bytes32 _idxHash) external;\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------\r\n/*\r\n * @dev Interface for APP\r\n * INHERITANCE:\r\n\r\n */\r\ninterface APP_Interface {\r\n    function transferAssetToken(address _to, bytes32 _idxHash) external;\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------\r\n/*\r\n * @dev Interface for APP_NC\r\n * INHERITANCE:\r\n\r\n */\r\ninterface APP_NC_Interface {\r\n    function transferAssetToken(address _to, bytes32 _idxHash) external;\r\n}\r\n\r\n/*\r\n * @dev Interface for EO_STAKING\r\n * INHERITANCE:\r\n\r\n\r\n\r\n\r\n\r\n */\r\ninterface EO_STAKING_Interface {\r\n    function claimBonus(uint256 _tokenId) external;\r\n\r\n    function breakStake(uint256 _tokenId) external;\r\n\r\n    function eligibleRewards(uint256 _tokenId)\r\n        external\r\n        returns (uint256 rewards);\r\n\r\n    function stakeInfo(uint256 _tokenId)\r\n        external\r\n        returns (\r\n            uint256 stakedAmount,\r\n            uint256 mintTime,\r\n            uint256 startTime,\r\n            uint256 interval,\r\n            uint256 bonusPercentage,\r\n            uint256 maximum\r\n        );\r\n}\r\n\r\n/*\r\n * @dev Interface for STAKE_VAULT\r\n * INHERITANCE:\r\n\r\n\r\n\r\n\r\n\r\n */\r\ninterface STAKE_VAULT_Interface {\r\n    function takeStake(uint256 _tokenID, uint256 _amount) external;\r\n\r\n    //function releaseStake(address _addr, uint256 _tokenID) external;\r\n    function releaseStake(uint256 _tokenID) external;\r\n\r\n    function stakeOfToken(uint256 _tokenID) external returns (uint256 stake);\r\n}\r\n\r\n/*\r\n * @dev Interface for REWARDS_VAULT\r\n * INHERITANCE:\r\n\r\n\r\n\r\n\r\n\r\n */\r\ninterface REWARDS_VAULT_Interface {\r\n    function payRewards(uint256 _tokenId, uint256 _amount) external;\r\n}\r\n\r\n// File: contracts/Imports/utils/EnumerableSet.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: contracts/Imports/utils/Address.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Imports/utils/Context.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/Imports/access/AccessControl.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using Address for address;\r\n\r\n    struct RoleData {\r\n        EnumerableSet.AddressSet members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping (bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view returns (bool) {\r\n        return _roles[role].members.contains(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\r\n        return _roles[role].members.length();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\r\n        return _roles[role].members.at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\r\n\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.add(account)) {\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.remove(account)) {\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Imports/utils/Pausable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: contracts/Imports/utils/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/Imports/introspection/IERC165.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: contracts/Imports/token/ERC721/IERC721.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// File: contracts/PRUF_STAKE_VAULT.sol\r\n\r\n/*--------------------------------------------------------PRÃ¼F0.8.6\r\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\ _____/\\\\\\\\\\\\\\\\\\ _______/\\\\__/\\\\ ___/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\        \r\n__\\/\\\\\\/////////\\\\\\ _/\\\\\\///////\\\\\\ ____\\//__\\//____\\/\\\\\\///////////__       \r\n___\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\/\\\\\\ ________________\\/\\\\\\ ____________      \r\n____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\/\\\\\\\\\\\\\\\\\\\\\\/_____/\\\\\\____/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\ ____     \r\n_____\\/\\\\\\/////////____\\/\\\\\\//////\\\\\\ ___\\/\\\\\\___\\/\\\\\\_\\/\\\\\\///////______\r\n______\\/\\\\\\ ____________\\/\\\\\\ ___\\//\\\\\\ __\\/\\\\\\___\\/\\\\\\_\\/\\\\\\ ____________\r\n_______\\/\\\\\\ ____________\\/\\\\\\ ____\\//\\\\\\ _\\/\\\\\\___\\/\\\\\\_\\/\\\\\\ ____________\r\n________\\/\\\\\\ ____________\\/\\\\\\ _____\\//\\\\\\_\\//\\\\\\\\\\\\\\\\\\ _\\/\\\\\\ ____________\r\n_________\\/// _____________\\/// _______\\/// __\\///////// __\\/// _____________\r\n*---------------------------------------------------------------------------*/\r\n\r\n/**-----------------------------------------------------------------\r\n *PRUF Stake Vault\r\n *Holds staked PRUF that were placed into its care.\r\n *---------------------------------------------------------------*/\r\n\r\npragma solidity ^0.8.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract STAKE_VAULT is ReentrancyGuard, AccessControl, Pausable {\r\n    mapping(uint256 => uint256) private stake; // holds the stake parameters for each stake tokenId\r\n\r\n    bytes32 public constant CONTRACT_ADMIN_ROLE =\r\n        keccak256(\"CONTRACT_ADMIN_ROLE\");\r\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n    bytes32 public constant STAKE_ADMIN_ROLE = keccak256(\"STAKE_ADMIN_ROLE\");\r\n\r\n    address internal UTIL_TKN_Address;\r\n    UTIL_TKN_Interface internal UTIL_TKN;\r\n\r\n    address internal STAKE_TKN_Address;\r\n    STAKE_TKN_Interface internal STAKE_TKN;\r\n\r\n    constructor() {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        _setupRole(CONTRACT_ADMIN_ROLE, _msgSender());\r\n        _setupRole(PAUSER_ROLE, _msgSender());\r\n    }\r\n\r\n    // --------------------------------------Modifiers--------------------------------------------//\r\n\r\n    /**\r\n     * @dev Verify caller credentials\r\n     * Originating Address:\r\n     *      Has CONTRACT_ADMIN_ROLE\r\n     */\r\n    modifier isContractAdmin() {\r\n        require(\r\n            hasRole(CONTRACT_ADMIN_ROLE, _msgSender()),\r\n            \"SV:MOD:-ICA: Caller !CONTRACT_ADMIN_ROLE\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Verify caller credentials\r\n     * Originating Address:\r\n     *      Has STAKE_ADMIN_ROLE\r\n     */\r\n    modifier isStakeAdmin() {\r\n        require(\r\n            hasRole(STAKE_ADMIN_ROLE, _msgSender()),\r\n            \"SV:MOD:-ISA: Caller !STAKE_ADMIN_ROLE\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Verify caller credentials\r\n     * Originating Address:\r\n     *      Has PAUSER_ROLE\r\n     */\r\n    modifier isPauser() {\r\n        require(\r\n            hasRole(PAUSER_ROLE, _msgSender()),\r\n            \"SV:MOD-IP:Calling address !pauser\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    //----------------------External Admin functions / isContractAdmin----------------------//\r\n\r\n    /**\r\n     * @dev Set address of contracts to interface with\r\n     * @param _utilAddress address of UTIL_TKN contract\r\n     * @param _stakeAddress address of STAKE_TKN contract\r\n     */\r\n    function setTokenContracts(address _utilAddress, address _stakeAddress)\r\n        external\r\n        isContractAdmin\r\n    {\r\n        //^^^^^^^checks^^^^^^^^^\r\n\r\n        UTIL_TKN_Address = _utilAddress;\r\n        UTIL_TKN = UTIL_TKN_Interface(UTIL_TKN_Address);\r\n\r\n        STAKE_TKN_Address = _stakeAddress;\r\n        STAKE_TKN = STAKE_TKN_Interface(STAKE_TKN_Address);\r\n\r\n        //^^^^^^^effects^^^^^^^^^\r\n    }\r\n\r\n    //--------------------------------------External functions--------------------------------------------//\r\n\r\n    /**\r\n     * @dev moves tokens(amount) from holder(tokenID) into itself using trustedAgentTransfer, records the amount in stake map\r\n     * @param _tokenId stake token to take stake for\r\n     * @param _amount amount of stake to pull\r\n     */\r\n    function takeStake(uint256 _tokenId, uint256 _amount)\r\n        external\r\n        nonReentrant\r\n        whenNotPaused\r\n        isStakeAdmin\r\n    {\r\n        //^^^^^^^checks^^^^^^^^^\r\n        address staker = STAKE_TKN.ownerOf(_tokenId);\r\n        //^^^^^^^effects^^^^^^^^^\r\n\r\n        UTIL_TKN.trustedAgentTransfer(staker, address(this), _amount); // here so fails first\r\n        stake[_tokenId] = stake[_tokenId] + _amount;\r\n        //^^^^^^^interactions^^^^^^^^^\r\n    }\r\n\r\n    /**\r\n     * @dev sends stakedAmount[tokenId] tokens to ownerOf(tokenId), updates the stake map.\r\n     * @param _tokenId stake token to release stake for\r\n     */\r\n    function releaseStake(uint256 _tokenId)\r\n        external\r\n        nonReentrant\r\n        whenNotPaused\r\n        isStakeAdmin\r\n    {\r\n        //^^^^^^^checks^^^^^^^^^\r\n\r\n        uint256 amount = stake[_tokenId];\r\n        delete stake[_tokenId];\r\n        //^^^^^^^effects^^^^^^^^^\r\n\r\n        address staker = STAKE_TKN.ownerOf(_tokenId);\r\n        UTIL_TKN.transfer(staker, amount);\r\n        //^^^^^^^interactions^^^^^^^^^\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens staked on (tokenId)\r\n     * @param _tokenId token to check\r\n     * @return Stake of _tokenId\r\n     */\r\n    function stakeOfToken(uint256 _tokenId) external view returns (uint256) {\r\n        //^^^^^^^checks^^^^^^^^^\r\n\r\n        return stake[_tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Pauses contract.\r\n     *\r\n     * See {ERC721Pausable} and {Pausable-_pause}.\r\n     */\r\n    function pause() external isPauser {\r\n        //^^^^^^^checks^^^^^^^^^\r\n\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @dev Unpauses contract.\r\n     *\r\n     * See {ERC721Pausable} and {Pausable-_unpause}.\r\n     */\r\n    function unpause() external isPauser {\r\n        _unpause();\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTRACT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"releaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_utilAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeAddress\",\"type\":\"address\"}],\"name\":\"setTokenContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"stakeOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"takeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"STAKE_VAULT","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1bc735d01296a4aa35437ab597c1e915a617f6a45c3476244229ece7da43a63c"}]}