{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/ArtGrailAuction/ArtGrailAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport \\\"./interface/IArtGrailNFT.sol\\\";\\r\\n\\r\\ncontract ArtGrailAuction is Initializable, ReentrancyGuardUpgradeable, OwnableUpgradeable {\\r\\n    using SafeMathUpgradeable for uint256;\\r\\n    using AddressUpgradeable for address payable;\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n    /// @notice Event emitted only on construction. To be used by indexers\\r\\n    event ArtGrailAuctionContractDeployed();\\r\\n    event PauseToggled(bool isPaused);\\r\\n\\r\\n    event AuctionCreated(address indexed nftAddress, uint256 indexed tokenId, address owner, uint256 quantity,\\r\\n        uint256 reservePrice, uint256 startTimestamp, uint256 endTimestamp);\\r\\n\\r\\n    event UpdateAuctionReservePrice(address indexed nftAddress, uint256 indexed tokenId, uint256 reservePrice);\\r\\n\\r\\n    event UpdatePlatformFee(uint256 platformFee);\\r\\n\\r\\n    event UpdatePlatformRoyalty(uint256 platformRoyalty);\\r\\n\\r\\n    event UpdatePlatformFeeRecipient(address payable platformFeeRecipient);\\r\\n\\r\\n    event UpdateMinBidIncrement(uint256 minBidIncrement);\\r\\n\\r\\n    event UpdateBidWithdrawalLockTime(uint256 bidWithdrawalLockTime);\\r\\n\\r\\n    event BidPlaced(address indexed nftAddress, uint256 indexed tokenId, address indexed bidder, uint256 bid);\\r\\n\\r\\n    event BidWithdrawn(address indexed nftAddress, uint256 indexed tokenId, address indexed bidder, uint256 bid);\\r\\n\\r\\n    event BidRefunded(address indexed bidder, uint256 bid);\\r\\n\\r\\n    event AuctionResulted(address indexed nftAddress, uint256 indexed tokenId, address indexed winner, uint256 winningBid);\\r\\n\\r\\n    event AuctionCancelled(address indexed nftAddress, uint256 indexed tokenId);\\r\\n\\r\\n    /// @notice Parameters of an auction\\r\\n    struct Auction {\\r\\n        address owner;\\r\\n        uint256 quantity;\\r\\n        uint256 reservePrice;\\r\\n        uint256 startTime;\\r\\n        uint256 endTime;\\r\\n        bool resulted;\\r\\n    }\\r\\n\\r\\n    /// @notice Information about the sender that placed a bit on an auction\\r\\n    struct HighestBid {\\r\\n        address payable bidder;\\r\\n        uint256 bid;\\r\\n        uint256 lastBidTime;\\r\\n    }\\r\\n\\r\\n    /// @notice ERC1155 Address -> Token ID -> Auction Parameters\\r\\n    mapping(address => mapping(uint256 => Auction)) public auctions;\\r\\n\\r\\n    /// @notice ERC1155 Address -> Token ID -> highest bidder info (if a bid has been received)\\r\\n    mapping(address => mapping(uint256 => HighestBid)) public highestBids;\\r\\n\\r\\n    /// @notice globally and across all auctions, the amount by which a bid has to increase\\r\\n    uint256 public minBidIncrement;\\r\\n\\r\\n    /// @notice global bid withdrawal lock time\\r\\n    uint256 public bidWithdrawalLockTime;\\r\\n\\r\\n    /// @notice global platform fee, assumed to always be to 1 decimal place i.e. 120 = 12.0%\\r\\n    uint256 public platformFee;\\r\\n\\r\\n    /// @notice royalty percentage\\r\\n    uint256 public platformRoyalty;\\r\\n\\r\\n    /// @notice where to send platform fee funds to\\r\\n    address payable public platformFeeRecipient;\\r\\n\\r\\n    /// @notice for switching off auction creations, bids and withdrawals\\r\\n    bool public isPaused;\\r\\n\\r\\n    modifier whenNotPaused() {\\r\\n        require(!isPaused, \\\"Function is currently paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Initializer instead of constructor\\r\\n    function __ArtGrailAuction_init(address payable _feeRecipient) public initializer {\\r\\n        // ReentrancyGuardUpgradeable\\r\\n        __ReentrancyGuard_init_unchained();\\r\\n        // OwnableUpgradeable\\r\\n        __Context_init_unchained();\\r\\n        // OwnableUpgradeable\\r\\n        __Ownable_init_unchained();\\r\\n\\r\\n        require(_feeRecipient != address(0), \\\"ArtGrailAuction: Invalid Platform Fee Recipient\\\");\\r\\n\\r\\n        platformFeeRecipient = _feeRecipient;\\r\\n\\r\\n        minBidIncrement = 0.05 ether;\\r\\n        bidWithdrawalLockTime = 20 minutes;\\r\\n        platformFee = 25;\\r\\n        platformRoyalty = 100;\\r\\n        emit ArtGrailAuctionContractDeployed();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Creates a new auction for a given item\\r\\n     @dev Only the owner of item can create an auction and must have approved the contract\\r\\n     @dev In addition to owning the item, the sender also has to have the MINTER role.\\r\\n     @dev End time for the auction must be in the future.\\r\\n     @param _nftAddress ERC 1155 Address\\r\\n     @param _tokenId Token ID of the item being auctioned\\r\\n     @param _reservePrice Item cannot be sold for less than this or minBidIncrement, whichever is higher\\r\\n     @param _startTimestamp Unix epoch in seconds for the auction start time\\r\\n     @param _endTimestamp Unix epoch in seconds for the auction end time.\\r\\n     */\\r\\n    function createAuction(\\r\\n        address _nftAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _quantity,\\r\\n        uint256 _reservePrice,\\r\\n        uint256 _startTimestamp,\\r\\n        uint256 _endTimestamp\\r\\n    ) external whenNotPaused {\\r\\n        // Ensure this contract is approved to move the token\\r\\n        require(\\r\\n            IERC1155Upgradeable(_nftAddress).isApprovedForAll(_msgSender(), address(this)),\\r\\n            \\\"ArtGrailAuction.createAuction: Contract is not approved\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            IERC1155Upgradeable(_nftAddress).balanceOf(_msgSender(), _tokenId) >= _quantity,\\r\\n            \\\"ArtGrailAuction.createAuction: Your balance does not match quantity\\\"\\r\\n        );\\r\\n\\r\\n        _createAuction(_nftAddress, _tokenId, _quantity, _reservePrice, _startTimestamp, _endTimestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Places a new bid, out bidding the existing bidder if found and criteria is reached\\r\\n     @dev Only callable when the auction is open\\r\\n     @dev Bids from smart contracts are prohibited to prevent griefing with always reverting receiver\\r\\n     @param _nftAddress ERC 1155 Address\\r\\n     @param _tokenId Token ID of the item being auctioned\\r\\n     */\\r\\n    function placeBid(address _nftAddress, uint256 _tokenId) external payable nonReentrant whenNotPaused {\\r\\n        require(_msgSender().isContract() == false, \\\"ArtGrailAuction.placeBid: No contracts permitted\\\");\\r\\n\\r\\n        // Check the auction to see if this is a valid bid\\r\\n        Auction storage auction = auctions[_nftAddress][_tokenId];\\r\\n\\r\\n        // Ensure auction is in flight\\r\\n        require(_getNow() >= auction.startTime && _getNow() <= auction.endTime, \\\"ArtGrailAuction.placeBid: Bidding outside of the auction window\\\");\\r\\n\\r\\n        uint256 bidAmount = msg.value;\\r\\n\\r\\n        // Ensure bid adheres to outbid increment and threshold\\r\\n        HighestBid storage highestBid = highestBids[_nftAddress][_tokenId];\\r\\n        uint256 minBidRequired = highestBid.bid.add(minBidIncrement);\\r\\n        require(bidAmount >= minBidRequired, \\\"ArtGrailAuction.placeBid: Failed to outbid highest bidder\\\");\\r\\n\\r\\n        // Ensure bidAmount is higher than reserved price\\r\\n        require(bidAmount >= auction.reservePrice, \\\"ArtGrailAuction.placeBid: Reserved price is not reached\\\");\\r\\n\\r\\n        // Refund existing top bidder if found\\r\\n        if (highestBid.bidder != address(0)) {\\r\\n            _refundHighestBidder(highestBid.bidder, highestBid.bid);\\r\\n        }\\r\\n\\r\\n        // assign top bidder and bid time\\r\\n        highestBid.bidder = _msgSender();\\r\\n        highestBid.bid = bidAmount;\\r\\n        highestBid.lastBidTime = _getNow();\\r\\n\\r\\n        emit BidPlaced(_nftAddress, _tokenId, _msgSender(), bidAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Given a sender who has the highest bid on a item, allows them to withdraw their bid\\r\\n     @dev Only callable by the existing top bidder\\r\\n     @param _nftAddress ERC 1155 Address\\r\\n     @param _tokenId Token ID of the item being auctioned\\r\\n     */\\r\\n    function withdrawBid(address _nftAddress, uint256 _tokenId) external nonReentrant whenNotPaused {\\r\\n        HighestBid storage highestBid = highestBids[_nftAddress][_tokenId];\\r\\n\\r\\n        // Ensure highest bidder is the caller\\r\\n        require(highestBid.bidder == _msgSender(), \\\"ArtGrailAuction.withdrawBid: You are not the highest bidder\\\");\\r\\n\\r\\n        // Check withdrawal after delay time\\r\\n        require(_getNow() >= highestBid.lastBidTime.add(bidWithdrawalLockTime), \\\"ArtGrailAuction.withdrawBid: Cannot withdraw until lock time has passed\\\");\\r\\n\\r\\n        require(_getNow() < auctions[_nftAddress][_tokenId].endTime, \\\"ArtGrailAuction.withdrawBid: Past auction end\\\");\\r\\n\\r\\n        uint256 previousBid = highestBid.bid;\\r\\n\\r\\n        // Clean up the existing top bid\\r\\n        delete highestBids[_nftAddress][_tokenId];\\r\\n\\r\\n        // Refund the top bidder\\r\\n        _refundHighestBidder(_msgSender(), previousBid);\\r\\n\\r\\n        emit BidWithdrawn(_nftAddress, _tokenId, _msgSender(), previousBid);\\r\\n    }\\r\\n\\r\\n    //////////\\r\\n    // Owner /\\r\\n    //////////\\r\\n\\r\\n    /**\\r\\n     @notice Results a finished auction\\r\\n     @dev Only admin or smart contract\\r\\n     @dev Auction can only be resulted if there has been a bidder and reserve met.\\r\\n     @dev If there have been no bids, the auction needs to be cancelled instead using `cancelAuction()`\\r\\n     @param _nftAddress ERC 1155 Address\\r\\n     @param _tokenId Token ID of the item being auctioned\\r\\n     */\\r\\n    function resultAuction(address _nftAddress, uint256 _tokenId) external nonReentrant {\\r\\n        // Check the auction to see if it can be resulted\\r\\n        Auction storage auction = auctions[_nftAddress][_tokenId];\\r\\n\\r\\n        require(IERC1155Upgradeable(_nftAddress).balanceOf(_msgSender(), _tokenId) >= auction.quantity && _msgSender() == auction.owner, \\\"ArtGrailAuction.resultAuction: Sender must be item owner\\\");\\r\\n\\r\\n        // Check the auction real\\r\\n        require(auction.endTime > 0, \\\"ArtGrailAuction.resultAuction: Auction does not exist\\\");\\r\\n\\r\\n        // Check the auction has ended\\r\\n        require(_getNow() > auction.endTime, \\\"ArtGrailAuction.resultAuction: The auction has not ended\\\");\\r\\n\\r\\n        // Ensure auction not already resulted\\r\\n        require(!auction.resulted, \\\"ArtGrailAuction.resultAuction: auction already resulted\\\");\\r\\n\\r\\n        // Ensure this contract is approved to move the token\\r\\n        require(IERC1155Upgradeable(_nftAddress).isApprovedForAll(_msgSender(), address(this)), \\\"ArtGrailAuction.resultAuction: auction not approved\\\");\\r\\n\\r\\n        // Get info on who the highest bidder is\\r\\n        HighestBid storage highestBid = highestBids[_nftAddress][_tokenId];\\r\\n        address winner = highestBid.bidder;\\r\\n        uint256 winningBid = highestBid.bid;\\r\\n\\r\\n        // Ensure auction not already resulted\\r\\n        require(winningBid >= auction.reservePrice, \\\"ArtGrailAuction.resultAuction: reserve not reached\\\");\\r\\n\\r\\n        // Ensure there is a winner\\r\\n        require(winner != address(0), \\\"ArtGrailAuction.resultAuction: no open bids\\\");\\r\\n\\r\\n        // Result the auction\\r\\n        auction.resulted = true;\\r\\n\\r\\n        // Clean up the highest bid\\r\\n        delete highestBids[_nftAddress][_tokenId];\\r\\n\\r\\n        if (winningBid > auction.reservePrice) {\\r\\n            // Work out total above the reserve\\r\\n            uint256 aboveReservePrice = winningBid;\\r\\n\\r\\n            // Work out platform fee from above reserve amount\\r\\n            uint256 platformFeeAboveReserve = aboveReservePrice.mul(platformFee).div(1000);\\r\\n\\r\\n            // Send platform fee\\r\\n            (bool platformTransferSuccess, ) = platformFeeRecipient.call{ value: platformFeeAboveReserve }(\\\"\\\");\\r\\n\\r\\n            require(platformTransferSuccess, \\\"ArtGrailAuction.resultAuction: Failed to send platform fee\\\");\\r\\n\\r\\n            uint256 platformRoyaltyAboveReserve = aboveReservePrice.mul(platformRoyalty).div(1000);\\r\\n\\r\\n            address[] memory creatorAddress = IArtGrailNFT(_nftAddress).getCreators(_tokenId);\\r\\n\\r\\n            // Send royality fee to creator\\r\\n            (bool royalityTransferSuccess, ) = creatorAddress[0].call{ value: platformRoyaltyAboveReserve }(\\\"\\\");\\r\\n\\r\\n            require(royalityTransferSuccess, \\\"ArtGrailAuction.resultAuction: Failed to send platform royalty\\\");\\r\\n\\r\\n            // Send remaining to seller\\r\\n            (bool ownerTransferSuccess, ) = auction.owner.call{ value: winningBid.sub(platformFeeAboveReserve).sub(platformRoyaltyAboveReserve) }(\\\"\\\");\\r\\n            require(ownerTransferSuccess, \\\"ArtGrailAuction.resultAuction: Failed to send the owner their royalties\\\");\\r\\n        } else {\\r\\n            (bool ownerTransferSuccess, ) = auction.owner.call{ value: winningBid }(\\\"\\\");\\r\\n            require(ownerTransferSuccess, \\\"ArtGrailAuction.resultAuction: Failed to send the owner their royalties\\\");\\r\\n        }\\r\\n\\r\\n        // Transfer the token to the winner\\r\\n        IERC1155Upgradeable(_nftAddress).safeTransferFrom(auction.owner, winner, _tokenId, auction.quantity, \\\"\\\");\\r\\n\\r\\n        emit AuctionResulted(_nftAddress, _tokenId, winner, winningBid);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Cancels and inflight and un-resulted auctions, returning the funds to the top bidder if found\\r\\n     @dev Only item owner\\r\\n     @param _nftAddress ERC 1155 Address\\r\\n     @param _tokenId Token ID of the NFT being auctioned\\r\\n     */\\r\\n    function cancelAuction(address _nftAddress, uint256 _tokenId) external nonReentrant {\\r\\n        // Check valid and not resulted\\r\\n        Auction storage auction = auctions[_nftAddress][_tokenId];\\r\\n\\r\\n        require(IERC1155Upgradeable(_nftAddress).balanceOf(_msgSender(), _tokenId) > 0 && _msgSender() == auction.owner, \\\"ArtGrailAuction.cancelAuction: Sender must be item owner\\\");\\r\\n\\r\\n        // Check auction is real\\r\\n        require(auction.endTime > 0, \\\"ArtGrailAuction.cancelAuction: Auction does not exist\\\");\\r\\n\\r\\n        // Check auction not already resulted\\r\\n        require(!auction.resulted, \\\"ArtGrailAuction.cancelAuction: auction already resulted\\\");\\r\\n\\r\\n        // refund existing top bidder if found\\r\\n        HighestBid storage highestBid = highestBids[_nftAddress][_tokenId];\\r\\n        if (highestBid.bidder != address(0)) {\\r\\n            _refundHighestBidder(highestBid.bidder, highestBid.bid);\\r\\n\\r\\n            // Clear up highest bid\\r\\n            delete highestBids[_nftAddress][_tokenId];\\r\\n        }\\r\\n\\r\\n        // Remove auction and top bidder\\r\\n        delete auctions[_nftAddress][_tokenId];\\r\\n\\r\\n        emit AuctionCancelled(_nftAddress, _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Update the current reserve price for an auction\\r\\n     @dev Only admin\\r\\n     @dev Auction must exist\\r\\n     @param _nftAddress ERC 1155 Address\\r\\n     @param _tokenId Token ID of the NFT being auctioned\\r\\n     @param _reservePrice New Ether reserve price (WEI value)\\r\\n     */\\r\\n    function updateAuctionReservePrice(\\r\\n        address _nftAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _reservePrice\\r\\n    ) external {\\r\\n        Auction storage auction = auctions[_nftAddress][_tokenId];\\r\\n\\r\\n        require(_msgSender() == auction.owner, \\\"ArtGrailAuction.updateAuctionReservePrice: Sender must be item owner\\\");\\r\\n        require(auction.endTime > 0, \\\"ArtGrailAuction.updateAuctionReservePrice: No Auction exists\\\");\\r\\n\\r\\n        auction.reservePrice = _reservePrice;\\r\\n        emit UpdateAuctionReservePrice(_nftAddress, _tokenId, _reservePrice);\\r\\n    }\\r\\n\\r\\n    ///////////////\\r\\n    // Accessors //\\r\\n    ///////////////\\r\\n\\r\\n    /**\\r\\n     @notice Method for getting all info about the auction\\r\\n     @param _nftAddress ERC 1155 Address\\r\\n     @param _tokenId Token ID of the NFT being auctioned\\r\\n     */\\r\\n    function getAuction(address _nftAddress, uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address _owner,\\r\\n            uint256 _reservePrice,\\r\\n            uint256 _startTime,\\r\\n            uint256 _endTime,\\r\\n            bool _resulted\\r\\n        )\\r\\n    {\\r\\n        Auction storage auction = auctions[_nftAddress][_tokenId];\\r\\n        return (auction.owner, auction.reservePrice, auction.startTime, auction.endTime, auction.resulted);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Method for getting all info about the highest bidder\\r\\n     @param _tokenId Token ID of the NFT being auctioned\\r\\n     */\\r\\n    function getHighestBidder(address _nftAddress, uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address payable _bidder,\\r\\n            uint256 _bid,\\r\\n            uint256 _lastBidTime\\r\\n        )\\r\\n    {\\r\\n        HighestBid storage highestBid = highestBids[_nftAddress][_tokenId];\\r\\n        return (highestBid.bidder, highestBid.bid, highestBid.lastBidTime);\\r\\n    }\\r\\n\\r\\n    /////////////////////////\\r\\n    // Internal and Private /\\r\\n    /////////////////////////\\r\\n\\r\\n    function _getNow() internal view virtual returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Private method doing the heavy lifting of creating an auction\\r\\n     @param _nftAddress ERC 1155 Address\\r\\n     @param _tokenId Token ID of the NFT being auctioned\\r\\n     @param _reservePrice Item cannot be sold for less than this or minBidIncrement, whichever is higher\\r\\n     @param _startTimestamp Unix epoch in seconds for the auction start time\\r\\n     @param _endTimestamp Unix epoch in seconds for the auction end time.\\r\\n     */\\r\\n    function _createAuction(\\r\\n        address _nftAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _quantity,\\r\\n        uint256 _reservePrice,\\r\\n        uint256 _startTimestamp,\\r\\n        uint256 _endTimestamp\\r\\n    ) private {\\r\\n        // Ensure a token cannot be re-listed if previously successfully sold\\r\\n        require(auctions[_nftAddress][_tokenId].endTime == 0, \\\"ArtGrailAuction.createAuction: Cannot relist\\\");\\r\\n\\r\\n        // Check end time not before start time and that end is in the future\\r\\n        require(_endTimestamp > _startTimestamp, \\\"ArtGrailAuction.createAuction: End time must be greater than start\\\");\\r\\n        require(_endTimestamp > _getNow(), \\\"ArtGrailAuction.createAuction: End time passed. Nobody can bid.\\\");\\r\\n\\r\\n        // Setup the auction\\r\\n        auctions[_nftAddress][_tokenId] = Auction({ owner: _msgSender(), reservePrice: _reservePrice, startTime: _startTimestamp, endTime: _endTimestamp, resulted: false, quantity: _quantity });\\r\\n\\r\\n        emit AuctionCreated(_nftAddress, _tokenId, _msgSender(), _quantity, _reservePrice, _startTimestamp, _endTimestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Used for sending back escrowed funds from a previous bid\\r\\n     @param _currentHighestBidder Address of the last highest bidder\\r\\n     @param _currentHighestBid Ether or Mona amount in WEI that the bidder sent when placing their bid\\r\\n     */\\r\\n    function _refundHighestBidder(address payable _currentHighestBidder, uint256 _currentHighestBid) private {\\r\\n        // refund previous best (if bid exists)\\r\\n        (bool successRefund, ) = _currentHighestBidder.call{ value: _currentHighestBid }(\\\"\\\");\\r\\n        require(successRefund, \\\"ArtGrailAuction._refundHighestBidder: failed to refund previous bidder\\\");\\r\\n        emit BidRefunded(_currentHighestBidder, _currentHighestBid);\\r\\n    }\\r\\n\\r\\n    //////////\\r\\n    // Admin /\\r\\n    //////////\\r\\n\\r\\n    /**\\r\\n     @notice Toggling the pause flag\\r\\n     @dev Only admin\\r\\n     */\\r\\n    function toggleIsPaused() external onlyOwner {\\r\\n        isPaused = !isPaused;\\r\\n        emit PauseToggled(isPaused);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Method for updating platform fee\\r\\n     @dev Only admin\\r\\n     @param _platformFee uint256 the platform fee to set\\r\\n     */\\r\\n    function updatePlatformFee(uint256 _platformFee) external onlyOwner {\\r\\n        platformFee = _platformFee;\\r\\n        emit UpdatePlatformFee(_platformFee);\\r\\n    }\\r\\n\\r\\n    function updatePlatformRoyalty(uint256 _platformRoyalty) external onlyOwner {\\r\\n        platformRoyalty = _platformRoyalty;\\r\\n        emit UpdatePlatformRoyalty(_platformRoyalty);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Method for updating platform fee address\\r\\n     @dev Only admin\\r\\n     @param _platformFeeRecipient payable address the address to sends the funds to\\r\\n     */\\r\\n    function updatePlatformFeeRecipient(address payable _platformFeeRecipient) external onlyOwner {\\r\\n        require(_platformFeeRecipient != address(0), \\\"ArtGrailAuction.updatePlatformFeeRecipient: Zero address\\\");\\r\\n\\r\\n        platformFeeRecipient = _platformFeeRecipient;\\r\\n        emit UpdatePlatformFeeRecipient(_platformFeeRecipient);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Update the amount by which bids have to increase, across all auctions\\r\\n     @dev Only admin\\r\\n     @param _minBidIncrement New bid step in WEI\\r\\n     */\\r\\n    function updateMinBidIncrement(uint256 _minBidIncrement) external onlyOwner {\\r\\n        minBidIncrement = _minBidIncrement;\\r\\n        emit UpdateMinBidIncrement(_minBidIncrement);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Update the global bid withdrawal lockout time\\r\\n     @dev Only admin\\r\\n     @param _bidWithdrawalLockTime New bid withdrawal lock time\\r\\n     */\\r\\n    function updateBidWithdrawalLockTime(uint256 _bidWithdrawalLockTime) external onlyOwner {\\r\\n        bidWithdrawalLockTime = _bidWithdrawalLockTime;\\r\\n        emit UpdateBidWithdrawalLockTime(_bidWithdrawalLockTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reclaims ERC20 Compatible tokens for entire balance\\r\\n     * @dev Only access controls admin\\r\\n     * @param _tokenContract The address of the token contract\\r\\n     */\\r\\n    function reclaimERC20(address _tokenContract) external onlyOwner {\\r\\n        require(_tokenContract != address(0), \\\"Invalid address\\\");\\r\\n        IERC20Upgradeable token = IERC20Upgradeable(_tokenContract);\\r\\n        uint256 balance = token.balanceOf(address(this));\\r\\n        require(token.transfer(_msgSender(), balance), \\\"Transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/ArtGrailAuction/interface/IArtGrailNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\r\\n\\r\\ninterface IArtGrailNFT is IERC1155Upgradeable {\\r\\n    using SafeMathUpgradeable for uint256;\\r\\n\\r\\n    event Minted(\\r\\n        uint256 tokenId,\\r\\n        address beneficiary,\\r\\n        string tokenUri,\\r\\n        address minter\\r\\n    );\\r\\n\\r\\n    function getCreators(uint256 _id) external view returns (address[] memory);\\r\\n\\r\\n    function primarySalePrice(uint256 tokenId) external view returns (uint256);\\r\\n\\r\\n    function mint(address _beneficiary, string calldata _tokenUri) external;\\r\\n\\r\\n    function burn(uint256 _tokenId) external;\\r\\n\\r\\n    function exists(uint256 _tokenId) external;\\r\\n\\r\\n    function isApproved(uint256 _tokenId, address _operator) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[],\"name\":\"ArtGrailAuctionContractDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningBid\",\"type\":\"uint256\"}],\"name\":\"AuctionResulted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"BidRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"BidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"}],\"name\":\"UpdateAuctionReservePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidWithdrawalLockTime\",\"type\":\"uint256\"}],\"name\":\"UpdateBidWithdrawalLockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBidIncrement\",\"type\":\"uint256\"}],\"name\":\"UpdateMinBidIncrement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"}],\"name\":\"UpdatePlatformFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"platformFeeRecipient\",\"type\":\"address\"}],\"name\":\"UpdatePlatformFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformRoyalty\",\"type\":\"uint256\"}],\"name\":\"UpdatePlatformRoyalty\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"__ArtGrailAuction_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"resulted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidWithdrawalLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_resulted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getHighestBidder\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"_bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastBidTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"highestBids\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBidTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFeeRecipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformRoyalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"reclaimERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"resultAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleIsPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"}],\"name\":\"updateAuctionReservePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidWithdrawalLockTime\",\"type\":\"uint256\"}],\"name\":\"updateBidWithdrawalLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBidIncrement\",\"type\":\"uint256\"}],\"name\":\"updateMinBidIncrement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"}],\"name\":\"updatePlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_platformFeeRecipient\",\"type\":\"address\"}],\"name\":\"updatePlatformFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformRoyalty\",\"type\":\"uint256\"}],\"name\":\"updatePlatformRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ArtGrailAuction","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}