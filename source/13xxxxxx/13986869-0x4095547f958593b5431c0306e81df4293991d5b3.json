{"status":"1","message":"OK","result":[{"SourceCode":"// File @rari-capital/solmate/src/tokens/ERC20.sol@v6.2.0\r\n\r\n// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.8.0;\r\n\r\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\r\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\r\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\r\nabstract contract ERC20 {\r\n    /*///////////////////////////////////////////////////////////////\r\n                                  EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             METADATA STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public immutable decimals;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC20 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             EIP-2612 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    bytes32 public constant PERMIT_TYPEHASH =\r\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n\r\n    uint256 internal immutable INITIAL_CHAIN_ID;\r\n\r\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\r\n\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                               CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals\r\n    ) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n\r\n        INITIAL_CHAIN_ID = block.chainid;\r\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC20 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\r\n        balanceOf[msg.sender] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(msg.sender, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\r\n\r\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\r\n\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              EIP-2612 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual {\r\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\r\n\r\n        // Unchecked because the only math done is incrementing\r\n        // the owner's nonce which cannot realistically overflow.\r\n        unchecked {\r\n            bytes32 digest = keccak256(\r\n                abi.encodePacked(\r\n                    \"\\x19\\x01\",\r\n                    DOMAIN_SEPARATOR(),\r\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n                )\r\n            );\r\n\r\n            address recoveredAddress = ecrecover(digest, v, r, s);\r\n\r\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\r\n\r\n            allowance[recoveredAddress][spender] = value;\r\n        }\r\n\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\r\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\r\n    }\r\n\r\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                    keccak256(bytes(name)),\r\n                    keccak256(\"1\"),\r\n                    block.chainid,\r\n                    address(this)\r\n                )\r\n            );\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                       INTERNAL MINT/BURN LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        totalSupply += amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot underflow because a user's balance\r\n        // will never be larger than the total supply.\r\n        unchecked {\r\n            totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/IGenzee.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IGenzee {\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function ownerOf(uint256 tokenId) external returns (address);\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    function isApprovedForAll(address _owner, address _operator) external returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.4.1\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/Pausable.sol@v4.4.1\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Oddworx.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\nerror NotOwnerOfToken();\r\nerror InvalidInput();\r\nerror NoTokensToClaim();\r\nerror NftHoldRewardsNotActive();\r\nerror NotAdmin();\r\n\r\n/// @title Oddworx\r\n/// @author Mytchall / Alephao\r\n/// @notice General functions to mint, burn, reward NFT holders incl staking\r\ncontract Oddworx is ERC20, Pausable {\r\n\r\n    IGenzee immutable public _genzeeContract;\r\n    bool public nftHoldRewardsActive = true;\r\n    uint256 public NFT_STAKING_WEEKLY_REWARD_AMOUNT = 20 * 10 ** 18; // Doesn't have to be public\r\n    uint256 constant public NFT_HOLDING_WEEKLY_REWARD_AMOUNT = 10 * 10 ** 18;\r\n    \r\n    struct StakingData {\r\n        address ownerAddress; // 160 bits\r\n        uint96 timestamp; // 96 bits\r\n    }\r\n\r\n    mapping(address => bool) public adminAddresses;\r\n    mapping(uint256 => StakingData) public stakedNft;\r\n    mapping(uint256 => uint256) public latestUnstakedClaimTimestamp;\r\n    \r\n    constructor(address _nftContractAddress) ERC20(\"Oddworx\", \"ODDX\", 18) {\r\n        _mint(msg.sender, 1000000000 * 10 ** 18);\r\n        _genzeeContract = IGenzee(_nftContractAddress);\r\n        adminAddresses[msg.sender] = true;\r\n    }\r\n\r\n    /// @notice emitted when an item is purchased\r\n    /// @param user address of the user that purchased an item\r\n    /// @param itemSKU the SKU of the item purchased\r\n    /// @param price the amount paid for the item\r\n    event ItemPurchased(address indexed user, uint256 itemSKU, uint256 price);\r\n\r\n    /// @notice emitted when a user stakes a token\r\n    /// @param user address of the user that staked the Genzee\r\n    /// @param genzee the id of the Genzee staked\r\n    event StakedNft(address indexed user, uint256 indexed genzee);\r\n\r\n    /// @notice emitted when a user unstakes a token\r\n    /// @param user address of the user that unstaked the Genzee\r\n    /// @param genzee the id of the Genzee unstaked\r\n    /// @param amount the amount of ODDX claimed\r\n    event UnstakedNft(address indexed user, uint256 indexed genzee, uint256 amount);\r\n\r\n    /// @notice emitted when a user claim NFT rewards\r\n    /// @param user address of the user that claimed ODDX\r\n    /// @param genzee the id of the Genzee that generated the rewards\r\n    /// @param amount the amount of ODDX claimed\r\n    event UserClaimedNftRewards(address indexed user, uint256 indexed genzee, uint256 amount);\r\n\r\n    modifier onlyAdmin() {\r\n        if (adminAddresses[msg.sender]  != true) revert NotAdmin();\r\n        _;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             General Functions\r\n    //////////////////////////////////////////////////////////////*/\r\n    function mint(address to, uint256 amount) public onlyAdmin {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function burn(address _from, uint256 amount) public onlyAdmin {\r\n        if (balanceOf[_from] < amount) revert InvalidInput();\r\n        _burn(_from, amount);\r\n    }\r\n\r\n    function toggleAdminContract(address _adminAddress) public onlyAdmin {\r\n         adminAddresses[_adminAddress] = !adminAddresses[_adminAddress];\r\n    }\r\n\r\n    function pause() public onlyAdmin {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyAdmin {\r\n        _unpause();\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             Shop features\r\n    //////////////////////////////////////////////////////////////*/\r\n    /// @notice Buy item in shop by burning Oddx.\r\n    /// @param itemSKU A unique ID used to identify shop products.\r\n    /// @param amount Amount of Oddx to burn.\r\n    function buyItem(uint itemSKU, uint amount) public whenNotPaused {\r\n        if (balanceOf[msg.sender] < amount) revert InvalidInput();\r\n        _burn(msg.sender, amount);\r\n        emit ItemPurchased(msg.sender, itemSKU, amount);\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             NFT Staking Rewards\r\n    //////////////////////////////////////////////////////////////*/\r\n    /// @notice stake genzees in this contract. \r\n    /// The Genzee owners need to approve this contract for transfering\r\n    /// before calling this function.\r\n    /// @param genzeeIds list of genzee ids to stake.\r\n    function stakeNfts(uint256[] calldata genzeeIds) external whenNotPaused {\r\n        if (genzeeIds.length == 0) revert InvalidInput();\r\n        uint256 genzeeId;\r\n        for (uint256 i; i < genzeeIds.length; i++) {\r\n            genzeeId = genzeeIds[i];\r\n            // No need to check ownership since transferFrom already checks that\r\n            // and the caller of this function should be the Genzee owner\r\n            stakedNft[genzeeId] = StakingData(msg.sender, uint96(block.timestamp));\r\n            _genzeeContract.transferFrom(msg.sender, address(this), genzeeId);\r\n            emit StakedNft(msg.sender, genzeeId);\r\n        }\r\n    }\r\n\r\n    /// @notice unstake genzees back to they rightful owners and pay them what it's owed in ODDX.\r\n    /// @param genzeeIds list of genzee ids to unstake.\r\n    function unstakeNfts(uint256[] calldata genzeeIds) external whenNotPaused {\r\n        if (genzeeIds.length == 0) revert InvalidInput();\r\n\r\n        // total rewards amount to claim (all genzees)\r\n        uint256 totalRewards;\r\n\r\n        // loop variables\r\n\r\n        // rewards for current genzee in the loop below\r\n        uint256 rewards;\r\n\r\n        // current genzeeid in the loop below\r\n        uint256 genzeeId;\r\n\r\n        // staking information for the current genzee in the loop below\r\n        StakingData memory stake;\r\n\r\n        for (uint256 i; i < genzeeIds.length; i++) {\r\n            genzeeId = genzeeIds[i];\r\n            stake = stakedNft[genzeeId];\r\n\r\n            if (stake.ownerAddress != msg.sender && stake.ownerAddress != address(0))  {\r\n                revert NotOwnerOfToken();\r\n            }\r\n\r\n            rewards = _stakedRewardsForTimestamp(genzeeId);\r\n            totalRewards += rewards;\r\n\r\n            // Reset timestamp for unstaked rewards\r\n            latestUnstakedClaimTimestamp[genzeeId] = block.timestamp;\r\n\r\n            // No need to run safeTransferFrom because we're returning the NFT to\r\n            // an address that was holding it before\r\n            _genzeeContract.transferFrom(address(this), stake.ownerAddress, genzeeId);\r\n\r\n            delete stakedNft[genzeeId];\r\n\r\n            emit UnstakedNft(msg.sender, genzeeId, rewards);\r\n        }\r\n\r\n        if (totalRewards > 0) {\r\n            _mint(msg.sender, totalRewards);\r\n        }\r\n    }\r\n\r\n    /// @notice Claim Staked NFT rewards in ODDX. Also resets general holding\r\n    /// timestamp so users can't double-claim for holding/staking.\r\n    /// @param genzeeIds list of genzee ids to claim rewards for.\r\n    function claimStakedNftRewards(uint256[] calldata genzeeIds) external whenNotPaused {\r\n        if (genzeeIds.length == 0) revert InvalidInput();\r\n\r\n        // total rewards amount to claim (all genzees)\r\n        uint256 totalRewards;\r\n\r\n        // loop variables\r\n\r\n        // rewards for current genzee in the loop below\r\n        uint256 rewards;\r\n\r\n        // current genzeeid in the loop below\r\n        uint256 genzeeId;\r\n\r\n        // staking information for the current genzee in the loop below\r\n        StakingData memory stake;\r\n\r\n        for (uint256 i; i < genzeeIds.length; i++) {\r\n            genzeeId = genzeeIds[i];\r\n            stake = stakedNft[genzeeId];\r\n\r\n            if (stake.ownerAddress != msg.sender) revert NotOwnerOfToken();\r\n\r\n            rewards = _stakedRewardsForTimestamp(stake.timestamp);\r\n            totalRewards += rewards;\r\n\r\n            stakedNft[genzeeId].timestamp = uint96(block.timestamp);\r\n\r\n            emit UserClaimedNftRewards(msg.sender, genzeeId, rewards);\r\n        }\r\n\r\n        if (totalRewards == 0) revert NoTokensToClaim();\r\n        _mint(msg.sender, totalRewards);\r\n    }\r\n\r\n    /// @notice Calculate staking rewards owed per week.\r\n    /// @param genzeeId NFT id to check.\r\n    /// @return Returns amount of tokens available to claim\r\n    function calculateStakedNftRewards(uint256 genzeeId) external view returns (uint256) {\r\n        uint256 timestamp = stakedNft[genzeeId].timestamp;\r\n        return _stakedRewardsForTimestamp(timestamp);\r\n    }\r\n\r\n    function _stakedRewardsForTimestamp(uint256 timestamp) private view returns (uint256) {\r\n        return timestamp > 0\r\n            ? NFT_STAKING_WEEKLY_REWARD_AMOUNT * ((block.timestamp - timestamp) / 1 weeks)\r\n            : 0;\r\n    }\r\n\r\n    /// @notice Updates amount users are rewarded weekly.\r\n    /// @param newAmount new amount to use, supply number in wei.\r\n    function updateNftStakedRewardAmount(uint256 newAmount) external onlyAdmin {\r\n        NFT_STAKING_WEEKLY_REWARD_AMOUNT = newAmount;\r\n    }\r\n\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             NFT Holding Rewards\r\n    //////////////////////////////////////////////////////////////*/\r\n    /// @notice Claim rewards for NFT if we are the holder. \r\n    /// Rewards are attached to the NFT, so if it's transferred, new owner can claim tokens\r\n    /// But the intital rewards can't be reclaimed\r\n    /// @param genzeeIds list of genzee ids to stake.\r\n    function claimNftHoldRewards(uint256[] calldata genzeeIds) external whenNotPaused {\r\n        if (!nftHoldRewardsActive) revert NftHoldRewardsNotActive();\r\n        if (genzeeIds.length == 0) revert InvalidInput();\r\n\r\n        // total rewards amount to claim (all genzees)\r\n        uint256 totalRewards;\r\n\r\n        // loop variables\r\n\r\n        // rewards for current genzee in the loop below\r\n        uint256 rewards;\r\n\r\n        // current genzeeid in the loop below\r\n        uint256 genzeeId;\r\n\r\n        // last time owner claimed rewards for the genzee\r\n        uint256 latestClaimTimestamp;\r\n\r\n        for (uint256 i; i < genzeeIds.length; i++) {\r\n            genzeeId = genzeeIds[i];\r\n            if (_genzeeContract.ownerOf(genzeeId) != msg.sender) revert NotOwnerOfToken();\r\n            latestClaimTimestamp = latestUnstakedClaimTimestamp[genzeeId];\r\n\r\n            rewards = _unstakedRewardsForTimestamp(latestClaimTimestamp);\r\n            totalRewards += rewards;\r\n\r\n            // Set claim timestamp to now\r\n            latestUnstakedClaimTimestamp[genzeeId] = block.timestamp;\r\n\r\n            emit UserClaimedNftRewards(msg.sender, genzeeId, rewards);\r\n        }\r\n\r\n        if (totalRewards == 0) revert NoTokensToClaim();\r\n        _mint(msg.sender, totalRewards);\r\n    }\r\n\r\n    function calculateNftHoldReward(uint256 _nftIndex) external view returns (uint256)  {\r\n        uint256 timestamp = latestUnstakedClaimTimestamp[_nftIndex];\r\n        return _unstakedRewardsForTimestamp(timestamp);\r\n    }\r\n\r\n    function _unstakedRewardsForTimestamp(uint256 timestamp) private view returns (uint256) {\r\n        return (timestamp > 0)\r\n            ? NFT_HOLDING_WEEKLY_REWARD_AMOUNT * ((block.timestamp - timestamp) / 1 weeks)\r\n            : NFT_HOLDING_WEEKLY_REWARD_AMOUNT;\r\n    }\r\n\r\n    function toggleNftHoldRewards() external onlyAdmin {\r\n        nftHoldRewardsActive = !nftHoldRewardsActive;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftHoldRewardsNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokensToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerOfToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemSKU\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"genzee\",\"type\":\"uint256\"}],\"name\":\"StakedNft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"genzee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakedNft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"genzee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserClaimedNftRewards\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT_HOLDING_WEEKLY_REWARD_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT_STAKING_WEEKLY_REWARD_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_genzeeContract\",\"outputs\":[{\"internalType\":\"contract IGenzee\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemSKU\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftIndex\",\"type\":\"uint256\"}],\"name\":\"calculateNftHoldReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"genzeeId\",\"type\":\"uint256\"}],\"name\":\"calculateStakedNftRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"genzeeIds\",\"type\":\"uint256[]\"}],\"name\":\"claimNftHoldRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"genzeeIds\",\"type\":\"uint256[]\"}],\"name\":\"claimStakedNftRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"latestUnstakedClaimTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftHoldRewardsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"genzeeIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedNft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"timestamp\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"toggleAdminContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleNftHoldRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"genzeeIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateNftStakedRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Oddworx","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000201675fbfaaac3a51371e4c31ff73ac14cee2a5a","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1b0d9d984610a20725a494552e60e15571d7fcbc8c618209ff2fe98a599e026a"}]}