{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/libraries/details/BackgroundDetail.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\npragma abicoder v2;\\n\\nimport \\\"base64-sol/base64.sol\\\";\\n\\n/// @title Background SVG generator\\nlibrary BackgroundDetail {\\n    /// @dev background N°1 => Ordinary\\n    function item_1() public pure returns (string memory) {\\n        return base(\\\"636363\\\", \\\"CFCFCF\\\", \\\"ABABAB\\\");\\n    }\\n\\n    /// @dev background N°2 => Unusual\\n    function item_2() public pure returns (string memory) {\\n        return base(\\\"004A06\\\", \\\"61E89B\\\", \\\"12B55F\\\");\\n    }\\n\\n    /// @dev background N°3 => Surprising\\n    function item_3() public pure returns (string memory) {\\n        return base(\\\"1A4685\\\", \\\"6BF0E3\\\", \\\"00ADC7\\\");\\n    }\\n\\n    /// @dev background N°4 => Impressive\\n    function item_4() public pure returns (string memory) {\\n        return base(\\\"380113\\\", \\\"D87AE6\\\", \\\"8A07BA\\\");\\n    }\\n\\n    /// @dev background N°5 => Extraordinary\\n    function item_5() public pure returns (string memory) {\\n        return base(\\\"A33900\\\", \\\"FAF299\\\", \\\"FF9121\\\");\\n    }\\n\\n    /// @dev background N°6 => Phenomenal\\n    function item_6() public pure returns (string memory) {\\n        return base(\\\"000000\\\", \\\"C000E8\\\", \\\"DED52C\\\");\\n    }\\n\\n    /// @dev background N°7 => Artistic\\n    function item_7() public pure returns (string memory) {\\n        return base(\\\"FF00E3\\\", \\\"E8E18B\\\", \\\"00C4AD\\\");\\n    }\\n\\n    /// @dev background N°8 => Unreal\\n    function item_8() public pure returns (string memory) {\\n        return base(\\\"CCCC75\\\", \\\"54054D\\\", \\\"001E2E\\\");\\n    }\\n\\n    /// @notice Return the background name of the given id\\n    /// @param id The background Id\\n    function getItemNameById(uint8 id) public pure returns (string memory name) {\\n        name = \\\"\\\";\\n        if (id == 1) {\\n            name = \\\"Ordinary\\\";\\n        } else if (id == 2) {\\n            name = \\\"Unusual\\\";\\n        } else if (id == 3) {\\n            name = \\\"Surprising\\\";\\n        } else if (id == 4) {\\n            name = \\\"Impressive\\\";\\n        } else if (id == 5) {\\n            name = \\\"Extraordinary\\\";\\n        } else if (id == 6) {\\n            name = \\\"Phenomenal\\\";\\n        } else if (id == 7) {\\n            name = \\\"Artistic\\\";\\n        } else if (id == 8) {\\n            name = \\\"Unreal\\\";\\n        }\\n    }\\n\\n    /// @dev The base SVG for the backgrounds\\n    function base(\\n        string memory stop1,\\n        string memory stop2,\\n        string memory stop3\\n    ) private pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<g id=\\\"Background\\\">',\\n                    '<radialGradient id=\\\"gradient\\\" cx=\\\"210\\\" cy=\\\"-134.05\\\" r=\\\"210.025\\\" gradientTransform=\\\"matrix(1 0 0 -1 0 76)\\\" gradientUnits=\\\"userSpaceOnUse\\\">',\\n                    \\\"<style>\\\",\\n                    \\\".color-anim {animation: col 6s infinite;animation-timing-function: ease-in-out;}\\\",\\n                    \\\"@keyframes col {0%,51% {stop-color:none} 52% {stop-color:#FFBAF7} 53%,100% {stop-color:none}}\\\",\\n                    \\\"</style>\\\",\\n                    \\\"<stop offset='0' class='color-anim' style='stop-color:#\\\",\\n                    stop1,\\n                    \\\"'/>\\\",\\n                    \\\"<stop offset='0.66' style='stop-color:#\\\",\\n                    stop2,\\n                    \\\"'><animate attributeName='offset' dur='18s' values='0.54;0.8;0.54' repeatCount='indefinite' keyTimes='0;.4;1'/></stop>\\\",\\n                    \\\"<stop offset='1' style='stop-color:#\\\",\\n                    stop3,\\n                    \\\"'><animate attributeName='offset' dur='18s' values='0.86;1;0.86' repeatCount='indefinite'/></stop>\\\",\\n                    abi.encodePacked(\\n                        \\\"</radialGradient>\\\",\\n                        '<path fill=\\\"url(#gradient)\\\" d=\\\"M390,420H30c-16.6,0-30-13.4-30-30V30C0,13.4,13.4,0,30,0h360c16.6,0,30,13.4,30,30v360C420,406.6,406.6,420,390,420z\\\"/>',\\n                        '<path id=\\\"Border\\\" opacity=\\\"0.4\\\" fill=\\\"none\\\" stroke=\\\"#FFFFFF\\\" stroke-width=\\\"2\\\" stroke-miterlimit=\\\"10\\\" d=\\\"M383.4,410H36.6C21.9,410,10,398.1,10,383.4V36.6C10,21.9,21.9,10,36.6,10h346.8c14.7,0,26.6,11.9,26.6,26.6v346.8 C410,398.1,398.1,410,383.4,410z\\\"/>',\\n                        '<path id=\\\"Mask\\\" opacity=\\\"0.1\\\" fill=\\\"#48005E\\\" d=\\\"M381.4,410H38.6C22.8,410,10,397.2,10,381.4V38.6 C10,22.8,22.8,10,38.6,10h342.9c15.8,0,28.6,12.8,28.6,28.6v342.9C410,397.2,397.2,410,381.4,410z\\\"/>',\\n                        \\\"</g>\\\"\\n                    )\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"base64-sol/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getItemNameById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_1\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_2\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_3\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_4\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_5\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_6\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_7\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_8\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"BackgroundDetail","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}