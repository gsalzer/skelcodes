{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/OKLGFaaS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport './OKLGFaaSToken.sol';\\nimport './OKLGProduct.sol';\\n\\n/**\\n * @title OKLGFaaS (sOKLG)\\n * @author Lance Whatley\\n * @notice Implements the master FaaS contract to keep track of all tokens being added\\n * to be staked and staking.\\n */\\ncontract OKLGFaaS is OKLGProduct {\\n  // this is a mapping of tokenAddress => contractAddress[] that represents\\n  // a particular address for the token that someone has put up\\n  // to be staked and a list of contract addresses for the staking token\\n  // contracts paying out stakers for the given token.\\n  mapping(address => address[]) public tokensUpForStaking;\\n  address[] public allFarmingContracts;\\n  uint256 public totalStakingContracts;\\n\\n  /**\\n   * @notice The constructor for the staking master contract.\\n   */\\n  constructor(address _tokenAddress, address _spendAddress)\\n    OKLGProduct(uint8(8), _tokenAddress, _spendAddress)\\n  {}\\n\\n  function getAllFarmingContracts() external view returns (address[] memory) {\\n    return allFarmingContracts;\\n  }\\n\\n  function getTokensForStaking(address _tokenAddress)\\n    external\\n    view\\n    returns (address[] memory)\\n  {\\n    return tokensUpForStaking[_tokenAddress];\\n  }\\n\\n  function createNewTokenContract(\\n    address _rewardsTokenAddy,\\n    address _stakedTokenAddy,\\n    uint256 _supply,\\n    uint256 _perBlockAllocation,\\n    uint256 _lockedUntilDate,\\n    uint256 _timelockSeconds,\\n    bool _isStakedNft\\n  ) external payable {\\n    _payForService(0);\\n\\n    // create new OKLGFaaSToken contract which will serve as the core place for\\n    // users to stake their tokens and earn rewards\\n    ERC20 _rewToken = ERC20(_rewardsTokenAddy);\\n\\n    // Send the new contract all the tokens from the sending user to be staked and harvested\\n    _rewToken.transferFrom(msg.sender, address(this), _supply);\\n\\n    // in order to handle tokens that take tax, are burned, etc. when transferring, need to get\\n    // the user's balance after transferring in order to send the remainder of the tokens\\n    // instead of the full original supply. Similar to slippage on a DEX\\n    uint256 _updatedSupply = _supply <= _rewToken.balanceOf(address(this))\\n      ? _supply\\n      : _rewToken.balanceOf(address(this));\\n\\n    OKLGFaaSToken _contract = new OKLGFaaSToken(\\n      'Moontography Staking Token',\\n      'sOKLG',\\n      _updatedSupply,\\n      _rewardsTokenAddy,\\n      _stakedTokenAddy,\\n      msg.sender,\\n      _perBlockAllocation,\\n      _lockedUntilDate,\\n      _timelockSeconds,\\n      _isStakedNft\\n    );\\n    allFarmingContracts.push(address(_contract));\\n    tokensUpForStaking[_stakedTokenAddy].push(address(_contract));\\n    totalStakingContracts++;\\n\\n    _rewToken.transfer(address(_contract), _updatedSupply);\\n\\n    // do one more double check on balance of rewards token\\n    // in the staking contract and update if need be\\n    uint256 _finalSupply = _updatedSupply <=\\n      _rewToken.balanceOf(address(_contract))\\n      ? _updatedSupply\\n      : _rewToken.balanceOf(address(_contract));\\n    if (_updatedSupply != _finalSupply) {\\n      _contract.updateSupply(_finalSupply);\\n    }\\n  }\\n\\n  function removeTokenContract(address _faasTokenAddy) external {\\n    OKLGFaaSToken _contract = OKLGFaaSToken(_faasTokenAddy);\\n    require(\\n      msg.sender == _contract.tokenOwner(),\\n      'user must be the original token owner to remove tokens'\\n    );\\n    require(\\n      block.timestamp > _contract.getLockedUntilDate() &&\\n        _contract.getLockedUntilDate() != 0,\\n      'it must be after the locked time the user originally configured and not locked forever'\\n    );\\n\\n    _contract.removeStakeableTokens();\\n    totalStakingContracts--;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/OKLGFaaSToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC721.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\n/**\\n * @title OKLGFaaSToken (sOKLG)\\n * @notice Represents a contract where a token owner has put her tokens up for others to stake and earn said tokens.\\n */\\ncontract OKLGFaaSToken is ERC20 {\\n  using SafeMath for uint256;\\n  bool public contractIsRemoved = false;\\n\\n  IERC20 private _rewardsToken;\\n  IERC20 private _stakedERC20;\\n  IERC721 private _stakedERC721;\\n  PoolInfo public pool;\\n  address private constant _burner = 0x000000000000000000000000000000000000dEaD;\\n\\n  struct PoolInfo {\\n    address creator; // address of contract creator\\n    address tokenOwner; // address of original rewards token owner\\n    uint256 origTotSupply; // supply of rewards tokens put up to be rewarded by original owner\\n    uint256 curRewardsSupply; // current supply of rewards\\n    uint256 totalTokensStaked; // current amount of tokens staked\\n    uint256 creationBlock; // block this contract was created\\n    uint256 perBlockNum; // amount of rewards tokens rewarded per block\\n    uint256 lockedUntilDate; // unix timestamp of how long this contract is locked and can't be changed\\n    // uint256 allocPoint; // How many allocation points assigned to this pool. ERC20s to distribute per block.\\n    uint256 lastRewardBlock; // Last block number that ERC20s distribution occurs.\\n    uint256 accERC20PerShare; // Accumulated ERC20s per share, times 1e36.\\n    uint256 stakeTimeLockSec; // number of seconds after depositing the user is required to stake before unstaking\\n    bool isStakedNft;\\n  }\\n\\n  struct StakerInfo {\\n    uint256 blockOriginallyStaked; // block the user originally staked\\n    uint256 timeOriginallyStaked; // unix timestamp in seconds that the user originally staked\\n    uint256 blockLastHarvested; // the block the user last claimed/harvested rewards\\n    uint256 rewardDebt; // Reward debt. See explanation below.\\n    uint256[] nftTokenIds; // if this is an NFT staking pool, make sure we store the token IDs here\\n  }\\n\\n  struct BlockTokenTotal {\\n    uint256 blockNumber;\\n    uint256 totalTokens;\\n  }\\n\\n  // mapping of userAddresses => tokenAddresses that can\\n  // can be evaluated to determine for a particular user which tokens\\n  // they are staking.\\n  mapping(address => StakerInfo) public stakers;\\n\\n  event Deposit(address indexed user, uint256 amount);\\n  event Withdraw(address indexed user, uint256 amount);\\n\\n  /**\\n   * @notice The constructor for the Staking Token.\\n   * @param _name Name of the staking token\\n   * @param _symbol Name of the staking token symbol\\n   * @param _rewardSupply The amount of tokens to mint on construction, this should be the same as the tokens provided by the creating user.\\n   * @param _rewardsTokenAddy Contract address of token to be rewarded to users\\n   * @param _stakedTokenAddy Contract address of token to be staked by users\\n   * @param _originalTokenOwner Address of user putting up staking tokens to be staked\\n   * @param _perBlockAmount Amount of tokens to be rewarded per block\\n   * @param _lockedUntilDate Unix timestamp that the staked tokens will be locked. 0 means locked forever until all tokens are staked\\n   * @param _stakeTimeLockSec number of seconds a user is required to stake, or 0 if none\\n   * @param _isStakedNft is this an NFT staking pool\\n   */\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    uint256 _rewardSupply,\\n    address _rewardsTokenAddy,\\n    address _stakedTokenAddy,\\n    address _originalTokenOwner,\\n    uint256 _perBlockAmount,\\n    uint256 _lockedUntilDate,\\n    uint256 _stakeTimeLockSec,\\n    bool _isStakedNft\\n  ) ERC20(_name, _symbol) {\\n    require(\\n      _perBlockAmount > uint256(0) && _perBlockAmount <= uint256(_rewardSupply),\\n      'per block amount must be more than 0 and less than supply'\\n    );\\n\\n    // A locked date of '0' corresponds to being locked forever until the supply has expired and been rewards to all stakers\\n    require(\\n      _lockedUntilDate > block.timestamp || _lockedUntilDate == 0,\\n      'locked time must be after now or 0'\\n    );\\n\\n    _rewardsToken = IERC20(_rewardsTokenAddy);\\n    if (_isStakedNft) {\\n      _stakedERC721 = IERC721(_stakedTokenAddy);\\n    } else {\\n      _stakedERC20 = IERC20(_stakedTokenAddy);\\n    }\\n\\n    pool = PoolInfo({\\n      creator: msg.sender,\\n      tokenOwner: _originalTokenOwner,\\n      origTotSupply: _rewardSupply,\\n      curRewardsSupply: _rewardSupply,\\n      totalTokensStaked: 0,\\n      creationBlock: 0,\\n      perBlockNum: _perBlockAmount,\\n      lockedUntilDate: _lockedUntilDate,\\n      lastRewardBlock: block.number,\\n      accERC20PerShare: 0,\\n      stakeTimeLockSec: _stakeTimeLockSec,\\n      isStakedNft: _isStakedNft\\n    });\\n  }\\n\\n  // SHOULD ONLY BE CALLED AT CONTRACT CREATION and allows changing\\n  // the initial supply if tokenomics of token transfer causes\\n  // the original staking contract supply to be less than the original\\n  function updateSupply(uint256 _newSupply) external {\\n    require(\\n      msg.sender == pool.creator,\\n      'only contract creator can update the supply'\\n    );\\n    pool.origTotSupply = _newSupply;\\n    pool.curRewardsSupply = _newSupply;\\n  }\\n\\n  function stakedTokenAddress() external view returns (address) {\\n    return pool.isStakedNft ? address(_stakedERC721) : address(_stakedERC20);\\n  }\\n\\n  function rewardsTokenAddress() external view returns (address) {\\n    return address(_rewardsToken);\\n  }\\n\\n  function tokenOwner() external view returns (address) {\\n    return pool.tokenOwner;\\n  }\\n\\n  function getLockedUntilDate() external view returns (uint256) {\\n    return pool.lockedUntilDate;\\n  }\\n\\n  function removeStakeableTokens() external {\\n    require(\\n      msg.sender == pool.creator || msg.sender == pool.tokenOwner,\\n      'caller must be the contract creator or owner to remove stakable tokens'\\n    );\\n    _rewardsToken.transfer(pool.tokenOwner, pool.curRewardsSupply);\\n    pool.curRewardsSupply = 0;\\n    contractIsRemoved = true;\\n  }\\n\\n  // function updateTimestamp(uint256 _newTime) external {\\n  //   require(\\n  //     msg.sender == tokenOwner,\\n  //     'updateTimestamp user must be original token owner'\\n  //   );\\n  //   require(\\n  //     _newTime > lockedUntilDate || _newTime == 0,\\n  //     'you cannot change timestamp if it is before the locked time or was set to be locked forever'\\n  //   );\\n  //   lockedUntilDate = _newTime;\\n  // }\\n\\n  function stakeTokens(uint256 _amount, uint256[] memory _tokenIds) public {\\n    require(\\n      getLastStakableBlock() > block.number,\\n      'this farm is expired and no more stakers can be added'\\n    );\\n\\n    _updatePool();\\n\\n    if (balanceOf(msg.sender) > 0) {\\n      _harvestTokens(msg.sender);\\n    }\\n\\n    uint256 _finalAmountTransferred;\\n    if (pool.isStakedNft) {\\n      require(\\n        _tokenIds.length > 0,\\n        \\\"you need to provide NFT token IDs you're staking\\\"\\n      );\\n      for (uint256 _i = 0; _i < _tokenIds.length; _i++) {\\n        _stakedERC721.transferFrom(msg.sender, address(this), _tokenIds[_i]);\\n      }\\n\\n      _finalAmountTransferred = _tokenIds.length;\\n    } else {\\n      uint256 _contractBalanceBefore = _stakedERC20.balanceOf(address(this));\\n      _stakedERC20.transferFrom(msg.sender, address(this), _amount);\\n\\n      // in the event a token contract on transfer taxes, burns, etc. tokens\\n      // the contract might not get the entire amount that the user originally\\n      // transferred. Need to calculate from the previous contract balance\\n      // so we know how many were actually transferred.\\n      _finalAmountTransferred = _stakedERC20.balanceOf(address(this)).sub(\\n        _contractBalanceBefore\\n      );\\n    }\\n\\n    if (totalSupply() == 0) {\\n      pool.creationBlock = block.number;\\n      pool.lastRewardBlock = block.number;\\n    }\\n    _mint(msg.sender, _finalAmountTransferred);\\n    StakerInfo storage _staker = stakers[msg.sender];\\n    _staker.blockOriginallyStaked = block.number;\\n    _staker.timeOriginallyStaked = block.timestamp;\\n    _staker.blockLastHarvested = block.number;\\n    _staker.rewardDebt = balanceOf(msg.sender).mul(pool.accERC20PerShare).div(\\n      1e36\\n    );\\n    for (uint256 _i = 0; _i < _tokenIds.length; _i++) {\\n      _staker.nftTokenIds.push(_tokenIds[_i]);\\n    }\\n    _updNumStaked(_finalAmountTransferred, 'add');\\n    emit Deposit(msg.sender, _finalAmountTransferred);\\n  }\\n\\n  // pass 'false' for _shouldHarvest for emergency unstaking without claiming rewards\\n  function unstakeTokens(uint256 _amount, bool _shouldHarvest) external {\\n    StakerInfo memory _staker = stakers[msg.sender];\\n    uint256 _userBalance = balanceOf(msg.sender);\\n    require(\\n      pool.isStakedNft ? true : _amount <= _userBalance,\\n      'user can only unstake amount they have currently staked or less'\\n    );\\n\\n    // allow unstaking if the user is emergency unstaking and not getting rewards or\\n    // if theres a time lock that it's past the time lock or\\n    // the contract rewards were removed by the original contract creator or\\n    // the contract is expired\\n    require(\\n      !_shouldHarvest ||\\n        block.timestamp >=\\n        _staker.timeOriginallyStaked.add(pool.stakeTimeLockSec) ||\\n        contractIsRemoved ||\\n        block.number > getLastStakableBlock(),\\n      'you have not staked for minimum time lock yet and the pool is not expired'\\n    );\\n\\n    _updatePool();\\n\\n    if (_shouldHarvest) {\\n      _harvestTokens(msg.sender);\\n    }\\n\\n    uint256 _amountToRemoveFromStaked = pool.isStakedNft\\n      ? _userBalance\\n      : _amount;\\n    transfer(_burner, _amountToRemoveFromStaked);\\n    if (pool.isStakedNft) {\\n      for (uint256 _i = 0; _i < _staker.nftTokenIds.length; _i++) {\\n        _stakedERC721.transferFrom(\\n          address(this),\\n          msg.sender,\\n          _staker.nftTokenIds[_i]\\n        );\\n      }\\n    } else {\\n      require(\\n        _stakedERC20.transfer(msg.sender, _amountToRemoveFromStaked),\\n        'unable to send user original tokens'\\n      );\\n    }\\n\\n    if (balanceOf(msg.sender) <= 0) {\\n      delete stakers[msg.sender];\\n    }\\n    _updNumStaked(_amountToRemoveFromStaked, 'remove');\\n    emit Withdraw(msg.sender, _amountToRemoveFromStaked);\\n  }\\n\\n  function emergencyUnstake() external {\\n    StakerInfo memory _staker = stakers[msg.sender];\\n    uint256 _amountToRemoveFromStaked = balanceOf(msg.sender);\\n    require(\\n      _amountToRemoveFromStaked > 0,\\n      'user can only unstake if they have tokens in the pool'\\n    );\\n\\n    transfer(_burner, _amountToRemoveFromStaked);\\n    if (pool.isStakedNft) {\\n      for (uint256 _i = 0; _i < _staker.nftTokenIds.length; _i++) {\\n        _stakedERC721.transferFrom(\\n          address(this),\\n          msg.sender,\\n          _staker.nftTokenIds[_i]\\n        );\\n      }\\n    } else {\\n      require(\\n        _stakedERC20.transfer(msg.sender, _amountToRemoveFromStaked),\\n        'unable to send user original tokens'\\n      );\\n    }\\n\\n    delete stakers[msg.sender];\\n    _updNumStaked(_amountToRemoveFromStaked, 'remove');\\n    emit Withdraw(msg.sender, _amountToRemoveFromStaked);\\n  }\\n\\n  function harvestForUser(address _userAddy, bool _autoCompound)\\n    external\\n    returns (uint256)\\n  {\\n    require(\\n      msg.sender == pool.creator || msg.sender == _userAddy,\\n      'can only harvest tokens for someone else if this was the contract creator'\\n    );\\n    _updatePool();\\n    uint256 _tokensToUser = _harvestTokens(_userAddy);\\n\\n    if (\\n      _autoCompound &&\\n      !pool.isStakedNft &&\\n      address(_rewardsToken) == address(_stakedERC20)\\n    ) {\\n      uint256[] memory _placeholder;\\n      stakeTokens(_tokensToUser, _placeholder);\\n    }\\n\\n    return _tokensToUser;\\n  }\\n\\n  function getLastStakableBlock() public view returns (uint256) {\\n    uint256 _blockToAdd = pool.creationBlock == 0\\n      ? block.number\\n      : pool.creationBlock;\\n    return pool.origTotSupply.div(pool.perBlockNum).add(_blockToAdd);\\n  }\\n\\n  function calcHarvestTot(address _userAddy) public view returns (uint256) {\\n    StakerInfo memory _staker = stakers[_userAddy];\\n\\n    if (\\n      _staker.blockLastHarvested >= block.number ||\\n      _staker.blockOriginallyStaked == 0 ||\\n      pool.totalTokensStaked == 0\\n    ) {\\n      return uint256(0);\\n    }\\n\\n    uint256 _accERC20PerShare = pool.accERC20PerShare;\\n\\n    if (block.number > pool.lastRewardBlock && pool.totalTokensStaked != 0) {\\n      uint256 _endBlock = getLastStakableBlock();\\n      uint256 _lastBlock = block.number < _endBlock ? block.number : _endBlock;\\n      uint256 _nrOfBlocks = _lastBlock.sub(pool.lastRewardBlock);\\n      uint256 _erc20Reward = _nrOfBlocks.mul(pool.perBlockNum);\\n      _accERC20PerShare = _accERC20PerShare.add(\\n        _erc20Reward.mul(1e36).div(pool.totalTokensStaked)\\n      );\\n    }\\n\\n    return\\n      balanceOf(_userAddy).mul(_accERC20PerShare).div(1e36).sub(\\n        _staker.rewardDebt\\n      );\\n  }\\n\\n  // Update reward variables of the given pool to be up-to-date.\\n  function _updatePool() private {\\n    uint256 _endBlock = getLastStakableBlock();\\n    uint256 _lastBlock = block.number < _endBlock ? block.number : _endBlock;\\n\\n    if (_lastBlock <= pool.lastRewardBlock) {\\n      return;\\n    }\\n    uint256 _stakedSupply = pool.totalTokensStaked;\\n    if (_stakedSupply == 0) {\\n      pool.lastRewardBlock = _lastBlock;\\n      return;\\n    }\\n\\n    uint256 _nrOfBlocks = _lastBlock.sub(pool.lastRewardBlock);\\n    uint256 _erc20Reward = _nrOfBlocks.mul(pool.perBlockNum);\\n\\n    pool.accERC20PerShare = pool.accERC20PerShare.add(\\n      _erc20Reward.mul(1e36).div(_stakedSupply)\\n    );\\n    pool.lastRewardBlock = _lastBlock;\\n  }\\n\\n  function _harvestTokens(address _userAddy) private returns (uint256) {\\n    StakerInfo storage _staker = stakers[_userAddy];\\n    require(_staker.blockOriginallyStaked > 0, 'user must have tokens staked');\\n\\n    uint256 _num2Trans = calcHarvestTot(_userAddy);\\n    if (_num2Trans > 0) {\\n      require(\\n        _rewardsToken.transfer(_userAddy, _num2Trans),\\n        'unable to send user their harvested tokens'\\n      );\\n      pool.curRewardsSupply = pool.curRewardsSupply.sub(_num2Trans);\\n    }\\n    _staker.rewardDebt = balanceOf(_userAddy).mul(pool.accERC20PerShare).div(\\n      1e36\\n    );\\n    _staker.blockLastHarvested = block.number;\\n    return _num2Trans;\\n  }\\n\\n  // update the amount currently staked after a user harvests\\n  function _updNumStaked(uint256 _amount, string memory _operation) private {\\n    if (_compareStr(_operation, 'remove')) {\\n      pool.totalTokensStaked = pool.totalTokensStaked.sub(_amount);\\n    } else {\\n      pool.totalTokensStaked = pool.totalTokensStaked.add(_amount);\\n    }\\n  }\\n\\n  function _compareStr(string memory a, string memory b)\\n    private\\n    pure\\n    returns (bool)\\n  {\\n    return (keccak256(abi.encodePacked((a))) ==\\n      keccak256(abi.encodePacked((b))));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/OKLGProduct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport './interfaces/IOKLGSpend.sol';\\nimport './OKLGWithdrawable.sol';\\n\\n/**\\n * @title OKLGProduct\\n * @dev Contract that every product developed in the OKLG ecosystem should implement\\n */\\ncontract OKLGProduct is OKLGWithdrawable {\\n  IERC20 private _token; // OKLG\\n  IOKLGSpend private _spend;\\n\\n  uint8 public productID;\\n\\n  constructor(\\n    uint8 _productID,\\n    address _tokenAddy,\\n    address _spendAddy\\n  ) {\\n    productID = _productID;\\n    _token = IERC20(_tokenAddy);\\n    _spend = IOKLGSpend(_spendAddy);\\n  }\\n\\n  function setTokenAddy(address _tokenAddy) external onlyOwner {\\n    _token = IERC20(_tokenAddy);\\n  }\\n\\n  function setSpendAddy(address _spendAddy) external onlyOwner {\\n    _spend = IOKLGSpend(_spendAddy);\\n  }\\n\\n  function setProductID(uint8 _newId) external onlyOwner {\\n    productID = _newId;\\n  }\\n\\n  function getTokenAddress() public view returns (address) {\\n    return address(_token);\\n  }\\n\\n  function getSpendAddress() public view returns (address) {\\n    return address(_spend);\\n  }\\n\\n  function _payForService(uint256 _weiToRemoveFromSpend) internal {\\n    _spend.spendOnProduct{ value: msg.value - _weiToRemoveFromSpend }(\\n      msg.sender,\\n      productID\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOKLGSpend.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title IOKLGSpend\\n * @dev Logic for spending OKLG on products in the product ecosystem.\\n */\\ninterface IOKLGSpend {\\n  function spendOnProduct(address _payor, uint8 _product) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/OKLGWithdrawable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\n\\n/**\\n * @title OKLGWithdrawable\\n * @dev Supports being able to get tokens or ETH out of a contract with ease\\n */\\ncontract OKLGWithdrawable is Ownable {\\n  function withdrawTokens(address _tokenAddy, uint256 _amount)\\n    external\\n    onlyOwner\\n  {\\n    IERC20 _token = IERC20(_tokenAddy);\\n    _amount = _amount > 0 ? _amount : _token.balanceOf(address(this));\\n    require(_amount > 0, 'make sure there is a balance available to withdraw');\\n    _token.transfer(owner(), _amount);\\n  }\\n\\n  function withdrawETH() external onlyOwner {\\n    payable(owner()).call{ value: address(this).balance }('');\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spendAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allFarmingContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsTokenAddy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakedTokenAddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perBlockAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockedUntilDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timelockSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isStakedNft\",\"type\":\"bool\"}],\"name\":\"createNewTokenContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllFarmingContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSpendAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokensForStaking\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_faasTokenAddy\",\"type\":\"address\"}],\"name\":\"removeTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newId\",\"type\":\"uint8\"}],\"name\":\"setProductID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spendAddy\",\"type\":\"address\"}],\"name\":\"setSpendAddy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddy\",\"type\":\"address\"}],\"name\":\"setTokenAddy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensUpForStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OKLGFaaS","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005dbb9f64cd96e2dbbca58d14863d615b67b42f2e0000000000000000000000005bde378e0a0cebc941b03a579da0088dc1616faf","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}