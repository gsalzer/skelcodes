{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@yield-protocol/vault-v2/contracts/Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.6;\\nimport \\\"@yield-protocol/utils-v2/contracts/utils/RevertMsgExtractor.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/utils/IsContract.sol\\\";\\n\\n\\n/// @dev Router forwards calls between two contracts, so that any permissions\\n/// given to the original caller are stripped from the call.\\n/// This is useful when implementing generic call routing functions on contracts\\n/// that might have ERC20 approvals or AccessControl authorizations.\\ncontract Router {\\n    using IsContract for address;\\n\\n    address immutable public owner;\\n\\n    constructor () {\\n        owner = msg.sender;\\n    }\\n\\n    /// @dev Allow users to route calls to a pool, to be used with batch\\n    function route(address target, bytes calldata data)\\n        external payable\\n        returns (bytes memory result)\\n    {\\n        require(msg.sender == owner, \\\"Only owner\\\");\\n        require(target.isContract(), \\\"Target is not a contract\\\");\\n        bool success;\\n        (success, result) = target.call(data);\\n        if (!success) revert(RevertMsgExtractor.getRevertMsg(result));\\n    }\\n}\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/utils/RevertMsgExtractor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/sushiswap/BoringSolidity/blob/441e51c0544cf2451e6116fe00515e71d7c42e2c/contracts/BoringBatchable.sol\\n\\npragma solidity >=0.6.0;\\n\\n\\nlibrary RevertMsgExtractor {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function getRevertMsg(bytes memory returnData)\\n        internal pure\\n        returns (string memory)\\n    {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            returnData := add(returnData, 0x04)\\n        }\\n        return abi.decode(returnData, (string)); // All that remains is the revert string\\n    }\\n}\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/utils/IsContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Taken from Address.sol from OpenZeppelin.\\npragma solidity ^0.8.0;\\n\\n\\nlibrary IsContract {\\n  /// @dev Returns true if `account` is a contract.\\n  function isContract(address account) internal view returns (bool) {\\n      // This method relies on extcodesize, which returns 0 for contracts in\\n      // construction, since the code is only stored at the end of the\\n      // constructor execution.\\n      return account.code.length > 0;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"route\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"Router","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}