{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/VoucherSets.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./interfaces/IVoucherKernel.sol\\\";\\nimport \\\"./interfaces/IVoucherSets.sol\\\";\\nimport \\\"./interfaces/ICashier.sol\\\";\\n\\n//preparing for ERC-1066, ERC-1444, EIP-838\\n\\n/**\\n * @title Voucher sets implemented as ERC-1155\\n */\\ncontract VoucherSets is IVoucherSets, ERC1155, Ownable, Pausable {\\n \\n    address private voucherKernelAddress; //address of the VoucherKernel contract\\n    address private cashierAddress; //address of the Cashier contract\\n    string private contractUri;\\n\\n    event LogVoucherKernelSet(address _newVoucherKernel, address _triggeredBy);\\n    event LogCashierSet(address _newCashier, address _triggeredBy);\\n    event LogContractUriSet(string _contractUri, address _triggeredBy);\\n\\n    modifier onlyFromVoucherKernel() {\\n        require(msg.sender == voucherKernelAddress, \\\"UNAUTHORIZED_VK\\\");\\n        _;\\n    }\\n\\n    modifier notZeroAddress(address _address) {\\n        require(_address != address(0), \\\"ZERO_ADDRESS\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Construct and initialze the contract. \\n     * @param _uri metadata uri\\n     * @param _cashierAddress address of the associated Cashier contract\\n     * @param _voucherKernelAddress address of the associated Voucher Kernel contract\\n     */\\n    constructor(string memory _uri, address _cashierAddress, address _voucherKernelAddress) ERC1155(_uri) notZeroAddress(_cashierAddress) notZeroAddress(_voucherKernelAddress)  {\\n        cashierAddress = _cashierAddress;\\n        voucherKernelAddress = _voucherKernelAddress;\\n    }\\n\\n    /**\\n     * @notice Pause the process of interaction with voucherID's (ERC-721), in case of emergency.\\n     * Only BR contract is in control of this function.\\n     */\\n    function pause() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause the process of interaction with voucherID's (ERC-721).\\n     * Only BR contract is in control of this function.\\n     */\\n    function unpause() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Transfers amount of _tokenId from-to addresses with safety call.\\n     * If _to is a smart contract, will call onERC1155Received\\n     * @dev ERC-1155\\n     * @param _from    Source address\\n     * @param _to      Destination address\\n     * @param _tokenId ID of the token\\n     * @param _value   Transfer amount\\n     * @param _data    Additional data forwarded to onERC1155Received if _to is a contract\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        uint256 _value,\\n        bytes calldata _data\\n    )\\n    public\\n    override (ERC1155, IERC1155)\\n    {\\n        require(balanceOf(_from, _tokenId) == _value, \\\"IQ\\\"); //invalid qty\\n        super.safeTransferFrom(_from, _to, _tokenId, _value, _data);\\n        ICashier(cashierAddress).onVoucherSetTransfer(\\n            _from,\\n            _to,\\n            _tokenId,\\n            _value\\n        );\\n    }\\n\\n    /**\\n        @notice Transfers amount of _tokenId from-to addresses with safety call.\\n        If _to is a smart contract, will call onERC1155BatchReceived\\n        @dev ERC-1155\\n        @param _from    Source address\\n        @param _to      Destination address\\n        @param _tokenIds array of token IDs\\n        @param _values   array of transfer amounts\\n        @param _data    Additional data forwarded to onERC1155BatchReceived if _to is a contract\\n    */\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] calldata _tokenIds,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    )  \\n        public\\n        override (ERC1155, IERC1155)\\n    {\\n\\n        //Thes checks need to be called first. Code is duplicated, but super.safeBatchTransferFrom\\n        //must be called at the end because otherwise the balance check in the loop will always fail\\n        require(_tokenIds.length == _values.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(_to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            _from == _msgSender() || isApprovedForAll(_from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n   \\n       \\n\\n        //This is inefficient because it repeats the loop in ERC1155.safeBatchTransferFrom. However,\\n        //there is no other good way to call the Boson Protocol cashier contract inside the loop.\\n        //Doing a full override by copying the ERC1155 code doesn't work because the _balances mapping\\n        //is private instead of internal and can't be accesssed from this child contract\\n\\n        for (uint256 i = 0; i < _tokenIds.length; ++i) {\\n            uint256 tokenId = _tokenIds[i];\\n            uint256 value = _values[i];\\n\\n            //A voucher set's quantity cannot be partionally transferred. It's all or nothing\\n            require(balanceOf(_from, tokenId) == value, \\\"IQ\\\"); //invalid qty\\n\\n            ICashier(cashierAddress).onVoucherSetTransfer(\\n                _from,\\n                _to,\\n                tokenId,\\n                value\\n            );\\n        }\\n\\n        super.safeBatchTransferFrom(_from, _to, _tokenIds, _values, _data);\\n    }\\n\\n    // // // // // // // //\\n    // STANDARD - UTILS\\n    // // // // // // // //\\n    /**\\n     * @notice Mint an amount of a desired token\\n     * Currently no restrictions as to who is allowed to mint - so, it is public.\\n     * @dev ERC-1155\\n     * @param _to       owner of the minted token\\n     * @param _tokenId  ID of the token to be minted\\n     * @param _value    Amount of the token to be minted\\n     * @param _data     Additional data forwarded to onERC1155BatchReceived if _to is a contract\\n     */\\n    function mint(\\n        address _to,\\n        uint256 _tokenId,\\n        uint256 _value,\\n        bytes memory _data\\n    ) external override onlyFromVoucherKernel {\\n        _mint(_to, _tokenId, _value, _data);\\n    }\\n\\n    /**\\n     * @notice Batch minting of tokens\\n     * Currently no restrictions as to who is allowed to mint - so, it is public.\\n     * @dev ERC-1155\\n     * @param _to The address that will own the minted token\\n     * @param _tokenIds IDs of the tokens to be minted\\n     * @param _values Amounts of the tokens to be minted\\n     * @param _data Additional data forwarded to onERC1155BatchReceived if _to is a contract\\n     */\\n    function mintBatch(\\n        address _to,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _values,\\n        bytes memory _data\\n    ) external onlyFromVoucherKernel {\\n        //require approved minter\\n\\n        _mintBatch(_to, _tokenIds, _values, _data);\\n    }\\n\\n    /**\\n     * @notice Burn an amount of tokens with the given ID\\n     * @dev ERC-1155\\n     * @param _account  Account which owns the token\\n     * @param _tokenId  ID of the token\\n     * @param _value    Amount of the token\\n     */\\n    function burn(\\n        address _account,\\n        uint256 _tokenId,\\n        uint256 _value\\n    ) external override onlyFromVoucherKernel {\\n        _burn(_account, _tokenId, _value);\\n    }\\n\\n\\n    /**\\n     * @notice Batch burn an amounts of tokens\\n     * @dev ERC-1155\\n     * @param _account Account which owns the token\\n     * @param _tokenIds IDs of the tokens\\n     * @param _values Amounts of the tokens\\n     */\\n    function burnBatch(\\n        address _account,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _values\\n    ) external onlyFromVoucherKernel {\\n        _burnBatch(_account, _tokenIds, _values);\\n    }\\n\\n    // // // // // // // //\\n    // METADATA EXTENSIONS\\n    // // // // // // // //\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     * @param _newUri   New uri to be used\\n     */\\n    function setUri(string memory _newUri) external onlyOwner {\\n        _setURI(_newUri);\\n    }\\n\\n    /**\\n     * @notice Setting a contractURI for OpenSea collections integration.\\n     * @param _contractUri   The contract URI to be used\\n     */\\n    function setContractUri(string memory _contractUri) external onlyOwner {\\n        require(bytes(_contractUri).length != 0, \\\"INVALID_VALUE\\\");\\n        contractUri = _contractUri;\\n        emit LogContractUriSet(_contractUri, msg.sender);\\n    }\\n\\n    // // // // // // // //\\n    // UTILS\\n    // // // // // // // //\\n\\n    /**\\n     * @notice Set the address of the VoucherKernel contract\\n     * @param _voucherKernelAddress   The address of the Voucher Kernel contract\\n     */\\n    function setVoucherKernelAddress(address _voucherKernelAddress)\\n        external\\n        override\\n        onlyOwner\\n        notZeroAddress(_voucherKernelAddress)\\n        whenPaused\\n    {\\n        voucherKernelAddress = _voucherKernelAddress;\\n\\n        emit LogVoucherKernelSet(_voucherKernelAddress, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Set the address of the cashier contract\\n     * @param _cashierAddress   The Cashier contract\\n     */\\n    function setCashierAddress(address _cashierAddress)\\n        external\\n        override\\n        onlyOwner\\n        notZeroAddress(_cashierAddress)\\n        whenPaused\\n    {\\n        cashierAddress = _cashierAddress;\\n        emit LogCashierSet(_cashierAddress, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Get the address of Voucher Kernel contract\\n     * @return Address of Voucher Kernel contract\\n     */\\n    function getVoucherKernelAddress()\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return voucherKernelAddress;\\n    }\\n\\n    /**\\n     * @notice Get the address of Cashier contract\\n     * @return Address of Cashier address\\n     */\\n    function getCashierAddress()\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return cashierAddress;\\n    }\\n\\n    /**\\n     * @notice Get the contractURI for Opensea collections integration\\n     * @return Contract URI\\n     */\\n    function contractURI() public view returns (string memory) {\\n        return contractUri;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155MetadataURI.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\\n     *\\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    /*\\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor (string memory uri_) {\\n        _setURI(uri_);\\n\\n        // register the supported interfaces to conform to ERC1155 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155);\\n\\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) external view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][from] = _balances[id][from].sub(amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][to] = _balances[id][to].add(amount);\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            _balances[id][from] = _balances[id][from].sub(\\n                amount,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            _balances[id][to] = _balances[id][to].add(amount);\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] = _balances[id][account].add(amount);\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        _balances[id][account] = _balances[id][account].sub(\\n            amount,\\n            \\\"ERC1155: burn amount exceeds balance\\\"\\n        );\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\\n                amounts[i],\\n                \\\"ERC1155: burn amount exceeds balance\\\"\\n            );\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVoucherKernel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport \\\"./../UsingHelpers.sol\\\";\\n\\ninterface IVoucherKernel {\\n    /**\\n     * @notice Pause the process of interaction with voucherID's (ERC-721), in case of emergency.\\n     * Only Cashier contract is in control of this function.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @notice Unpause the process of interaction with voucherID's (ERC-721).\\n     * Only Cashier contract is in control of this function.\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @notice Creating a new promise for goods or services.\\n     * Can be reused, e.g. for making different batches of these (but not in prototype).\\n     * @param _seller      seller of the promise\\n     * @param _validFrom   Start of valid period\\n     * @param _validTo     End of valid period\\n     * @param _price       Price (payment amount)\\n     * @param _depositSe   Seller's deposit\\n     * @param _depositBu   Buyer's deposit\\n     */\\n    function createTokenSupplyId(\\n        address _seller,\\n        uint256 _validFrom,\\n        uint256 _validTo,\\n        uint256 _price,\\n        uint256 _depositSe,\\n        uint256 _depositBu,\\n        uint256 _quantity\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Creates a Payment method struct recording the details on how the seller requires to receive Price and Deposits for a certain Voucher Set.\\n     * @param _tokenIdSupply     _tokenIdSupply of the voucher set this is related to\\n     * @param _paymentMethod  might be ETHETH, ETHTKN, TKNETH or TKNTKN\\n     * @param _tokenPrice   token address which will hold the funds for the price of the voucher\\n     * @param _tokenDeposits   token address which will hold the funds for the deposits of the voucher\\n     */\\n    function createPaymentMethod(\\n        uint256 _tokenIdSupply,\\n        PaymentMethod _paymentMethod,\\n        address _tokenPrice,\\n        address _tokenDeposits\\n    ) external;\\n\\n    /**\\n     * @notice Mark voucher token that the payment was released\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     */\\n    function setPaymentReleased(uint256 _tokenIdVoucher) external;\\n\\n    /**\\n     * @notice Mark voucher token that the deposits were released\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     */\\n    function setDepositsReleased(uint256 _tokenIdVoucher) external;\\n\\n    /**\\n     * @notice Redemption of the vouchers promise\\n     * @param _tokenIdVoucher   ID of the voucher\\n     * @param _messageSender owner of the voucher\\n     */\\n    function redeem(uint256 _tokenIdVoucher, address _messageSender) external;\\n\\n    /**\\n     * @notice Refunding a voucher\\n     * @param _tokenIdVoucher   ID of the voucher\\n     * @param _messageSender owner of the voucher\\n     */\\n    function refund(uint256 _tokenIdVoucher, address _messageSender) external;\\n\\n    /**\\n     * @notice Issue a complain for a voucher\\n     * @param _tokenIdVoucher   ID of the voucher\\n     * @param _messageSender owner of the voucher\\n     */\\n    function complain(uint256 _tokenIdVoucher, address _messageSender) external;\\n\\n    /**\\n     * @notice Cancel/Fault transaction by the Seller, admitting to a fault or backing out of the deal\\n     * @param _tokenIdVoucher   ID of the voucher\\n     * @param _messageSender owner of the voucher set (seller)\\n     */\\n    function cancelOrFault(uint256 _tokenIdVoucher, address _messageSender)\\n        external;\\n\\n    /**\\n     * @notice Cancel/Fault transaction by the Seller, cancelling the remaining uncommitted voucher set so that seller prevents buyers from committing to vouchers for items no longer in exchange.\\n     * @param _tokenIdSupply   ID of the voucher\\n     * @param _issuer   owner of the voucher\\n     */\\n    function cancelOrFaultVoucherSet(uint256 _tokenIdSupply, address _issuer)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Fill Voucher Order, iff funds paid, then extract & mint NFT to the voucher holder\\n     * @param _tokenIdSupply   ID of the supply token (ERC-1155)\\n     * @param _issuer          Address of the token's issuer\\n     * @param _holder          Address of the recipient of the voucher (ERC-721)\\n     * @param _paymentMethod   method being used for that particular order that needs to be fulfilled\\n     */\\n    function fillOrder(\\n        uint256 _tokenIdSupply,\\n        address _issuer,\\n        address _holder,\\n        PaymentMethod _paymentMethod\\n    ) external;\\n\\n    /**\\n     * @notice Mark voucher token as expired\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     */\\n    function triggerExpiration(uint256 _tokenIdVoucher) external;\\n\\n    /**\\n     * @notice Mark voucher token to the final status\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     */\\n    function triggerFinalizeVoucher(uint256 _tokenIdVoucher) external;\\n\\n    /**\\n     * @notice Set the address of the new holder of a _tokenIdSupply on transfer\\n     * @param _tokenIdSupply   _tokenIdSupply which will be transferred\\n     * @param _newSeller   new holder of the supply\\n     */\\n    function setSupplyHolderOnTransfer(\\n        uint256 _tokenIdSupply,\\n        address _newSeller\\n    ) external;\\n\\n    /**\\n     * @notice Set the general cancelOrFault period, should be used sparingly as it has significant consequences. Here done simply for demo purposes.\\n     * @param _cancelFaultPeriod   the new value for cancelOrFault period (in number of seconds)\\n     */\\n    function setCancelFaultPeriod(uint256 _cancelFaultPeriod) external;\\n\\n    /**\\n     * @notice Set the address of the Boson Router contract\\n     * @param _bosonRouterAddress   The address of the BR contract\\n     */\\n    function setBosonRouterAddress(address _bosonRouterAddress) external;\\n\\n    /**\\n     * @notice Set the address of the Cashier contract\\n     * @param _cashierAddress   The address of the Cashier contract\\n     */\\n    function setCashierAddress(address _cashierAddress) external;\\n\\n    /**\\n     * @notice Set the address of the Vouchers token contract, an ERC721 contract\\n     * @param _voucherTokenAddress   The address of the Vouchers token contract\\n     */\\n    function setVoucherTokenAddress(address _voucherTokenAddress) external;\\n\\n    /**\\n     * @notice Set the address of the Voucher Sets token contract, an ERC1155 contract\\n     * @param _voucherSetTokenAddress   The address of the Voucher Sets token contract\\n     */\\n    function setVoucherSetTokenAddress(address _voucherSetTokenAddress)\\n        external;\\n\\n    /**\\n     * @notice Set the general complain period, should be used sparingly as it has significant consequences. Here done simply for demo purposes.\\n     * @param _complainPeriod   the new value for complain period (in number of seconds)\\n     */\\n    function setComplainPeriod(uint256 _complainPeriod) external;\\n\\n    /**\\n     * @notice Get the promise ID at specific index\\n     * @param _idx  Index in the array of promise keys\\n     * @return      Promise ID\\n     */\\n    function getPromiseKey(uint256 _idx) external view returns (bytes32);\\n\\n    /**\\n     * @notice Get the address of the token where the price for the supply is held\\n     * @param _tokenIdSupply   ID of the voucher token\\n     * @return                  Address of the token\\n     */\\n    function getVoucherPriceToken(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Get the address of the token where the deposits for the supply are held\\n     * @param _tokenIdSupply   ID of the voucher token\\n     * @return                  Address of the token\\n     */\\n    function getVoucherDepositToken(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Get Buyer costs required to make an order for a supply token\\n     * @param _tokenIdSupply   ID of the supply token\\n     * @return                  returns a tuple (Payment amount, Buyer's deposit)\\n     */\\n    function getBuyerOrderCosts(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    /**\\n     * @notice Get Seller deposit\\n     * @param _tokenIdSupply   ID of the supply token\\n     * @return                  returns sellers deposit\\n     */\\n    function getSellerDeposit(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the promise ID from a voucher token\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     * @return                  ID of the promise\\n     */\\n    function getIdSupplyFromVoucher(uint256 _tokenIdVoucher)\\n        external\\n        pure\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the promise ID from a voucher token\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     * @return                  ID of the promise\\n     */\\n    function getPromiseIdFromVoucherId(uint256 _tokenIdVoucher)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Get all necessary funds for a supply token\\n     * @param _tokenIdSupply   ID of the supply token\\n     * @return                  returns a tuple (Payment amount, Seller's deposit, Buyer's deposit)\\n     */\\n    function getOrderCosts(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /**\\n     * @notice Get the remaining quantity left in supply of tokens (e.g ERC-721 left in ERC-1155) of an account\\n     * @param _tokenSupplyId  Token supply ID\\n     * @param _owner    holder of the Token Supply\\n     * @return          remaining quantity\\n     */\\n    function getRemQtyForSupply(uint256 _tokenSupplyId, address _owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the payment method for a particular _tokenIdSupply\\n     * @param _tokenIdSupply   ID of the voucher supply token\\n     * @return                  payment method\\n     */\\n    function getVoucherPaymentMethod(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (PaymentMethod);\\n\\n    /**\\n     * @notice Get the current status of a voucher\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     * @return                  Status of the voucher (via enum)\\n     */\\n    function getVoucherStatus(uint256 _tokenIdVoucher)\\n        external\\n        view\\n        returns (\\n            uint8,\\n            bool,\\n            bool,\\n            uint256,\\n            uint256\\n        );\\n\\n    /**\\n     * @notice Get the holder of a supply\\n     * @param _tokenIdSupply    _tokenIdSupply ID of the order (aka VoucherSet) which is mapped to the corresponding Promise.\\n     * @return                  Address of the holder\\n     */\\n    function getSupplyHolder(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Get the holder of a voucher\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     * @return                  Address of the holder\\n     */\\n    function getVoucherHolder(uint256 _tokenIdVoucher)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Checks whether a voucher is in valid period for redemption (between start date and end date)\\n     * @param _tokenIdVoucher ID of the voucher token\\n     */\\n    function isInValidityPeriod(uint256 _tokenIdVoucher)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Checks whether a voucher is in valid state to be transferred. If either payments or deposits are released, voucher could not be transferred\\n     * @param _tokenIdVoucher ID of the voucher token\\n     */\\n    function isVoucherTransferable(uint256 _tokenIdVoucher)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Get address of the Boson Router contract to which this contract points\\n     * @return Address of the Boson Router contract\\n     */\\n    function getBosonRouterAddress() external view returns (address);\\n\\n    /**\\n     * @notice Get address of the Cashier contract to which this contract points\\n     * @return Address of the Cashier contract\\n     */\\n    function getCashierAddress() external view returns (address);\\n\\n    /**\\n     * @notice Get the token nonce for a seller\\n     * @param _seller Address of the seller\\n     * @return The seller's\\n     */\\n    function getTokenNonce(address _seller) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the current type Id\\n     * @return type Id\\n     */\\n    function getTypeId() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the complain period\\n     * @return complain period\\n     */\\n    function getComplainPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the cancel or fault period\\n     * @return cancel or fault period\\n     */\\n    function getCancelFaultPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Get promise data not retrieved by other accessor functions\\n     * @param _promiseKey   ID of the promise\\n     * @return promise data not returned by other accessor methods\\n     */\\n    function getPromiseData(bytes32 _promiseKey)\\n        external\\n        view\\n        returns (\\n            bytes32,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /**\\n     * @notice Get the promise ID from a voucher set\\n     * @param _tokenIdSupply   ID of the voucher token\\n     * @return                  ID of the promise\\n     */\\n    function getPromiseIdFromSupplyId(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Get the address of the Vouchers token contract, an ERC721 contract\\n     * @return Address of Vouchers contract\\n     */\\n    function getVoucherTokenAddress() external view returns (address);\\n\\n    /**\\n     * @notice Get the address of the VoucherSets token contract, an ERC155 contract\\n     * @return Address of VoucherSets contract\\n     */\\n    function getVoucherSetTokenAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVoucherSets.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\\\";\\n\\ninterface IVoucherSets is IERC1155, IERC1155MetadataURI {\\n    /**\\n     * @notice Pause the Cashier && the Voucher Kernel contracts in case of emergency.\\n     * All functions related to creating new batch, requestVoucher or withdraw will be paused, hence cannot be executed.\\n     * There is special function for withdrawing funds if contract is paused.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @notice Unpause the Cashier && the Voucher Kernel contracts.\\n     * All functions related to creating new batch, requestVoucher or withdraw will be unpaused.\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @notice Mint an amount of a desired token\\n     * Currently no restrictions as to who is allowed to mint - so, it is external.\\n     * @dev ERC-1155\\n     * @param _to       owner of the minted token\\n     * @param _tokenId  ID of the token to be minted\\n     * @param _value    Amount of the token to be minted\\n     * @param _data     Additional data forwarded to onERC1155BatchReceived if _to is a contract\\n     */\\n    function mint(\\n        address _to,\\n        uint256 _tokenId,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Burn an amount of tokens with the given ID\\n     * @dev ERC-1155\\n     * @param _account  Account which owns the token\\n     * @param _tokenId  ID of the token\\n     * @param _value    Amount of the token\\n     */\\n    function burn(\\n        address _account,\\n        uint256 _tokenId,\\n        uint256 _value\\n    ) external;\\n\\n    /**\\n     * @notice Set the address of the VoucherKernel contract\\n     * @param _voucherKernelAddress The address of the Voucher Kernel contract\\n     */\\n    function setVoucherKernelAddress(address _voucherKernelAddress) external;\\n\\n    /**\\n     * @notice Set the address of the Cashier contract\\n     * @param _cashierAddress   The address of the Cashier contract\\n     */\\n    function setCashierAddress(address _cashierAddress) external;\\n\\n    /**\\n     * @notice Get the address of Voucher Kernel contract\\n     * @return Address of Voucher Kernel contract\\n     */\\n    function getVoucherKernelAddress() external view returns (address);\\n\\n    /**\\n     * @notice Get the address of Cashier contract\\n     * @return Address of Cashier address\\n     */\\n    function getCashierAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICashier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./../UsingHelpers.sol\\\";\\n\\ninterface ICashier {\\n    /**\\n     * @notice Pause the Cashier && the Voucher Kernel contracts in case of emergency.\\n     * All functions related to creating new batch, requestVoucher or withdraw will be paused, hence cannot be executed.\\n     * There is special function for withdrawing funds if contract is paused.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @notice Unpause the Cashier && the Voucher Kernel contracts.\\n     * All functions related to creating new batch, requestVoucher or withdraw will be unpaused.\\n     */\\n    function unpause() external;\\n\\n    function canUnpause() external view returns (bool);\\n\\n    /**\\n     * @notice Trigger withdrawals of what funds are releasable\\n     * The caller of this function triggers transfers to all involved entities (pool, issuer, token holder), also paying for gas.\\n     * @dev This function would be optimized a lot, here verbose for readability.\\n     * @param _tokenIdVoucher  ID of a voucher token (ERC-721) to try withdraw funds from\\n     */\\n    function withdraw(uint256 _tokenIdVoucher) external;\\n\\n    /**\\n     * @notice External function for withdrawing deposits. Caller must be the seller of the goods, otherwise reverts.\\n     * @notice Seller triggers withdrawals of remaining deposits for a given supply, in case the voucher set is no longer in exchange.\\n     * @param _tokenIdSupply an ID of a supply token (ERC-1155) which will be burned and deposits will be returned for\\n     * @param _burnedQty burned quantity that the deposits should be withdrawn for\\n     * @param _messageSender owner of the voucher set\\n     */\\n    function withdrawDepositsSe(\\n        uint256 _tokenIdSupply,\\n        uint256 _burnedQty,\\n        address payable _messageSender\\n    ) external;\\n\\n    /**\\n     * @notice Get the amount in escrow of an address\\n     * @param _account  The address of an account to query\\n     * @return          The balance in escrow\\n     */\\n    function getEscrowAmount(address _account) external view returns (uint256);\\n\\n    /**\\n     * @notice Update the amount in escrow of an address with the new value, based on VoucherSet/Voucher interaction\\n     * @param _account  The address of an account to query\\n     */\\n    function addEscrowAmount(address _account) external payable;\\n\\n    /**\\n     * @notice Update the amount in escrowTokens of an address with the new value, based on VoucherSet/Voucher interaction\\n     * @param _token  The address of a token to query\\n     * @param _account  The address of an account to query\\n     * @param _newAmount  New amount to be set\\n     */\\n    function addEscrowTokensAmount(\\n        address _token,\\n        address _account,\\n        uint256 _newAmount\\n    ) external;\\n\\n    /**\\n     * @notice Hook which will be triggered when a _tokenIdVoucher will be transferred. Escrow funds should be allocated to the new owner.\\n     * @param _from prev owner of the _tokenIdVoucher\\n     * @param _to next owner of the _tokenIdVoucher\\n     * @param _tokenIdVoucher _tokenIdVoucher that has been transferred\\n     */\\n    function onVoucherTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenIdVoucher\\n    ) external;\\n\\n    /**\\n     * @notice After the transfer happens the _tokenSupplyId should be updated in the promise. Escrow funds for the deposits (If in ETH) should be allocated to the new owner as well.\\n     * @param _from prev owner of the _tokenSupplyId\\n     * @param _to next owner of the _tokenSupplyId\\n     * @param _tokenSupplyId _tokenSupplyId for transfer\\n     * @param _value qty which has been transferred\\n     */\\n    function onVoucherSetTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenSupplyId,\\n        uint256 _value\\n    ) external;\\n\\n    /**\\n     * @notice Get the address of Voucher Kernel contract\\n     * @return Address of Voucher Kernel contract\\n     */\\n    function getVoucherKernelAddress() external view returns (address);\\n\\n    /**\\n     * @notice Get the address of Boson Router contract\\n     * @return Address of Boson Router contract\\n     */\\n    function getBosonRouterAddress() external view returns (address);\\n\\n    /**\\n     * @notice Get the address of the Vouchers contract, an ERC721 contract\\n     * @return Address of Vouchers contract\\n     */\\n    function getVoucherTokenAddress() external view returns (address);\\n\\n    /**\\n     * @notice Get the address of the VoucherSets token contract, an ERC155 contract\\n     * @return Address of VoucherSets contract\\n     */\\n    function getVoucherSetTokenAddress() external view returns (address);\\n\\n    /**\\n     * @notice Ensure whether or not contract has been set to disaster state\\n     * @return disasterState\\n     */\\n    function isDisasterStateSet() external view returns (bool);\\n\\n    /**\\n     * @notice Get the amount in escrow of an address\\n     * @param _token  The address of a token to query\\n     * @param _account  The address of an account to query\\n     * @return          The balance in escrow\\n     */\\n    function getEscrowTokensAmount(address _token, address _account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Set the address of the BR contract\\n     * @param _bosonRouterAddress   The address of the Cashier contract\\n     */\\n    function setBosonRouterAddress(address _bosonRouterAddress) external;\\n\\n    /**\\n     * @notice Set the address of the VoucherKernel contract\\n     * @param _voucherKernelAddress   The address of the VoucherKernel contract\\n     */\\n    function setVoucherKernelAddress(address _voucherKernelAddress) external;\\n\\n    /**\\n     * @notice Set the address of the Vouchers token contract, an ERC721 contract\\n     * @param _voucherTokenAddress   The address of the Vouchers token contract\\n     */\\n    function setVoucherTokenAddress(address _voucherTokenAddress) external;\\n\\n    /**\\n     * @notice Set the address of the Voucher Sets token contract, an ERC1155 contract\\n     * @param _voucherSetTokenAddress   The address of the Voucher Sets token contract\\n     */\\n    function setVoucherSetTokenAddress(address _voucherSetTokenAddress)\\n        external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/UsingHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity 0.7.6;\\n\\n// Those are the payment methods we are using throughout the system.\\n// Depending on how to user choose to interact with it's funds we store the method, so we could distribute its tokens afterwise\\nenum PaymentMethod {\\n    ETHETH,\\n    ETHTKN,\\n    TKNETH,\\n    TKNTKN\\n}\\n\\nenum VoucherState {FINAL, CANCEL_FAULT, COMPLAIN, EXPIRE, REFUND, REDEEM, COMMIT}\\n/*  Status of the voucher in 8 bits:\\n    [6:COMMITTED] [5:REDEEMED] [4:REFUNDED] [3:EXPIRED] [2:COMPLAINED] [1:CANCELORFAULT] [0:FINAL]\\n*/\\n\\nuint8 constant ONE = 1;\\n\\nstruct VoucherDetails {\\n    uint256 tokenIdSupply;\\n    uint256 tokenIdVoucher;\\n    address issuer;\\n    address holder;\\n    uint256 price;\\n    uint256 depositSe;\\n    uint256 depositBu;\\n    uint256 price2pool;\\n    uint256 deposit2pool;\\n    uint256 price2issuer;\\n    uint256 deposit2issuer;\\n    uint256 price2holder;\\n    uint256 deposit2holder;\\n    PaymentMethod paymentMethod;\\n    VoucherStatus currStatus;\\n}\\n\\nstruct VoucherStatus {\\n    uint8 status;\\n    bool isPaymentReleased;\\n    bool isDepositsReleased;\\n    uint256 complainPeriodStart;\\n    uint256 cancelFaultPeriodStart;\\n}\\n\\n/**\\n    * @notice Based on its lifecycle, voucher can have many different statuses. Checks whether a voucher is in Committed state.\\n    * @param _status current status of a voucher.\\n    */\\nfunction isStateCommitted(uint8 _status) pure returns (bool) {\\n    return _status == determineStatus(0, VoucherState.COMMIT);\\n}\\n\\n/**\\n    * @notice Based on its lifecycle, voucher can have many different statuses. Checks whether a voucher is in RedemptionSigned state.\\n    * @param _status current status of a voucher.\\n    */\\nfunction isStateRedemptionSigned(uint8 _status)\\n    pure\\n    returns (bool)\\n{\\n    return _status == determineStatus(determineStatus(0, VoucherState.COMMIT), VoucherState.REDEEM);\\n}\\n\\n/**\\n    * @notice Based on its lifecycle, voucher can have many different statuses. Checks whether a voucher is in Refunded state.\\n    * @param _status current status of a voucher.\\n    */\\nfunction isStateRefunded(uint8 _status) pure returns (bool) {\\n    return _status == determineStatus(determineStatus(0, VoucherState.COMMIT), VoucherState.REFUND);\\n}\\n\\n/**\\n    * @notice Based on its lifecycle, voucher can have many different statuses. Checks whether a voucher is in Expired state.\\n    * @param _status current status of a voucher.\\n    */\\nfunction isStateExpired(uint8 _status) pure returns (bool) {\\n    return _status == determineStatus(determineStatus(0, VoucherState.COMMIT), VoucherState.EXPIRE);\\n}\\n\\n/**\\n    * @notice Based on its lifecycle, voucher can have many different statuses. Checks the current status a voucher is at.\\n    * @param _status current status of a voucher.\\n    * @param _idx status to compare.\\n    */\\nfunction isStatus(uint8 _status, VoucherState _idx) pure returns (bool) {\\n    return (_status >> uint8(_idx)) & ONE == 1;\\n}\\n\\n/**\\n    * @notice Set voucher status.\\n    * @param _status previous status.\\n    * @param _changeIdx next status.\\n    */\\nfunction determineStatus(uint8 _status, VoucherState _changeIdx)\\n    pure\\n    returns (uint8)\\n{\\n    return _status | (ONE << uint8(_changeIdx));\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_cashierAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voucherKernelAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newCashier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogCashierSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_contractUri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogContractUriSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newVoucherKernel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogVoucherKernelSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCashierAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoucherKernelAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cashierAddress\",\"type\":\"address\"}],\"name\":\"setCashierAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractUri\",\"type\":\"string\"}],\"name\":\"setContractUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newUri\",\"type\":\"string\"}],\"name\":\"setUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voucherKernelAddress\",\"type\":\"address\"}],\"name\":\"setVoucherKernelAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VoucherSets","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000783a2e37c1c990435debbf3737d3e4e029f6aae7000000000000000000000000aa10d375b2b61e99bdba850550b71b26b1c45746000000000000000000000000000000000000000000000000000000000000003768747470733a2f2f6d657461646174612e626f736f6e70726f746f636f6c2e696f2f766f7563686572736574732f7b69647d2e6a736f6e000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}