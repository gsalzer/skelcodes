{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SaffronStakingV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interface/ISFIRewarder.sol\\\";\\n\\n/**\\n * @dev Contract for rewarding users with SFI for the Saffron liquidity mining program.\\n *\\n * Code based off Sushiswap's Masterchef contract with the addition of SFIRewarder.\\n * \\n * NOTE: Do not add pools with LP tokens that are deflationary or have reflection.\\n */\\ncontract SaffronStakingV2 is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    // Structure of user deposited amounts and their pending reward debt.\\n    struct UserInfo {\\n        // Amount of tokens added by the user.\\n        uint256 amount;\\n\\n        // Accounting mechanism. Prevents double-redeeming rewards in the same block.\\n        uint256 rewardDebt;\\n    }\\n\\n    // Structure holding information about each pool's LP token and allocation information.\\n    struct PoolInfo {\\n        // LP token contract. In the case of single-asset staking this is an ERC20.\\n        IERC20 lpToken;\\n\\n        // Allocation points to determine how many SFI will be distributed per block to this pool.\\n        uint256 allocPoint;\\n\\n        // The last block that accumulated rewards were calculated for this pool.\\n        uint256 lastRewardBlock; \\n\\n        // Accumulator storing the accumulated SFI earned per share of this pool.\\n        // Shares are user lpToken deposit amounts. This value is scaled up by 1e18.\\n        uint256 accSFIPerShare; \\n    }\\n\\n    // The amount of SFI to be rewarded per block to all pools.\\n    uint256 public sfiPerBlock;\\n\\n    // SFI rewards are cut off after a specified block. Can be updated by governance to extend/reduce reward time.\\n    uint256 public rewardCutoff; \\n\\n    // SFIRewarder contract holding the SFI tokens to be rewarded to users.\\n    ISFIRewarder public rewarder;\\n\\n    // List of pool info structs by pool id.\\n    PoolInfo[] public poolInfo;\\n\\n    // Mapping to store list of added LP tokens to prevent accidentally adding duplicate pools.\\n    mapping(address => bool) public lpTokenAdded; \\n\\n    // Mapping of mapping to store user informaton indexed by pool id and the user's address.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint;\\n\\n    constructor(address _rewarder, uint256 _sfiPerBlock, uint256 _rewardCutoff) {\\n        require(_rewarder != address(0), \\\"invalid rewarder\\\");\\n        require(_rewardCutoff >= block.number, \\\"invalid rewardCutoff\\\");\\n        rewarder = ISFIRewarder(_rewarder);\\n        sfiPerBlock = _sfiPerBlock;\\n        rewardCutoff = _rewardCutoff;\\n    }\\n\\n    /** \\n     * @dev Update the SFIRewarder. Only callable by the contract owner.\\n     * @param _rewarder The new SFIRewarder account.\\n     */\\n    function setRewarder(address _rewarder) external onlyOwner {\\n        require(_rewarder != address(0), \\\"invalid rewarder address\\\");\\n        rewarder = ISFIRewarder(_rewarder);\\n    }\\n\\n    /** \\n     * @dev Update the amount of SFI rewarded per block. Only callable by the contract owner.\\n     * @param _sfiPerBlock The new SFI per block amount to be distributed.\\n     */\\n    function setRewardPerBlock(uint256 _sfiPerBlock) external onlyOwner {\\n        massUpdatePools();\\n        sfiPerBlock = _sfiPerBlock;\\n        emit RewardPerBlockSet(sfiPerBlock);\\n    }\\n\\n    /** \\n     * @dev Update the reward end block. Only callable by the contract owner.\\n     * @param _rewardCutoff The new cut-off block to end SFI reward distribution.\\n     */\\n    function setRewardCutoff(uint256 _rewardCutoff) external onlyOwner {\\n        require(_rewardCutoff >= block.number, \\\"invalid rewardCutoff\\\");\\n        rewardCutoff = _rewardCutoff;\\n    }\\n\\n    /** \\n     * @dev Update the reward end block and sfiPerBlock atomically. Only callable by the contract owner.\\n     * @param _rewardCutoff The new cut-off block to end SFI reward distribution.\\n     * @param _sfiPerBlock The new SFI per block amount to be distributed.\\n     */\\n    function setRewardPerBlockAndRewardCutoff(uint256 _sfiPerBlock, uint256 _rewardCutoff) external onlyOwner {\\n        require(_rewardCutoff >= block.number, \\\"invalid rewardCutoff\\\");\\n        massUpdatePools();\\n        sfiPerBlock = _sfiPerBlock;\\n        rewardCutoff = _rewardCutoff;\\n    }\\n\\n    /** \\n     * @dev Return the number of pools in the poolInfo list.\\n     */\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    /**\\n     * @dev Add a new pool specifying its lp token and allocation points.\\n     * @param _allocPoint The allocationPoints for the pool. Determines SFI per block.\\n     * @param _lpToken Token address for the LP token in this pool.\\n     */\\n    function add(uint256 _allocPoint, address _lpToken) public onlyOwner {\\n        require(_lpToken != address(0), \\\"invalid _lpToken address\\\");\\n        require(!lpTokenAdded[_lpToken], \\\"lpToken already added\\\");\\n        require(block.number < rewardCutoff, \\\"can't add pool after cutoff\\\");\\n        require(_allocPoint > 0, \\\"can't add pool with 0 ap\\\");\\n        massUpdatePools();\\n        totalAllocPoint = totalAllocPoint + _allocPoint;\\n        lpTokenAdded[_lpToken] = true;\\n        poolInfo.push(PoolInfo({lpToken: IERC20(_lpToken), allocPoint: _allocPoint, lastRewardBlock: block.number, accSFIPerShare: 0}));\\n    }\\n\\n    /**\\n     * @dev Set the allocPoint of the specific pool with id _pid.\\n     * @param _pid The pool id that is to be set.\\n     * @param _allocPoint The new allocPoint for the pool.\\n     */\\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOwner {\\n        require(_pid < poolInfo.length, \\\"can't set non-existant pool\\\");\\n        require(_allocPoint > 0, \\\"can't set pool to 0 ap\\\");\\n        massUpdatePools();\\n        totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    /**\\n     * @dev Return the pending SFI rewards of a user for a specific pool id.\\n     *\\n     * Helper function for front-end web3 implementations.\\n     *\\n     * @param _pid Pool id to get SFI rewards report from.\\n     * @param _user User account to report SFI rewards from.\\n     * @return Pending SFI amount for the user indexed by pool id.\\n     */\\n    function pendingSFI(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo memory user = userInfo[_pid][_user];\\n        uint256 accSFIPerShare = pool.accSFIPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n\\n        uint256 latestRewardBlock = block.number >= rewardCutoff ? rewardCutoff : block.number;\\n\\n        if (latestRewardBlock > pool.lastRewardBlock && lpSupply != 0) {\\n            // Get number of blocks to multiply by\\n            uint256 multiplier = latestRewardBlock - pool.lastRewardBlock;\\n            // New SFI reward is the number of blocks multiplied by the SFI per block times multiplied by the pools share of the total\\n            uint256 sfiReward = multiplier * sfiPerBlock * pool.allocPoint;\\n            // Add delta/change in share of the new reward to the accumulated SFI per share for this pool's token\\n            accSFIPerShare = accSFIPerShare + (sfiReward * 1e18 / lpSupply / totalAllocPoint);\\n        }\\n        // Return the pending SFI amount for this user\\n        return (user.amount * accSFIPerShare / 1e18) - user.rewardDebt;\\n    }\\n\\n    /**\\n     * @dev Update reward variables for all pools. Be careful of gas spending! More than 100 pools is not recommended.\\n     */\\n    function massUpdatePools() public {\\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    /**\\n     * @dev Update accumulated SFI shares of the specified pool.\\n     * @param _pid The id of the pool to be updated.\\n     */\\n    function updatePool(uint256 _pid) public returns (PoolInfo memory) {\\n        // Retrieve pool info by the pool id\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        // Only reward SFI for blocks earlier than rewardCutoff block\\n        uint256 latestRewardBlock = block.number >= rewardCutoff ? rewardCutoff : block.number;\\n\\n        // Don't update twice in the same block\\n        if (latestRewardBlock > pool.lastRewardBlock) {\\n            // Get the amount of this pools token owned by the SaffronStaking contract\\n            uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n            // Calculate new rewards if amount is greater than 0\\n            if (lpSupply > 0) {\\n                // Get number of blocks to multiply by\\n                uint256 multiplier = latestRewardBlock - pool.lastRewardBlock;\\n                // New SFI reward is the number of blocks multiplied by the SFI per block times multiplied by the pools share of the total\\n                uint256 sfiReward = multiplier * sfiPerBlock * pool.allocPoint;\\n                // Add delta/change in share of the new reward to the accumulated SFI per share for this pool's token\\n                pool.accSFIPerShare = pool.accSFIPerShare + (sfiReward * 1e18 / lpSupply / totalAllocPoint);\\n            } \\n            // Set the last reward block to the most recent reward block\\n            pool.lastRewardBlock = latestRewardBlock;\\n        }\\n        // Return this pools updated info\\n        return poolInfo[_pid];\\n    }\\n\\n    /**\\n     * @dev Deposit the user's lp token into the the specified pool.\\n     * @param _pid Pool id where the user's asset is being deposited.\\n     * @param _amount Amount to deposit into the pool.\\n     */\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        // Get pool identified by pid\\n        PoolInfo memory pool = updatePool(_pid);\\n        // Get user in this pool identified by msg.sender address\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        // Calculate pending SFI earnings for this user in this pool\\n        uint256 pending = (user.amount * pool.accSFIPerShare / 1e18) - user.rewardDebt;\\n\\n        // Effects\\n        // Add the new deposit amount to the pool user's amount total\\n        user.amount = user.amount + _amount;\\n        // Update the pool user's reward debt to this new amount\\n        user.rewardDebt = user.amount * pool.accSFIPerShare / 1e18;\\n\\n        // Interactions\\n        // Transfer pending SFI rewards to the user\\n        safeSFITransfer(msg.sender, pending);\\n        // Transfer the users tokens to this contract (deposit them in this contract)\\n        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n\\n        emit TokensDeposited(msg.sender, _pid, _amount, pool.lpToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @dev Withdraw the user's lp token from the specified pool.\\n     * @param _pid Pool id from which the user's asset is being withdrawn.\\n     * @param _amount Amount to withdraw from the pool.\\n     */\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        // Get pool identified by pid\\n        PoolInfo memory pool = updatePool(_pid);\\n        // Get user in this pool identified by msg.sender address\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, \\\"can't withdraw more than user balance\\\");\\n        // Calculate pending SFI earnings for this user in this pool\\n        uint256 pending = (user.amount * pool.accSFIPerShare / 1e18) - user.rewardDebt;\\n\\n        // Effects\\n        // Subtract the new withdraw amount from the pool user's amount total\\n        user.amount = user.amount - _amount;\\n        // Update the pool user's reward debt to this new amount\\n        user.rewardDebt = user.amount * pool.accSFIPerShare / 1e18;\\n\\n        // Interactions\\n        // Transfer pending SFI rewards to the user\\n        safeSFITransfer(msg.sender, pending);\\n        // Transfer contract's tokens amount to this user (withdraw them from this contract)\\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n\\n        emit TokensWithdrawn(msg.sender, _pid, _amount, pool.lpToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @dev Emergency function to withdraw a user's asset in a specified pool.\\n     * @param _pid Pool id from which the user's asset is being withdrawn.\\n     */\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 amount = user.amount;\\n\\n        // Effects\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        // Interactions\\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\\n\\n        emit TokensEmergencyWithdrawn(msg.sender, _pid, amount, pool.lpToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @dev Transfer SFI from the SFIRewarder contract to the user's account.\\n     * @param to Account to transfer SFI to from the SFIRewarder contract.\\n     * @param amount Amount of SFI to transfer from the SFIRewarder to the user's account.\\n     */\\n    function safeSFITransfer(address to, uint256 amount) internal {\\n        if (amount > 0) rewarder.rewardUser(to, amount);\\n    }\\n\\n    /**\\n     * @dev Emitted when `amount` tokens are deposited by `user` into pool id `pid`.\\n     */\\n    event TokensDeposited(address indexed user, uint256 indexed pid, uint256 amount, uint256 balance);\\n\\n    /**\\n     * @dev Emitted when `amount` tokens are withdrawn by `user` from pool id `pid`.\\n     */\\n    event TokensWithdrawn(address indexed user, uint256 indexed pid, uint256 amount, uint256 balance);\\n\\n    /**\\n     * @dev Emitted when `amount` tokens are emergency withdrawn by `user` from pool id `pid`.\\n     */\\n    event TokensEmergencyWithdrawn(address indexed user, uint256 indexed pid, uint256 amount, uint256 balance);\\n\\n    /**\\n     * @dev Emitted when `sfiPerBlock` is set by governance.\\n     */\\n    event RewardPerBlockSet(uint256 newSfiPerBlock);\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ISFIRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Interface of the SFIRewarder contract for SaffronStakingV2 to implement and call.\\n */\\ninterface ISFIRewarder {\\n    /**\\n     * @dev Rewards an `amount` of SFI to account `to`.\\n     */\\n    function rewardUser(address to, uint256 amount) external;\\n    \\n    /**\\n     * @dev Emitted when `amount` SFI are rewarded to account `to`.\\n     *\\n     * Note that `amount` may be zero.\\n     */\\n    event UserRewarded(address indexed to, uint256 amount);\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sfiPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardCutoff\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSfiPerBlock\",\"type\":\"uint256\"}],\"name\":\"RewardPerBlockSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"TokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"TokensEmergencyWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpTokenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSFI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSFIPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCutoff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewarder\",\"outputs\":[{\"internalType\":\"contract ISFIRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardCutoff\",\"type\":\"uint256\"}],\"name\":\"setRewardCutoff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sfiPerBlock\",\"type\":\"uint256\"}],\"name\":\"setRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sfiPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardCutoff\",\"type\":\"uint256\"}],\"name\":\"setRewardPerBlockAndRewardCutoff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"setRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sfiPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSFIPerShare\",\"type\":\"uint256\"}],\"internalType\":\"struct SaffronStakingV2.PoolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SaffronStakingV2","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006eff7b3fa5060cd46adcc0ad84a239ec1ea82b7a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eafc40","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}