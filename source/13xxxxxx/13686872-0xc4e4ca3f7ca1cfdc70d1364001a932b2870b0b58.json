{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/tokens/converter/Converter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT AND AGPL-3.0-or-later\\r\\n\\r\\npragma solidity =0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\n\\r\\nimport \\\"../../shared/ProtocolConstants.sol\\\";\\r\\n\\r\\nimport \\\"../../interfaces/tokens/converter/IConverter.sol\\\";\\r\\nimport \\\"../../interfaces/tokens/vesting/ILinearVesting.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IConverter} interface.\\r\\n *\\r\\n * A simple converter contract that allows users to convert\\r\\n * their Vether tokens by \\\"burning\\\" them (See {convert}) to\\r\\n * acquire their equivalent Vader tokens based on the constant\\r\\n * {VADER_VETHER_CONVERSION_RATE}.\\r\\n *\\r\\n * The contract assumes that it has been sufficiently funded with\\r\\n * Vader tokens and will fail to execute trades if it has not been\\r\\n * done so yet.\\r\\n */\\r\\ncontract Converter is IConverter, ProtocolConstants, Ownable {\\r\\n    /* ========== LIBRARIES ========== */\\r\\n\\r\\n    // Using MerkleProof for validating claims\\r\\n    using MerkleProof for bytes32[];\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    // The VETHER token\\r\\n    IERC20 public immutable vether;\\r\\n\\r\\n    // The VADER token\\r\\n    IERC20 public immutable vader;\\r\\n\\r\\n    // The VADER vesting contract\\r\\n    ILinearVesting public vesting;\\r\\n\\r\\n    // The merkle proof root for validating claims\\r\\n    bytes32 public immutable root;\\r\\n\\r\\n    // Unique deployment salt\\r\\n    uint256 public immutable salt;\\r\\n\\r\\n    // Signals whether a particular leaf has been claimed of the merkle proof\\r\\n    mapping(bytes32 => bool) public claimed;\\r\\n\\r\\n    /* ========== CONSTRUCTOR ========== */\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract's {vether} and {vader} addresses.\\r\\n     *\\r\\n     * Performs rudimentary checks to ensure that the variables haven't\\r\\n     * been declared incorrectly.\\r\\n     */\\r\\n    constructor(\\r\\n        IERC20 _vether,\\r\\n        IERC20 _vader,\\r\\n        bytes32 _root,\\r\\n        uint256 _salt\\r\\n    ) {\\r\\n        require(\\r\\n            _vether != IERC20(_ZERO_ADDRESS) && _vader != IERC20(_ZERO_ADDRESS),\\r\\n            \\\"Converter::constructor: Misconfiguration\\\"\\r\\n        );\\r\\n\\r\\n        vether = _vether;\\r\\n        vader = _vader;\\r\\n\\r\\n        root = _root;\\r\\n        salt = _salt;\\r\\n    }\\r\\n\\r\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\r\\n\\r\\n    /*\\r\\n     * @dev Sets address of vesting contract.\\r\\n     *\\r\\n     * The LinearVesting and Converter contracts are dependent upon\\r\\n     * each other, hence this setter is introduced.\\r\\n     *\\r\\n     * Also approves Vesting to spend Vader tokens on its behalf.\\r\\n     *\\r\\n     **/\\r\\n    function setVesting(ILinearVesting _vesting) external onlyOwner {\\r\\n        require(\\r\\n            vesting == ILinearVesting(_ZERO_ADDRESS),\\r\\n            \\\"Converter::setVesting: Vesting is already set\\\"\\r\\n        );\\r\\n        require(\\r\\n            _vesting != ILinearVesting(_ZERO_ADDRESS),\\r\\n            \\\"Converter::setVesting: Cannot Set Zero Vesting Address\\\"\\r\\n        );\\r\\n        vader.approve(address(_vesting), type(uint256).max);\\r\\n        vesting = _vesting;\\r\\n    }\\r\\n\\r\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @dev Allows a user to convert their Vether to Vader.\\r\\n     *\\r\\n     * Emits a {Conversion} event indicating the amount of Vether the user\\r\\n     * \\\"burned\\\" and the amount of Vader that they acquired.\\r\\n     *\\r\\n     * Here, \\\"burned\\\" refers to the action of transferring them to an irrecoverable\\r\\n     * address, the {BURN} address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller has approved the contract for the necessary amount via Vether\\r\\n     * - the amount specified is non-zero\\r\\n     * - the contract has been supplied with the necessary Vader amount to fulfill the trade\\r\\n     */\\r\\n    function convert(bytes32[] calldata proof, uint256 amount, uint256 minVader)\\r\\n        external\\r\\n        override\\r\\n        returns (uint256 vaderReceived)\\r\\n    {\\r\\n        require(\\r\\n            amount != 0,\\r\\n            \\\"Converter::convert: Non-Zero Conversion Amount Required\\\"\\r\\n        );\\r\\n\\r\\n        ILinearVesting _vesting = vesting;\\r\\n\\r\\n        require(\\r\\n            _vesting != ILinearVesting(_ZERO_ADDRESS),\\r\\n            \\\"Converter::convert: Vesting is not set\\\"\\r\\n        );\\r\\n\\r\\n        bytes32 leaf = keccak256(\\r\\n            abi.encodePacked(msg.sender, amount, salt, getChainId())\\r\\n        );\\r\\n        require(\\r\\n            !claimed[leaf] && proof.verify(root, leaf),\\r\\n            \\\"Converter::convert: Incorrect Proof Provided\\\"\\r\\n        );\\r\\n        claimed[leaf] = true;\\r\\n\\r\\n        uint256 allowance = vether.allowance(msg.sender, address(this));\\r\\n\\r\\n        amount = amount > allowance ? allowance : amount;\\r\\n\\r\\n        // NOTE: FoT is ignored as units are meant to be burned anyway\\r\\n        vether.transferFrom(msg.sender, _BURN, amount);\\r\\n\\r\\n        vaderReceived = amount * _VADER_VETHER_CONVERSION_RATE;\\r\\n        require(vaderReceived >= minVader, \\\"Converter::convert: Vader < min\\\");\\r\\n\\r\\n        emit Conversion(msg.sender, amount, vaderReceived);\\r\\n\\r\\n        uint256 half = vaderReceived / 2;\\r\\n        vader.transfer(msg.sender, half);\\r\\n        _vesting.vestFor(msg.sender, vaderReceived - half);\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL FUNCTIONS ========== */\\r\\n    /*\\r\\n     * @dev Returns the {chainId} of current network.\\r\\n     **/\\r\\n    function getChainId() internal view returns (uint256 chainId) {\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/shared/ProtocolConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT AND AGPL-3.0-or-later\\r\\npragma solidity =0.8.9;\\r\\n\\r\\nabstract contract ProtocolConstants {\\r\\n    /* ========== GENERAL ========== */\\r\\n\\r\\n    // The zero address, utility\\r\\n    address internal constant _ZERO_ADDRESS = address(0);\\r\\n\\r\\n    // One year, utility\\r\\n    uint256 internal constant _ONE_YEAR = 365 days;\\r\\n\\r\\n    // Basis Points\\r\\n    uint256 internal constant _MAX_BASIS_POINTS = 100_00;\\r\\n\\r\\n    /* ========== VADER TOKEN ========== */\\r\\n\\r\\n    // Max VADER supply\\r\\n    uint256 internal constant _INITIAL_VADER_SUPPLY = 25_000_000_000 * 1 ether;\\r\\n\\r\\n    // Allocation for VETH holders\\r\\n    uint256 internal constant _VETH_ALLOCATION = 7_500_000_000 * 1 ether;\\r\\n\\r\\n    // Team allocation vested over {VESTING_DURATION} years\\r\\n    uint256 internal constant _TEAM_ALLOCATION = 2_500_000_000 * 1 ether;\\r\\n\\r\\n    // Ecosystem growth fund unlocked for partnerships & USDV provision\\r\\n    uint256 internal constant _ECOSYSTEM_GROWTH = 2_500_000_000 * 1 ether;\\r\\n\\r\\n    // Total grant tokens\\r\\n    uint256 internal constant _GRANT_ALLOCATION = 12_500_000_000 * 1 ether;\\r\\n\\r\\n    // Emission Era\\r\\n    uint256 internal constant _EMISSION_ERA = 24 hours;\\r\\n\\r\\n    // Initial Emission Curve, 5\\r\\n    uint256 internal constant _INITIAL_EMISSION_CURVE = 5;\\r\\n\\r\\n    // Fee Basis Points\\r\\n    uint256 internal constant _MAX_FEE_BASIS_POINTS = 1_00;\\r\\n\\r\\n    /* ========== VESTING ========== */\\r\\n\\r\\n    // Vesting Duration\\r\\n    uint256 internal constant _VESTING_DURATION = 2 * _ONE_YEAR;\\r\\n\\r\\n    /* ========== CONVERTER ========== */\\r\\n\\r\\n    // Vader -> Vether Conversion Rate (1000:1)\\r\\n    uint256 internal constant _VADER_VETHER_CONVERSION_RATE = 10_000;\\r\\n\\r\\n    // Burn Address\\r\\n    address internal constant _BURN =\\r\\n        0xdeaDDeADDEaDdeaDdEAddEADDEAdDeadDEADDEaD;\\r\\n\\r\\n    /* ========== SWAP QUEUE ========== */\\r\\n\\r\\n    // A minimum of 10 swaps will be executed per block\\r\\n    uint256 internal constant _MIN_SWAPS_EXECUTED = 10;\\r\\n\\r\\n    // Expressed in basis points (50%)\\r\\n    uint256 internal constant _DEFAULT_SWAPS_EXECUTED = 50_00;\\r\\n\\r\\n    // The queue size of each block is 100 units\\r\\n    uint256 internal constant _QUEUE_SIZE = 100;\\r\\n\\r\\n    /* ========== GAS QUEUE ========== */\\r\\n\\r\\n    // Address of Chainlink Fast Gas Price Oracle\\r\\n    address internal constant _FAST_GAS_ORACLE =\\r\\n        0x169E633A2D1E6c10dD91238Ba11c4A708dfEF37C;\\r\\n\\r\\n    /* ========== VADER RESERVE ========== */\\r\\n\\r\\n    // Minimum delay between grants\\r\\n    uint256 internal constant _GRANT_DELAY = 30 days;\\r\\n\\r\\n    // Maximum grant size divisor\\r\\n    uint256 internal constant _MAX_GRANT_BASIS_POINTS = 10_00;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/tokens/vesting/ILinearVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT AND AGPL-3.0-or-later\\r\\npragma solidity =0.8.9;\\r\\n\\r\\ninterface ILinearVesting {\\r\\n    /* ========== STRUCTS ========== */\\r\\n\\r\\n    // Struct of a vesting member, tight-packed to 256-bits\\r\\n    struct Vester {\\r\\n        uint192 amount;\\r\\n        uint64 lastClaim;\\r\\n        uint128 start;\\r\\n        uint128 end;\\r\\n    }\\r\\n\\r\\n    /* ========== FUNCTIONS ========== */\\r\\n\\r\\n    function getClaim(address _vester)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 vestedAmount);\\r\\n\\r\\n    function claim() external returns (uint256 vestedAmount);\\r\\n\\r\\n    //    function claimConverted() external returns (uint256 vestedAmount);\\r\\n\\r\\n    function begin(address[] calldata vesters, uint192[] calldata amounts)\\r\\n        external;\\r\\n\\r\\n    function vestFor(address user, uint256 amount) external;\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event VestingInitialized(uint256 duration);\\r\\n\\r\\n    event VestingCreated(address user, uint256 amount);\\r\\n\\r\\n    event Vested(address indexed from, uint256 amount);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/tokens/converter/IConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT AND AGPL-3.0-or-later\\r\\npragma solidity =0.8.9;\\r\\n\\r\\ninterface IConverter {\\r\\n    /* ========== FUNCTIONS ========== */\\r\\n\\r\\n    function convert(bytes32[] calldata proof, uint256 amount, uint256 minVader)\\r\\n        external\\r\\n        returns (uint256 vaderReceived);\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event Conversion(\\r\\n        address indexed user,\\r\\n        uint256 vetherAmount,\\r\\n        uint256 vaderAmount\\r\\n    );\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_vether\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_vader\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vetherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaderAmount\",\"type\":\"uint256\"}],\"name\":\"Conversion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minVader\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vaderReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILinearVesting\",\"name\":\"_vesting\",\"type\":\"address\"}],\"name\":\"setVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vader\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vesting\",\"outputs\":[{\"internalType\":\"contract ILinearVesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vether\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Converter","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004ba6ddd7b89ed838fed25d208d4f644106e342790000000000000000000000000595af52e4022aebd794de267fc20c12c50c08f893bc4275f0e850574c848d04f1a8edbb63a1d961524541e618d28f31b2c6684d0000000000000000000000000000000000000000000000000000000000d07905","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}