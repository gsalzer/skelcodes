{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/OKLGRaffle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC721.sol';\\nimport './OKLGProduct.sol';\\n\\n/**\\n * @title OKLGRaffle\\n * @dev This is the main contract that supports lotteries and raffles.\\n */\\ncontract OKLGRaffle is OKLGProduct {\\n  struct Raffle {\\n    address owner;\\n    bool isNft; // rewardToken is either ERC20 or ERC721\\n    address rewardToken;\\n    uint256 rewardAmountOrTokenId;\\n    uint256 start; // timestamp (uint256) of start time (0 if start when raffle is created)\\n    uint256 end; // timestamp (uint256) of end time (0 if can be entered until owner draws)\\n    address entryToken; // ERC20 token requiring user to send to enter\\n    uint256 entryFee; // ERC20 num tokens user must send to enter, or 0 if no entry fee\\n    uint256 entryFeesCollected; // amount of fees collected by entries and paid to raffle/lottery owner\\n    uint256 maxEntriesPerAddress; // 0 means unlimited entries\\n    address[] entries;\\n    address winner;\\n    bool isComplete;\\n    bool isClosed;\\n  }\\n\\n  uint8 public entryFeePercentageCharge = 2;\\n\\n  mapping(bytes32 => Raffle) public raffles;\\n  bytes32[] public raffleIds;\\n  mapping(bytes32 => mapping(address => uint256)) public entriesIndexed;\\n\\n  event CreateRaffle(address indexed creator, bytes32 id);\\n  event EnterRaffle(\\n    bytes32 indexed id,\\n    address raffler,\\n    uint256 numberOfEntries\\n  );\\n  event DrawWinner(bytes32 indexed id, address winner, uint256 amount);\\n  event CloseRaffle(bytes32 indexed id);\\n\\n  constructor(address _tokenAddress, address _spendAddress)\\n    OKLGProduct(uint8(4), _tokenAddress, _spendAddress)\\n  {}\\n\\n  function getAllRaffles() external view returns (bytes32[] memory) {\\n    return raffleIds;\\n  }\\n\\n  function getRaffleEntries(bytes32 _id)\\n    external\\n    view\\n    returns (address[] memory)\\n  {\\n    return raffles[_id].entries;\\n  }\\n\\n  function createRaffle(\\n    address _rewardTokenAddress,\\n    uint256 _rewardAmountOrTokenId,\\n    bool _isNft,\\n    uint256 _start,\\n    uint256 _end,\\n    address _entryToken,\\n    uint256 _entryFee,\\n    uint256 _maxEntriesPerAddress\\n  ) external payable {\\n    _validateDates(_start, _end);\\n    _payForService(0);\\n\\n    if (_isNft) {\\n      IERC721 _rewardToken = IERC721(_rewardTokenAddress);\\n      _rewardToken.transferFrom(\\n        msg.sender,\\n        address(this),\\n        _rewardAmountOrTokenId\\n      );\\n    } else {\\n      IERC20 _rewardToken = IERC20(_rewardTokenAddress);\\n      _rewardToken.transferFrom(\\n        msg.sender,\\n        address(this),\\n        _rewardAmountOrTokenId\\n      );\\n    }\\n\\n    bytes32 _id = sha256(abi.encodePacked(msg.sender, block.number));\\n    address[] memory _entries;\\n    raffles[_id] = Raffle({\\n      owner: msg.sender,\\n      isNft: _isNft,\\n      rewardToken: _rewardTokenAddress,\\n      rewardAmountOrTokenId: _rewardAmountOrTokenId,\\n      start: _start,\\n      end: _end,\\n      entryToken: _entryToken,\\n      entryFee: _entryFee,\\n      entryFeesCollected: 0,\\n      maxEntriesPerAddress: _maxEntriesPerAddress,\\n      entries: _entries,\\n      winner: address(0),\\n      isComplete: false,\\n      isClosed: false\\n    });\\n    raffleIds.push(_id);\\n    emit CreateRaffle(msg.sender, _id);\\n  }\\n\\n  function drawWinner(bytes32 _id) external {\\n    Raffle storage _raffle = raffles[_id];\\n    require(\\n      _raffle.end == 0 || block.timestamp > _raffle.end,\\n      'Raffle entry period is not over yet.'\\n    );\\n    require(\\n      !_raffle.isComplete,\\n      'Raffle has already been drawn and completed.'\\n    );\\n\\n    if (_raffle.entryFeesCollected > 0) {\\n      IERC20 _entryToken = IERC20(_raffle.entryToken);\\n      uint256 _feesToSendOwner = _raffle.entryFeesCollected;\\n      if (entryFeePercentageCharge > 0) {\\n        uint256 _feeChargeAmount = (_feesToSendOwner *\\n          entryFeePercentageCharge) / 100;\\n        _entryToken.transfer(owner(), _feeChargeAmount);\\n        _feesToSendOwner -= _feeChargeAmount;\\n      }\\n      _entryToken.transfer(_raffle.owner, _feesToSendOwner);\\n    }\\n\\n    uint256 _winnerIdx = _random(_raffle.entries.length) %\\n      _raffle.entries.length;\\n    address _winner = _raffle.entries[_winnerIdx];\\n    _raffle.winner = _winner;\\n\\n    if (_raffle.isNft) {\\n      IERC721 _rewardToken = IERC721(_raffle.rewardToken);\\n      _rewardToken.transferFrom(\\n        address(this),\\n        _winner,\\n        _raffle.rewardAmountOrTokenId\\n      );\\n    } else {\\n      IERC20 _rewardToken = IERC20(_raffle.rewardToken);\\n      _rewardToken.transfer(_winner, _raffle.rewardAmountOrTokenId);\\n    }\\n\\n    _raffle.isComplete = true;\\n    emit DrawWinner(_id, _winner, _raffle.rewardAmountOrTokenId);\\n  }\\n\\n  function closeRaffleAndRefund(bytes32 _id) external {\\n    Raffle storage _raffle = raffles[_id];\\n    require(\\n      _raffle.owner == msg.sender,\\n      'Must be the raffle owner to draw winner.'\\n    );\\n    require(\\n      !_raffle.isComplete,\\n      'Raffle cannot be closed if it is completed already.'\\n    );\\n\\n    IERC20 _entryToken = IERC20(_raffle.entryToken);\\n    for (uint256 _i = 0; _i < _raffle.entries.length; _i++) {\\n      address _user = _raffle.entries[_i];\\n      _entryToken.transfer(_user, _raffle.entryFee);\\n    }\\n\\n    if (_raffle.isNft) {\\n      IERC721 _rewardToken = IERC721(_raffle.rewardToken);\\n      _rewardToken.transferFrom(\\n        address(this),\\n        msg.sender,\\n        _raffle.rewardAmountOrTokenId\\n      );\\n    } else {\\n      IERC20 _rewardToken = IERC20(_raffle.rewardToken);\\n      _rewardToken.transfer(msg.sender, _raffle.rewardAmountOrTokenId);\\n    }\\n\\n    _raffle.isComplete = true;\\n    _raffle.isClosed = true;\\n    emit CloseRaffle(_id);\\n  }\\n\\n  function enterRaffle(bytes32 _id, uint256 _numEntries) external {\\n    Raffle storage _raffle = raffles[_id];\\n    require(_raffle.owner != address(0), 'We do not recognize this raffle.');\\n    require(\\n      _raffle.start <= block.timestamp,\\n      'It must be after the start time to enter the raffle.'\\n    );\\n    require(\\n      _raffle.end == 0 || _raffle.end >= block.timestamp,\\n      'It must be before the end time to enter the raffle.'\\n    );\\n    require(\\n      _numEntries > 0 &&\\n        (_raffle.maxEntriesPerAddress == 0 ||\\n          entriesIndexed[_id][msg.sender] + _numEntries <=\\n          _raffle.maxEntriesPerAddress),\\n      'You have entered the maximum number of times you are allowed.'\\n    );\\n    require(!_raffle.isComplete, 'Raffle cannot be complete to be entered.');\\n\\n    if (_raffle.entryFee > 0) {\\n      IERC20 _entryToken = IERC20(_raffle.entryToken);\\n      _entryToken.transferFrom(\\n        msg.sender,\\n        address(this),\\n        _raffle.entryFee * _numEntries\\n      );\\n      _raffle.entryFeesCollected += _raffle.entryFee * _numEntries;\\n    }\\n\\n    for (uint256 _i = 0; _i < _numEntries; _i++) {\\n      _raffle.entries.push(msg.sender);\\n    }\\n    entriesIndexed[_id][msg.sender] += _numEntries;\\n    emit EnterRaffle(_id, msg.sender, _numEntries);\\n  }\\n\\n  function changeRaffleOwner(bytes32 _id, address _newOwner) external {\\n    Raffle storage _raffle = raffles[_id];\\n    require(\\n      _raffle.owner == msg.sender,\\n      'Must be the raffle owner to change owner.'\\n    );\\n    require(\\n      !_raffle.isComplete,\\n      'Raffle has already been drawn and completed.'\\n    );\\n\\n    _raffle.owner = _newOwner;\\n  }\\n\\n  function changeEndDate(bytes32 _id, uint256 _newEnd) external {\\n    Raffle storage _raffle = raffles[_id];\\n    require(\\n      _raffle.owner == msg.sender,\\n      'Must be the raffle owner to change owner.'\\n    );\\n    require(\\n      !_raffle.isComplete,\\n      'Raffle has already been drawn and completed.'\\n    );\\n\\n    _raffle.end = _newEnd;\\n  }\\n\\n  function changeEntryFeePercentageCharge(uint8 _newPercentage)\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      _newPercentage >= 0 && _newPercentage < 100,\\n      'Should be between 0 and 100.'\\n    );\\n    entryFeePercentageCharge = _newPercentage;\\n  }\\n\\n  function _validateDates(uint256 _start, uint256 _end) private view {\\n    require(\\n      _start == 0 || _start >= block.timestamp,\\n      'start time should be 0 or after the current time'\\n    );\\n    require(\\n      _end == 0 || _end > block.timestamp,\\n      'end time should be 0 or after the current time'\\n    );\\n    if (_start > 0) {\\n      if (_end > 0) {\\n        require(_start < _end, 'start time must be before end time');\\n      }\\n    }\\n  }\\n\\n  function _random(uint256 _entries) private view returns (uint256) {\\n    return\\n      uint256(\\n        keccak256(abi.encodePacked(block.difficulty, block.timestamp, _entries))\\n      );\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"contracts/OKLGProduct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport './interfaces/IOKLGSpend.sol';\\nimport './OKLGWithdrawable.sol';\\n\\n/**\\n * @title OKLGProduct\\n * @dev Contract that every product developed in the OKLG ecosystem should implement\\n */\\ncontract OKLGProduct is OKLGWithdrawable {\\n  IERC20 private _token; // OKLG\\n  IOKLGSpend private _spend;\\n\\n  uint8 public productID;\\n\\n  constructor(\\n    uint8 _productID,\\n    address _tokenAddy,\\n    address _spendAddy\\n  ) {\\n    productID = _productID;\\n    _token = IERC20(_tokenAddy);\\n    _spend = IOKLGSpend(_spendAddy);\\n  }\\n\\n  function setTokenAddy(address _tokenAddy) external onlyOwner {\\n    _token = IERC20(_tokenAddy);\\n  }\\n\\n  function setSpendAddy(address _spendAddy) external onlyOwner {\\n    _spend = IOKLGSpend(_spendAddy);\\n  }\\n\\n  function setProductID(uint8 _newId) external onlyOwner {\\n    productID = _newId;\\n  }\\n\\n  function getTokenAddress() public view returns (address) {\\n    return address(_token);\\n  }\\n\\n  function getSpendAddress() public view returns (address) {\\n    return address(_spend);\\n  }\\n\\n  function _payForService(uint256 _weiToRemoveFromSpend) internal {\\n    _spend.spendOnProduct{ value: msg.value - _weiToRemoveFromSpend }(\\n      msg.sender,\\n      productID\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOKLGSpend.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title IOKLGSpend\\n * @dev Logic for spending OKLG on products in the product ecosystem.\\n */\\ninterface IOKLGSpend {\\n  function spendOnProduct(address _payor, uint8 _product) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/OKLGWithdrawable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\n\\n/**\\n * @title OKLGWithdrawable\\n * @dev Supports being able to get tokens or ETH out of a contract with ease\\n */\\ncontract OKLGWithdrawable is Ownable {\\n  function withdrawTokens(address _tokenAddy, uint256 _amount)\\n    external\\n    onlyOwner\\n  {\\n    IERC20 _token = IERC20(_tokenAddy);\\n    _amount = _amount > 0 ? _amount : _token.balanceOf(address(this));\\n    require(_amount > 0, 'make sure there is a balance available to withdraw');\\n    _token.transfer(owner(), _amount);\\n  }\\n\\n  function withdrawETH() external onlyOwner {\\n    payable(owner()).call{ value: address(this).balance }('');\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spendAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"CloseRaffle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"CreateRaffle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DrawWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"raffler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfEntries\",\"type\":\"uint256\"}],\"name\":\"EnterRaffle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_newEnd\",\"type\":\"uint256\"}],\"name\":\"changeEndDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newPercentage\",\"type\":\"uint8\"}],\"name\":\"changeEntryFeePercentageCharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeRaffleOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"closeRaffleAndRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmountOrTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isNft\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_entryToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_entryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxEntriesPerAddress\",\"type\":\"uint256\"}],\"name\":\"createRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"drawWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_numEntries\",\"type\":\"uint256\"}],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"entriesIndexed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryFeePercentageCharge\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRaffles\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getRaffleEntries\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSpendAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffleIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"raffles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNft\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmountOrTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"entryToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryFeesCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxEntriesPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isComplete\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newId\",\"type\":\"uint8\"}],\"name\":\"setProductID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spendAddy\",\"type\":\"address\"}],\"name\":\"setSpendAddy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddy\",\"type\":\"address\"}],\"name\":\"setTokenAddy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OKLGRaffle","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005dbb9f64cd96e2dbbca58d14863d615b67b42f2e0000000000000000000000005bde378e0a0cebc941b03a579da0088dc1616faf","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}