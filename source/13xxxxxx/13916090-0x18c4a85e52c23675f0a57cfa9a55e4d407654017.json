{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ChainFaces2Renderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPLv3\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract ChainFaces2Renderer {\\r\\n\\r\\n    using Strings for uint256;\\r\\n\\r\\n    address public constant happyFacePlace = 0x7039D65E346FDEEBbc72514D718C88699c74ba4b;\\r\\n\\r\\n    // Rendering constants\\r\\n    string[18] public leftFaceArray = [unicode\\\"·Éö\\\", unicode\\\"·ï¶\\\", unicode\\\"(‡∏á\\\", unicode\\\"êêã\\\", unicode\\\"·ñ≥\\\", unicode\\\"∆∏\\\", unicode\\\"·õ©\\\", unicode\\\"‚¶É\\\", unicode\\\"{\\\", unicode\\\"‚¶ó\\\", unicode\\\"‚å©\\\", unicode\\\"‚ßº\\\", unicode\\\"|\\\", unicode\\\"„Äò\\\", unicode\\\"„Äö\\\", unicode\\\"„Äê\\\", unicode\\\"[\\\", unicode\\\"‚ù™\\\"];\\r\\n    string[20] public leftEyeArray = [unicode\\\"‚öà\\\", unicode\\\"‚öô\\\", unicode\\\"‚äó\\\", unicode\\\"‚ãó\\\", unicode\\\" Õ°¬∞\\\", unicode\\\"‚óà\\\", unicode\\\"‚ó¨\\\", unicode\\\"‚âª\\\", unicode\\\"·õ´\\\", unicode\\\"‚®ï\\\", unicode\\\"‚òÖ\\\", unicode\\\"œæ\\\", unicode\\\"·óí\\\", unicode\\\"‚ó†\\\", unicode\\\"‚ä°\\\", unicode\\\"‚äô\\\", unicode\\\"‚ñ∏\\\", unicode\\\"Àò\\\", unicode\\\"‚¶ø\\\", unicode\\\"‚óè\\\"];\\r\\n    string[22] public mouthArray = [unicode\\\"‡∑¥\\\", unicode\\\"‚à™\\\", unicode\\\"·®è\\\", unicode\\\"·éî\\\", unicode\\\"·éë\\\", unicode\\\"‚ãè\\\", unicode\\\"‚öá\\\", unicode\\\"_\\\", unicode\\\"€∑\\\", unicode\\\"‚ñæ\\\", unicode\\\"·®é\\\", unicode\\\" ñ\\\", unicode\\\"‹´\\\", unicode\\\"‡ªí\\\", unicode\\\"êëí\\\", unicode\\\"‚å¥\\\", unicode\\\"‚Äø\\\", unicode\\\"ê†ë\\\", unicode\\\"‚åí\\\", unicode\\\"‚ó°\\\", unicode\\\"‚•ø\\\", unicode\\\"‚©ä\\\"];\\r\\n    string[20] public rightEyeArray = [unicode\\\"‚öà\\\", unicode\\\"‚öô\\\", unicode\\\"‚äó\\\", unicode\\\"‚ãñ\\\", unicode\\\" Õ°¬∞\\\", unicode\\\"‚óà\\\", unicode\\\"‚ó¨\\\", unicode\\\"‚â∫\\\", unicode\\\"·õ´\\\", unicode\\\"‚®ï\\\", unicode\\\"‚òÖ\\\", unicode\\\"œø\\\", unicode\\\"·óï\\\", unicode\\\"‚ó†\\\", unicode\\\"‚ä°\\\", unicode\\\"‚äô\\\", unicode\\\"‚óÇ\\\", unicode\\\"Àò\\\", unicode\\\"‚¶ø\\\", unicode\\\"‚óè\\\"];\\r\\n    string[18] public rightFaceArray = [unicode\\\"·Éö\\\", unicode\\\"·ï§\\\", unicode\\\")‡∏á\\\", unicode\\\"êêô\\\", unicode\\\"·ñ∞\\\", unicode\\\"∆∑\\\", unicode\\\"·öπ\\\", unicode\\\"‚¶Ñ\\\", unicode\\\"}\\\", unicode\\\"‚¶ò\\\", unicode\\\"‚å™\\\", unicode\\\"‚ßΩ\\\", unicode\\\"|\\\", unicode\\\"„Äô\\\", unicode\\\"„Äõ\\\", unicode\\\"„Äë\\\", unicode\\\"]\\\", unicode\\\"‚ù´\\\"];\\r\\n\\r\\n    uint256[22] rarityArray = [0, 2, 5, 9, 14, 20, 27, 35, 44, 54, 65, 77, 90, 104, 119, 135, 152, 170, 189, 209, 230, 252];\\r\\n\\r\\n    uint256[5][] ancients;\\r\\n\\r\\n    constructor() {\\r\\n        ancients.push([0, 0, 0, 0, 0]);\\r\\n        ancients.push([1, 1, 1, 1, 1]);\\r\\n        ancients.push([2, 2, 2, 2, 2]);\\r\\n        ancients.push([3, 3, 3, 3, 3]);\\r\\n        ancients.push([4, 4, 4, 4, 4]);\\r\\n        ancients.push([5, 5, 5, 5, 5]);\\r\\n        ancients.push([6, 6, 6, 6, 6]);\\r\\n        ancients.push([7, 7, 7, 7, 7]);\\r\\n        ancients.push([8, 8, 8, 8, 8]);\\r\\n        ancients.push([9, 9, 9, 9, 9]);\\r\\n    }\\r\\n\\r\\n    function getLeftFace(uint256 id, uint256 seed) public view returns (string memory) {\\r\\n        if (id < ancients.length) {\\r\\n            return leftFaceArray[ancients[id][0]];\\r\\n        }\\r\\n\\r\\n        uint256 raritySelector = seed % 189;\\r\\n\\r\\n        uint256 charSelector = 0;\\r\\n\\r\\n        for (uint i = 0; i < 18; i++) {\\r\\n            if (raritySelector >= rarityArray[i]) {\\r\\n                charSelector = i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return leftFaceArray[charSelector];\\r\\n    }\\r\\n\\r\\n    function getLeftEye(uint256 id, uint256 seed) public view returns (string memory) {\\r\\n        if (id < ancients.length) {\\r\\n            return leftEyeArray[ancients[id][1]];\\r\\n        }\\r\\n\\r\\n        uint256 raritySelector = seed % 230;\\r\\n\\r\\n        uint256 charSelector = 0;\\r\\n\\r\\n        for (uint i = 0; i < 20; i++) {\\r\\n            if (raritySelector >= rarityArray[i]) {\\r\\n                charSelector = i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return leftEyeArray[charSelector];\\r\\n    }\\r\\n\\r\\n    function getMouth(uint256 id, uint256 seed) public view returns (string memory) {\\r\\n        if (id < ancients.length) {\\r\\n            return mouthArray[ancients[id][2]];\\r\\n        }\\r\\n\\r\\n        uint256 raritySelector = seed % 275;\\r\\n\\r\\n        uint256 charSelector = 0;\\r\\n\\r\\n        for (uint i = 0; i < 22; i++) {\\r\\n            if (raritySelector >= rarityArray[i]) {\\r\\n                charSelector = i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return mouthArray[charSelector];\\r\\n    }\\r\\n\\r\\n    function getRightEye(uint256 id, uint256 seed) public view returns (string memory) {\\r\\n        if (id < ancients.length) {\\r\\n            return rightEyeArray[ancients[id][3]];\\r\\n        }\\r\\n\\r\\n        uint256 raritySelector = uint256(keccak256(abi.encodePacked(seed))) % 230;\\r\\n\\r\\n        uint256 charSelector = 0;\\r\\n\\r\\n        for (uint i = 0; i < 20; i++) {\\r\\n            if (raritySelector >= rarityArray[i]) {\\r\\n                charSelector = i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return rightEyeArray[charSelector];\\r\\n    }\\r\\n\\r\\n    function getRightFace(uint256 id, uint256 seed) public view returns (string memory) {\\r\\n        if (id < ancients.length) {\\r\\n            return rightFaceArray[ancients[id][4]];\\r\\n        }\\r\\n\\r\\n        uint256 raritySelector = uint256(keccak256(abi.encodePacked(seed))) % 189;\\r\\n\\r\\n        uint256 charSelector = 0;\\r\\n\\r\\n        for (uint i = 0; i < 18; i++) {\\r\\n            if (raritySelector >= rarityArray[i]) {\\r\\n                charSelector = i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return rightFaceArray[charSelector];\\r\\n    }\\r\\n\\r\\n    function assembleFace(bool revealComplete, uint256 id, uint256 seed) public view returns (string memory face) {\\r\\n        if (!revealComplete) {\\r\\n            return '(._.)';\\r\\n        }\\r\\n\\r\\n        return string(abi.encodePacked(\\r\\n                getLeftFace(id, seed),\\r\\n                getLeftEye(id, seed),\\r\\n                getMouth(id, seed),\\r\\n                getRightEye(id, seed),\\r\\n                getRightFace(id, seed)\\r\\n            ));\\r\\n    }\\r\\n\\r\\n    function calculateGolfScore(uint256 id, uint256 seed) public view returns (uint256) {\\r\\n        if (id < ancients.length) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 leftFaceRarity = seed % 189;\\r\\n        uint256 lefEyeRarity = seed % 230;\\r\\n        uint256 mouthRarity = seed % 275;\\r\\n        uint256 rightEyeRarity = uint256(keccak256(abi.encodePacked(seed))) % 230;\\r\\n        uint256 rightFaceRarity = uint256(keccak256(abi.encodePacked(seed))) % 189;\\r\\n\\r\\n        uint256 leftFaceGolf = 0;\\r\\n        uint256 leftEyeGolf = 0;\\r\\n        uint256 mouthGolf = 0;\\r\\n        uint256 rightEyeGolf = 0;\\r\\n        uint256 rightFaceGolf = 0;\\r\\n        uint256 i = 0;\\r\\n\\r\\n        for (i = 0; i < 18; i++) {\\r\\n            if (leftFaceRarity >= rarityArray[i]) {\\r\\n                leftFaceGolf = i;\\r\\n            }\\r\\n        }\\r\\n        for (i = 0; i < 20; i++) {\\r\\n            if (lefEyeRarity >= rarityArray[i]) {\\r\\n                leftEyeGolf = i;\\r\\n            }\\r\\n        }\\r\\n        for (i = 0; i < 22; i++) {\\r\\n            if (mouthRarity >= rarityArray[i]) {\\r\\n                mouthGolf = i;\\r\\n            }\\r\\n        }\\r\\n        for (i = 0; i < 20; i++) {\\r\\n            if (rightEyeRarity >= rarityArray[i]) {\\r\\n                rightEyeGolf = i;\\r\\n            }\\r\\n        }\\r\\n        for (i = 0; i < 18; i++) {\\r\\n            if (rightFaceRarity >= rarityArray[i]) {\\r\\n                rightFaceGolf = i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return leftFaceGolf + leftEyeGolf + mouthGolf + rightEyeGolf + rightFaceGolf;\\r\\n    }\\r\\n\\r\\n    function calculateSymmetry(uint256 id, uint256 seed) public view returns (string memory) {\\r\\n\\r\\n        uint256 symCount = 0;\\r\\n\\r\\n        if (id < ancients.length) {\\r\\n            symCount = 2;\\r\\n        } else {\\r\\n            uint256 leftFaceRarity = seed % 189;\\r\\n            uint256 lefEyeRarity = seed % 230;\\r\\n            uint256 rightEyeRarity = uint256(keccak256(abi.encodePacked(seed))) % 230;\\r\\n            uint256 rightFaceRarity = uint256(keccak256(abi.encodePacked(seed))) % 189;\\r\\n\\r\\n            uint256 leftFaceIndex = 0;\\r\\n            uint256 leftEyeIndex = 0;\\r\\n            uint256 rightEyeIndex = 0;\\r\\n            uint256 rightFaceIndex = 0;\\r\\n            uint256 i = 0;\\r\\n\\r\\n            for (i = 0; i < 18; i++) {\\r\\n                if (leftFaceRarity >= rarityArray[i]) {\\r\\n                    leftFaceIndex = i;\\r\\n                }\\r\\n            }\\r\\n            for (i = 0; i < 20; i++) {\\r\\n                if (lefEyeRarity >= rarityArray[i]) {\\r\\n                    leftEyeIndex = i;\\r\\n                }\\r\\n            }\\r\\n            for (i = 0; i < 20; i++) {\\r\\n                if (rightEyeRarity >= rarityArray[i]) {\\r\\n                    rightEyeIndex = i;\\r\\n                }\\r\\n            }\\r\\n            for (i = 0; i < 18; i++) {\\r\\n                if (rightFaceRarity >= rarityArray[i]) {\\r\\n                    rightFaceIndex = i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (leftFaceIndex == rightFaceIndex) {\\r\\n                symCount = symCount + 1;\\r\\n            }\\r\\n            if (leftEyeIndex == rightEyeIndex) {\\r\\n                symCount = symCount + 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (symCount == 2) {\\r\\n            return \\\"100% Symmetry\\\";\\r\\n        }\\r\\n        else if (symCount == 1) {\\r\\n            return \\\"Partial Symmetry\\\";\\r\\n        }\\r\\n        else {\\r\\n            return \\\"No Symmetry\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTextColor(uint256 id) public view returns (string memory) {\\r\\n        if (id < ancients.length) {\\r\\n            return 'RGB(148,256,209)';\\r\\n        } else {\\r\\n            return 'RGB(0,0,0)';\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getBackgroundColor(uint256 id, uint256 seed, address owner) public view returns (string memory){\\r\\n        if (id < ancients.length) {\\r\\n            return 'RGB(128,128,128)';\\r\\n        }\\r\\n\\r\\n        uint256 golf = calculateGolfScore(id, seed);\\r\\n        uint256 red;\\r\\n        uint256 green;\\r\\n        uint256 blue;\\r\\n\\r\\n        if (owner == happyFacePlace) {\\r\\n            red = 255;\\r\\n            green = 128;\\r\\n            blue = 128;\\r\\n        }\\r\\n        else if (golf >= 56) {\\r\\n            red = 255;\\r\\n            green = 255;\\r\\n            blue = 255 - (golf - 56) * 4;\\r\\n        }\\r\\n        else {\\r\\n            red = 255 - (56 - golf) * 4;\\r\\n            green = 255 - (56 - golf) * 4;\\r\\n            blue = 255;\\r\\n        }\\r\\n\\r\\n        return string(abi.encodePacked(\\\"RGB(\\\", red.toString(), \\\",\\\", green.toString(), \\\",\\\", blue.toString(), \\\")\\\"));\\r\\n    }\\r\\n\\r\\n    string constant headerText = 'data:application/json;ascii,{\\\"description\\\": \\\"We are warrior ChainFaces. Here to watch over you forever, unless we get eaten by lions.\\\",\\\"image\\\":\\\"data:image/svg+xml;base64,';\\r\\n    string constant attributesText = '\\\",\\\"attributes\\\":[{\\\"trait_type\\\":\\\"Golf Score\\\",\\\"value\\\":';\\r\\n    string constant symmetryText = '},{\\\"trait_type\\\":\\\"Symmetry\\\",\\\"value\\\":\\\"';\\r\\n    string constant leftFaceText = '\\\"},{\\\"trait_type\\\":\\\"Left Face\\\",\\\"value\\\":\\\"';\\r\\n    string constant leftEyeText = '\\\"},{\\\"trait_type\\\":\\\"Left Eye\\\",\\\"value\\\":\\\"';\\r\\n    string constant mouthText = '\\\"},{\\\"trait_type\\\":\\\"Mouth\\\",\\\"value\\\":\\\"';\\r\\n    string constant rightEyeText = '\\\"},{\\\"trait_type\\\":\\\"Right Eye\\\",\\\"value\\\":\\\"';\\r\\n    string constant rightFaceText = '\\\"},{\\\"trait_type\\\":\\\"Right Face\\\",\\\"value\\\":\\\"';\\r\\n    string constant arenaDurationText = '\\\"},{\\\"trait_type\\\":\\\"Arena Score\\\",\\\"value\\\":';\\r\\n    string constant ancientText = '},{\\\"trait_type\\\":\\\"Ancient\\\",\\\"value\\\":\\\"';\\r\\n    string constant footerText = '\\\"}]}';\\r\\n\\r\\n    function renderMetadata(bool revealComplete, uint256 id, uint256 seed, uint256 arenaDuration, address owner) external view returns (string memory) {\\r\\n        if (!revealComplete) {\\r\\n            return preRevealMetadata();\\r\\n        }\\r\\n\\r\\n        uint256 golfScore = calculateGolfScore(id, seed);\\r\\n\\r\\n        string memory svg = b64Encode(bytes(renderSvg(true, id, seed, arenaDuration, owner)));\\r\\n\\r\\n        string memory attributes = string(abi.encodePacked(attributesText, golfScore.toString()));\\r\\n        attributes = string(abi.encodePacked(attributes, symmetryText, calculateSymmetry(id, seed)));\\r\\n        attributes = string(abi.encodePacked(attributes, leftFaceText, getLeftFace(id, seed)));\\r\\n        attributes = string(abi.encodePacked(attributes, leftEyeText, getLeftEye(id, seed)));\\r\\n        attributes = string(abi.encodePacked(attributes, mouthText, getMouth(id, seed)));\\r\\n        attributes = string(abi.encodePacked(attributes, rightEyeText, getRightEye(id, seed)));\\r\\n        attributes = string(abi.encodePacked(attributes, rightFaceText, getRightFace(id, seed)));\\r\\n        attributes = string(abi.encodePacked(attributes, arenaDurationText, arenaDuration.toString()));\\r\\n\\r\\n        if (id < ancients.length) {\\r\\n            attributes = string(abi.encodePacked(attributes, ancientText, 'Ancient'));\\r\\n        } else {\\r\\n            attributes = string(abi.encodePacked(attributes, ancientText, 'Not Ancient'));\\r\\n        }\\r\\n\\r\\n        attributes = string(abi.encodePacked(attributes, footerText));\\r\\n\\r\\n        return string(abi.encodePacked(headerText, svg, attributes));\\r\\n    }\\r\\n\\r\\n    string constant svg1 = \\\"<svg xmlns='http://www.w3.org/2000/svg' width='400' height='400' style='background-color:\\\";\\r\\n    string constant svg2 = \\\"'>\\\";\\r\\n    string constant svg3 = \\\"<text x='50%' y='50%' dominant-baseline='middle' text-anchor='middle' font-size='75px' fill='\\\";\\r\\n    string constant svg4 = \\\"'>\\\";\\r\\n    string constant svg5 = \\\"</text></svg>\\\";\\r\\n\\r\\n    function renderSvg(bool revealComplete, uint256 id, uint256 seed, uint256 arenaDuration, address owner) public view returns (string memory) {\\r\\n        if (!revealComplete) {\\r\\n            return preRevealSvg();\\r\\n        }\\r\\n\\r\\n        string memory face = assembleFace(true, id, seed);\\r\\n        string memory scars;\\r\\n\\r\\n        if (arenaDuration > 0) {\\r\\n            scars = generateScars(arenaDuration, seed);\\r\\n        }\\r\\n\\r\\n        return string(abi.encodePacked(svg1, getBackgroundColor(id, seed, owner), svg2, scars, svg3, getTextColor(id), svg4, face, svg5));\\r\\n    }\\r\\n\\r\\n    string constant scarSymbol = \\\"<symbol id='scar'><g stroke='RGBA(200,40,40,.35)'><text x='40' y='40' dominant-baseline='middle' text-anchor='middle' font-weight='bold' font-size='22px' fill='RGBA(200,40,40,.45)'>++++++</text></g></symbol>\\\";\\r\\n    string constant scarPlacement1 = \\\"<g transform='translate(\\\";\\r\\n    string constant scarPlacement2 = \\\") scale(\\\";\\r\\n    string constant scarPlacement3 = \\\") rotate(\\\";\\r\\n    string constant scarPlacement4 = \\\")'><use href='#scar'/></g>\\\";\\r\\n\\r\\n    function generateScars(uint256 arenaDuration, uint256 seed) internal pure returns (string memory) {\\r\\n        string memory scars;\\r\\n        string memory scarsTemp;\\r\\n\\r\\n        uint256 count = arenaDuration / 10;\\r\\n\\r\\n        if (count > 500) {\\r\\n            count = 500;\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < count; i++) {\\r\\n            string memory scar;\\r\\n\\r\\n            uint256 scarSeed = uint256(keccak256(abi.encodePacked(seed, i)));\\r\\n\\r\\n            uint256 scale1 = scarSeed % 2;\\r\\n            uint256 scale2 = scarSeed % 5;\\r\\n            if (scale1 == 0) {\\r\\n                scale2 += 5;\\r\\n            }\\r\\n            uint256 xShift = scarSeed % 332;\\r\\n            uint256 yShift = scarSeed % 354;\\r\\n            int256 rotate = int256(scarSeed % 91) - 45;\\r\\n\\r\\n            scar = string(abi.encodePacked(scar, scarPlacement1, xShift.toString(), \\\" \\\", yShift.toString(), scarPlacement2, scale1.toString(), \\\".\\\", scale2.toString()));\\r\\n\\r\\n            if (rotate >= 0) {\\r\\n                scar = string(abi.encodePacked(scar, scarPlacement3, uint256(rotate).toString(), scarPlacement4));\\r\\n            } else {\\r\\n                scar = string(abi.encodePacked(scar, scarPlacement3, \\\"-\\\", uint256(0 - rotate).toString(), scarPlacement4));\\r\\n            }\\r\\n\\r\\n            scarsTemp = string(abi.encodePacked(scarsTemp, scar));\\r\\n\\r\\n            if (i % 10 == 0) {\\r\\n                scars = string(abi.encodePacked(scars, scarsTemp));\\r\\n                scarsTemp = \\\"\\\";\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return string(abi.encodePacked(scarSymbol, scars, scarsTemp));\\r\\n    }\\r\\n\\r\\n    function preRevealMetadata() internal pure returns (string memory) {\\r\\n        string memory JSON;\\r\\n        string memory svg = preRevealSvg();\\r\\n        JSON = string(abi.encodePacked('data:application/json;ascii,{\\\"description\\\": \\\"We are warrior ChainFaces. Here to watch over you forever, unless we get eaten by lions.\\\",\\\"image\\\":\\\"data:image/svg+xml;base64,', b64Encode(bytes(svg)), '\\\"}'));\\r\\n        return JSON;\\r\\n    }\\r\\n\\r\\n    function preRevealSvg() internal pure returns (string memory) {\\r\\n        return \\\"<svg xmlns='http://www.w3.org/2000/svg' width='400' height='400' style='background-color:RGB(255,255,255);'><text x='50%' y='50%' dominant-baseline='middle' text-anchor='middle' font-size='75px'>?????</text></svg>\\\";\\r\\n    }\\r\\n\\r\\n    string constant private TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\r\\n\\r\\n    function b64Encode(bytes memory _data) internal pure returns (string memory result) {\\r\\n        if (_data.length == 0) return '';\\r\\n        string memory _table = TABLE;\\r\\n        uint256 _encodedLen = 4 * ((_data.length + 2) / 3);\\r\\n        result = new string(_encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            mstore(result, _encodedLen)\\r\\n            let tablePtr := add(_table, 1)\\r\\n            let dataPtr := _data\\r\\n            let endPtr := add(dataPtr, mload(_data))\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            for {} lt(dataPtr, endPtr) {}\\r\\n            {\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n                let input := mload(dataPtr)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n            switch mod(mload(_data), 3)\\r\\n            case 1 {mstore(sub(resultPtr, 2), shl(240, 0x3d3d))}\\r\\n            case 2 {mstore(sub(resultPtr, 1), shl(248, 0x3d))}\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"revealComplete\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"assembleFace\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"face\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"calculateGolfScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"calculateSymmetry\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getBackgroundColor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"getLeftEye\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"getLeftFace\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"getMouth\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"getRightEye\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"getRightFace\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTextColor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"happyFacePlace\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"leftEyeArray\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"leftFaceArray\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mouthArray\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"revealComplete\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arenaDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"renderMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"revealComplete\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arenaDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"renderSvg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rightEyeArray\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rightFaceArray\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ChainFaces2Renderer","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}