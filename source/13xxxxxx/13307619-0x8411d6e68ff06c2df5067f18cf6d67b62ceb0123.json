{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.8.6;\n\n\n\n// Part: Error\n\nlibrary Error {\n    string constant ADDRESS_WHITELISTED = \"address already whitelisted\";\n    string constant ADMIN_ALREADY_SET = \"admin has already been set once\";\n    string constant ADDRESS_NOT_WHITELISTED = \"address not whitelisted\";\n    string constant ADDRESS_NOT_FOUND = \"address not found\";\n    string constant CONTRACT_INITIALIZED = \"contract can only be initialized once\";\n    string constant CONTRACT_PAUSED = \"contract is paused\";\n    string constant INVALID_AMOUNT = \"invalid amount\";\n    string constant INVALID_INDEX = \"invalid index\";\n    string constant INVALID_VALUE = \"invalid msg.value\";\n    string constant INVALID_SENDER = \"invalid msg.sender\";\n    string constant INVALID_TOKEN = \"token address does not match pool's LP token address\";\n    string constant INVALID_DECIMALS = \"incorrect number of decimals\";\n    string constant INVALID_ARGUMENT = \"invalid argument\";\n    string constant INVALID_IMPLEMENTATION = \"invalid pool implementation for given coin\";\n    string constant INSUFFICIENT_BALANCE = \"insufficient balance\";\n    string constant INSUFFICIENT_STRATEGY_BALANCE = \"insufficient strategy balance\";\n    string constant ROLE_EXISTS = \"role already exists\";\n    string constant UNAUTHORIZED_ACCESS = \"unauthorized access\";\n    string constant SAME_ADDRESS_NOT_ALLOWED = \"same address not allowed\";\n    string constant SELF_TRANSFER_NOT_ALLOWED = \"self-transfer not allowed\";\n    string constant ZERO_ADDRESS_NOT_ALLOWED = \"zero address not allowed\";\n    string constant ZERO_TRANSFER_NOT_ALLOWED = \"zero transfer not allowed\";\n    string constant INSUFFICIENT_THRESHOLD = \"insufficient threshold\";\n    string constant NO_POSITION_EXISTS = \"no position exists\";\n    string constant POSITION_ALREADY_EXISTS = \"position already exists\";\n    string constant PROTOCOL_NOT_FOUND = \"protocol not found\";\n    string constant TOP_UP_FAILED = \"top up failed\";\n    string constant SWAP_PATH_NOT_FOUND = \"swap path not found\";\n    string constant UNDERLYING_NOT_SUPPORTED = \"underlying token not supported\";\n    string constant NOT_ENOUGH_FUNDS_WITHDRAWN = \"not enough funds were withdrawn from the pool\";\n    string constant FAILED_TRANSFER = \"transfer failed\";\n    string constant FAILED_MINT = \"mint failed\";\n    string constant FAILED_REPAY_BORROW = \"repay borrow failed\";\n    string constant FAILED_METHOD_CALL = \"method call failed\";\n    string constant NOTHING_TO_CLAIM = \"there is no claimable balance\";\n    string constant ERC20_BALANCE_EXCEEDED = \"ERC20: transfer amount exceeds balance\";\n    string constant INVALID_MINTER =\n        \"the minter address of the LP token and the pool address do not match\";\n    string constant STAKER_VAULT_EXISTS = \"a staker vault already exists for the token\";\n    string constant DEADLINE_NOT_ZERO = \"deadline must be 0\";\n    string constant INSUFFICIENT_UPDATE_BALANCE = \"insufficient funds for updating the position\";\n    string constant SAME_AS_CURRENT = \"value must be different to existing value\";\n    string constant NOT_CAPPED = \"the pool is not currently capped\";\n    string constant ALREADY_CAPPED = \"the pool is already capped\";\n    string constant EXCEEDS_DEPOSIT_CAP = \"deposit exceeds deposit cap\";\n    string constant INVALID_TOKEN_TO_REMOVE = \"token can not be removed\";\n}\n\n// Part: IAdmin\n\ninterface IAdmin {\n    event NewAdminAdded(address newAdmin);\n    event AdminRenounced(address oldAdmin);\n\n    function addAdmin(address newAdmin) external returns (bool);\n\n    function renounceAdmin() external returns (bool);\n\n    function isAdmin(address account) external view returns (bool);\n}\n\n// Part: IBooster\n\ninterface IBooster {\n    function poolInfo(uint256 pid)\n        external\n        returns (\n            address lpToken,\n            address token,\n            address gauge,\n            address crvRewards,\n            address stash,\n            bool shutdown\n        );\n\n    /**\n     * @dev `_pid` is the ID of the Convex for a specific Curve LP token.\n     */\n    function deposit(\n        uint256 _pid,\n        uint256 _amount,\n        bool _stake\n    ) external returns (bool);\n\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\n\n    function withdrawAll(uint256 _pid) external returns (bool);\n}\n\n// Part: ICrvDepositor\n\ninterface ICrvDepositor {\n    function deposit(\n        uint256 _amount,\n        bool _lock,\n        address _stakeAddress\n    ) external;\n\n    function depositAll(bool _lock, address _stakeAddress) external;\n}\n\n// Part: ICurveSwap\n\ninterface ICurveSwap {\n    function get_virtual_price() external view returns (uint256);\n\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount) external;\n\n    function remove_liquidity_imbalance(uint256[3] calldata amounts, uint256 max_burn_amount)\n        external;\n\n    function remove_liquidity(uint256 _amount, uint256[3] calldata min_amounts) external;\n\n    function exchange(\n        int128 from,\n        int128 to,\n        uint256 _from_amount,\n        uint256 _min_to_amount\n    ) external;\n\n    function coins(uint256 i) external view returns (address);\n\n    function calc_token_amount(uint256[4] calldata amounts, bool deposit)\n        external\n        view\n        returns (uint256);\n\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\n        external\n        view\n        returns (uint256);\n\n    function remove_liquidity_one_coin(\n        uint256 _token_amount,\n        int128 i,\n        uint256 min_amount\n    ) external;\n}\n\n// Part: IRewardStaking\n\ninterface IRewardStaking {\n    function stakeFor(address, uint256) external;\n\n    function stake(uint256) external;\n\n    function stakeAll() external returns (bool);\n\n    function withdraw(uint256 amount, bool claim) external returns (bool);\n\n    function withdrawAndUnwrap(uint256 amount, bool claim) external;\n\n    function earned(address account) external view returns (uint256);\n\n    function getReward() external;\n\n    function getReward(address _account, bool _claimExtras) external;\n\n    function extraRewardsLength() external returns (uint256);\n\n    function extraRewards(uint256 _pid) external returns (address);\n\n    function rewardToken() external returns (address);\n\n    function balanceOf(address account) external view returns (uint256);\n}\n\n// Part: IStrategy\n\ninterface IStrategy {\n    function deposit() external payable returns (bool);\n\n    function balance() external view returns (uint256);\n\n    function withdraw(uint256 amount) external returns (bool);\n\n    function withdrawAll() external returns (bool);\n\n    function harvest() external returns (uint256);\n\n    function strategist() external view returns (address);\n\n    function shutdown() external returns (bool);\n\n    function hasPendingFunds() external view returns (bool);\n}\n\n// Part: MathFuncs\n\nlibrary MathFuncs {\n    /*\n     * Natural logarithm of 2, i.e. ln(2) scaled to 1e18\n     */\n    int256 internal constant LN2 = 693147180559945309;\n    uint256 internal constant DECIMAL_SCALE = 1e18;\n    uint256 internal constant ONE = DECIMAL_SCALE;\n\n    /*\n     * @notice Computes e^x where x is a fixed-point number.\n     * It uses a Taylor series approximation with 30 or 50 iterations, which\n     * should be precise enough for -5 <= x <= 10.\n     * The number of iteration should be increased accordingly for x > 10.\n     * using the overloaded `exp(int256 x, uint256 n) returns (uint256)`\n     * @param x the number of which to compute the exponent.\n     * @return e^x.\n     */\n    function exp(int256 x) internal pure returns (uint256) {\n        unchecked {\n            if (x >= int256(ONE) * -5 && x <= int256(ONE) * 10) {\n                return exp(x, 30);\n            }\n            return exp(x, 80);\n        }\n    }\n\n    /*\n     * @notice See `exp(int256 x)` documentation.\n     * @param n the number of iteration for the series.\n     */\n    function exp(int256 x, uint256 n) internal pure returns (uint256) {\n        unchecked {\n            // TODO: better check for convergence given x and n\n            require(x <= int256(ONE) * 20, \"exponent too large\");\n            require(x >= int256(ONE) * -10, \"exponent too small\");\n\n            uint256 factorial = 1;\n            int256 numerator = int256(ONE);\n            int256 result = 0;\n            for (uint256 k = 1; k <= n; k++) {\n                int256 term = numerator / int256(factorial);\n                result += term;\n                factorial *= k;\n                numerator = (numerator * x) / int256(DECIMAL_SCALE);\n            }\n            return uint256(result);\n        }\n    }\n\n    /*\n     * Computes ln(x) where x is fixed-point number.\n     * It uses a Taylor series approximation with `n` iterations, which\n     * only works for values of x with range of roughly 0.1 < x < 2.\n     * This is useful to compute the \"reminder\" of log2 where\n     * log2(x) = n + log2(reminder), 1 < reminder <= 2.\n     * @param x the number of which to compute ln(x), 0.1 <= x < 3.\n     * @return ln(x).\n     */\n    function lnSmall(uint256 x) internal pure returns (int256) {\n        unchecked {\n            if (x <= ONE / 2 || x >= ONE + ONE / 2) {\n                return lnSmall(x, 50);\n            }\n            return lnSmall(x, 30);\n        }\n    }\n\n    /*\n     * @notice See `lnSmall(uint256 x)` documentation.\n     * @param n the number of iteration for the series.\n     * TODO: do something about slow convergence for values < 0.1\n     */\n    function lnSmall(uint256 x, uint256 n) internal pure returns (int256) {\n        unchecked {\n            require(x < 3 * ONE, \"x too large for lnSmall, use ln instead\");\n            // too slow to converge for values < 0.1, better abort here\n            require(x >= ONE / 10, \"x too small for lnSmall\");\n\n            int256 result = 0;\n            int256 x_min_1 = int256(x) - int256(ONE);\n            int256 numerator = x_min_1;\n            for (int256 k = 1; k <= int256(n); k++) {\n                int256 term = numerator / k;\n                if (k % 2 == 0) {\n                    result -= term;\n                } else {\n                    result += term;\n                }\n                numerator = (numerator * x_min_1) / int256(DECIMAL_SCALE);\n            }\n            return result;\n        }\n    }\n\n    /*\n     * @notice Computes log2(x) where x is fixed-point number.\n     * First computes the integer part of the log by iteratively dividing by 2\n     * until the number is <= 1.\n     * Then uses the taylor series approximation of ln(x) for 1 < x <= 2\n     * to compute the decimal part of the log.\n     * This has the same constraint as `lnSmall` for small values, i.e.\n     * only works for values ~ >= 0.1 but works for any value > 1.\n     * @param x the numer of which to compute log2.\n     * @return log2(x).\n     */\n    function logBase2(uint256 x) internal pure returns (int256) {\n        // Takes longer to converge for small values (< 0.5)\n        unchecked {\n            if (x <= ONE / 2) {\n                return logBase2(x, 50);\n            }\n            return logBase2(x, 30);\n        }\n    }\n\n    /*\n     * @notice See `logBase2(uint256 x)` documentation.\n     * @param n the number of iteration for the series.\n     */\n    function logBase2(uint256 x, uint256 n) internal pure returns (int256) {\n        unchecked {\n            uint256 number = x;\n            uint256 y = ONE;\n            uint256 integerPart = 0;\n            while (number > ONE) {\n                number /= 2;\n                y /= 2;\n                integerPart += ONE;\n            }\n            int256 decimalPart = (lnSmall((y * x) / DECIMAL_SCALE, n) * int256(DECIMAL_SCALE)) /\n                LN2;\n            return int256(integerPart) + decimalPart;\n        }\n    }\n\n    /*\n     * @notice Computes the natural logarithm of x, ln(x) by using `logBase2`\n     * and a precomputed value for ln(2).\n     */\n    function ln(uint256 x) internal pure returns (int256) {\n        unchecked {\n            if (x <= ONE / 2) {\n                return ln(x, 50);\n            }\n            return ln(x, 30);\n        }\n    }\n\n    /*\n     * @notice See `ln(uint256 x)` documentation.\n     * @param n the number of iteration for the series.\n     */\n    function ln(uint256 x, uint256 n) internal pure returns (int256) {\n        unchecked {\n            return (logBase2(x, n) * LN2) / int256(DECIMAL_SCALE);\n        }\n    }\n\n    /*\n     * Computes base^exponent by using the identity\n     * base^exponent = e^(exponent * ln(base))\n     * where base > 0.\n     * @param base the base of the exponetiation.\n     * @param exponent the exponent of the exponetiation.\n     * @return base^exponent.\n     */\n\n    function pow(uint256 base, int256 exponent) internal pure returns (uint256) {\n        unchecked {\n            if (base >= ONE / 2 && base < 2 * ONE) {\n                return pow(base, exponent, 30);\n            }\n            return pow(base, exponent, 80);\n        }\n    }\n\n    /*\n     * @notice See `pow(uint256 base, int256 exponent)` documentation.\n     * @param n the number of iteration for the series.\n     */\n    function pow(\n        uint256 base,\n        int256 exponent,\n        uint256 n\n    ) internal pure returns (uint256) {\n        unchecked {\n            if (base == 0) {\n                return 0;\n            }\n            return exp((exponent * ln(base, n)) / int256(DECIMAL_SCALE), n);\n        }\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.0.0/Address\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.0.0/Context\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.0.0/EnumerableSet\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.0.0/IERC20\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// Part: SaferMath\n\n/*\n * @dev To use functions of this contract, at least one of the numbers must\n * be scaled to `decimalScale`. The result will scaled to `decimalScale`\n * if both numbers are scaled to `decimalScale`, otherwise to the scale\n * of the number not scaled by `decimalScale`\n */\nlibrary SaferMath {\n    uint256 internal constant decimalScale = 1e18;\n\n    /**\n     * @notice Performs a multiplication between two scaled numbers\n     */\n    function scaledMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return (a * b) / decimalScale;\n    }\n\n    /**\n     * @notice Performs a division between two scaled numbers\n     */\n    function scaledDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        return (a * decimalScale) / b;\n    }\n\n    /**\n     * @notice Performs a division between two numbers, rounding up the result\n     */\n    function scaledDivRoundUp(uint256 a, uint256 b) internal pure returns (uint256) {\n        return (a * decimalScale + b - 1) / b;\n    }\n}\n\n// Part: UniswapRouter02\n\ninterface UniswapRouter02 {\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function WETH() external pure returns (address);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n}\n\n// Part: UniswapV2Pair\n\ninterface UniswapV2Pair {\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 _reserve0,\n            uint112 _reserve1,\n            uint32 _blockTimestampLast\n        );\n}\n\n// Part: AdminBase\n\nabstract contract AdminBase is IAdmin {\n    mapping(address => bool) admins;\n\n    /**\n     * @notice Make a function only callable by admins.\n     * @dev Fails if msg.sender is not an admin.\n     */\n    modifier onlyAdmin() {\n        require(isAdmin(msg.sender), Error.UNAUTHORIZED_ACCESS);\n        _;\n    }\n\n    /**\n     * @notice Add a new admin.\n     * @dev This fails if the newAdmin was added previously.\n     * @param newAdmin Address to add as admin.\n     * @return `true` if successful.\n     */\n    function addAdmin(address newAdmin) public override onlyAdmin returns (bool) {\n        require(!admins[newAdmin], Error.ROLE_EXISTS);\n        admins[newAdmin] = true;\n        emit NewAdminAdded(newAdmin);\n        return true;\n    }\n\n    /**\n     * @notice Remove msg.sender from admin list.\n     * @return `true` if sucessful.\n     */\n    function renounceAdmin() external override onlyAdmin returns (bool) {\n        admins[msg.sender] = false;\n        emit AdminRenounced(msg.sender);\n        return true;\n    }\n\n    /**\n     * @notice Check if an account is admin.\n     * @param account Address to check.\n     * @return `true` if account is an admin.\n     */\n    function isAdmin(address account) public view override returns (bool) {\n        return admins[account];\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.0.0/ERC20\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overloaded;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.0.0/SafeERC20\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// Part: Admin\n\ncontract Admin is AdminBase {\n    constructor(address _admin) {\n        admins[_admin] = true;\n        emit NewAdminAdded(_admin);\n    }\n}\n\n// File: bkd3CrvCvx.sol\n\n/**\n * This is the bkd3CRVCVX strategy, which is designed to be used by a Backd ERC20 Vault.\n * The strategy holds 3CRV as the underlying and allocates liquidity to Convex.\n * Rewards received on Convex (CVX, CRV, 3CRV), are sold in part for the underlying.\n * A share of earned CVX is retained on behalf of the Backd community to participate in governance.\n */\n\ncontract bkd3CrvCvx is IStrategy, Admin {\n    using SaferMath for uint256;\n    using SafeERC20 for IERC20;\n    using SafeERC20 for ERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    event DexUpdated(address token, address newDex);\n    event RewardTokenAdded(address token);\n    event RewardTokenRemoved(address token);\n    event StashedReward(uint256 startTime, uint256 endTime, uint256 stashedAmount);\n\n    uint256 public constant DAI_TARGET = 0;\n    uint256 public constant USDC_TARGET = 1;\n\n    modifier onlyVault() {\n        require(msg.sender == vault, Error.UNAUTHORIZED_ACCESS);\n        _;\n    }\n\n    struct RewardStash {\n        uint64 startTime;\n        uint64 endTime;\n        uint128 unvested;\n    }\n\n    // @dev `vault` also needs to be set as an admin\n    address public immutable vault;\n\n    // Dex contracts\n    address public constant uniswap = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n    address public constant sushiSwap = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\n\n    // ERC20 tokens\n    address public constant cvx = address(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\n    address public constant crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\n    address public constant cvxCrv = address(0x62B9c7356A2Dc64a1969e19C23e4f579F9810Aa7);\n    address public constant cvxCrvCrvSushiLpToken =\n        address(0x33F6DDAEa2a8a54062E021873bCaEE006CdF4007);\n    address public constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n    address public constant dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n    address public constant usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n    address public constant usdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n\n    // Curve contracts\n    address public constant curvePool = address(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\n\n    // Convex contracts\n    address public constant booster = address(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\n    address public constant crvDepositor = address(0x8014595F2AB54cD7c604B00E9fb932176fDc86Ae);\n    IRewardStaking public constant cvxCrvStaking =\n        IRewardStaking(address(0x3Fe65692bfCD0e6CF84cB1E7d24108E434A7587e));\n    IRewardStaking public immutable crvRewards; // Staking contract for Convex-3CRV deposit token\n\n    uint256 public constant CONVEX_3CRV_PID = 9; // 3Curve pool id on Convex\n    address public constant underlying = address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490); // 3CRV\n\n    address public communityReserve;\n    uint256 public crvDumpShare;\n    uint256 public cvxGovFee;\n\n    bool public isShutdown;\n\n    uint256 constant REWARDS_VESTING = 7 * 86400; // 1 week\n\n    EnumerableSet.AddressSet private rewardTokens;\n\n    mapping(address => address) public tokenDex;\n\n    RewardStash[] public stashedRewards;\n    uint256 public totalStashed; // rewards stashed after being liquidated\n\n    mapping(address => address) public pathTarget; // swap target paths\n\n    address public override strategist;\n\n    constructor(address _vault, address _strategist) Admin(msg.sender) {\n        (address lp, , , address _crvRewards, , ) = IBooster(booster).poolInfo(CONVEX_3CRV_PID);\n        require(lp == address(underlying), \"Incorrect Curve LP token\");\n        crvRewards = IRewardStaking(_crvRewards);\n        strategist = _strategist;\n        vault = _vault;\n\n        // approve for Convex deposits\n        IERC20(underlying).safeApprove(booster, type(uint256).max);\n\n        // approve for locking CRV for cvxCRV\n        IERC20(crv).safeApprove(crvDepositor, type(uint256).max);\n\n        // approve for Curve pool deposits\n        IERC20(dai).safeApprove(curvePool, type(uint256).max);\n        IERC20(usdc).safeApprove(curvePool, type(uint256).max);\n        IERC20(usdt).safeApprove(curvePool, type(uint256).max);\n\n        tokenDex[crv] = sushiSwap; // CRV\n        tokenDex[cvx] = sushiSwap; // CXV\n\n        // approve for SushiSwap swaps\n        IERC20(crv).safeApprove(sushiSwap, type(uint256).max);\n        IERC20(cvx).safeApprove(sushiSwap, type(uint256).max);\n\n        // approve for cvxCRV swaps\n        IERC20(cvxCrv).safeApprove(sushiSwap, type(uint256).max);\n\n        // approve cvxCRV staking on Convex\n        IERC20(cvxCrv).safeApprove(address(cvxCrvStaking), type(uint256).max);\n\n        // set target paths for DEX swaps\n        setPathTarget(crv, DAI_TARGET);\n        setPathTarget(cvx, DAI_TARGET);\n    }\n\n    /**\n     * @notice Deposit all available Curve LP into Convex pool.\n     * @dev Curve LP tokens are deposited into Convex and Convex LP tokens are staked for rewards by default.\n     */\n    function deposit() external payable override onlyAdmin returns (bool) {\n        require(msg.value == 0, Error.INVALID_VALUE);\n        require(!isShutdown, \"Strategy is shut down\");\n\n        uint256 currentBalance = _underlyingBalance();\n        if (currentBalance == 0) return false;\n        IBooster(booster).deposit(CONVEX_3CRV_PID, currentBalance, true); // deposit Curve LP into Convex pool and stake Convex LP\n        return true;\n    }\n\n    /**\n     * @notice Harvests reward tokens and sells these for the underlying.\n     * @dev Any underlying harvested is not redeposited by this method.\n     * @return Amount of underlying harvested.\n     */\n    function harvest() external override onlyVault returns (uint256) {\n        uint256 oldBalance = _underlyingBalance();\n        _claimStashedRewards();\n\n        // claim cvxCRV staking rewards\n        uint256 stakedCvxCrv = _stakedBalance();\n        if (stakedCvxCrv > 0) cvxCrvStaking.getReward();\n\n        // claim Curve LP token staking rewards\n        crvRewards.getReward();\n\n        // process CRV rewards\n        _swapForToken(crv, crvDumpShare);\n\n        uint256 crvBalance = IERC20(crv).balanceOf(address(this));\n        if (crvBalance > 0) {\n            // Checks if we can get a better rate on SushiSwap\n            (uint256 reserves0, uint256 reserves1, ) = UniswapV2Pair(cvxCrvCrvSushiLpToken)\n                .getReserves();\n            // TODO: use curve instead of uniswap to swap crv to cvxCRV\n            uint256 amountOut = UniswapRouter02(sushiSwap).getAmountOut(\n                crvBalance,\n                reserves1,\n                reserves0\n            );\n            if (amountOut > crvBalance) {\n                address[] memory path = new address[](2);\n                path[0] = crv;\n                path[1] = cvxCrv;\n                UniswapRouter02(sushiSwap).swapExactTokensForTokens(\n                    crvBalance,\n                    uint256(0),\n                    path,\n                    address(this),\n                    block.timestamp\n                );\n                cvxCrvStaking.stakeAll();\n            } else {\n                ICrvDepositor(crvDepositor).deposit(crvBalance, true, address(cvxCrvStaking)); // Swap CRV for cxvCRV and stake\n            }\n        }\n\n        uint256 cvxBalance = IERC20(cvx).balanceOf(address(this));\n        if (cvxBalance > 0 && cvxGovFee > 0 && communityReserve != address(0)) {\n            // tax CVX rewards\n            uint256 govShare = cvxBalance.scaledMul(cvxGovFee);\n            IERC20(cvx).safeTransfer(communityReserve, govShare);\n        }\n\n        // process CVX rewards\n        _swapForToken(cvx, MathFuncs.ONE);\n\n        // deposit into Curve pool\n        _depositForUnderlying();\n\n        uint256 newBalance = _underlyingBalance();\n        return newBalance - oldBalance;\n    }\n\n    /**\n     * @notice Swaps either CRV or CVX for the underlying.\n     * @dev This swaps the dump share of CRV or all of the liquid CVX for the specified token (DAI by default).\n     *      The token received is then deposited into the 3Curve pool to receive 3CRV tokens. Any 3CRV is not\n     *      redeposited into Convex by this method. The amount if CRV to sell (if CRV is `token`) is determined\n     *      by the CRV dump share.\n     * @param token Address of the token to swap for the underlying.\n     * @param dump Portion to dump if token is CRV.\n     */\n    function _swapForToken(address token, uint256 dump) internal {\n        uint256 currentBalance = IERC20(token).balanceOf(address(this));\n        uint256 sellAmount = currentBalance;\n\n        sellAmount = currentBalance.scaledMul(dump);\n\n        if (sellAmount == 0) return;\n\n        address[] memory path = new address[](3);\n        path[0] = token;\n        path[1] = weth;\n        path[2] = pathTarget[token];\n\n        UniswapRouter02(tokenDex[token]).swapExactTokensForTokens(\n            sellAmount,\n            uint256(0),\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function _depositForUnderlying() internal {\n        // redeposit received tokens for underlying\n        uint256 daiBalance = IERC20(dai).balanceOf(address(this));\n        uint256 usdcBalance = IERC20(usdc).balanceOf(address(this));\n        uint256 usdtBalance = IERC20(usdt).balanceOf(address(this));\n        if (daiBalance > 0 || usdcBalance > 0 || usdtBalance > 0) {\n            // mint 3CRV\n            ICurveSwap(curvePool).add_liquidity([daiBalance, usdcBalance, usdtBalance], 0);\n        }\n    }\n\n    /**\n     * @notice Unstake an amount of staked cvxCRV from Convex rewards contract.\n     * @dev The unstaked cvxCRV is not swapped for CRV.\n     * @param amount Amount of cxvCRV to unstake.\n     * @return True if unstaking was succesful.\n     */\n    function _unstakeCvxCrv(uint256 amount) internal returns (bool) {\n        require(_stakedBalance() >= amount, Error.INSUFFICIENT_BALANCE);\n        cvxCrvStaking.withdraw(amount, false);\n        return true;\n    }\n\n    /**\n     * @notice Liquidates an amount of a token for the underlying.\n     * @dev Liquidated funds are paid out immediately if the caller is the vault.\n     * @param token Token to liquidate.\n     * @param amount Amount of token that should be liquidated.\n     * @return Amount of underlying received.\n     */\n    function liquidate(address token, uint256 amount) external onlyAdmin returns (uint256) {\n        return _liquidate(token, amount);\n    }\n\n    function _liquidate(address token, uint256 amount) internal returns (uint256) {\n        if (amount == 0) return 0;\n        uint256 oldBal = _underlyingBalance();\n\n        if (token == cvxCrv) {\n            _unstakeCvxCrv(amount);\n            uint256 cvxCrvBalance = IERC20(cvxCrv).balanceOf(address(this));\n            if (cvxCrvBalance > 0) {\n                // swap cvxCRV --> CRV\n                address[] memory path = new address[](2);\n                path[0] = cvxCrv;\n                path[1] = crv;\n                // TODO: use Curve\n                UniswapRouter02(sushiSwap).swapExactTokensForTokens(\n                    cvxCrvBalance,\n                    uint256(0),\n                    path,\n                    address(this),\n                    block.timestamp\n                );\n                _swapForToken(crv, MathFuncs.ONE);\n                _depositForUnderlying();\n            }\n        } else {\n            // check reward tokens\n            if (rewardTokens.contains(token)) {\n                uint256 rewardTokenBalance = IERC20(token).balanceOf(address(this));\n                if (rewardTokenBalance < amount) return 0;\n                address[] memory path = new address[](3);\n                address target = pathTarget[token];\n                path[0] = token;\n                path[1] = weth;\n                path[2] = target;\n                UniswapRouter02(tokenDex[token]).swapExactTokensForTokens(\n                    rewardTokenBalance,\n                    uint256(0),\n                    path,\n                    address(this),\n                    block.timestamp\n                );\n\n                // redeposit received tokens for underlying\n                uint256 daiBalance = target == dai ? IERC20(target).balanceOf(address(this)) : 0;\n                uint256 usdcBalance = target == usdc ? IERC20(target).balanceOf(address(this)) : 0;\n                uint256 usdtBalance = target == usdt ? IERC20(target).balanceOf(address(this)) : 0;\n                if (daiBalance > 0 || usdcBalance > 0 || usdtBalance > 0) {\n                    // mint 3CRV\n                    ICurveSwap(curvePool).add_liquidity([daiBalance, usdcBalance, usdtBalance], 0);\n                }\n            }\n        }\n\n        uint256 newBal = _underlyingBalance();\n        uint256 liquidated = newBal - oldBal;\n        if (liquidated == 0) return 0;\n\n        if (msg.sender == vault) {\n            IERC20(underlying).safeTransfer(vault, liquidated);\n        } else {\n            // add liquidated amount to stashed rewards\n            uint256 endTime = block.timestamp + REWARDS_VESTING;\n            _stashReward(block.timestamp, endTime, liquidated);\n        }\n        return liquidated;\n    }\n\n    function _stashReward(\n        uint256 startTime,\n        uint256 endTime,\n        uint256 amount\n    ) internal {\n        stashedRewards.push(RewardStash(uint64(startTime), uint64(endTime), uint128(amount)));\n        totalStashed += amount;\n        emit StashedReward(startTime, endTime, amount);\n    }\n\n    /**\n     * @notice Liquidates all assets held by the strategy for the underlying.\n     */\n    function liquidateAll() external onlyAdmin returns (bool) {\n        _liquidateAll();\n        return true;\n    }\n\n    function _liquidateAll() internal {\n        uint256 oldBal = _underlyingBalance();\n        uint256 cvxCrvBalance = _stakedBalance();\n        if (cvxCrvBalance > 0) {\n            _liquidate(cvxCrv, cvxCrvBalance); // unstake and liquidate\n        }\n\n        for (uint256 i = 0; i < rewardTokens.length(); i++) {\n            address rewardToken = rewardTokens.at(i);\n            uint256 rewardTokenBalance = IERC20(rewardToken).balanceOf(address(this));\n            if (rewardTokenBalance == 0) continue;\n            _liquidate(rewardToken, rewardTokenBalance);\n        }\n\n        uint256 newBal = _underlyingBalance();\n        uint256 liquidated = newBal - oldBal;\n        if (liquidated == 0) return;\n\n        if (msg.sender == vault) {\n            IERC20(underlying).safeTransfer(vault, liquidated);\n        } else {\n            // add liquidated amount to stashed rewards\n            uint256 endTime = block.timestamp + REWARDS_VESTING;\n            _stashReward(block.timestamp, endTime, liquidated);\n        }\n    }\n\n    function _claimStashedRewards() internal {\n        uint256 length = stashedRewards.length;\n        if (length == 0) return;\n        uint256 totalVested;\n        uint256 count;\n        uint256[] memory indexesToRemove = new uint256[](length);\n\n        for (uint256 i = 0; i < length; i++) {\n            RewardStash storage stash = stashedRewards[i];\n            uint256 endTime = stash.endTime;\n            uint256 startTime = stash.startTime;\n            if (block.timestamp >= endTime) {\n                totalVested += stash.unvested;\n                indexesToRemove[count] = i;\n                count += 1;\n                continue;\n            }\n\n            uint256 timeElapsed = block.timestamp - startTime;\n            uint256 totalTime = endTime - startTime;\n            uint256 claimed = uint256(stash.unvested).scaledMul(timeElapsed.scaledDiv(totalTime));\n            totalVested += claimed;\n            stash.unvested -= uint128(claimed);\n            stash.startTime = uint64(block.timestamp);\n        }\n\n        totalStashed -= totalVested;\n\n        if (count > 0) {\n            // delete stashes from list\n            for (uint256 i = count; i > 0; i--) {\n                uint256 j = indexesToRemove[i - 1];\n                stashedRewards[j] = stashedRewards[stashedRewards.length - 1];\n                stashedRewards.pop();\n            }\n        }\n    }\n\n    /**\n     * @dev Get the balance of the underlying including any vested stashed rewards.\n     *      `totalStashed` is the unvested underlying. This gets updated on `claimStashedRewards`.\n     */\n    function _underlyingBalance() internal view returns (uint256) {\n        uint256 currentBalance = IERC20(underlying).balanceOf(address(this));\n        return currentBalance - totalStashed;\n    }\n\n    /**\n     * @dev Get the balance of the underlying staked in the Curve pool\n     */\n    function _stakedBalance() internal view returns (uint256) {\n        return cvxCrvStaking.balanceOf(address(this));\n    }\n\n    /**\n     * @notice Withdraw an amount of underlying to the vault.\n     * @dev This can only be called by the vault.\n     *      If the amount is not available, it will be made liquid.\n     * @param amount Amount of underlying to withdraw.\n     * @return True if successful withdrawal.\n     */\n    function withdraw(uint256 amount) external override onlyVault returns (bool) {\n        _withdraw(amount);\n        return true;\n    }\n\n    function _withdraw(uint256 amount) internal {\n        uint256 idleBalance = _underlyingBalance();\n        if (idleBalance >= amount) {\n            IERC20(underlying).safeTransfer(vault, amount);\n            return;\n        }\n        uint256 requiredUnderlyingAmount = amount - idleBalance;\n        // unstake Curve LP from Convex (not claiming rewards)\n        require(\n            crvRewards.balanceOf(address(this)) >= requiredUnderlyingAmount,\n            Error.INSUFFICIENT_STRATEGY_BALANCE\n        );\n        crvRewards.withdraw(requiredUnderlyingAmount, false); // withdraw Convex pool LP tokens\n        IBooster(booster).withdraw(CONVEX_3CRV_PID, requiredUnderlyingAmount); // burn Convex LP tokens for underlying\n        uint256 currentBalance = IERC20(underlying).balanceOf(address(this));\n        require(currentBalance >= amount, Error.INSUFFICIENT_STRATEGY_BALANCE);\n        IERC20(underlying).safeTransfer(vault, amount);\n    }\n\n    /**\n     * @notice Withdraw all underlying to vault.\n     * @dev This does not liquidate reward tokens and only considers\n     *      idle underlying or staked underlying.\n     */\n    function withdrawAll() external override onlyAdmin returns (bool) {\n        uint256 totalBalance = balance();\n        _withdraw(totalBalance);\n        return true;\n    }\n\n    /**\n     * @notice Set the DEX that should be used for swapping for a specific coin.\n     *         If Uniswap is active, it will switch to SushiSwap and vice versa.\n     * @dev Only SushiSwap and Uniswap are supported.\n     * @param token Address of token for which the DEX should be updated.\n     */\n    function swapDex(address token) external onlyAdmin returns (bool) {\n        address currentDex = tokenDex[token];\n        require(currentDex != address(0), \"no dex has been set for token\");\n        address newDex = currentDex == sushiSwap ? uniswap : sushiSwap;\n        setDex(token, newDex);\n        IERC20(token).safeApprove(currentDex, 0);\n        IERC20(token).safeApprove(newDex, type(uint256).max);\n        return true;\n    }\n\n    function setDex(address token, address dex) internal {\n        tokenDex[token] = dex;\n        emit DexUpdated(token, dex);\n    }\n\n    /**\n     * @notice Add a reward token to list of extra reward tokens.\n     * @dev These are tokens that are not the main assets of the strategy. For instance, temporary incentives.\n     * @param token Address of token to add to reward token list.\n     * @param id ID for target path (the token that should be swapped to).\n     */\n    function addRewardToken(address token, uint256 id) external onlyAdmin returns (bool) {\n        require(\n            token != cvx && token != cvxCrv && token != underlying && token != crv,\n            \"Invalid token to add\"\n        );\n        require(id <= 2, \"Invalid target path id\");\n        if (rewardTokens.contains(token)) return false;\n        rewardTokens.add(token);\n        setPathTarget(token, id);\n        setDex(token, sushiSwap);\n\n        // approve for swaps (default AMM is SushiSwap)\n        IERC20(token).safeApprove(sushiSwap, 0);\n        IERC20(token).safeApprove(sushiSwap, type(uint256).max);\n\n        emit RewardTokenAdded(token);\n        return true;\n    }\n\n    function withdrawAllToVault() external onlyAdmin returns (bool) {\n        // strategy must be shut down\n        if (!isShutdown) return false;\n        _claimStashedRewards();\n        _liquidateAll();\n        uint256 currentBalance = _underlyingBalance();\n        if (currentBalance == 0) return false;\n        IERC20(underlying).safeTransfer(vault, currentBalance);\n        return true;\n    }\n\n    /**\n     * @notice Remove a reward token.\n     * @param token Address of token to remove from reward token list.\n     */\n    function removeRewardToken(address token) external onlyAdmin returns (bool) {\n        if (rewardTokens.remove(token)) {\n            emit RewardTokenRemoved(token);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @notice Get the total underlying balance of the strategy.\n     * @dev This only includes idle underlying and underlying deposited on Convex.\n     */\n    function balance() public view override returns (uint256) {\n        uint256 currentBalance = _underlyingBalance();\n        return crvRewards.balanceOf(address(this)) + currentBalance;\n    }\n\n    /**\n     * @notice Returns true if the strategy has funds that are still locked or vested\n     */\n    function hasPendingFunds() external view override returns (bool) {\n        return totalStashed > 0;\n    }\n\n    /**\n     * @notice Get strategy name.\n     */\n    function name() external pure returns (string memory) {\n        return \"Strategy3CRV-CVX\";\n    }\n\n    // Setters\n\n    /**\n     * @notice Set the address of the communit reserve.\n     * @dev This can only be set once. CVX will be taxed and allocated to the reserve,\n     *      such that Backd can participate in Convex governance.\n     * @param _communityReserve Address of the community reserve.\n     * @return True if reserve was successfully set.\n     */\n    function setCommunityReserve(address _communityReserve) external onlyAdmin returns (bool) {\n        require(communityReserve == address(0), Error.ROLE_EXISTS);\n        communityReserve = _communityReserve;\n        return true;\n    }\n\n    /**\n     * @notice Set amount of CRV rewards that should be sold for the underlying.\n     * @dev The remainder of CRV rewards (if any) will be deposited for cvxCRV and staked on Convex.\n     * @param _crvDumpShare Percentage of CRV rewards that should be sold for the underlying.\n     * @return True if share was successfully set.\n     */\n    function setCrvDumpShare(uint256 _crvDumpShare) external onlyAdmin returns (bool) {\n        require(_crvDumpShare <= MathFuncs.ONE, Error.INVALID_AMOUNT);\n        crvDumpShare = _crvDumpShare;\n        return true;\n    }\n\n    /**\n     * @notice Set governance fee charges on CVX rewards.\n     * @dev The \"taxed\" CVX is paid out to the community reserve.\n     * @param _cvxGovFee New fee charged on CVX rewards for governance.\n     * @return True if fee was successfully set.\n     */\n    function setCvxGovFee(uint256 _cvxGovFee) external onlyAdmin returns (bool) {\n        require(_cvxGovFee <= MathFuncs.ONE, Error.INVALID_AMOUNT);\n        require(communityReserve != address(0), \"Community reserve must be set\");\n        cvxGovFee = _cvxGovFee;\n        return true;\n    }\n\n    /**\n     * @notice Set strategist.\n     * @dev Can only be set by current strategist.\n     * @param _strategist Address of new strategist.\n     * @return True if successfully set.\n     */\n    function setStrategist(address _strategist) external returns (bool) {\n        require(msg.sender == strategist, Error.UNAUTHORIZED_ACCESS);\n        strategist = _strategist;\n        return true;\n    }\n\n    function shutdown() external override onlyVault returns (bool) {\n        if (!isShutdown) {\n            isShutdown = true;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @notice Set target path for a token.\n     * @dev This is required for Uniswap and SushiSwap to know what a particular token should be swapped for.\n     * @param token Address of token that would be swapped.\n     * @param id Id for token to swap for: 0 (DAI), 1 (USDC), 2 (USDT)\n     */\n    function setPathTarget(address token, uint256 id) public onlyAdmin returns (bool) {\n        require(id <= 2, \"unknown id\");\n        if (id == DAI_TARGET) {\n            pathTarget[token] = dai;\n        } else if (id == USDC_TARGET) {\n            pathTarget[token] = usdc;\n        } else {\n            pathTarget[token] = usdt;\n        }\n        return true;\n    }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"}],\"name\":\"AdminRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDex\",\"type\":\"address\"}],\"name\":\"DexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RewardTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RewardTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stashedAmount\",\"type\":\"uint256\"}],\"name\":\"StashedReward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONVEX_3CRV_PID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI_TARGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_TARGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"addRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"booster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityReserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvDepositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvDumpShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvRewards\",\"outputs\":[{\"internalType\":\"contract IRewardStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curvePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxCrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxCrvCrvSushiLpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxCrvStaking\",\"outputs\":[{\"internalType\":\"contract IRewardStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxGovFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasPendingFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidateAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pathTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityReserve\",\"type\":\"address\"}],\"name\":\"setCommunityReserve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_crvDumpShare\",\"type\":\"uint256\"}],\"name\":\"setCrvDumpShare\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cvxGovFee\",\"type\":\"uint256\"}],\"name\":\"setCvxGovFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"setPathTarget\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stashedRewards\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"unvested\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"swapDex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStashed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllToVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"bkd3CrvCvx","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"0000000000000000000000002e1bcd602a1cccf0739147967772af93120b06f2000000000000000000000000196bc79fee5dad65bdc0781955f17b184451ad36","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":""}]}