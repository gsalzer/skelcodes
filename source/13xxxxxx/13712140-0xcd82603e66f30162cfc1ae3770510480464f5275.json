{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/src/market/MarketFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\nimport \\\"../common/config/UsingConfig.sol\\\";\\nimport \\\"../market/Market.sol\\\";\\nimport \\\"../../interface/IMarket.sol\\\";\\nimport \\\"../../interface/IMarketFactory.sol\\\";\\nimport \\\"../../interface/IMarketGroup.sol\\\";\\n\\n/**\\n * A factory contract that creates a new Market contract.\\n */\\ncontract MarketFactory is Ownable, IMarketFactory, UsingConfig {\\n\\tevent Create(address indexed _from, address _market);\\n\\n\\t/**\\n\\t * Initialize the passed address as AddressConfig address.\\n\\t */\\n\\tconstructor(address _config) public UsingConfig(_config) {}\\n\\n\\t/**\\n\\t * Creates a new Market contract.\\n\\t */\\n\\tfunction create(address _addr) external returns (address) {\\n\\t\\t/**\\n\\t\\t * Validates the passed address is not 0 address.\\n\\t\\t */\\n\\t\\trequire(_addr != address(0), \\\"this is illegal address\\\");\\n\\n\\t\\t/**\\n\\t\\t * Creates a new Market contract with the passed address as the IMarketBehavior.\\n\\t\\t */\\n\\t\\tMarket market = new Market(address(config()), _addr);\\n\\n\\t\\t/**\\n\\t\\t * Adds the created Market contract to the Market address set.\\n\\t\\t */\\n\\t\\taddress marketAddr = address(market);\\n\\t\\tIMarketGroup marketGroup = IMarketGroup(config().marketGroup());\\n\\t\\tmarketGroup.addGroup(marketAddr);\\n\\n\\t\\t/**\\n\\t\\t * For the first Market contract, it will be activated immediately.\\n\\t\\t * If not, the Market contract will be activated after a vote by the voters.\\n\\t\\t */\\n\\t\\tif (marketGroup.getCount() == 1) {\\n\\t\\t\\tmarket.toEnable();\\n\\t\\t}\\n\\n\\t\\temit Create(msg.sender, marketAddr);\\n\\t\\treturn marketAddr;\\n\\t}\\n\\n\\t/**\\n\\t * Creates a new Market contract.\\n\\t */\\n\\tfunction enable(address _addr) external onlyOwner {\\n\\t\\t/**\\n\\t\\t * Validates the passed address is not 0 address.\\n\\t\\t */\\n\\t\\tIMarketGroup marketGroup = IMarketGroup(config().marketGroup());\\n\\t\\trequire(marketGroup.isGroup(_addr), \\\"illegal address\\\");\\n\\n\\t\\t/**\\n\\t\\t * Market will be enable.\\n\\t\\t */\\n\\t\\tIMarket market = IMarket(_addr);\\n\\t\\trequire(market.enabled() == false, \\\"already enabled\\\");\\n\\n\\t\\tmarket.toEnable();\\n\\t}\\n\\n\\t/**\\n\\t * Creates a new Market contract.\\n\\t */\\n\\tfunction disable(address _addr) external onlyOwner {\\n\\t\\t/**\\n\\t\\t * Validates the passed address is not 0 address.\\n\\t\\t */\\n\\t\\tIMarketGroup marketGroup = IMarketGroup(config().marketGroup());\\n\\t\\trequire(marketGroup.isGroup(_addr), \\\"illegal address\\\");\\n\\n\\t\\t/**\\n\\t\\t * Market will be enable.\\n\\t\\t */\\n\\t\\tIMarket market = IMarket(_addr);\\n\\t\\trequire(market.enabled() == true, \\\"already disabled\\\");\\n\\n\\t\\tmarket.toDisable();\\n\\t\\tmarketGroup.deleteGroup(_addr);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"/contracts/src/market/Market.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../common/config/UsingConfig.sol\\\";\\nimport \\\"../../interface/IProperty.sol\\\";\\nimport \\\"../../interface/IMarket.sol\\\";\\nimport \\\"../../interface/IMarketBehavior.sol\\\";\\nimport \\\"../../interface/IPolicy.sol\\\";\\nimport \\\"../../interface/IMetrics.sol\\\";\\nimport \\\"../../interface/IMetricsFactory.sol\\\";\\nimport \\\"../../interface/IMetricsGroup.sol\\\";\\nimport \\\"../../interface/ILockup.sol\\\";\\nimport \\\"../../interface/IDev.sol\\\";\\n\\n/**\\n * A user-proposable contract for authenticating and associating assets with Property.\\n * A user deploys a contract that inherits IMarketBehavior and creates this Market contract with the MarketFactory contract.\\n */\\ncontract Market is UsingConfig, IMarket {\\n\\tusing SafeMath for uint256;\\n\\tbool public enabled;\\n\\taddress public behavior;\\n\\tuint256 public votingEndBlockNumber;\\n\\tuint256 public issuedMetrics;\\n\\tmapping(bytes32 => bool) private idMap;\\n\\tmapping(address => bytes32) private idHashMetricsMap;\\n\\n\\t/**\\n\\t * Initialize the passed address as AddressConfig address and user-proposed contract.\\n\\t */\\n\\tconstructor(address _config, address _behavior)\\n\\t\\tpublic\\n\\t\\tUsingConfig(_config)\\n\\t{\\n\\t\\t/**\\n\\t\\t * Validates the sender is MarketFactory contract.\\n\\t\\t */\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == config().marketFactory(),\\n\\t\\t\\t\\\"this is illegal address\\\"\\n\\t\\t);\\n\\n\\t\\t/**\\n\\t\\t * Stores the contract address proposed by a user as an internal variable.\\n\\t\\t */\\n\\t\\tbehavior = _behavior;\\n\\n\\t\\t/**\\n\\t\\t * By default this contract is disabled.\\n\\t\\t */\\n\\t\\tenabled = false;\\n\\n\\t\\t/**\\n\\t\\t * Sets the period during which voting by voters can be accepted.\\n\\t\\t * This period is determined by `Policy.marketVotingBlocks`.\\n\\t\\t */\\n\\t\\tuint256 marketVotingBlocks = IPolicy(config().policy())\\n\\t\\t\\t.marketVotingBlocks();\\n\\t\\tvotingEndBlockNumber = block.number.add(marketVotingBlocks);\\n\\t}\\n\\n\\t/**\\n\\t * Validates the sender is the passed Property's author.\\n\\t */\\n\\tfunction propertyValidation(address _prop) private view {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == IProperty(_prop).author(),\\n\\t\\t\\t\\\"this is illegal address\\\"\\n\\t\\t);\\n\\t\\trequire(enabled, \\\"market is not enabled\\\");\\n\\t}\\n\\n\\t/**\\n\\t * Modifier for validates the sender is the passed Property's author.\\n\\t */\\n\\tmodifier onlyPropertyAuthor(address _prop) {\\n\\t\\tpropertyValidation(_prop);\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * Modifier for validates the sender is the author of the Property associated with the passed Metrics contract.\\n\\t */\\n\\tmodifier onlyLinkedPropertyAuthor(address _metrics) {\\n\\t\\taddress _prop = IMetrics(_metrics).property();\\n\\t\\tpropertyValidation(_prop);\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * Activates this Market.\\n\\t * Called from MarketFactory contract.\\n\\t */\\n\\tfunction toEnable() external {\\n\\t\\trequire(msg.sender == config().marketFactory(), \\\"illegal accesss\\\");\\n\\t\\trequire(isDuringVotingPeriod(), \\\"deadline is over\\\");\\n\\t\\tenabled = true;\\n\\t}\\n\\n\\t/**\\n\\t * deactivates this Market.\\n\\t * Called from MarketFactory contract.\\n\\t */\\n\\tfunction toDisable() external {\\n\\t\\trequire(msg.sender == config().marketFactory(), \\\"illegal accesss\\\");\\n\\t\\tenabled = false;\\n\\t}\\n\\n\\t/**\\n\\t * Authenticates the new asset and proves that the Property author is the owner of the asset.\\n\\t */\\n\\tfunction authenticate(\\n\\t\\taddress _prop,\\n\\t\\tstring memory _args1,\\n\\t\\tstring memory _args2,\\n\\t\\tstring memory _args3,\\n\\t\\tstring memory _args4,\\n\\t\\tstring memory _args5\\n\\t) public onlyPropertyAuthor(_prop) returns (bool) {\\n\\t\\treturn\\n\\t\\t\\t_authenticate(\\n\\t\\t\\t\\t_prop,\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\t_args1,\\n\\t\\t\\t\\t_args2,\\n\\t\\t\\t\\t_args3,\\n\\t\\t\\t\\t_args4,\\n\\t\\t\\t\\t_args5\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * Authenticates the new asset and proves that the Property author is the owner of the asset.\\n\\t */\\n\\tfunction authenticateFromPropertyFactory(\\n\\t\\taddress _prop,\\n\\t\\taddress _author,\\n\\t\\tstring calldata _args1,\\n\\t\\tstring calldata _args2,\\n\\t\\tstring calldata _args3,\\n\\t\\tstring calldata _args4,\\n\\t\\tstring calldata _args5\\n\\t) external returns (bool) {\\n\\t\\t/**\\n\\t\\t * Validates the sender is PropertyFactory.\\n\\t\\t */\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == config().propertyFactory(),\\n\\t\\t\\t\\\"this is illegal address\\\"\\n\\t\\t);\\n\\n\\t\\t/**\\n\\t\\t * Validates this Market is already enabled..\\n\\t\\t */\\n\\t\\trequire(enabled, \\\"market is not enabled\\\");\\n\\n\\t\\treturn\\n\\t\\t\\t_authenticate(\\n\\t\\t\\t\\t_prop,\\n\\t\\t\\t\\t_author,\\n\\t\\t\\t\\t_args1,\\n\\t\\t\\t\\t_args2,\\n\\t\\t\\t\\t_args3,\\n\\t\\t\\t\\t_args4,\\n\\t\\t\\t\\t_args5\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * Bypass to IMarketBehavior.authenticate.\\n\\t * Authenticates the new asset and proves that the Property author is the owner of the asset.\\n\\t */\\n\\tfunction _authenticate(\\n\\t\\taddress _prop,\\n\\t\\taddress _author,\\n\\t\\tstring memory _args1,\\n\\t\\tstring memory _args2,\\n\\t\\tstring memory _args3,\\n\\t\\tstring memory _args4,\\n\\t\\tstring memory _args5\\n\\t) private returns (bool) {\\n\\t\\trequire(bytes(_args1).length > 0, \\\"id is required\\\");\\n\\n\\t\\treturn\\n\\t\\t\\tIMarketBehavior(behavior).authenticate(\\n\\t\\t\\t\\t_prop,\\n\\t\\t\\t\\t_args1,\\n\\t\\t\\t\\t_args2,\\n\\t\\t\\t\\t_args3,\\n\\t\\t\\t\\t_args4,\\n\\t\\t\\t\\t_args5,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t_author\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * Returns the authentication fee.\\n\\t * Calculates by gets the staking amount of the Property to be authenticated\\n\\t * and the total number of authenticated assets on the protocol, and calling `Policy.authenticationFee`.\\n\\t */\\n\\tfunction getAuthenticationFee(address _property)\\n\\t\\tprivate\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 tokenValue = ILockup(config().lockup()).getPropertyValue(\\n\\t\\t\\t_property\\n\\t\\t);\\n\\t\\tIPolicy policy = IPolicy(config().policy());\\n\\t\\tIMetricsGroup metricsGroup = IMetricsGroup(config().metricsGroup());\\n\\t\\treturn\\n\\t\\t\\tpolicy.authenticationFee(\\n\\t\\t\\t\\tmetricsGroup.totalIssuedMetrics(),\\n\\t\\t\\t\\ttokenValue\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * A function that will be called back when the asset is successfully authenticated.\\n\\t * There are cases where oracle is required for the authentication process, so the function is used callback style.\\n\\t */\\n\\tfunction authenticatedCallback(address _property, bytes32 _idHash)\\n\\t\\texternal\\n\\t\\treturns (address)\\n\\t{\\n\\t\\t/**\\n\\t\\t * Validates the sender is the saved IMarketBehavior address.\\n\\t\\t */\\n\\t\\trequire(msg.sender == behavior, \\\"this is illegal address\\\");\\n\\t\\trequire(enabled, \\\"market is not enabled\\\");\\n\\n\\t\\t/**\\n\\t\\t * Validates the assets are not double authenticated.\\n\\t\\t */\\n\\t\\trequire(idMap[_idHash] == false, \\\"id is duplicated\\\");\\n\\t\\tidMap[_idHash] = true;\\n\\n\\t\\t/**\\n\\t\\t * Gets the Property author address.\\n\\t\\t */\\n\\t\\taddress sender = IProperty(_property).author();\\n\\n\\t\\t/**\\n\\t\\t * Publishes a new Metrics contract and associate the Property with the asset.\\n\\t\\t */\\n\\t\\tIMetricsFactory metricsFactory = IMetricsFactory(\\n\\t\\t\\tconfig().metricsFactory()\\n\\t\\t);\\n\\t\\taddress metrics = metricsFactory.create(_property);\\n\\t\\tidHashMetricsMap[metrics] = _idHash;\\n\\n\\t\\t/**\\n\\t\\t * Burn as a authentication fee.\\n\\t\\t */\\n\\t\\tuint256 authenticationFee = getAuthenticationFee(_property);\\n\\t\\trequire(\\n\\t\\t\\tIDev(config().token()).fee(sender, authenticationFee),\\n\\t\\t\\t\\\"dev fee failed\\\"\\n\\t\\t);\\n\\n\\t\\t/**\\n\\t\\t * Adds the number of authenticated assets in this Market.\\n\\t\\t */\\n\\t\\tissuedMetrics = issuedMetrics.add(1);\\n\\t\\treturn metrics;\\n\\t}\\n\\n\\t/**\\n\\t * Release the authenticated asset.\\n\\t */\\n\\tfunction deauthenticate(address _metrics)\\n\\t\\texternal\\n\\t\\tonlyLinkedPropertyAuthor(_metrics)\\n\\t{\\n\\t\\t/**\\n\\t\\t * Validates the passed Metrics address is authenticated in this Market.\\n\\t\\t */\\n\\t\\tbytes32 idHash = idHashMetricsMap[_metrics];\\n\\t\\trequire(idMap[idHash], \\\"not authenticated\\\");\\n\\n\\t\\t/**\\n\\t\\t * Removes the authentication status from local variables.\\n\\t\\t */\\n\\t\\tidMap[idHash] = false;\\n\\t\\tidHashMetricsMap[_metrics] = bytes32(0);\\n\\n\\t\\t/**\\n\\t\\t * Removes the passed Metrics contract from the Metrics address set.\\n\\t\\t */\\n\\t\\tIMetricsFactory metricsFactory = IMetricsFactory(\\n\\t\\t\\tconfig().metricsFactory()\\n\\t\\t);\\n\\t\\tmetricsFactory.destroy(_metrics);\\n\\n\\t\\t/**\\n\\t\\t * Subtracts the number of authenticated assets in this Market.\\n\\t\\t */\\n\\t\\tissuedMetrics = issuedMetrics.sub(1);\\n\\t}\\n\\n\\t/**\\n\\t * Bypass to IMarketBehavior.schema.\\n\\t */\\n\\tfunction schema() external view returns (string memory) {\\n\\t\\treturn IMarketBehavior(behavior).schema();\\n\\t}\\n\\n\\tfunction isDuringVotingPeriod() private view returns (bool) {\\n\\t\\treturn block.number < votingEndBlockNumber;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"/contracts/src/common/config/UsingConfig.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"../../../interface/IAddressConfig.sol\\\";\\n\\n/**\\n * Module for using AddressConfig contracts.\\n */\\ncontract UsingConfig {\\n\\taddress private _config;\\n\\n\\t/**\\n\\t * Initialize the argument as AddressConfig address.\\n\\t */\\n\\tconstructor(address _addressConfig) public {\\n\\t\\t_config = _addressConfig;\\n\\t}\\n\\n\\t/**\\n\\t * Returns the latest AddressConfig instance.\\n\\t */\\n\\tfunction config() internal view returns (IAddressConfig) {\\n\\t\\treturn IAddressConfig(_config);\\n\\t}\\n\\n\\t/**\\n\\t * Returns the latest AddressConfig address.\\n\\t */\\n\\tfunction configAddress() external view returns (address) {\\n\\t\\treturn _config;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IProperty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MPL-2.0\\npragma solidity >=0.5.17;\\n\\ninterface IProperty {\\n\\tfunction author() external view returns (address);\\n\\n\\tfunction changeAuthor(address _nextAuthor) external;\\n\\n\\tfunction changeName(string calldata _name) external;\\n\\n\\tfunction changeSymbol(string calldata _symbol) external;\\n\\n\\tfunction withdraw(address _sender, uint256 _value) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IPolicy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MPL-2.0\\npragma solidity >=0.5.17;\\n\\ninterface IPolicy {\\n\\tfunction rewards(uint256 _lockups, uint256 _assets)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction holdersShare(uint256 _amount, uint256 _lockups)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction authenticationFee(uint256 _assets, uint256 _propertyAssets)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction marketVotingBlocks() external view returns (uint256);\\n\\n\\tfunction policyVotingBlocks() external view returns (uint256);\\n\\n\\tfunction shareOfTreasury(uint256 _supply) external view returns (uint256);\\n\\n\\tfunction treasury() external view returns (address);\\n\\n\\tfunction capSetter() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IMetricsGroup.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MPL-2.0\\npragma solidity >=0.5.17;\\n\\ninterface IMetricsGroup {\\n\\tfunction addGroup(address _addr) external;\\n\\n\\tfunction removeGroup(address _addr) external;\\n\\n\\tfunction isGroup(address _addr) external view returns (bool);\\n\\n\\tfunction totalIssuedMetrics() external view returns (uint256);\\n\\n\\tfunction hasAssets(address _property) external view returns (bool);\\n\\n\\tfunction getMetricsCountPerProperty(address _property)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction totalAuthenticatedProperties() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IMetricsFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MPL-2.0\\npragma solidity >=0.5.17;\\n\\ninterface IMetricsFactory {\\n\\tfunction create(address _property) external returns (address);\\n\\n\\tfunction destroy(address _metrics) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IMetrics.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MPL-2.0\\npragma solidity >=0.5.17;\\n\\ninterface IMetrics {\\n\\tfunction market() external view returns (address);\\n\\n\\tfunction property() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IMarketGroup.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MPL-2.0\\npragma solidity >=0.5.17;\\n\\ninterface IMarketGroup {\\n\\tfunction addGroup(address _addr) external;\\n\\n\\tfunction deleteGroup(address _addr) external;\\n\\n\\tfunction isGroup(address _addr) external view returns (bool);\\n\\n\\tfunction getCount() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IMarketFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MPL-2.0\\npragma solidity >=0.5.17;\\n\\ninterface IMarketFactory {\\n\\tfunction create(address _addr) external returns (address);\\n\\n\\tfunction enable(address _addr) external;\\n\\n\\tfunction disable(address _addr) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IMarketBehavior.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MPL-2.0\\npragma solidity >=0.5.17;\\n\\ninterface IMarketBehavior {\\n\\tfunction authenticate(\\n\\t\\taddress _prop,\\n\\t\\tstring calldata _args1,\\n\\t\\tstring calldata _args2,\\n\\t\\tstring calldata _args3,\\n\\t\\tstring calldata _args4,\\n\\t\\tstring calldata _args5,\\n\\t\\taddress market,\\n\\t\\taddress account\\n\\t) external returns (bool);\\n\\n\\tfunction schema() external view returns (string memory);\\n\\n\\tfunction getId(address _metrics) external view returns (string memory);\\n\\n\\tfunction getMetrics(string calldata _id) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MPL-2.0\\npragma solidity >=0.5.17;\\n\\ninterface IMarket {\\n\\tfunction authenticate(\\n\\t\\taddress _prop,\\n\\t\\tstring calldata _args1,\\n\\t\\tstring calldata _args2,\\n\\t\\tstring calldata _args3,\\n\\t\\tstring calldata _args4,\\n\\t\\tstring calldata _args5\\n\\t) external returns (bool);\\n\\n\\tfunction authenticateFromPropertyFactory(\\n\\t\\taddress _prop,\\n\\t\\taddress _author,\\n\\t\\tstring calldata _args1,\\n\\t\\tstring calldata _args2,\\n\\t\\tstring calldata _args3,\\n\\t\\tstring calldata _args4,\\n\\t\\tstring calldata _args5\\n\\t) external returns (bool);\\n\\n\\tfunction authenticatedCallback(address _property, bytes32 _idHash)\\n\\t\\texternal\\n\\t\\treturns (address);\\n\\n\\tfunction deauthenticate(address _metrics) external;\\n\\n\\tfunction schema() external view returns (string memory);\\n\\n\\tfunction behavior() external view returns (address);\\n\\n\\tfunction issuedMetrics() external view returns (uint256);\\n\\n\\tfunction enabled() external view returns (bool);\\n\\n\\tfunction votingEndBlockNumber() external view returns (uint256);\\n\\n\\tfunction toEnable() external;\\n\\n\\tfunction toDisable() external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/ILockup.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MPL-2.0\\npragma solidity >=0.5.17;\\n\\ninterface ILockup {\\n\\tfunction depositToProperty(address _property, uint256 _amount)\\n\\t\\texternal\\n\\t\\treturns (uint256);\\n\\n\\tfunction depositToPosition(uint256 _tokenId, uint256 _amount)\\n\\t\\texternal\\n\\t\\treturns (bool);\\n\\n\\tfunction lockup(\\n\\t\\taddress _from,\\n\\t\\taddress _property,\\n\\t\\tuint256 _value\\n\\t) external;\\n\\n\\tfunction update() external;\\n\\n\\tfunction withdraw(address _property, uint256 _amount) external;\\n\\n\\tfunction withdrawByPosition(uint256 _tokenId, uint256 _amount)\\n\\t\\texternal\\n\\t\\treturns (bool);\\n\\n\\tfunction calculateCumulativeRewardPrices()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 _reward,\\n\\t\\t\\tuint256 _holders,\\n\\t\\t\\tuint256 _interest,\\n\\t\\t\\tuint256 _holdersCap\\n\\t\\t);\\n\\n\\tfunction calculateRewardAmount(address _property)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256, uint256);\\n\\n\\t/**\\n\\t * caution!!!this function is deprecated!!!\\n\\t * use calculateRewardAmount\\n\\t */\\n\\tfunction calculateCumulativeHoldersRewardAmount(address _property)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction getPropertyValue(address _property)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction getAllValue() external view returns (uint256);\\n\\n\\tfunction getValue(address _property, address _sender)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction calculateWithdrawableInterestAmount(\\n\\t\\taddress _property,\\n\\t\\taddress _user\\n\\t) external view returns (uint256);\\n\\n\\tfunction calculateWithdrawableInterestAmountByPosition(uint256 _tokenId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction cap() external view returns (uint256);\\n\\n\\tfunction updateCap(uint256 _cap) external;\\n\\n\\tfunction devMinter() external view returns (address);\\n\\n\\tfunction sTokensManager() external view returns (address);\\n\\n\\tfunction migrateToSTokens(address _property) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IDev.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MPL-2.0\\npragma solidity >=0.5.17;\\n\\ninterface IDev {\\n\\tfunction deposit(address _to, uint256 _amount) external returns (bool);\\n\\n\\tfunction depositFrom(\\n\\t\\taddress _from,\\n\\t\\taddress _to,\\n\\t\\tuint256 _amount\\n\\t) external returns (bool);\\n\\n\\tfunction fee(address _from, uint256 _amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IAddressConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MPL-2.0\\npragma solidity >=0.5.17;\\n\\ninterface IAddressConfig {\\n\\tfunction token() external view returns (address);\\n\\n\\tfunction allocator() external view returns (address);\\n\\n\\tfunction allocatorStorage() external view returns (address);\\n\\n\\tfunction withdraw() external view returns (address);\\n\\n\\tfunction withdrawStorage() external view returns (address);\\n\\n\\tfunction marketFactory() external view returns (address);\\n\\n\\tfunction marketGroup() external view returns (address);\\n\\n\\tfunction propertyFactory() external view returns (address);\\n\\n\\tfunction propertyGroup() external view returns (address);\\n\\n\\tfunction metricsGroup() external view returns (address);\\n\\n\\tfunction metricsFactory() external view returns (address);\\n\\n\\tfunction policy() external view returns (address);\\n\\n\\tfunction policyFactory() external view returns (address);\\n\\n\\tfunction policySet() external view returns (address);\\n\\n\\tfunction policyGroup() external view returns (address);\\n\\n\\tfunction lockup() external view returns (address);\\n\\n\\tfunction lockupStorage() external view returns (address);\\n\\n\\tfunction voteTimes() external view returns (address);\\n\\n\\tfunction voteTimesStorage() external view returns (address);\\n\\n\\tfunction voteCounter() external view returns (address);\\n\\n\\tfunction voteCounterStorage() external view returns (address);\\n\\n\\tfunction setAllocator(address _addr) external;\\n\\n\\tfunction setAllocatorStorage(address _addr) external;\\n\\n\\tfunction setWithdraw(address _addr) external;\\n\\n\\tfunction setWithdrawStorage(address _addr) external;\\n\\n\\tfunction setMarketFactory(address _addr) external;\\n\\n\\tfunction setMarketGroup(address _addr) external;\\n\\n\\tfunction setPropertyFactory(address _addr) external;\\n\\n\\tfunction setPropertyGroup(address _addr) external;\\n\\n\\tfunction setMetricsFactory(address _addr) external;\\n\\n\\tfunction setMetricsGroup(address _addr) external;\\n\\n\\tfunction setPolicyFactory(address _addr) external;\\n\\n\\tfunction setPolicyGroup(address _addr) external;\\n\\n\\tfunction setPolicySet(address _addr) external;\\n\\n\\tfunction setPolicy(address _addr) external;\\n\\n\\tfunction setToken(address _addr) external;\\n\\n\\tfunction setLockup(address _addr) external;\\n\\n\\tfunction setLockupStorage(address _addr) external;\\n\\n\\tfunction setVoteTimes(address _addr) external;\\n\\n\\tfunction setVoteTimesStorage(address _addr) external;\\n\\n\\tfunction setVoteCounter(address _addr) external;\\n\\n\\tfunction setVoteCounterStorage(address _addr) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"configAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"disable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"enable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MarketFactory","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001d415aa39d647834786eb9b5a333a50e9935b796","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}