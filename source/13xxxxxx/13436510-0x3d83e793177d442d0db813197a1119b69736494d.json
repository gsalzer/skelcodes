{"status":"1","message":"OK","result":[{"SourceCode":"//Orenda Protocol - Multichain DeFi & Insurance Services\r\n//www.or-protocol.io\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () public{\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract OrexTokenCore is ERC20(\"Orenda Protocol\", \"OREX\"), Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address internal _taxer;\r\n    address internal _pool;\r\n    address internal _devfund;\r\n    address internal _daofund;\r\n    uint internal _taxTime;\r\n    uint internal constant _taxRate = 2; //2 percent\r\n    bool internal _lock = true;\r\n    mapping (address => bool) internal _taxWhitelist;\r\n    mapping (address => bool) internal _plan4Whitelist;\r\n    mapping (address => bool) internal _plan5Whitelist;\r\n    mapping (address => bool) internal _unlockWhitelist;\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        require(msg.sender == owner() || _unlockWhitelist[msg.sender] || !_lock, \"Transfer is locking\");\r\n\r\n        uint256 taxAmount = amount.mul(_taxRate).div(100);\r\n        if (_taxWhitelist[msg.sender] == true || _taxTime > block.timestamp) {\r\n            taxAmount = 0;\r\n        }\r\n        uint256 transferAmount = amount.sub(taxAmount);\r\n        require(balanceOf(msg.sender) >= amount, \"insufficient balance.\");\r\n        super.transfer(recipient, transferAmount);\r\n\r\n        if (taxAmount != 0) {\r\n            super.transfer(_pool, taxAmount.div(2));\r\n            super.transfer(_devfund, taxAmount.div(4));\r\n            super.transfer(_daofund, taxAmount.div(4));\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        require(sender == owner() || _unlockWhitelist[msg.sender] || !_lock, \"TransferFrom is locking\");\r\n\r\n        uint256 taxAmount = amount.mul(_taxRate).div(100);\r\n        if (_taxWhitelist[sender] == true || _taxTime > block.timestamp ) {\r\n            taxAmount = 0;\r\n        }\r\n        uint256 transferAmount = amount.sub(taxAmount);\r\n        require(balanceOf(sender) >= amount, \"insufficient balance.\");\r\n        super.transferFrom(sender, recipient, transferAmount);\r\n        if (taxAmount != 0) {\r\n            super.transfer(_pool, taxAmount.div(2));\r\n            super.transfer(_devfund, taxAmount.div(4));\r\n            super.transfer(_daofund, taxAmount.div(4));\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract OrexToken is OrexTokenCore {\r\n    \r\n    event Taxer(address indexed account);\r\n\r\n    constructor() public{\r\n        _mint(owner(), 1000000000000000000000000);\r\n        _taxer = owner();\r\n        _pool = address(0x401d6C6fFC28db4c43C0b52E7AF1F8A607576842);\r\n        _devfund = address(0xE58A34f524eEBb396C124B28EE2f41Cf0b77E362);\r\n        _daofund = address(0xE2C707559f0cbB82Ca9bC078E5B6c7522FF1d314);\r\n        _taxTime = block.timestamp + 30 days;\r\n    }\r\n\r\n    function burn(uint amount) public {\r\n        require(amount > 0);\r\n        require(balanceOf(msg.sender) >= amount);\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    modifier onlyTaxer() {\r\n        require(msg.sender == _taxer, \"Only for taxer.\");\r\n        _;\r\n    }\r\n\r\n    function setTaxer(address account) public onlyTaxer {\r\n        _taxer = account;\r\n        emit Taxer(_taxer);\r\n    }\r\n\r\n\r\n    function addToTaxWhitelist(address account) public onlyTaxer {\r\n        _taxWhitelist[account] = true;\r\n    }\r\n\r\n    function removeFromTaxWhitelist(address account) public onlyTaxer {\r\n        _taxWhitelist[account] = false;\r\n    }\r\n    \r\n    function addToPlan4Whitelist(address account) public onlyOwner {\r\n        _plan4Whitelist[account] = true;\r\n    }\r\n\r\n    function removeFromPlan4Whitelist(address account) public onlyOwner {\r\n        _plan4Whitelist[account] = false;\r\n    }\r\n    \r\n    function addToPlan5Whitelist(address account) public onlyOwner {\r\n        _plan5Whitelist[account] = true;\r\n    }\r\n\r\n    function removeFromPlan5Whitelist(address account) public onlyOwner {\r\n        _plan5Whitelist[account] = false;\r\n    }\r\n    \r\n    function addToUnlockWhitelist(address account) public onlyOwner {\r\n        _unlockWhitelist[account] = true;\r\n    }\r\n\r\n    function removeFromUnlockWhitelist(address account) public onlyOwner {\r\n        _unlockWhitelist[account] = false;\r\n    }\r\n\r\n    function taxer() public view returns(address) {\r\n        return _taxer;\r\n    }\r\n\r\n    function pool() public view returns(address) {\r\n        return _pool;\r\n    }\r\n\r\n    function devfund() public view returns(address) {\r\n        return _devfund;\r\n    }\r\n\r\n    function daofund() public view returns(address) {\r\n        return _daofund;\r\n    }\r\n\r\n    function taxRate() public view returns(uint256) {\r\n        return _taxRate;\r\n    }\r\n\r\n    function isInTaxWhitelist(address account) public view returns(bool) {\r\n        return _taxWhitelist[account];\r\n    }\r\n    \r\n    function isInPlan4Whitelist(address account) public view returns(bool) {\r\n        return _plan4Whitelist[account];\r\n    }\r\n    \r\n    function isInPlan5Whitelist(address account) public view returns(bool) {\r\n        return _plan5Whitelist[account];\r\n    }\r\n    \r\n    function isInUnlockWhitelist(address account) public view returns(bool) {\r\n        return _unlockWhitelist[account];\r\n    }\r\n\r\n    function unlock() public onlyOwner {\r\n        _lock = false;\r\n    }\r\n\r\n    function getLockStatus() view public returns(bool) {\r\n        return _lock;\r\n    }\r\n\r\n\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Staking is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for OrexToken;\r\n    using Address for address;\r\n\r\n    OrexToken public token;\r\n    \r\n    // annual yield period\r\n    uint256 private constant DURATION = 365 days;\r\n    uint256 private constant MINIMUM_AMOUNT = 1e18;\r\n    //uint256 public _poolAmount = 0;\r\n    bool public haveStarted = false;\r\n    //uint256 public _totalTokenBalance;\r\n    \r\n    uint256 public _plan1RewardLimit = 70000e18;\r\n    uint256 public _plan2RewardLimit = 55000e18;\r\n    uint256 public _plan3RewardLimit = 45000e18;\r\n    uint256 public _plan4RewardLimit = 60000e18;\r\n    uint256 public _plan5RewardLimit = 20000e18;\r\n    uint256 public _plan1RewardAmount = 0;\r\n    uint256 public _plan2RewardAmount = 0;\r\n    uint256 public _plan3RewardAmount = 0;\r\n    uint256 public _plan4RewardAmount = 0;\r\n    uint256 public _plan5RewardAmount = 0;\r\n\r\n    mapping(address => uint256) private _stakerTokenBalance;\r\n    mapping(address => uint256) public _stakerRewardRate;\r\n    mapping(address => uint256) public _stakerStakingPlan;\r\n    mapping(address => uint256) public _stakerWithdrawFeeRate;\r\n    mapping(address => uint256) public _stakerStakingTime;\r\n    mapping(address => uint256) public _stakerTokenRewardsClaimed;\r\n\r\n    event Stake(address indexed from, uint amount);\r\n    event Withdraw(address indexed to, uint amount);\r\n    event Claim(address indexed to, uint amount);\r\n    event StartStaking(bool haveStarted);\r\n\r\n    constructor(address _token) public{\r\n        token = OrexToken(_token);\r\n    }\r\n\r\n\r\n    function stake(uint plan, uint amount) public shouldStarted {\r\n        \r\n        require(_stakerStakingPlan[msg.sender] == 0, \"Withdraw your current plan.\");\r\n        require(!address(msg.sender).isContract(), \"Please use your individual account.\");\r\n        require(amount >= MINIMUM_AMOUNT, \"Should stake at least 1 Token.\");\r\n        \r\n        _stakerStakingTime[msg.sender] = block.timestamp;\r\n        _stakerStakingPlan[msg.sender] = plan;\r\n\r\n        updateRewards(msg.sender);\r\n        \r\n        token.safeTransferFrom(msg.sender, address(this), amount);\r\n       // _totalTokenBalance = _totalTokenBalance.add(amount);\r\n        _stakerTokenBalance[msg.sender] = _stakerTokenBalance[msg.sender].add(amount);\r\n        \r\n        emit Stake(msg.sender, amount);\r\n    }\r\n\r\n    function withdraw(uint amount) public shouldStarted {\r\n        \r\n        require(amount <= _stakerTokenBalance[msg.sender] && _stakerTokenBalance[msg.sender] > 0, \"Bad withdraw.\");\r\n        \r\n        if(_stakerStakingPlan[msg.sender] == 4 || _stakerStakingPlan[msg.sender] == 5){\r\n            require(block.timestamp >= _stakerStakingTime[msg.sender] + 30 days, \"Early withdrawal available after 30 days\");\r\n        }\r\n        \r\n        claim();\r\n        \r\n        _stakerTokenBalance[msg.sender] = _stakerTokenBalance[msg.sender].sub(amount);\r\n        _stakerTokenRewardsClaimed[msg.sender] = 0;\r\n        _stakerStakingPlan[msg.sender] = 0;\r\n\r\n\r\n        if(_stakerWithdrawFeeRate[msg.sender] > 0){\r\n            uint256 _burnedAmount = amount.mul(_stakerWithdrawFeeRate[msg.sender]).div(100);\r\n            amount = amount.sub(_burnedAmount);\r\n            token.burn(_burnedAmount);\r\n        }\r\n        \r\n        token.safeTransfer(msg.sender, amount);\r\n        \r\n        emit Withdraw(msg.sender, amount);\r\n    }\r\n    \r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint amount) public shouldStarted {\r\n        require(amount <= _stakerTokenBalance[msg.sender] && _stakerTokenBalance[msg.sender] > 0, \"Bad withdraw.\");\r\n        \r\n        if(_stakerStakingPlan[msg.sender] == 4 || _stakerStakingPlan[msg.sender] == 5){\r\n            require(block.timestamp >= _stakerStakingTime[msg.sender] + 30 days, \"Early withdrawal available after 30 days\");\r\n        }\r\n        \r\n        updateRewards(msg.sender);\r\n        \r\n        _stakerTokenBalance[msg.sender] = _stakerTokenBalance[msg.sender].sub(amount);\r\n        _stakerTokenRewardsClaimed[msg.sender] = 0;\r\n        _stakerStakingPlan[msg.sender] = 0;\r\n\r\n\r\n        if(_stakerWithdrawFeeRate[msg.sender] > 0){\r\n            uint256 _burnedAmount = amount.mul(_stakerWithdrawFeeRate[msg.sender]).div(100);\r\n            amount = amount.sub(_burnedAmount);\r\n            token.burn(_burnedAmount);\r\n        }\r\n        \r\n        token.safeTransfer(msg.sender, amount);\r\n        \r\n        emit Withdraw(msg.sender, amount);\r\n    }\r\n\r\n    function claim() public shouldStarted {\r\n        \r\n        uint pending = getTotalRewardsAmount(msg.sender);\r\n        \r\n        updateRewards(msg.sender);\r\n\r\n        if(pending > 0 && token.balanceOf(address(this)) > 0){\r\n\r\n            if(_stakerStakingPlan[msg.sender] == 1){\r\n                \r\n            require(_plan1RewardLimit >= _plan1RewardAmount, \"Reward Limit 70,000 Tokens\");\r\n             _plan1RewardAmount = _plan1RewardAmount.add(pending);\r\n          \r\n        } else if(_stakerStakingPlan[msg.sender] == 2){\r\n\r\n            require(_plan2RewardLimit >= _plan2RewardAmount, \"Reward Limit 55,000 Tokens\");\r\n             _plan2RewardAmount = _plan2RewardAmount.add(pending);\r\n            \r\n        } else if(_stakerStakingPlan[msg.sender] == 3){\r\n    \r\n           require(_plan3RewardLimit >= _plan3RewardAmount, \"Reward Limit 45,000 Tokens\");\r\n            _plan3RewardAmount = _plan3RewardAmount.add(pending);\r\n            \r\n        } else if(_stakerStakingPlan[msg.sender] == 4){\r\n\r\n           require(_plan4RewardLimit >= _plan4RewardAmount, \"Reward Limit 60,000 Tokens\");\r\n            _plan4RewardAmount = _plan4RewardAmount.add(pending);\r\n           \r\n            \r\n        } else if(_stakerStakingPlan[msg.sender] == 5){\r\n\r\n           require(_plan5RewardLimit >= _plan5RewardAmount, \"Reward Limit 20,000 Tokens\");\r\n           _plan5RewardAmount = _plan5RewardAmount.add(pending);\r\n            \r\n        }\r\n        \r\n        token.safeTransfer(msg.sender, getTotalRewardsAmount(msg.sender));\r\n        \r\n       \r\n        _stakerTokenRewardsClaimed[msg.sender] = _stakerTokenRewardsClaimed[msg.sender].add(pending);\r\n        \r\n        \r\n        emit Claim(msg.sender, pending);\r\n\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    modifier shouldStarted() {\r\n        require(haveStarted == true, \"Have not started.\");\r\n        _;\r\n    }\r\n\r\n    function getRewardsAmountPerSeconds(address account) public view returns(uint256) {\r\n        return balanceOf(account).mul(_stakerRewardRate[msg.sender]).div(100)\r\n                .div(DURATION);\r\n    }\r\n    \r\n    function balanceOf(address account) public view returns(uint256) {\r\n        return _stakerTokenBalance[account];\r\n    }\r\n    \r\n    function getTotalRewardsAmount(address account) public view returns (uint256) {\r\n   \r\n        return block.timestamp.sub(_stakerStakingTime[account]).mul(getRewardsAmountPerSeconds(account)).sub(_stakerTokenRewardsClaimed[account]);\r\n    }\r\n\r\n\r\n    function updateRewards(address account) internal {\r\n        \r\n        if(_stakerStakingPlan[msg.sender] == 1){\r\n\r\n            _stakerRewardRate[msg.sender] = 40;\r\n\r\n            if(block.timestamp < _stakerStakingTime[msg.sender] + 60 days){\r\n                 _stakerWithdrawFeeRate[msg.sender] = 6;\r\n            } else {\r\n                _stakerWithdrawFeeRate[msg.sender] = 0;\r\n            }\r\n\r\n        } else if(_stakerStakingPlan[msg.sender] == 2){\r\n\r\n            _stakerRewardRate[msg.sender] = 69;\r\n\r\n            if(block.timestamp < _stakerStakingTime[msg.sender] + 120 days){\r\n                 _stakerWithdrawFeeRate[msg.sender] = 12;\r\n            } else {\r\n                _stakerWithdrawFeeRate[msg.sender] = 0;\r\n            }\r\n            \r\n        } else if(_stakerStakingPlan[msg.sender] == 3){\r\n\r\n            _stakerRewardRate[msg.sender] = 81;\r\n\r\n            if(block.timestamp < _stakerStakingTime[msg.sender] + 240 days){\r\n                 _stakerWithdrawFeeRate[msg.sender] = 24;\r\n            } else {\r\n                _stakerWithdrawFeeRate[msg.sender] = 0;\r\n            }\r\n            \r\n        } else if(_stakerStakingPlan[msg.sender] == 4 &&  token.isInPlan4Whitelist(msg.sender)){\r\n\r\n            _stakerRewardRate[msg.sender] = 75;\r\n            _stakerWithdrawFeeRate[msg.sender] = 0;\r\n            \r\n            \r\n        } else if(_stakerStakingPlan[msg.sender] == 5 &&  token.isInPlan5Whitelist(msg.sender) ){\r\n\r\n            _stakerRewardRate[msg.sender] = 40;\r\n            _stakerWithdrawFeeRate[msg.sender] = 0;\r\n            \r\n        }\r\n\r\n        \r\n    }\r\n\r\n    function startStaking() external onlyOwner {\r\n        updateRewards(address(0));\r\n        haveStarted = true;\r\n        emit StartStaking(haveStarted);\r\n    }\r\n\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"haveStarted\",\"type\":\"bool\"}],\"name\":\"StartStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_plan1RewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_plan1RewardLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_plan2RewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_plan2RewardLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_plan3RewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_plan3RewardLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_plan4RewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_plan4RewardLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_plan5RewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_plan5RewardLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerStakingPlan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerStakingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerTokenRewardsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerWithdrawFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRewardsAmountPerSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTotalRewardsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haveStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract OrexToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Staking","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001a58b77d529cf012443094422ed1c9f29e76aaee","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7c90be0a565c04139534ce9f6cdcd23684f9855fd1d83f139bacba0b78866865"}]}