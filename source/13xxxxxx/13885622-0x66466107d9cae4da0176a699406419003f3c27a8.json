{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/royaltyFeeHelpers/RoyaltyFeeSetter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport {IRoyaltyFeeRegistry} from \\\"../interfaces/IRoyaltyFeeRegistry.sol\\\";\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @title RoyaltyFeeSetter\\n * @notice It is used to allow creators to set royalty parameters in the RoyaltyFeeRegistry.\\n */\\ncontract RoyaltyFeeSetter is Ownable {\\n    // ERC721 interfaceID\\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    // ERC1155 interfaceID\\n    bytes4 public constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    // ERC2981 interfaceID\\n    bytes4 public constant INTERFACE_ID_ERC2981 = 0x2a55205a;\\n\\n    address public immutable royaltyFeeRegistry;\\n\\n    /**\\n     * @notice Constructor\\n     * @param _royaltyFeeRegistry address of the royalty fee registry\\n     */\\n    constructor(address _royaltyFeeRegistry) {\\n        royaltyFeeRegistry = _royaltyFeeRegistry;\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection if admin\\n     * @dev Only to be called if there is no setter address\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForCollectionIfAdmin(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external {\\n        require(!IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981), \\\"Admin: Must not be ERC2981\\\");\\n        require(msg.sender == IOwnable(collection).admin(), \\\"Admin: Not the admin\\\");\\n\\n        _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(collection, setter, receiver, fee);\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection if owner\\n     * @dev Only to be called if there is no setter address\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForCollectionIfOwner(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external {\\n        require(!IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981), \\\"Owner: Must not be ERC2981\\\");\\n        require(msg.sender == IOwnable(collection).owner(), \\\"Owner: Not the owner\\\");\\n\\n        _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(collection, setter, receiver, fee);\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @dev Only to be called if there msg.sender is the setter\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForCollectionIfSetter(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external {\\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry).royaltyFeeInfoCollection(collection);\\n        require(msg.sender == currentSetter, \\\"Setter: Not the setter\\\");\\n\\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(collection, setter, receiver, fee);\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @dev Can only be called by contract owner (of this)\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForCollection(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external onlyOwner {\\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(collection, setter, receiver, fee);\\n    }\\n\\n    /**\\n     * @notice Update owner of royalty fee registry\\n     * @dev Can be used for migration of this royalty fee setter contract\\n     * @param _owner new owner address\\n     */\\n    function updateOwnerOfRoyaltyFeeRegistry(address _owner) external onlyOwner {\\n        IOwnable(royaltyFeeRegistry).transferOwnership(_owner);\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external onlyOwner {\\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyFeeLimit(_royaltyFeeLimit);\\n    }\\n\\n    /**\\n     * @notice Check royalty info for collection\\n     * @param collection collection address\\n     * @return (whether there is a setter (address(0 if not)),\\n     * Position\\n     * 0: Royalty setter is set in the registry\\n     * 1: ERC2981 and no setter\\n     * 2: setter can be set using owner()\\n     * 3: setter can be set using admin()\\n     * 4: setter cannot be set, nor support for ERC2981\\n     */\\n    function checkForCollectionSetter(address collection) external view returns (address, uint8) {\\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry).royaltyFeeInfoCollection(collection);\\n\\n        if (currentSetter != address(0)) {\\n            return (currentSetter, 0);\\n        }\\n\\n        try IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981) returns (bool interfaceSupport) {\\n            if (interfaceSupport) {\\n                return (address(0), 1);\\n            }\\n        } catch {}\\n\\n        try IOwnable(collection).owner() returns (address setter) {\\n            return (setter, 2);\\n        } catch {\\n            try IOwnable(collection).admin() returns (address setter) {\\n                return (setter, 3);\\n            } catch {\\n                return (address(0), 4);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Update information and perform checks before updating royalty fee registry\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) internal {\\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry).royaltyFeeInfoCollection(collection);\\n        require(currentSetter == address(0), \\\"Setter: Already set\\\");\\n\\n        require(\\n            (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721) ||\\n                IERC165(collection).supportsInterface(INTERFACE_ID_ERC1155)),\\n            \\\"Setter: Not ERC721/ERC1155\\\"\\n        );\\n\\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(collection, setter, receiver, fee);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRoyaltyFeeRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRoyaltyFeeRegistry {\\n    function updateRoyaltyInfoForCollection(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external;\\n\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external;\\n\\n    function royaltyInfo(address collection, uint256 amount) external view returns (address, uint256);\\n\\n    function royaltyFeeInfoCollection(address collection)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address);\\n\\n    function admin() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 888888\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyFeeRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INTERFACE_ID_ERC1155\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTERFACE_ID_ERC2981\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTERFACE_ID_ERC721\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"checkForCollectionSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"updateOwnerOfRoyaltyFeeRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royaltyFeeLimit\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyFeeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfoForCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfoForCollectionIfAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfoForCollectionIfOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfoForCollectionIfSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RoyaltyFeeSetter","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"888888","ConstructorArguments":"00000000000000000000000055010472a93921a117aad9b055c141060c8d8022","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}