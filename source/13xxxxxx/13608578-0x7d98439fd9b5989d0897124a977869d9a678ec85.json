{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/EtherOrcs-VersionRaids.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.7;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./ERC721.sol\\\"; \\n\\n//    ___ _   _               ___            \\n//  | __| |_| |_  ___ _ _   / _ \\\\ _ _ __ ___\\n//  | _||  _| ' \\\\/ -_) '_| | (_) | '_/ _(_-<\\n//  |___|\\\\__|_||_\\\\___|_|    \\\\___/|_| \\\\__/__/\\n//\\n\\ninterface MetadataHandlerLike {\\n    function getTokenURI(uint16 id, uint8 body, uint8 helm, uint8 mainhand, uint8 offhand, uint16 level, uint16 zugModifier) external view returns (string memory);\\n}\\n\\ninterface RaidsLike {\\n    function stakeManyAndStartCampaign(uint256[] calldata ids_, address owner_, uint256 location_, bool double_) external;\\n    function startCampaignWithMany(uint256[] calldata ids, uint256 location_, bool double_) external;\\n    function commanders(uint256 id) external returns(address);\\n    function unstake(uint256 id) external;\\n}\\n\\ncontract EtherOrcs is ERC721 {\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    Global STATE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public constant  cooldown = 10 minutes;\\n    uint256 public constant  startingTime = 1633951800 + 4.5 hours;\\n\\n    address public migrator;\\n\\n    bytes32 internal entropySauce;\\n\\n    ERC20 public zug;\\n\\n    mapping (address => bool)     public auth;\\n    mapping (uint256 => Orc)      public orcs;\\n    mapping (uint256 => Action)   public activities;\\n    mapping (Places  => LootPool) public lootPools;\\n    \\n    uint256 mintedFromThis = 0;\\n    bool mintOpen = false;\\n\\n    MetadataHandlerLike metadaHandler;\\n    address public raids = 0x47DC8e20C15f6deAA5cBFeAe6cf9946aCC89af59;\\n    mapping(bytes4 => address) implementer;\\n\\n    address constant impl = 0x0e3978aeB3fe16d5E77ddcbe1552f5537F226560;\\n\\n    function setImplementer(bytes4[] calldata funcs, address source) external onlyOwner {\\n        for (uint256 index = 0; index < funcs.length; index++) {\\n            implementer[funcs[index]] = source; \\n        }\\n    }\\n\\n    function tokenURI(uint256 id) external view returns(string memory) {\\n        Orc memory orc = orcs[id];\\n        return metadaHandler.getTokenURI(uint16(id), orc.body, orc.helm, orc.mainhand, orc.offhand, orc.level, orc.zugModifier);\\n    }\\n\\n    event ActionMade(address owner, uint256 id, uint256 timestamp, uint8 activity);\\n\\n\\n    /*///////////////////////////////////////////////////////////////\\n                DATA STRUCTURES \\n    //////////////////////////////////////////////////////////////*/\\n\\n    struct LootPool { \\n        uint8  minLevel; uint8  minLootTier; uint16  cost;   uint16 total;\\n        uint16 tier_1;   uint16 tier_2;      uint16 tier_3; uint16 tier_4;\\n    }\\n\\n    struct Orc { uint8 body; uint8 helm; uint8 mainhand; uint8 offhand; uint16 level; uint16 zugModifier; uint32 lvlProgress; }\\n\\n    enum   Actions { UNSTAKED, FARMING, TRAINING }\\n    struct Action  { address owner; uint88 timestamp; Actions action; }\\n\\n    // These are all the places you can go search for loot\\n    enum Places { \\n        TOWN, DUNGEON, CRYPT, CASTLE, DRAGONS_LAIR, THE_ETHER, \\n        TAINTED_KINGDOM, OOZING_DEN, ANCIENT_CHAMBER, ORC_GODS \\n    }   \\n\\n    /*///////////////////////////////////////////////////////////////\\n                    MODIFIERS \\n    //////////////////////////////////////////////////////////////*/\\n\\n    modifier noCheaters() {\\n        uint256 size = 0;\\n        address acc = msg.sender;\\n        assembly { size := extcodesize(acc)}\\n\\n        require(auth[msg.sender] || (msg.sender == tx.origin && size == 0), \\\"you're trying to cheat!\\\");\\n        _;\\n\\n        // We'll use the last caller hash to add entropy to next caller\\n        entropySauce = keccak256(abi.encodePacked(acc, block.coinbase));\\n    }\\n\\n    modifier ownerOfOrc(uint256 id) { \\n        require(ownerOf[id] == msg.sender || activities[id].owner == msg.sender, \\\"not your orc\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == admin);\\n        _;\\n    }\\n\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    PUBLIC FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function doAction(uint256 id, Actions action_) public ownerOfOrc(id) noCheaters {\\n       _doAction(id, msg.sender, action_);\\n    }\\n\\n    function _doAction(uint256 id, address orcOwner, Actions action_) internal ownerOfOrc(id) {\\n        Action memory action = activities[id];\\n        require(action.action != action_, \\\"already doing that\\\");\\n\\n        // Picking the largest value between block.timestamp, action.timestamp and startingTime\\n        uint88 timestamp = uint88(block.timestamp > action.timestamp ? block.timestamp : action.timestamp);\\n\\n        if (action.action == Actions.UNSTAKED)  _transfer(orcOwner, address(this), id);\\n     \\n        else {\\n            if (block.timestamp > action.timestamp) _claim(id);\\n            timestamp = timestamp > action.timestamp ? timestamp : action.timestamp;\\n        }\\n\\n        address owner_ = action_ == Actions.UNSTAKED ? address(0) : orcOwner;\\n        if (action_ == Actions.UNSTAKED) _transfer(address(this), orcOwner, id);\\n\\n        activities[id] = Action({owner: owner_, action: action_,timestamp: timestamp});\\n        emit ActionMade(orcOwner, id, block.timestamp, uint8(action_));\\n    }\\n\\n    function doActionWithManyOrcs(uint256[] calldata ids, Actions action_) external {\\n        for (uint256 index = 0; index < ids.length; index++) {\\n            _doAction(ids[index], msg.sender, action_);\\n        }\\n    }\\n\\n    function pillageWithManyOrcs(uint256[] calldata ids, Places place, bool tryHelm, bool tryMainhand, bool tryOffhand) external {\\n        for (uint256 index = 0; index < ids.length; index++) {\\n            pillage(ids[index], place, tryHelm, tryMainhand,tryOffhand);\\n        }\\n    }\\n\\n    function claim(uint256[] calldata ids) external {\\n        for (uint256 index = 0; index < ids.length; index++) {\\n            _claim(ids[index]);\\n        }\\n    }\\n\\n    function _claim(uint256 id) internal noCheaters {\\n        Orc    memory orc    = orcs[id];\\n        Action memory action = activities[id];\\n\\n        if(block.timestamp <= action.timestamp) return;\\n\\n        uint256 timeDiff = uint256(block.timestamp - action.timestamp);\\n\\n        if (action.action == Actions.FARMING) zug.mint(action.owner, claimableZug(timeDiff, orc.zugModifier));\\n       \\n        if (action.action == Actions.TRAINING) {\\n            if (orcs[id].level > 0 && orcs[id].lvlProgress < 1000){\\n                orcs[id].lvlProgress = (1000 * orcs[id].level) + orcs[id].lvlProgress;\\n            }\\n            orcs[id].lvlProgress += uint32(timeDiff * 3000 / 1 days);\\n            orcs[id].level       = uint16(orcs[id].lvlProgress / 1000);\\n        }\\n\\n        activities[id].timestamp = uint88(block.timestamp);\\n    }\\n\\n    function pillage(uint256 id, Places place, bool tryHelm, bool tryMainhand, bool tryOffhand) public ownerOfOrc(id) noCheaters {\\n        require(block.timestamp >= uint256(activities[id].timestamp), \\\"on cooldown\\\");\\n        require(place != Places.ORC_GODS,  \\\"You can't pillage the Orc God\\\");\\n        require(_tier(orcs[id].mainhand) < 10);\\n        require(mintOpen);\\n\\n        if(activities[id].timestamp < block.timestamp) _claim(id); // Need to claim to not have equipment reatroactively multiplying\\n\\n        uint256 rand_ = _rand();\\n  \\n        LootPool memory pool = lootPools[place];\\n        require(orcs[id].level >= uint16(pool.minLevel), \\\"below minimum level\\\");\\n\\n        if (pool.cost > 0) {\\n            require(block.timestamp >= 1635177600);\\n            zug.burn(msg.sender, uint256(pool.cost) * 1 ether);\\n        } \\n\\n        uint8 item;\\n        if (tryHelm) {\\n            ( pool, item ) = _getItemFromPool(pool, _randomize(rand_,\\\"HELM\\\", id));\\n            if (item != 0 ) orcs[id].helm = item;\\n        }\\n        if (tryMainhand) {\\n            ( pool, item ) = _getItemFromPool(pool, _randomize(rand_,\\\"MAINHAND\\\", id));\\n            if (item != 0 ) orcs[id].mainhand = item;\\n        }\\n        if (tryOffhand) {\\n            ( pool, item ) = _getItemFromPool(pool, _randomize(rand_,\\\"OFFHAND\\\", id));\\n            if (item != 0 ) orcs[id].offhand = item;\\n        }\\n\\n        if (uint(place) > 1) lootPools[place] = pool;\\n\\n        // Update zug modifier\\n        Orc memory orc = orcs[id];\\n        uint16 zugModifier_ = _tier(orc.helm) + _tier(orc.mainhand) + _tier(orc.offhand);\\n\\n        orcs[id].zugModifier = zugModifier_;\\n\\n        activities[id].timestamp = uint88(block.timestamp + cooldown);\\n    } \\n\\n    function sendToRaid(uint256[] calldata ids, uint8 location_, bool double_) external noCheaters { \\n        require(address(raids) != address(0), \\\"raids not set\\\");\\n        for (uint256 index = 0; index < ids.length; index++) {\\n            if (activities[ids[index]].action != Actions.UNSTAKED) _doAction(ids[index], msg.sender, Actions.UNSTAKED);\\n            _transfer(msg.sender, raids, ids[index]);\\n        }\\n        RaidsLike(raids).stakeManyAndStartCampaign(ids, msg.sender, location_, double_);\\n    }\\n\\n    function startRaidCampaign(uint256[] calldata ids, uint8 location_, bool double_) external noCheaters { \\n        require(address(raids) != address(0), \\\"raids not set\\\");\\n        for (uint256 index = 0; index < ids.length; index++) {\\n            require(msg.sender == RaidsLike(raids).commanders(ids[index]) && ownerOf[ids[index]] == address(raids), \\\"not staked or not your orc\\\");\\n        }\\n        RaidsLike(raids).startCampaignWithMany(ids, location_, double_);\\n    }\\n\\n    function returnFromRaid(uint256[] calldata ids, Actions action_) external noCheaters { \\n        RaidsLike raidsContract = RaidsLike(raids);\\n        for (uint256 index = 0; index < ids.length; index++) {\\n            require(msg.sender == raidsContract.commanders(ids[index]), \\\"not your orc\\\");\\n            raidsContract.unstake(ids[index]);\\n            if (action_ != Actions.UNSTAKED) _doAction(ids[index], msg.sender, action_);\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    VIEWERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function claimable(uint256 id) external view returns (uint256 amount) {\\n        uint256 timeDiff = block.timestamp > activities[id].timestamp ? uint256(block.timestamp - activities[id].timestamp) : 0;\\n        amount = activities[id].action == Actions.FARMING ? claimableZug(timeDiff, orcs[id].zugModifier) : timeDiff * 3000 / 1 days;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    INTERNAL  HELPERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev take an available item from a pool\\n    function _getItemFromPool(LootPool memory pool, uint256 rand) internal pure returns (LootPool memory, uint8 item) {\\n        uint draw = rand % pool.total--; \\n\\n        if (draw > pool.tier_1 + pool.tier_2 + pool.tier_3 && pool.tier_4-- > 0) {\\n            item = uint8((draw % 4 + 1) + (pool.minLootTier + 3) * 4);     \\n            return (pool, item);\\n        }\\n\\n        if (draw > pool.tier_1 + pool.tier_2 && pool.tier_3-- > 0) {\\n            item = uint8((draw % 4 + 1) + (pool.minLootTier + 2) * 4);\\n            return (pool, item);\\n        }\\n\\n        if (draw > pool.tier_1 && pool.tier_2-- > 0) {\\n            item = uint8((draw % 4 + 1) + (pool.minLootTier + 1) * 4);\\n            return (pool, item);\\n        }\\n\\n        if (pool.tier_1-- > 0) {\\n            item = uint8((draw % 4 + 1) + pool.minLootTier * 4);\\n            return (pool, item);\\n        }\\n    }\\n\\n    function claimableZug(uint256 timeDiff, uint16 zugModifier) internal pure returns (uint256 zugAmount) {\\n        zugAmount = timeDiff * (4 + zugModifier) * 1 ether / 1 days;\\n    }\\n\\n    /// @dev Convert an id to its tier\\n    function _tier(uint16 id) internal pure returns (uint16) {\\n        if (id == 0) return 0;\\n        return ((id - 1) / 4 );\\n    }\\n\\n    /// @dev Create a bit more of randomness\\n    function _randomize(uint256 rand, string memory val, uint256 spicy) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encode(rand, val, spicy)));\\n    }\\n\\n    function _rand() internal view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(msg.sender, block.timestamp, block.basefee, block.timestamp, entropySauce)));\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    FALLBACK HANDLER \\n    //////////////////////////////////////////////////////////////*/\\n\\n\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n    \\n\\n    fallback() external {\\n        if(implementer[msg.sig] == address(0)) {\\n            _delegate(impl);\\n        } else {\\n            _delegate(implementer[msg.sig]);\\n        }\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"src/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.7;\\n\\n\\n/// @notice Modern and gas efficient ERC-721 + ERC-20/EIP-2612-like implementation,\\n/// including the MetaData, and partially, Enumerable extensions.\\ncontract ERC721 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n    \\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    \\n    event Approval(address indexed owner, address indexed spender, uint256 indexed tokenId);\\n    \\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n    \\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n    \\n    address        implementation_;\\n    address public admin; //Lame requirement from opensea\\n    \\n    /*///////////////////////////////////////////////////////////////\\n                             ERC-721 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n    uint256 public oldSupply;\\n    uint256 public minted;\\n    \\n    mapping(address => uint256) public balanceOf;\\n    \\n    mapping(uint256 => address) public ownerOf;\\n        \\n    mapping(uint256 => address) public getApproved;\\n \\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             VIEW FUNCTION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function owner() external view returns (address) {\\n        return admin;\\n    }\\n    \\n    /*///////////////////////////////////////////////////////////////\\n                              ERC-20-LIKE LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n    \\n    function transfer(address to, uint256 tokenId) external {\\n        require(msg.sender == ownerOf[tokenId], \\\"NOT_OWNER\\\");\\n        \\n        _transfer(msg.sender, to, tokenId);\\n        \\n    }\\n    \\n    /*///////////////////////////////////////////////////////////////\\n                              ERC-721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n    \\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool supported) {\\n        supported = interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f;\\n    }\\n    \\n    function approve(address spender, uint256 tokenId) external {\\n        address owner_ = ownerOf[tokenId];\\n        \\n        require(msg.sender == owner_ || isApprovedForAll[owner_][msg.sender], \\\"NOT_APPROVED\\\");\\n        \\n        getApproved[tokenId] = spender;\\n        \\n        emit Approval(owner_, spender, tokenId); \\n    }\\n    \\n    function setApprovalForAll(address operator, bool approved) external {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n        \\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(address, address to, uint256 tokenId) public {\\n        address owner_ = ownerOf[tokenId];\\n        \\n        require(\\n            msg.sender == owner_ \\n            || msg.sender == getApproved[tokenId]\\n            || isApprovedForAll[owner_][msg.sender], \\n            \\\"NOT_APPROVED\\\"\\n        );\\n        \\n        _transfer(owner_, to, tokenId);\\n        \\n    }\\n    \\n    function safeTransferFrom(address, address to, uint256 tokenId) external {\\n        safeTransferFrom(address(0), to, tokenId, \\\"\\\");\\n    }\\n    \\n    function safeTransferFrom(address, address to, uint256 tokenId, bytes memory data) public {\\n        transferFrom(address(0), to, tokenId); \\n        \\n        if (to.code.length != 0) {\\n            // selector = `onERC721Received(address,address,uint,bytes)`\\n            (, bytes memory returned) = to.staticcall(abi.encodeWithSelector(0x150b7a02,\\n                msg.sender, address(0), tokenId, data));\\n                \\n            bytes4 selector = abi.decode(returned, (bytes4));\\n            \\n            require(selector == 0x150b7a02, \\\"NOT_ERC721_RECEIVER\\\");\\n        }\\n    }\\n    \\n    \\n    /*///////////////////////////////////////////////////////////////\\n                          INTERNAL UTILS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        require(ownerOf[tokenId] == from);\\n\\n        balanceOf[from]--; \\n        balanceOf[to]++;\\n        \\n        delete getApproved[tokenId];\\n        \\n        ownerOf[tokenId] = to;\\n        emit Transfer(from, to, tokenId); \\n\\n    }\\n\\n    function _mint(address to, uint256 tokenId) internal { \\n        require(ownerOf[tokenId] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        uint supply = oldSupply + minted;\\n        uint maxSupply = 5050;\\n        require(supply <= maxSupply, \\\"MAX SUPPLY REACHED\\\");\\n        totalSupply++;\\n                \\n        // This is safe because the sum of all user\\n        // balances can't exceed type(uint256).max!\\n        unchecked {\\n            balanceOf[to]++;\\n        }\\n        \\n        ownerOf[tokenId] = to;\\n                \\n        emit Transfer(address(0), to, tokenId); \\n    }\\n    \\n    function _burn(uint256 tokenId) internal { \\n        address owner_ = ownerOf[tokenId];\\n        \\n        require(ownerOf[tokenId] != address(0), \\\"NOT_MINTED\\\");\\n        \\n        totalSupply--;\\n        balanceOf[owner_]--;\\n        \\n        delete ownerOf[tokenId];\\n                \\n        emit Transfer(owner_, address(0), tokenId); \\n    }\\n}\\n\"\r\n    },\r\n    \"src/ERC20.sol\": {\r\n      \"content\": \"\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// Taken from Solmate: https://github.com/Rari-Capital/solmate\\n\\ncontract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public constant name     = \\\"ZUG\\\";\\n    string public constant symbol   = \\\"ZUG\\\";\\n    uint8  public constant decimals = 18;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    mapping(address => bool) public isMinter;\\n\\n    address public ruler;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor() { ruler = msg.sender;}\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        allowance[msg.sender][spender] = value;\\n\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        balanceOf[msg.sender] -= value;\\n\\n        // This is safe because the sum of all user\\n        // balances can't exceed type(uint256).max!\\n        unchecked {\\n            balanceOf[to] += value;\\n        }\\n\\n        emit Transfer(msg.sender, to, value);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= value;\\n        }\\n\\n        balanceOf[from] -= value;\\n\\n        // This is safe because the sum of all user\\n        // balances can't exceed type(uint256).max!\\n        unchecked {\\n            balanceOf[to] += value;\\n        }\\n\\n        emit Transfer(from, to, value);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             ORC PRIVILEGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mint(address to, uint256 value) external {\\n        require(isMinter[msg.sender], \\\"FORBIDDEN TO MINT\\\");\\n        _mint(to, value);\\n    }\\n\\n    function burn(address from, uint256 value) external {\\n        require(isMinter[msg.sender], \\\"FORBIDDEN TO BURN\\\");\\n        _burn(from, value);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         Ruler Function\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setMinter(address minter, bool status) external {\\n        require(msg.sender == ruler, \\\"NOT ALLOWED TO RULE\\\");\\n\\n        isMinter[minter] = status;\\n    }\\n\\n    function setRuler(address ruler_) external {\\n        require(msg.sender == ruler ||ruler == address(0), \\\"NOT ALLOWED TO RULE\\\");\\n\\n        ruler = ruler_;\\n    }\\n\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          INTERNAL UTILS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply += value;\\n\\n        // This is safe because the sum of all user\\n        // balances can't exceed type(uint256).max!\\n        unchecked {\\n            balanceOf[to] += value;\\n        }\\n\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] -= value;\\n\\n        // This is safe because a user won't ever\\n        // have a balance larger than totalSupply!\\n        unchecked {\\n            totalSupply -= value;\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"activity\",\"type\":\"uint8\"}],\"name\":\"ActionMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activities\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"timestamp\",\"type\":\"uint88\"},{\"internalType\":\"enum EtherOrcs.Actions\",\"name\":\"action\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"auth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum EtherOrcs.Actions\",\"name\":\"action_\",\"type\":\"uint8\"}],\"name\":\"doAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"enum EtherOrcs.Actions\",\"name\":\"action_\",\"type\":\"uint8\"}],\"name\":\"doActionWithManyOrcs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EtherOrcs.Places\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lootPools\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"minLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minLootTier\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"cost\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"total\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tier_1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tier_2\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tier_3\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tier_4\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orcs\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"body\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"helm\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mainhand\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"offhand\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"level\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"zugModifier\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"lvlProgress\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum EtherOrcs.Places\",\"name\":\"place\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"tryHelm\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tryMainhand\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tryOffhand\",\"type\":\"bool\"}],\"name\":\"pillage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"enum EtherOrcs.Places\",\"name\":\"place\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"tryHelm\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tryMainhand\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tryOffhand\",\"type\":\"bool\"}],\"name\":\"pillageWithManyOrcs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raids\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"enum EtherOrcs.Actions\",\"name\":\"action_\",\"type\":\"uint8\"}],\"name\":\"returnFromRaid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"location_\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"double_\",\"type\":\"bool\"}],\"name\":\"sendToRaid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"funcs\",\"type\":\"bytes4[]\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"setImplementer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"location_\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"double_\",\"type\":\"bool\"}],\"name\":\"startRaidCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zug\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EtherOrcs","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}