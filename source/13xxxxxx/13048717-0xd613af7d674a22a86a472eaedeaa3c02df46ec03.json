{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.6;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address account) external view returns (uint);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n  function symbol() external view returns (string memory);\r\n  function decimals() external view returns (uint);\r\n  function approve(address spender, uint amount) external returns (bool);\r\n  function mint(address account, uint amount) external;\r\n  function burn(address account, uint amount) external;\r\n  function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface IVault is IERC20 {\r\n  function deposit(address _account, uint _amount) external;\r\n  function depositETH(address _account) external payable;\r\n  function withdraw(uint _amount) external;\r\n  function withdrawETH(uint _amount) external;\r\n  function withdrawFrom(address _source, uint _amount) external;\r\n  function withdrawFromETH(address _source, uint _amount) external;\r\n  function withdrawAll() external;\r\n  function withdrawAllETH() external;\r\n  function pushToken(address _token, uint _amount) external;\r\n  function setDepositsEnabled(bool _value) external;\r\n  function addIncome(uint _addAmount) external;\r\n  function rewardRate() external view returns(uint);\r\n  function underlying() external view returns(address);\r\n  function pendingAccountReward(address _account) external view returns(uint);\r\n  function claim(address _account) external;\r\n}\r\n\r\ninterface IVaultController {\r\n  function depositsEnabled() external view returns(bool);\r\n  function depositLimit(address _vault) external view returns(uint);\r\n  function setRebalancer(address _rebalancer) external;\r\n  function rebalancer() external view returns(address);\r\n}\r\n\r\ninterface IVaultFactory {\r\n  function isVault(address _vault) external view returns(bool);\r\n}\r\n\r\ninterface IOwnable {\r\n  function transferOwnership(address _newOwner) external;\r\n  function acceptOwnership() external;\r\n}\r\n\r\ninterface IRewardDistribution {\r\n\r\n  function distributeReward(address _account, address _token) external;\r\n  function setTotalRewardPerBlock(uint _value) external;\r\n  function migrateRewards(address _recipient, uint _amount) external;\r\n  function accrueAllPools() external;\r\n  function pendingAccountReward(address _account, address _pair) external view returns(uint);\r\n\r\n  function addPool(\r\n    address _pair,\r\n    address _token,\r\n    bool    _isSupply,\r\n    uint    _points\r\n  ) external;\r\n\r\n  function setReward(\r\n    address _pair,\r\n    address _token,\r\n    bool    _isSupply,\r\n    uint    _points\r\n  ) external;\r\n}\r\n\r\ninterface ILendingController {\r\n  function interestRateModel() external view returns(address);\r\n  function rewardDistribution() external view returns(IRewardDistribution);\r\n  function feeRecipient() external view returns(address);\r\n  function LIQ_MIN_HEALTH() external view returns(uint);\r\n  function minBorrowUSD() external view returns(uint);\r\n  function liqFeeSystem(address _token) external view returns(uint);\r\n  function liqFeeCaller(address _token) external view returns(uint);\r\n  function liqFeesTotal(address _token) external view returns(uint);\r\n  function colFactor(address _token) external view returns(uint);\r\n  function depositLimit(address _lendingPair, address _token) external view returns(uint);\r\n  function borrowLimit(address _lendingPair, address _token) external view returns(uint);\r\n  function originFee(address _token) external view returns(uint);\r\n  function depositsEnabled() external view returns(bool);\r\n  function borrowingEnabled() external view returns(bool);\r\n  function setFeeRecipient(address _feeRecipient) external;\r\n  function setColFactor(address _token, uint _value) external;\r\n  function tokenPrice(address _token) external view returns(uint);\r\n  function tokenSupported(address _token) external view returns(bool);\r\n  function setRewardDistribution(address _value) external;\r\n  function setInterestRateModel(address _value) external;\r\n  function targetLiqHealth() external view returns(uint);\r\n  function setDepositLimit(address _pair, address _token, uint _value) external;\r\n}\r\n\r\ninterface ILendingPair {\r\n  function checkAccountHealth(address _account) external view;\r\n  function accrueAccount(address _account) external;\r\n  function accrue() external;\r\n  function accountHealth(address _account) external view returns(uint);\r\n  function totalDebt(address _token) external view returns(uint);\r\n  function tokenA() external view returns(address);\r\n  function tokenB() external view returns(address);\r\n  function lpToken(address _token) external view returns(IERC20);\r\n  function debtOf(address _account, address _token) external view returns(uint);\r\n  function pendingDebtTotal(address _token) external view returns(uint);\r\n  function pendingSupplyTotal(address _token) external view returns(uint);\r\n  function lastBlockAccrued() external view returns(uint);\r\n  function deposit(address _account, address _token, uint _amount) external;\r\n  function pendingBorrowInterest(address _token, address _account) external view returns(uint);\r\n  function pendingSupplyInterest(address _token, address _account) external view returns(uint);\r\n  function supplyRatePerBlock(address _token) external view returns(uint);\r\n  function withdraw(address _token, uint _amount) external;\r\n  function borrow(address _token, uint _amount) external;\r\n  function repay(address _token, uint _amount) external;\r\n  function withdrawAll(address _token) external;\r\n  function depositRepay(address _account, address _token, uint _amount) external;\r\n  function withdrawBorrow(address _token, uint _amount) external;\r\n  function lendingController() external view returns(ILendingController);\r\n\r\n  function borrowBalance(\r\n    address _account,\r\n    address _borrowedToken,\r\n    address _returnToken\r\n  ) external view returns(uint);\r\n\r\n  function supplyBalance(\r\n    address _account,\r\n    address _suppliedToken,\r\n    address _returnToken\r\n  ) external view returns(uint);\r\n\r\n  function convertTokenValues(\r\n    address _fromToken,\r\n    address _toToken,\r\n    uint    _inputAmount\r\n  ) external view returns(uint);\r\n}\r\n\r\ninterface IPairFactory {\r\n\r\n  function pairByTokens(address _tokenA, address _tokenB) external view returns(address);\r\n\r\n  function createPair(\r\n    address _tokenA,\r\n    address _tokenB\r\n  ) external returns(address);\r\n}\r\n\r\ninterface IVaultRebalancer {\r\n  function unload(address _vault, address _pair, uint _amount) external;\r\n  function distributeIncome(address _vault) external;\r\n}\r\n\r\nlibrary Math {\r\n\r\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // (a + b) / 2 can overflow, so we distribute.\r\n    return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\r\n  }\r\n\r\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // (a + b - 1) / b can overflow on addition, so we distribute.\r\n    return a / b + (a % b == 0 ? 0 : 1);\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n  address public pendingOwner;\r\n\r\n  event OwnershipTransferInitiated(address indexed previousOwner, address indexed newOwner);\r\n  event OwnershipTransferConfirmed(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() {\r\n    owner = msg.sender;\r\n    emit OwnershipTransferConfirmed(address(0), owner);\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(isOwner(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function isOwner() public view returns (bool) {\r\n    return msg.sender == owner;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) external onlyOwner {\r\n    require(_newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferInitiated(owner, _newOwner);\r\n    pendingOwner = _newOwner;\r\n  }\r\n\r\n  function acceptOwnership() external {\r\n    require(msg.sender == pendingOwner, \"Ownable: caller is not pending owner\");\r\n    emit OwnershipTransferConfirmed(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n  uint256 private constant _NOT_ENTERED = 1;\r\n  uint256 private constant _ENTERED = 2;\r\n\r\n  uint256 private _status;\r\n\r\n  constructor () {\r\n    _status = _NOT_ENTERED;\r\n  }\r\n\r\n  modifier nonReentrant() {\r\n    require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n    _status = _ENTERED;\r\n    _;\r\n    _status = _NOT_ENTERED;\r\n  }\r\n}\r\n\r\ninterface IWETH {\r\n  function deposit() external payable;\r\n  function withdraw(uint wad) external;\r\n  function balanceOf(address account) external view returns (uint);\r\n  function transfer(address recipient, uint amount) external returns (bool);\r\n  function approve(address spender, uint amount) external returns (bool);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract TransferHelper {\r\n\r\n  using SafeERC20 for IERC20;\r\n\r\n  // Mainnet\r\n  IWETH internal constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n  function _safeTransferFrom(address _token, address _sender, uint _amount) internal virtual {\r\n    require(_amount > 0, \"TransferHelper: amount must be > 0\");\r\n    IERC20(_token).safeTransferFrom(_sender, address(this), _amount);\r\n  }\r\n\r\n  function _safeTransfer(address _token, address _recipient, uint _amount) internal virtual {\r\n    require(_amount > 0, \"TransferHelper: amount must be > 0\");\r\n    IERC20(_token).safeTransfer(_recipient, _amount);\r\n  }\r\n\r\n  function _wethWithdrawTo(address _to, uint _amount) internal virtual {\r\n    require(_amount > 0, \"TransferHelper: amount must be > 0\");\r\n    require(_to != address(0), \"TransferHelper: invalid recipient\");\r\n\r\n    WETH.withdraw(_amount);\r\n    (bool success, ) = _to.call { value: _amount }(new bytes(0));\r\n    require(success, 'TransferHelper: ETH transfer failed');\r\n  }\r\n\r\n  function _depositWeth() internal {\r\n    require(msg.value > 0, \"TransferHelper: amount must be > 0\");\r\n    WETH.deposit { value: msg.value }();\r\n  }\r\n}\r\n\r\ncontract VaultRebalancer is IVaultRebalancer, TransferHelper, Ownable, ReentrancyGuard {\r\n\r\n  using Address for address;\r\n\r\n  uint private constant DISTRIBUTION_PERIOD = 45_800; // 7 days - 3600 * 24 * 7 / 13.2\r\n\r\n  uint public callIncentive;\r\n\r\n  address public immutable vaultController;\r\n  address public immutable vaultFactory;\r\n  address public immutable pairFactory;\r\n\r\n  /**\r\n   * pairDeposits value is lost when we redeploy rebalancer.\r\n   * The impact is limited to the loss of unclaimed income.\r\n   * It's recommended to call accrue()\r\n   * on all vaults/pairs before replacing the rebalancer.\r\n  **/\r\n  mapping (address => uint) public pairDeposits;\r\n\r\n  event InitiateRebalancerMigration(address indexed newOwner);\r\n  event Rebalance(address indexed fromPair, address indexed toPair, uint amount);\r\n  event FeeDistribution(uint amount);\r\n  event NewCallIncentive(uint value);\r\n\r\n  modifier onlyVault() {\r\n    require(IVaultFactory(vaultFactory).isVault(msg.sender), \"VaultRebalancer: caller is not the vault\");\r\n    _;\r\n  }\r\n\r\n  modifier vaultOrOwner() {\r\n    require(\r\n      IVaultFactory(vaultFactory).isVault(msg.sender) ||\r\n      msg.sender == owner,\r\n      \"VaultRebalancer: unauthorized\");\r\n    _;\r\n  }\r\n\r\n  receive() external payable {}\r\n\r\n  constructor(\r\n    address _vaultController,\r\n    address _vaultFactory,\r\n    address _pairFactory,\r\n    uint    _callIncentive\r\n  ) {\r\n\r\n    _requireContract(_vaultController);\r\n    _requireContract(_vaultFactory);\r\n    _requireContract(_pairFactory);\r\n\r\n    vaultController = _vaultController;\r\n    vaultFactory    = _vaultFactory;\r\n    pairFactory     = _pairFactory;\r\n    callIncentive   = _callIncentive;\r\n  }\r\n\r\n  function rebalance(\r\n    address _vault,\r\n    address _fromPair,\r\n    address _toPair,\r\n    uint    _withdrawAmount\r\n  ) external onlyOwner nonReentrant {\r\n\r\n    _validatePair(_fromPair);\r\n    _validatePair(_toPair);\r\n\r\n    uint income          = _pairWithdrawWithIncome(_vault, _fromPair, _withdrawAmount);\r\n    uint callerIncentive = Math.min(income * callIncentive / 100e18, 1e17);\r\n    address underlying   = _underlying(_vault);\r\n\r\n    _pairDeposit(_vault, underlying, _toPair, _withdrawAmount);\r\n    IERC20(underlying).transfer(msg.sender, callerIncentive);\r\n\r\n    emit Rebalance(address(_fromPair), address(_toPair), _withdrawAmount);\r\n  }\r\n\r\n  // Deploy assets from the vault\r\n  function enterPair(\r\n    address _vault,\r\n    address _toPair,\r\n    uint    _depositAmount\r\n  ) external onlyOwner nonReentrant {\r\n\r\n    _validatePair(_toPair);\r\n\r\n    // Since there is no earned income yet\r\n    // we calculate caller incentive as (_depositAmount / 1000)\r\n    // and cap it to at most 0.1 ETH\r\n    uint callerIncentive = Math.min(_depositAmount / 1000, 1e17);\r\n\r\n    address underlying = address(_underlying(_vault));\r\n\r\n    IVault(_vault).pushToken(underlying, _depositAmount);\r\n    _pairDeposit(_vault, underlying, _toPair, _depositAmount - callerIncentive);\r\n    IERC20(underlying).transfer(msg.sender, callerIncentive);\r\n\r\n    emit Rebalance(address(0), address(_toPair), _depositAmount);\r\n  }\r\n\r\n  // Pull in income without rebalancing\r\n  function accrue(\r\n    address _vault,\r\n    address _pair\r\n  ) external onlyOwner {\r\n    _pairWithdrawWithIncome(_vault, _pair, 0);\r\n  }\r\n\r\n  // Increase the vault buffer\r\n  function unload(\r\n    address _vault,\r\n    address _pair,\r\n    uint    _amount\r\n  ) external override vaultOrOwner {\r\n\r\n    _validatePair(_pair);\r\n    _pairWithdrawWithIncome(_vault, _pair, _amount);\r\n    _safeTransfer(_underlying(_vault), _vault, _amount);\r\n  }\r\n\r\n  function distributeIncome(address _vault) external override onlyOwner nonReentrant {\r\n\r\n    IERC20 underlying = IERC20(_underlying(_vault));\r\n    uint income       = underlying.balanceOf(address(this));\r\n    uint callerReward = Math.min(income * callIncentive / 100e18, 1e17);\r\n    uint netIncome    = income - callerReward;\r\n\r\n    underlying.approve(_vault, income);\r\n    IVault(_vault).addIncome(netIncome);\r\n\r\n    underlying.transfer(msg.sender, callerReward);\r\n\r\n    emit FeeDistribution(netIncome);\r\n  }\r\n\r\n  function setCallIncentive(uint _value) external onlyOwner {\r\n    callIncentive = _value;\r\n    emit NewCallIncentive(_value);\r\n  }\r\n\r\n  // In case anything goes wrong\r\n  function rescueToken(address _token, uint _amount) external onlyOwner {\r\n    _safeTransfer(_token, msg.sender, _amount);\r\n  }\r\n\r\n  function _pairWithdrawWithIncome(\r\n    address _vault,\r\n    address _pair,\r\n    uint    _amount\r\n  ) internal returns(uint) {\r\n\r\n    address underlying = _underlying(_vault);\r\n    ILendingPair pair = ILendingPair(_pair);\r\n\r\n    _ensureDepositRecord(_vault, underlying, _pair);\r\n    uint income = _balanceWithPendingInterest(_vault, underlying, _pair) - pairDeposits[_pair];\r\n    uint transferAmount = _amount + income;\r\n\r\n    if (transferAmount > 0) {\r\n\r\n      // Accrue pending income to the pair first to make it transferrable\r\n      pair.accrueAccount(_vault);\r\n\r\n      IVault(_vault).pushToken(address(pair.lpToken(underlying)), transferAmount);\r\n      pair.withdraw(underlying, transferAmount);\r\n      pairDeposits[_pair] = _balanceWithPendingInterest(_vault, underlying, _pair);\r\n    }\r\n\r\n    return income;\r\n  }\r\n\r\n  function _ensureDepositRecord(\r\n    address _vault,\r\n    address _underlying,\r\n    address _pair\r\n  ) internal {\r\n\r\n    if (pairDeposits[_pair] == 0) {\r\n      pairDeposits[_pair] = _balanceWithPendingInterest(_vault, _underlying, _pair);\r\n    }\r\n  }\r\n\r\n  function _pairDeposit(\r\n    address _vault,\r\n    address _underlying,\r\n    address _pair,\r\n    uint    _amount\r\n  ) internal {\r\n\r\n    IERC20(_underlying).approve(_pair, _amount);\r\n    ILendingPair(_pair).deposit(_vault, _underlying, _amount);\r\n    pairDeposits[_pair] = _balanceWithPendingInterest(_vault, _underlying, _pair);\r\n  }\r\n\r\n  function _balanceWithPendingInterest(\r\n    address _vault,\r\n    address _underlying,\r\n    address _pair\r\n  ) internal view returns(uint) {\r\n\r\n    ILendingPair pair = ILendingPair(_pair);\r\n    uint balance = pair.supplyBalance(_vault, _underlying, _underlying);\r\n    uint pending = pair.pendingSupplyInterest(_underlying, _vault);\r\n    return balance + pending;\r\n  }\r\n\r\n  function _lpBalance(\r\n    address _pair,\r\n    address _underlying\r\n  ) internal view returns(uint) {\r\n    return IERC20(ILendingPair(_pair).lpToken(_underlying)).balanceOf(address(this));\r\n  }\r\n\r\n  function _validatePair(address _pair) internal view {\r\n    ILendingPair pair = ILendingPair(_pair);\r\n\r\n    require(\r\n      _pair == IPairFactory(pairFactory).pairByTokens(pair.tokenA(), pair.tokenB()),\r\n      \"VaultRebalancer: invalid lending pair\"\r\n    );\r\n  }\r\n\r\n  function _requireContract(address _value) internal view {\r\n    require(_value.isContract(), \"VaultRebalancer: must be a contract\");\r\n  }\r\n\r\n  function _underlying(address _vault) internal view returns(address) {\r\n    return IVault(_vault).underlying();\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_callIncentive\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"InitiateRebalancerMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NewCallIncentive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromPair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toPair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"accrue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"distributeIncome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"enterPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fromPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setCallIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unload\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"VaultRebalancer","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a1561494dcd9f1c3ede6a965302a851d2a7e1a740000000000000000000000005fd31de528fb1cc17e895a9214ea6d2df17e246300000000000000000000000023b74796b72f995e14a5e3ff2156dad9653256cf0000000000000000000000000000000000000000000000008ac7230489e80000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7a936f50688abba3e1c8f1be0c02d5112315a9d8fcc4061f0c27990c89c77757"}]}