{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/DummyLPToken.sol\r\n\r\n\r\n\r\n/// @notice The (older) MasterChef contract gives out a constant number of DRINK tokens per block.\r\n/// MasterChef the only address with minting rights for DRINK.\r\n/// The idea for this contract is therefore to be the dummy LP token that is deposited into the MasterChef V1 (MCV1) contract.\r\n/// The allocation point for this pool on MCV1 is the total allocation point for all pools that receive incentives on L2.\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract DummyLPToken {\r\n    uint256 public immutable totalSupply;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping (address => uint256)) public allowance;\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /// _mintTo         Address to which entire supply is to be minted\r\n    /// _totalSupply    Total supply\r\n    constructor(address _mintTo, uint256 _totalSupply) public {\r\n        balanceOf[_mintTo] = _totalSupply;\r\n        totalSupply = _totalSupply;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= amount, \"ERC20: balance too low\");\r\n        // The following check is pretty much in all ERC20 contracts, but this can only fail if totalSupply >= 2^256\r\n        require(balanceOf[to] + amount >= balanceOf[to], \"ERC20: overflow detected\");\r\n        balanceOf[msg.sender] -= amount;\r\n        balanceOf[to] += amount;\r\n        emit Transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public returns (bool success) {\r\n        require(balanceOf[from] >= amount, \"ERC20: balance too low\");\r\n        require(allowance[from][msg.sender] >= amount, \"ERC20: allowance too low\");\r\n        // The following check is pretty much in all ERC20 contracts, but this can only fail if totalSupply >= 2^256\r\n        require(balanceOf[to] + amount >= balanceOf[to], \"ERC20: overflow detected\");\r\n        balanceOf[from] -= amount;\r\n        allowance[from][msg.sender] -= amount;\r\n        balanceOf[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool success) {\r\n        allowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DummyLPToken","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000bc47077e7c59fc4284922b1c8264ce0ba91d8fad0000000000000000000000000000000000000000000000000de0b6b3a7640000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://871912ad81a3c9cbdc90bd348e22c603ca68a5465d566dfaffba14e6ca0f5c66"}]}