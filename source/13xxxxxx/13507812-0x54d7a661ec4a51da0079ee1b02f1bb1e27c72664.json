{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NFTDecks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport { BlindDrop } from \\\"./BlindDrop.sol\\\";\\nimport { NFTDecksMetadata } from \\\"./NFTDecksMetadata.sol\\\";\\n\\n/**\\n * @title NFTDecks\\n *\\n *\\n *  Note: Deliberately choosing not to use ReentrancyGuard, as a gas optimization.\\n */\\ncontract NFTDeck1 is\\n  NFTDecksMetadata\\n{\\n  uint256 public immutable MAX_SUPPLY;\\n  uint256 public immutable MAX_DISTRIBUTION_DURATION_SECONDS;\\n\\n  uint256 internal _totalSupply = 0;\\n\\n  constructor(\\n    bytes32 guardianHash,\\n    uint256 guardianWindowDurationSeconds,\\n    uint256 maxDistributionDurationSeconds,\\n    uint256 maxSupply\\n  )\\n    ERC721(\\\"NFTDeck1\\\", \\\"NFTDECK1\\\")\\n    BlindDrop(guardianHash, guardianWindowDurationSeconds, maxDistributionDurationSeconds)\\n  {\\n    MAX_SUPPLY = maxSupply;\\n    MAX_DISTRIBUTION_DURATION_SECONDS = maxDistributionDurationSeconds;\\n  }\\n\\n  /**\\n   * @notice Claim a token.\\n   */\\n  function claim()\\n    external\\n  {\\n    uint256 startingTotalSupply = _totalSupply;\\n    require(\\n      startingTotalSupply < MAX_SUPPLY,\\n      \\\"Max supply exceeded\\\"\\n    );\\n    require(\\n      block.timestamp < DISTRIBUTION_AUTO_END_TIMESTAMP,\\n      \\\"Distribution has ended\\\"\\n    );\\n\\n    // Issue tokens with IDs 1 through MAX_SUPPLY, inclusive.\\n    uint256 tokenId = startingTotalSupply + 1;\\n\\n    // IMPORTANT: Update total supply before _safeMint() to avoid reentrancy attacks.\\n    // (checks-effects-interactions)\\n    _totalSupply = tokenId;\\n\\n    // Mint the token. This may trigger a call on the receiver if it is a smart contract.\\n    _safeMint(msg.sender, tokenId);\\n  }\\n\\n  function setAutomaticSeedBlockNumber()\\n    external\\n  {\\n    _setAutomaticSeedBlockNumber(_totalSupply == MAX_SUPPLY);\\n  }\\n\\n  function totalSupply()\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return _totalSupply;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BlindDrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title BlindDrop\\n * @author the-torn\\n *\\n * @notice Securely generate a random seed for use in a random NFT distribution.\\n *\\n *  Inspired by Hashmasks.\\n */\\nabstract contract BlindDrop {\\n  bytes32 public immutable GUARDIAN_HASH;\\n  uint256 public immutable GUARDIAN_WINDOW_DURATION_SECONDS;\\n  uint256 public immutable DISTRIBUTION_AUTO_END_TIMESTAMP;\\n\\n  uint256 private _automaticSeedBlockNumber;\\n  bytes32 private _automaticSeed;\\n  uint256 private _guardianWindowEndTimestamp;\\n  bytes32 private _guardianOrFallbackSeed;\\n  uint256 private _fallbackSeedBlockNumber;\\n  bytes32 private _finalSeed;\\n\\n  event SetSeedBlockNumber(uint256 blockNumber);\\n  event SetSeed(bytes32 seed);\\n  event SetFinalSeed(bytes32 seed);\\n\\n  constructor(\\n    bytes32 guardianHash,\\n    uint256 guardianWindowDurationSeconds,\\n    uint256 maxDistributionDurationSeconds\\n  ) {\\n    GUARDIAN_HASH = guardianHash;\\n    GUARDIAN_WINDOW_DURATION_SECONDS = guardianWindowDurationSeconds;\\n    DISTRIBUTION_AUTO_END_TIMESTAMP = block.timestamp + maxDistributionDurationSeconds;\\n  }\\n\\n  function _setAutomaticSeedBlockNumber(\\n    bool maxSupplyWasReached\\n  )\\n    internal\\n  {\\n    require(\\n      _automaticSeedBlockNumber == 0,\\n      \\\"Seed block number already set\\\"\\n    );\\n\\n    // Anyone can finalize the automatic seed block number once either of the following is true:\\n    //   1. all tokens were claimed; or\\n    //   2. we reached the auto-end timestamp.\\n    require(\\n      (\\n        maxSupplyWasReached ||\\n        block.timestamp >= DISTRIBUTION_AUTO_END_TIMESTAMP\\n      ),\\n      \\\"Distribution not over\\\"\\n    );\\n\\n    uint256 automaticSeedBlockNumber = block.number + 1;\\n    _automaticSeedBlockNumber = automaticSeedBlockNumber;\\n    emit SetSeedBlockNumber(automaticSeedBlockNumber);\\n  }\\n\\n  function setAutomaticSeed()\\n    external\\n  {\\n    require(\\n      _automaticSeed == bytes32(0),\\n      \\\"Automatic seed already set\\\"\\n    );\\n\\n    bytes32 automaticSeed = _getSeedFromBlockNumber(_automaticSeedBlockNumber);\\n    _automaticSeed = automaticSeed;\\n    emit SetSeed(automaticSeed);\\n\\n    // Mark the start of the guardian window, during which the guardian can provide their seed.\\n    _guardianWindowEndTimestamp = block.timestamp + GUARDIAN_WINDOW_DURATION_SECONDS;\\n  }\\n\\n  function setGuardianSeed(\\n    bytes32 guardianSeed\\n  )\\n    external\\n  {\\n    require(\\n      _guardianOrFallbackSeed == bytes32(0),\\n      \\\"Seed already set\\\"\\n    );\\n    require(\\n      _automaticSeed != bytes32(0),\\n      \\\"Automatic seed not set\\\"\\n    );\\n    require(\\n      block.timestamp < _guardianWindowEndTimestamp,\\n      \\\"Guardian window elapsed\\\"\\n    );\\n    require(\\n      keccak256(abi.encodePacked(guardianSeed)) == GUARDIAN_HASH,\\n      \\\"Guardian seed invalid\\\"\\n    );\\n    _guardianOrFallbackSeed = guardianSeed;\\n    emit SetSeed(guardianSeed);\\n  }\\n\\n  function setFallbackSeedBlockNumber()\\n    external\\n  {\\n    require(\\n      _fallbackSeedBlockNumber == 0,\\n      \\\"Seed block number already set\\\"\\n    );\\n    require(\\n      _automaticSeed != bytes32(0),\\n      \\\"Automatic seed not set\\\"\\n    );\\n    require(\\n      block.timestamp >= _guardianWindowEndTimestamp,\\n      \\\"Guardian window has not ended\\\"\\n    );\\n\\n    uint256 fallbackSeedBlockNumber = block.number + 1;\\n    _fallbackSeedBlockNumber = fallbackSeedBlockNumber;\\n    emit SetSeedBlockNumber(fallbackSeedBlockNumber);\\n  }\\n\\n  function setFallbackSeed()\\n    external\\n  {\\n    require(\\n      _guardianOrFallbackSeed == bytes32(0),\\n      \\\"Seed already set\\\"\\n    );\\n\\n    bytes32 fallbackSeed = _getSeedFromBlockNumber(_fallbackSeedBlockNumber);\\n    _guardianOrFallbackSeed = fallbackSeed;\\n    emit SetSeed(fallbackSeed);\\n  }\\n\\n  function setFinalSeed()\\n    external\\n  {\\n    require(\\n      _finalSeed == bytes32(0),\\n      \\\"Final seed already set\\\"\\n    );\\n    require(\\n      _guardianOrFallbackSeed != bytes32(0),\\n      \\\"Guardian/fallback seed not set\\\"\\n    );\\n\\n    bytes32 finalSeed = _automaticSeed ^ _guardianOrFallbackSeed;\\n    _finalSeed = finalSeed;\\n    emit SetFinalSeed(finalSeed);\\n  }\\n\\n  function _getSeedFromBlockNumber(\\n    uint256 targetBlockNumber\\n  )\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    require(\\n      targetBlockNumber != 0,\\n      \\\"Block number not set\\\"\\n    );\\n    // Important: blockhash(targetBlockNumber) will return zero if the block was not yet mined.\\n    require(\\n      targetBlockNumber < block.number,\\n      \\\"Block number not mined\\\"\\n    );\\n\\n    // If the hash for the desired block is unavailable, fall back to the most recent block.\\n    if (block.number - targetBlockNumber > 256) {\\n      targetBlockNumber = block.number - 1;\\n    }\\n\\n    return blockhash(targetBlockNumber);\\n  }\\n\\n  /**\\n   * @notice Get the blind drop seed which is securely determined after the end of the distribution.\\n   *\\n   *  Revert if the seed has not been set.\\n   */\\n  function getFinalSeed()\\n    public\\n    view\\n    returns (bytes32)\\n  {\\n    bytes32 finalSeed = _finalSeed;\\n    require(\\n      finalSeed != bytes32(0),\\n      \\\"Final seed not set\\\"\\n    );\\n    return finalSeed;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/NFTDecksMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport { BlindDrop } from \\\"./BlindDrop.sol\\\";\\nimport { Base64 } from \\\"./Base64.sol\\\";\\nimport { ERC721EnumerableOptimized } from \\\"./ERC721EnumerableOptimized.sol\\\";\\nimport { NFTDecksConstants } from \\\"./NFTDecksConstants.sol\\\";\\n\\n/**\\n * @title NFTDecksMetadata\\n *\\n * @notice Logic for generating metadata, including the SVG graphic with text.\\n *\\n *  Based closely on the original Loot implementation (MIT License).\\n *  https://etherscan.io/address/0xff9c1b15b16263c61d017ee9f65c50e4ae0113d7#code#L1\\n */\\nabstract contract NFTDecksMetadata is\\n  BlindDrop,\\n  ERC721EnumerableOptimized\\n{\\n  function random(\\n    string memory input\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return uint256(keccak256(abi.encodePacked(input)));\\n  }\\n\\n  function getWeapon(\\n    uint256 tokenId\\n  )\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    return pluck(tokenId, NFTDecksConstants.ListName.WEAPON);\\n  }\\n\\n  function getChest(\\n    uint256 tokenId\\n  )\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    return pluck(tokenId, NFTDecksConstants.ListName.CHEST);\\n  }\\n\\n  function getHead(\\n    uint256 tokenId\\n  )\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    return pluck(tokenId, NFTDecksConstants.ListName.HEAD);\\n  }\\n\\n  function getWaist(\\n    uint256 tokenId\\n  )\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    return pluck(tokenId, NFTDecksConstants.ListName.WAIST);\\n  }\\n\\n  function getFoot(\\n    uint256 tokenId\\n  )\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    return pluck(tokenId, NFTDecksConstants.ListName.FOOT);\\n  }\\n\\n  function getHand(\\n    uint256 tokenId\\n  )\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    return pluck(tokenId, NFTDecksConstants.ListName.HAND);\\n  }\\n\\n  function getWEAPON2(\\n    uint256 tokenId\\n  )\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    return pluck(tokenId, NFTDecksConstants.ListName.WEAPON2);\\n  }\\n\\n  function getWEAPON3(\\n    uint256 tokenId\\n  )\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    return pluck(tokenId, NFTDecksConstants.ListName.WEAPON3);\\n  }\\n\\n  function pluck(\\n    uint256 tokenId,\\n    NFTDecksConstants.ListName keyPrefix\\n  )\\n    internal\\n    view\\n    returns (string memory)\\n  {\\n    // Get the blind drop seed. Will revert if the distribution is not complete or if the seed\\n    // has not yet been finalized.\\n    bytes32 seed = getFinalSeed();\\n\\n    // On-chain randomness.\\n    string memory inputForRandomness = string(abi.encodePacked(\\n      keyPrefix,\\n      tokenId, // Note: No need to use toString() here.\\n      seed\\n    ));\\n    uint256 rand = random(inputForRandomness);\\n\\n    // Determine the item name based on the randomly generated number.\\n    string memory output = NFTDecksConstants.getItem(rand, keyPrefix);\\n    uint256 greatness = rand % 21;\\n    if (greatness > 14) {\\n      output = string(abi.encodePacked(output, \\\" \\\", NFTDecksConstants.getItem(rand, NFTDecksConstants.ListName.SUFFIX)));\\n    }\\n    if (greatness >= 19) {\\n      string[2] memory name;\\n      name[0] = NFTDecksConstants.getItem(rand, NFTDecksConstants.ListName.NAME_PREFIX);\\n      name[1] = NFTDecksConstants.getItem(rand, NFTDecksConstants.ListName.NAME_SUFFIX);\\n      if (greatness == 19) {\\n        output = string(abi.encodePacked('\\\"', name[0], ' ', name[1], '\\\" ', output));\\n      } else {\\n        output = string(abi.encodePacked('\\\"', name[0], ' ', name[1], '\\\" ', output, \\\" +1\\\"));\\n      }\\n    }\\n    return output;\\n  }\\n\\n  function tokenURI(\\n    uint256 tokenId\\n  )\\n    override\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    string[17] memory parts;\\n    parts[0] = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\"><style>.base { fill: white; font-family: serif; font-size: 14px; }</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"black\\\" /><text x=\\\"10\\\" y=\\\"20\\\" class=\\\"base\\\">';\\n    parts[1] = getWeapon(tokenId);\\n    parts[2] = '</text><text x=\\\"10\\\" y=\\\"40\\\" class=\\\"base\\\">';\\n    parts[3] = getChest(tokenId);\\n    parts[4] = '</text><text x=\\\"10\\\" y=\\\"60\\\" class=\\\"base\\\">';\\n    parts[5] = getHead(tokenId);\\n    parts[6] = '</text><text x=\\\"10\\\" y=\\\"80\\\" class=\\\"base\\\">';\\n    parts[7] = getWaist(tokenId);\\n    parts[8] = '</text><text x=\\\"10\\\" y=\\\"100\\\" class=\\\"base\\\">';\\n    parts[9] = getFoot(tokenId);\\n    parts[10] = '</text><text x=\\\"10\\\" y=\\\"120\\\" class=\\\"base\\\">';\\n    parts[11] = getHand(tokenId);\\n    parts[12] = '</text><text x=\\\"10\\\" y=\\\"140\\\" class=\\\"base\\\">';\\n    parts[13] = getWEAPON2(tokenId);\\n    parts[14] = '</text><text x=\\\"10\\\" y=\\\"160\\\" class=\\\"base\\\">';\\n    parts[15] = getWEAPON3(tokenId);\\n    parts[16] = '</text></svg>';\\n\\n    string memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8]));\\n    output = string(abi.encodePacked(output, parts[9], parts[10], parts[11], parts[12], parts[13], parts[14], parts[15], parts[16]));\\n\\n    string memory json = Base64.encode(bytes(string(abi.encodePacked(\\n      '{\\\"name\\\": \\\"Bag #',\\n      NFTDecksConstants.toString(tokenId),\\n      '\\\", \\\"description\\\": \\\"NFTDecks are randomized adventurer gear generated and stored on chain. Stats, images, and other functionality are intentionally omitted for others to interpret.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n      Base64.encode(bytes(output)),\\n      '\\\"}'\\n    ))));\\n    output = string(abi.encodePacked('data:application/json;base64,', json));\\n\\n    return output;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base64\\n * @author Brecht Devos <brecht@loopring.org>\\n *\\n * @notice Provides a function for encoding some bytes in base64.\\n */\\nlibrary Base64 {\\n  bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n  /**\\n   * @notice Encodes some bytes to the base64 representation.\\n   */\\n  function encode(bytes memory data) internal pure returns (string memory) {\\n    uint256 len = data.length;\\n    if (len == 0) return \\\"\\\";\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n    // Add some extra buffer at the end\\n    bytes memory result = new bytes(encodedLen + 32);\\n\\n    bytes memory table = TABLE;\\n\\n    assembly {\\n      let tablePtr := add(table, 1)\\n      let resultPtr := add(result, 32)\\n\\n      for {\\n        let i := 0\\n      } lt(i, len) {\\n\\n      } {\\n        i := add(i, 3)\\n        let input := and(mload(add(data, i)), 0xffffff)\\n\\n        let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n        out := shl(224, out)\\n\\n        mstore(resultPtr, out)\\n\\n        resultPtr := add(resultPtr, 4)\\n      }\\n\\n      switch mod(len, 3)\\n      case 1 {\\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n\\n      mstore(result, encodedLen)\\n    }\\n\\n    return string(result);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC721EnumerableOptimized.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\n/**\\n * @title ERC721EnumerableOptimized\\n * @author the-torn\\n *\\n * @notice Implementation of the ERC721Enumerable interface, gas-optimized for NFTs where:\\n *   - Minting is sequential, beginning with token ID 1.\\n *   - Burning is impossible.\\n *\\n *  IMPORTANT: Do not use this contract with NFTs where the above two conditions are not guaranteed.\\n *\\n *  Based on the OpenZeppelin ERC721Enumerable implementation (MIT license).\\n *  https://github.com/OpenZeppelin/openzeppelin-contracts/blob/aefcb3e8aa4ee8da8e2b7022ffe4dcb57fbb0fdf/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\n */\\nabstract contract ERC721EnumerableOptimized is\\n  ERC721,\\n  IERC721Enumerable\\n{\\n  // Mapping from owner to list of owned token IDs\\n  mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n  // Mapping from token ID to index of the owner tokens list\\n  mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n    return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n   */\\n  function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n    require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n    return _ownedTokens[owner][index];\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-totalSupply}.\\n   *\\n   *  As another aggressive gas cost optimization, we leave this to be implemented in the top-level\\n   *  minting contract.\\n   */\\n  function totalSupply() public view virtual override returns (uint256);\\n\\n  /**\\n   * @dev See {IERC721Enumerable-tokenByIndex}.\\n   */\\n  function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n    require(index < totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n    return index + 1;\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any token transfer. This includes minting\\n   * and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n   * transferred to `to`.\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\n   * - We assume burning is not supported, so `to` cannot be the zero address.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal virtual override {\\n    super._beforeTokenTransfer(from, to, tokenId);\\n\\n    if (\\n      from != address(0) &&\\n      from != to\\n    ) {\\n      _removeTokenFromOwnerEnumeration(from, tokenId);\\n    }\\n\\n    if (to != from) {\\n      _addTokenToOwnerEnumeration(to, tokenId);\\n    }\\n  }\\n\\n  /**\\n   * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n   * @param to address representing the new owner of the given token ID\\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n   */\\n  function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n    uint256 length = ERC721.balanceOf(to);\\n    _ownedTokens[to][length] = tokenId;\\n    _ownedTokensIndex[tokenId] = length;\\n  }\\n\\n  /**\\n   * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n   * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n   * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n   * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n   * @param from address representing the previous owner of the given token ID\\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n   */\\n  function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n    // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n    // then delete the last slot (swap and pop).\\n\\n    uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n    // When the token to delete is the last token, the swap operation is unnecessary\\n    if (tokenIndex != lastTokenIndex) {\\n      uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n      _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n      _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n    }\\n\\n    // This also deletes the contents at the last position of the array\\n    delete _ownedTokensIndex[tokenId];\\n    delete _ownedTokens[from][lastTokenIndex];\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/NFTDecksConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport { strings } from \\\"./strings.sol\\\";\\n\\n/**\\n * @title NFTDecksConstants\\n *\\n * @notice External library for constants used by NFTDecks\\n *\\n *  This is an external library in order to keep the main contract within the bytecode limit.\\n *\\n *  Based closely on the original Loot implementation (MIT License).\\n *  https://etherscan.io/address/0xff9c1b15b16263c61d017ee9f65c50e4ae0113d7#code#L1\\n *  The CSV optimization is owed to zefram.eth.\\n */\\nlibrary NFTDecksConstants {\\n  using strings for string;\\n  using strings for strings.slice;\\n\\n  enum ListName {\\n    WEAPON,\\n    CHEST,\\n    HEAD,\\n    WAIST,\\n    FOOT,\\n    HAND,\\n    WEAPON2,\\n    WEAPON3,\\n    SUFFIX,\\n    NAME_PREFIX,\\n    NAME_SUFFIX\\n  }\\n\\n  string internal constant WEAPONS = \\\"Imperial Rusty trident,Lucifers Gladius,Merciless Excalibur Sword,Ruthless Swine BroadAxe,Diabolical Short Sword, Excalibur, Cowards Blade, Galatine, Rhongomiant\\\";\\n  uint256 internal constant WEAPONS_LENGTH = 9;\\n\\n  string internal constant CHEST_ARMOR = \\\"Divine Vest,Silk Vest,Linen Vest,Vest,Dragonskin Jacket,Demon Husk,Dragonskin Armor,Studded Leather Armor,Hard Leather Armor,Leather Armor,Legandary Chestplate,Iron Chestplate,Plate Mail,Chain Mail,Ring Mail\\\";\\n  uint256 internal constant CHEST_ARMOR_LENGTH = 15;\\n\\n  string internal constant HEAD_ARMOR = \\\"Impregnable Helm, Ancient Helm,Ornate Helm,Great Helm,Full Helm,Helm,Demon Crown,Dragon's Crown,War Cap,Leather Cap,Cap,Crown,Divine Hood,Silk Hood,Linen Hood,Hood\\\";\\n  uint256 internal constant HEAD_ARMOR_LENGTH = 16;\\n\\n  string internal constant WAIST_ARMOR = \\\"Impregnable Sash, Ornate Sash,War Sash,Plated Sash,Mesh Sash,Heavy Sash,Demonhide Sash,Dragonskin Sash,Studded Leather Sash,Hard Leather Sash,Leather Sash,Brightsilk Strap,Silk Strap,Wool Strap,Linen Strap,Strap\\\";\\n  uint256 internal constant WAIST_ARMOR_LENGTH = 16;\\n\\n  string internal constant FOOT_ARMOR = \\\"Holy Greaves,Ornate Greaves,Impregnable Greaves,Chain Boots,Heavy Boots,Demonhide Boots,Dragonskin Boots,Studded Leather Boots,Hard Leather Boots,Leather Boots,Divine Slippers,Silk Slippers,Wool Shoes,Linen Shoes,Shoes\\\";\\n  uint256 internal constant FOOT_ARMOR_LENGTH = 15;\\n\\n  string internal constant HAND_ARMOR = \\\"Holy Gauntlets,Ornate Gauntlets,Impregnable Gauntlets,Chain Gloves,Heavy Gloves,Demon's Hands,Dragonskin Gloves,Studded Leather Gloves,Hard Leather Gloves,Leather Gloves,Divine Gloves,Silk Gloves,Wool Gloves,Linen Gloves,Gloves\\\";\\n  uint256 internal constant HAND_ARMOR_LENGTH = 15;\\n\\n  string internal constant WEAPON2 = \\\"Carnwennan,Devils Dagger,Diabolical Short Sword,Gastric Alleviation Speer,Feverish PickAxe,Dead Horsemans Pick,Everyday Mans Sledgehammer,Audacious Brides Hatchet,Pulmonary Mover Blade,Venomous Tipped Dagger,Impending Doom Laced Dagger\\\";\\n  uint256 internal constant WEAPON2_LENGTH = 11;\\n\\n  string internal constant WEAPON3 = \\\"Sly Chicken Sickles,Futile Wooden War Club,Nimble bar stick,Infected Deer Horn Knives,Pompous Sober Mans Throwing Darts,Barbaric Hand Held Stone Club,Lucifers Sickle, Degen Ape\\\";\\n  uint256 internal constant WEAPON3_LENGTH = 8;\\n\\n  string internal constant SUFFIXES = \\\"of Power,of Giants,of Titans,of Skill,of Perfection,of Brilliance,of Enlightenment,of Protection,of Anger,of Rage,of Fury,of Vitriol,of the Fox,of Detection,of Reflection,of the Twins\\\";\\n  uint256 internal constant SUFFIXES_LENGTH = 16;\\n\\n  string internal constant NAME_PREFIXES = \\\"Agony,Apocalypse,Armageddon,Beast,Behemoth,Blight,Blood,Bramble,Brimstone,Brood,Carrion,Cataclysm,Chimeric,Corpse,Corruption,Damnation,Death,Demon,Dire,Dragon,Dread,Doom,Dusk,Eagle,Empyrean,Fate,Foe,Gale,Ghoul,Gloom,Glyph,Golem,Grim,Hate,Havoc,Honour,Horror,Hypnotic,Kraken,Loath,Maelstrom,Mind,Miracle,Morbid,Oblivion,Onslaught,Pain,Pandemonium,Phoenix,Plague,Rage,Rapture,Rune,Skull,Sol,Soul,Sorrow,Spirit,Storm,Tempest,Torment,Vengeance,Victory,Viper,Vortex,Woe,Wrath,Light's,Shimmering\\\";\\n  uint256 internal constant NAME_PREFIXES_LENGTH = 69;\\n\\n  string internal constant NAME_SUFFIXES = \\\"Bane,Root,Crunch,Song,Roar,Grapple,Contraption,Shine,Bender,Shadow,Whisper,Scream,Growl,Rip,Peak,Form,Sun,Moon\\\";\\n  uint256 internal constant NAME_SUFFIXES_LENGTH = 18;\\n\\n  function getItem(\\n    uint256 rand,\\n    ListName listName\\n  )\\n    external\\n    pure\\n    returns (string memory)\\n  {\\n    if (listName == ListName.WEAPON) {\\n      return getItemFromCsv(WEAPONS, rand % WEAPONS_LENGTH);\\n    }\\n    if (listName == ListName.CHEST) {\\n      return getItemFromCsv(CHEST_ARMOR, rand % CHEST_ARMOR_LENGTH);\\n    }\\n    if (listName == ListName.HEAD) {\\n      return getItemFromCsv(HEAD_ARMOR, rand % HEAD_ARMOR_LENGTH);\\n    }\\n    if (listName == ListName.WAIST) {\\n      return getItemFromCsv(WAIST_ARMOR, rand % WAIST_ARMOR_LENGTH);\\n    }\\n    if (listName == ListName.FOOT) {\\n      return getItemFromCsv(FOOT_ARMOR, rand % FOOT_ARMOR_LENGTH);\\n    }\\n    if (listName == ListName.HAND) {\\n      return getItemFromCsv(HAND_ARMOR, rand % HAND_ARMOR_LENGTH);\\n    }\\n    if (listName == ListName.WEAPON2) {\\n      return getItemFromCsv(WEAPON2, rand % WEAPON2_LENGTH);\\n    }\\n    if (listName == ListName.WEAPON3) {\\n      return getItemFromCsv(WEAPON3, rand % WEAPON3_LENGTH);\\n    }\\n    if (listName == ListName.SUFFIX) {\\n      return getItemFromCsv(SUFFIXES, rand % SUFFIXES_LENGTH);\\n    }\\n    if (listName == ListName.NAME_PREFIX) {\\n      return getItemFromCsv(NAME_PREFIXES, rand % NAME_PREFIXES_LENGTH);\\n    }\\n    if (listName == ListName.NAME_SUFFIX) {\\n      return getItemFromCsv(NAME_SUFFIXES, rand % NAME_SUFFIXES_LENGTH);\\n    }\\n    revert(\\\"Invalid list name\\\");\\n  }\\n\\n  /**\\n   * @notice Convert an integer to a string.\\n   *\\n   * Inspired by OraclizeAPI's implementation (MIT license).\\n   * https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n   */\\n  function toString(\\n    uint256 value\\n  )\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @notice Read an item from a string of comma-separated values.\\n   *\\n   * Based on zefram.eth's implementation (MIT license).\\n   * https://etherscan.io/address/0xb9310af43f4763003f42661f6fc098428469adab#code\\n   */\\n  function getItemFromCsv(\\n    string memory str,\\n    uint256 index\\n  )\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    strings.slice memory strSlice = str.toSlice();\\n    string memory separatorStr = \\\",\\\";\\n    strings.slice memory separator = separatorStr.toSlice();\\n    strings.slice memory item;\\n    for (uint256 i = 0; i <= index; i++) {\\n      item = strSlice.split(separator);\\n    }\\n    return item.toString();\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n//\\n// Retrieved from https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol\\n// Modified to update Solidity version and include only certain functions.\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @title String & slice utility library for Solidity contracts.\\n * @author Nick Johnson <arachnid@notdot.net>\\n *\\n * @dev Functionality in this library is largely implemented using an\\n *      abstraction called a 'slice'. A slice represents a part of a string -\\n *      anything from the entire string to a single character, or even no\\n *      characters at all (a 0-length slice). Since a slice only has to specify\\n *      an offset and a length, copying and manipulating slices is a lot less\\n *      expensive than copying and manipulating the strings they reference.\\n *\\n *      To further reduce gas costs, most functions on slice that need to return\\n *      a slice modify the original one instead of allocating a new one; for\\n *      instance, `s.split(\\\".\\\")` will return the text up to the first '.',\\n *      modifying s to only contain the remainder of the string after the '.'.\\n *      In situations where you do not want to modify the original slice, you\\n *      can make a copy first with `.copy()`, for example:\\n *      `s.copy().split(\\\".\\\")`. Try and avoid using this idiom in loops; since\\n *      Solidity has no memory management, it will result in allocating many\\n *      short-lived slices that are later discarded.\\n *\\n *      Functions that return two slices come in two versions: a non-allocating\\n *      version that takes the second slice as an argument, modifying it in\\n *      place, and an allocating version that allocates and returns the second\\n *      slice; see `nextRune` for example.\\n *\\n *      Functions that have to copy string data will return strings rather than\\n *      slices; these can be cast back to slices for further processing if\\n *      required.\\n *\\n *      For convenience, some functions are provided with non-modifying\\n *      variants that create a new slice and return both; for instance,\\n *      `s.splitNew('.')` leaves s unmodified, and returns two values\\n *      corresponding to the left and right parts of the string.\\n */\\nlibrary strings {\\n  struct slice {\\n    uint _len;\\n    uint _ptr;\\n  }\\n\\n  function memcpy(uint dest, uint src, uint len) private pure {\\n    // Copy word-length chunks while possible\\n    for(; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint mask = 256 ** (32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n  }\\n\\n  /*\\n   * @dev Returns a slice containing the entire string.\\n   * @param self The string to make a slice from.\\n   * @return A newly allocated slice containing the entire string.\\n   */\\n  function toSlice(string memory self) internal pure returns (slice memory) {\\n    uint ptr;\\n    assembly {\\n      ptr := add(self, 0x20)\\n    }\\n    return slice(bytes(self).length, ptr);\\n  }\\n\\n  /*\\n   * @dev Copies a slice to a new string.\\n   * @param self The slice to copy.\\n   * @return A newly allocated string containing the slice's text.\\n   */\\n  function toString(slice memory self) internal pure returns (string memory) {\\n    string memory ret = new string(self._len);\\n    uint retptr;\\n    assembly { retptr := add(ret, 32) }\\n\\n    memcpy(retptr, self._ptr, self._len);\\n    return ret;\\n  }\\n\\n  // Returns the memory address of the first byte of the first occurrence of\\n  // `needle` in `self`, or the first byte after `self` if not found.\\n  function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\\n    uint ptr = selfptr;\\n    uint idx;\\n\\n    if (needlelen <= selflen) {\\n      if (needlelen <= 32) {\\n        bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\\n\\n        bytes32 needledata;\\n        assembly { needledata := and(mload(needleptr), mask) }\\n\\n        uint end = selfptr + selflen - needlelen;\\n        bytes32 ptrdata;\\n        assembly { ptrdata := and(mload(ptr), mask) }\\n\\n        while (ptrdata != needledata) {\\n          if (ptr >= end)\\n            return selfptr + selflen;\\n          ptr++;\\n          assembly { ptrdata := and(mload(ptr), mask) }\\n        }\\n        return ptr;\\n      } else {\\n        // For long needles, use hashing\\n        bytes32 hash;\\n        assembly { hash := keccak256(needleptr, needlelen) }\\n\\n        for (idx = 0; idx <= selflen - needlelen; idx++) {\\n          bytes32 testHash;\\n          assembly { testHash := keccak256(ptr, needlelen) }\\n          if (hash == testHash)\\n            return ptr;\\n          ptr += 1;\\n        }\\n      }\\n    }\\n    return selfptr + selflen;\\n  }\\n\\n  /*\\n   * @dev Splits the slice, setting `self` to everything after the first\\n   *      occurrence of `needle`, and `token` to everything before it. If\\n   *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n   *      and `token` is set to the entirety of `self`.\\n   * @param self The slice to split.\\n   * @param needle The text to search for in `self`.\\n   * @param token An output parameter to which the first token is written.\\n   * @return `token`.\\n   */\\n  function split(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\\n    uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\\n    token._ptr = self._ptr;\\n    token._len = ptr - self._ptr;\\n    if (ptr == self._ptr + self._len) {\\n      // Not found\\n      self._len = 0;\\n    } else {\\n      self._len -= token._len + needle._len;\\n      self._ptr = ptr + needle._len;\\n    }\\n    return token;\\n  }\\n\\n  /*\\n   * @dev Splits the slice, setting `self` to everything after the first\\n   *      occurrence of `needle`, and returning everything before it. If\\n   *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n   *      and the entirety of `self` is returned.\\n   * @param self The slice to split.\\n   * @param needle The text to search for in `self`.\\n   * @return The part of `self` up to the first occurrence of `delim`.\\n   */\\n  function split(slice memory self, slice memory needle) internal pure returns (slice memory token) {\\n    split(self, needle, token);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/NFTDecksConstants.sol\": {\r\n        \"NFTDecksConstants\": \"0x1ac1801f2dfe4c34497dbbcf267dbc69639ccd8b\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guardianHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"guardianWindowDurationSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDistributionDurationSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"}],\"name\":\"SetFinalSeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"}],\"name\":\"SetSeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"SetSeedBlockNumber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DISTRIBUTION_AUTO_END_TIMESTAMP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_WINDOW_DURATION_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DISTRIBUTION_DURATION_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getChest\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFinalSeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFoot\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getHand\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getHead\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getWEAPON2\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getWEAPON3\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getWaist\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getWeapon\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAutomaticSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAutomaticSeedBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setFallbackSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setFallbackSeedBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setFinalSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guardianSeed\",\"type\":\"bytes32\"}],\"name\":\"setGuardianSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NFTDeck1","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"b6850b641ef4637cb54a553e1d425ee7a560827e44e78f148cef0ec2eec8c6b100000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000000093a800000000000000000000000000000000000000000000000000000000000000320","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}