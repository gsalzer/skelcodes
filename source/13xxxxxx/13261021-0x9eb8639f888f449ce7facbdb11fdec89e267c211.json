{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TGE.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Signature.sol\\\";\\n\\ncontract TGE is Ownable, Signature {\\n    using SafeERC20 for IERC20;\\n\\n    /** @dev Terms and conditions as a keccak256 hash */\\n    string public constant termsAndConditions =\\n        \\\"By signing this message I agree to the $FOREX TOKEN - TERMS AND CONDITIONS identified by the hash: 0x1b42a1c6369d3efbf3b65d757e3f5e804bc26935b45dda1eaf0d90ef297289b4\\\";\\n    /** @dev ERC-191 encoded Terms and Conditions for signature validation */\\n    bytes32 private constant termsAndConditionsERC191 =\\n        keccak256(\\n            abi.encodePacked(\\n                bytes1(0x19),\\n                bytes1(\\\"E\\\"),\\n                bytes(\\\"thereum Signed Message:\\\\n165\\\"),\\n                abi.encodePacked(termsAndConditions)\\n            )\\n        );\\n    /** @dev Error message for claiming before allowed period */\\n    string private constant notClaimable = \\\"Funds not yet claimable\\\";\\n    /** @dev The amount of FOREX to be generated */\\n    uint256 public constant forexAmount = 21_000_000 ether;\\n    /** @dev The address of this contract's deployed instance */\\n    address private immutable self;\\n    /** @dev Canonical FOREX token address */\\n    address public immutable FOREX;\\n    /** @dev Per-user deposit cap */\\n    uint256 public immutable userCap;\\n    /** @dev Minimum token price in ETH (soft cap parameter) */\\n    uint256 public minTokenPrice;\\n    /** @dev Maximum token price in ETH (if hard cap is met) */\\n    uint256 public maxTokenPrice;\\n    /** @dev Generation duration (seconds)  */\\n    uint256 public immutable generationDuration;\\n    /** @dev Start date for the generation; when ETH deposits are accepted */\\n    uint256 public immutable generationStartDate;\\n    /** @dev Maximum deposit cap in ETH from which new deposits are ignored */\\n    uint256 public depositCap;\\n    /** @dev Date from when FOREX claiming is allowed */\\n    uint256 public claimDate;\\n    /** @dev Amount of ETH deposited during the TGE */\\n    uint256 public ethDeposited;\\n    /** @dev Mapping of (depositor => eth amount) for the TGE period */\\n    mapping(address => uint256) private deposits;\\n    /** @dev Mapping of (depositor => T&Cs signature status) */\\n    mapping(address => bool) public signedTermsAndConditions;\\n    /** @dev Mapping of (depositor => claimed eth) */\\n    mapping(address => bool) private claimedEth;\\n    /** @dev Mapping of (depositor => claimed forex) */\\n    mapping(address => bool) private claimedForex;\\n    /** @dev The total ETH deposited under a referral address */\\n    mapping(address => uint256) public referrerDeposits;\\n    /** @dev Number of depositors */\\n    uint256 public depositorCount;\\n    /** @dev Whether leftover FOREX tokens were withdrawn by owner\\n             (only possible if FOREX did not reach the max price) */\\n    bool private withdrawnRemainingForex;\\n    /** @dev Whether the TGE was aborted by the owner */\\n    bool private aborted;\\n    /** @dev ETH withdrawn by owner */\\n    uint256 public ethWithdrawnByOwner;\\n\\n    modifier notAborted() {\\n        require(!aborted, \\\"TGE aborted\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _FOREX,\\n        uint256 _userCap,\\n        uint256 _depositCap,\\n        uint256 _minTokenPrice,\\n        uint256 _maxTokenPrice,\\n        uint256 _generationDuration,\\n        uint256 _generationStartDate\\n    ) {\\n        require(_generationDuration > 0, \\\"Duration must be > 0\\\");\\n        require(\\n            _generationStartDate > block.timestamp,\\n            \\\"Start date must be in the future\\\"\\n        );\\n        self = address(this);\\n        FOREX = _FOREX;\\n        userCap = _userCap;\\n        depositCap = _depositCap;\\n        minTokenPrice = _minTokenPrice;\\n        maxTokenPrice = _maxTokenPrice;\\n        generationDuration = _generationDuration;\\n        generationStartDate = _generationStartDate;\\n    }\\n\\n    /**\\n     * @dev Deny direct ETH transfers.\\n     */\\n    receive() external payable {\\n        revert(\\\"Must call deposit to participate\\\");\\n    }\\n\\n    /**\\n     * @dev Validates a signature for the hashed terms & conditions message.\\n     *      The T&Cs hash is converted to an ERC-191 message before verifying.\\n     * @param signature The signature to validate.\\n     */\\n    function signTermsAndConditions(bytes memory signature) public {\\n        if (signedTermsAndConditions[msg.sender]) return;\\n        address signer = getSignatureAddress(\\n            termsAndConditionsERC191,\\n            signature\\n        );\\n        require(signer == msg.sender, \\\"Invalid signature\\\");\\n        signedTermsAndConditions[msg.sender] = true;\\n    }\\n\\n    /**\\n     * @dev Allow incoming ETH transfers during the TGE period.\\n     */\\n    function deposit(address referrer, bytes memory signature)\\n        external\\n        payable\\n        notAborted\\n    {\\n        // Sign T&Cs if the signature is not empty.\\n        // User must pass a valid signature before the first deposit.\\n        if (signature.length != 0) signTermsAndConditions(signature);\\n        // Assert that the user can deposit.\\n        require(signedTermsAndConditions[msg.sender], \\\"Must sign T&Cs\\\");\\n        require(hasTgeBeenStarted(), \\\"TGE has not started yet\\\");\\n        require(!hasTgeEnded(), \\\"TGE has finished\\\");\\n        uint256 currentDeposit = deposits[msg.sender];\\n        // Revert if the user cap or TGE cap has already been met.\\n        require(currentDeposit < userCap, \\\"User cap met\\\");\\n        require(ethDeposited < depositCap, \\\"TGE deposit cap met\\\");\\n        // Assert that the deposit amount is greater than zero.\\n        uint256 deposit = msg.value;\\n        assert(deposit > 0);\\n        // Increase the depositorCount if first deposit by user.\\n        if (currentDeposit == 0) depositorCount++;\\n        if (currentDeposit + deposit > userCap) {\\n            // Ensure deposit over user cap is returned.\\n            safeSendEth(msg.sender, currentDeposit + deposit - userCap);\\n            // Adjust user deposit.\\n            deposit = userCap - currentDeposit;\\n        } else if (ethDeposited + deposit > depositCap) {\\n            // Ensure deposit over TGE cap is returned.\\n            safeSendEth(msg.sender, ethDeposited + deposit - depositCap);\\n            // Adjust user deposit.\\n            deposit -= ethDeposited + deposit - depositCap;\\n        }\\n        // Only contribute to referrals if the hard cap hasn't been met yet.\\n        uint256 hardCap = ethHardCap();\\n        if (ethDeposited < hardCap) {\\n            uint256 referralDepositAmount = deposit;\\n            // Subtract surplus from hard cap if any.\\n            if (ethDeposited + deposit > hardCap)\\n                referralDepositAmount -= ethDeposited + deposit - hardCap;\\n            referrerDeposits[referrer] += referralDepositAmount;\\n        }\\n        // Increase deposit variables.\\n        ethDeposited += deposit;\\n        deposits[msg.sender] += deposit;\\n    }\\n\\n    /**\\n     * @dev Claim depositor funds (FOREX and ETH) once the TGE has closed.\\n            This may be called right after TGE closing for withdrawing surplus\\n            ETH (if FOREX reached max price/hard cap) or once (again when) the\\n            claim period starts for claiming both FOREX along with any surplus.\\n     */\\n    function claim() external notAborted {\\n        require(hasTgeEnded(), notClaimable);\\n        (uint256 forex, uint256 forexReferred, uint256 eth) = balanceOf(\\n            msg.sender\\n        );\\n        // Revert here if there's no ETH to withdraw as the FOREX claiming\\n        // period may not have yet started.\\n        require(eth > 0 || isTgeClaimable(), notClaimable);\\n        forex += forexReferred;\\n        // Claim forex only if the claimable period has started.\\n        if (isTgeClaimable() && forex > 0) claimForex(forex);\\n        // Claim ETH hardcap surplus if available.\\n        if (eth > 0) claimEthSurplus(eth);\\n    }\\n\\n    /**\\n     * @dev Claims ETH for user.\\n     * @param eth The amount of ETH to claim.\\n     */\\n    function claimEthSurplus(uint256 eth) private {\\n        if (claimedEth[msg.sender]) return;\\n        claimedEth[msg.sender] = true;\\n        if (eth > 0) safeSendEth(msg.sender, eth);\\n    }\\n\\n    /**\\n     * @dev Claims FOREX for user.\\n     * @param forex The amount of FOREX to claim.\\n     */\\n    function claimForex(uint256 forex) private {\\n        if (claimedForex[msg.sender]) return;\\n        claimedForex[msg.sender] = true;\\n        IERC20(FOREX).safeTransfer(msg.sender, forex);\\n    }\\n\\n    /**\\n     * @dev Withdraws leftover forex in case the hard cap is not met during TGE.\\n     */\\n    function withdrawRemainingForex(address recipient) external onlyOwner {\\n        assert(!withdrawnRemainingForex);\\n        // Revert if the TGE has not ended.\\n        require(hasTgeEnded(), \\\"TGE has not finished\\\");\\n        (uint256 forexClaimable, ) = getClaimableData();\\n        uint256 remainingForex = forexAmount - forexClaimable;\\n        withdrawnRemainingForex = true;\\n        // Add address zero (null) referrals to withdrawal.\\n        remainingForex += getReferralForexAmount(address(0));\\n        if (remainingForex == 0) return;\\n        IERC20(FOREX).safeTransfer(recipient, remainingForex);\\n    }\\n\\n    /**\\n     * @dev Returns an account's balance of claimable forex, referral forex,\\n            and ETH.\\n     * @param account The account to fetch the claimable balance for.\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        returns (\\n            uint256 forex,\\n            uint256 forexReferred,\\n            uint256 eth\\n        )\\n    {\\n        if (!hasTgeEnded()) return (0, 0, 0);\\n        (uint256 forexClaimable, uint256 ethClaimable) = getClaimableData();\\n        uint256 share = shareOf(account);\\n        eth = claimedEth[account] ? 0 : (ethClaimable * share) / (1 ether);\\n        if (claimedForex[account]) {\\n            forex = 0;\\n            forexReferred = 0;\\n        } else {\\n            forex = (forexClaimable * share) / (1 ether);\\n            // Forex earned through referrals is 5% of the referred deposits\\n            // in FOREX.\\n            forexReferred = getReferralForexAmount(account);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an account's share over the TGE deposits.\\n     * @param account The account to fetch the share for.\\n     * @return Share value as an 18 decimal ratio. 1 ether = 100%.\\n     */\\n    function shareOf(address account) public view returns (uint256) {\\n        if (ethDeposited == 0) return 0;\\n        return (deposits[account] * (1 ether)) / ethDeposited;\\n    }\\n\\n    /**\\n     * @dev Returns the ETH deposited by an address.\\n     * @param depositor The depositor address.\\n     */\\n    function getDeposit(address depositor) external view returns (uint256) {\\n        return deposits[depositor];\\n    }\\n\\n    /**\\n     * @dev Whether the TGE already started. It could be closed even if\\n            this function returns true.\\n     */\\n    function hasTgeBeenStarted() private view returns (bool) {\\n        return block.timestamp >= generationStartDate;\\n    }\\n\\n    /**\\n     * @dev Whether the TGE has ended and is closed for new deposits.\\n     */\\n    function hasTgeEnded() private view returns (bool) {\\n        return block.timestamp > generationStartDate + generationDuration;\\n    }\\n\\n    /**\\n     * @dev Whether the TGE funds can be claimed.\\n     */\\n    function isTgeClaimable() private view returns (bool) {\\n        return claimDate != 0 && block.timestamp >= claimDate;\\n    }\\n\\n    /**\\n     * @dev The amount of ETH required to generate all supply at max price.\\n     */\\n    function ethHardCap() private view returns (uint256) {\\n        return (forexAmount * maxTokenPrice) / (1 ether);\\n    }\\n\\n    /**\\n     * @dev Returns the forex price as established by the deposit amount.\\n     *      The formula for the price is the following:\\n     * minPrice + ([maxPrice - minPrice] * min(deposit, maxDeposit)/maxDeposit)\\n     * Where maxDeposit = ethHardCap()\\n     */\\n    function forexPrice() public view returns (uint256) {\\n        uint256 hardCap = ethHardCap();\\n        uint256 depositTowardsHardCap = ethDeposited > hardCap\\n            ? hardCap\\n            : ethDeposited;\\n        uint256 priceRange = maxTokenPrice - minTokenPrice;\\n        uint256 priceDelta = (priceRange * depositTowardsHardCap) / hardCap;\\n        return minTokenPrice + priceDelta;\\n    }\\n\\n    /**\\n     * @dev Returns TGE data to be used for claims once the TGE closes.\\n     */\\n    function getClaimableData()\\n        private\\n        view\\n        returns (uint256 forexClaimable, uint256 ethClaimable)\\n    {\\n        assert(hasTgeEnded());\\n        uint256 forexPrice = forexPrice();\\n        uint256 hardCap = ethHardCap();\\n        // ETH is only claimable if the deposits exceeded the hard cap.\\n        ethClaimable = ethDeposited > hardCap ? ethDeposited - hardCap : 0;\\n        // Forex is claimable up to the maximum supply -- when deposits match\\n        // the hard cap amount.\\n        forexClaimable =\\n            ((ethDeposited - ethClaimable) * (1 ether)) /\\n            forexPrice;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of FOREX earned by a referrer.\\n     * @param referrer The referrer's address.\\n     */\\n    function getReferralForexAmount(address referrer)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        // Referral claims are disabled.\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Aborts the TGE, stopping new deposits and withdrawing all funds\\n     *      for the owner.\\n     *      The only use case for this function is in the\\n     *      event of an emergency.\\n     */\\n    function emergencyAbort() external onlyOwner {\\n        assert(!aborted);\\n        aborted = true;\\n        emergencyWithdrawAllFunds();\\n    }\\n\\n    /**\\n     * @dev Withdraws all contract funds for the owner.\\n     *      The only use case for this function is in the\\n     *      event of an emergency.\\n     */\\n    function emergencyWithdrawAllFunds() public onlyOwner {\\n        // Transfer ETH.\\n        uint256 balance = self.balance;\\n        if (balance > 0) safeSendEth(msg.sender, balance);\\n        // Transfer FOREX.\\n        IERC20 forex = IERC20(FOREX);\\n        balance = forex.balanceOf(self);\\n        if (balance > 0) forex.transfer(msg.sender, balance);\\n    }\\n\\n    /**\\n     * @dev Withdraws all ETH funds for the owner.\\n     *      This function may be called at any time, as it correctly\\n     *      withdraws only the correct contribution amount, ignoring\\n     *      the ETH amount to be refunded if the deposits exceed\\n     *      the hard cap.\\n     */\\n    function collectContributions() public onlyOwner {\\n        uint256 hardCap = ethHardCap();\\n        require(\\n            ethWithdrawnByOwner < hardCap,\\n            \\\"Cannot withdraw more than hard cap amount\\\"\\n        );\\n        uint256 amount = self.balance;\\n        if (amount + ethWithdrawnByOwner > hardCap)\\n            amount = hardCap - ethWithdrawnByOwner;\\n        ethWithdrawnByOwner += amount;\\n        require(amount > 0, \\\"Nothing available for withdrawal\\\");\\n        safeSendEth(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Enables FOREX claiming from the next block.\\n     *      Requires the TGE to have been closed.\\n     */\\n    function enableForexClaims() external onlyOwner {\\n        assert(hasTgeEnded() && !isTgeClaimable());\\n        claimDate = block.timestamp + 1;\\n    }\\n\\n    /**\\n     * @dev Sets the minimum and maximum token prices before the TGE starts.\\n     *      Also sets the deposit cap.\\n     * @param min The minimum token price in ETH.\\n     * @param max The maximum token price in ETH.\\n     * @param _depositCap The ETH deposit cap.\\n     */\\n    function setMinMaxForexPrices(\\n        uint256 min,\\n        uint256 max,\\n        uint256 _depositCap\\n    ) external onlyOwner {\\n        assert(!hasTgeBeenStarted());\\n        require(max > min && _depositCap > max, \\\"Invalid values\\\");\\n        minTokenPrice = min;\\n        maxTokenPrice = max;\\n        depositCap = _depositCap;\\n    }\\n\\n    /**\\n     * @dev Sends ETH and reverts if the transfer fails.\\n     * @param recipient The transfer recipient.\\n     * @param amount The transfer amount.\\n     */\\n    function safeSendEth(address recipient, uint256 amount) private {\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Failed to send ETH\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Signature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nabstract contract Signature {\\n    /**\\n     * @dev Returns the address that signed a message given a signature.\\n     * @param message The message signed.\\n     * @param signature The signature.\\n     */\\n    function getSignatureAddress(bytes32 message, bytes memory signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        assert(signature.length == 65);\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        assembly {\\n            // First 32 bytes after length prefix.\\n            r := mload(add(signature, 32))\\n            // Next 32 bytes.\\n            s := mload(add(signature, 64))\\n            // Final byte.\\n            v := byte(0, mload(add(signature, 96)))\\n        }\\n        return ecrecover(message, v, r, s);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_FOREX\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_userCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_generationDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_generationStartDate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FOREX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"forex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forexReferred\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectContributions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyAbort\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawAllFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableForexClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethWithdrawnByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forexAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forexPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generationDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generationStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositCap\",\"type\":\"uint256\"}],\"name\":\"setMinMaxForexPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shareOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"signTermsAndConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signedTermsAndConditions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"termsAndConditions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawRemainingForex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TGE","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000db298285fe4c5410b05390ca80e8fbe9de1f259b0000000000000000000000000000000000000000000000003a4965bf58a4000000000000000000000000000000000000000000000000013043cb0310fc0a0000000000000000000000000000000000000000000000000000000026959b733000000000000000000000000000000000000000000000000000000039e0692cc8000000000000000000000000000000000000000000000000000000000000024ea00000000000000000000000000000000000000000000000000000000061494ab0","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}