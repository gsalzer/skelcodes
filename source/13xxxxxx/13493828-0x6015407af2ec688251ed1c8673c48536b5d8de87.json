{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MogulMarketplaceERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract MogulMarketplaceERC1155 is\\n    ERC1155Holder,\\n    AccessControl,\\n    ReentrancyGuard\\n{\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant ROLE_ADMIN = keccak256(\\\"ROLE_ADMIN\\\");\\n    address payable public treasuryWallet;\\n    IERC20 stars;\\n    uint256 public nextListingId;\\n    uint256 public nextAuctionId;\\n    uint256 public starsFeeBasisPoint; //4 decimals, applies to auctions and listings. Fees collected are held in contract\\n    uint256 public ethFeeBasisPoint; //4 decimals, applies to auctions and listings. Fees collected are held in contract\\n    uint256 public adminEth; //Total Ether available for withdrawal\\n    uint256 public adminStars; //Total Stars available for withdrawal\\n    uint256 private highestCommissionBasisPoint; //Used to determine what the maximum fee\\n    uint256 public starsAvailableForCashBack; //STARS available for cashback\\n    uint256 public starsCashBackBasisPoint;\\n    bool public starsAllowed = true;\\n    bool public ethAllowed = true;\\n\\n    struct Listing {\\n        address payable seller;\\n        address tokenAddress;\\n        uint256 tokenId;\\n        uint256 tokenAmount;\\n        uint256 starsPrice;\\n        uint256 ethPrice;\\n        bool isStarsListing;\\n        bool isEthListing;\\n    }\\n\\n    struct Auction {\\n        address payable seller;\\n        address tokenAddress;\\n        uint256 tokenId;\\n        uint256 tokenAmount;\\n        uint256 startingPrice;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 reservePrice;\\n        bool isStarsAuction;\\n        Bid highestBid;\\n    }\\n\\n    struct Bid {\\n        address payable bidder;\\n        uint256 amount;\\n    }\\n\\n    struct TokenCommissionInfo {\\n        address payable artistAddress;\\n        uint256 commissionBasisPoint; //4 decimals\\n    }\\n\\n    EnumerableSet.AddressSet private mogulNFTs;\\n    EnumerableSet.UintSet private listingIds;\\n    EnumerableSet.UintSet private auctionIds;\\n\\n    mapping(uint256 => Listing) public listings;\\n    mapping(uint256 => Auction) public auctions;\\n    mapping(address => mapping(uint256 => TokenCommissionInfo))\\n        public commissions; //NFT address to (token ID to TokenCommissionInfo)\\n\\n    event ListingCreated(\\n        uint256 listingId,\\n        address seller,\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 tokenAmount,\\n        uint256 starsPrice,\\n        uint256 ethPrice,\\n        bool isStarsListing,\\n        bool isEthListing\\n    );\\n    event ListingCancelled(uint256 listingId);\\n    event ListingPriceChanged(\\n        uint256 listingId,\\n        uint256 newPrice,\\n        bool isStarsPrice\\n    );\\n    event AuctionCreated(\\n        uint256 auctionId,\\n        address seller,\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 tokenAmount,\\n        uint256 startingPrice,\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 reservePrice,\\n        bool isStarsAuction\\n    );\\n    event SaleMade(\\n        address buyer,\\n        uint256 listingId,\\n        uint256 amount,\\n        bool isStarsPurchase\\n    );\\n    event BidPlaced(\\n        address bidder,\\n        uint256 auctionId,\\n        uint256 amount,\\n        bool isStarsBid\\n    );\\n    event AuctionClaimed(address winner, uint256 auctionId);\\n    event AuctionCancelled(uint256 auctionId);\\n    event AuctionReservePriceChanged(\\n        uint256 auctionId,\\n        uint256 newReservePrice\\n    );\\n    event TokenCommissionSingleAdded(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        address artistAddress,\\n        uint256 commissionBasisPoint\\n    );\\n    event TokenCommissionBulkAdded(\\n        address tokenAddress,\\n        uint256[] tokenIds,\\n        address payable[] artistAddresses,\\n        uint256[] commissionBasisPoints\\n    );\\n    event StarsCashBackBasisPointSet(uint256 newStarsCashBackBasisPoint);\\n    event StarsFeeBasisPointSet(uint256 newStarsFeeBasisPoint);\\n    event EthFeeBasisPointSet(uint256 newEthFeeBasisPoint);\\n\\n    modifier onlyAdmin {\\n        require(hasRole(ROLE_ADMIN, msg.sender), \\\"Sender is not admin\\\");\\n        _;\\n    }\\n\\n    modifier sellerOrAdmin(address seller) {\\n        require(\\n            msg.sender == seller || hasRole(ROLE_ADMIN, msg.sender),\\n            \\\"Sender is not seller or admin\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Stores the Stars contract, and allows users with the admin role to\\n     * grant/revoke the admin role from other users. Stores treasury wallet.\\n     *\\n     * Params:\\n     * starsAddress: the address of the Stars contract\\n     * _admin: address of the first admin\\n     * _treasuryWallet: address of treasury wallet\\n     * _mogulNFTAddress: address of a Mogul NFT\\n     */\\n    constructor(\\n        address starsAddress,\\n        address _admin,\\n        address payable _treasuryWallet,\\n        address _mogulNFTAddress\\n    ) {\\n        require(\\n            _treasuryWallet != address(0),\\n            \\\"Treasury wallet cannot be 0 address\\\"\\n        );\\n        _setupRole(ROLE_ADMIN, _admin);\\n        _setRoleAdmin(ROLE_ADMIN, ROLE_ADMIN);\\n\\n        treasuryWallet = _treasuryWallet;\\n        stars = IERC20(starsAddress);\\n\\n        mogulNFTs.add(_mogulNFTAddress);\\n    }\\n\\n    //Allows contract to inherit both ERC1155Receiver and AccessControl\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC1155Receiver, AccessControl)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(ERC1155Receiver).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    //Get number of listings\\n    function getNumListings() external view returns (uint256) {\\n        return listingIds.length();\\n    }\\n\\n    /**\\n     * @dev Get listing ID at index\\n     *\\n     * Params:\\n     * indices: indices of IDs\\n     */\\n    function getListingIds(uint256[] memory indices)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory output = new uint256[](indices.length);\\n        for (uint256 i = 0; i < indices.length; i++) {\\n            output[i] = listingIds.at(indices[i]);\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @dev Get listing correlated to index\\n     *\\n     * Params:\\n     * indices: indices of IDs\\n     */\\n    function getListingsAtIndices(uint256[] memory indices)\\n        external\\n        view\\n        returns (Listing[] memory)\\n    {\\n        Listing[] memory output = new Listing[](indices.length);\\n        for (uint256 i = 0; i < indices.length; i++) {\\n            output[i] = listings[listingIds.at(indices[i])];\\n        }\\n        return output;\\n    }\\n\\n    //Get number of auctions\\n    function getNumAuctions() external view returns (uint256) {\\n        return auctionIds.length();\\n    }\\n\\n    /**\\n     * @dev Get auction ID at index\\n     *\\n     * Params:\\n     * indices: indices of IDs\\n     */\\n    function getAuctionIds(uint256[] memory indices)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory output = new uint256[](indices.length);\\n        for (uint256 i = 0; i < indices.length; i++) {\\n            output[i] = auctionIds.at(indices[i]);\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @dev Get auction correlated to index\\n     *\\n     * Params:\\n     * indices: indices of IDs\\n     */\\n    function getAuctionsAtIndices(uint256[] memory indices)\\n        external\\n        view\\n        returns (Auction[] memory)\\n    {\\n        Auction[] memory output = new Auction[](indices.length);\\n        for (uint256 i = 0; i < indices.length; i++) {\\n            output[i] = auctions[auctionIds.at(indices[i])];\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @dev Get commission info for array of tokens\\n     *\\n     * Params:\\n     * NFTAddress: address of NFT\\n     * tokenIds: token IDs\\n     */\\n    function getCommissionInfoForTokens(\\n        address NFTAddress,\\n        uint256[] memory tokenIds\\n    ) external view returns (TokenCommissionInfo[] memory) {\\n        TokenCommissionInfo[] memory output =\\n            new TokenCommissionInfo[](tokenIds.length);\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            output[i] = commissions[NFTAddress][tokenIds[i]];\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @dev Create a new listing\\n     *\\n     * Params:\\n     * tokenAddress: address of token to list\\n     * tokenId: id of token\\n     * tokenAmount: number of tokens\\n     * starsPrice: listing STARS price\\n     * ethPrice: listing ETH price\\n     * isStarsListing: whether or not the listing can be sold for STARS\\n     * isEthListing: whether or not the listing can be sold for ETH\\n     *\\n     * Requirements:\\n     * - Listings of given currencies are allowed\\n     * - Price of given currencies are not 0\\n     * - mogulNFTs contains tokenAddress\\n     */\\n    function createListing(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 tokenAmount,\\n        uint256 starsPrice,\\n        uint256 ethPrice,\\n        bool isStarsListing,\\n        bool isEthListing\\n    ) public nonReentrant() {\\n        require(\\n            mogulNFTs.contains(tokenAddress),\\n            \\\"Only Mogul NFTs can be listed\\\"\\n        );\\n        if (isStarsListing) {\\n            require(starsPrice != 0, \\\"Price cannot be 0\\\");\\n        }\\n        if (isEthListing) {\\n            require(ethPrice != 0, \\\"Price cannot be 0\\\");\\n        }\\n\\n        require(tokenAmount != 0, \\\"Cannot list 0 tokens\\\");\\n\\n        if (isStarsListing) {\\n            require(starsAllowed, \\\"STARS listings are not allowed\\\");\\n        }\\n        if (isEthListing) {\\n            require(ethAllowed, \\\"ETH listings are not allowed\\\");\\n        }\\n\\n        IERC1155 token = IERC1155(tokenAddress);\\n        token.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            tokenId,\\n            tokenAmount,\\n            \\\"\\\"\\n        );\\n        uint256 listingId = generateListingId();\\n        listings[listingId] = Listing(\\n            payable(msg.sender),\\n            tokenAddress,\\n            tokenId,\\n            tokenAmount,\\n            starsPrice,\\n            ethPrice,\\n            isStarsListing,\\n            isEthListing\\n        );\\n        listingIds.add(listingId);\\n\\n        emit ListingCreated(\\n            listingId,\\n            msg.sender,\\n            tokenAddress,\\n            tokenId,\\n            tokenAmount,\\n            starsPrice,\\n            ethPrice,\\n            isStarsListing,\\n            isEthListing\\n        );\\n    }\\n\\n    /**\\n     * @dev Batch create new listings\\n     *\\n     * Params:\\n     * tokenAddresses: addresses of tokens to list\\n     * tokenIds: id of each token\\n     * tokenAmounts: amount of each token to list\\n     * starsPrices: STARS price of each listing\\n     * ethPrices: ETH price of each listing\\n     * areStarsListings: whether or not each listing can be sold for Stars\\n     * areEthListings: whether or not each listing can be sold for ETH\\n     *\\n     * Requirements:\\n     * - All inputs are the same length\\n     */\\n    function batchCreateListings(\\n        address[] calldata tokenAddresses,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata tokenAmounts,\\n        uint256[] calldata starsPrices,\\n        uint256[] calldata ethPrices,\\n        bool[] memory areStarsListings,\\n        bool[] memory areEthListings\\n    ) external onlyAdmin {\\n        require(\\n            tokenAddresses.length == tokenIds.length &&\\n                tokenIds.length == tokenAmounts.length &&\\n                tokenAmounts.length == starsPrices.length &&\\n                starsPrices.length == ethPrices.length &&\\n                ethPrices.length == areStarsListings.length &&\\n                areStarsListings.length == areEthListings.length,\\n            \\\"Incorrect input lengths\\\"\\n        );\\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\n            createListing(\\n                tokenAddresses[i],\\n                tokenIds[i],\\n                tokenAmounts[i],\\n                starsPrices[i],\\n                ethPrices[i],\\n                areStarsListings[i],\\n                areEthListings[i]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Cancel a listing\\n     *\\n     * Params:\\n     * listingId: listing ID\\n     */\\n    function cancelListing(uint256 listingId)\\n        public\\n        sellerOrAdmin(listings[listingId].seller)\\n        nonReentrant()\\n    {\\n        require(listingIds.contains(listingId), \\\"Listing does not exist\\\");\\n        Listing storage listing = listings[listingId];\\n\\n        listingIds.remove(listingId);\\n\\n        IERC1155 token = IERC1155(listing.tokenAddress);\\n        token.safeTransferFrom(\\n            address(this),\\n            listing.seller,\\n            listing.tokenId,\\n            listing.tokenAmount,\\n            \\\"\\\"\\n        );\\n        emit ListingCancelled(listingId);\\n    }\\n\\n    function batchCancelListing(uint256[] calldata _listingIds)\\n        external\\n        onlyAdmin\\n    {\\n        for (uint256 i = 0; i < _listingIds.length; i++) {\\n            cancelListing(_listingIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change price of a listing\\n     *\\n     * Params:\\n     * listingId: listing ID\\n     * newPrice: price to change to\\n     * isStarsPrice: whether or not the price being changed is in STARS\\n     *\\n     * Requirements:\\n     * - newPrice is not 0\\n     */\\n    function changeListingPrice(\\n        uint256 listingId,\\n        uint256 newPrice,\\n        bool isStarsPrice\\n    ) external sellerOrAdmin(listings[listingId].seller) {\\n        require(newPrice != 0, \\\"Price cannot be 0\\\");\\n        if (isStarsPrice) {\\n            listings[listingId].starsPrice = newPrice;\\n        } else {\\n            listings[listingId].ethPrice = newPrice;\\n        }\\n\\n        emit ListingPriceChanged(listingId, newPrice, isStarsPrice);\\n    }\\n\\n    /**\\n     * @dev Buy a token\\n     *\\n     * Params:\\n     * listingId: listing ID\\n     * amount: amount tokens to buy\\n     * expectedPrice: expected price of purchase\\n     * isStarsPurchase: whether or not the user is buying with STARS\\n     */\\n    function buyTokens(\\n        uint256 listingId,\\n        uint256 amount,\\n        uint256 expectedPrice,\\n        bool isStarsPurchase\\n    ) external payable nonReentrant() {\\n        require(listingIds.contains(listingId), \\\"Listing does not exist.\\\");\\n\\n        Listing storage listing = listings[listingId];\\n\\n        require(listing.tokenAmount >= amount, \\\"Not enough tokens remaining\\\");\\n\\n        if (isStarsPurchase) {\\n            require(listing.isStarsListing, \\\"Listing does not accept STARS\\\");\\n            uint256 fullAmount = listing.starsPrice * amount;\\n            require(fullAmount == expectedPrice, \\\"Incorrect expected price\\\");\\n\\n            uint256 fee = (fullAmount * starsFeeBasisPoint) / 10000;\\n            uint256 commission =\\n                (fullAmount *\\n                    commissions[listing.tokenAddress][listing.tokenId]\\n                        .commissionBasisPoint) / 10000;\\n\\n            if (fee != 0) {\\n                stars.safeTransferFrom(msg.sender, address(this), fee);\\n            }\\n\\n            if (\\n                commissions[listing.tokenAddress][listing.tokenId]\\n                    .artistAddress != address(0)\\n            ) {\\n                stars.safeTransferFrom(\\n                    msg.sender,\\n                    commissions[listing.tokenAddress][listing.tokenId]\\n                        .artistAddress,\\n                    commission\\n                );\\n            }\\n\\n            stars.safeTransferFrom(\\n                msg.sender,\\n                listing.seller,\\n                fullAmount - fee - commission\\n            );\\n\\n            if (starsCashBackBasisPoint != 0) {\\n                uint256 totalStarsCashBack =\\n                    (fullAmount * starsCashBackBasisPoint) / 10000;\\n\\n                if (starsAvailableForCashBack >= totalStarsCashBack) {\\n                    starsAvailableForCashBack -= totalStarsCashBack;\\n                    stars.safeTransfer(msg.sender, totalStarsCashBack);\\n                }\\n            }\\n\\n            adminStars += fee;\\n        } else {\\n            require(listing.isEthListing, \\\"Listing does not accept ETH\\\");\\n            uint256 fullAmount = listing.ethPrice * amount;\\n            require(fullAmount == expectedPrice, \\\"Incorrect expected price\\\");\\n\\n            uint256 fee = (fullAmount * ethFeeBasisPoint) / 10000;\\n            uint256 commission =\\n                (fullAmount *\\n                    commissions[listing.tokenAddress][listing.tokenId]\\n                        .commissionBasisPoint) / 10000;\\n\\n            require(msg.value == fullAmount, \\\"Incorrect transaction value\\\");\\n\\n            (bool success, ) =\\n                listing.seller.call{value: fullAmount - fee - commission}(\\\"\\\");\\n            require(success, \\\"Payment failure\\\");\\n\\n            if (\\n                commissions[listing.tokenAddress][listing.tokenId]\\n                    .artistAddress != address(0)\\n            ) {\\n                (success, ) = commissions[listing.tokenAddress][listing.tokenId]\\n                    .artistAddress\\n                    .call{value: commission}(\\\"\\\");\\n\\n                require(success, \\\"Payment failure\\\");\\n            }\\n\\n            adminEth += fee;\\n        }\\n\\n        listing.tokenAmount -= amount;\\n\\n        if (listing.tokenAmount == 0) {\\n            listingIds.remove(listingId);\\n        }\\n\\n        IERC1155 token = IERC1155(listing.tokenAddress);\\n        token.safeTransferFrom(\\n            address(this),\\n            msg.sender,\\n            listing.tokenId,\\n            amount,\\n            \\\"\\\"\\n        );\\n\\n        emit SaleMade(msg.sender, listingId, amount, isStarsPurchase);\\n    }\\n\\n    /**\\n     * @dev Create an auction\\n     *\\n     * Params:\\n     * tokenAddress: address of token\\n     * tokenId: token ID\\n     * tokenAmount: number of tokens the winner will get\\n     * startingPrice: starting price for bids\\n     * startTime: auction start time\\n     * endTime: auction end time\\n     * reservePrice: reserve price\\n     * isStarsAuction: whether or not Auction is in Stars\\n     */\\n    function createAuction(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 tokenAmount,\\n        uint256 startingPrice,\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 reservePrice,\\n        bool isStarsAuction\\n    ) public nonReentrant() {\\n        require(startTime < endTime, \\\"End time must be after start time\\\");\\n        require(\\n            startTime > block.timestamp,\\n            \\\"Auction must start in the future\\\"\\n        );\\n        require(\\n            mogulNFTs.contains(tokenAddress),\\n            \\\"Only Mogul NFTs can be listed\\\"\\n        );\\n        require(tokenAmount != 0, \\\"Cannot auction 0 tokens\\\");\\n        if (isStarsAuction) {\\n            require(starsAllowed, \\\"STARS auctions are not allowed\\\");\\n        } else {\\n            require(ethAllowed, \\\"ETH auctions are not allowed.\\\");\\n        }\\n\\n        IERC1155 token = IERC1155(tokenAddress);\\n        token.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            tokenId,\\n            tokenAmount,\\n            \\\"\\\"\\n        );\\n\\n        uint256 auctionId = generateAuctionId();\\n        auctions[auctionId] = Auction(\\n            payable(msg.sender),\\n            tokenAddress,\\n            tokenId,\\n            tokenAmount,\\n            startingPrice,\\n            startTime,\\n            endTime,\\n            reservePrice,\\n            isStarsAuction,\\n            Bid(payable(msg.sender), 0)\\n        );\\n        auctionIds.add(auctionId);\\n        emit AuctionCreated(\\n            auctionId,\\n            payable(msg.sender),\\n            tokenAddress,\\n            tokenId,\\n            tokenAmount,\\n            startingPrice,\\n            startTime,\\n            endTime,\\n            reservePrice,\\n            isStarsAuction\\n        );\\n    }\\n\\n    /**\\n     * @dev Batch create new auctions\\n     *\\n     * Params:\\n     * tokenAddresses: addresses of tokens to auction\\n     * tokenIds: id of each token\\n     * tokenAmounts: amount of each token to auction\\n     * startingPrices: starting price of each auction\\n     * startTimes: start time of each auction\\n     * endTimes: end time of each auction\\n     * reservePrices: reserve price of each auction\\n     * areStarsAuctions: whether or not each auction is in Stars\\n     *\\n     * Requirements:\\n     * - All inputs are the same length\\n     */\\n    function batchCreateAuctions(\\n        address[] calldata tokenAddresses,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata tokenAmounts,\\n        uint256[] calldata startingPrices,\\n        uint256[] memory startTimes,\\n        uint256[] memory endTimes,\\n        uint256[] memory reservePrices,\\n        bool[] memory areStarsAuctions\\n    ) external onlyAdmin {\\n        require(\\n            tokenAddresses.length == tokenIds.length &&\\n                tokenIds.length == tokenAmounts.length &&\\n                tokenAmounts.length == startingPrices.length &&\\n                startingPrices.length == startTimes.length &&\\n                startTimes.length == endTimes.length &&\\n                endTimes.length == reservePrices.length &&\\n                reservePrices.length == areStarsAuctions.length,\\n            \\\"Incorrect input lengths\\\"\\n        );\\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\n            createAuction(\\n                tokenAddresses[i],\\n                tokenIds[i],\\n                tokenAmounts[i],\\n                startingPrices[i],\\n                startTimes[i],\\n                endTimes[i],\\n                reservePrices[i],\\n                areStarsAuctions[i]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Place a bid and refund the previous highest bidder\\n     *\\n     * Params:\\n     * auctionId: auction ID\\n     * isStarsBid: true if bid is in Stars, false if it's in eth\\n     * amount: amount of bid\\n     *\\n     * Requirements:\\n     * Bid is higher than the previous highest bid\\n     */\\n    function placeBid(uint256 auctionId, uint256 amount)\\n        external\\n        payable\\n        nonReentrant()\\n    {\\n        require(auctionIds.contains(auctionId), \\\"Auction does not exist.\\\");\\n\\n        Auction storage auction = auctions[auctionId];\\n        require(\\n            block.timestamp >= auction.startTime,\\n            \\\"Auction has not started yet\\\"\\n        );\\n\\n        require(block.timestamp <= auction.endTime, \\\"Auction has ended\\\");\\n\\n        require(\\n            amount > auction.highestBid.amount,\\n            \\\"Bid is lower than highest bid\\\"\\n        );\\n\\n        require(\\n            amount > auction.startingPrice,\\n            \\\"Bid must be higher than starting price\\\"\\n        );\\n\\n        if (auction.isStarsAuction) {\\n            stars.safeTransferFrom(msg.sender, address(this), amount);\\n            stars.safeTransfer(\\n                auction.highestBid.bidder,\\n                auction.highestBid.amount\\n            );\\n            auction.highestBid = Bid(payable(msg.sender), amount);\\n        } else {\\n            require(amount == msg.value, \\\"Amount does not match message value\\\");\\n            (bool success, ) =\\n                auction.highestBid.bidder.call{\\n                    value: auction.highestBid.amount\\n                }(\\\"\\\");\\n            require(success, \\\"Payment failure\\\");\\n            auction.highestBid = Bid(payable(msg.sender), amount);\\n        }\\n\\n        emit BidPlaced(msg.sender, auctionId, amount, auction.isStarsAuction);\\n    }\\n\\n    /**\\n     * @dev End auctions and distributes tokens to the winner, bid to the\\n     * seller, and fees to the contract. If the reserve price was not met, only\\n     * the seller or admin can call this function.\\n     *\\n     * Params:\\n     * auctionId: auction ID\\n     */\\n    function claimAuction(uint256 auctionId) public nonReentrant() {\\n        require(auctionIds.contains(auctionId), \\\"Auction does not exist\\\");\\n        Auction memory auction = auctions[auctionId];\\n        require(block.timestamp >= auction.endTime, \\\"Auction is ongoing\\\");\\n\\n        if (msg.sender != auction.seller && !hasRole(ROLE_ADMIN, msg.sender)) {\\n            require(\\n                auction.highestBid.amount >= auction.reservePrice,\\n                \\\"Highest bid did not meet the reserve price.\\\"\\n            );\\n        }\\n\\n        address winner;\\n        uint256 fee;\\n        if (auction.isStarsAuction) {\\n            fee = (auction.highestBid.amount * starsFeeBasisPoint) / 10000;\\n        } else {\\n            fee = (auction.highestBid.amount * ethFeeBasisPoint) / 10000;\\n        }\\n        uint256 commission =\\n            (auction.highestBid.amount *\\n                commissions[auction.tokenAddress][auction.tokenId]\\n                    .commissionBasisPoint) / 10000;\\n\\n        winner = auction.highestBid.bidder;\\n        if (auction.isStarsAuction) {\\n            stars.safeTransfer(\\n                auction.seller,\\n                auction.highestBid.amount - fee - commission\\n            );\\n\\n            if (\\n                commissions[auction.tokenAddress][auction.tokenId]\\n                    .artistAddress != address(0)\\n            ) {\\n                stars.safeTransfer(\\n                    commissions[auction.tokenAddress][auction.tokenId]\\n                        .artistAddress,\\n                    commission\\n                );\\n            }\\n\\n            if (starsCashBackBasisPoint != 0) {\\n                uint256 totalStarsCashBack =\\n                    (auction.highestBid.amount * starsCashBackBasisPoint) /\\n                        10000;\\n\\n                if (starsAvailableForCashBack >= totalStarsCashBack) {\\n                    starsAvailableForCashBack -= totalStarsCashBack;\\n                    stars.safeTransfer(\\n                        auction.highestBid.bidder,\\n                        totalStarsCashBack\\n                    );\\n                }\\n            }\\n\\n            adminStars += fee;\\n        } else {\\n            (bool success, ) =\\n                auction.seller.call{\\n                    value: auction.highestBid.amount - fee - commission\\n                }(\\\"\\\");\\n\\n            require(success, \\\"Payment failure\\\");\\n\\n            if (\\n                commissions[auction.tokenAddress][auction.tokenId]\\n                    .artistAddress != address(0)\\n            ) {\\n                (success, ) = commissions[auction.tokenAddress][auction.tokenId]\\n                    .artistAddress\\n                    .call{value: commission}(\\\"\\\");\\n\\n                require(success, \\\"Payment failure\\\");\\n            }\\n\\n            adminEth += fee;\\n        }\\n\\n        IERC1155(auction.tokenAddress).safeTransferFrom(\\n            address(this),\\n            winner,\\n            auction.tokenId,\\n            auction.tokenAmount,\\n            \\\"\\\"\\n        );\\n        auctionIds.remove(auctionId);\\n        emit AuctionClaimed(winner, auctionId);\\n    }\\n\\n    function batchClaimAuction(uint256[] calldata _auctionIds)\\n        external\\n        onlyAdmin\\n    {\\n        for (uint256 i = 0; i < _auctionIds.length; i++) {\\n            claimAuction(_auctionIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Cancel auction and refund bidders\\n     *\\n     * Params:\\n     * auctionId: auction ID\\n     */\\n    function cancelAuction(uint256 auctionId)\\n        public\\n        nonReentrant()\\n        sellerOrAdmin(auctions[auctionId].seller)\\n    {\\n        require(auctionIds.contains(auctionId), \\\"Auction does not exist\\\");\\n        Auction memory auction = auctions[auctionId];\\n\\n        require(\\n            block.timestamp <= auction.endTime ||\\n                auction.highestBid.amount < auction.reservePrice,\\n            \\\"Cannot cancel auction after it has ended unless the highest bid did not meet the reserve price.\\\"\\n        );\\n\\n        IERC1155(auction.tokenAddress).safeTransferFrom(\\n            address(this),\\n            auction.seller,\\n            auction.tokenId,\\n            auction.tokenAmount,\\n            \\\"\\\"\\n        );\\n\\n        if (auction.isStarsAuction) {\\n            stars.safeTransfer(\\n                auction.highestBid.bidder,\\n                auction.highestBid.amount\\n            );\\n        } else {\\n            (bool success, ) =\\n                auction.highestBid.bidder.call{\\n                    value: auction.highestBid.amount\\n                }(\\\"\\\");\\n            require(success, \\\"Payment failure\\\");\\n        }\\n\\n        auctionIds.remove(auctionId);\\n        emit AuctionCancelled(auctionId);\\n    }\\n\\n    function batchCancelAuction(uint256[] calldata _auctionIds)\\n        external\\n        onlyAdmin\\n    {\\n        for (uint256 i = 0; i < _auctionIds.length; i++) {\\n            cancelAuction(_auctionIds[i]);\\n        }\\n    }\\n\\n    function changeReservePrice(uint256 auctionId, uint256 newReservePrice)\\n        external\\n        nonReentrant()\\n        sellerOrAdmin(auctions[auctionId].seller)\\n    {\\n        require(auctionIds.contains(auctionId), \\\"Auction does not exist\\\");\\n        auctions[auctionId].reservePrice = newReservePrice;\\n\\n        emit AuctionReservePriceChanged(auctionId, newReservePrice);\\n    }\\n\\n    //Generate ID for next listing\\n    function generateListingId() internal returns (uint256) {\\n        return nextListingId++;\\n    }\\n\\n    //Generate ID for next auction\\n    function generateAuctionId() internal returns (uint256) {\\n        return nextAuctionId++;\\n    }\\n\\n    //Withdraw ETH to treasury wallet\\n    function withdrawETH() external onlyAdmin {\\n        (bool success, ) = treasuryWallet.call{value: adminEth}(\\\"\\\");\\n        require(success, \\\"Payment failure\\\");\\n        adminEth = 0;\\n    }\\n\\n    //Withdraw Stars to treasury wallet\\n    function withdrawStars() external onlyAdmin {\\n        stars.safeTransfer(treasuryWallet, adminStars);\\n        adminStars = 0;\\n    }\\n\\n    //Add to list of valid Mogul NFTs\\n    function addMogulNFTAddress(address _mogulNFTAddress) external onlyAdmin {\\n        mogulNFTs.add(_mogulNFTAddress);\\n    }\\n\\n    //Remove from list of valid Mogul NFTs\\n    function removeMogulNFTAddress(address _mogulNFTAddress)\\n        external\\n        onlyAdmin\\n    {\\n        mogulNFTs.remove(_mogulNFTAddress);\\n    }\\n\\n    //Set STARS fee (applies to listings and auctions);\\n    function setStarsFee(uint256 _feeBasisPoint) external onlyAdmin {\\n        require(\\n            _feeBasisPoint + highestCommissionBasisPoint < 10000,\\n            \\\"Fee plus commission must be less than 100%\\\"\\n        );\\n        starsFeeBasisPoint = _feeBasisPoint;\\n        emit StarsFeeBasisPointSet(_feeBasisPoint);\\n    }\\n\\n    //Set ETH fee (applies to listings and auctions);\\n    function setEthFee(uint256 _feeBasisPoint) external onlyAdmin {\\n        require(\\n            _feeBasisPoint + highestCommissionBasisPoint < 10000,\\n            \\\"Fee plus commission must be less than 100%\\\"\\n        );\\n        ethFeeBasisPoint = _feeBasisPoint;\\n        emit EthFeeBasisPointSet(_feeBasisPoint);\\n    }\\n\\n    function setStarsCashBack(uint256 _starsCashBackBasisPoint)\\n        external\\n        onlyAdmin\\n    {\\n        starsCashBackBasisPoint = _starsCashBackBasisPoint;\\n    }\\n\\n    //Set commission info for one token\\n    function setCommission(\\n        address NFTAddress,\\n        uint256 tokenId,\\n        address payable artistAddress,\\n        uint256 commissionBasisPoint\\n    ) external onlyAdmin {\\n        if (commissionBasisPoint > highestCommissionBasisPoint) {\\n            require(\\n                commissionBasisPoint + starsFeeBasisPoint < 10000 &&\\n                    commissionBasisPoint + ethFeeBasisPoint < 10000,\\n                \\\"Fee plus commission must be less than 100%\\\"\\n            );\\n\\n            highestCommissionBasisPoint = commissionBasisPoint;\\n        }\\n\\n        commissions[NFTAddress][tokenId] = TokenCommissionInfo(\\n            artistAddress,\\n            commissionBasisPoint\\n        );\\n\\n        emit TokenCommissionSingleAdded(\\n            NFTAddress,\\n            tokenId,\\n            artistAddress,\\n            commissionBasisPoint\\n        );\\n    }\\n\\n    //Set commission info for multiple tokens\\n    function setCommissionBulk(\\n        address NFTAddress,\\n        uint256[] memory tokenIds,\\n        address payable[] memory artistAddresses,\\n        uint256[] memory commissionBasisPoints\\n    ) external onlyAdmin {\\n        require(\\n            tokenIds.length == artistAddresses.length &&\\n                artistAddresses.length == commissionBasisPoints.length,\\n            \\\"Invalid input lengths\\\"\\n        );\\n\\n        uint256 higherFeeBasisPoint;\\n        if (starsFeeBasisPoint > ethFeeBasisPoint) {\\n            higherFeeBasisPoint = starsFeeBasisPoint;\\n        } else {\\n            higherFeeBasisPoint = ethFeeBasisPoint;\\n        }\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (commissionBasisPoints[i] > highestCommissionBasisPoint) {\\n                require(\\n                    commissionBasisPoints[i] + higherFeeBasisPoint < 10000,\\n                    \\\"Fee plus commission must be less than 100%\\\"\\n                );\\n\\n                highestCommissionBasisPoint = commissionBasisPoints[i];\\n            }\\n            commissions[NFTAddress][tokenIds[i]] = TokenCommissionInfo(\\n                artistAddresses[i],\\n                commissionBasisPoints[i]\\n            );\\n        }\\n\\n        emit TokenCommissionBulkAdded(\\n            NFTAddress,\\n            tokenIds,\\n            artistAddresses,\\n            commissionBasisPoints\\n        );\\n    }\\n\\n    //Set whether or not creating new STARS listings and Auctions are allowed\\n    function setStarsAllowed(bool _starsAllowed) external onlyAdmin {\\n        starsAllowed = _starsAllowed;\\n    }\\n\\n    //Set whether or not creating new ETH listings and Auctions are allowed\\n    function setEthAllowed(bool _ethAllowed) external onlyAdmin {\\n        ethAllowed = _ethAllowed;\\n    }\\n\\n    function depositStarsForCashBack(uint256 amount) public {\\n        stars.safeTransferFrom(msg.sender, address(this), amount);\\n        starsAvailableForCashBack += amount;\\n    }\\n\\n    function withdrawStarsForCashBack(uint256 amount)\\n        external\\n        onlyAdmin\\n        nonReentrant()\\n    {\\n        require(\\n            amount <= starsAvailableForCashBack,\\n            \\\"Withdraw amount exceeds available balance\\\"\\n        );\\n        starsAvailableForCashBack -= amount;\\n        stars.safeTransfer(treasuryWallet, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                Strings.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                Strings.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"starsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasuryWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mogulNFTAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isStarsAuction\",\"type\":\"bool\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReservePrice\",\"type\":\"uint256\"}],\"name\":\"AuctionReservePriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isStarsBid\",\"type\":\"bool\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEthFeeBasisPoint\",\"type\":\"uint256\"}],\"name\":\"EthFeeBasisPointSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"ListingCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"starsPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isStarsListing\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEthListing\",\"type\":\"bool\"}],\"name\":\"ListingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isStarsPrice\",\"type\":\"bool\"}],\"name\":\"ListingPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isStarsPurchase\",\"type\":\"bool\"}],\"name\":\"SaleMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStarsCashBackBasisPoint\",\"type\":\"uint256\"}],\"name\":\"StarsCashBackBasisPointSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStarsFeeBasisPoint\",\"type\":\"uint256\"}],\"name\":\"StarsFeeBasisPointSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"artistAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"commissionBasisPoints\",\"type\":\"uint256[]\"}],\"name\":\"TokenCommissionBulkAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"artistAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commissionBasisPoint\",\"type\":\"uint256\"}],\"name\":\"TokenCommissionSingleAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mogulNFTAddress\",\"type\":\"address\"}],\"name\":\"addMogulNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminStars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStarsAuction\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct MogulMarketplaceERC1155.Bid\",\"name\":\"highestBid\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_auctionIds\",\"type\":\"uint256[]\"}],\"name\":\"batchCancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_listingIds\",\"type\":\"uint256[]\"}],\"name\":\"batchCancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_auctionIds\",\"type\":\"uint256[]\"}],\"name\":\"batchClaimAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"startingPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"startTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"endTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"reservePrices\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"areStarsAuctions\",\"type\":\"bool[]\"}],\"name\":\"batchCreateAuctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"starsPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ethPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"areStarsListings\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"areEthListings\",\"type\":\"bool[]\"}],\"name\":\"batchCreateListings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStarsPurchase\",\"type\":\"bool\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStarsPrice\",\"type\":\"bool\"}],\"name\":\"changeListingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReservePrice\",\"type\":\"uint256\"}],\"name\":\"changeReservePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"claimAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commissions\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"artistAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionBasisPoint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStarsAuction\",\"type\":\"bool\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"starsPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStarsListing\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEthListing\",\"type\":\"bool\"}],\"name\":\"createListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositStarsForCashBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethFeeBasisPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"getAuctionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"getAuctionsAtIndices\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStarsAuction\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct MogulMarketplaceERC1155.Bid\",\"name\":\"highestBid\",\"type\":\"tuple\"}],\"internalType\":\"struct MogulMarketplaceERC1155.Auction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getCommissionInfoForTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"artistAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionBasisPoint\",\"type\":\"uint256\"}],\"internalType\":\"struct MogulMarketplaceERC1155.TokenCommissionInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"getListingIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"getListingsAtIndices\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"starsPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStarsListing\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEthListing\",\"type\":\"bool\"}],\"internalType\":\"struct MogulMarketplaceERC1155.Listing[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumAuctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumListings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"starsPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStarsListing\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEthListing\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextAuctionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextListingId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mogulNFTAddress\",\"type\":\"address\"}],\"name\":\"removeMogulNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"artistAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionBasisPoint\",\"type\":\"uint256\"}],\"name\":\"setCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable[]\",\"name\":\"artistAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"commissionBasisPoints\",\"type\":\"uint256[]\"}],\"name\":\"setCommissionBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_ethAllowed\",\"type\":\"bool\"}],\"name\":\"setEthAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeBasisPoint\",\"type\":\"uint256\"}],\"name\":\"setEthFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_starsAllowed\",\"type\":\"bool\"}],\"name\":\"setStarsAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_starsCashBackBasisPoint\",\"type\":\"uint256\"}],\"name\":\"setStarsCashBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeBasisPoint\",\"type\":\"uint256\"}],\"name\":\"setStarsFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starsAvailableForCashBack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starsCashBackBasisPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starsFeeBasisPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStars\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStarsForCashBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MogulMarketplaceERC1155","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c55c2175e90a46602fd42e931f62b3acc1a013ca000000000000000000000000e6a451b2b47e054c8cd37cddaab65aceea61f0cc0000000000000000000000001c3b019f6d5a38d3eeea65cc8ab8eca8d61dcc7000000000000000000000000073d7a7a3b831329aeb3f669b0f2fab639ac31e0a","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}