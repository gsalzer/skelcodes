{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/farm/facets/GovernanceFacet/GovernanceFacet.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./VotingBooth.sol\\\";\\nimport \\\"../../../interfaces/IBean.sol\\\";\\nimport \\\"../../../libraries/LibInternal.sol\\\";\\nimport \\\"../../../libraries/LibIncentive.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Governance handles propsing, voting for and committing BIPs as well as pausing/unpausing.\\n**/\\ncontract GovernanceFacet is VotingBooth {\\n\\n    using SafeMath for uint256;\\n    using SafeMath for uint32;\\n    using Decimal for Decimal.D256;\\n\\n    event Proposal(address indexed account, uint32 indexed bip, uint256 indexed start, uint256 period);\\n    event Vote(address indexed account, uint32 indexed bip, uint256 roots);\\n    event Unvote(address indexed account, uint32 indexed bip, uint256 roots);\\n    event Commit(address indexed account, uint32 indexed bip);\\n    event Incentivization(address indexed account, uint256 beans);\\n    event Pause(address account, uint256 timestamp);\\n    event Unpause(address account, uint256 timestamp, uint256 timePassed);\\n\\n    /**\\n     * Proposition\\n    **/\\n\\n    function propose(\\n        IDiamondCut.FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata,\\n        uint8 _pauseOrUnpause\\n    )\\n        external\\n    {\\n        require(canPropose(msg.sender), \\\"Governance: Not enough Stalk.\\\");\\n        require(notTooProposed(msg.sender), \\\"Governance: Too many active BIPs.\\\");\\n        require(\\n            _init != address(0) || _diamondCut.length > 0 || _pauseOrUnpause > 0,\\n            \\\"Governance: Proposition is empty.\\\"\\n        );\\n\\n        uint32 bipId = createBip(\\n            _diamondCut,\\n            _init,\\n            _calldata,\\n            _pauseOrUnpause,\\n            C.getGovernancePeriod(),\\n            msg.sender\\n        );\\n\\n        emit Proposal(msg.sender, bipId, season(), C.getGovernancePeriod());\\n\\n        vote(bipId);\\n    }\\n\\n    /**\\n     * Voting\\n    **/\\n\\n    function vote(uint32 bip) public {\\n        require(isNominated(bip), \\\"Governance: Not nominated.\\\");\\n        require(balanceOfRoots(msg.sender) > 0, \\\"Governance: Must have Stalk.\\\");\\n        require(isActive(bip), \\\"Governance: Ended.\\\");\\n        require(!voted(msg.sender, bip), \\\"Governance: Already voted.\\\");\\n\\n        recordVote(msg.sender, bip);\\n        placeLock(msg.sender, bip);\\n\\n        emit Vote(msg.sender, bip, balanceOfRoots(msg.sender));\\n    }\\n\\n    function unvote(uint32 bip) external {\\n        require(isNominated(bip), \\\"Governance: Not nominated.\\\");\\n        require(balanceOfRoots(msg.sender) > 0, \\\"Governance: Must have Stalk.\\\");\\n        require(isActive(bip), \\\"Governance: Ended.\\\");\\n        require(voted(msg.sender, bip), \\\"Governance: Not voted.\\\");\\n        require(proposer(bip) != msg.sender, \\\"Governance: Is proposer.\\\");\\n\\n        unrecordVote(msg.sender, bip);\\n        removeLock(msg.sender, bip);\\n\\n        emit Unvote(msg.sender, bip, balanceOfRoots(msg.sender));\\n    }\\n\\n    /**\\n     * Execution\\n    **/\\n\\n    function commit(uint32 bip) external {\\n        require(isNominated(bip), \\\"Governance: Not nominated.\\\");\\n        require(!isActive(bip), \\\"Governance: Not ended.\\\");\\n        require(!isExpired(bip), \\\"Governance: Expired.\\\");\\n        require(\\n            endedBipVotePercent(bip).greaterThanOrEqualTo(C.getGovernancePassThreshold()),\\n            \\\"Governance: Must have majority.\\\"\\n        );\\n\\n        s.g.bips[bip].executed = true;\\n\\n        cutBip(bip);\\n        pauseOrUnpauseBip(bip);\\n\\n        incentivize(msg.sender, true, bip, C.getCommitIncentive());\\n        emit Commit(msg.sender, bip);\\n    }\\n\\n    function emergencyCommit(uint32 bip) external {\\n        require(isNominated(bip), \\\"Governance: Not nominated.\\\");\\n        require(\\n            block.timestamp >= timestamp(bip).add(C.getGovernanceEmergencyPeriod()),\\n            \\\"Governance: Too early.\\\");\\n        require(isActive(bip), \\\"Governance: Ended.\\\");\\n        require(\\n            bipVotePercent(bip).greaterThanOrEqualTo(C.getGovernanceEmergencyThreshold()),\\n            \\\"Governance: Must have super majority.\\\"\\n        );\\n\\n        endBip(bip);\\n        s.g.bips[bip].executed = true;\\n\\n        cutBip(bip);\\n        pauseOrUnpauseBip(bip);\\n\\n        incentivize(msg.sender, false, bip, C.getCommitIncentive());\\n        emit Commit(msg.sender, bip);\\n    }\\n\\n    function pauseOrUnpause(uint32 bip) external {\\n        require(isNominated(bip), \\\"Governance: Not nominated.\\\");\\n        require(diamondCutIsEmpty(bip),\\\"Governance: Has diamond cut.\\\");\\n        require(isActive(bip), \\\"Governance: Ended.\\\");\\n        require(\\n            bipVotePercent(bip).greaterThanOrEqualTo(C.getGovernanceEmergencyThreshold()),\\n            \\\"Governance: Must have super majority.\\\"\\n        );\\n\\n        endBip(bip);\\n        s.g.bips[bip].executed = true;\\n\\n        pauseOrUnpauseBip(bip);\\n\\n        incentivize(msg.sender, false, bip, C.getCommitIncentive());\\n        emit Commit(msg.sender, bip);\\n    }\\n\\n    function incentivize(address account, bool compound, uint32 bipId, uint256 amount) private {\\n        if (compound) amount = LibIncentive.fracExp(amount, 100, incentiveTime(bipId), 2);\\n        IBean(s.c.bean).mint(account, amount);\\n        emit Incentivization(account, amount);\\n    }\\n\\n    /**\\n     * Pause / Unpause\\n    **/\\n\\n    function ownerPause() external {\\n        LibDiamond.enforceIsContractOwner();\\n        pause();\\n    }\\n\\n    function ownerUnpause() external {\\n        LibDiamond.enforceIsContractOwner();\\n        unpause();\\n    }\\n\\n    function pause() private {\\n        if (s.paused) return;\\n        s.paused = true;\\n        s.o.initialized = false;\\n        s.pausedAt = uint128(block.timestamp);\\n        emit Pause(msg.sender, block.timestamp);\\n    }\\n\\n    function unpause() private {\\n        if (!s.paused) return;\\n        s.paused = false;\\n        uint256 timePassed = block.timestamp.sub(uint(s.pausedAt));\\n        timePassed = (timePassed.div(3600).add(1)).mul(3600);\\n        s.season.start = s.season.start.add(timePassed);\\n        emit Unpause(msg.sender, block.timestamp, timePassed);\\n    }\\n\\n    function pauseOrUnpauseBip(uint32 bipId) private {\\n        if (s.g.bips[bipId].pauseOrUnpause == 1) pause();\\n        else if (s.g.bips[bipId].pauseOrUnpause == 2) unpause();\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/farm/facets/GovernanceFacet/VotingBooth.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport './Bip.sol';\\n\\n/**\\n * @author Publius\\n * @title Voting Booth\\n**/\\ncontract VotingBooth is Bip {\\n\\n    using SafeMath for uint256;\\n    using SafeMath for uint32;\\n\\n    /**\\n     * Voting\\n    **/\\n\\n    function recordVote(address account, uint32 bipId) internal {\\n        s.g.voted[bipId][account] = true;\\n        s.g.bips[bipId].roots = s.g.bips[bipId].roots.add(balanceOfRoots(account));\\n    }\\n\\n    function unrecordVote(address account, uint32 bipId) internal {\\n        s.g.voted[bipId][account] = false;\\n        s.g.bips[bipId].roots = s.g.bips[bipId].roots.sub(balanceOfRoots(account));\\n    }\\n\\n    function placeLock(address account, uint32 bipId) internal {\\n        uint32 newLock = startFor(bipId) + periodFor(bipId);\\n        if (newLock > s.a[account].lockedUntil) {\\n                s.a[account].lockedUntil = newLock;\\n        }\\n    }\\n\\n    function removeLock(address account, uint32 bipId) internal {\\n        uint32[] memory actives = activeBips();\\n        uint32 lastSeason = 0;\\n        for (uint256 i = 0; i < actives.length; i++) {\\n                uint32 activeBip = actives[i];\\n                if (activeBip != bipId && s.g.voted[activeBip][account]) {\\n                    uint32 bipEnd = startFor(bipId) + periodFor(bipId);\\n                    if (bipEnd > lastSeason) lastSeason = bipEnd;\\n                }\\n        }\\n        s.a[account].lockedUntil = lastSeason;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBean.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Bean Interface\\n**/\\nabstract contract IBean is IERC20 {\\n\\n    function burn(uint256 amount) public virtual;\\n    function burnFrom(address account, uint256 amount) public virtual;\\n    function mint(address account, uint256 amount) public virtual returns (bool);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibInternal.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @author Publius\\n * @title Internal Library handles gas efficient function calls between facets.\\n**/\\nlibrary LibInternal {\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        address[] facetAddresses;\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    struct Claim {\\n        uint32[] beanWithdrawals;\\n        uint32[] lpWithdrawals;\\n        uint256[] plots;\\n        bool claimEth;\\n        bool convertLP;\\n        uint256 minBeanAmount;\\n        uint256 minEthAmount;\\n    }\\n\\n    function updateSilo(address account) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        bytes4 functionSelector = bytes4(keccak256(\\\"updateSilo(address)\\\"));\\n        address facet = ds.selectorToFacetAndPosition[functionSelector].facetAddress;\\n        bytes memory myFunctionCall = abi.encodeWithSelector(functionSelector, account);\\n        (bool success,) = address(facet).delegatecall(myFunctionCall);\\n        require(success, \\\"Silo: updateSilo failed.\\\");\\n    }\\n\\n    function updateBip(uint32 bip) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        bytes4 functionSelector = bytes4(keccak256(\\\"updateBip(uint32)\\\"));\\n        address facet = ds.selectorToFacetAndPosition[functionSelector].facetAddress;\\n        bytes memory myFunctionCall = abi.encodeWithSelector(functionSelector, bip);\\n        (bool success,) = address(facet).delegatecall(myFunctionCall);\\n        require(success, \\\"Silo: updateBip failed.\\\");\\n    }\\n\\n    function stalkFor(uint32 bip) internal returns (uint256) {\\n        DiamondStorage storage ds = diamondStorage();\\n        bytes4 functionSelector = bytes4(keccak256(\\\"stalkFor(uint32)\\\"));\\n        address facet = ds.selectorToFacetAndPosition[functionSelector].facetAddress;\\n        bytes memory myFunctionCall = abi.encodeWithSelector(functionSelector, bip);\\n        (bool success, bytes memory data) = address(facet).delegatecall(myFunctionCall);\\n        require(success, \\\"Governance: stalkFor failed.\\\");\\n        uint stalk;\\n        assembly { stalk := mload(add(data, add(0x20, 0))) }\\n        return stalk;\\n    }\\n\\n    function claim(Claim calldata c) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        bytes4 functionSelector = bytes4(keccak256(\\\"claim((uint32[],uint32[],uint256[],bool,bool,uint256,uint256))\\\"));\\n        address facet = ds.selectorToFacetAndPosition[functionSelector].facetAddress;\\n        bytes memory myFunctionCall = abi.encodeWithSelector(functionSelector, c);\\n        (bool success,) = address(facet).delegatecall(myFunctionCall);\\n        require(success, \\\"Claim: claim failed.\\\");\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibIncentive.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @author Publius\\n * @title Incentive Library calculates the exponential incentive rewards efficiently.\\n**/\\nlibrary LibIncentive {\\n\\n    function fracExp(uint k, uint q, uint n, uint x) internal pure returns (uint) {\\n        uint p = log_two(n) + 1 + x * n / q;\\n        uint s = 0;\\n        uint N = 1;\\n        uint B = 1;\\n        for (uint i = 0; i < p; ++i){\\n            s += k * N / B / (q**i);\\n            N = N * (n-i);\\n            B = B * (i+1);\\n        }\\n        return s;\\n    }\\n\\n    function log_two(uint x) private pure returns (uint y) {\\n        assembly {\\n            let arg := x\\n            x := sub(x,1)\\n            x := or(x, div(x, 0x02))\\n            x := or(x, div(x, 0x04))\\n            x := or(x, div(x, 0x10))\\n            x := or(x, div(x, 0x100))\\n            x := or(x, div(x, 0x10000))\\n            x := or(x, div(x, 0x100000000))\\n            x := or(x, div(x, 0x10000000000000000))\\n            x := or(x, div(x, 0x100000000000000000000000000000000))\\n            x := add(x, 1)\\n            let m := mload(0x40)\\n            mstore(m, 0xf8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd)\\n            mstore(add(m,0x20), 0xf5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe)\\n            mstore(add(m,0x40), 0xf6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a8272523616)\\n            mstore(add(m,0x60), 0xc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff)\\n            mstore(add(m,0x80), 0xf7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e)\\n            mstore(add(m,0xa0), 0xe39ed557db96902cd38ed14fad815115c786af479b7e83247363534337271707)\\n            mstore(add(m,0xc0), 0xc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d2362422606)\\n            mstore(add(m,0xe0), 0x753a6d1b65325d0c552a4d1345224105391a310b29122104190a110309020100)\\n            mstore(0x40, add(m, 0x100))\\n            let magic := 0x818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff\\n            let shift := 0x100000000000000000000000000000000000000000000000000000000000000\\n            let a := div(mul(x, magic), shift)\\n            y := div(mload(add(m,sub(255,a))), shift)\\n            y := add(y, mul(256, gt(arg, 0x8000000000000000000000000000000000000000000000000000000000000000)))\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/farm/facets/GovernanceFacet/Bip.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../AppStorage.sol\\\";\\nimport \\\"../../../C.sol\\\";\\nimport \\\"../../../libraries/Decimal.sol\\\";\\nimport \\\"../../../libraries/LibDiamond.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title BIP\\n**/\\ncontract Bip {\\n\\n    using SafeMath for uint256;\\n    using SafeMath for uint32;\\n    using Decimal for Decimal.D256;\\n\\n    AppStorage internal s;\\n\\n    /**\\n     * Getters\\n    **/\\n\\n    // Bips\\n\\n    function activeBips() public view returns (uint32[] memory) {\\n        return s.g.activeBips;\\n    }\\n\\n    function numberOfBips() public view returns (uint32) {\\n        return s.g.bipIndex;\\n    }\\n\\n    function bip(uint32 bipId) public view returns (Storage.Bip memory) {\\n        return s.g.bips[bipId];\\n    }\\n\\n    function voted(address account, uint32 bipId) public view returns (bool) {\\n        return s.g.voted[bipId][account];\\n    }\\n\\n    function rootsFor(uint32 bipId) public view returns (uint256) {\\n        return s.g.bips[bipId].roots;\\n    }\\n\\n    // Diamond Cut\\n\\n    function bipDiamondCut(uint32 bipId) public view returns (Storage.DiamondCut memory) {\\n        return s.g.diamondCuts[bipId];\\n    }\\n\\n    function bipFacetCuts(uint32 bipId) public view returns (IDiamondCut.FacetCut[] memory) {\\n        return s.g.diamondCuts[bipId].diamondCut;\\n    }\\n\\n    function diamondCutIsEmpty(uint32 bipId) internal view returns (bool) {\\n        return (\\n            s.g.diamondCuts[bipId].diamondCut.length == 0 &&\\n            s.g.diamondCuts[bipId].initAddress == address(0)\\n        );\\n    }\\n\\n    /**\\n     * Internal\\n    **/\\n\\n    // Bip Actions\\n\\n    function createBip(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata,\\n        uint8 pauseOrUnpause,\\n        uint32 period,\\n        address account\\n    )\\n        internal\\n        returns (uint32)\\n    {\\n        uint32 bipId = s.g.bipIndex;\\n        s.g.bipIndex += 1;\\n        s.g.bips[bipId].start = season();\\n        s.g.bips[bipId].period = period;\\n        s.g.bips[bipId].timestamp = uint128(block.timestamp);\\n        s.g.bips[bipId].proposer = account;\\n\\n        s.g.bips[bipId].pauseOrUnpause = pauseOrUnpause;\\n        for (uint i = 0; i < _diamondCut.length; i++)\\n            s.g.diamondCuts[bipId].diamondCut.push(_diamondCut[i]);\\n        s.g.diamondCuts[bipId].initAddress = _init;\\n        s.g.diamondCuts[bipId].initData = _calldata;\\n        s.g.activeBips.push(bipId);\\n        return bipId;\\n    }\\n\\n    function endBip(uint32 bipId) internal {\\n        uint256 i = 0;\\n        while(s.g.activeBips[i] != bipId) i++;\\n        s.g.bips[bipId].timestamp = uint128(block.timestamp);\\n        s.g.bips[bipId].endTotalRoots = totalRoots();\\n        if (i < s.g.activeBips.length-1) s.g.activeBips[i] = s.g.activeBips[s.g.activeBips.length-1];\\n        s.g.activeBips.pop();\\n    }\\n\\n    function cutBip(uint32 bipId) internal {\\n        if (diamondCutIsEmpty(bipId)) return;\\n        LibDiamond.diamondCut(\\n            s.g.diamondCuts[bipId].diamondCut,\\n            s.g.diamondCuts[bipId].initAddress,\\n            s.g.diamondCuts[bipId].initData\\n        );\\n    }\\n\\n    function proposer(uint32 bipId) internal view returns (address) {\\n        return s.g.bips[bipId].proposer;\\n    }\\n\\n    function startFor(uint32 bipId) internal view returns (uint32) {\\n        return s.g.bips[bipId].start;\\n    }\\n\\n    function periodFor(uint32 bipId) internal view returns (uint32) {\\n        return s.g.bips[bipId].period;\\n    }\\n\\n    function timestamp(uint32 bipId) internal view returns (uint256) {\\n        return uint256(s.g.bips[bipId].timestamp);\\n    }\\n\\n    function isNominated(uint32 bipId) internal view returns (bool) {\\n        return startFor(bipId) > 0 && !s.g.bips[bipId].executed;\\n    }\\n\\n    function isEnded(uint32 bipId) internal view returns (bool) {\\n        return season() > startFor(bipId).add(periodFor(bipId)) || s.g.bips[bipId].executed;\\n    }\\n\\n    function isActive(uint32 bipId) internal view returns (bool) {\\n        return season() < startFor(bipId).add(periodFor(bipId));\\n    }\\n\\n    function isExpired(uint32 bipId) internal view returns (bool) {\\n        return season() > startFor(bipId).add(periodFor(bipId)).add(C.getGovernanceExpiration());\\n    }\\n\\n    function bipVotePercent(uint32 bipId) internal view returns (Decimal.D256 memory) {\\n        return Decimal.ratio(rootsFor(bipId), totalRoots());\\n    }\\n\\n    function endedBipVotePercent(uint32 bipId) internal view returns (Decimal.D256 memory) {\\n        return Decimal.ratio(s.g.bips[bipId].roots,s.g.bips[bipId].endTotalRoots);\\n    }\\n\\n    // Bip Proposition\\n\\n    function canPropose(address account) internal view returns (bool) {\\n        if (totalRoots() == 0 || balanceOfRoots(account) == 0) {\\n            return false;\\n        }\\n        Decimal.D256 memory stake = Decimal.ratio(balanceOfRoots(account), totalRoots());\\n        return stake.greaterThan(C.getGovernanceProposalThreshold());\\n    }\\n\\n    function notTooProposed(address account) internal view returns (bool) {\\n        uint256 propositions;\\n        for (uint256 i = 0; i < s.g.activeBips.length; i++) {\\n            uint32 bipId = s.g.activeBips[i];\\n            if (s.g.bips[bipId].proposer == account) propositions += 1;\\n        }\\n        return (propositions < C.getMaxPropositions());\\n    }\\n\\n    /**\\n     * Shed\\n    **/\\n\\n    function incentiveTime(uint32 bipId) internal view returns (uint256) {\\n        uint256 time = block.timestamp.sub(s.g.bips[bipId].timestamp);\\n        if (time > 1800) time = 1800;\\n        return time / 6;\\n    }\\n\\n    function balanceOfRoots(address account) internal view returns (uint256) {\\n        return s.a[account].roots;\\n    }\\n\\n    function totalRoots() internal view returns (uint256) {\\n        return s.s.roots;\\n    }\\n\\n    function season() internal view returns (uint32) { return s.season.current; }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/farm/AppStorage.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title App Storage defines the state object for Beanstalk.\\n**/\\ncontract Account {\\n\\n    struct Field {\\n        mapping(uint256 => uint256) plots;\\n        mapping(address => uint256) podAllowances;\\n    }\\n\\n    struct AssetSilo {\\n        mapping(uint32 => uint256) withdrawals;\\n        mapping(uint32 => uint256) deposits;\\n        mapping(uint32 => uint256) depositSeeds;\\n    }\\n\\n    struct Silo {\\n        uint256 stalk;\\n        uint256 seeds;\\n    }\\n\\n    struct SeasonOfPlenty {\\n        uint256 base;\\n        uint256 roots;\\n        uint256 basePerRoot;\\n    }\\n\\n    struct State {\\n        Field field;\\n        AssetSilo bean;\\n        AssetSilo lp;\\n        Silo s;\\n        uint32 lockedUntil;\\n        uint32 lastUpdate;\\n        uint32 lastSop;\\n        uint32 lastRain;\\n        SeasonOfPlenty sop;\\n        uint256 roots;\\n    }\\n}\\n\\ncontract Storage {\\n    struct Contracts {\\n        address bean;\\n        address pair;\\n        address pegPair;\\n        address weth;\\n    }\\n\\n    // Field\\n\\n    struct Field {\\n        uint256 soil;\\n        uint256 pods;\\n        uint256 harvested;\\n        uint256 harvestable;\\n    }\\n\\n    // Governance\\n\\n    struct Bip {\\n        address proposer;\\n        uint32 start;\\n        uint32 period;\\n        bool executed;\\n        int pauseOrUnpause;\\n        uint128 timestamp;\\n        uint256 roots;\\n        uint256 endTotalRoots;\\n    }\\n\\n    struct DiamondCut {\\n        IDiamondCut.FacetCut[] diamondCut;\\n        address initAddress;\\n        bytes initData;\\n    }\\n\\n    struct Governance {\\n        uint32[] activeBips;\\n        uint32 bipIndex;\\n        mapping(uint32 => DiamondCut) diamondCuts;\\n        mapping(uint32 => mapping(address => bool)) voted;\\n        mapping(uint32 => Bip) bips;\\n    }\\n\\n    // Silo\\n\\n    struct AssetSilo {\\n        uint256 deposited;\\n        uint256 withdrawn;\\n    }\\n\\n    struct IncreaseSilo {\\n        uint256 beans;\\n        uint256 stalk;\\n    }\\n\\n    struct SeasonOfPlenty {\\n        uint256 weth;\\n        uint256 base;\\n        uint32 last;\\n    }\\n\\n    struct Silo {\\n        uint256 stalk;\\n        uint256 seeds;\\n        uint256 roots;\\n    }\\n\\n    // Season\\n\\n    struct Oracle {\\n        bool initialized;\\n        uint256 cumulative;\\n        uint256 pegCumulative;\\n        uint32 timestamp;\\n        uint32 pegTimestamp;\\n    }\\n\\n    struct Rain {\\n        uint32 start;\\n        bool raining;\\n        uint256 pods;\\n        uint256 roots;\\n    }\\n\\n    struct Season {\\n        uint32 current;\\n        uint256 start;\\n        uint256 period;\\n        uint256 timestamp;\\n    }\\n\\n    struct Weather {\\n        uint256 startSoil;\\n        uint256 lastDSoil;\\n        uint96 lastSoilPercent;\\n        uint32 lastSowTime;\\n        uint32 nextSowTime;\\n        uint32 yield;\\n        bool didSowBelowMin;\\n        bool didSowFaster;\\n    }\\n}\\n\\nstruct AppStorage {\\n    uint8 index;\\n    int8[32] cases;\\n    bool paused;\\n    uint128 pausedAt;\\n    Storage.Season season;\\n    Storage.Contracts c;\\n    Storage.Field f;\\n    Storage.Governance g;\\n    Storage.Oracle o;\\n    Storage.Rain r;\\n    Storage.Silo s;\\n    uint256 depreciated1;\\n    Storage.Weather w;\\n    Storage.AssetSilo bean;\\n    Storage.AssetSilo lp;\\n    Storage.IncreaseSilo si;\\n    Storage.SeasonOfPlenty sop;\\n    uint256 depreciated2;\\n    uint256 depreciated3;\\n    uint256 depreciated4;\\n    uint256 depreciated5;\\n    uint256 depreciated6;\\n    mapping (uint32 => uint256) sops;\\n    mapping (address => Account.State) a;\\n    uint32 bip0Start;\\n}\\n\"\r\n    },\r\n    \"contracts/C.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./libraries/Decimal.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title C holds the contracts for Beanstalk.\\n**/\\nlibrary C {\\n\\n    using Decimal for Decimal.D256;\\n    using SafeMath for uint256;\\n\\n    // Chain\\n    uint256 private constant CHAIN_ID = 1; // Mainnet\\n\\n    // Season\\n    uint256 private constant CURRENT_SEASON_PERIOD = 3600; // 1 hour\\n\\n    // Sun\\n    uint256 private constant HARVESET_PERCENTAGE = 5e17; // 50%\\n\\n    // Weather\\n    uint256 private constant POD_RATE_LOWER_BOUND = 5e16; // 5%\\n    uint256 private constant OPTIMAL_POD_RATE = 15e16; // 15%\\n    uint256 private constant POD_RATE_UPPER_BOUND = 25e16; // 25%\\n\\n    uint256 private constant DELTA_POD_DEMAND_LOWER_BOUND = 95e16; // 95%\\n    uint256 private constant DELTA_POD_DEMAND_UPPER_BOUND = 105e16; // 105%\\n\\n    uint256 private constant STEADY_SOW_TIME = 60; // 1 minute\\n    uint256 private constant RAIN_TIME = 24; // 24 seasons = 1 day\\n\\n    // Governance\\n    uint32 private constant GOVERNANCE_PERIOD = 168; // 168 seasons = 7 days\\n    uint32 private constant GOVERNANCE_EMERGENCY_PERIOD = 86400; // 1 day\\n    uint256 private constant GOVERNANCE_PASS_THRESHOLD = 5e17; // 1/2\\n    uint256 private constant GOVERNANCE_EMERGENCY_THRESHOLD_NUMERATOR = 2; // 2/3\\n    uint256 private constant GOVERNANCE_EMERGENCY_THRESHOLD_DEMONINATOR = 3; // 2/3\\n    uint32 private constant GOVERNANCE_EXPIRATION = 24; // 24 seasons = 1 day\\n    uint256 private constant GOVERNANCE_PROPOSAL_THRESHOLD = 1e15; // 0.1%\\n    uint256 private constant BASE_COMMIT_INCENTIVE = 1e8; // 100 beans\\n    uint256 private constant MAX_PROPOSITIONS = 5;\\n\\n    // Silo\\n    uint256 private constant BASE_ADVANCE_INCENTIVE = 1e8; // 100 beans\\n    uint32 private constant WITHDRAW_TIME = 25; // 24 + 1 seasons\\n    uint256 private constant SEEDS_PER_BEAN = 2;\\n    uint256 private constant SEEDS_PER_LP_BEAN = 4;\\n    uint256 private constant STALK_PER_BEAN = 10000;\\n    uint256 private constant ROOTS_BASE = 1e12;\\n\\n    // Field\\n    uint256 private constant SOIL_MAX_RATIO_CAP = 25e16; // 25%\\n    uint256 private constant SOIL_MIN_RATIO_CAP = 1e15; // 0.1%\\n\\n\\n    /**\\n     * Getters\\n    **/\\n\\n    function getSeasonPeriod() internal pure returns (uint256) {\\n        return CURRENT_SEASON_PERIOD;\\n    }\\n\\n    function getGovernancePeriod() internal pure returns (uint32) {\\n        return GOVERNANCE_PERIOD;\\n    }\\n\\n    function getGovernanceEmergencyPeriod() internal pure returns (uint32) {\\n        return GOVERNANCE_EMERGENCY_PERIOD;\\n    }\\n\\n    function getGovernanceExpiration() internal pure returns (uint256) {\\n        return GOVERNANCE_EXPIRATION;\\n    }\\n\\n    function getGovernancePassThreshold() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.D256({value: GOVERNANCE_PASS_THRESHOLD});\\n    }\\n\\n    function getGovernanceEmergencyThreshold() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(GOVERNANCE_EMERGENCY_THRESHOLD_NUMERATOR,GOVERNANCE_EMERGENCY_THRESHOLD_DEMONINATOR);\\n    }\\n\\n    function getGovernanceProposalThreshold() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.D256({value: GOVERNANCE_PROPOSAL_THRESHOLD});\\n    }\\n\\n    function getAdvanceIncentive() internal pure returns (uint256) {\\n        return BASE_ADVANCE_INCENTIVE;\\n    }\\n\\n    function getCommitIncentive() internal pure returns (uint256) {\\n        return BASE_COMMIT_INCENTIVE;\\n    }\\n\\n    function getSiloWithdrawSeasons() internal pure returns (uint32) {\\n        return WITHDRAW_TIME;\\n    }\\n\\n    function getMinSoilRatioCap() internal pure returns (uint256) {\\n        return SOIL_MIN_RATIO_CAP;\\n    }\\n\\n    function getMaxSoilRatioCap() internal pure returns (uint256) {\\n        return SOIL_MAX_RATIO_CAP;\\n    }\\n\\n    function getHarvestPercentage() internal pure returns (uint256) {\\n        return HARVESET_PERCENTAGE;\\n    }\\n\\n    function getChainId() internal pure returns (uint256) {\\n        return CHAIN_ID;\\n    }\\n\\n    function getOptimalPodRate() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(OPTIMAL_POD_RATE,1e18);\\n    }\\n\\n    function getUpperBoundPodRate() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(POD_RATE_UPPER_BOUND,1e18);\\n    }\\n\\n    function getLowerBoundPodRate() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(POD_RATE_LOWER_BOUND,1e18);\\n    }\\n\\n    function getUpperBoundDPD() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(DELTA_POD_DEMAND_UPPER_BOUND,1e18);\\n    }\\n\\n    function getLowerBoundDPD() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(DELTA_POD_DEMAND_LOWER_BOUND,1e18);\\n    }\\n\\n    function getSteadySowTime() internal pure returns (uint256) {\\n        return STEADY_SOW_TIME;\\n    }\\n\\n    function getRainTime() internal pure returns (uint256) {\\n        return RAIN_TIME;\\n    }\\n\\n    function getMaxPropositions() internal pure returns (uint256) {\\n      return MAX_PROPOSITIONS;\\n    }\\n\\n    function getSeedsPerBean() internal pure returns (uint256) {\\n        return SEEDS_PER_BEAN;\\n    }\\n\\n    function getSeedsPerLPBean() internal pure returns (uint256) {\\n        return SEEDS_PER_LP_BEAN;\\n    }\\n\\n    function getStalkPerBean() internal pure returns (uint256) {\\n      return STALK_PER_BEAN;\\n    }\\n\\n    function getStalkPerLPSeed() internal pure returns (uint256) {\\n      return STALK_PER_BEAN/SEEDS_PER_LP_BEAN;\\n    }\\n\\n    function getRootsBase() internal pure returns (uint256) {\\n        return ROOTS_BASE;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Decimal.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Decimal\\n * @author dYdX\\n *\\n * Library that defines a fixed-point number with 18 decimal places.\\n */\\nlibrary Decimal {\\n    using SafeMath for uint256;\\n\\n    // ============ Constants ============\\n\\n    uint256 constant BASE = 10**18;\\n\\n    // ============ Structs ============\\n\\n\\n    struct D256 {\\n        uint256 value;\\n    }\\n\\n    // ============ Static Functions ============\\n\\n    function zero()\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: 0 });\\n    }\\n\\n    function one()\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: BASE });\\n    }\\n\\n    function from(\\n        uint256 a\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: a.mul(BASE) });\\n    }\\n\\n    function ratio(\\n        uint256 a,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: getPartial(a, BASE, b) });\\n    }\\n\\n    // ============ Self Functions ============\\n\\n    function add(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.add(b.mul(BASE)) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.mul(BASE)) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        uint256 b,\\n        string memory reason\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.mul(BASE), reason) });\\n    }\\n\\n    function mul(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.mul(b) });\\n    }\\n\\n    function div(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.div(b) });\\n    }\\n\\n    function pow(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        if (b == 0) {\\n            return from(1);\\n        }\\n\\n        D256 memory temp = D256({ value: self.value });\\n        for (uint256 i = 1; i < b; i++) {\\n            temp = mul(temp, self);\\n        }\\n\\n        return temp;\\n    }\\n\\n    function add(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.add(b.value) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.value) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        D256 memory b,\\n        string memory reason\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.value, reason) });\\n    }\\n\\n    function mul(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: getPartial(self.value, b.value, BASE) });\\n    }\\n\\n    function div(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: getPartial(self.value, BASE, b.value) });\\n    }\\n\\n    function equals(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return self.value == b.value;\\n    }\\n\\n    function greaterThan(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) == 2;\\n    }\\n\\n    function lessThan(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) == 0;\\n    }\\n\\n    function greaterThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) > 0;\\n    }\\n\\n    function lessThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) < 2;\\n    }\\n\\n    function isZero(D256 memory self) internal pure returns (bool) {\\n        return self.value == 0;\\n    }\\n\\n    function asUint256(D256 memory self) internal pure returns (uint256) {\\n        return self.value.div(BASE);\\n    }\\n\\n    // ============ Core Methods ============\\n\\n    function getPartial(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    )\\n    private\\n    pure\\n    returns (uint256)\\n    {\\n        return target.mul(numerator).div(denominator);\\n    }\\n\\n    function compareTo(\\n        D256 memory a,\\n        D256 memory b\\n    )\\n    private\\n    pure\\n    returns (uint256)\\n    {\\n        if (a.value == b.value) {\\n            return 1;\\n        }\\n        return a.value > b.value ? 2 : 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibDiamond.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.7.6;\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {IERC173} from \\\"../interfaces/IERC173.sol\\\";\\nimport {LibMeta} from \\\"./LibMeta.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(LibMeta.msgSender() == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    function addDiamondFunctions(\\n        address _diamondCutFacet,\\n        address _diamondLoupeFacet,\\n        address _ownershipFacet\\n    ) internal {\\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](3);\\n        bytes4[] memory functionSelectors = new bytes4[](1);\\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\\n        cut[0] = IDiamondCut.FacetCut({facetAddress: _diamondCutFacet, action: IDiamondCut.FacetCutAction.Add, functionSelectors: functionSelectors});\\n        functionSelectors = new bytes4[](5);\\n        functionSelectors[0] = IDiamondLoupe.facets.selector;\\n        functionSelectors[1] = IDiamondLoupe.facetFunctionSelectors.selector;\\n        functionSelectors[2] = IDiamondLoupe.facetAddresses.selector;\\n        functionSelectors[3] = IDiamondLoupe.facetAddress.selector;\\n        functionSelectors[4] = IERC165.supportsInterface.selector;\\n        cut[1] = IDiamondCut.FacetCut({\\n            facetAddress: _diamondLoupeFacet,\\n            action: IDiamondCut.FacetCutAction.Add,\\n            functionSelectors: functionSelectors\\n        });\\n        functionSelectors = new bytes4[](2);\\n        functionSelectors[0] = IERC173.transferOwnership.selector;\\n        functionSelectors[1] = IERC173.owner.selector;\\n        cut[2] = IDiamondCut.FacetCut({facetAddress: _ownershipFacet, action: IDiamondCut.FacetCutAction.Add, functionSelectors: functionSelectors});\\n        diamondCut(cut, address(0), \\\"\\\");\\n    }\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // uint16 selectorCount = uint16(diamondStorage().selectors.length);\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet cant be address(0)\\\");\\n        uint16 selectorPosition = uint16(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n            ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = uint16(ds.facetAddresses.length);\\n            ds.facetAddresses.push(_facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Cant add function that already exists\\\");\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(selector);\\n            ds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress;\\n            ds.selectorToFacetAndPosition[selector].functionSelectorPosition = selectorPosition;\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet cant be address(0)\\\");\\n        uint16 selectorPosition = uint16(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n            ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = uint16(ds.facetAddresses.length);\\n            ds.facetAddresses.push(_facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Cant replace function with same function\\\");\\n            removeFunction(oldFacetAddress, selector);\\n            // add function\\n            ds.selectorToFacetAndPosition[selector].functionSelectorPosition = selectorPosition;\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(selector);\\n            ds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress;\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function removeFunction(address _facetAddress, bytes4 _selector) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Cant remove function that doesnt exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Cant remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint16(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (success == false) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize != 0, _errorMessage);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.7.6;\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDiamondLoupe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.7.6;\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.7.6;\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC173.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.7.6;\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibMeta.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.7.6;\\n\\nlibrary LibMeta {\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(bytes(\\\"EIP712Domain(string name,string version,uint256 salt,address verifyingContract)\\\"));\\n\\n    function domainSeparator(string memory name, string memory version) internal view returns (bytes32 domainSeparator_) {\\n        domainSeparator_ = keccak256(\\n            abi.encode(EIP712_DOMAIN_TYPEHASH, keccak256(bytes(name)), keccak256(bytes(version)), getChainID(), address(this))\\n        );\\n    }\\n\\n    function getChainID() internal pure returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function msgSender() internal view returns (address sender_) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"bip\",\"type\":\"uint32\"}],\"name\":\"Commit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beans\",\"type\":\"uint256\"}],\"name\":\"Incentivization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"bip\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"Proposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timePassed\",\"type\":\"uint256\"}],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"bip\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roots\",\"type\":\"uint256\"}],\"name\":\"Unvote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"bip\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roots\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeBips\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bipId\",\"type\":\"uint32\"}],\"name\":\"bip\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"period\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"pauseOrUnpause\",\"type\":\"int256\"},{\"internalType\":\"uint128\",\"name\":\"timestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"roots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTotalRoots\",\"type\":\"uint256\"}],\"internalType\":\"struct Storage.Bip\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bipId\",\"type\":\"uint32\"}],\"name\":\"bipDiamondCut\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"initAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"}],\"internalType\":\"struct Storage.DiamondCut\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bipId\",\"type\":\"uint32\"}],\"name\":\"bipFacetCuts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bip\",\"type\":\"uint32\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bip\",\"type\":\"uint32\"}],\"name\":\"emergencyCommit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfBips\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bip\",\"type\":\"uint32\"}],\"name\":\"pauseOrUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"_pauseOrUnpause\",\"type\":\"uint8\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bipId\",\"type\":\"uint32\"}],\"name\":\"rootsFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bip\",\"type\":\"uint32\"}],\"name\":\"unvote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bip\",\"type\":\"uint32\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"bipId\",\"type\":\"uint32\"}],\"name\":\"voted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GovernanceFacet","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}