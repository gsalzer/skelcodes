{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-11-22\r\n*/\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.8;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  constructor() public {\r\n    _owner = 0x57bF66888b66B2C55252Dece0A36eD08Dd56fE90;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(isOwner(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function owner(\r\n  ) public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  function isOwner(\r\n  ) public view returns (bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n  \r\n    /**\r\n   * transferOwnership\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract Envision is IERC20, Ownable {\r\n\r\n    using SafeMath for uint;\r\n\r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8 internal _decimals;\r\n    uint256 internal _totalSupply;\r\n    uint256 internal _maxSupply = 200000000 * 10 ** 18;\r\n    \r\n    uint public burnWalletFee = 2;\r\n    uint public poolWalletFee = 5;\r\n    uint public marketingWalletFee = 10;\r\n    uint public totalFeePercent = 1000;\r\n        \r\n    address public poolWalletAddress = 0xE1E1E6EF82Bd81dCCeA7FBA7a86d5f195Bc48FC8;\r\n    address public marketingWalletAddress = 0xE1E1E6EF82Bd81dCCeA7FBA7a86d5f195Bc48FC8;\r\n    \r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) internal _allowed;\r\n\r\n    event Mint(address indexed minter, address indexed account, uint256 amount);\r\n    event Burn(address indexed burner, address indexed account, uint256 amount);\r\n\r\n    constructor (\r\n        string memory name, \r\n        string memory symbol, \r\n        uint8 decimals\r\n    ) public\r\n    {\r\n        _symbol = symbol;\r\n        _name = name;\r\n        _decimals = decimals;\r\n        _totalSupply = _maxSupply;\r\n        _balances[0x57bF66888b66B2C55252Dece0A36eD08Dd56fE90] = _maxSupply;\r\n    }\r\n\r\n    function name(\r\n    ) public view returns (string memory)\r\n    {\r\n        return _name;\r\n    }\r\n\r\n    function symbol(\r\n    ) public view returns (string memory)\r\n    {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals(\r\n    ) public view returns (uint8)\r\n    {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply(\r\n    ) public view returns (uint256)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function setFeePercent(uint _burnFeePercent, uint _marketingWalletFee, uint _poolWalletFee, uint _totalFeePercent) public onlyOwner{        \r\n        burnWalletFee = _burnFeePercent;\r\n        poolWalletFee = _poolWalletFee;\r\n        marketingWalletFee = _marketingWalletFee;\r\n        totalFeePercent = _totalFeePercent;\r\n    }\r\n    \r\n    function SetMarketingWallet(address _marketWalletAddress) public onlyOwner{\r\n        marketingWalletAddress = _marketWalletAddress;            \r\n    }\r\n    \r\n    function SetLiquidityPoolWallet(address _poolWalletAddress) public onlyOwner{\r\n        poolWalletAddress = _poolWalletAddress;            \r\n    }\r\n    \r\n    function transferbyOwner(address _to, uint256 _value) public onlyOwner  returns (bool) {\r\n        require(_to != address(0), 'Envision: to address is not valid');\r\n        require(_value <= _balances[msg.sender], 'Envision: insufficient balance');\r\n        _balances[msg.sender] = SafeMath.sub(_balances[msg.sender], _value);\r\n        _balances[_to] = _balances[_to].add(_value);\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function transfer(\r\n        address _to, \r\n        uint256 _value\r\n    ) public override\r\n      returns (bool)\r\n    {\r\n        require(_to != address(0), 'Envision: to address is not valid');\r\n        require(_value <= _balances[msg.sender], 'Envision: insufficient balance');\r\n        \r\n        _balances[msg.sender] = SafeMath.sub(_balances[msg.sender], _value);\r\n        \r\n        uint256 remainFee = totalFeePercent - burnWalletFee - poolWalletFee - marketingWalletFee;\r\n        _balances[_to] = _balances[_to].add(_value.mul(remainFee).div(totalFeePercent));        \r\n        _balances[poolWalletAddress] = _balances[poolWalletAddress].add(_value.mul(poolWalletFee).div(totalFeePercent));\r\n        _balances[marketingWalletAddress] = _balances[marketingWalletAddress].add(_value.mul(marketingWalletFee).div(totalFeePercent));\r\n        _totalSupply = _totalSupply.sub(_value.mul(burnWalletFee).div(totalFeePercent));\r\n        emit Transfer(msg.sender, _to, _value.mul(remainFee).div(totalFeePercent));        \r\n        emit Burn(msg.sender, msg.sender, _value.mul(burnWalletFee).div(totalFeePercent));\r\n        emit Transfer(msg.sender, poolWalletAddress, _value.mul(poolWalletFee).div(totalFeePercent));\r\n        emit Transfer(msg.sender, marketingWalletAddress, _value.mul(marketingWalletFee).div(totalFeePercent));\r\n        return true;\r\n    }\r\n\r\n   function balanceOf(\r\n       address _owner\r\n    ) public override view returns (uint256 balance) \r\n    {\r\n        return _balances[_owner];\r\n    }\r\n\r\n    function approve(\r\n       address _spender, \r\n       uint256 _value\r\n    ) public override\r\n      returns (bool) \r\n    {\r\n        _allowed[msg.sender][_spender] = _value;\r\n        \r\n        emit Approval(msg.sender, _spender, _value);\r\n        \r\n        return true;\r\n   }\r\n\r\n   function transferFrom(\r\n        address _from, \r\n        address _to, \r\n        uint256 _value\r\n    ) public override\r\n      returns (bool) \r\n    {\r\n        require(_from != address(0), 'Envision: from address is not valid');\r\n        require(_to != address(0), 'Envision: to address is not valid');\r\n        require(_value <= _balances[_from], 'Envision: insufficient balance');\r\n        require(_value <= _allowed[_from][msg.sender], 'Envision: from not allowed');\r\n\r\n        _balances[_from] = SafeMath.sub(_balances[_from], _value);\r\n        uint256 remainFee = totalFeePercent - burnWalletFee - poolWalletFee - marketingWalletFee;\r\n        _balances[_to] = _balances[_to].add(_value.mul(remainFee).div(totalFeePercent));        \r\n        _balances[poolWalletAddress] = _balances[poolWalletAddress].add(_value.mul(poolWalletFee).div(totalFeePercent));\r\n        _balances[marketingWalletAddress] = _balances[marketingWalletAddress].add(_value.mul(marketingWalletFee).div(totalFeePercent));\r\n        _totalSupply = _totalSupply.sub(_value.mul(burnWalletFee).div(totalFeePercent));\r\n        _allowed[_from][msg.sender] = SafeMath.sub(_allowed[_from][msg.sender], _value);\r\n        \r\n        emit Transfer(_from, _to, _value.mul(remainFee).div(totalFeePercent));        \r\n        emit Burn(msg.sender, _from, _value.mul(burnWalletFee).div(totalFeePercent));\r\n        emit Transfer(_from, poolWalletAddress, _value.mul(poolWalletFee).div(totalFeePercent));\r\n        emit Transfer(_from, marketingWalletAddress, _value.mul(marketingWalletFee).div(totalFeePercent));\r\n        \r\n        return true;\r\n   }\r\n\r\n    function allowance(\r\n        address _owner, \r\n        address _spender\r\n    ) public override view \r\n      returns (uint256) \r\n    {\r\n        return _allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(\r\n        address _spender, \r\n        uint _addedValue\r\n    ) public\r\n      returns (bool)\r\n    {\r\n        _allowed[msg.sender][_spender] = SafeMath.add(_allowed[msg.sender][_spender], _addedValue);\r\n        \r\n        emit Approval(msg.sender, _spender, _allowed[msg.sender][_spender]);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(\r\n        address _spender, \r\n        uint _subtractedValue\r\n    ) public\r\n      returns (bool) \r\n    {\r\n        uint oldValue = _allowed[msg.sender][_spender];\r\n        \r\n        if (_subtractedValue > oldValue) {\r\n            _allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            _allowed[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);\r\n        }\r\n        \r\n        emit Approval(msg.sender, _spender, _allowed[msg.sender][_spender]);\r\n        \r\n        return true;\r\n   }\r\n\r\n    function mint(\r\n        address _to,\r\n        uint _amount\r\n    ) public onlyOwner\r\n    {\r\n        require(_to != address(0), 'Envision: to address is not valid');\r\n        require(_amount > 0, 'Envision: amount is not valid');\r\n        require(_totalSupply + _amount <= _maxSupply, 'Envision: max supply limited');\r\n\r\n        _totalSupply = _totalSupply.add(_amount);\r\n        _balances[_to] = _balances[_to].add(_amount);\r\n\r\n        emit Mint(msg.sender, _to, _amount);\r\n    }\r\n\r\n    function burn(\r\n        address _from,\r\n        uint _amount\r\n    ) public\r\n        onlyOwner\r\n    {\r\n        require(_from != address(0), 'Envision: from address is not valid');\r\n        require(_balances[_from] >= _amount, 'Envision: insufficient balance');\r\n        \r\n        _balances[_from] = _balances[_from].sub(_amount);\r\n        _totalSupply = _totalSupply.sub(_amount);\r\n\r\n        emit Burn(msg.sender, _from, _amount);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolWalletAddress\",\"type\":\"address\"}],\"name\":\"SetLiquidityPoolWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketWalletAddress\",\"type\":\"address\"}],\"name\":\"SetMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWalletFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWalletFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolWalletFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingWalletFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolWalletFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalFeePercent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferbyOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Envision","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000e456e766973696f6e20546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035649530000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://04c3624ee793ce18f705fb6b7e57213e844c8bac8428aaa15866d38e6e53a110"}]}