{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.8.11;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    function burnFrom(address account_, uint256 amount_) external;\r\n}\r\n\r\ncontract Claims {\r\n    address public constant CERBERUS = 0x8a14897eA5F668f36671678593fAe44Ae23B39FB;\r\n    address public constant owner = 0xdB00139222c99e9098DEf2ceBCD94bDCDa8E7625;\r\n    uint public supplyRemaining = 0;\r\n\r\n    receive() external payable {}\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    function claimAmount(address claimer) public view returns (uint) {\r\n        uint tokenBalance = IERC20(CERBERUS).balanceOf(claimer);\r\n        require(supplyRemaining > 0, \"supplyRemaining not set\");\r\n        require(tokenBalance > 0, \"No 3dog\");\r\n        require(address(this).balance > 0, \"eth not received\");\r\n        uint ethAmount = address(this).balance * tokenBalance / supplyRemaining;\r\n        return ethAmount;\r\n    }\r\n\r\n    function claim() external {\r\n        uint tokenBalance = IERC20(CERBERUS).balanceOf(msg.sender);\r\n        uint ethAmount = claimAmount(msg.sender);\r\n        // Subtract from denominator\r\n        supplyRemaining -= tokenBalance;\r\n        // Burn the 3dog\r\n        IERC20(CERBERUS).burnFrom(msg.sender, tokenBalance);\r\n        // Send the eth\r\n        (bool sent, bytes memory data) = msg.sender.call{value: ethAmount}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n\r\n    function setSupplyRemaining(uint _supplyRemaining) external onlyOwner {\r\n        supplyRemaining = _supplyRemaining;\r\n    }\r\n\r\n    function retrieveTokens(address token) external onlyOwner {\r\n        if(token == address(0x0)) {\r\n            uint ethAmount = address(this).balance;\r\n            (bool sent, bytes memory data) = owner.call{value: ethAmount}(\"\");\r\n            require(sent, \"Failed to send Ether\");\r\n        } else {\r\n            uint tokenBalance = IERC20(token).balanceOf(address(this));\r\n            IERC20(token).transfer(owner, tokenBalance);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"name\":\"CERBERUS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"claimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supplyRemaining\",\"type\":\"uint256\"}],\"name\":\"setSupplyRemaining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Claims","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e6680bec75e496765316eac4691cfc110f00081cc1f77785d265c9b6575271f7"}]}