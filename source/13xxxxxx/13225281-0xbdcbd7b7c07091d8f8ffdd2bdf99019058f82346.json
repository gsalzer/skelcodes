{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/F/Dropbox/Code/CCNFT/contracts/CryptoCities.sol\": {\r\n      \"content\": \"//      ___                     _            ___  _  _    _            \\r\\n//     / __\\\\_ __  _   _  _ __  | |_  ___    / __\\\\(_)| |_ (_)  ___  ___ \\r\\n//    / /  | '__|| | | || '_ \\\\ | __|/ _ \\\\  / /   | || __|| | / _ \\\\/ __|\\r\\n//   / /___| |   | |_| || |_) || |_| (_) |/ /___ | || |_ | ||  __/\\\\__ \\\\\\r\\n//   \\\\____/|_|    \\\\__, || .__/  \\\\__|\\\\___/ \\\\____/ |_| \\\\__||_| \\\\___||___/\\r\\n//                |___/ |_|                                            \\r\\n//\\r\\n// CryptoCities is an ERC721 compliant smart contract for this project:\\r\\n// (https://cryptocities.net)  \\r\\n//\\r\\n// In addition to a standard ERC721 interface it also includes:\\r\\n//  - a maker / taker off-chain marketplace which executes final trades here\\r\\n//  - batch functions for most token read functions\\r\\n//  - a limited supply of 25000 tokens\\r\\n// \\r\\n//  Discord:\\r\\n//   https://discord.gg/Y4mhwWg \\r\\n//\\r\\n//  Bug Bounty:\\r\\n//   Please see the details of our bug bounty program below.  \\r\\n//   https://cryptocities.net/bug_bounty\\r\\n//\\r\\n//  Disclaimer:\\r\\n//   We take the greatest of care when making our smart contracts but this is crypto and the future \\r\\n//   is always unknown. Even if it is exciting and full of wonderful possibilities, anything can happen,  \\r\\n//   blockchains will evolve, vulnerabilities can arise, and markets can go up and down. CryptoCities and its  \\r\\n//   owners accept no liability for any issues relating to the use of this contract or any losses that may occur. \\r\\n//   Please see our full terms here: \\r\\n//   https://cryptocities.net/terms\\r\\n\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\nimport \\\"./base/ERC721Batchable.sol\\\";\\r\\n\\r\\ncontract CryptoCities is ERC721Batchable \\r\\n{\\r\\n    // there can only ever be a max of this many tokens in the contract\\r\\n    uint public constant tokenLimit = 25000;\\r\\n\\r\\n    // the base url used for all meta data \\r\\n    // likely to be stored on IPFS over time   \\r\\n    string private _baseTokenURI;\\r\\n\\r\\n    // the opensea proxy registry contract (can be changed if this registry ever moves to a new contract)\\r\\n    // 0xa5409ec958C83C3f309868babACA7c86DCB077c1  mainnet\\r\\n    // 0xF57B2c51dED3A29e6891aba85459d600256Cf317  rinkeby\\r\\n    // 0x0000000000000000000000000000000000000000  local\\r\\n    address private _proxyRegistryAddress;\\r\\n\\r\\n    // only authorized minters can mint tokens\\r\\n    // this will originally be set to a swapping contract to allow users to swap their tokens to this new contract \\r\\n    mapping (address => bool) public isMinter;    \\r\\n\\r\\n    // pausing the market disables the built-in maker/taker offer system \\r\\n    // it does not affect normal ERC721 transfers \\r\\n    bool public marketPaused;\\r\\n\\r\\n    // the marketplace fee for any internal paid trades (stored in basis points eg. 250 = 2.5% fee) \\r\\n    uint16 public marketFee;\\r\\n\\r\\n    // the marketplace witness is used to validate marketplace offers \\r\\n    address private _marketWitness;\\r\\n\\r\\n    // offer that can no longer be used any more\\r\\n    mapping (bytes32 => bool) private _cancelledOrCompletedOffers;\\r\\n\\r\\n    // support for ERC2981\\r\\n    uint16 private _royaltyFee;\\r\\n    address private _royaltyReciever;\\r\\n\\r\\n    constructor(address _owner, address _recovery, address proxyRegistryAddress) ERC721(\\\"CryptoCities\\\", unicode\\\"â¬¢City\\\")    \\r\\n    {\\r\\n        // set the owner, recovery & treasury addresses\\r\\n        transferOwnership(_owner);\\r\\n        treasury = _owner;\\r\\n        recovery = _recovery;\\r\\n\\r\\n        // set the meta base url\\r\\n        _baseTokenURI = \\\"https://cryptocities.net/meta/\\\";\\r\\n\\r\\n        // set the open sea proxy registry address\\r\\n        _proxyRegistryAddress = proxyRegistryAddress;\\r\\n\\r\\n        // market starts disabled\\r\\n        marketPaused = true;       \\r\\n        marketFee = 250;    \\r\\n    }\\r\\n\\r\\n\\r\\n    /// BASE URI\\r\\n\\r\\n    // base uri is where the metadata lives\\r\\n    // only the owner can change this\\r\\n\\r\\n    function setBaseURI(string memory baseTokenURI) external onlyOwner {\\r\\n        _baseTokenURI = baseTokenURI;\\r\\n    }\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return _baseTokenURI;\\r\\n    }\\r\\n    function contractURI() public pure returns (string memory) {\\r\\n        return \\\"https://cryptocities.net/meta/cities_contract\\\";\\r\\n    }\\r\\n\\r\\n    /// PROXY REGISTRY\\r\\n\\r\\n    // registers a proxy address for OpenSea or others\\r\\n    // can only be changed by the contract owner\\r\\n    // setting address to 0 will disable the proxy \\r\\n\\r\\n    function setProxyRegistry(address proxyRegistry) external onlyOwner { \\r\\n\\r\\n        // check the contract address is correct (will revert if not)\\r\\n        if(proxyRegistry!= address(0)) {\\r\\n            ProxyRegistry(proxyRegistry).proxies(address(0));\\r\\n        }\\r\\n\\r\\n        _proxyRegistryAddress = proxyRegistry;    \\r\\n    }\\r\\n\\r\\n    // this override allows us to whitelist user's OpenSea proxy accounts to enable gas-less listings\\r\\n    function isApprovedForAll(address token_owner, address operator) public view override returns (bool)\\r\\n    {\\r\\n        // whitelist OpenSea proxy contract for easy trading.\\r\\n        if(_proxyRegistryAddress!= address(0)) {\\r\\n            ProxyRegistry proxyRegistry = ProxyRegistry(_proxyRegistryAddress);\\r\\n            if (address(proxyRegistry.proxies(token_owner)) == operator) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return super.isApprovedForAll(token_owner, operator);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// MINTING\\r\\n\\r\\n    // only authorized minters can mint\\r\\n    // can't mint more tokens than the token limit\\r\\n    \\r\\n    // ERC721 standard checks:\\r\\n    // can't mint while the contract is paused (checked in _beforeTokenTransfer())\\r\\n    // token id's can't already exist \\r\\n    // cant mint to address(0)\\r\\n    // if 'to' refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n\\r\\n    // emitted when a minter's authorization changes\\r\\n    event MinterSet(address indexed minter, bool auth);\\r\\n\\r\\n    // only allows an authorized minter to call the function\\r\\n    modifier onlyMinters() \\r\\n    {\\r\\n        require(isMinter[_msgSender()]==true, \\\"caller not a minter\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // changes a minter's authorization\\r\\n    function setMinter(address minter, bool authorized) external onlyOwner \\r\\n    { \\r\\n        isMinter[minter] = authorized;        \\r\\n        emit MinterSet(minter, authorized);        \\r\\n    }\\r\\n\\r\\n    // mint a single token\\r\\n    function mint(address to, uint256 tokenId) external onlyMinters  \\r\\n    {        \\r\\n        require(totalSupply()<tokenLimit, \\\"token limit reached\\\");\\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    // mint a batch of tokens\\r\\n    // (gas: this function can run out of gas if too many id's are provided\\r\\n    //       limiting to 25 will currently fit in the block gas limit but this may change in future)\\r\\n    function mintBatch(address to, uint256[] memory tokenIds) external onlyMinters     \\r\\n    {       \\r\\n        require(tokenIds.length <= 25, \\\"more than 25 ids\\\");\\r\\n        require(totalSupply()+tokenIds.length <= tokenLimit, \\\"batch exceeds token limit\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {  \\r\\n            // we safe mint the first token          \\r\\n            if(i==0) _safeMint(to, tokenIds[i]);\\r\\n\\r\\n            // then we assume the rest are safe because they are going to the same receiver  \\r\\n            else _mint(to, tokenIds[i]);      \\r\\n        }         \\r\\n    }\\r\\n\\r\\n    /// BURNING\\r\\n\\r\\n    // only the contract owner can burn tokens it owns\\r\\n    // the contract owner can't burn someone elses tokens\\r\\n    // normal users can't burn tokens\\r\\n\\r\\n    // ERC721 standard checks:\\r\\n    // can't burn while the contract is paused (checked in _beforeTokenTransfer())\\r\\n    // the token id must exist\\r\\n\\r\\n    function burn(uint256 tokenId) external onlyOwner \\r\\n    {\\r\\n         require(ownerOf(tokenId) == owner(), \\\"token owner not contract owner\\\");\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// MARKETPLACE\\r\\n\\r\\n    // this contract includes a maker / taker offerplace\\r\\n    // (similar to those seen in OpenSea, 0x Protocol and other NFT projects) \\r\\n    //\\r\\n    // offers are made by makers off-chain and filled by callers on-chain\\r\\n    // makers do this by signing their offer with their wallet \\r\\n    // smart contracts can't be makers because they can't sign messages\\r\\n    // if a witness address is set then it must sign the offer hash too (eg. the website marketplace)\\r\\n\\r\\n    // there are two types of offers depending on whether the maker specifies a taker in their offer:\\r\\n    // maker / taker       (peer-to-peer offer:  two users agreeing to trade items)\\r\\n    // maker / no taker    (open offer:  one user listing their items in the marketplace)\\r\\n\\r\\n    // if eth is paid then it will always be on the taker side (the maker never pays eth in this simplified model)\\r\\n    // a market fee is charged if eth is paid\\r\\n    // trading tokens with no eth is free and no fee is deducted\\r\\n\\r\\n    // allowed exchanges:\\r\\n\\r\\n    //   maker tokens  > <  eth                          (maker sells their tokens to anyone)\\r\\n    //   maker tokens  >                                 (maker gives their tokens away to anyone)\\r\\n\\r\\n    //   maker tokens  >    taker                        (maker gives their tokens to a specific taker)\\r\\n    //   maker tokens  > <  taker tokens                     .. for specific tokens back\\r\\n    //   maker tokens  > <  taker tokens & eth               .. for specific tokens and eth back \\r\\n    //   maker tokens  > <  taker eth                        .. for eth only\\r\\n\\r\\n    //   maker           <  taker tokens                 (taker gives their tokens to the maker)\\r\\n    //   maker           <  taker tokens & eth               .. and with eth    \\r\\n\\r\\n    event OfferAccepted(bytes32 indexed hash, address indexed maker, address indexed taker, uint[] makerIds, uint[] takerIds, uint takerWei, uint marketFee);    \\r\\n    event OfferCancelled(bytes32 indexed hash);\\r\\n    \\r\\n    struct Offer {\\r\\n        address maker;\\r\\n        address taker;\\r\\n        uint256[] makerIds;        \\r\\n        uint256[] takerIds;\\r\\n        uint256 takerWei;\\r\\n        uint256 expiry;\\r\\n        uint256 nonce;\\r\\n    }\\r\\n\\r\\n    // pausing the market will stop offers from being able to be accepted (they can still be generated or cancelled)\\r\\n    function pauseMarket(bool pauseTrading) external onlyOwner {\\r\\n        marketPaused = pauseTrading;\\r\\n    }\\r\\n\\r\\n    // the market fee is set in basis points (eg. 250 basis points = 2.5%)\\r\\n    function setMarketFee(uint16 basisPoints) external onlyOwner {\\r\\n        require(basisPoints <= 10000);\\r\\n        marketFee = basisPoints;\\r\\n    }\\r\\n\\r\\n    // if a market witness is set then it will need to sign all offers too (set to 0 to disable)\\r\\n    function setMarketWitness(address newWitness) external onlyOwner {\\r\\n        _marketWitness = newWitness;\\r\\n    }\\r\\n\\r\\n    // recovers the signer address from a offer hash and signature\\r\\n    function signerOfHash(bytes32 offer_hash, bytes memory signature) public pure returns (address signer){\\r\\n        require(signature.length == 65, \\\"sig wrong length\\\");\\r\\n\\r\\n        bytes32 geth_modified_hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", offer_hash));\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n        uint8 v;\\r\\n\\r\\n        assembly {\\r\\n            r := mload(add(signature, 32))\\r\\n            s := mload(add(signature, 64))\\r\\n            v := byte(0, mload(add(signature, 96)))\\r\\n        }\\r\\n\\r\\n        if (v < 27) {\\r\\n            v += 27;\\r\\n        }\\r\\n\\r\\n        require(v == 27 || v == 28, \\\"bad sig v\\\");\\r\\n\\r\\n        return ecrecover(geth_modified_hash, v, r, s);\\r\\n    }\\r\\n \\r\\n\\r\\n    // this generates a hash of an offer that can then be signed by a maker\\r\\n    // the offer has to have basic validity before it can be hashed\\r\\n    // if checking ids then the tokens need to be owned by the parties too \\r\\n    function hashOffer(Offer memory offer, bool checkIds) public view returns (bytes32){\\r\\n\\r\\n        // the maker can't be 0\\r\\n        require(offer.maker!=address(0), \\\"maker is 0\\\");\\r\\n\\r\\n        // maker and taker can't be the same\\r\\n        require(offer.maker!=offer.taker, \\\"same maker / taker\\\");\\r\\n\\r\\n        // the offer must not be expired yet\\r\\n        require(block.timestamp < offer.expiry, \\\"expired\\\");\\r\\n\\r\\n        // token id must be in the offer\\r\\n        require(offer.makerIds.length>0 || offer.takerIds.length>0, \\\"no ids\\\");\\r\\n\\r\\n        // if checking ids then maker must own the maker token ids\\r\\n        if(checkIds){\\r\\n            for(uint i=0; i<offer.makerIds.length; i++){\\r\\n                require(ownerOf(offer.makerIds[i])==offer.maker, \\\"bad maker ids\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // if no taker has been specified (open offer - i.e. typical marketplace listing)\\r\\n        if(offer.taker==address(0)){\\r\\n\\r\\n            // then there can't be taker token ids in the offer\\r\\n            require(offer.takerIds.length==0, \\\"taker ids with no taker\\\");\\r\\n        }\\r\\n\\r\\n        // if a taker has been specified (peer-to-peer offer - i.e. direct trade between two users)\\r\\n        else{\\r\\n\\r\\n            if(checkIds){\\r\\n                // then the taker must own all the taker token ids   \\r\\n                for(uint i=0; i<offer.takerIds.length; i++){\\r\\n                    require(ownerOf(offer.takerIds[i])==offer.taker, \\\"bad taker ids\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // now return the hash\\r\\n        return keccak256(abi.encode(\\r\\n            offer.maker,\\r\\n            offer.taker,\\r\\n            keccak256(abi.encodePacked(offer.makerIds)),            \\r\\n            keccak256(abi.encodePacked(offer.takerIds)),\\r\\n            offer.takerWei,\\r\\n            offer.expiry,\\r\\n            offer.nonce,\\r\\n            address(this)        // including the contract address prevents cross-contract replays  \\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // an offer is valid if:\\r\\n    //  it's maker / taker details are valid \\r\\n    //  it has been signed by the maker\\r\\n    //  it has not been cancelled or completed yet\\r\\n    //  the parties own their tokens (if checking ids)\\r\\n    //  the witness has signed it (if witnessing is enabled)\\r\\n    //  the trade is valid (if requested)\\r\\n    function validOffer(Offer memory offer, bytes memory signature, bytes memory witnessSignature, bool checkIds, bool checkTradeValid, uint checkValue) external view returns (bool){\\r\\n\\r\\n        // will revert if the offer or signer is not valid or checks fail\\r\\n        bytes32 _offer_hash = _getValidOfferHash(offer, signature, checkIds, checkTradeValid, checkValue);\\r\\n\\r\\n        // check the witness if needed\\r\\n        _validWitness(_offer_hash, witnessSignature);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // if a market witness is set then they need to sign the offer hash too\\r\\n    function _validWitness(bytes32 _offer_hash, bytes memory witnessSignature) internal view {\\r\\n        if(_marketWitness!=address(0)){       \\r\\n            require(_marketWitness == signerOfHash(_offer_hash, witnessSignature), \\\"wrong witness\\\");  \\r\\n        }\\r\\n    }\\r\\n\\r\\n    // gets the hash of an offer and checks that it has been signed by the maker\\r\\n    function _getValidOfferHash(Offer memory offer, bytes memory signature, bool checkIds, bool checkTradeValid, uint checkValue) internal view returns (bytes32){\\r\\n\\r\\n        // get the offer signer \\r\\n        bytes32 _offer_hash = hashOffer(offer, checkIds);\\r\\n        address _signer = signerOfHash(_offer_hash, signature);\\r\\n        \\r\\n        // the signer must be the maker\\r\\n        require(offer.maker==_signer, \\\"maker not signer\\\");\\r\\n        \\r\\n        // the offer can't be cancelled or completed already\\r\\n        require(_cancelledOrCompletedOffers[_offer_hash]!=true, \\\"offer cancelled or completed\\\");\\r\\n\\r\\n        // if checking the trade then we need to check the taker side too\\r\\n        if(checkTradeValid){\\r\\n\\r\\n            address caller = _msgSender();\\r\\n\\r\\n            // no trading when paused\\r\\n            require(!marketPaused, \\\"marketplace paused\\\");\\r\\n\\r\\n            // caller can't be the maker\\r\\n            require(caller!=offer.maker, \\\"caller is the maker\\\");\\r\\n\\r\\n            // if there is a taker specified then they must be the caller\\r\\n            require(caller==offer.taker || offer.taker==address(0), \\\"caller not the taker\\\");\\r\\n\\r\\n            // check the correct wei has been provided by the taker (can be 0)\\r\\n            require(checkValue==offer.takerWei, \\\"wrong payment sent\\\");\\r\\n        }\\r\\n\\r\\n        return _offer_hash;\\r\\n    }\\r\\n      \\r\\n    \\r\\n    // (gas: these functions can run out of gas if too many id's are provided\\r\\n    //       not limiting them here because block gas limits change over time and we don't know what they will be in future)\\r\\n\\r\\n    // stops the offer hash from being usable in future\\r\\n    // can only be cancelled by the maker or the contract owner    \\r\\n    function cancelOffer(Offer memory offer) external {\\r\\n        address caller = _msgSender();\\r\\n        require(caller == offer.maker || caller == owner(), \\\"caller not maker or contract owner\\\");\\r\\n\\r\\n        // get the offer hash \\r\\n        bytes32 _offer_hash = hashOffer(offer, false);\\r\\n                \\r\\n        // set the offer hash as cancelled\\r\\n        _cancelledOrCompletedOffers[_offer_hash]=true;\\r\\n    \\r\\n        emit OfferCancelled(_offer_hash);       \\r\\n    }\\r\\n\\r\\n    // fills an offer\\r\\n    \\r\\n    // offers can't be traded when the market is paused or the contract is paused\\r\\n    // offers must be valid and signed by the maker \\r\\n    // the caller has to be the taker or can be an unknown party if no taker is set\\r\\n    // eth may or may not be required by the offer\\r\\n    // tokens must belong to the makers and takers\\r\\n\\r\\n    function acceptOffer(Offer memory offer, bytes memory signature, bytes memory witnessSignature) external payable reentrancyGuard {\\r\\n        \\r\\n        // CHECKS\\r\\n        \\r\\n        // will revert if the offer or signer is not valid \\r\\n        // will also check token ids to make sure they belong to the parties\\r\\n        // will check the caller and eth matches the offer taker details \\r\\n        bytes32 _offer_hash = _getValidOfferHash(offer, signature, true, true, msg.value);\\r\\n       \\r\\n        // check the witness if needed\\r\\n        _validWitness(_offer_hash, witnessSignature);\\r\\n       \\r\\n        // EFFECTS\\r\\n\\r\\n        address caller = _msgSender();\\r\\n\\r\\n        // transfer the maker tokens to the caller\\r\\n        for(uint i=0; i<offer.makerIds.length; i++){\\r\\n             _safeTransfer(offer.maker, caller, offer.makerIds[i], \\\"\\\");\\r\\n        }\\r\\n\\r\\n        // transfer the taker tokens to the maker \\r\\n        for(uint i=0; i<offer.takerIds.length; i++){\\r\\n             _safeTransfer(caller, offer.maker, offer.takerIds[i], \\\"\\\");\\r\\n        }\\r\\n\\r\\n        // set the offer has as completed (stops the offer from being reused)\\r\\n        _cancelledOrCompletedOffers[_offer_hash]=true;\\r\\n\\r\\n        // INTERACTIONS\\r\\n\\r\\n        // transfer the payment if one is present\\r\\n        uint _fee = 0;\\r\\n        if(msg.value>0){\\r\\n\\r\\n            // calculate the marketplace fee (stored as basis points)\\r\\n            // eg. 250 basis points is 2.5%  (250/10000) \\r\\n            _fee = msg.value * marketFee / 10000;\\r\\n            uint _earned = msg.value - _fee;\\r\\n\\r\\n            // safety check (should never be hit)\\r\\n            assert(_fee>=0 && _earned>=0 && _earned<= msg.value && _fee+_earned==msg.value);\\r\\n            \\r\\n            // send the payment to the maker\\r\\n            //   security note: calls to a maker should only revert if insufficient gas is sent by the caller/taker\\r\\n            //   makers can't be smart contracts because makers need to sign the offer hash for us\\r\\n            //    - currently only EOA's (externally owned accounts) can sign a message on the ethereum network\\r\\n            //    - smart contracts don't have a private key and can't sign a message, so they can't be makers here\\r\\n            //    - offers for specific makers can be blacklisted in the marketplace if required\\r\\n\\r\\n            (bool success, ) = offer.maker.call{value:_earned}(\\\"\\\");    \\r\\n            require(success, \\\"payment to maker failed\\\");            \\r\\n        }\\r\\n\\r\\n        emit OfferAccepted(_offer_hash, offer.maker, caller, offer.makerIds, offer.takerIds, offer.takerWei, _fee);\\r\\n    }  \\r\\n    \\r\\n\\r\\n    /// ERC2981 support\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == 0x2a55205a  // ERC2981\\r\\n               || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function royaltyInfo(uint256, uint256 salePrice) external view returns (address receiver, uint256 royaltyAmount)\\r\\n    {\\r\\n        return (_royaltyReciever, (salePrice * _royaltyFee) / 10000);\\r\\n    }\\r\\n\\r\\n    // the royalties fee is set in basis points (eg. 250 basis points = 2.5%)\\r\\n    function setRoyalties(address newReceiver, uint16 basisPoints) external onlyOwner {\\r\\n        require(basisPoints <= 10000);\\r\\n        _royaltyReciever = newReceiver;\\r\\n        _royaltyFee = basisPoints;\\r\\n    }\\r\\n}\\r\\n\\r\\n// used to whitelist proxy accounts of OpenSea users so that they are automatically able to trade any item on OpenSea\\r\\ncontract OwnableDelegateProxy {}\\r\\ncontract ProxyRegistry {\\r\\n    mapping(address => OwnableDelegateProxy) public proxies;\\r\\n} \\r\\n\"\r\n    },\r\n    \"/F/Dropbox/Code/CCNFT/contracts/base/ERC721Batchable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"../base/OwnableRecoverable.sol\\\";\\r\\n\\r\\n// ERC721Batchable wraps multiple commonly used base contracts into a single contract\\r\\n// \\r\\n// it includes:\\r\\n//  ERC721 with Enumerable\\r\\n//  contract ownership & recovery\\r\\n//  contract pausing\\r\\n//  treasury \\r\\n//  batching\\r\\n\\r\\nabstract contract ERC721Batchable is ERC721Enumerable, Pausable, OwnableRecoverable \\r\\n{   \\r\\n    // the treasure address that can make withdrawals from the contract balance\\r\\n    address public treasury;\\r\\n\\r\\n    constructor()  \\r\\n    {\\r\\n       \\r\\n    }\\r\\n\\r\\n    // used to stop a contract function from being reentrant-called \\r\\n    bool private _reentrancyLock = false;\\r\\n    modifier reentrancyGuard {\\r\\n        require(!_reentrancyLock, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n \\r\\n        _reentrancyLock = true;\\r\\n        _;\\r\\n        _reentrancyLock = false;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// PAUSING\\r\\n\\r\\n    // only the contract owner can pause and unpause\\r\\n    // can't pause if already paused\\r\\n    // can't unpause if already unpaused\\r\\n    // disables minting, burning, transfers (including marketplace accepted offers)\\r\\n\\r\\n    function pause() external virtual onlyOwner {        \\r\\n        _pause();        \\r\\n    }\\r\\n    function unpause() external virtual onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    // this hook is called by _mint, _burn & _transfer \\r\\n    // it allows us to block these actions while the contract is paused\\r\\n    // also prevent transfers to the contract address\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\r\\n        require(to != address(this), \\\"cant transfer to the contract address\\\");\\r\\n        \\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        require(!paused(), \\\"token transfer while contract paused\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    /// TREASURY\\r\\n\\r\\n    // can only be called by the contract owner\\r\\n    // withdrawals can only be made to the treasury account\\r\\n\\r\\n    // allows for a dedicated address to be used for withdrawals\\r\\n    function setTreasury(address newTreasury) external onlyOwner { \\r\\n        require(newTreasury!=address(0), \\\"cant be 0 address\\\");\\r\\n        treasury = newTreasury;\\r\\n    }\\r\\n\\r\\n    // funds can be withdrawn to the treasury account for safe keeping\\r\\n    function treasuryOut(uint amount) external onlyOwner reentrancyGuard {\\r\\n        \\r\\n        // can withdraw any amount up to the account balance (0 will withdraw everything)\\r\\n        uint balance = address(this).balance;\\r\\n        if(amount == 0 || amount > balance) amount = balance;\\r\\n\\r\\n        // make the withdrawal\\r\\n        (bool success, ) = treasury.call{value:amount}(\\\"\\\");\\r\\n        require(success, \\\"transfer failed\\\");\\r\\n    }\\r\\n    \\r\\n    // the owner can pay funds in at any time although this is not needed\\r\\n    // perhaps the contract needs to hold a certain balance in future for some external requirement\\r\\n    function treasuryIn() external payable onlyOwner {\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    /// BATCHING\\r\\n\\r\\n    // all normal ERC721 read functions can be batched\\r\\n    // this allows for any user or app to look up all their tokens in a single call or via paging\\r\\n\\r\\n    function tokenByIndexBatch(uint256[] memory indexes) public view virtual returns (uint256[] memory) {\\r\\n        uint256[] memory batch = new uint256[](indexes.length);\\r\\n\\r\\n        for (uint256 i = 0; i < indexes.length; i++) {\\r\\n            batch[i] = tokenByIndex(indexes[i]);\\r\\n        }\\r\\n\\r\\n        return batch; \\r\\n    }\\r\\n\\r\\n    function balanceOfBatch(address[] memory owners) external view virtual returns (uint256[] memory) {\\r\\n        uint256[] memory batch = new uint256[](owners.length);\\r\\n\\r\\n        for (uint256 i = 0; i < owners.length; i++) {\\r\\n            batch[i] = balanceOf(owners[i]);\\r\\n        }\\r\\n\\r\\n        return batch;        \\r\\n    }\\r\\n\\r\\n    function ownerOfBatch(uint256[] memory tokenIds) external view virtual returns (address[] memory) {  \\r\\n        address[] memory batch = new address[](tokenIds.length);\\r\\n\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            batch[i] = ownerOf(tokenIds[i]);\\r\\n        }\\r\\n\\r\\n        return batch;\\r\\n    }\\r\\n\\r\\n    function tokenURIBatch(uint256[] memory tokenIds) external view virtual returns (string[] memory) {\\r\\n        string[] memory batch = new string[](tokenIds.length);\\r\\n\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            batch[i] = tokenURI(tokenIds[i]);\\r\\n        }\\r\\n\\r\\n        return batch;\\r\\n    }\\r\\n\\r\\n    function getApprovedBatch(uint256[] memory tokenIds) external view virtual returns (address[] memory) {\\r\\n        address[] memory batch = new address[](tokenIds.length);\\r\\n\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            batch[i] = getApproved(tokenIds[i]);\\r\\n        }\\r\\n\\r\\n        return batch;\\r\\n    }\\r\\n\\r\\n    function tokenOfOwnerByIndexBatch(address owner_, uint256[] memory indexes) external view virtual returns (uint256[] memory) {\\r\\n        uint256[] memory batch = new uint256[](indexes.length);\\r\\n\\r\\n        for (uint256 i = 0; i < indexes.length; i++) {\\r\\n            batch[i] = tokenOfOwnerByIndex(owner_, indexes[i]);\\r\\n        }\\r\\n\\r\\n        return batch;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/F/Dropbox/Code/CCNFT/contracts/base/OwnableRecoverable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n/**\\n * This is a modified version of the standard OpenZeppelin Ownable contract that allows for a recovery address to be used to recover ownership\\n * \\n * \\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableRecoverable is Context {\\n    address private _owner;\\n\\n    // the recovery address can be used to recover ownership if the owner wallet is ever lost\\n    // it should be a cold-storage wallet stored in a vault and never used for any other operation\\n    // it should be set in the parent constructor\\n    // if ownership moves to a new organization then the recovery address should be moved too\\n    address public recovery;\\n\\n    // initializes the contract setting the deployer as the initial owner.\\n    constructor () {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrRecovery() {\\n        require(_msgSender() == owner() || _msgSender() == recovery, \\\"caller is not the owner or recovery\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwnerOrRecovery {\\n        require(newOwner != address(0), \\\"cant use 0 address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        _owner = newOwner;\\n    }   \\n\\n    // the recovery address can be changed by the owner or the recovery address\\n    function setRecovery(address newRecovery) public virtual onlyOwnerOrRecovery {   \\n        require(newRecovery != address(0), \\\"cant use 0 address\\\");\\n        recovery = newRecovery;\\n    }\\n    \\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\"; \\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recovery\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proxyRegistryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"auth\",\"type\":\"bool\"}],\"name\":\"MinterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"makerIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"takerIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"takerWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketFee\",\"type\":\"uint256\"}],\"name\":\"OfferAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"OfferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"makerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"takerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"takerWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct CryptoCities.Offer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"witnessSignature\",\"type\":\"bytes\"}],\"name\":\"acceptOffer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"makerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"takerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"takerWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct CryptoCities.Offer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getApprovedBatch\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"makerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"takerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"takerWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct CryptoCities.Offer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"checkIds\",\"type\":\"bool\"}],\"name\":\"hashOffer\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"ownerOfBatch\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pauseTrading\",\"type\":\"bool\"}],\"name\":\"pauseMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recovery\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"basisPoints\",\"type\":\"uint16\"}],\"name\":\"setMarketFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWitness\",\"type\":\"address\"}],\"name\":\"setMarketWitness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyRegistry\",\"type\":\"address\"}],\"name\":\"setProxyRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRecovery\",\"type\":\"address\"}],\"name\":\"setRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"basisPoints\",\"type\":\"uint16\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"offer_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"signerOfHash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"name\":\"tokenByIndexBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"name\":\"tokenOfOwnerByIndexBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"tokenURIBatch\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"treasuryOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"makerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"takerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"takerWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct CryptoCities.Offer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"witnessSignature\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"checkIds\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"checkTradeValid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"checkValue\",\"type\":\"uint256\"}],\"name\":\"validOffer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CryptoCities","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"100000","ConstructorArguments":"000000000000000000000000f1be63031668e26dc2112bc7208ba49d6c4df5640000000000000000000000005dd897c829b7f885f59f48115fa784e31eec9ed1000000000000000000000000a5409ec958c83c3f309868babaca7c86dcb077c1","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}