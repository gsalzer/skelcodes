{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/MetakeyDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./interfaces/IMerkleDistributor.sol\\\";\\r\\n\\r\\n\\r\\ncontract MetakeyDistributor is IMerkleDistributor, Ownable, ReentrancyGuard{\\r\\n\\r\\n    \\r\\n//  __       __             __                __                                  _______   __              __                __  __                    __                         \\r\\n// |  \\\\     /  \\\\           |  \\\\              |  \\\\                                |       \\\\ |  \\\\            |  \\\\              |  \\\\|  \\\\                  |  \\\\                        \\r\\n// | $$\\\\   /  $$  ______  _| $$_     ______  | $$   __   ______   __    __       | $$$$$$$\\\\ \\\\$$  _______  _| $$_     ______   \\\\$$| $$____   __    __  _| $$_     ______    ______  \\r\\n// | $$$\\\\ /  $$$ /      \\\\|   $$ \\\\   |      \\\\ | $$  /  \\\\ /      \\\\ |  \\\\  |  \\\\      | $$  | $$|  \\\\ /       \\\\|   $$ \\\\   /      \\\\ |  \\\\| $$    \\\\ |  \\\\  |  \\\\|   $$ \\\\   /      \\\\  /      \\\\ \\r\\n// | $$$$\\\\  $$$$|  $$$$$$\\\\\\\\$$$$$$    \\\\$$$$$$\\\\| $$_/  $$|  $$$$$$\\\\| $$  | $$      | $$  | $$| $$|  $$$$$$$ \\\\$$$$$$  |  $$$$$$\\\\| $$| $$$$$$$\\\\| $$  | $$ \\\\$$$$$$  |  $$$$$$\\\\|  $$$$$$\\\\\\r\\n// | $$\\\\$$ $$ $$| $$    $$ | $$ __  /      $$| $$   $$ | $$    $$| $$  | $$      | $$  | $$| $$ \\\\$$    \\\\   | $$ __ | $$   \\\\$$| $$| $$  | $$| $$  | $$  | $$ __ | $$  | $$| $$   \\\\$$\\r\\n// | $$ \\\\$$$| $$| $$$$$$$$ | $$|  \\\\|  $$$$$$$| $$$$$$\\\\ | $$$$$$$$| $$__/ $$      | $$__/ $$| $$ _\\\\$$$$$$\\\\  | $$|  \\\\| $$      | $$| $$__/ $$| $$__/ $$  | $$|  \\\\| $$__/ $$| $$      \\r\\n// | $$  \\\\$ | $$ \\\\$$     \\\\  \\\\$$  $$ \\\\$$    $$| $$  \\\\$$\\\\ \\\\$$     \\\\ \\\\$$    $$      | $$    $$| $$|       $$   \\\\$$  $$| $$      | $$| $$    $$ \\\\$$    $$   \\\\$$  $$ \\\\$$    $$| $$      \\r\\n//  \\\\$$      \\\\$$  \\\\$$$$$$$   \\\\$$$$   \\\\$$$$$$$ \\\\$$   \\\\$$  \\\\$$$$$$$ _\\\\$$$$$$$       \\\\$$$$$$$  \\\\$$ \\\\$$$$$$$     \\\\$$$$  \\\\$$       \\\\$$ \\\\$$$$$$$   \\\\$$$$$$     \\\\$$$$   \\\\$$$$$$  \\\\$$      \\r\\n//                                                               |  \\\\__| $$                                                                                                        \\r\\n//                                                                \\\\$$    $$                                                                                                        \\r\\n//                                                                 \\\\$$$$$$                                                                                                         \\r\\n\\r\\n\\r\\n    //token address\\r\\n    address public override token;\\r\\n    bytes32 public override merkleRoot;\\r\\n\\r\\n    //This is a packed array of booleans.\\r\\n    mapping(uint256 => mapping(uint256 => uint256)) private claimedBitMap;\\r\\n\\r\\n    uint256 public currentDropIndex = 0;\\r\\n    uint256 public deadline;\\r\\n\\r\\n    uint256 public tokenIdToTransfer;\\r\\n    address public addressToTransferFrom;\\r\\n\\r\\n    event TokenIdSet(uint id, address from, uint time);\\r\\n    event MerkleRootAndTokenSet(bytes32 root, address token);\\r\\n\\r\\n     constructor(address token_, bytes32 merkleRoot_) {\\r\\n        token = token_;\\r\\n        merkleRoot = merkleRoot_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the token id to transfer, claim deadline and address to transfer from\\r\\n     */\\r\\n    function setTransferIdAndAccount(uint _tokenIdToTransfer, uint _deadline, address _addressToTransferFrom) private {\\r\\n        require(IERC1155(token).isApprovedForAll(_addressToTransferFrom, address(this)), 'Metakey Distributor not approved to spend NFT');\\r\\n\\r\\n        tokenIdToTransfer = _tokenIdToTransfer;\\r\\n        deadline = block.timestamp + _deadline;\\r\\n        addressToTransferFrom = _addressToTransferFrom;\\r\\n\\r\\n        emit TokenIdSet(_tokenIdToTransfer, addressToTransferFrom, deadline);\\r\\n    }\\r\\n\\r\\n    function setDeadline(uint _deadline) external onlyOwner {\\r\\n        deadline = block.timestamp + _deadline;\\r\\n    }\\r\\n\\r\\n    function getSetTokenId() external view returns(uint){\\r\\n        return tokenIdToTransfer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the new merkle root\\r\\n     */\\r\\n    function setClaimConfig (address token_, bytes32 merkleRoot_, uint _tokenIdToTransfer, uint _deadline, address _addressToTransferFrom) external onlyOwner {\\r\\n        token = token_;\\r\\n        merkleRoot = merkleRoot_;\\r\\n        currentDropIndex += 1;\\r\\n        emit MerkleRootAndTokenSet(merkleRoot, token);\\r\\n        setTransferIdAndAccount(_tokenIdToTransfer, _deadline, _addressToTransferFrom);\\r\\n\\r\\n    }\\r\\n\\r\\n    function isClaimed(uint256 index) public view override returns (bool) {\\r\\n        uint256 claimedWordIndex = index / 256;\\r\\n        uint256 claimedBitIndex = index % 256;\\r\\n        uint256 claimedWord = claimedBitMap[currentDropIndex][claimedWordIndex];\\r\\n        uint256 mask = (1 << claimedBitIndex);\\r\\n        return claimedWord & mask == mask;\\r\\n    }\\r\\n\\r\\n    function _setClaimed(uint256 index) private {\\r\\n        uint256 claimedWordIndex = index / 256;\\r\\n        uint256 claimedBitIndex = index % 256;\\r\\n        claimedBitMap[currentDropIndex][claimedWordIndex] = claimedBitMap[currentDropIndex][claimedWordIndex] | (1 << claimedBitIndex);\\r\\n        \\r\\n    }\\r\\n\\r\\n\\r\\n    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external override nonReentrant{\\r\\n        require(block.timestamp <= deadline, \\\"The claiming time has passed.\\\");\\r\\n        require(IERC1155(token).balanceOf(addressToTransferFrom, tokenIdToTransfer) >= amount, 'No NFTs left');\\r\\n        require(!isClaimed(index), 'Metakey Distributor: NFT already claimed.');\\r\\n        require(account != address(0), \\\"Cannot mint to 0x0.\\\");\\r\\n\\r\\n        // Verify the merkle proof.\\r\\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\\r\\n        require(MerkleProof.verify(merkleProof, merkleRoot, node), 'Metakey Distributor: Invalid proof.');\\r\\n\\r\\n        // Mark it claimed and send the token.\\r\\n        _setClaimed(index);  \\r\\n        IERC1155(token).safeTransferFrom(addressToTransferFrom, account, tokenIdToTransfer, amount, '');\\r\\n\\r\\n        emit Claimed(index, account, amount);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IMerkleDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n// Allows anyone to claim a token if they exist in a merkle root.\\r\\ninterface IMerkleDistributor {\\r\\n    // Returns the address of the token distributed by this contract.\\r\\n    function token() external view returns (address);\\r\\n    // Returns the merkle root of the merkle tree containing account balances available to claim.\\r\\n    function merkleRoot() external view returns (bytes32);\\r\\n    // Returns true if the index has been marked claimed.\\r\\n    function isClaimed(uint256 index) external view returns (bool);\\r\\n    // Claim the given amount of the token to the given address. Reverts if the inputs are invalid.\\r\\n    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external;\\r\\n\\r\\n    // This event is triggered whenever a call to #claim succeeds.\\r\\n    event Claimed(uint256 index, address account, uint256 amount);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"MerkleRootAndTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TokenIdSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressToTransferFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDropIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSetTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdToTransfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addressToTransferFrom\",\"type\":\"address\"}],\"name\":\"setClaimConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"setDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdToTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MetakeyDistributor","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000010daa9f4c0f985430fde4959adb2c791ef2ccf834ce5a56cd9794f509a12886cbfa79a524f7fff7d93a54dfd8c8428be75a80c85","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}