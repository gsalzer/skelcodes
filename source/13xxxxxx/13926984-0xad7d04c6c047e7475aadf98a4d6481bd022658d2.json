{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-12-21\r\n*/\r\n\r\n//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC165 {\r\n\r\n\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) external;\r\n\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) external;\r\n\r\n\tfunction approve(address to, uint256 tokenId) external;\r\n\tfunction getApproved(uint256 tokenId) external view returns (address operator);\r\n\tfunction setApprovalForAll(address operator, bool _approved) external;\r\n\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId,\r\n\t\tbytes calldata data\r\n\t) external;\r\n}\r\n\r\nlibrary Strings {\r\n\r\n\tbytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n\tfunction toString(uint256 value) internal pure returns (string memory) {\r\n\t\tif (value == 0) {\r\n\t\t\treturn \"0\";\r\n\t\t}\r\n\t\tuint256 temp = value;\r\n\t\tuint256 digits;\r\n\t\twhile (temp != 0) {\r\n\t\t\tdigits++;\r\n\t\t\ttemp /= 10;\r\n\t\t}\r\n\t\tbytes memory buffer = new bytes(digits);\r\n\t\twhile (value != 0) {\r\n\t\t\tdigits -= 1;\r\n\t\t\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n\t\t\tvalue /= 10;\r\n\t\t}\r\n\t\treturn string(buffer);\r\n\t}\r\n\r\n\tfunction toHexString(uint256 value) internal pure returns (string memory) {\r\n\t\tif (value == 0) {\r\n\t\t\treturn \"0x00\";\r\n\t\t}\r\n\t\tuint256 temp = value;\r\n\t\tuint256 length = 0;\r\n\t\twhile (temp != 0) {\r\n\t\t\tlength++;\r\n\t\t\ttemp >>= 8;\r\n\t\t}\r\n\t\treturn toHexString(value, length);\r\n\t}\r\n\r\n\tfunction toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n\t\tbytes memory buffer = new bytes(2 * length + 2);\r\n\t\tbuffer[0] = \"0\";\r\n\t\tbuffer[1] = \"x\";\r\n\t\tfor (uint256 i = 2 * length + 1; i > 1; --i) {\r\n\t\t\tbuffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n\t\t\tvalue >>= 4;\r\n\t\t}\r\n\t\trequire(value == 0, \"Strings: hex length insufficient\");\r\n\t\treturn string(buffer);\r\n\t}\r\n\r\n}\r\n\r\nabstract contract Context {\r\n\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\treturn msg.data;\r\n\t}\r\n\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tconstructor() {\r\n\t\t_setOwner(_msgSender());\r\n\t}\r\n\r\n\tfunction owner() public view virtual returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\t_setOwner(address(0));\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\t_setOwner(newOwner);\r\n\t}\r\n\r\n\tfunction _setOwner(address newOwner) private {\r\n\t\taddress oldOwner = _owner;\r\n\t\t_owner = newOwner;\r\n\t\temit OwnershipTransferred(oldOwner, newOwner);\r\n\t}\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n\r\n\tuint256 private constant _NOT_ENTERED = 1;\r\n\tuint256 private constant _ENTERED = 2;\r\n\tuint256 private _status;\r\n\r\n\tconstructor() {\r\n\t\t_status = _NOT_ENTERED;\r\n\t}\r\n\r\n\tmodifier nonReentrant() {\r\n\r\n\t\trequire(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n\t\t_status = _ENTERED; _; _status = _NOT_ENTERED;\r\n\r\n\t}\r\n\r\n}\r\n\r\ninterface IERC721Receiver {\r\n\r\n\tfunction onERC721Received(\r\n\t\taddress operator,\r\n\t\taddress from,\r\n\t\tuint256 tokenId,\r\n\t\tbytes calldata data\r\n\t) external returns (bytes4);\r\n\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n}\r\n\r\nlibrary Address {\r\n\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\r\n\t\tuint256 size;\r\n\t\tassembly {\r\n\t\t\tsize := extcodesize(account)\r\n\t\t}\r\n\t\treturn size > 0;\r\n\t}\r\n\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n\t\t(bool success, ) = recipient.call{value: amount}(\"\");\r\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n\r\n\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t\treturn functionCall(target, data, \"Address: low-level call failed\");\r\n\t}\r\n\r\n\tfunction functionCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value\r\n\t) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n\t}\r\n\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.call{value: value}(data);\r\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\tfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n\t\treturn functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n\t}\r\n\r\n\tfunction functionStaticCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal view returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: static call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.staticcall(data);\r\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\tfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t\treturn functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n\t}\r\n\r\n\tfunction functionDelegateCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.delegatecall(data);\r\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\tfunction _verifyCallResult(\r\n\t\tbool success,\r\n\t\tbytes memory returndata,\r\n\t\tstring memory errorMessage\r\n\t) private pure returns (bytes memory) {\r\n\t\tif (success) {\r\n\t\t\treturn returndata;\r\n\t\t} else {\r\n\t\t\tif (returndata.length > 0) {\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trevert(errorMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n\t\treturn interfaceId == type(IERC165).interfaceId;\r\n\t}\r\n\r\n}\r\n\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n\r\n\tusing Address for address;\r\n\tusing Strings for uint256;\r\n\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\r\n\tmapping(uint256 => address) private _owners;\r\n\tmapping(address => uint256) private _balances;\r\n\tmapping(uint256 => address) private _tokenApprovals;\r\n\tmapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n\tconstructor(string memory name_, string memory symbol_) {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t}\r\n\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n\t\treturn\r\n\t\t\tinterfaceId == type(IERC721).interfaceId ||\r\n\t\t\tinterfaceId == type(IERC721Metadata).interfaceId ||\r\n\t\t\tsuper.supportsInterface(interfaceId);\r\n\t}\r\n\r\n\tfunction balanceOf(address owner) public view virtual override returns (uint256) {\r\n\t\trequire(owner != address(0), \"ERC721: balance query for the zero address\");\r\n\t\treturn _balances[owner];\r\n\t}\r\n\r\n\tfunction ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n\t\taddress owner = _owners[tokenId];\r\n\t\trequire(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n\t\treturn owner;\r\n\t}\r\n\r\n\tfunction name() public view virtual override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public view virtual override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n\t\trequire(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n\t\tstring memory baseURI = _baseURI();\r\n\t\treturn bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n\t}\r\n\r\n\tfunction _baseURI() internal view virtual returns (string memory) {\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tfunction approve(address to, uint256 tokenId) public virtual override {\r\n\t\taddress owner = ERC721.ownerOf(tokenId);\r\n\t\trequire(to != owner, \"ERC721: approval to current owner\");\r\n\r\n\t\trequire(\r\n\t\t\t_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n\t\t\t\"ERC721: approve caller is not owner nor approved for all\"\r\n\t\t);\r\n\r\n\t\t_approve(to, tokenId);\r\n\t}\r\n\r\n\tfunction getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n\t\trequire(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n\t\treturn _tokenApprovals[tokenId];\r\n\t}\r\n\r\n\tfunction setApprovalForAll(address operator, bool approved) public virtual override {\r\n\t\trequire(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n\t\t_operatorApprovals[_msgSender()][operator] = approved;\r\n\t\temit ApprovalForAll(_msgSender(), operator, approved);\r\n\t}\r\n\r\n\tfunction isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n\t\treturn _operatorApprovals[owner][operator];\r\n\t}\r\n\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) public virtual override {\r\n\t\t//solhint-disable-next-line max-line-length\r\n\t\trequire(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n\t\t_transfer(from, to, tokenId);\r\n\t}\r\n\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) public virtual override {\r\n\t\tsafeTransferFrom(from, to, tokenId, \"\");\r\n\t}\r\n\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId,\r\n\t\tbytes memory _data\r\n\t) public virtual override {\r\n\t\trequire(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\t\t_safeTransfer(from, to, tokenId, _data);\r\n\t}\r\n\r\n\tfunction _safeTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId,\r\n\t\tbytes memory _data\r\n\t) internal virtual {\r\n\t\t_transfer(from, to, tokenId);\r\n\t\trequire(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n\t}\r\n\r\n\tfunction _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n\t\treturn _owners[tokenId] != address(0);\r\n\t}\r\n\r\n\tfunction _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n\t\trequire(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n\t\taddress owner = ERC721.ownerOf(tokenId);\r\n\t\treturn (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n\t}\r\n\r\n\tfunction _safeMint(address to, uint256 tokenId) internal virtual {\r\n\t\t_safeMint(to, tokenId, \"\");\r\n\t}\r\n\r\n\tfunction _safeMint(\r\n\t\taddress to,\r\n\t\tuint256 tokenId,\r\n\t\tbytes memory _data\r\n\t) internal virtual {\r\n\t\t_mint(to, tokenId);\r\n\t\trequire(\r\n\t\t\t_checkOnERC721Received(address(0), to, tokenId, _data),\r\n\t\t\t\"ERC721: transfer to non ERC721Receiver implementer\"\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _mint(address to, uint256 tokenId) internal virtual {\r\n\t\trequire(to != address(0), \"ERC721: mint to the zero address\");\r\n\t\trequire(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n\t\t_beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n\t\t_balances[to] += 1;\r\n\t\t_owners[tokenId] = to;\r\n\r\n\t\temit Transfer(address(0), to, tokenId);\r\n\t}\r\n\r\n\tfunction _burn(uint256 tokenId) internal virtual {\r\n\t\taddress owner = ERC721.ownerOf(tokenId);\r\n\r\n\t\t_beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n\t\t// Clear approvals\r\n\t\t_approve(address(0), tokenId);\r\n\r\n\t\t_balances[owner] -= 1;\r\n\t\tdelete _owners[tokenId];\r\n\r\n\t\temit Transfer(owner, address(0), tokenId);\r\n\t}\r\n\r\n\tfunction _transfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) internal virtual {\r\n\t\trequire(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n\t\trequire(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(from, to, tokenId);\r\n\r\n\t\t_approve(address(0), tokenId);\r\n\r\n\t\t_balances[from] -= 1;\r\n\t\t_balances[to] += 1;\r\n\t\t_owners[tokenId] = to;\r\n\r\n\t\temit Transfer(from, to, tokenId);\r\n\t}\r\n\r\n\tfunction _approve(address to, uint256 tokenId) internal virtual {\r\n\t\t_tokenApprovals[tokenId] = to;\r\n\t\temit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n\t}\r\n\r\n\tfunction _checkOnERC721Received(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId,\r\n\t\tbytes memory _data\r\n\t) private returns (bool) {\r\n\t\tif (to.isContract()) {\r\n\t\t\ttry IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n\t\t\t\treturn retval == IERC721Receiver(to).onERC721Received.selector;\r\n\t\t\t} catch (bytes memory reason) {\r\n\t\t\t\tif (reason.length == 0) {\r\n\t\t\t\t\trevert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tassembly {\r\n\t\t\t\t\t\trevert(add(32, reason), mload(reason))\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _beforeTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) internal virtual {}\r\n}\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\tfunction tokenByIndex(uint256 index) external view returns (uint256);\r\n\r\n}\r\n\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n\r\n\tmapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\tmapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n\tuint256[] private _allTokens;\r\n\r\n\tmapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n\t\treturn interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n\t}\r\n\r\n\tfunction tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n\t\trequire(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n\t\treturn _ownedTokens[owner][index];\r\n\t}\r\n\r\n\tfunction totalSupply() public view virtual override returns (uint256) {\r\n\t\treturn _allTokens.length;\r\n\t}\r\n\r\n\tfunction tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n\t\trequire(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n\t\treturn _allTokens[index];\r\n\t}\r\n\r\n\tfunction _beforeTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) internal virtual override {\r\n\t\tsuper._beforeTokenTransfer(from, to, tokenId);\r\n\r\n\t\tif (from == address(0)) {\r\n\t\t\t_addTokenToAllTokensEnumeration(tokenId);\r\n\t\t} else if (from != to) {\r\n\t\t\t_removeTokenFromOwnerEnumeration(from, tokenId);\r\n\t\t}\r\n\t\tif (to == address(0)) {\r\n\t\t\t_removeTokenFromAllTokensEnumeration(tokenId);\r\n\t\t} else if (to != from) {\r\n\t\t\t_addTokenToOwnerEnumeration(to, tokenId);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n\t\tuint256 length = ERC721.balanceOf(to);\r\n\t\t_ownedTokens[to][length] = tokenId;\r\n\t\t_ownedTokensIndex[tokenId] = length;\r\n\t}\r\n\r\n\tfunction _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n\t\t_allTokensIndex[tokenId] = _allTokens.length;\r\n\t\t_allTokens.push(tokenId);\r\n\t}\r\n\r\n\tfunction _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n\r\n\t\tuint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n\t\tuint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n\t\tif (tokenIndex != lastTokenIndex) {\r\n\t\t\tuint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n\t\t\t_ownedTokens[from][tokenIndex] = lastTokenId;\r\n\t\t\t_ownedTokensIndex[lastTokenId] = tokenIndex;\r\n\t\t}\r\n\r\n\t\tdelete _ownedTokensIndex[tokenId];\r\n\t\tdelete _ownedTokens[from][lastTokenIndex];\r\n\t}\r\n\r\n\tfunction _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n\r\n\t\tuint256 lastTokenIndex = _allTokens.length - 1;\r\n\t\tuint256 tokenIndex = _allTokensIndex[tokenId];\r\n\t\tuint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n\t\t_allTokens[tokenIndex] = lastTokenId;\r\n\t\t_allTokensIndex[lastTokenId] = tokenIndex;\r\n\r\n\t\tdelete _allTokensIndex[tokenId];\r\n\t\t_allTokens.pop();\r\n\t}\r\n}\r\n\r\n\r\n\r\ncontract LarvaWolf is ERC721Enumerable, ReentrancyGuard, Ownable {\r\n\r\n\tuint256 public maxSupply = 5000;\r\n\tuint256 public price = 0.05 ether;\r\n\tuint256 public maxMint = 10;\r\n\tuint256 public numTokensMinted;\r\n\r\n\tstring[8] private baseColors = ['#AE8B61','#DBB181','#E8AA96','#FFC2C2','#EECFA0','#C9CDAF','#D5C6E1','#EAD9D9'];\r\n\tstring[7] private thirdNames = ['Smile', 'GoldTooth', 'Handlebars', 'Zombie', 'Alien', 'Punk', 'Normal'];\r\n\tstring[7] private thirdLayers = [\r\n\t\t'<path fill=\"#000\" d=\"m20 18h1v1h-1v-1z\"/>',\r\n\t\t'<path fill=\"#FFE600\" d=\"m22 19h1v1h-1v-1z\"/>',\r\n\t\t'<path fill=\"#A66E2C\" d=\"m21 18h3v1h-3v-1zm-1 1h1v2h-1v-2zm4 0h1v2h-1v-2z\" /><path fill=\"#C28946\" d=\"m20 18h1v1h-1v-1zm4 0h1v1h-1v-1z\" />',\r\n\t\t'<path fill=\"#7DA269\" d=\"m3 27h13v1h-13v-1zm1-1h13v1h-13v-1zm1-1h12v1h-12v-1zm1-1h13v1h-13v-1zm1-1h12v1h-12v-1zm2-1h10v1h-10v-1zm2-1h8v1h-8v-1zm0-1h4v1h-4v-1zm0-1h3v1h-3v-1zm0-3h2v3h-2v-3zm0-2h5v2h-5v-2zm3 2h2v3h-2v-3zm1 3h6v1h-6v-1zm1-2h9v2h-9v-2zm4-1h2v1h-2v-1zm0 4h4v1h-4v-1zm4-1h1v1h-1v-1zm1-1h1v1h-1v-1zm0-1h2v1h-2v-1zm-14-8h6v5h-6v-5zm5 5h1v1h-1v-1zm-6-11h1v4h-1v-4zm1 4h1v2h-1v-2zm5-3h1v5h-1v-5z\"/><path fill=\"#000\" fill-opacity=\".4\" d=\"m3 27h1v1h-1v-1zm2-2h1v3h-1v-3zm2-2h1v5h-1v-5zm2-1h1v6h-1v-6zm1 5h1v1h-1v-1zm1-3h8v1h-8v-1zm1 1h5v1h-5v-1zm0-13h2v1h-2v-1zm3 0h2v1h-2v-1zm-3 2h1v1h-1v-1zm3 0h1v1h-1v-1zm6 6h1v1h-1v-1z\"/><path fill=\"red\" d=\"m12 13h1v1h-1v-1zm3 0h1v1h-1v-1z\"/><path fill=\"#000\" d=\"m13 13h1v1h-1v-1zm3 0h1v1h-1v-1zm5 6h3v1h-3v-1z\"/>',\r\n\t\t'<path fill=\"#C8FBFB\" d=\"m3 27h13v1h-13v-1zm1-1h13v1h-13v-1zm1-1h12v1h-12v-1zm1-1h13v1h-13v-1zm1-1h12v1h-12v-1zm2-1h10v1h-10v-1zm2-1h8v1h-8v-1zm0-1h4v1h-4v-1zm0-1h3v1h-3v-1zm0-3h2v3h-2v-3zm0-2h5v2h-5v-2zm3 2h2v3h-2v-3zm1 3h6v1h-6v-1zm1-2h9v2h-9v-2zm4-1h2v1h-2v-1zm0 4h4v1h-4v-1zm4-1h1v1h-1v-1zm1-1h1v1h-1v-1zm0-1h2v1h-2v-1zm-14-8h6v5h-6v-5zm5 5h1v1h-1v-1zm-6-11h1v4h-1v-4zm1 4h1v2h-1v-2zm5-3h1v5h-1v-5z\"/><path fill=\"#75BDBD\" d=\"m12 12h1v1h-1v-1zm3 0h1v1h-1v-1z\"/><path fill=\"#000\" d=\"m12 13h1v1h-1v-1zm1-1h1v1h-1v-1zm2 1h1v1h-1v-1zm1-1h1v1h-1v-1zm5 7h3v1h-3v-1z\"/> <path fill=\"#9BE0E0\" d=\"m3 27h1v1h-1v-1zm2-2h1v3h-1v-3zm2-2h1v5h-1v-5zm2-1h1v6h-1v-6zm1 5h1v1h-1v-1zm1-3h8v1h-8v-1zm1 1h5v1h-5v-1zm1-12h1v1h-1v-1zm3 0h1v1h-1v-1z\"/>',\r\n\t\t'<path fill=\"#F8C8DC\" d=\"m3 27h13v1h-13v-1zm1-1h13v1h-13v-1zm1-1h12v1h-12v-1zm1-1h13v1h-13v-1zm1-1h12v1h-12v-1zm2-1h10v1h-10v-1zm2-1h8v1h-8v-1zm0-1h4v1h-4v-1zm0-1h3v1h-3v-1zm0-3h2v3h-2v-3zm0-2h5v2h-5v-2zm3 2h2v3h-2v-3zm1 3h6v1h-6v-1zm1-2h9v2h-9v-2zm4-1h2v1h-2v-1zm0 4h4v1h-4v-1zm4-1h1v1h-1v-1zm1-1h1v1h-1v-1zm0-1h2v1h-2v-1zm-14-8h6v5h-6v-5zm5 5h1v1h-1v-1zm-6-11h1v4h-1v-4zm1 4h1v2h-1v-2zm5-3h1v5h-1v-5z\" /><path fill=\"#FFC0CB\" d=\"m12 12h2v1h-2v-1zm3 0h2v1h-2v-1zm-12 15h1v1h-1v-1zm2-2h1v3h-1v-3zm2-2h1v5h-1v-5zm2-1h1v6h-1v-6zm1 5h1v1h-1v-1zm1-3h8v1h-8v-1zm1 1h5v1h-5v-1z\"/><path fill=\"#000\" d=\"m12 13h2v1h-2v-1zm3 0h2v1h-2v-1zm6 6h3v1h-3v-1z\"/>',\r\n\t\t''];\r\n\tstring[8] private fourthNames = ['3D Glasses','VR','Dizzy Eyes','Eye Patch','Classic Shades','Regular Shades','Cyclop','None'];\r\n\tstring[8] private fourthLayers = [\r\n\t\t'<path fill=\"#F0F0F0\" d=\"m10 12h8v1h-8v-1zm7 1h1v2h-1v-2zm-6 1h6v1h-6v-1zm0-1h1v1h-1v-1zm3 0h1v1h-1v-1z\" /><path fill=\"#FD3232\" d=\"m15 13h2v1h-2v-1z\" /><path fill=\"#328DFD\" d=\"m12 13h2v1h-2v-1z\" />',\r\n\t\t'<path fill=\"#000\" d=\"m12 12h5v1h-5v-1zm-1-2h7v1h-7v-1zm-1 1h1v3h-1v-3zm1 3h7v1h-7v-1zm7-3h1v3h-1v-3z\" /><path fill=\"#8D8D8D\" d=\"m11 11h1v1h-1v-1zm6 0h1v1h-1v-1zm-6 2h1v1h-1v-1zm6 0h1v1h-1v-1z\" /><path fill=\"#B4B4B4\" d=\"m12 11h5v1h-5v-1zm0 2h5v1h-5v-1zm-1-1h1v1h-1v-1zm6 0h1v1h-1v-1z\" />',\r\n\t\t'<path fill=\"#FFFFFF\" d=\"m12 12h1v1h-1v-1zm1 1h1v1h-1v-1zm2-1h1v1h-1v-1zm1 1h1v1h-1v-1z\" /><path fill=\"#8D8D8D\" d=\"m12 13h1v1h-1v-1zm1-1h1v1h-1v-1zm2 1h1v1h-1v-1zm1-1h1v1h-1v-1z\" />',\r\n\t\t'<path fill=\"#000\" d=\"m10 11h8v1h-8v-1zm2 1h2v2h-2v-2z\" />',\r\n\t\t'<path fill=\"#000\" d=\"m11 12h8v1h-8v-1zm0 1h3v1h-3v-1zm5 0h3v1h-3v-1z\" />',\r\n\t\t'<path fill=\"#000\" d=\"m10 12h8v1h-8v-1zm2 1h2v1h-2v-1zm3 0h2v1h-2v-1z\" />',\r\n\t\t'<path fill=\"#000\" d=\"m12 12h5v1h-5v-1zm-1-2h7v1h-7v-1zm-1 1h1v3h-1v-3zm1 3h7v1h-7v-1zm7-3h1v3h-1v-3z\" /><path fill=\"#8D8D8D\" d=\"m11 11h1v1h-1v-1zm6 0h1v1h-1v-1zm-6 2h1v1h-1v-1zm6 0h1v1h-1v-1z\" /><path fill=\"#B4B4B4\" d=\"m12 11h5v1h-5v-1zm0 2h5v1h-5v-1zm-1-1h1v1h-1v-1zm6 0h1v1h-1v-1z\" /><path fill=\"#FF0000\" d=\"m12 12h20v1h-20v-1z\" />',\r\n\t\t''];\r\n\tstring[14] private fifthNames = ['Beanie','Cowboy Hat','Fedora','Police Cap','Do-rag','Knitted Cap','Bandana','Frumpy Hair','Hood','Messy Hair','Cap Forward','Cap','Top Hat','None'];\r\n\tstring[14] private fifthLayers = [\r\n\t\t '<path fill=\"#3CC300\" d=\"m11 9h6v1h-6v-1z\" /><path fill=\"#0060C3\" d=\"m10 7h1v2h-1v-2zm1-1h1v2h-1v-2z\" /><path fill=\"#D60404\" d=\"m17 7h1v2h-1v-2zm-1-1h1v2h-1v-2z\" /><path fill=\"#E4EB17\" d=\"m12 6h4v2h-4v-2zm-1 2h6v1h-6v-1z\" /><path fill=\"#000\" d=\"m13 5h1v1h-1v-1z\" /><path fill=\"#0060C3\" d=\"m12 4h3v1h-3v-1z\" />',\r\n\t\t'<path fill=\"#794B11\" d=\"m8 9h12v1h-12v-1zm-1-1h14v1h-14v-1zm-1-1h1v1h-1v-1zm15 0h1v1h-1v-1zm-12-3h10v3h-10v-3zm1-1h2v1h-2v-1zm6 0h2v1h-2v-1z\" /><path fill=\"#502F05\" d=\"m9 7h10v1h-10v-1z\" />',\r\n\t   '<path fill=\"#3D2F1E\" d=\"m7 9h14v1h-14v-1zm1-1h12v1h-12v-1zm3-2h6v1h-6v-1zm1-2h4v2h-4v-2zm1-1h2v1h-2v-1z\" /><path fill=\"#000\" d=\"m10 7h8v1h-8v-1z\" />',\r\n\t\t'<path fill=\"#000\" d=\"m13 10h6v1h-6v-1zm-3-1h3v1h-3v-1zm-1-3h1v2h-1v-2zm1-1h3v1h-3v-1zm3-1h2v1h-2v-1zm2 1h3v1h-3v-1zm3 1h1v2h-1v-2zm-1 2h1v1h-1v-1zm-2 0h1v1h-1v-1zm-2 0h1v1h-1v-1zm-2 0h1v1h-1v-1zm7 1h1v1h-1v-1z\" /><path fill=\"#FFFFFF\" d=\"m10 8h1v1h-1v-1zm2 0h1v1h-1v-1zm2 0h1v1h-1v-1zm2 0h1v1h-1v-1z\" /><path fill=\"#26314A\" d=\"m13 9h5v1h-5v-1zm-3-3h8v2h-8v-2zm3-1h2v1h-2v-1z\" /><path fill=\"#FFD800\" d=\"m13 6h2v1h-2v-1z\" />',\r\n\t  '<path fill=\"#000\" d=\"m10 8h1v3h-1v-3zm1-1h1v1h-1v-1zm6 1h1v3h-1v-3zm-1 0h1v1h-1v-1zm-4-1h4v1h-4v-1z\" /><path fill=\"#4C4C4C\" d=\"m11 8h5v3h-5v-3zm5 1h1v2h-1v-2z\" /><path fill=\"#636363\" d=\"m11 9h1v1h-1v-1zm1-1h1v1h-1v-1z\" />',\r\n\t\t'<path fill=\"#000\" d=\"m9 8h1v2h-1v-2zm1-1h1v1h-1v-1zm1-1h1v1h-1v-1zm7 2h1v2h-1v-2zm-1-1h1v1h-1v-1zm-1-1h1v1h-1v-1zm-4-1h4v1h-4v-1z\" /><path fill=\"#CA4E11\" d=\"m10 8h8v2h-8v-2zm1-1h6v1h-6v-1zm1-1h4v1h-4v-1z\" /><path fill=\"#933709\" d=\"m10 8h8v1h-8v-1zm1 1h1v1h-1v-1zm2 0h1v1h-1v-1zm2 0h1v1h-1v-1zm2 0h1v1h-1v-1z\" />',\r\n\t\t'<path fill=\"#1637A4\" d=\"m11 5h6v1h-6v-1zm6 1h1v2h-1v-2zm-1 2h1v1h-1v-1zm-3 1h3v1h-3v-1zm-2-1h2v1h-2v-1zm0-2h1v1h-1v-1zm-1 1h1v1h-1v-1zm-3 1h1v1h-1v-1zm1 1h1v1h-1v-1zm1-1h1v1h-1v-1z\" /><path fill=\"#142C7C\" d=\"m8 10h1v1h-1v-1zm1-1h1v1h-1v-1zm1-1h1v1h-1v-1z\" /><path fill=\"#1A43C8\" d=\"m12 6h5v1h-5v-1zm-1 1h6v1h-6v-1zm2 1h3v1h-3v-1zm-7 0h1v1h-1v-1zm2 0h1v1h-1v-1zm-1 1h1v3h-1v-3z\" />',\r\n\t\t'<path fill=\"#000\" d=\"m14 9h1v2h-1v-2zm-5-1h1v6h-1v-6zm1 0h8v1h-8v-1zm0-1h7v1h-7v-1zm1-1h6v1h-6v-1zm1-1h4v1h-4v-1zm-2 4h8v1h-8v-1z\" /><path fill=\"#696969\" d=\"m11 7h1v1h-1v-1zm1-1h1v1h-1v-1z\" />',\r\n\t\t'<path fill=\"#000\" d=\"m7 13h3v4h-3v-4zm1 4h2v2h-2v-2zm1 2h1v2h-1v-2zm-2 0h1v3h-1v-3zm1 2h1v1h-1v-1zm-3-8h1v5h-1v-5zm1 4h1v3h-1v-3zm0-5h1v1h-1v-1zm1-1h1v1h-1v-1zm1-3h1v3h-1v-3zm1 4h1v1h-1v-1zm1-1h1v1h-1v-1zm1-2h1v2h-1v-2zm1 0h6v1h-6v-1zm-3-2h2v1h-2v-1zm1-1h1v1h-1v-1zm1-1h1v1h-1v-1zm1-1h3v1h-3v-1zm3 1h1v1h-1v-1zm1 1h1v1h-1v-1zm1 1h1v1h-1v-1zm1 1h1v1h-1v-1zm1 1h1v1h-1v-1zm1 1h1v1h-1v-1zm-2 0h1v5h-1v-5zm1 1h1v3h-1v-3zm-2 4h1v1h-1v-1zm3-1h1v1h-1v-1zm1-3h1v3h-1v-3zm-2 4h1v1h-1v-1zm-1 1h1v1h-1v-1z\" /><path fill=\"#808080\" d=\"m8 19h1v2h-1v-2zm-1-2h1v2h-1v-2zm-1-4h1v4h-1v-4zm1-1h2v1h-2v-1zm1-1h2v1h-2v-1zm1-1h2v1h-2v-1zm0-2h2v2h-2v-2zm3-3h3v4h-3v-4zm-1 1h1v3h-1v-3zm4 0h1v3h-1v-3zm1 1h1v2h-1v-2zm1 1h1v1h-1v-1zm1 1h1v1h-1v-1zm1 1h1v1h-1v-1zm1 1h1v3h-1v-3zm-1 3h1v1h-1v-1zm-1 1h1v1h-1v-1z\" /><path fill=\"#D3D3D3\" d=\"m11 7h1v1h-1v-1zm1-1h1v1h-1v-1z\" />',\r\n\t\t'<path fill=\"#000\" d=\"m14 9h1v2h-1v-2zm-2 0h1v1h-1v-1zm-2-2h6v2h-6v-2zm-1 3h3v1h-3v-1zm0-2h1v1h-1v-1zm2-2h8v1h-8v-1zm1-1h5v1h-5v-1zm5 2h2v2h-2v-2zm2 2h1v1h-1v-1zm0-4h1v2h-1v-2z\" />',\r\n\t\t'<path fill=\"#000\" d=\"m10 9h10v1h-10v-1zm3-1h1v1h-1v-1zm0-1h6v1h-6v-1zm6 1h1v2h-1v-2zm-9-1h1v3h-1v-3zm1-1h1v1h-1v-1zm6 0h1v1h-1v-1zm-5-1h5v1h-5v-1z\" /><path fill=\"#515151\" d=\"m11 7h2v2h-2v-2zm1-1h5v1h-5v-1zm2 2h5v1h-5v-1z\" /><path fill=\"#353535\" d=\"m11 7h1v1h-1v-1zm1-1h1v1h-1v-1z\" />',\r\n\t\t'<path fill=\"#8119B7\" d=\"m10 7h7v3h-7v-3zm1-1h6v1h-6v-1zm1-1h4v1h-4v-1zm5 4h4v1h-4v-1zm0-1h3v1h-3v-1z\" /><path fill=\"#B261DC\" d=\"m14 6h1v1h-1v-1zm1 1h1v1h-1v-1z\" />',\r\n\t\t'<path fill=\"#000\" d=\"m7 9h14v1h-14v-1zm1-1h12v1h-12v-1zm1-6h10v5h-10v-5zm1-1h8v1h-8v-1z\" /><path fill=\"#DC1D1D\" d=\"m9 7h10v1h-10v-1z\" />',\r\n\t\t''];\r\n\tstring[5] private sixthNames = ['Earring','Vape','Cigarette','Pipe','None'];\r\n\tstring[5] private sixthLayers = [\r\n\t\t'<path fill=\"#FFD926\" d=\"m9 5h1v1h-1v-1z\"/>',\r\n\t\t'<path fill=\"#000\" d=\"m24 18h6v1h-6v-1zm0 2h6v1h-6v-1zm6-1h1v1h-1v-1z\" /><path fill=\"#595959\" d=\"m24 19h5v1h-5v-1z\" /><path fill=\"#0040FF\" d=\"m29 19h1v1h-1v-1z\" />',\r\n\t\t'<path fill=\"#000000\" d=\"m24 18h6v1h-6v-1zm6 1h1v1h-1v-1zm-6 1h6v1h-6v-1z\" /><path fill=\"#FFFFFF\" d=\"m24 19h5v1h-5v-1z\" /><path fill=\"#E7A600\" d=\"m29 19h1v1h-1v-1z\" /><path fill=\"#D7D1D1\" d=\"m30 13h1v4h-1v-4z\" />',\r\n\t\t'<path fill=\"#000\" d=\"m22 20h1v1h-1v-1zm1 1h1v1h-1v-1zm1 1h1v1h-1v-1zm1 1h1v1h-1v-1zm1 1h3v1h-3v-1zm3-1h1v1h-1v-1zm1-2h1v2h-1v-2zm-3 0h3v1h-3v-1zm-1 1h2v1h-2v-1zm-1-1h1v1h-1v-1zm-1-1h1v1h-1v-1z\" /><path fill=\"#fff\" fill-opacity=\".4\" d=\"m29 19h1v1h-1v-1zm0-2h1v1h-1v-1zm0-2h1v1h-1v-1zm-1-2h3v1h-3v-1zm1-1h1v1h-1v-1z\" /><path fill=\"#855114\" d=\"m25 22h1v1h-1v-1zm-1-1h1v1h-1v-1zm-1-1h1v1h-1v-1zm5 2h2v1h-2v-1zm-2 1h3v1h-3v-1z\" />',\r\n\t\t''];\r\n\r\n\tstruct LarvaObject {\r\n\t\tuint256 baseColor;\r\n\t\tuint256 layerThree;\r\n\t\tuint256 layerFour;\r\n\t\tuint256 layerFive;\r\n\t\tuint256 layerSix;\r\n\t}\r\n\r\n\tfunction randomLarvaLad(uint256 tokenId) internal view returns (LarvaObject memory) {\r\n\t\t\r\n\t\tLarvaObject memory larvaLad;\r\n\r\n\t\tlarvaLad.baseColor = getBaseColor(tokenId);\r\n\t\tlarvaLad.layerThree = getLayerThree(tokenId);\r\n\t\tlarvaLad.layerFour = getLayerFour(tokenId);\r\n\t\tlarvaLad.layerFive = getLayerFive(tokenId);\r\n\t\tlarvaLad.layerSix = getLayerSix(tokenId);\r\n\r\n\t\treturn larvaLad;\r\n\t}\r\n\t\r\n\tfunction getTraits(LarvaObject memory larvaLad) internal view returns (string memory) {\r\n\t\t\r\n\t\tstring[20] memory parts;\r\n\t\t\r\n\t\tparts[0] = ', \"attributes\": [{\"trait_type\": \"Type\",\"value\": \"';\r\n\t\tif (larvaLad.layerThree == 3) {\r\n\t\t\tparts[1] = 'Zombie\"}, {\"trait_type\": \"Mouth\",\"value\": \"Zombie\"},'; \r\n\t\t}\r\n\t\tif (larvaLad.layerThree == 4) {\r\n\t\t\tparts[2] = 'Alien\"}, {\"trait_type\": \"Mouth\",\"value\": \"Alien\"},'; \r\n\t\t}\r\n\t\tif (larvaLad.layerThree == 5) {\r\n\t\t\tparts[3] = 'Ape\"}, {\"trait_type\": \"Mouth\",\"value\": \"Ape\"},'; \r\n\t\t}\r\n\t\tif (larvaLad.layerThree < 3 || larvaLad.layerThree > 5) {\r\n\t\t\tparts[4] = 'Normal\"}, {\"trait_type\": \"Mouth\",\"value\": \"';\r\n\t\t\tparts[5] = thirdNames[larvaLad.layerThree];\r\n\t\t\tparts[6] = '\"},';\r\n\t\t}\r\n\t\tparts[7] = ' {\"trait_type\": \"Eyewear\",\"value\": \"';\r\n\t\tparts[8] = fourthNames[larvaLad.layerFour];\r\n\t\tparts[9] = '\"}, {\"trait_type\": \"Headwear\",\"value\": \"';\r\n\t\tparts[10] = fifthNames[larvaLad.layerFive];\r\n\t\tparts[11] = '\"}, {\"trait_type\": \"Accessory\",\"value\": \"';\r\n\t\tparts[12] = sixthNames[larvaLad.layerSix];\r\n\t\tparts[13] = '\"}], ';\r\n\t\t\r\n\t\tstring memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7]));\r\n\t\t\t\t\t  output = string(abi.encodePacked(output, parts[8], parts[9], parts[10], parts[11], parts[12], parts[13]));\r\n\t\treturn output;\r\n\t}\r\n\r\n\tfunction random(string memory input) internal pure returns (uint256) {\r\n\t\treturn uint256(keccak256(abi.encodePacked(input)));\r\n\t}\r\n\r\n\tfunction getBaseColor(uint256 tokenId) internal pure returns (uint256) {\r\n\t\tuint256 rand = random(string(abi.encodePacked(\"BASE COLOR\", toString(tokenId))));\r\n\r\n\t\tuint256 rn1 = rand % 79;\r\n\t\tuint256 bc = 0;\r\n\r\n\t\tif (rn1 >= 10 && rn1 < 20) { bc = 1; }\r\n\t\tif (rn1 >= 20 && rn1 < 30) { bc = 2; }\r\n\t\tif (rn1 >= 30 && rn1 < 40) { bc = 3; }\r\n\t\tif (rn1 >= 40 && rn1 < 50) { bc = 4; }\r\n\t\tif (rn1 >= 50 && rn1 < 60) { bc = 5; }\r\n\t\tif (rn1 >= 60 && rn1 < 70) { bc = 6; }\r\n\t\tif (rn1 >= 70) { bc = 7; }\r\n\r\n\t\treturn bc;\r\n\t}\r\n\r\n\tfunction getLayerThree(uint256 tokenId) internal pure returns (uint256) {\r\n\t\tuint256 rand = random(string(abi.encodePacked(\"LAYER THREE\", toString(tokenId))));\r\n\r\n\t\tuint256 rn3 = rand % 170;\r\n\t\tuint256 l3 = 0;\r\n\r\n\t\tif (rn3 >= 46 && rn3 < 64) { l3 = 1; }\r\n\t\tif (rn3 >= 64 && rn3 < 81) { l3 = 2; }\r\n\t\tif (rn3 >= 81 && rn3 < 85) { l3 = 3; }\r\n\t\tif (rn3 == 85) { l3 = 4; }\r\n\t\tif (rn3 >= 86 && rn3 < 88) { l3 = 5; }\r\n\t\tif (rn3 >= 88) { l3 = 6; }\r\n\t\t\r\n\t\treturn l3;\r\n\t}\r\n\r\n\tfunction getLayerFour(uint256 tokenId) internal pure returns (uint256) {\r\n\t\tuint256 rand = random(string(abi.encodePacked(\"LAYER FOUR\", toString(tokenId))));\r\n\r\n\t\tuint256 rn4 = rand % 500;\r\n\t\tuint256 l4 = 0;\r\n\r\n\t\tif (rn4 >= 41 && rn4 < 81) { l4 = 1; }\r\n\t\tif (rn4 >= 81 && rn4 < 121) { l4 = 2; }\r\n\t\tif (rn4 >= 121 && rn4 < 161) { l4 = 3; }\r\n\t\tif (rn4 >= 161 && rn4 < 201) { l4 = 4; }\r\n\t\tif (rn4 >= 201 && rn4 < 261) { l4 = 5; }\r\n\t\tif (rn4 >= 261 && rn4 < 281) { l4 = 6; }\r\n\t\tif (rn4 >= 281) { l4 = 7; }\r\n\t\t\r\n\t\treturn l4;\r\n\t}\r\n\r\n\tfunction getLayerFive(uint256 tokenId) internal pure returns (uint256) {\r\n\t\tuint256 rand = random(string(abi.encodePacked(\"LAYER FIVE\", toString(tokenId))));\r\n\r\n\t\tuint256 rn5 = rand % 240;\r\n\t\tuint256 l5 = 0;\r\n\r\n\t\tif (rn5 >= 10 && rn5 < 20) { l5 = 1; }\r\n\t\tif (rn5 >= 20 && rn5 < 30) { l5 = 2; }\r\n\t\tif (rn5 >= 30 && rn5 < 40) { l5 = 3; }\r\n\t\tif (rn5 >= 40 && rn5 < 50) { l5 = 4; }\r\n\t\tif (rn5 >= 50 && rn5 < 60) { l5 = 5; }\r\n\t\tif (rn5 >= 60 && rn5 < 70) { l5 = 6; }\r\n\t\tif (rn5 >= 70 && rn5 < 80) { l5 = 7; }\r\n\t\tif (rn5 >= 80 && rn5 < 90) { l5 = 8; }\r\n\t\tif (rn5 >= 90 && rn5 < 100) { l5 = 9; }\r\n\t\tif (rn5 >= 100 && rn5 < 110) { l5 = 10; }\r\n\t\tif (rn5 >= 110 && rn5 < 120) { l5 = 11; }\r\n\t\tif (rn5 >= 120 && rn5 < 130) { l5 = 12; }\r\n\t\tif (rn5 >= 130) { l5 = 13; }\r\n\t\t\r\n\t\treturn l5;\r\n\t}\r\n\r\n\tfunction getLayerSix(uint256 tokenId) internal pure returns (uint256) {\r\n\t\tuint256 rand = random(string(abi.encodePacked(\"LAYER SIX\", toString(tokenId))));\r\n\r\n\t\tuint256 rn6 = rand % 120;\r\n\t\tuint256 l6 = 0;\r\n\r\n\t\tif (rn6 >= 10 && rn6 < 20) { l6 = 1; }\r\n\t\tif (rn6 >= 20 && rn6 < 30) { l6 = 2; }\r\n\t\tif (rn6 >= 30 && rn6 < 40) { l6 = 3; }\r\n\t\tif (rn6 >= 40) { l6 = 4; }\r\n\t\t\r\n\t\treturn l6;\r\n\t}\r\n\r\n\tfunction getSVG(LarvaObject memory larvaLad) internal view returns (string memory) {\r\n\t\tstring[9] memory parts;\r\n\r\n\t\tparts[0] = '<svg id=\"x\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 32 32\"><path fill=\"#638596\" d=\"M0 0h32v32H0z\"/>';\r\n\t\tparts[1] = '<path fill=\"';\r\n\t\tparts[2] = baseColors[larvaLad.baseColor];\r\n\t\tparts[3] = '\" d=\"m3 27h13v1h-13v-1zm1-1h13v1h-13v-1zm1-1h12v1h-12v-1zm1-1h13v1h-13v-1zm1-1h12v1h-12v-1zm2-1h10v1h-10v-1zm2-1h8v1h-8v-1zm0-1h4v1h-4v-1zm0-1h3v1h-3v-1zm0-3h2v3h-2v-3zm0-2h5v2h-5v-2zm3 2h2v3h-2v-3zm1 3h6v1h-6v-1zm1-2h9v2h-9v-2zm4-1h2v1h-2v-1zm0 4h4v1h-4v-1zm4-1h1v1h-1v-1zm1-1h1v1h-1v-1zm0-1h2v1h-2v-1zm-14-8h6v5h-6v-5zm5 5h1v1h-1v-1zm-6-11h1v4h-1v-4zm1 4h1v2h-1v-2zm5-3h1v5h-1v-5z\"/><path fill=\"#000\" d=\"m2 27h1v2h-1v-2zm1-1h1v1h-1v-1zm1-1h1v1h-1v-1zm1-1h1v1h-1v-1zm1-1h1v1h-1v-1zm1-1h2v1h-2v-1zm2-1h2v1h-2v-1zm1-14h1v14h-1v-14zm-1-5h1v5h-1v-5zm1 0h1v1h-1v-1zm1 1h1v4h-1v-4zm1 4h1v2h-1v-2zm1 1h3v1h-3v-1zm2-6h1v6h-1v-6zm1 0h1v2h-1v-2zm1 1h1v12h-1v-12zm-14 25h14v1h-14v-1zm13-1h1v1h-1v-1zm1-2h1v2h-1v-2zm1 0h1v1h-1v-1zm1-5h1v5h-1v-5zm-4 0h4v1h-4v-1zm-1-1h1v1h-1v-1zm-1-3h1v3h-1v-3zm3-1h1v2h-1v-2zm1 1h3v1h-3v-1zm2-1h3v1h-3v-1zm3-1h3v3h-3v-3zm3 2h3v1h-3v-1zm2 1h1v2h-1v-2zm-1 1h1v2h-1v-2zm-1 1h1v2h-1v-2zm-1 1h1v2h-1v-2zm-4 1h4v1h-4v-1zm1-2h3v1h-3v-1zm-9-6h1v1h-1v-1zm3 0h1v1h-1v-1z\" /><path fill=\"#000\" fill-opacity=\".2\" d=\"m13 13h1v1h-1v-1zm3 0h1v1h-1v-1z\"/><path fill=\"#000\" fill-opacity=\".4\" d=\"m3 27h1v1h-1v-1zm2-2h1v3h-1v-3zm2-2h1v5h-1v-5zm2-1h1v6h-1v-6zm1 5h1v1h-1v-1zm1-3h8v1h-8v-1zm1 1h5v1h-5v-1zm0-13h2v1h-2v-1zm3 0h2v1h-2v-1z\"/>';\r\n\t\tparts[4] = thirdLayers[larvaLad.layerThree];\r\n\t\tparts[5] = fourthLayers[larvaLad.layerFour];\r\n\t\tparts[6] = fifthLayers[larvaLad.layerFive];\r\n\t\tparts[7] = sixthLayers[larvaLad.layerSix];\r\n\t\tparts[8] = '<style>#x{shape-rendering: crispedges;}</style></svg>';\r\n\r\n\t\tstring memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8]));\r\n\r\n\t\treturn output;\r\n\t}\r\n\r\n\tfunction tokenURI(uint256 tokenId) override public view returns (string memory) {\r\n\t\tLarvaObject memory larvaLad = randomLarvaLad(tokenId);\r\n\t\tstring memory json = Base64.encode(bytes(string(abi.encodePacked('{\"name\": \"Larva Wolf #', toString(tokenId), '\", \"description\": \"Larva Wolves are a FREE TO MINT collection brought to you by the founders of Wolf Club 86. They are a derivative of Larva Lads. The artwork and metadata are fully on-chain and are randomly generated\"', getTraits(larvaLad), '\"image\": \"data:image/svg+xml;base64,', Base64.encode(bytes(getSVG(larvaLad))), '\"}'))));\r\n\t\tjson = string(abi.encodePacked('data:application/json;base64,', json));\r\n\t\treturn json;\r\n\t}\r\n\r\n\tfunction mint(address destination, uint256 amountOfTokens) private {\r\n\t\trequire(totalSupply() < maxSupply, \"All tokens have been minted\");\r\n\t\trequire(totalSupply() + amountOfTokens <= maxSupply, \"Minting would exceed max supply\");\r\n\t\trequire(amountOfTokens <= maxMint, \"Cannot purchase this many tokens in a transaction\");\r\n\t\trequire(amountOfTokens > 0, \"Must mint at least one token\");\r\n\t\trequire(price * amountOfTokens == msg.value, \"ETH amount is incorrect\");\r\n\r\n\t\tfor (uint256 i = 0; i < amountOfTokens; i++) {\r\n\t\t\tuint256 tokenId = numTokensMinted + 1;\r\n\t\t\t_safeMint(destination, tokenId);\r\n\t\t\tnumTokensMinted += 1;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction mintForSelf(uint256 amountOfTokens) public payable virtual {\r\n\t\tmint(_msgSender(),amountOfTokens);\r\n\t}\r\n\r\n\tfunction mintForFriend(address walletAddress, uint256 amountOfTokens) public payable virtual {\r\n\t\tmint(walletAddress,amountOfTokens);\r\n\t}\r\n\r\n\tfunction setPrice(uint256 newPrice) public onlyOwner {\r\n\t\tprice = newPrice;\r\n\t}\r\n\r\n\tfunction setMaxMint(uint256 newMaxMint) public onlyOwner {\r\n\t\tmaxMint = newMaxMint;\r\n\t}\r\n\r\n\tfunction withdrawAll() public payable onlyOwner {\r\n\t\trequire(payable(_msgSender()).send(address(this).balance));\r\n\t}\r\n\r\n\tfunction toString(uint256 value) internal pure returns (string memory) {\r\n\r\n\t\tif (value == 0) {\r\n\t\t\treturn \"0\";\r\n\t\t}\r\n\t\tuint256 temp = value;\r\n\t\tuint256 digits;\r\n\t\twhile (temp != 0) {\r\n\t\t\tdigits++;\r\n\t\t\ttemp /= 10;\r\n\t\t}\r\n\t\tbytes memory buffer = new bytes(digits);\r\n\t\twhile (value != 0) {\r\n\t\t\tdigits -= 1;\r\n\t\t\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n\t\t\tvalue /= 10;\r\n\t\t}\r\n\t\treturn string(buffer);\r\n\t}\r\n\t\r\n\tconstructor() ERC721(\"Larva Wolf\", \"LARVAWOLF\") Ownable() {}\r\n}\r\n\r\nlibrary Base64 {\r\n\tbytes internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n\tfunction encode(bytes memory data) internal pure returns (string memory) {\r\n\t\tuint256 len = data.length;\r\n\t\tif (len == 0) return \"\";\r\n\r\n\t\tuint256 encodedLen = 4 * ((len + 2) / 3);\r\n\r\n\t\tbytes memory result = new bytes(encodedLen + 32);\r\n\r\n\t\tbytes memory table = TABLE;\r\n\r\n\t\tassembly {\r\n\t\t\tlet tablePtr := add(table, 1)\r\n\t\t\tlet resultPtr := add(result, 32)\r\n\r\n\t\t\tfor {\r\n\t\t\t\tlet i := 0\r\n\t\t\t} lt(i, len) {\r\n\r\n\t\t\t} {\r\n\t\t\t\ti := add(i, 3)\r\n\t\t\t\tlet input := and(mload(add(data, i)), 0xffffff)\r\n\r\n\t\t\t\tlet out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\r\n\t\t\t\tout := shl(8, out)\r\n\t\t\t\tout := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\r\n\t\t\t\tout := shl(8, out)\r\n\t\t\t\tout := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\r\n\t\t\t\tout := shl(8, out)\r\n\t\t\t\tout := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\r\n\t\t\t\tout := shl(224, out)\r\n\r\n\t\t\t\tmstore(resultPtr, out)\r\n\r\n\t\t\t\tresultPtr := add(resultPtr, 4)\r\n\t\t\t}\r\n\r\n\t\t\tswitch mod(len, 3)\r\n\t\t\tcase 1 {\r\n\t\t\t\tmstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n\t\t\t}\r\n\t\t\tcase 2 {\r\n\t\t\t\tmstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n\t\t\t}\r\n\r\n\t\t\tmstore(result, encodedLen)\r\n\t\t}\r\n\r\n\t\treturn string(result);\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"mintForFriend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"mintForSelf\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxMint\",\"type\":\"uint256\"}],\"name\":\"setMaxMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"LarvaWolf","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://60ea47e9c05d32ad382f38078778bbc62187432af86d400309c8aeab12dfa219"}]}