{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.15\r\n# @notice A manager contract for the FarmingRewards contract.\r\n# @license MIT\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\nstruct TokenReward:\r\n    gift_token: address\r\n    scale: uint256\r\n    duration: uint256\r\n    reward_distribution: address\r\n    period_finish: uint256\r\n    reward_rate: uint256\r\n    last_update_time: uint256\r\n    reward_per_token_stored: uint256\r\n\r\n\r\ninterface FarmingRewards:\r\n    def tokenRewards(index: uint256) -> TokenReward: view\r\n    def notifyRewardAmount(index: uint256, reward: uint256): nonpayable\r\n    def setDuration(i: uint256, duration: uint256): nonpayable\r\n\r\n\r\nevent OwnershipTransferred: \r\n    previous_owner: indexed(address)\r\n    new_owner: indexed(address)\r\n\r\nevent RewardsContractSet:\r\n    rewards_contract: indexed(address)\r\n\r\nevent ERC20TokenRecovered:\r\n    token: indexed(address)\r\n    amount: uint256\r\n    recipient: indexed(address)\r\n\r\n\r\nowner: public(address)\r\nGIFT_INDEX: constant(uint256) = 1\r\nrewards_contract: public(address)\r\nldo_token: constant(address) = 0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32\r\nrewards_initializer: public(address)\r\n\r\n\r\n@external\r\ndef __init__(_rewards_contract: address, _rewards_initializer: address):\r\n    assert _rewards_contract != ZERO_ADDRESS, \"rewards contract: zero address\"\r\n    assert _rewards_initializer != ZERO_ADDRESS, \"rewards initializer: zero address\"\r\n    self.rewards_contract = _rewards_contract\r\n    log RewardsContractSet(_rewards_contract)\r\n\r\n    self.owner = msg.sender\r\n    log OwnershipTransferred(ZERO_ADDRESS, msg.sender)\r\n\r\n    self.rewards_initializer = _rewards_initializer\r\n\r\n\r\n@external\r\ndef transfer_ownership(_to: address):\r\n    \"\"\"\r\n    @notice\r\n        Changes the contract owner.\r\n        Can only be called by the current owner.\r\n    \"\"\"\r\n    old_owner: address = self.owner\r\n    assert msg.sender == old_owner, \"not permitted\"\r\n    self.owner = _to\r\n\r\n    log OwnershipTransferred(old_owner, _to)\r\n\r\n\r\n@view\r\n@internal\r\ndef _period_finish(rewards_contract: address) -> uint256:\r\n    reward: TokenReward = FarmingRewards(rewards_contract).tokenRewards(GIFT_INDEX)\r\n    return reward.period_finish\r\n\r\n\r\n@view\r\n@internal\r\ndef _is_rewards_period_finished(rewards_contract: address) -> bool:\r\n    return block.timestamp >= self._period_finish(rewards_contract)\r\n\r\n\r\n@view\r\n@external\r\ndef is_rewards_period_finished() -> bool:\r\n    \"\"\"\r\n    @notice Whether the current rewards period has finished.\r\n    \"\"\"\r\n    return self._is_rewards_period_finished(self.rewards_contract)\r\n\r\n\r\n@view\r\n@external\r\ndef period_finish() -> uint256:\r\n    return self._period_finish(self.rewards_contract)\r\n\r\n\r\n@external\r\ndef start_next_rewards_period():\r\n    \"\"\"\r\n    @notice\r\n        Starts the next rewards via calling `FarmingRewards.notifyRewardAmount()`\r\n        and transferring `ldo_token.balanceOf(self)` tokens to `FarmingRewards`.\r\n        The `FarmingRewards` contract handles all the rest on its own.\r\n        The current rewards period must be finished by this time.\r\n        First period could be started only by `self.rewards_initializer`\r\n    \"\"\"\r\n    rewards: address = self.rewards_contract\r\n\r\n    assert self._period_finish(rewards) > 0 or self.rewards_initializer == msg.sender, \"manager: not initialized\"\r\n    \r\n    amount: uint256 = ERC20(ldo_token).balanceOf(self)\r\n\r\n    assert amount != 0, \"manager: rewards disabled\"\r\n    assert self._is_rewards_period_finished(rewards), \"manager: rewards period not finished\"\r\n\r\n    assert ERC20(ldo_token).transfer(rewards, amount), \"manager: unable to transfer reward tokens\"\r\n\r\n    FarmingRewards(rewards).notifyRewardAmount(GIFT_INDEX, amount)\r\n\r\n\r\n@external\r\ndef set_rewards_period_duration(_duration: uint256):\r\n    \"\"\"\r\n    @notice\r\n        Updates period duration.  Can only be called by the owner.\r\n    \"\"\"\r\n    assert msg.sender == self.owner, \"manager: not permitted\"\r\n\r\n    FarmingRewards(self.rewards_contract).setDuration(GIFT_INDEX, _duration)\r\n\r\n\r\n@external\r\ndef recover_erc20(_token: address, _amount: uint256, _recipient: address = msg.sender):\r\n    \"\"\"\r\n    @notice\r\n        Transfers the given _amount of the given ERC20 token from self\r\n        to the recipient. Can only be called by the owner.\r\n    \"\"\"\r\n    assert msg.sender == self.owner, \"not permitted\"\r\n\r\n    if _amount != 0:\r\n        assert ERC20(_token).transfer(_recipient, _amount), \"token transfer failed\"\r\n        log ERC20TokenRecovered(_token, _amount, _recipient)","ABI":"[{\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previous_owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"new_owner\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RewardsContractSet\",\"inputs\":[{\"name\":\"rewards_contract\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ERC20TokenRecovered\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"recipient\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_rewards_contract\",\"type\":\"address\"},{\"name\":\"_rewards_initializer\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer_ownership\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"outputs\":[],\"gas\":39110},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"is_rewards_period_finished\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":11098},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"period_finish\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":6587},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"start_next_rewards_period\",\"inputs\":[],\"outputs\":[],\"gas\":27708},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_rewards_period_duration\",\"inputs\":[{\"name\":\"_duration\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":11738},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"recover_erc20\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"recover_erc20\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2568},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewards_contract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2598},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewards_initializer\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2628}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.15","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000d7012cdebf10d5b352c601563aa3a8d1795a3f520000000000000000000000003cd9f71f80ab08ea5a7dca348b5e94bc595f26a0","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}