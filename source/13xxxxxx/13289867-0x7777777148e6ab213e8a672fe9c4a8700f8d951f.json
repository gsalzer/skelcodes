{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MouseTrap2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\n\\npragma abicoder v2;\\n\\ncontract MouseTrap2 {\\n  address public immutable BLT = 0x49C838B23B0F318a52F775f65ce090615c6A5425;\\n  bool public initialized = false;\\n\\n  mapping(address => uint256) public balanceOf;\\n  uint256 public lastBlock;\\n\\n  function init() public payable {\\n    require(!initialized);\\n    initialized = true;\\n  }\\n\\n  function register() public payable {\\n    require(msg.value >= 0.1 ether, \\\"too cheap\\\");\\n    if (msg.sender == tx.origin) {\\n      sendValue(payable(BLT), msg.value);\\n\\n      return;\\n    }\\n\\n    balanceOf[msg.sender] += msg.value;\\n    lastBlock = block.number;\\n\\n    testBalance();\\n  }\\n\\n  function stealTheCheese(address mouseAddress, uint256 stakes) public {\\n    require(block.difficulty > 1000000, \\\"wat doing\\\");\\n    require(msg.sender != BLT, \\\"too mean, I would never\\\");\\n    uint256 mouseBalance = balanceOf[mouseAddress];\\n    require(mouseBalance >= stakes, \\\"no, just no\\\");\\n\\n    if (block.number == lastBlock) {\\n      springTrap(mouseAddress);\\n      return;\\n    }\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(mouseAddress)\\n    }\\n    if (size > 0) {\\n      springTrap(mouseAddress);\\n      return;\\n    }\\n\\n    uint256 currentBalance = address(this).balance;\\n    if (currentBalance % 2 == 0) {\\n      springTrap(mouseAddress);\\n      return;\\n    }\\n\\n    balanceOf[mouseAddress] = mouseBalance - stakes;\\n    sendValue(payable(mouseAddress), stakes * 2);\\n    testBalance();\\n  }\\n\\n  function testBalance() public {\\n    uint256 currentBalance = address(this).balance;\\n    if (currentBalance % 2 == 1) {\\n      sendValue(payable(tx.origin), 1);\\n    }\\n  }\\n\\n  // OpenZeppelin's sendValue function\\n  function sendValue(address payable recipient, uint256 amount) private {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n    require(\\n      success,\\n      \\\"Address: unable to send value, recipient may have reverted\\\"\\n    );\\n  }\\n\\n  function springTrap(address mouseAddress) private {\\n    sendValue(payable(BLT), balanceOf[mouseAddress]);\\n\\n    balanceOf[mouseAddress] = 0;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"BLT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mouseAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakes\",\"type\":\"uint256\"}],\"name\":\"stealTheCheese\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MouseTrap2","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}