{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Strings.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n//https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\r\nlibrary Strings {\r\n\r\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory _concatenatedString) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory _concatenatedString) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory _concatenatedString) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        uint i = 0;\r\n        for (i = 0; i < _ba.length; i++) {\r\n            babcde[k++] = _ba[i];\r\n        }\r\n        for (i = 0; i < _bb.length; i++) {\r\n            babcde[k++] = _bb[i];\r\n        }\r\n        for (i = 0; i < _bc.length; i++) {\r\n            babcde[k++] = _bc[i];\r\n        }\r\n        for (i = 0; i < _bd.length; i++) {\r\n            babcde[k++] = _bd[i];\r\n        }\r\n        for (i = 0; i < _be.length; i++) {\r\n            babcde[k++] = _be[i];\r\n        }\r\n        return string(babcde);\r\n    }\r\n\r\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = byte(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface GenArt721CoreV2 {\r\n  function isWhitelisted(address sender) external view returns (bool);\r\n  function projectIdToCurrencySymbol(uint256 _projectId) external view returns (string memory);\r\n  function projectIdToCurrencyAddress(uint256 _projectId) external view returns (address);\r\n  function projectIdToArtistAddress(uint256 _projectId) external view returns (address payable);\r\n  function projectIdToPricePerTokenInWei(uint256 _projectId) external view returns (uint256);\r\n  function projectIdToAdditionalPayee(uint256 _projectId) external view returns (address payable);\r\n  function projectIdToAdditionalPayeePercentage(uint256 _projectId) external view returns (uint256);\r\n  function projectTokenInfo(uint256 _projectId) external view returns (address, uint256, uint256, uint256, bool, address, uint256, string memory, address);\r\n  function renderProviderAddress() external view returns (address payable);\r\n  function renderProviderPercentage() external view returns (uint256);\r\n  function mint(address _to, uint256 _projectId, address _by) external returns (uint256 tokenId);\r\n}\r\n\r\ninterface ERC20 {\r\n  function balanceOf(address _owner) external view returns (uint balance);\r\n  function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n  function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n}\r\n\r\ninterface BonusContract {\r\n  function triggerBonus(address _to) external returns (bool);\r\n  function bonusIsActive() external view returns (bool);\r\n}\r\n\r\ncontract GenArt721Minter_DoodleLabs {\r\n  using SafeMath for uint256;\r\n\r\n  GenArt721CoreV2 public genArtCoreContract;\r\n\r\n  uint256 constant ONE_MILLION = 1_000_000;\r\n\r\n  address payable public ownerAddress;\r\n  uint256 public ownerPercentage;\r\n\r\n  mapping(uint256 => bool) public projectIdToBonus;\r\n  mapping(uint256 => address) public projectIdToBonusContractAddress;\r\n  mapping(uint256 => bool) public contractFilterProject;\r\n  mapping(address => mapping (uint256 => uint256)) public projectMintCounter;\r\n  mapping(uint256 => uint256) public projectMintLimit;\r\n  mapping(uint256 => bool) public projectMaxHasBeenInvoked;\r\n  mapping(uint256 => uint256) public projectMaxInvocations;\r\n\r\n  constructor(address _genArt721Address) public {\r\n    genArtCoreContract=GenArt721CoreV2(_genArt721Address);\r\n  }\r\n\r\n  function getYourBalanceOfProjectERC20(uint256 _projectId) public view returns (uint256){\r\n    uint256 balance = ERC20(genArtCoreContract.projectIdToCurrencyAddress(_projectId)).balanceOf(msg.sender);\r\n    return balance;\r\n  }\r\n\r\n  function checkYourAllowanceOfProjectERC20(uint256 _projectId) public view returns (uint256){\r\n    uint256 remaining = ERC20(genArtCoreContract.projectIdToCurrencyAddress(_projectId)).allowance(msg.sender, address(this));\r\n    return remaining;\r\n  }\r\n\r\n  function setProjectMintLimit(uint256 _projectId,uint8 _limit) public {\r\n    require(genArtCoreContract.isWhitelisted(msg.sender), \"can only be set by admin\");\r\n    projectMintLimit[_projectId] = _limit;\r\n  }\r\n\r\n  function setProjectMaxInvocations(uint256 _projectId) public {\r\n    require(genArtCoreContract.isWhitelisted(msg.sender), \"can only be set by admin\");\r\n    uint256 maxInvocations;\r\n    uint256 invocations;\r\n    ( , , invocations, maxInvocations, , , , , ) = genArtCoreContract.projectTokenInfo(_projectId);\r\n    projectMaxInvocations[_projectId] = maxInvocations;\r\n    if (invocations < maxInvocations) {\r\n        projectMaxHasBeenInvoked[_projectId] = false;\r\n    }\r\n  }\r\n\r\n  function setOwnerAddress(address payable _ownerAddress) public {\r\n    require(genArtCoreContract.isWhitelisted(msg.sender), \"can only be set by admin\");\r\n    ownerAddress = _ownerAddress;\r\n  }\r\n\r\n  function setOwnerPercentage(uint256 _ownerPercentage) public {\r\n    require(genArtCoreContract.isWhitelisted(msg.sender), \"can only be set by admin\");\r\n    ownerPercentage = _ownerPercentage;\r\n  }\r\n\r\n  function toggleContractFilter(uint256 _projectId) public {\r\n    require(genArtCoreContract.isWhitelisted(msg.sender), \"can only be set by admin\");\r\n    contractFilterProject[_projectId]=!contractFilterProject[_projectId];\r\n  }\r\n\r\n  function artistToggleBonus(uint256 _projectId) public {\r\n    require(msg.sender==genArtCoreContract.projectIdToArtistAddress(_projectId), \"can only be set by artist\");\r\n    projectIdToBonus[_projectId]=!projectIdToBonus[_projectId];\r\n  }\r\n\r\n  function artistSetBonusContractAddress(uint256 _projectId, address _bonusContractAddress) public {\r\n    require(msg.sender==genArtCoreContract.projectIdToArtistAddress(_projectId), \"can only be set by artist\");\r\n    projectIdToBonusContractAddress[_projectId]=_bonusContractAddress;\r\n  }\r\n\r\n  function purchase(uint256 _projectId) public payable returns (uint256 _tokenId) {\r\n    return purchaseTo(msg.sender, _projectId);\r\n  }\r\n\r\n  // Remove `public`` and `payable`` to prevent public use\r\n  // of the `purchaseTo`` function.\r\n  function purchaseTo(address _to, uint256 _projectId) public payable returns(uint256 _tokenId){\r\n    require(!projectMaxHasBeenInvoked[_projectId], \"Maximum number of invocations reached\");\r\n    if (keccak256(abi.encodePacked(genArtCoreContract.projectIdToCurrencySymbol(_projectId))) != keccak256(abi.encodePacked(\"ETH\"))){\r\n      require(msg.value==0, \"this project accepts a different currency and cannot accept ETH\");\r\n      require(ERC20(genArtCoreContract.projectIdToCurrencyAddress(_projectId)).allowance(msg.sender, address(this)) >= genArtCoreContract.projectIdToPricePerTokenInWei(_projectId), \"Insufficient Funds Approved for TX\");\r\n      require(ERC20(genArtCoreContract.projectIdToCurrencyAddress(_projectId)).balanceOf(msg.sender) >= genArtCoreContract.projectIdToPricePerTokenInWei(_projectId), \"Insufficient balance.\");\r\n      _splitFundsERC20(_projectId);\r\n    } else {\r\n      require(msg.value>=genArtCoreContract.projectIdToPricePerTokenInWei(_projectId), \"Must send minimum value to mint!\");\r\n      _splitFundsETH(_projectId);\r\n    }\r\n\r\n    // if contract filter is active prevent calls from another contract\r\n    if (contractFilterProject[_projectId]) require(msg.sender == tx.origin, \"No Contract Buys\");\r\n\r\n    // limit mints per address by project\r\n    if (projectMintLimit[_projectId] > 0) {\r\n        require(projectMintCounter[msg.sender][_projectId] < projectMintLimit[_projectId], \"Reached minting limit\");\r\n        projectMintCounter[msg.sender][_projectId]++;\r\n    }\r\n\r\n    uint256 tokenId = genArtCoreContract.mint(_to, _projectId, msg.sender);\r\n\r\n    // What if this overflows, since default value of uint256 is 0?\r\n    // That is intended, so that by default the minter allows infinite\r\n    // transactions, allowing the `genArtCoreContract` to stop minting\r\n    // `uint256 tokenInvocation = tokenId % ONE_MILLION;`\r\n    if (tokenId % ONE_MILLION == projectMaxInvocations[_projectId]-1){\r\n        projectMaxHasBeenInvoked[_projectId] = true;\r\n    }\r\n\r\n    if (projectIdToBonus[_projectId]){\r\n      require(BonusContract(projectIdToBonusContractAddress[_projectId]).bonusIsActive(), \"bonus must be active\");\r\n      BonusContract(projectIdToBonusContractAddress[_projectId]).triggerBonus(msg.sender);\r\n    }\r\n\r\n    return tokenId;\r\n  }\r\n\r\n  function _splitFundsETH(uint256 _projectId) internal {\r\n    if (msg.value > 0) {\r\n      uint256 pricePerTokenInWei = genArtCoreContract.projectIdToPricePerTokenInWei(_projectId);\r\n      uint256 refund = msg.value.sub(genArtCoreContract.projectIdToPricePerTokenInWei(_projectId));\r\n      if (refund > 0) {\r\n        msg.sender.transfer(refund);\r\n      }\r\n      uint256 renderProviderAmount = pricePerTokenInWei.div(100).mul(genArtCoreContract.renderProviderPercentage());\r\n      if (renderProviderAmount > 0) {\r\n        genArtCoreContract.renderProviderAddress().transfer(renderProviderAmount);\r\n      }\r\n\r\n      uint256 remainingFunds = pricePerTokenInWei.sub(renderProviderAmount);\r\n\r\n      uint256 ownerFunds = remainingFunds.div(100).mul(ownerPercentage);\r\n      if (ownerFunds > 0) {\r\n        ownerAddress.transfer(ownerFunds);\r\n      }\r\n\r\n      uint256 projectFunds = pricePerTokenInWei.sub(renderProviderAmount).sub(ownerFunds);\r\n      uint256 additionalPayeeAmount;\r\n      if (genArtCoreContract.projectIdToAdditionalPayeePercentage(_projectId) > 0) {\r\n        additionalPayeeAmount = projectFunds.div(100).mul(genArtCoreContract.projectIdToAdditionalPayeePercentage(_projectId));\r\n        if (additionalPayeeAmount > 0) {\r\n          genArtCoreContract.projectIdToAdditionalPayee(_projectId).transfer(additionalPayeeAmount);\r\n        }\r\n      }\r\n      uint256 creatorFunds = projectFunds.sub(additionalPayeeAmount);\r\n      if (creatorFunds > 0) {\r\n        genArtCoreContract.projectIdToArtistAddress(_projectId).transfer(creatorFunds);\r\n      }\r\n    }\r\n  }\r\n\r\n  function _splitFundsERC20(uint256 _projectId) internal {\r\n      uint256 pricePerTokenInWei = genArtCoreContract.projectIdToPricePerTokenInWei(_projectId);\r\n      uint256 renderProviderAmount = pricePerTokenInWei.div(100).mul(genArtCoreContract.renderProviderPercentage());\r\n      if (renderProviderAmount > 0) {\r\n        ERC20(genArtCoreContract.projectIdToCurrencyAddress(_projectId)).transferFrom(msg.sender, genArtCoreContract.renderProviderAddress(), renderProviderAmount);\r\n      }\r\n      uint256 remainingFunds = pricePerTokenInWei.sub(renderProviderAmount);\r\n\r\n      uint256 ownerFunds = remainingFunds.div(100).mul(ownerPercentage);\r\n      if (ownerFunds > 0) {\r\n        ERC20(genArtCoreContract.projectIdToCurrencyAddress(_projectId)).transferFrom(msg.sender, ownerAddress, ownerFunds);\r\n      }\r\n\r\n      uint256 projectFunds = pricePerTokenInWei.sub(renderProviderAmount).sub(ownerFunds);\r\n      uint256 additionalPayeeAmount;\r\n      if (genArtCoreContract.projectIdToAdditionalPayeePercentage(_projectId) > 0) {\r\n        additionalPayeeAmount = projectFunds.div(100).mul(genArtCoreContract.projectIdToAdditionalPayeePercentage(_projectId));\r\n        if (additionalPayeeAmount > 0) {\r\n          ERC20(genArtCoreContract.projectIdToCurrencyAddress(_projectId)).transferFrom(msg.sender, genArtCoreContract.projectIdToAdditionalPayee(_projectId), additionalPayeeAmount);\r\n        }\r\n      }\r\n      uint256 creatorFunds = projectFunds.sub(additionalPayeeAmount);\r\n      if (creatorFunds > 0) {\r\n        ERC20(genArtCoreContract.projectIdToCurrencyAddress(_projectId)).transferFrom(msg.sender, genArtCoreContract.projectIdToArtistAddress(_projectId), creatorFunds);\r\n      }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"},{\"name\":\"_limit\",\"type\":\"uint8\"}],\"name\":\"setProjectMintLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"setOwnerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerPercentage\",\"type\":\"uint256\"}],\"name\":\"setOwnerPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectMintCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"},{\"name\":\"_bonusContractAddress\",\"type\":\"address\"}],\"name\":\"artistSetBonusContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectMaxHasBeenInvoked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectMaxInvocations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"toggleContractFilter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectMintLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectIdToBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectIdToBonusContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"genArtCoreContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"purchaseTo\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"artistToggleBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"getYourBalanceOfProjectERC20\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"checkYourAllowanceOfProjectERC20\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"setProjectMaxInvocations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractFilterProject\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_genArt721Address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"GenArt721Minter_DoodleLabs","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000028f2d3805652fb5d359486dffb7d08320d403240","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://018e9db6fc87de3b4ec6751ef408a6dbf1f5884a0acfe1bee5d98f034c62d864"}]}