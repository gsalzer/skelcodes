{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.6.4 https://hardhat.org\r\n\r\n// File contracts/KoansDAOInterfaces.sol\r\n\r\n\r\n/// @title Koans DAO Logic interfaces and events\r\n\r\n// KoansDAOInterfaces.sol is a modified version of Compound Lab's GovernorBravoInterfaces.sol:\r\n// https://github.com/compound-finance/compound-protocol/blob/b9b14038612d846b83f8a009a82c38974ff2dcfe/contracts/Governance/GovernorBravoInterfaces.sol\r\n//\r\n//\r\n// MODIFICATIONS\r\n// KoansDAOEvents, KoansDAOProxyStorage, KoansDAOStorageV1 adds support for changes made by Koans DAO to GovernorBravo.sol\r\n// See KoansDAOLogicV1.sol for more details.\r\n\r\npragma solidity ^0.8.6;\r\n\r\ncontract KoansDAOEvents {\r\n    /// @notice An event emitted when a new proposal is created\r\n    event ProposalCreated(\r\n        uint256 id,\r\n        address proposer,\r\n        address[] targets,\r\n        uint256[] values,\r\n        string[] signatures,\r\n        bytes[] calldatas,\r\n        uint256 startBlock,\r\n        uint256 endBlock,\r\n        string description\r\n    );\r\n\r\n    event ProposalCreatedWithRequirements(\r\n        uint256 id,\r\n        address proposer,\r\n        address[] targets,\r\n        uint256[] values,\r\n        string[] signatures,\r\n        bytes[] calldatas,\r\n        uint256 startBlock,\r\n        uint256 endBlock,\r\n        uint256 proposalThreshold,\r\n        uint256 quorumVotes,\r\n        string description\r\n    );\r\n\r\n    /// @notice An event emitted when a vote has been cast on a proposal\r\n    /// @param voter The address which casted a vote\r\n    /// @param proposalId The proposal id which was voted on\r\n    /// @param support Support value for the vote. 0=against, 1=for, 2=abstain\r\n    /// @param votes Number of votes which were cast by the voter\r\n    /// @param reason The reason given for the vote by the voter\r\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 votes, string reason);\r\n\r\n    /// @notice An event emitted when a proposal has been canceled\r\n    event ProposalCanceled(uint256 id);\r\n\r\n    /// @notice An event emitted when a proposal has been queued in the KoansDAOExecutor\r\n    event ProposalQueued(uint256 id, uint256 eta);\r\n\r\n    /// @notice An event emitted when a proposal has been executed in the KoansDAOExecutor\r\n    event ProposalExecuted(uint256 id);\r\n\r\n    /// @notice An event emitted when a proposal has been vetoed by vetoAddress\r\n    event ProposalVetoed(uint256 id);\r\n\r\n    /// @notice An event emitted when the voting delay is set\r\n    event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\r\n\r\n    /// @notice An event emitted when the voting period is set\r\n    event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\r\n\r\n    /// @notice Emitted when implementation is changed\r\n    event NewImplementation(address oldImplementation, address newImplementation);\r\n\r\n    /// @notice Emitted when proposal threshold basis points is set\r\n    event ProposalThresholdBPSSet(uint256 oldProposalThresholdBPS, uint256 newProposalThresholdBPS);\r\n\r\n    /// @notice Emitted when quorum votes basis points is set\r\n    event QuorumVotesBPSSet(uint256 oldQuorumVotesBPS, uint256 newQuorumVotesBPS);\r\n\r\n    /// @notice Emitted when pendingAdmin is changed\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n    /// @notice Emitted when pendingAdmin is accepted, which means admin is updated\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n\r\n    /// @notice Emitted when vetoer is changed\r\n    event NewVetoer(address oldVetoer, address newVetoer);\r\n}\r\n\r\ncontract KoansDAOProxyStorage {\r\n    /// @notice Administrator for this contract\r\n    address public admin;\r\n\r\n    /// @notice Pending administrator for this contract\r\n    address public pendingAdmin;\r\n\r\n    /// @notice Active brains of Governor\r\n    address public implementation;\r\n}\r\n\r\n/**\r\n * @title Storage for Governor Bravo Delegate\r\n * @notice For future upgrades, do not change KoansDAOStorageV1. Create a new\r\n * contract which implements KoansDAOStorageV1 and following the naming convention\r\n * KoansDAOStorageVX.\r\n */\r\ncontract KoansDAOStorageV1 is KoansDAOProxyStorage {\r\n    /// @notice Vetoer who has the ability to veto any proposal\r\n    address public vetoer;\r\n\r\n    /// @notice The delay before voting on a proposal may take place, once proposed, in blocks\r\n    uint256 public votingDelay;\r\n\r\n    /// @notice The duration of voting on a proposal, in blocks\r\n    uint256 public votingPeriod;\r\n\r\n    /// @notice The basis point number of votes required in order for a voter to become a proposer. *DIFFERS from GovernerBravo\r\n    uint256 public proposalThresholdBPS;\r\n\r\n    /// @notice The basis point number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed. *DIFFERS from GovernerBravo\r\n    uint256 public quorumVotesBPS;\r\n\r\n    /// @notice The total number of proposals\r\n    uint256 public proposalCount;\r\n\r\n    /// @notice The address of the Koans DAO Executor KoansDAOExecutor\r\n    IKoansDAOExecutor public timelock;\r\n\r\n    /// @notice The address of the Koans tokens\r\n    KoansTokenLike public koans;\r\n\r\n    /// @notice The official record of all proposals ever proposed\r\n    mapping(uint256 => Proposal) public proposals;\r\n\r\n    /// @notice The latest proposal for each proposer\r\n    mapping(address => uint256) public latestProposalIds;\r\n\r\n    struct Proposal {\r\n        /// @notice Unique id for looking up a proposal\r\n        uint256 id;\r\n        /// @notice Creator of the proposal\r\n        address proposer;\r\n        /// @notice The number of votes needed to create a proposal at the time of proposal creation. *DIFFERS from GovernerBravo\r\n        uint256 proposalThreshold;\r\n        /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed at the time of proposal creation. *DIFFERS from GovernerBravo\r\n        uint256 quorumVotes;\r\n        /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\r\n        uint256 eta;\r\n        /// @notice the ordered list of target addresses for calls to be made\r\n        address[] targets;\r\n        /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n        uint256[] values;\r\n        /// @notice The ordered list of function signatures to be called\r\n        string[] signatures;\r\n        /// @notice The ordered list of calldata to be passed to each call\r\n        bytes[] calldatas;\r\n        /// @notice The block at which voting begins: holders must delegate their votes prior to this block\r\n        uint256 startBlock;\r\n        /// @notice The block at which voting ends: votes must be cast prior to this block\r\n        uint256 endBlock;\r\n        /// @notice Current number of votes in favor of this proposal\r\n        uint256 forVotes;\r\n        /// @notice Current number of votes in opposition to this proposal\r\n        uint256 againstVotes;\r\n        /// @notice Current number of votes for abstaining for this proposal\r\n        uint256 abstainVotes;\r\n        /// @notice Flag marking whether the proposal has been canceled\r\n        bool canceled;\r\n        /// @notice Flag marking whether the proposal has been vetoed\r\n        bool vetoed;\r\n        /// @notice Flag marking whether the proposal has been executed\r\n        bool executed;\r\n        /// @notice Receipts of ballots for the entire set of voters\r\n        mapping(address => Receipt) receipts;\r\n    }\r\n\r\n    /// @notice Ballot receipt record for a voter\r\n    struct Receipt {\r\n        /// @notice Whether or not a vote has been cast\r\n        bool hasVoted;\r\n        /// @notice Whether or not the voter supports the proposal or abstains\r\n        uint8 support;\r\n        /// @notice The number of votes the voter had, which were cast\r\n        uint96 votes;\r\n    }\r\n\r\n    /// @notice Possible states that a proposal may be in\r\n    enum ProposalState {\r\n        Pending,\r\n        Active,\r\n        Canceled,\r\n        Defeated,\r\n        Succeeded,\r\n        Queued,\r\n        Expired,\r\n        Executed,\r\n        Vetoed\r\n    }\r\n}\r\n\r\ninterface IKoansDAOExecutor {\r\n    function delay() external view returns (uint256);\r\n\r\n    function GRACE_PERIOD() external view returns (uint256);\r\n\r\n    function acceptAdmin() external;\r\n\r\n    function queuedTransactions(bytes32 hash) external view returns (bool);\r\n\r\n    function queueTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint256 eta\r\n    ) external returns (bytes32);\r\n\r\n    function cancelTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint256 eta\r\n    ) external;\r\n\r\n    function executeTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint256 eta\r\n    ) external payable returns (bytes memory);\r\n}\r\n\r\ninterface KoansTokenLike {\r\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint96);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/KoansDAOLogicV1.sol\r\n\r\n\r\n/// @title The Koans DAO logic version 1\r\n\r\n\r\n// KoansDAOLogicV1.sol is a modified version of Compound Lab's GovernorBravoDelegate.sol:\r\n// https://github.com/compound-finance/compound-protocol/blob/b9b14038612d846b83f8a009a82c38974ff2dcfe/contracts/Governance/GovernorBravoDelegate.sol\r\n//\r\n// MODIFICATIONS\r\n// KoansDAOLogicV1 adds:\r\n// - Proposal Threshold basis points instead of fixed number\r\n//   due to the Koan token's increasing supply\r\n//\r\n// - Quorum Votes basis points instead of fixed number\r\n//   due to the Koan token's increasing supply\r\n//\r\n// - Per proposal storing of fixed `proposalThreshold`\r\n//   and `quorumVotes` calculated using the Koan token's total supply\r\n//   at the block the proposal was created and the basis point parameters\r\n//\r\n// - `ProposalCreatedWithRequirements` event that emits `ProposalCreated` parameters with\r\n//   the addition of `proposalThreshold` and `quorumVotes`\r\n//\r\n// - Votes are counted from the block a proposal is created instead of\r\n//   the proposal's voting start block to align with the parameters\r\n//   stored with the proposal\r\n//\r\n\r\n// - Veto ability which allows `veteor` to halt any proposal at any stage unless\r\n//   the proposal is executed.\r\n//   The `veto(uint proposalId)` logic is a modified version of `cancel(uint proposalId)`\r\n//   A `vetoed` flag was added to the `Proposal` struct to support this.\r\n//\r\n// KoansDAOLogicV1 removes:\r\n// - `initialProposalId` and `_initiate()` due to this being the\r\n//   first instance of the governance contract unlike\r\n//   GovernorBravo which upgrades GovernorAlpha\r\n//\r\n// - Value passed along using `timelock.executeTransaction{value: proposal.value}`\r\n//   in `execute(uint proposalId)`. This contract should not hold funds and does not\r\n//   implement `receive()` or `fallback()` functions.\r\n//\r\n\r\npragma solidity ^0.8.6;\r\n\r\ncontract KoansDAOLogicV1 is KoansDAOStorageV1, KoansDAOEvents {\r\n    /// @notice The name of this contract\r\n    string public constant name = 'Koans DAO';\r\n\r\n    /// @notice The minimum setable proposal threshold\r\n    uint256 public constant MIN_PROPOSAL_THRESHOLD_BPS = 1; // 1 basis point or 0.01%\r\n\r\n    /// @notice The maximum setable proposal threshold\r\n    uint256 public constant MAX_PROPOSAL_THRESHOLD_BPS = 1_000; // 1,000 basis points or 10%\r\n\r\n    /// @notice The minimum setable voting period\r\n    uint256 public constant MIN_VOTING_PERIOD = 5_760; // About 24 hours\r\n\r\n    /// @notice The max setable voting period\r\n    uint256 public constant MAX_VOTING_PERIOD = 80_640; // About 2 weeks\r\n\r\n    /// @notice The min setable voting delay\r\n    uint256 public constant MIN_VOTING_DELAY = 1;\r\n\r\n    /// @notice The max setable voting delay\r\n    uint256 public constant MAX_VOTING_DELAY = 40_320; // About 1 week\r\n\r\n    /// @notice The minimum setable quorum votes basis points\r\n    uint256 public constant MIN_QUORUM_VOTES_BPS = 200; // 200 basis points or 2%\r\n\r\n    /// @notice The maximum setable quorum votes basis points\r\n    uint256 public constant MAX_QUORUM_VOTES_BPS = 2_000; // 2,000 basis points or 20%\r\n\r\n    /// @notice The maximum number of actions that can be included in a proposal\r\n    uint256 public constant proposalMaxOperations = 10; // 10 actions\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH =\r\n        keccak256('EIP712Domain(string name,uint256 chainId,address verifyingContract)');\r\n\r\n    /// @notice The EIP-712 typehash for the ballot struct used by the contract\r\n    bytes32 public constant BALLOT_TYPEHASH = keccak256('Ballot(uint256 proposalId,uint8 support)');\r\n\r\n    /**\r\n     * @notice Used to initialize the contract during delegator contructor\r\n     * @param timelock_ The address of the KoansDAOExecutor\r\n     * @param koans_ The address of the KOAN tokens\r\n     * @param vetoer_ The address allowed to unilaterally veto proposals\r\n     * @param votingPeriod_ The initial voting period\r\n     * @param votingDelay_ The initial voting delay\r\n     * @param proposalThresholdBPS_ The initial proposal threshold in basis points\r\n     * * @param quorumVotesBPS_ The initial quorum votes threshold in basis points\r\n     */\r\n    function initialize(\r\n        address timelock_,\r\n        address koans_,\r\n        address vetoer_,\r\n        uint256 votingPeriod_,\r\n        uint256 votingDelay_,\r\n        uint256 proposalThresholdBPS_,\r\n        uint256 quorumVotesBPS_\r\n    ) public virtual {\r\n        require(address(timelock) == address(0), 'KoansDAO::initialize: can only initialize once');\r\n        require(msg.sender == admin, 'KoansDAO::initialize: admin only');\r\n        require(timelock_ != address(0), 'KoansDAO::initialize: invalid timelock address');\r\n        require(koans_ != address(0), 'KoansDAO::initialize: invalid koans address');\r\n        require(\r\n            votingPeriod_ >= MIN_VOTING_PERIOD && votingPeriod_ <= MAX_VOTING_PERIOD,\r\n            'KoansDAO::initialize: invalid voting period'\r\n        );\r\n        require(\r\n            votingDelay_ >= MIN_VOTING_DELAY && votingDelay_ <= MAX_VOTING_DELAY,\r\n            'KoansDAO::initialize: invalid voting delay'\r\n        );\r\n        require(\r\n            proposalThresholdBPS_ >= MIN_PROPOSAL_THRESHOLD_BPS && proposalThresholdBPS_ <= MAX_PROPOSAL_THRESHOLD_BPS,\r\n            'KoansDAO::initialize: invalid proposal threshold'\r\n        );\r\n        require(\r\n            quorumVotesBPS_ >= MIN_QUORUM_VOTES_BPS && quorumVotesBPS_ <= MAX_QUORUM_VOTES_BPS,\r\n            'KoansDAO::initialize: invalid proposal threshold'\r\n        );\r\n\r\n        emit VotingPeriodSet(votingPeriod, votingPeriod_);\r\n        emit VotingDelaySet(votingDelay, votingDelay_);\r\n        emit ProposalThresholdBPSSet(proposalThresholdBPS, proposalThresholdBPS_);\r\n        emit QuorumVotesBPSSet(quorumVotesBPS, quorumVotesBPS_);\r\n\r\n        timelock = IKoansDAOExecutor(timelock_);\r\n        koans = KoansTokenLike(koans_);\r\n        vetoer = vetoer_;\r\n        votingPeriod = votingPeriod_;\r\n        votingDelay = votingDelay_;\r\n        proposalThresholdBPS = proposalThresholdBPS_;\r\n        quorumVotesBPS = quorumVotesBPS_;\r\n    }\r\n\r\n    struct ProposalTemp {\r\n        uint256 totalSupply;\r\n        uint256 proposalThreshold;\r\n        uint256 latestProposalId;\r\n        uint256 startBlock;\r\n        uint256 endBlock;\r\n    }\r\n\r\n    /**\r\n     * @notice Function used to propose a new proposal. Sender must have delegates above the proposal threshold\r\n     * @param targets Target addresses for proposal calls\r\n     * @param values Eth values for proposal calls\r\n     * @param signatures Function signatures for proposal calls\r\n     * @param calldatas Calldatas for proposal calls\r\n     * @param description String description of the proposal\r\n     * @return Proposal id of new proposal\r\n     */\r\n    function propose(\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        string[] memory signatures,\r\n        bytes[] memory calldatas,\r\n        string memory description\r\n    ) public returns (uint256) {\r\n\r\n        ProposalTemp memory temp;\r\n       //\r\n\r\n        temp.totalSupply = koans.totalSupply();\r\n        temp.proposalThreshold = bps2Uint(proposalThresholdBPS, temp.totalSupply);\r\n        require(\r\n            koans.getPriorVotes(msg.sender, block.number - 1) > temp.proposalThreshold,\r\n            'KoansDAO::propose: proposer votes below proposal threshold'\r\n        );\r\n\r\n        require(\r\n            targets.length == values.length &&\r\n                targets.length == signatures.length &&\r\n                targets.length == calldatas.length,\r\n            'KoansDAO::propose: proposal function information arity mismatch'\r\n        );\r\n\r\n        require(targets.length != 0, 'KoansDAO::propose: must provide actions');\r\n        require(targets.length <= proposalMaxOperations, 'KoansDAO::propose: too many actions');\r\n\r\n        temp.latestProposalId = latestProposalIds[msg.sender];\r\n        if (temp.latestProposalId != 0) {\r\n            ProposalState proposersLatestProposalState = state(temp.latestProposalId);\r\n            require(\r\n                proposersLatestProposalState != ProposalState.Active,\r\n                'KoansDAO::propose: one live proposal per proposer, found an already active proposal'\r\n            );\r\n            require(\r\n                proposersLatestProposalState != ProposalState.Pending,\r\n                'KoansDAO::propose: one live proposal per proposer, found an already pending proposal'\r\n            );\r\n        }\r\n        temp.startBlock = block.number + votingDelay;\r\n        temp.endBlock = temp.startBlock + votingPeriod;\r\n\r\n        proposalCount++;\r\n        Proposal storage newProposal = proposals[proposalCount];\r\n\r\n        newProposal.id = proposalCount;\r\n        newProposal.proposer = msg.sender;\r\n        newProposal.proposalThreshold = temp.proposalThreshold;\r\n        newProposal.quorumVotes = bps2Uint(quorumVotesBPS, temp.totalSupply);\r\n        newProposal.eta = 0;\r\n        newProposal.targets = targets;\r\n        newProposal.values = values;\r\n        newProposal.signatures = signatures;\r\n        newProposal.calldatas = calldatas;\r\n        newProposal.startBlock = temp.startBlock;\r\n        newProposal.endBlock = temp.endBlock;\r\n        newProposal.forVotes = 0;\r\n        newProposal.againstVotes = 0;\r\n        newProposal.abstainVotes = 0;\r\n        newProposal.canceled = false;\r\n        newProposal.executed = false;\r\n        newProposal.vetoed = false;\r\n\r\n        latestProposalIds[newProposal.proposer] = newProposal.id;\r\n\r\n        /// @notice Maintains backwards compatibility with GovernorBravo events\r\n        emit ProposalCreated(\r\n            newProposal.id,\r\n            msg.sender,\r\n            targets,\r\n            values,\r\n            signatures,\r\n            calldatas,\r\n            newProposal.startBlock,\r\n            newProposal.endBlock,\r\n            description\r\n        );\r\n\r\n        /// @notice Updated event with `proposalThreshold` and `quorumVotes`\r\n        emit ProposalCreatedWithRequirements(\r\n            newProposal.id,\r\n            msg.sender,\r\n            targets,\r\n            values,\r\n            signatures,\r\n            calldatas,\r\n            newProposal.startBlock,\r\n            newProposal.endBlock,\r\n            newProposal.proposalThreshold,\r\n            newProposal.quorumVotes,\r\n            description\r\n        );\r\n\r\n        return newProposal.id;\r\n    }\r\n\r\n    /**\r\n     * @notice Queues a proposal of state succeeded\r\n     * @param proposalId The id of the proposal to queue\r\n     */\r\n    function queue(uint256 proposalId) external {\r\n        require(\r\n            state(proposalId) == ProposalState.Succeeded,\r\n            'KoansDAO::queue: proposal can only be queued if it is succeeded'\r\n        );\r\n        Proposal storage proposal = proposals[proposalId];\r\n        uint256 eta = block.timestamp + timelock.delay();\r\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\r\n            queueOrRevertInternal(\r\n                proposal.targets[i],\r\n                proposal.values[i],\r\n                proposal.signatures[i],\r\n                proposal.calldatas[i],\r\n                eta\r\n            );\r\n        }\r\n        proposal.eta = eta;\r\n        emit ProposalQueued(proposalId, eta);\r\n    }\r\n\r\n    function queueOrRevertInternal(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint256 eta\r\n    ) internal {\r\n        require(\r\n            !timelock.queuedTransactions(keccak256(abi.encode(target, value, signature, data, eta))),\r\n            'KoansDAO::queueOrRevertInternal: identical proposal action already queued at eta'\r\n        );\r\n        timelock.queueTransaction(target, value, signature, data, eta);\r\n    }\r\n\r\n    /**\r\n     * @notice Executes a queued proposal if eta has passed\r\n     * @param proposalId The id of the proposal to execute\r\n     */\r\n    function execute(uint256 proposalId) external {\r\n        require(\r\n            state(proposalId) == ProposalState.Queued,\r\n            'KoansDAO::execute: proposal can only be executed if it is queued'\r\n        );\r\n        Proposal storage proposal = proposals[proposalId];\r\n        proposal.executed = true;\r\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\r\n            timelock.executeTransaction(\r\n                proposal.targets[i],\r\n                proposal.values[i],\r\n                proposal.signatures[i],\r\n                proposal.calldatas[i],\r\n                proposal.eta\r\n            );\r\n        }\r\n        emit ProposalExecuted(proposalId);\r\n    }\r\n\r\n    /**\r\n     * @notice Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold\r\n     * @param proposalId The id of the proposal to cancel\r\n     */\r\n    function cancel(uint256 proposalId) external {\r\n        require(state(proposalId) != ProposalState.Executed, 'KoansDAO::cancel: cannot cancel executed proposal');\r\n\r\n        Proposal storage proposal = proposals[proposalId];\r\n        require(\r\n            msg.sender == proposal.proposer ||\r\n                koans.getPriorVotes(proposal.proposer, block.number - 1) < proposal.proposalThreshold,\r\n            'KoansDAO::cancel: proposer above threshold'\r\n        );\r\n\r\n        proposal.canceled = true;\r\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\r\n            timelock.cancelTransaction(\r\n                proposal.targets[i],\r\n                proposal.values[i],\r\n                proposal.signatures[i],\r\n                proposal.calldatas[i],\r\n                proposal.eta\r\n            );\r\n        }\r\n\r\n        emit ProposalCanceled(proposalId);\r\n    }\r\n\r\n    /**\r\n     * @notice Vetoes a proposal only if sender is the vetoer and the proposal has not been executed.\r\n     * @param proposalId The id of the proposal to veto\r\n     */\r\n    function veto(uint256 proposalId) external {\r\n        require(vetoer != address(0), 'KoansDAO::veto: veto power burned');\r\n        require(msg.sender == vetoer, 'KoansDAO::veto: only vetoer');\r\n        require(state(proposalId) != ProposalState.Executed, 'KoansDAO::veto: cannot veto executed proposal');\r\n\r\n        Proposal storage proposal = proposals[proposalId];\r\n\r\n        proposal.vetoed = true;\r\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\r\n            timelock.cancelTransaction(\r\n                proposal.targets[i],\r\n                proposal.values[i],\r\n                proposal.signatures[i],\r\n                proposal.calldatas[i],\r\n                proposal.eta\r\n            );\r\n        }\r\n\r\n        emit ProposalVetoed(proposalId);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets actions of a proposal\r\n     * @param proposalId the id of the proposal\r\n     * @return targets\r\n     * @return values\r\n     * @return signatures\r\n     * @return calldatas\r\n     */\r\n    function getActions(uint256 proposalId)\r\n        external\r\n        view\r\n        returns (\r\n            address[] memory targets,\r\n            uint256[] memory values,\r\n            string[] memory signatures,\r\n            bytes[] memory calldatas\r\n        )\r\n    {\r\n        Proposal storage p = proposals[proposalId];\r\n        return (p.targets, p.values, p.signatures, p.calldatas);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the receipt for a voter on a given proposal\r\n     * @param proposalId the id of proposal\r\n     * @param voter The address of the voter\r\n     * @return The voting receipt\r\n     */\r\n    function getReceipt(uint256 proposalId, address voter) external view returns (Receipt memory) {\r\n        return proposals[proposalId].receipts[voter];\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the state of a proposal\r\n     * @param proposalId The id of the proposal\r\n     * @return Proposal state\r\n     */\r\n    function state(uint256 proposalId) public view returns (ProposalState) {\r\n        require(proposalCount >= proposalId, 'KoansDAO::state: invalid proposal id');\r\n        Proposal storage proposal = proposals[proposalId];\r\n        if (proposal.vetoed) {\r\n            return ProposalState.Vetoed;\r\n        } else if (proposal.canceled) {\r\n            return ProposalState.Canceled;\r\n        } else if (block.number <= proposal.startBlock) {\r\n            return ProposalState.Pending;\r\n        } else if (block.number <= proposal.endBlock) {\r\n            return ProposalState.Active;\r\n        } else if (proposal.forVotes <= proposal.againstVotes || proposal.forVotes < proposal.quorumVotes) {\r\n            return ProposalState.Defeated;\r\n        } else if (proposal.eta == 0) {\r\n            return ProposalState.Succeeded;\r\n        } else if (proposal.executed) {\r\n            return ProposalState.Executed;\r\n        } else if (block.timestamp >= proposal.eta + timelock.GRACE_PERIOD()) {\r\n            return ProposalState.Expired;\r\n        } else {\r\n            return ProposalState.Queued;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Cast a vote for a proposal\r\n     * @param proposalId The id of the proposal to vote on\r\n     * @param support The support value for the vote. 0=against, 1=for, 2=abstain\r\n     */\r\n    function castVote(uint256 proposalId, uint8 support) external {\r\n        emit VoteCast(msg.sender, proposalId, support, castVoteInternal(msg.sender, proposalId, support), '');\r\n    }\r\n\r\n    /**\r\n     * @notice Cast a vote for a proposal with a reason\r\n     * @param proposalId The id of the proposal to vote on\r\n     * @param support The support value for the vote. 0=against, 1=for, 2=abstain\r\n     * @param reason The reason given for the vote by the voter\r\n     */\r\n    function castVoteWithReason(\r\n        uint256 proposalId,\r\n        uint8 support,\r\n        string calldata reason\r\n    ) external {\r\n        emit VoteCast(msg.sender, proposalId, support, castVoteInternal(msg.sender, proposalId, support), reason);\r\n    }\r\n\r\n    /**\r\n     * @notice Cast a vote for a proposal by signature\r\n     * @dev External function that accepts EIP-712 signatures for voting on proposals.\r\n     */\r\n    function castVoteBySig(\r\n        uint256 proposalId,\r\n        uint8 support,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        bytes32 domainSeparator = keccak256(\r\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainIdInternal(), address(this))\r\n        );\r\n        bytes32 structHash = keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support));\r\n        bytes32 digest = keccak256(abi.encodePacked('\\x19\\x01', domainSeparator, structHash));\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), 'KoansDAO::castVoteBySig: invalid signature');\r\n        emit VoteCast(signatory, proposalId, support, castVoteInternal(signatory, proposalId, support), '');\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function that caries out voting logic\r\n     * @param voter The voter that is casting their vote\r\n     * @param proposalId The id of the proposal to vote on\r\n     * @param support The support value for the vote. 0=against, 1=for, 2=abstain\r\n     * @return The number of votes cast\r\n     */\r\n    function castVoteInternal(\r\n        address voter,\r\n        uint256 proposalId,\r\n        uint8 support\r\n    ) internal returns (uint96) {\r\n        require(state(proposalId) == ProposalState.Active, 'KoansDAO::castVoteInternal: voting is closed');\r\n        require(support <= 2, 'KoansDAO::castVoteInternal: invalid vote type');\r\n        Proposal storage proposal = proposals[proposalId];\r\n        Receipt storage receipt = proposal.receipts[voter];\r\n        require(receipt.hasVoted == false, 'KoansDAO::castVoteInternal: voter already voted');\r\n\r\n        /// @notice: Unlike GovernerBravo, votes are considered from the block the proposal was created in order to normalize quorumVotes and proposalThreshold metrics\r\n        uint96 votes = koans.getPriorVotes(voter, proposal.startBlock - votingDelay);\r\n\r\n        if (support == 0) {\r\n            proposal.againstVotes = proposal.againstVotes + votes;\r\n        } else if (support == 1) {\r\n            proposal.forVotes = proposal.forVotes + votes;\r\n        } else if (support == 2) {\r\n            proposal.abstainVotes = proposal.abstainVotes + votes;\r\n        }\r\n\r\n        receipt.hasVoted = true;\r\n        receipt.support = support;\r\n        receipt.votes = votes;\r\n\r\n        return votes;\r\n    }\r\n\r\n    /**\r\n     * @notice Admin function for setting the voting delay\r\n     * @param newVotingDelay new voting delay, in blocks\r\n     */\r\n    function _setVotingDelay(uint256 newVotingDelay) external {\r\n        require(msg.sender == admin, 'KoansDAO::_setVotingDelay: admin only');\r\n        require(\r\n            newVotingDelay >= MIN_VOTING_DELAY && newVotingDelay <= MAX_VOTING_DELAY,\r\n            'KoansDAO::_setVotingDelay: invalid voting delay'\r\n        );\r\n        uint256 oldVotingDelay = votingDelay;\r\n        votingDelay = newVotingDelay;\r\n\r\n        emit VotingDelaySet(oldVotingDelay, votingDelay);\r\n    }\r\n\r\n    /**\r\n     * @notice Admin function for setting the voting period\r\n     * @param newVotingPeriod new voting period, in blocks\r\n     */\r\n    function _setVotingPeriod(uint256 newVotingPeriod) external {\r\n        require(msg.sender == admin, 'KoansDAO::_setVotingPeriod: admin only');\r\n        require(\r\n            newVotingPeriod >= MIN_VOTING_PERIOD && newVotingPeriod <= MAX_VOTING_PERIOD,\r\n            'KoansDAO::_setVotingPeriod: invalid voting period'\r\n        );\r\n        uint256 oldVotingPeriod = votingPeriod;\r\n        votingPeriod = newVotingPeriod;\r\n\r\n        emit VotingPeriodSet(oldVotingPeriod, votingPeriod);\r\n    }\r\n\r\n    /**\r\n     * @notice Admin function for setting the proposal threshold basis points\r\n     * @dev newProposalThresholdBPS must be greater than the hardcoded min\r\n     * @param newProposalThresholdBPS new proposal threshold\r\n     */\r\n    function _setProposalThresholdBPS(uint256 newProposalThresholdBPS) external {\r\n        require(msg.sender == admin, 'KoansDAO::_setProposalThresholdBPS: admin only');\r\n        require(\r\n            newProposalThresholdBPS >= MIN_PROPOSAL_THRESHOLD_BPS &&\r\n                newProposalThresholdBPS <= MAX_PROPOSAL_THRESHOLD_BPS,\r\n            'KoansDAO::_setProposalThreshold: invalid proposal threshold'\r\n        );\r\n        uint256 oldProposalThresholdBPS = proposalThresholdBPS;\r\n        proposalThresholdBPS = newProposalThresholdBPS;\r\n\r\n        emit ProposalThresholdBPSSet(oldProposalThresholdBPS, proposalThresholdBPS);\r\n    }\r\n\r\n    /**\r\n     * @notice Admin function for setting the quorum votes basis points\r\n     * @dev newQuorumVotesBPS must be greater than the hardcoded min\r\n     * @param newQuorumVotesBPS new proposal threshold\r\n     */\r\n    function _setQuorumVotesBPS(uint256 newQuorumVotesBPS) external {\r\n        require(msg.sender == admin, 'KoansDAO::_setQuorumVotesBPS: admin only');\r\n        require(\r\n            newQuorumVotesBPS >= MIN_QUORUM_VOTES_BPS && newQuorumVotesBPS <= MAX_QUORUM_VOTES_BPS,\r\n            'KoansDAO::_setProposalThreshold: invalid proposal threshold'\r\n        );\r\n        uint256 oldQuorumVotesBPS = quorumVotesBPS;\r\n        quorumVotesBPS = newQuorumVotesBPS;\r\n\r\n        emit QuorumVotesBPSSet(oldQuorumVotesBPS, quorumVotesBPS);\r\n    }\r\n\r\n    /**\r\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n     * @param newPendingAdmin New pending admin.\r\n     */\r\n    function _setPendingAdmin(address newPendingAdmin) external {\r\n        // Check caller = admin\r\n        require(msg.sender == admin, 'KoansDAO::_setPendingAdmin: admin only');\r\n\r\n        // Save current value, if any, for inclusion in log\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store pendingAdmin with value newPendingAdmin\r\n        pendingAdmin = newPendingAdmin;\r\n\r\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\r\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\r\n    }\r\n\r\n    /**\r\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\r\n     * @dev Admin function for pending admin to accept role and update admin\r\n     */\r\n    function _acceptAdmin() external {\r\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\r\n        require(msg.sender == pendingAdmin && msg.sender != address(0), 'KoansDAO::_acceptAdmin: pending admin only');\r\n\r\n        // Save current values for inclusion in log\r\n        address oldAdmin = admin;\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store admin with value pendingAdmin\r\n        admin = pendingAdmin;\r\n\r\n        // Clear the pending value\r\n        pendingAdmin = address(0);\r\n\r\n        emit NewAdmin(oldAdmin, admin);\r\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\r\n    }\r\n\r\n    /**\r\n     * @notice Changes vetoer address\r\n     * @dev Vetoer function for updating vetoer address\r\n     */\r\n    function _setVetoer(address newVetoer) public {\r\n        require(msg.sender == vetoer, 'KoansDAO::_setVetoer: vetoer only');\r\n\r\n        emit NewVetoer(vetoer, newVetoer);\r\n\r\n        vetoer = newVetoer;\r\n    }\r\n\r\n    /**\r\n     * @notice Burns veto priviledges\r\n     * @dev Vetoer function destroying veto power forever\r\n     */\r\n    function _burnVetoPower() public {\r\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\r\n        require(msg.sender == vetoer, 'KoansDAO::_burnVetoPower: vetoer only');\r\n\r\n        _setVetoer(address(0));\r\n    }\r\n\r\n    /**\r\n     * @notice Current proposal threshold using Koan Total Supply\r\n     * Differs from `GovernerBravo` which uses fixed amount\r\n     */\r\n    function proposalThreshold() public view returns (uint256) {\r\n        return bps2Uint(proposalThresholdBPS, koans.totalSupply());\r\n    }\r\n\r\n    /**\r\n     * @notice Current quorum votes using Koan Total Supply\r\n     * Differs from `GovernerBravo` which uses fixed amount\r\n     */\r\n    function quorumVotes() public view returns (uint256) {\r\n        return bps2Uint(quorumVotesBPS, koans.totalSupply());\r\n    }\r\n\r\n    function bps2Uint(uint256 bps, uint256 number) internal pure returns (uint256) {\r\n        return (number * bps) / 10000;\r\n    }\r\n\r\n    function getChainIdInternal() internal view returns (uint256) {\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        return chainId;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldVetoer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVetoer\",\"type\":\"address\"}],\"name\":\"NewVetoer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quorumVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreatedWithRequirements\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProposalThresholdBPS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProposalThresholdBPS\",\"type\":\"uint256\"}],\"name\":\"ProposalThresholdBPSSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalVetoed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldQuorumVotesBPS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newQuorumVotesBPS\",\"type\":\"uint256\"}],\"name\":\"QuorumVotesBPSSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVotingDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingDelay\",\"type\":\"uint256\"}],\"name\":\"VotingDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVotingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"VotingPeriodSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PROPOSAL_THRESHOLD_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_QUORUM_VOTES_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VOTING_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VOTING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_PROPOSAL_THRESHOLD_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_QUORUM_VOTES_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_VOTING_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_VOTING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnVetoPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProposalThresholdBPS\",\"type\":\"uint256\"}],\"name\":\"_setProposalThresholdBPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newQuorumVotesBPS\",\"type\":\"uint256\"}],\"name\":\"_setQuorumVotesBPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVetoer\",\"type\":\"address\"}],\"name\":\"_setVetoer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVotingDelay\",\"type\":\"uint256\"}],\"name\":\"_setVotingDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"_setVotingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"castVoteWithReason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"internalType\":\"struct KoansDAOStorageV1.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"timelock_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"koans_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vetoer_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingDelay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalThresholdBPS_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumVotesBPS_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"koans\",\"outputs\":[{\"internalType\":\"contract KoansTokenLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestProposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalMaxOperations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalThresholdBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"vetoed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumVotesBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum KoansDAOStorageV1.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"contract IKoansDAOExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"veto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vetoer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"KoansDAOLogicV1","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a26c8d7de57e0b5d7d5d0c49139c67ec1c9a3d3a2b0a61fdbbb9f05f480870de"}]}