{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.8.9 <0.9.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ThreeChargeKings {\r\n    address private constant deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address private emptyAccount = 0x7b5B82967246A040Df465715362ECd390ead34BE;\r\n    address private devAddress = 0xA8544199b573dbeFd2a1388820B527E01C3184CA;\r\n    address private reviewerAddress = 0xcC8376Ff36424C02EbfE35f5E7C202084789B345;\r\n\r\n    address[3] private threeKings = [emptyAccount,emptyAccount,emptyAccount];\r\n\r\n    address payable private owner_;\r\n    IERC20 chargeContract;\r\n    address private chargeContractAddress;\r\n    bool private lock = false;\r\n    uint private dayCount = 1 days;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => uint) pieBonus;\r\n    mapping(address => uint) stakeBalances;\r\n    mapping(address => uint) threeKingsLockTimes;\r\n    mapping(address => uint) stakeLockTimes;\r\n\r\n    address[] balanceKeys;\r\n    uint totalAmount;\r\n    uint totalChargeStaked;\r\n\r\n    constructor(address _address) {\r\n        chargeContractAddress = _address;\r\n        chargeContract = IERC20(_address);\r\n        owner_ = payable(msg.sender);   \r\n    }\r\n\r\n    function stakeCharge(uint256 amount) external {\r\n        require(amount > 0, \"You need to deposit at least something\");\r\n        uint256 allowance = chargeContract.allowance(msg.sender, address(this));\r\n        require(allowance >= amount, \"Not enough allowance\");\r\n        require(chargeContract.transferFrom(msg.sender, address(this), amount));\r\n        require(lock == false);\r\n        lock = true;\r\n\r\n        _needsToAppend();\r\n\r\n        uint burnTax = amount / 20;\r\n        uint distributeAmount = amount / 20;\r\n        uint threeKingsTax = amount / 100;\r\n        uint devTax = amount / 100;\r\n\r\n        uint totalAmountToAdd = amount - burnTax - distributeAmount - threeKingsTax - devTax;\r\n\r\n        stakeBalances[msg.sender] += totalAmountToAdd;\r\n        totalChargeStaked += totalAmountToAdd;\r\n\r\n        stakeLockTimes[msg.sender] = block.timestamp + dayCount;\r\n\r\n        uint count = balanceKeys.length;\r\n        for (uint i=0; i < count; i++) {\r\n            if(msg.sender != balanceKeys[i]) {\r\n                uint stakePercent = _stakeFromDistribution(balanceKeys[i], distributeAmount);\r\n                pieBonus[balanceKeys[i]] += stakePercent;\r\n            }\r\n        }\r\n\r\n        lock = false;\r\n        require(chargeContract.transfer(devAddress, devTax));\r\n        require(chargeContract.transfer(deadAddress, burnTax));\r\n    }\r\n\r\n    function unStake() external {\r\n        require(totalChargeStaked > 0, \"Not enough charge staked\");\r\n        require(stakeBalances[msg.sender] > 0, \"User has nothing staked\");\r\n        require(block.timestamp > stakeLockTimes[msg.sender], \"Lock time has not expired yet\");\r\n\r\n        require(lock == false);\r\n        lock = true;\r\n\r\n        uint piBonus = (balances[msg.sender] == 0) ? pieBonus[msg.sender] : 0;\r\n        uint amountPotential = stakeBalances[msg.sender];\r\n\r\n        if(balances[msg.sender] == 0) {\r\n            pieBonus[msg.sender] = 0;\r\n        }\r\n        stakeBalances[msg.sender] = 0;\r\n        totalChargeStaked -= amountPotential;\r\n\r\n        lock = false;\r\n        require(chargeContract.transfer(msg.sender, amountPotential + piBonus));\r\n    }\r\n\r\n    receive() external payable {\r\n        require(lock == false);\r\n\r\n        uint devTax = msg.value / 400;\r\n        if(msg.value > 0) {\r\n            // there is a require in the else branch\r\n            // that we need to check before locking\r\n            // thats why its within each branch\r\n            lock = true;\r\n\r\n            threeKingsLockTimes[msg.sender] = block.timestamp + dayCount;\r\n            _handleDeposit(devTax);\r\n\r\n            lock = false;\r\n        } else {\r\n            require(balances[msg.sender] > 0);\r\n            require(block.timestamp > threeKingsLockTimes[msg.sender], \"Lock time has not expired yet\");\r\n            lock = true;\r\n\r\n            devTax = balances[msg.sender] / 400;\r\n            uint amountToSend = _handleFundsReturn(devTax);\r\n\r\n            lock = false;\r\n            \r\n            (bool sent, ) = msg.sender.call{value: amountToSend}(\"\");\r\n            require(sent, \"Failed to send Ether\");\r\n        }\r\n        uint reviewerCut = devTax / 10;\r\n        (bool sentDev, ) = devAddress.call{value: devTax - reviewerCut}(\"\");\r\n        (bool sentReviewer, ) = reviewerAddress.call{value: reviewerCut}(\"\");\r\n        require(sentDev, \"Failed to send Ether\");\r\n        require(sentReviewer, \"Failed to send Ether\");\r\n    }\r\n\r\n    function _handleDeposit(uint devTax) internal {\r\n        uint amount = msg.value - devTax;\r\n        balances[msg.sender] += amount;\r\n        totalAmount += amount;\r\n        _needsToAppend();\r\n        _updateKing();\r\n    }\r\n\r\n    function _needsToAppend() internal {\r\n        uint count = balanceKeys.length;\r\n        bool needsToAppend = true;\r\n        for (uint i=0; i < count; i++) {\r\n            if(balanceKeys[i] == msg.sender) {\r\n                needsToAppend = false;\r\n                break;\r\n            }\r\n        }\r\n        if(needsToAppend) {\r\n            balanceKeys.push(msg.sender);\r\n        }\r\n    }\r\n\r\n    function _handleFundsReturn(uint devTax) internal returns (uint) {\r\n        uint amountToRedistribute = _sendTokenAmount() / 20;\r\n        uint potential = _sendTokenAmount() - amountToRedistribute;\r\n\r\n        uint amountToSend = balances[msg.sender] - devTax;\r\n        balances[msg.sender] = 0;\r\n        totalAmount -= amountToSend;\r\n        totalAmount -= devTax;\r\n\r\n        if(isThreeKing(msg.sender)) {\r\n            uint balanceKeysCount = balanceKeys.length;\r\n            if(balanceKeysCount > 3) {\r\n                balanceKeysCount -= 3;\r\n            } else if(balanceKeysCount == 0) {\r\n                lock = false;\r\n                require(false, \"Balance keys need to exist\");\r\n            }\r\n\r\n            uint sliceOfPie = amountToRedistribute / balanceKeysCount;\r\n                uint count = balanceKeys.length;\r\n                for (uint i=0; i < count; i++) {\r\n                    if(threeKings[0] != balanceKeys[i]\r\n                    && threeKings[1] != balanceKeys[i]\r\n                    && threeKings[2] != balanceKeys[i]) {\r\n                        pieBonus[balanceKeys[i]] += sliceOfPie;\r\n                    }\r\n                }\r\n        } else {\r\n            uint sliceOfPie = amountToRedistribute / 3;\r\n            for (uint i=0; i < 3; i++) {\r\n                if(threeKings[i] == emptyAccount) {\r\n                    continue;\r\n                }\r\n                pieBonus[threeKings[i]] += sliceOfPie;\r\n            }\r\n        }\r\n\r\n        uint piBonusForUser = pieBonus[msg.sender];\r\n        pieBonus[msg.sender] = 0;\r\n        uint chargeToPayout = potential + piBonusForUser;\r\n        uint amountToBurn = chargeToPayout / 20;\r\n\r\n        _resetKing();\r\n\r\n        if(chargeToPayout <= totalThreeChargeKingBalance()) {\r\n            // we unlock twice if we hit this branch\r\n            // never want to leave the contract in a locked state\r\n            lock = false;\r\n            require(chargeContract.transfer(deadAddress, amountToBurn));\r\n            require(chargeContract.transfer(msg.sender, chargeToPayout - amountToBurn));\r\n        }\r\n        return amountToSend;\r\n    }\r\n\r\n    function _updateKing() internal {\r\n        uint amount = balances[msg.sender];\r\n        uint oldKingOne = balances[threeKings[0]];\r\n        uint oldKingTwo = balances[threeKings[1]];\r\n        uint oldKingThree = balances[threeKings[2]];\r\n\r\n        if(oldKingOne < amount) {\r\n            threeKings[2] = threeKings[1];\r\n            threeKings[1] = threeKings[0];\r\n            threeKings[0] = msg.sender;\r\n        } else if(oldKingTwo < amount) {\r\n            threeKings[2] = threeKings[1];\r\n            threeKings[1] = msg.sender;\r\n        } else if(oldKingThree < amount) {\r\n            threeKings[2] = msg.sender;\r\n        }\r\n    }\r\n\r\n    function _resetKing() internal {\r\n        uint count = balanceKeys.length;\r\n        uint rollingCurrentBalance;\r\n        address currentAddressToReplace = emptyAccount;\r\n        for (uint i=0; i < count; i++) {\r\n            if(threeKings[0] != balanceKeys[i]\r\n               && threeKings[1] != balanceKeys[i]\r\n               && threeKings[2] != balanceKeys[i]\r\n               && balances[balanceKeys[i]] > rollingCurrentBalance) {\r\n                   rollingCurrentBalance = balances[balanceKeys[i]];\r\n                   currentAddressToReplace = balanceKeys[i];\r\n               }\r\n        }\r\n        \r\n        if(threeKings[0] == msg.sender) {\r\n            threeKings[0] = threeKings[1];\r\n            threeKings[1] = threeKings[2];\r\n            threeKings[2] = currentAddressToReplace;\r\n        } else if(threeKings[1] == msg.sender) {\r\n            threeKings[1] = threeKings[2];\r\n            threeKings[2] = currentAddressToReplace;\r\n        } else if(threeKings[2] == msg.sender) {\r\n            threeKings[2] = currentAddressToReplace;\r\n        }\r\n    }\r\n\r\n    function updateChargeContract(address newAddress) external {\r\n        require(msg.sender == owner_, \"You are not the owner\");\r\n\r\n        chargeContractAddress = newAddress;\r\n        chargeContract = IERC20(newAddress);\r\n        uint count = balanceKeys.length;\r\n        for(uint i = 0; i < count; i++) {\r\n            pieBonus[balanceKeys[i]] = 0;\r\n            stakeBalances[balanceKeys[i]] = 0;\r\n            stakeLockTimes[balanceKeys[i]] = 0;\r\n            threeKingsLockTimes[balanceKeys[i]] = 0;\r\n        }\r\n    }\r\n\r\n    function getTokens(address tokenAddress) external {\r\n        require(msg.sender == owner_, \"You are not the owner\");\r\n        require(tokenAddress != chargeContractAddress, \"Sorry bro that would be unfair\");\r\n        \r\n        IERC20 found = IERC20(tokenAddress);\r\n        uint256 contract_token_balance = found.balanceOf(address(this));\r\n        require(contract_token_balance != 0);\r\n        require(found.transfer(owner_, contract_token_balance));\r\n    }\r\n\r\n    function _stakeFromDistribution(address forAddress, uint distributeAmount) view internal returns (uint) {\r\n        if(totalChargeStaked == 0) return 0;\r\n        return (stakeBalances[forAddress] * distributeAmount) / totalChargeStaked;\r\n    }\r\n\r\n    function _sendTokenAmount() view internal returns (uint) {\r\n        if(totalThreeChargeKingBalance() > 0) {\r\n            uint potential;\r\n            if(threeKings[0] == msg.sender) {\r\n                potential = totalThreeChargeKingBalance() / 2;\r\n            } else if(threeKings[1] == msg.sender || threeKings[2] == msg.sender) {\r\n                potential = totalThreeChargeKingBalance() / 4;\r\n            } else {\r\n                potential = totalThreeChargeKingBalance() / 2000;\r\n            }\r\n            return potential;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function isThreeKing(address addressInQuestion) view public returns (bool) {\r\n        bool isKing = false;\r\n        for (uint i=0; i < 3; i++) {\r\n            if(threeKings[i] == addressInQuestion) {\r\n                isKing = true;\r\n                break;\r\n            }\r\n        }\r\n        return isKing;\r\n    }\r\n\r\n    function totalThreeChargeKingBalance() view public returns (uint) {\r\n        return chargeContract.balanceOf(address(this)) - totalChargeStaked;\r\n    }\r\n\r\n    function totalEthBalance() view public returns (uint) {\r\n        return totalAmount;\r\n    }\r\n\r\n    function ethForAddress(address forAddress) view public returns (uint) {\r\n        return balances[forAddress];\r\n    }\r\n\r\n    function chargeForAddress(address toFind) view public returns (uint) {\r\n        return stakeBalances[toFind];\r\n    }\r\n\r\n    function pieBonusForAddress(address forAddress) view public returns (uint) {\r\n        return pieBonus[forAddress];\r\n    }\r\n\r\n    function firstKing() view public returns (address) {\r\n        return threeKings[0];\r\n    }\r\n\r\n    function secondKing() view public returns (address) {\r\n        return threeKings[1];\r\n    }\r\n\r\n    function thirdKing() view public returns (address) {\r\n        return threeKings[2];\r\n    }\r\n\r\n    function firstKingBalance() view public returns (uint) {\r\n        return balances[threeKings[0]];\r\n    }\r\n\r\n    function secondKingBalance() view public returns (uint) {\r\n        return balances[threeKings[1]];\r\n    }\r\n\r\n    function thirdKingBalance() view public returns (uint) {\r\n        return balances[threeKings[2]];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFind\",\"type\":\"address\"}],\"name\":\"chargeForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"}],\"name\":\"ethForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstKing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstKingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressInQuestion\",\"type\":\"address\"}],\"name\":\"isThreeKing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"}],\"name\":\"pieBonusForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondKing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondKingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeCharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thirdKing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thirdKingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalThreeChargeKingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateChargeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ThreeChargeKings","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000235a4fa8374fd49bb2f01ac953f99748756f3bd","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://aeddb2b11ecf4a2a27206c2239b31ffd71ee7a66167033171c03641b0dbbe01c"}]}