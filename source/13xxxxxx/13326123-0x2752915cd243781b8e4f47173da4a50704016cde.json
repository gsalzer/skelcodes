{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nafter.contracts/src/active/Nafter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\r\\nimport \\\"./INafter.sol\\\";\\r\\nimport \\\"./INafterMarketAuction.sol\\\";\\r\\nimport \\\"./IMarketplaceSettings.sol\\\";\\r\\nimport \\\"./INafterRoyaltyRegistry.sol\\\";\\r\\nimport \\\"./INafterTokenCreatorRegistry.sol\\\";\\r\\n\\r\\n/**\\r\\n * Nafter core contract.\\r\\n */\\r\\n\\r\\ncontract Nafter is\\r\\n  Initializable,\\r\\n  ERC1155Upgradeable,\\r\\n  EIP712Upgradeable,\\r\\n  OwnableUpgradeable,\\r\\n  AccessControlUpgradeable,\\r\\n  INafter\\r\\n{\\r\\n  struct TokenInfo {\\r\\n    uint256 tokenId;\\r\\n    address creator;\\r\\n    uint256 tokenAmount;\\r\\n    address[] owners;\\r\\n    uint8 serviceFee;\\r\\n    uint256 creationTime;\\r\\n  }\\r\\n\\r\\n  struct TokenOwnerInfo {\\r\\n    bool isForSale;\\r\\n    uint8 priceType; // 0 for fixed, 1 for Auction dates range, 2 for Auction Infinity\\r\\n    uint256[] prices;\\r\\n    uint256[] bids;\\r\\n    address[] bidders;\\r\\n  }\\r\\n\\r\\n  // mapping of token info\\r\\n  mapping(uint256 => TokenInfo) public tokenInfo;\\r\\n  mapping(uint256 => mapping(address => TokenOwnerInfo)) public tokenOwnerInfo;\\r\\n\\r\\n  mapping(uint256 => bool) public tokenIdsAvailable;\\r\\n\\r\\n  uint256[] public tokenIds;\\r\\n  uint256 public maxId;\\r\\n  bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n\\r\\n  // market auction to set the price\\r\\n  INafterMarketAuction public marketAuction;\\r\\n  IMarketplaceSettings public marketplaceSettings;\\r\\n  INafterRoyaltyRegistry public royaltyRegistry;\\r\\n  INafterTokenCreatorRegistry public tokenCreatorRegistry;\\r\\n  // Mapping from account to operator approvals\\r\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n  // Event indicating metadata was updated.\\r\\n  event AddNewToken(address user, uint256 tokenId);\\r\\n  event DeleteTokens(address user, uint256 tokenId, uint256 amount);\\r\\n\\r\\n  function __Nafter_init(string memory _uri) public initializer {\\r\\n    __Ownable_init();\\r\\n    __ERC1155_init(_uri);\\r\\n    __AccessControl_init();\\r\\n    __EIP712_init(\\\"NafterNFT\\\", \\\"1.1.0\\\");\\r\\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n  }\\r\\n\\r\\n  function supportsInterface(bytes4 interfaceId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override(ERC1155Upgradeable, AccessControlUpgradeable)\\r\\n    returns (bool)\\r\\n  {\\r\\n    return super.supportsInterface(interfaceId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC1155-setApprovalForAll}.\\r\\n   */\\r\\n  function setApprovalForAll(address operator, bool approved) public override {\\r\\n    require(_msgSender() != operator, \\\"Approval self\\\");\\r\\n    _operatorApprovals[_msgSender()][operator] = approved;\\r\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC1155-setApprovalForAll}. by NafterMarketAuction\\r\\n   */\\r\\n  function setApprovalForAllByNMA(\\r\\n    address _creator,\\r\\n    address _operator,\\r\\n    bool _approved\\r\\n  ) external override {\\r\\n    require(_msgSender() == address(marketAuction), \\\"nma\\\");\\r\\n    _operatorApprovals[_creator][_operator] = _approved;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC1155-isApprovedForAll}.\\r\\n   */\\r\\n  function isApprovedForAll(address account, address operator) public view override returns (bool) {\\r\\n    return _operatorApprovals[account][operator];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the creator of the token\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @return address of the creator\\r\\n   */\\r\\n  function creatorOfToken(uint256 _tokenId) external view override returns (address payable) {\\r\\n    return payable(tokenInfo[_tokenId].creator);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the token amount\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   */\\r\\n  function getTokenAmount(uint256 _tokenId) external view returns (uint256) {\\r\\n    return tokenInfo[_tokenId].tokenAmount;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the owners\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   */\\r\\n  function getOwners(uint256 _tokenId) external view override returns (address[] memory owners) {\\r\\n    return tokenInfo[_tokenId].owners;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the Service Fee\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @return get the service fee\\r\\n   */\\r\\n  function getServiceFee(uint256 _tokenId) external view override returns (uint8) {\\r\\n    return tokenInfo[_tokenId].serviceFee;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the creation time\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   */\\r\\n  function getCreationTime(uint256 _tokenId) external view returns (uint256) {\\r\\n    return tokenInfo[_tokenId].creationTime;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the is for sale\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function getIsForSale(uint256 _tokenId, address _owner) external view override returns (bool) {\\r\\n    return tokenOwnerInfo[_tokenId][_owner].isForSale;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the price type\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _owner address of the token owner\\r\\n   * @return get the price type\\r\\n   */\\r\\n  function getPriceType(uint256 _tokenId, address _owner) external view override returns (uint8) {\\r\\n    return tokenOwnerInfo[_tokenId][_owner].priceType;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the prices\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function getPrices(uint256 _tokenId, address _owner) external view returns (uint256[] memory prices) {\\r\\n    return tokenOwnerInfo[_tokenId][_owner].prices;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the bids\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function getBids(uint256 _tokenId, address _owner) external view returns (uint256[] memory bids) {\\r\\n    return tokenOwnerInfo[_tokenId][_owner].bids;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the bidders\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function getBidders(uint256 _tokenId, address _owner) external view returns (address[] memory bidders) {\\r\\n    return tokenOwnerInfo[_tokenId][_owner].bidders;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev get tokenIds length\\r\\n   */\\r\\n  function getTokenIdsLength() external view override returns (uint256) {\\r\\n    return tokenIds.length;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev get token Id\\r\\n   * @param _index uint256 index\\r\\n   */\\r\\n\\r\\n  function getTokenId(uint256 _index) external view override returns (uint256) {\\r\\n    return tokenIds[_index];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev get owner tokens\\r\\n   * @param _owner address of owner.\\r\\n   */\\r\\n\\r\\n  function getOwnerTokens(address _owner)\\r\\n    public\\r\\n    view\\r\\n    returns (TokenInfo[] memory tokens, TokenOwnerInfo[] memory ownerInfo)\\r\\n  {\\r\\n    uint256 totalValues;\\r\\n    //calculate totalValues\\r\\n    for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n      TokenInfo memory info = tokenInfo[tokenIds[i]];\\r\\n      if (info.owners[info.owners.length - 1] == _owner) {\\r\\n        totalValues++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    TokenInfo[] memory values = new TokenInfo[](totalValues);\\r\\n    TokenOwnerInfo[] memory valuesOwner = new TokenOwnerInfo[](totalValues);\\r\\n    for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n      uint256 tokenId = tokenIds[i];\\r\\n      TokenInfo memory info = tokenInfo[tokenId];\\r\\n      if (info.owners[info.owners.length - 1] == _owner) {\\r\\n        values[i] = info;\\r\\n        valuesOwner[i] = tokenOwnerInfo[tokenId][_owner];\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return (values, valuesOwner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev get token paging\\r\\n   * @param _offset offset of the records.\\r\\n   * @param _limit limits of the records.\\r\\n   */\\r\\n  function getTokensPaging(uint256 _offset, uint256 _limit)\\r\\n    public\\r\\n    view\\r\\n    returns (\\r\\n      TokenInfo[] memory tokens,\\r\\n      uint256 nextOffset,\\r\\n      uint256 total\\r\\n    )\\r\\n  {\\r\\n    uint256 tokenInfoLength = tokenIds.length;\\r\\n    if (_limit == 0) {\\r\\n      _limit = 1;\\r\\n    }\\r\\n\\r\\n    if (_limit > tokenInfoLength - _offset) {\\r\\n      _limit = tokenInfoLength - _offset;\\r\\n    }\\r\\n\\r\\n    TokenInfo[] memory values = new TokenInfo[](_limit);\\r\\n    for (uint256 i = 0; i < _limit; i++) {\\r\\n      uint256 tokenId = tokenIds[_offset + i];\\r\\n      values[i] = tokenInfo[tokenId];\\r\\n    }\\r\\n\\r\\n    return (values, _offset + _limit, tokenInfoLength);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Checks that the token was owned by the sender.\\r\\n   * @param _tokenId uint256 ID of the token.\\r\\n   */\\r\\n  function _onlyTokenOwner(uint256 _tokenId) internal view {\\r\\n    uint256 balance = balanceOf(msg.sender, _tokenId);\\r\\n    require(balance > 0, \\\"owner\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Checks that the token was created by the sender.\\r\\n   * @param _tokenId uint256 ID of the token.\\r\\n   */\\r\\n  function _onlyTokenCreator(uint256 _tokenId) internal view {\\r\\n    address creator = tokenInfo[_tokenId].creator;\\r\\n    require(creator == msg.sender, \\\"creator\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev restore data from old contract, only call by owner\\r\\n   * @param _oldAddress address of old contract.\\r\\n   * @param _startIndex start index of array\\r\\n   * @param _endIndex end index of array\\r\\n   */\\r\\n  function restore(\\r\\n    address _oldAddress,\\r\\n    uint256 _startIndex,\\r\\n    uint256 _endIndex\\r\\n  ) external onlyOwner {\\r\\n    Nafter oldContract = Nafter(_oldAddress);\\r\\n\\r\\n    for (uint256 i = _startIndex; i < _endIndex; i++) {\\r\\n      uint256 tokenId = oldContract.getTokenId(i);\\r\\n      tokenIds.push(tokenId);\\r\\n      tokenInfo[tokenId] = TokenInfo(\\r\\n        tokenId,\\r\\n        oldContract.creatorOfToken(tokenId),\\r\\n        oldContract.getTokenAmount(tokenId),\\r\\n        oldContract.getOwners(tokenId),\\r\\n        oldContract.getServiceFee(tokenId),\\r\\n        oldContract.getCreationTime(tokenId)\\r\\n      );\\r\\n\\r\\n      address[] memory owners = tokenInfo[tokenId].owners;\\r\\n      for (uint256 j = 0; j < owners.length; j++) {\\r\\n        address owner = owners[j];\\r\\n        tokenOwnerInfo[tokenId][owner] = TokenOwnerInfo(\\r\\n          oldContract.getIsForSale(tokenId, owner),\\r\\n          oldContract.getPriceType(tokenId, owner),\\r\\n          oldContract.getPrices(tokenId, owner),\\r\\n          oldContract.getBids(tokenId, owner),\\r\\n          oldContract.getBidders(tokenId, owner)\\r\\n        );\\r\\n\\r\\n        uint256 ownerBalance = oldContract.balanceOf(owner, tokenId);\\r\\n        if (ownerBalance > 0) {\\r\\n          _mint(owner, tokenId, ownerBalance, \\\"\\\");\\r\\n        }\\r\\n      }\\r\\n      tokenIdsAvailable[tokenId] = true;\\r\\n    }\\r\\n    maxId = oldContract.maxId();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev update or mint token Amount only from token creator.\\r\\n   * @param _tokenAmount token Amount\\r\\n   * @param _tokenId uint256 id of the token.\\r\\n   */\\r\\n  function setTokenAmount(uint256 _tokenAmount, uint256 _tokenId) external {\\r\\n    _onlyTokenCreator(_tokenId);\\r\\n    tokenInfo[_tokenId].tokenAmount = tokenInfo[_tokenId].tokenAmount + _tokenAmount;\\r\\n    _mint(msg.sender, _tokenId, _tokenAmount, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev update is for sale only from token Owner.\\r\\n   * @param _isForSale is For Sale\\r\\n   * @param _tokenId uint256 id of the token.\\r\\n   */\\r\\n  function setIsForSale(bool _isForSale, uint256 _tokenId) external {\\r\\n    _onlyTokenOwner(_tokenId);\\r\\n    tokenOwnerInfo[_tokenId][msg.sender].isForSale = _isForSale;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev update is for sale only from token Owner.\\r\\n   * @param _priceType set the price type\\r\\n   * @param _price price of the token\\r\\n   * @param _startTime start time of bid, pass 0 of _priceType is not 1\\r\\n   * @param _endTime end time of bid, pass 0 of _priceType is not 1\\r\\n   * @param _tokenId uint256 id of the token.\\r\\n   * @param _owner owner of the token\\r\\n   * @param _paymentMode 0 for ETH/BNB, 1 for NAFT\\r\\n   */\\r\\n  function putOnSale(\\r\\n    uint8 _priceType,\\r\\n    uint256 _price,\\r\\n    uint256 _startTime,\\r\\n    uint256 _endTime,\\r\\n    uint256 _tokenId,\\r\\n    address _owner,\\r\\n    uint8 _paymentMode\\r\\n  ) external {\\r\\n    _onlyTokenOwner(_tokenId);\\r\\n    _putOnSale(_owner, _priceType, _price, _startTime, _endTime, _tokenId, _paymentMode);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev remove token from sale\\r\\n   * @param _tokenId uint256 id of the token.\\r\\n   * @param _owner owner of the token\\r\\n   */\\r\\n  function removeFromSale(uint256 _tokenId, address _owner) external override {\\r\\n    uint256 balance = balanceOf(msg.sender, _tokenId);\\r\\n    require(balance > 0 || msg.sender == address(marketAuction), \\\"nma\\\");\\r\\n\\r\\n    tokenOwnerInfo[_tokenId][_owner].isForSale = false;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev update price type from token Owner.\\r\\n   * @param _priceType price type\\r\\n   * @param _tokenId uint256 id of the token.\\r\\n   */\\r\\n  function setPriceType(uint8 _priceType, uint256 _tokenId) external {\\r\\n    _onlyTokenOwner(_tokenId);\\r\\n    tokenOwnerInfo[_tokenId][msg.sender].priceType = _priceType;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev set marketAuction address to set the sale price\\r\\n   * @param _marketAuction address of market auction.\\r\\n   * @param _marketplaceSettings address of market auction.\\r\\n   */\\r\\n  function setMarketAddresses(\\r\\n    address _marketAuction,\\r\\n    address _marketplaceSettings,\\r\\n    address _tokenCreatorRegistry,\\r\\n    address _royaltyRegistry\\r\\n  ) external onlyOwner {\\r\\n    marketAuction = INafterMarketAuction(_marketAuction);\\r\\n    marketplaceSettings = IMarketplaceSettings(_marketplaceSettings);\\r\\n    tokenCreatorRegistry = INafterTokenCreatorRegistry(_tokenCreatorRegistry);\\r\\n    royaltyRegistry = INafterRoyaltyRegistry(_royaltyRegistry);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev update price only from auction.\\r\\n   * @param _price price of the token\\r\\n   * @param _tokenId uint256 id of the token.\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function setPrice(\\r\\n    uint256 _price,\\r\\n    uint256 _tokenId,\\r\\n    address _owner\\r\\n  ) external override {\\r\\n    require(msg.sender == address(marketAuction), \\\"nma\\\");\\r\\n    TokenOwnerInfo storage info = tokenOwnerInfo[_tokenId][_owner];\\r\\n    info.prices.push(_price);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev update bids only from auction.\\r\\n   * @param _bid bid Amount\\r\\n   * @param _bidder bidder address\\r\\n   * @param _tokenId uint256 id of the token.\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function setBid(\\r\\n    uint256 _bid,\\r\\n    address _bidder,\\r\\n    uint256 _tokenId,\\r\\n    address _owner\\r\\n  ) external override {\\r\\n    require(msg.sender == address(marketAuction), \\\"nma\\\");\\r\\n    TokenOwnerInfo storage info = tokenOwnerInfo[_tokenId][_owner];\\r\\n    info.bids.push(_bid);\\r\\n    info.bidders.push(_bidder);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev add token and set the price.\\r\\n   * @param _price price of the item.\\r\\n   * @param _tokenAmount total token amount available\\r\\n   * @param _isForSale if is for sale\\r\\n   * @param _priceType 0 is for fixed, 1 is for Auction Time bound, 2 is for Auction Infinite\\r\\n   * @param _royaltyPercentage royalty percentage of creator\\r\\n   * @param _startTime start time of bid, pass 0 of _priceType is not 1\\r\\n   * @param _endTime end time of bid, pass 0 of _priceType is not 1\\r\\n   * @param _tokenId uint256 ID of the token.\\r\\n   * @param _paymentMode 0 for ETH/BNB, 1 for NAFT\\r\\n   */\\r\\n  function addNewTokenAndSetThePriceWithId(\\r\\n    uint256 _tokenAmount,\\r\\n    bool _isForSale,\\r\\n    uint256 _price,\\r\\n    uint8 _priceType,\\r\\n    uint8 _royaltyPercentage,\\r\\n    uint256 _startTime,\\r\\n    uint256 _endTime,\\r\\n    uint256 _tokenId,\\r\\n    uint8 _paymentMode\\r\\n  ) public {\\r\\n    uint256 tokenId = _createTokenWithId(\\r\\n      msg.sender,\\r\\n      _tokenAmount,\\r\\n      _isForSale,\\r\\n      _price,\\r\\n      _priceType,\\r\\n      _royaltyPercentage,\\r\\n      _tokenId,\\r\\n      msg.sender\\r\\n    );\\r\\n    _putOnSale(msg.sender, _priceType, _price, _startTime, _endTime, tokenId, _paymentMode);\\r\\n\\r\\n    emit AddNewToken(msg.sender, tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev add token and set the price.\\r\\n   * @param _price price of the item.\\r\\n   * @param _tokenAmount total token amount available\\r\\n   * @param _isForSale if is for sale\\r\\n   * @param _priceType 0 is for fixed, 1 is for Auction Time bound, 2 is for Auction Infinite\\r\\n   * @param _royaltyPercentage royalty percentage of creator\\r\\n   * @param _tokenId uint256 ID of the token.\\r\\n   * @param _creator address of the creator\\r\\n   * @param _minter address of minter\\r\\n   */\\r\\n  function addNewTokenAndSetThePriceWithIdAndMinter(\\r\\n    uint256 _tokenAmount,\\r\\n    bool _isForSale,\\r\\n    uint256 _price,\\r\\n    uint8 _priceType,\\r\\n    uint8 _royaltyPercentage,\\r\\n    uint256 _tokenId,\\r\\n    address _creator,\\r\\n    address _minter\\r\\n  ) external override onlyRole(MINTER_ROLE) {\\r\\n    _createTokenWithId(_creator, _tokenAmount, _isForSale, _price, _priceType, _royaltyPercentage, _tokenId, _minter);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Deletes the token with the provided ID.\\r\\n   * @param _tokenId uint256 ID of the token.\\r\\n   * @param _amount amount of the token to delete\\r\\n   */\\r\\n  function deleteToken(uint256 _tokenId, uint256 _amount) public {\\r\\n    _onlyTokenOwner(_tokenId);\\r\\n    bool activeBid = marketAuction.hasTokenActiveBid(_tokenId, msg.sender);\\r\\n    uint256 balance = balanceOf(msg.sender, _tokenId);\\r\\n    //2\\r\\n    if (activeBid == true) require(balance - _amount > 0, \\\"active bid\\\");\\r\\n    _burn(msg.sender, _tokenId, _amount);\\r\\n    DeleteTokens(msg.sender, _tokenId, _amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev internal function to put on sale.\\r\\n   * @param _priceType set the price type\\r\\n   * @param _price price of the token\\r\\n   * @param _startTime start time of bid, pass 0 of _priceType is not 1\\r\\n   * @param _endTime end time of bid, pass 0 of _priceType is not 1\\r\\n   * @param _owner owner of the token\\r\\n   * @param _tokenId uint256 id of the token.\\r\\n   * @param _paymentMode 0 for ETH/BNB, 1 for NAFT\\r\\n   */\\r\\n  function _putOnSale(\\r\\n    address _owner,\\r\\n    uint8 _priceType,\\r\\n    uint256 _price,\\r\\n    uint256 _startTime,\\r\\n    uint256 _endTime,\\r\\n    uint256 _tokenId,\\r\\n    uint8 _paymentMode\\r\\n  ) internal {\\r\\n    require(marketAuction.hasTokenActiveBid(_tokenId, msg.sender) == false, \\\"bid\\\");\\r\\n    if (_priceType == 0) {\\r\\n      marketAuction.setSalePrice(_tokenId, _price, _owner, _paymentMode);\\r\\n    }\\r\\n    if (_priceType == 1 || _priceType == 2) {\\r\\n      marketAuction.setInitialBidPriceWithRange(_price, _startTime, _endTime, _owner, _tokenId, _paymentMode);\\r\\n    }\\r\\n    tokenOwnerInfo[_tokenId][_owner].isForSale = true;\\r\\n    tokenOwnerInfo[_tokenId][_owner].priceType = _priceType;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev redeem to add a new token.\\r\\n   * @param _creator address of the creator of the token.\\r\\n   * @param _tokenAmount total token amount available\\r\\n   * @param _isForSale if is for sale\\r\\n   * @param _price price of the token, 0 is for not set the price.\\r\\n   * @param _priceType 0 is for fixed, 1 is for Auction Time bound, 2 is for Auction Infinite\\r\\n   * @param _royaltyPercentage royalty percentage of creator\\r\\n   * @param _startTime start time of bid, pass 0 of _priceType is not 1\\r\\n   * @param _endTime end time of bid, pass 0 of _priceType is not 1\\r\\n   * @param _tokenId uint256 token id\\r\\n   * @param _paymentMode 0 for ETH/BNB, 1 for NAFT\\r\\n   * @param _signature data signature to return account information\\r\\n   */\\r\\n  function verify(\\r\\n    address _creator,\\r\\n    uint256 _tokenAmount,\\r\\n    bool _isForSale,\\r\\n    uint256 _price,\\r\\n    uint8 _priceType,\\r\\n    uint8 _royaltyPercentage,\\r\\n    uint256 _startTime,\\r\\n    uint256 _endTime,\\r\\n    uint256 _tokenId,\\r\\n    uint8 _paymentMode,\\r\\n    bytes calldata _signature\\r\\n  ) external view override {\\r\\n    require(tokenIdsAvailable[_tokenId] == false, \\\"id exist\\\");\\r\\n    require(\\r\\n      ECDSAUpgradeable.recover(\\r\\n        _hash(\\r\\n          _creator,\\r\\n          _tokenAmount,\\r\\n          _isForSale,\\r\\n          _price,\\r\\n          _priceType,\\r\\n          _royaltyPercentage,\\r\\n          _startTime,\\r\\n          _endTime,\\r\\n          _tokenId,\\r\\n          _paymentMode\\r\\n        ),\\r\\n        _signature\\r\\n      ) == _creator,\\r\\n      \\\"Invalid signature\\\"\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets uri of tokens.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * @param _uri new uri .\\r\\n   */\\r\\n  function setURI(string memory _uri) external onlyOwner {\\r\\n    _setURI(_uri);\\r\\n  }\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 id,\\r\\n    uint256 amount,\\r\\n    bytes memory data\\r\\n  ) public virtual override {\\r\\n    //transfer case\\r\\n    if (msg.sender != address(marketAuction)) {\\r\\n      bool activeBid = marketAuction.hasTokenActiveBid(id, from);\\r\\n      if (activeBid == true) require(balanceOf(from, id) - amount > 0, \\\"active bid\\\");\\r\\n    }\\r\\n    super.safeTransferFrom(from, to, id, amount, data);\\r\\n    for (uint256 i = 0; i < tokenInfo[id].owners.length; i++) {\\r\\n      if (tokenInfo[id].owners[i] == to)\\r\\n        //incase owner already exists\\r\\n        return;\\r\\n    }\\r\\n    tokenInfo[id].owners.push(to);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Internal function creating a new token.\\r\\n   * @param _creator address of the creator of the token.\\r\\n   * @param _tokenAmount total token amount available\\r\\n   * @param _isForSale if is for sale\\r\\n   * @param _price price of the token, 0 is for not set the price.\\r\\n   * @param _priceType 0 is for fixed, 1 is for Auction Time bound, 2 is for Auction Infinite\\r\\n   * @param _royaltyPercentage royalty percentage of creator\\r\\n   * @param _tokenId uint256 token id\\r\\n   */\\r\\n  function _createTokenWithId(\\r\\n    address _creator,\\r\\n    uint256 _tokenAmount,\\r\\n    bool _isForSale,\\r\\n    uint256 _price,\\r\\n    uint8 _priceType,\\r\\n    uint8 _royaltyPercentage,\\r\\n    uint256 _tokenId,\\r\\n    address _minter\\r\\n  ) internal returns (uint256) {\\r\\n    require(tokenIdsAvailable[_tokenId] == false, \\\"id exist\\\");\\r\\n\\r\\n    tokenIdsAvailable[_tokenId] = true;\\r\\n    tokenIds.push(_tokenId);\\r\\n\\r\\n    maxId = maxId > _tokenId ? maxId : _tokenId;\\r\\n\\r\\n    _mint(_minter, _tokenId, _tokenAmount, \\\"\\\");\\r\\n\\r\\n    tokenInfo[_tokenId] = TokenInfo(\\r\\n      _tokenId,\\r\\n      _creator,\\r\\n      _tokenAmount,\\r\\n      new address[](0),\\r\\n      marketplaceSettings.getMarketplaceFeePercentage(),\\r\\n      block.timestamp\\r\\n    );\\r\\n\\r\\n    tokenInfo[_tokenId].owners.push(_creator);\\r\\n\\r\\n    tokenOwnerInfo[_tokenId][_creator] = TokenOwnerInfo(\\r\\n      _isForSale,\\r\\n      _priceType,\\r\\n      new uint256[](0),\\r\\n      new uint256[](0),\\r\\n      new address[](0)\\r\\n    );\\r\\n    tokenOwnerInfo[_tokenId][_creator].prices.push(_price);\\r\\n\\r\\n    royaltyRegistry.setPercentageForTokenRoyalty(_tokenId, _royaltyPercentage);\\r\\n    tokenCreatorRegistry.setTokenCreator(_tokenId, payable(_creator));\\r\\n\\r\\n    return _tokenId;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev calculate the hash internal function\\r\\n   * @param _creator address of the creator of the token.\\r\\n   * @param _tokenAmount total token amount available\\r\\n   * @param _isForSale if is for sale\\r\\n   * @param _price price of the token, 0 is for not set the price.\\r\\n   * @param _priceType 0 is for fixed, 1 is for Auction Time bound, 2 is for Auction Infinite\\r\\n   * @param _royaltyPercentage royalty percentage of creator\\r\\n   * @param _startTime start time of bid, pass 0 of _priceType is not 1\\r\\n   * @param _endTime end time of bid, pass 0 of _priceType is not 1\\r\\n   * @param _tokenId uint256 token id\\r\\n   * @param _paymentMode 0 for ETH/BNB, 1 for NAFT\\r\\n   */\\r\\n  function _hash(\\r\\n    address _creator,\\r\\n    uint256 _tokenAmount,\\r\\n    bool _isForSale,\\r\\n    uint256 _price,\\r\\n    uint8 _priceType,\\r\\n    uint8 _royaltyPercentage,\\r\\n    uint256 _startTime,\\r\\n    uint256 _endTime,\\r\\n    uint256 _tokenId,\\r\\n    uint8 _paymentMode\\r\\n  ) internal view returns (bytes32) {\\r\\n    return\\r\\n      _hashTypedDataV4(\\r\\n        keccak256(\\r\\n          abi.encode(\\r\\n            keccak256(\\r\\n              \\\"NafterNFT(address _creator,uint256 _tokenAmount,bool _isForSale,uint256 _price,uint8 _priceType,uint8 _royaltyPercentage,uint256 _startTime,uint256 _endTime,uint256 _tokenId,uint8 _paymentMode)\\\"\\r\\n            ),\\r\\n            _creator,\\r\\n            _tokenAmount,\\r\\n            _isForSale,\\r\\n            _price,\\r\\n            _priceType,\\r\\n            _royaltyPercentage,\\r\\n            _startTime,\\r\\n            _endTime,\\r\\n            _tokenId,\\r\\n            _paymentMode\\r\\n          )\\r\\n        )\\r\\n      );\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal initializer {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n    uint256[47] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nafter.contracts/src/active/INafterTokenCreatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IERC721 Non-Fungible Token Creator basic interface\\r\\n */\\r\\ninterface INafterTokenCreatorRegistry {\\r\\n  /**\\r\\n   * @dev Gets the creator of the token\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @return address of the creator\\r\\n   */\\r\\n  function tokenCreator(uint256 _tokenId) external view returns (address payable);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the creator of the token\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _creator address of the creator for the token\\r\\n   */\\r\\n  function setTokenCreator(uint256 _tokenId, address payable _creator) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nafter.contracts/src/active/INafterRoyaltyRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"./IERC1155TokenCreator.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IERC1155CreatorRoyalty Token level royalty interface.\\r\\n */\\r\\ninterface INafterRoyaltyRegistry is IERC1155TokenCreator {\\r\\n  /**\\r\\n   * @dev Get the royalty fee percentage for a specific ERC1155 contract.\\r\\n   * @param _tokenId uint256 token ID.\\r\\n   * @return uint8 wei royalty fee.\\r\\n   */\\r\\n  function getTokenRoyaltyPercentage(uint256 _tokenId) external view returns (uint8);\\r\\n\\r\\n  /**\\r\\n   * @dev Utililty function to calculate the royalty fee for a token.\\r\\n   * @param _tokenId uint256 token ID.\\r\\n   * @param _amount uint256 wei amount.\\r\\n   * @return uint256 wei fee.\\r\\n   */\\r\\n  function calculateRoyaltyFee(uint256 _tokenId, uint256 _amount) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n     * @dev Sets the royalty percentage set for an Nafter token\\r\\n     * Requirements:\\r\\n\\r\\n     * - `_percentage` must be <= 100.\\r\\n     * - only the owner of this contract or the creator can call this method.\\r\\n     * @param _tokenId uint256 token ID.\\r\\n     * @param _percentage uint8 wei royalty fee.\\r\\n     */\\r\\n  function setPercentageForTokenRoyalty(uint256 _tokenId, uint8 _percentage) external returns (uint8);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nafter.contracts/src/active/INafterMarketAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\ninterface INafterMarketAuction {\\r\\n  /**\\r\\n   * @dev Set the token for sale. The owner of the token must be the sender and have the marketplace approved.\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _amount uint256 wei value that the item is for sale\\r\\n   * @param _owner address of the token owner\\r\\n   * @param _paymentMode 0 for ETH/BNB, 1 for NAFT\\r\\n   */\\r\\n  function setSalePrice(\\r\\n    uint256 _tokenId,\\r\\n    uint256 _amount,\\r\\n    address _owner,\\r\\n    uint8 _paymentMode\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev set\\r\\n   * @param _bidAmount uint256 value in wei to bid.\\r\\n   * @param _startTime end time of bid\\r\\n   * @param _endTime end time of bid\\r\\n   * @param _owner address of the token owner\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _paymentMode 0 for ETH/BNB, 1 for NAFT\\r\\n   */\\r\\n  function setInitialBidPriceWithRange(\\r\\n    uint256 _bidAmount,\\r\\n    uint256 _startTime,\\r\\n    uint256 _endTime,\\r\\n    address _owner,\\r\\n    uint256 _tokenId,\\r\\n    uint8 _paymentMode\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev has active bid\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function hasTokenActiveBid(uint256 _tokenId, address _owner) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nafter.contracts/src/active/INafter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface for interacting with the Nafter contract that holds Nafter beta tokens.\\r\\n */\\r\\ninterface INafter {\\r\\n  /**\\r\\n   * @dev Gets the creator of the token\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @return address of the creator\\r\\n   */\\r\\n  function creatorOfToken(uint256 _tokenId) external view returns (address payable);\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the Service Fee\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @return address of the creator\\r\\n   */\\r\\n  function getServiceFee(uint256 _tokenId) external view returns (uint8);\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the price type\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _owner address of the token owner\\r\\n   * @return get the price type\\r\\n   */\\r\\n  function getPriceType(uint256 _tokenId, address _owner) external view returns (uint8);\\r\\n\\r\\n  /**\\r\\n   * @dev update price only from auction.\\r\\n   * @param _price price of the token\\r\\n   * @param _tokenId uint256 id of the token.\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function setPrice(\\r\\n    uint256 _price,\\r\\n    uint256 _tokenId,\\r\\n    address _owner\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev update bids only from auction.\\r\\n   * @param _bid bid Amount\\r\\n   * @param _bidder bidder address\\r\\n   * @param _tokenId uint256 id of the token.\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function setBid(\\r\\n    uint256 _bid,\\r\\n    address _bidder,\\r\\n    uint256 _tokenId,\\r\\n    address _owner\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev remove token from sale\\r\\n   * @param _tokenId uint256 id of the token.\\r\\n   * @param _owner owner of the token\\r\\n   */\\r\\n  function removeFromSale(uint256 _tokenId, address _owner) external;\\r\\n\\r\\n  /**\\r\\n   * @dev get tokenIds length\\r\\n   */\\r\\n  function getTokenIdsLength() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev get token Id\\r\\n   * @param _index uint256 index\\r\\n   */\\r\\n  function getTokenId(uint256 _index) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the owners\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   */\\r\\n  function getOwners(uint256 _tokenId) external view returns (address[] memory owners);\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the is for sale\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @param _owner address of the token owner\\r\\n   */\\r\\n  function getIsForSale(uint256 _tokenId, address _owner) external view returns (bool);\\r\\n\\r\\n  // function getTokenInfo(uint256 _tokenId)\\r\\n  //       external\\r\\n  //       view\\r\\n  //       returns (\\r\\n  //           address,\\r\\n  //           uint256,\\r\\n  //           address[] memory,\\r\\n  //           uint8,\\r\\n  //           uint256\\r\\n  // );\\r\\n  /**\\r\\n   * @dev add token and set the price.\\r\\n   * @param _price price of the item.\\r\\n   * @param _tokenAmount total token amount available\\r\\n   * @param _isForSale if is for sale\\r\\n   * @param _priceType 0 is for fixed, 1 is for Auction Time bound, 2 is for Auction Infinite\\r\\n   * @param _royaltyPercentage royalty percentage of creator\\r\\n   * @param _tokenId uint256 ID of the token.\\r\\n   * @param _creator address of the creator\\r\\n   * @param _minter address of minter\\r\\n   */\\r\\n  function addNewTokenAndSetThePriceWithIdAndMinter(\\r\\n    uint256 _tokenAmount,\\r\\n    bool _isForSale,\\r\\n    uint256 _price,\\r\\n    uint8 _priceType,\\r\\n    uint8 _royaltyPercentage,\\r\\n    uint256 _tokenId,\\r\\n    address _creator,\\r\\n    address _minter\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev redeem to add a new token.\\r\\n   * @param _creator address of the creator of the token.\\r\\n   * @param _tokenAmount total token amount available\\r\\n   * @param _isForSale if is for sale\\r\\n   * @param _price price of the token, 0 is for not set the price.\\r\\n   * @param _priceType 0 is for fixed, 1 is for Auction Time bound, 2 is for Auction Infinite\\r\\n   * @param _royaltyPercentage royalty percentage of creator\\r\\n   * @param _startTime start time of bid, pass 0 of _priceType is not 1\\r\\n   * @param _endTime end time of bid, pass 0 of _priceType is not 1\\r\\n   * @param _tokenId uint256 token id\\r\\n   * @param _paymentMode 0 for ETH/BNB, 1 for NAFT\\r\\n   */\\r\\n  function verify(\\r\\n    address _creator,\\r\\n    uint256 _tokenAmount,\\r\\n    bool _isForSale,\\r\\n    uint256 _price,\\r\\n    uint8 _priceType,\\r\\n    uint8 _royaltyPercentage,\\r\\n    uint256 _startTime,\\r\\n    uint256 _endTime,\\r\\n    uint256 _tokenId,\\r\\n    uint8 _paymentMode,\\r\\n    bytes calldata _signature\\r\\n  ) external view;\\r\\n\\r\\n  /**\\r\\n   * @dev set approval for all by MAU.\\r\\n   * @param _creator address of the creator of the token.\\r\\n   * @param _operator address of operator\\r\\n   * @param _approved approve status\\r\\n   */\\r\\n  function setApprovalForAllByNMA(\\r\\n    address _creator,\\r\\n    address _operator,\\r\\n    bool _approved\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nafter.contracts/src/active/IMarketplaceSettings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IMarketplaceSettings Settings governing a marketplace.\\r\\n */\\r\\ninterface IMarketplaceSettings {\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // Marketplace Min and Max Values\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Get the max value to be used with the marketplace.\\r\\n   * @return uint256 wei value.\\r\\n   */\\r\\n  function getMarketplaceMaxValue() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Get the max value to be used with the marketplace.\\r\\n   * @return uint256 wei value.\\r\\n   */\\r\\n  function getMarketplaceMinValue() external view returns (uint256);\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // Marketplace Fee\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Get the marketplace fee percentage.\\r\\n   * @return uint8 wei fee.\\r\\n   */\\r\\n  function getMarketplaceFeePercentage() external view returns (uint8);\\r\\n\\r\\n  /**\\r\\n   * @dev Utility function for calculating the marketplace fee for given amount of wei.\\r\\n   * @param _amount uint256 wei amount.\\r\\n   * @return uint256 wei fee.\\r\\n   */\\r\\n  function calculateMarketplaceFee(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  // Primary Sale Fee\\r\\n  /////////////////////////////////////////////////////////////////////////\\r\\n  /**\\r\\n   * @dev Get the primary sale fee percentage for a specific ERC1155 contract.\\r\\n   * @return uint8 wei primary sale fee.\\r\\n   */\\r\\n  function getERC1155ContractPrimarySaleFeePercentage() external view returns (uint8);\\r\\n\\r\\n  /**\\r\\n   * @dev Utility function for calculating the primary sale fee for given amount of wei\\r\\n   * @param _amount uint256 wei amount.\\r\\n   * @return uint256 wei fee.\\r\\n   */\\r\\n  function calculatePrimarySaleFee(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Check whether the ERC1155 token has sold at least once.\\r\\n   * @param _tokenId uint256 token ID.\\r\\n   * @return bool of whether the token has sold.\\r\\n   */\\r\\n  function hasTokenSold(uint256 _tokenId) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n     * @dev Mark a token as sold.\\r\\n\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `_contractAddress` cannot be the zero address.\\r\\n\\r\\n     * @param _tokenId uint256 token ID.\\r\\n     * @param _hasSold bool of whether the token should be marked sold or not.\\r\\n     */\\r\\n  function markERC1155Token(uint256 _tokenId, bool _hasSold) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/Users/mudaseriqbal/Documents/Developer/Luner/nafter.contracts/src/active/IERC1155TokenCreator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IERC1155 Non-Fungible Token Creator basic interface\\r\\n */\\r\\ninterface IERC1155TokenCreator {\\r\\n  /**\\r\\n   * @dev Gets the creator of the token\\r\\n   * @param _tokenId uint256 ID of the token\\r\\n   * @return address of the creator\\r\\n   */\\r\\n  function tokenCreator(uint256 _tokenId) external view returns (address payable);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AddNewToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DeleteTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"__Nafter_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_priceType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_royaltyPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_paymentMode\",\"type\":\"uint8\"}],\"name\":\"addNewTokenAndSetThePriceWithId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_priceType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_royaltyPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"addNewTokenAndSetThePriceWithIdAndMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"creatorOfToken\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deleteToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getBidders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"bidders\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getBids\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"bids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCreationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getIsForSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnerTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"serviceFee\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Nafter.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"priceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bids\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"bidders\",\"type\":\"address[]\"}],\"internalType\":\"struct Nafter.TokenOwnerInfo[]\",\"name\":\"ownerInfo\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getPriceType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getServiceFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getTokensPaging\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"serviceFee\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Nafter.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nextOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketAuction\",\"outputs\":[{\"internalType\":\"contract INafterMarketAuction\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplaceSettings\",\"outputs\":[{\"internalType\":\"contract IMarketplaceSettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_priceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_paymentMode\",\"type\":\"uint8\"}],\"name\":\"putOnSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeFromSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endIndex\",\"type\":\"uint256\"}],\"name\":\"restore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyRegistry\",\"outputs\":[{\"internalType\":\"contract INafterRoyaltyRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllByNMA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setIsForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketAuction\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketplaceSettings\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenCreatorRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyRegistry\",\"type\":\"address\"}],\"name\":\"setMarketAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_priceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setPriceType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCreatorRegistry\",\"outputs\":[{\"internalType\":\"contract INafterTokenCreatorRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdsAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"serviceFee\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenOwnerInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"priceType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_priceType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_royaltyPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_paymentMode\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Nafter","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}