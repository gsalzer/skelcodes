{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity 0.8.2;\r\n\r\ninterface IERC20Token {\r\n    function totalSupply() external view returns (uint256 supply);\r\n    function transfer(address _to, uint256 _value) external  returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n    function mint(address account, uint256 value) external returns (bool);\r\n}\r\n\r\ninterface POLCProfits {\r\n    function addBankEarnings(uint256 _amount) external;\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    \r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\n\r\ncontract POLCBridgeTransfers is Ownable {\r\n\r\n    address payable public bankVault;\r\n    address public polcVault;\r\n    address public polcTokenAddress;\r\n    uint256 public bridgeFee;\r\n    uint256 public gasFee;\r\n    IERC20Token private polcToken;\r\n    POLCProfits public profitsContract;\r\n\r\n    uint256 public depositIndex;\r\n    \r\n    struct Deposit {\r\n        address sender;\r\n        uint256 amount;\r\n        uint256 fee;\r\n    } \r\n    \r\n    mapping (uint256 => Deposit) public deposits;\r\n    mapping (address => bool) public whitelisted;\r\n    uint256 maxTXAmount = 25000 ether;\r\n    \r\n    constructor() {\r\n        polcTokenAddress = 0xaA8330FB2B4D5D07ABFE7A72262752a8505C6B37;\r\n        polcToken = IERC20Token(polcTokenAddress);\r\n        bankVault = payable(0xf7A9F6001ff8b499149569C54852226d719f2D76);\r\n        polcVault = 0xf7A9F6001ff8b499149569C54852226d719f2D76;\r\n        bridgeFee = 1;\r\n        gasFee = (1 gwei)*70000;\r\n        whitelisted[0xf7A9F6001ff8b499149569C54852226d719f2D76] = true;\r\n        whitelisted[0xeA50CE6EBb1a5E4A8F90Bfb35A2fb3c3F0C673ec] = true;\r\n        profitsContract = POLCProfits(0xD7588254A4B16B3A0d4B544b0D0a13523115C140);\r\n    }\r\n\r\n    function bridgeSend(uint256 _amount) public payable {\r\n        require((_amount>=(50 ether) && _amount<=(maxTXAmount)), \"Invalid amount\");\r\n        require(msg.value >= gasFee, \"Invalid gas fee\");\r\n        uint256 fee;\r\n        if (bridgeFee > 0) {\r\n            fee = (_amount * bridgeFee) /100;  // bridge transaction fee\r\n            profitsContract.addBankEarnings((fee / 20)); //25% of the fees goes to bank hodlers, 5 banks = 5% each\r\n        }\r\n        Address.sendValue(bankVault, msg.value);\r\n        require(polcToken.transferFrom(msg.sender, polcVault, _amount), \"ERC20 transfer error\");\r\n        deposits[depositIndex].sender = msg.sender;\r\n        deposits[depositIndex].amount = _amount;\r\n        deposits[depositIndex].fee = fee;\r\n        depositIndex += 1;\r\n    }\r\n    \r\n    function platformTransfer(uint256 _amount) public {\r\n        require(whitelisted[msg.sender] == true, \"Not allowed\");\r\n        require(polcToken.transferFrom(msg.sender, polcVault, _amount), \"ERC20 transfer error\");\r\n        deposits[depositIndex].sender = msg.sender;\r\n        deposits[depositIndex].amount = _amount;\r\n        deposits[depositIndex].fee = 0;\r\n        depositIndex += 1;\r\n    }\r\n    \r\n    function setBankVault(address _vault) public onlyOwner {\r\n        bankVault = payable(_vault);\r\n    }\r\n    \r\n    function setPOLCVault(address _vault) public onlyOwner {\r\n        polcVault = _vault;\r\n    }\r\n    \r\n    function setFee(uint256 _fee) public onlyOwner {\r\n        bridgeFee = _fee;   \r\n    }\r\n    \r\n    function setProfitsContract(address _contract) public onlyOwner {\r\n        profitsContract = POLCProfits(_contract);\r\n    }\r\n\r\n    function setGasFee(uint256 _fee) public onlyOwner {\r\n        gasFee = _fee;\r\n    }\r\n    \r\n    function setMaxTXAmount(uint256 _amount) public onlyOwner {\r\n        maxTXAmount = _amount;\r\n    }\r\n    \r\n    function whitelistWallet(address _wallet, bool _whitelisted) public onlyOwner {\r\n        whitelisted[_wallet] = _whitelisted;\r\n    }\r\n\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bankVault\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bridgeSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"platformTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polcTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polcVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitsContract\",\"outputs\":[{\"internalType\":\"contract POLCProfits\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setBankVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setGasFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTXAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setPOLCVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setProfitsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"whitelistWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"POLCBridgeTransfers","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://37de4c562696eee305546b2205d5aeaa6ea47dab7b8bb784825539a22e3fc453"}]}