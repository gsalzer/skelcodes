{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.4.3 https://hardhat.org\r\n\r\n// File contracts/solidity/interface/INFTXEligibility.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface INFTXEligibility {\r\n    // Read functions.\r\n    function name() external pure returns (string memory);\r\n    function finalized() external view returns (bool);\r\n    function targetAsset() external pure returns (address);\r\n    function checkAllEligible(uint256[] calldata tokenIds)\r\n        external\r\n        view\r\n        returns (bool);\r\n    function checkEligible(uint256[] calldata tokenIds)\r\n        external\r\n        view\r\n        returns (bool[] memory);\r\n    function checkAllIneligible(uint256[] calldata tokenIds)\r\n        external\r\n        view\r\n        returns (bool);\r\n    function checkIsEligible(uint256 tokenId) external view returns (bool);\r\n\r\n    // Write functions.\r\n    function __NFTXEligibility_init_bytes(bytes calldata configData) external;\r\n    function beforeMintHook(uint256[] calldata tokenIds) external;\r\n    function afterMintHook(uint256[] calldata tokenIds) external;\r\n    function beforeRedeemHook(uint256[] calldata tokenIds) external;\r\n    function afterRedeemHook(uint256[] calldata tokenIds) external;\r\n}\r\n\r\n\r\n// File contracts/solidity/proxy/IBeacon.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeacon {\r\n    /**\r\n     * @dev Must return an address that can be used as a delegate call target.\r\n     *\r\n     * {BeaconProxy} will check that this address is a contract.\r\n     */\r\n    function childImplementation() external view returns (address);\r\n    function upgradeChildTo(address newImplementation) external;\r\n}\r\n\r\n\r\n// File contracts/solidity/interface/INFTXVaultFactory.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface INFTXVaultFactory is IBeacon {\r\n  // Read functions.\r\n  function numVaults() external view returns (uint256);\r\n  function zapContract() external view returns (address);\r\n  function feeDistributor() external view returns (address);\r\n  function eligibilityManager() external view returns (address);\r\n  function vault(uint256 vaultId) external view returns (address);\r\n  function vaultsForAsset(address asset) external view returns (address[] memory);\r\n  function isLocked(uint256 id) external view returns (bool);\r\n  function excludedFromFees(address addr) external view returns (bool);\r\n\r\n  event NewFeeDistributor(address oldDistributor, address newDistributor);\r\n  event NewZapContract(address oldZap, address newZap);\r\n  event FeeExclusion(address feeExcluded, bool excluded);\r\n  event NewEligibilityManager(address oldEligManager, address newEligManager);\r\n  event NewVault(uint256 indexed vaultId, address vaultAddress, address assetAddress);\r\n\r\n  // Write functions.\r\n  function __NFTXVaultFactory_init(address _vaultImpl, address _feeDistributor) external;\r\n  function createVault(\r\n      string calldata name,\r\n      string calldata symbol,\r\n      address _assetAddress,\r\n      bool is1155,\r\n      bool allowAllItems\r\n  ) external returns (uint256);\r\n  function setFeeDistributor(address _feeDistributor) external;\r\n  function setEligibilityManager(address _eligibilityManager) external;\r\n  function setZapContract(address _zapContract) external;\r\n  function setFeeExclusion(address _excludedAddr, bool excluded) external;\r\n}\r\n\r\n\r\n// File contracts/solidity/interface/INFTXVault.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface INFTXVault {\r\n    function manager() external returns (address);\r\n    function assetAddress() external returns (address);\r\n    function vaultFactory() external returns (INFTXVaultFactory);\r\n    function eligibilityStorage() external returns (INFTXEligibility);\r\n\r\n    function is1155() external returns (bool);\r\n    function allowAllItems() external returns (bool);\r\n    function enableMint() external returns (bool);\r\n    function enableRandomRedeem() external returns (bool);\r\n    function enableTargetRedeem() external returns (bool);\r\n\r\n    function vaultId() external returns (uint256);\r\n    function nftIdAt(uint256 holdingsIndex) external view returns (uint256);\r\n    function allHoldings() external view returns (uint256[] memory);\r\n    function totalHoldings() external view returns (uint256);\r\n    function mintFee() external returns (uint256);\r\n    function randomRedeemFee() external returns (uint256);\r\n    function targetRedeemFee() external returns (uint256);\r\n\r\n    event VaultInit(\r\n        uint256 indexed vaultId,\r\n        address assetAddress,\r\n        bool is1155,\r\n        bool allowAllItems\r\n    );\r\n\r\n    event ManagerSet(address manager);\r\n    event EligibilityDeployed(uint256 moduleIndex, address eligibilityAddr);\r\n    // event CustomEligibilityDeployed(address eligibilityAddr);\r\n\r\n    event EnableMintUpdated(bool enabled);\r\n    event EnableRandomRedeemUpdated(bool enabled);\r\n    event EnableTargetRedeemUpdated(bool enabled);\r\n\r\n    event MintFeeUpdated(uint256 mintFee);\r\n    event RandomRedeemFeeUpdated(uint256 randomRedeemFee);\r\n    event TargetRedeemFeeUpdated(uint256 targetRedeemFee);\r\n\r\n    event Minted(uint256[] nftIds, uint256[] amounts, address to);\r\n    event Redeemed(uint256[] nftIds, uint256[] specificIds, address to);\r\n    event Swapped(\r\n        uint256[] nftIds,\r\n        uint256[] amounts,\r\n        uint256[] specificIds,\r\n        uint256[] redeemedIds,\r\n        address to\r\n    );\r\n\r\n    function __NFTXVault_init(\r\n        string calldata _name,\r\n        string calldata _symbol,\r\n        address _assetAddress,\r\n        bool _is1155,\r\n        bool _allowAllItems\r\n    ) external;\r\n\r\n    function finalizeVault() external;\r\n\r\n    function setVaultMetadata(\r\n        string memory name_, \r\n        string memory symbol_\r\n    ) external;\r\n\r\n    function setVaultFeatures(\r\n        bool _enableMint,\r\n        bool _enableRandomRedeem,\r\n        bool _enableTargetRedeem\r\n    ) external;\r\n\r\n    function setFees(\r\n        uint256 _mintFee,\r\n        uint256 _randomRedeemFee,\r\n        uint256 _targetRedeemFee\r\n    ) external;\r\n\r\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\r\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\r\n    // a similar interface.\r\n    function deployEligibilityStorage(\r\n        uint256 moduleIndex,\r\n        bytes calldata initData\r\n    ) external returns (address);\r\n\r\n    // The manager has control over options like fees and features\r\n    function setManager(address _manager) external;\r\n\r\n    function mint(\r\n        uint256[] calldata tokenIds,\r\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\r\n    ) external returns (uint256);\r\n\r\n    function mintTo(\r\n        uint256[] calldata tokenIds,\r\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\r\n        address to\r\n    ) external returns (uint256);\r\n\r\n    function redeem(uint256 amount, uint256[] calldata specificIds)\r\n        external\r\n        returns (uint256[] calldata);\r\n\r\n    function redeemTo(\r\n        uint256 amount,\r\n        uint256[] calldata specificIds,\r\n        address to\r\n    ) external returns (uint256[] calldata);\r\n\r\n    function swap(\r\n        uint256[] calldata tokenIds,\r\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\r\n        uint256[] calldata specificIds\r\n    ) external returns (uint256[] calldata);\r\n\r\n    function swapTo(\r\n        uint256[] calldata tokenIds,\r\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\r\n        uint256[] calldata specificIds,\r\n        address to\r\n    ) external returns (uint256[] calldata);\r\n\r\n    function allValidNFTs(uint256[] calldata tokenIds)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\n\r\n// File contracts/solidity/interface/INFTXFeeDistributor.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface INFTXFeeDistributor {\r\n  \r\n  struct FeeReceiver {\r\n    uint256 allocPoint;\r\n    address receiver;\r\n    bool isContract;\r\n  }\r\n\r\n  function nftxVaultFactory() external returns (address);\r\n  function lpStaking() external returns (address);\r\n  function treasury() external returns (address);\r\n  function defaultTreasuryAlloc() external returns (uint256);\r\n  function defaultLPAlloc() external returns (uint256);\r\n  function allocTotal(uint256 vaultId) external returns (uint256);\r\n  function specificTreasuryAlloc(uint256 vaultId) external returns (uint256);\r\n\r\n  // Write functions.\r\n  function __FeeDistributor__init__(address _lpStaking, address _treasury) external;\r\n  function rescueTokens(address token) external;\r\n  function distribute(uint256 vaultId) external;\r\n  function addReceiver(uint256 _vaultId, uint256 _allocPoint, address _receiver, bool _isContract) external;\r\n  function initializeVaultReceivers(uint256 _vaultId) external;\r\n  function changeMultipleReceiverAlloc(\r\n    uint256[] memory _vaultIds, \r\n    uint256[] memory _receiverIdxs, \r\n    uint256[] memory allocPoints\r\n  ) external;\r\n\r\n  function changeMultipleReceiverAddress(\r\n    uint256[] memory _vaultIds, \r\n    uint256[] memory _receiverIdxs, \r\n    address[] memory addresses, \r\n    bool[] memory isContracts\r\n  ) external;\r\n  function changeReceiverAlloc(uint256 _vaultId, uint256 _idx, uint256 _allocPoint) external;\r\n  function changeReceiverAddress(uint256 _vaultId, uint256 _idx, address _address, bool _isContract) external;\r\n  function removeReceiver(uint256 _vaultId, uint256 _receiverIdx) external;\r\n\r\n  // Configuration functions.\r\n  function setTreasuryAddress(address _treasury) external;\r\n  function setDefaultTreasuryAlloc(uint256 _allocPoint) external;\r\n  function setSpecificTreasuryAlloc(uint256 _vaultId, uint256 _allocPoint) external;\r\n  function setLPStakingAddress(address _lpStaking) external;\r\n  function setNFTXVaultFactory(address _factory) external;\r\n  function setDefaultLPAlloc(uint256 _allocPoint) external;\r\n}\r\n\r\n\r\n// File contracts/solidity/interface/INFTXLPStaking.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface INFTXLPStaking {\r\n    function nftxVaultFactory() external view returns (address);\r\n    function rewardDistTokenImpl() external view returns (address);\r\n    function stakingTokenProvider() external view returns (address);\r\n    function vaultToken(address _stakingToken) external view returns (address);\r\n    function stakingToken(address _vaultToken) external view returns (address);\r\n    function rewardDistributionToken(uint256 vaultId) external view returns (address);\r\n    function newRewardDistributionToken(uint256 vaultId) external view returns (address);\r\n    function oldRewardDistributionToken(uint256 vaultId) external view returns (address);\r\n    function unusedRewardDistributionToken(uint256 vaultId) external view returns (address);\r\n    function rewardDistributionTokenAddr(address stakingToken, address rewardToken) external view returns (address);\r\n    \r\n    // Write functions.\r\n    function __NFTXLPStaking__init(address _stakingTokenProvider) external;\r\n    function setNFTXVaultFactory(address newFactory) external;\r\n    function setStakingTokenProvider(address newProvider) external;\r\n    function addPoolForVault(uint256 vaultId) external;\r\n    function updatePoolForVault(uint256 vaultId) external;\r\n    function updatePoolForVaults(uint256[] calldata vaultId) external;\r\n    function receiveRewards(uint256 vaultId, uint256 amount) external returns (bool);\r\n    function deposit(uint256 vaultId, uint256 amount) external;\r\n    function timelockDepositFor(uint256 vaultId, address account, uint256 amount, uint256 timelockLength) external;\r\n    function exit(uint256 vaultId, uint256 amount) external;\r\n    function rescue(uint256 vaultId) external;\r\n    function withdraw(uint256 vaultId, uint256 amount) external;\r\n    function claimRewards(uint256 vaultId) external;\r\n}\r\n\r\n\r\n// File contracts/solidity/token/IERC20Upgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/solidity/interface/ITimelockRewardDistributionToken.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ITimelockRewardDistributionToken is IERC20Upgradeable {\r\n  function distributeRewards(uint amount) external;\r\n  function __TimelockRewardDistributionToken_init(IERC20Upgradeable _target, string memory _name, string memory _symbol) external;\r\n  function mint(address account, address to, uint256 amount) external;\r\n  function timelockMint(address account, uint256 amount, uint256 timelockLength) external;\r\n  function burnFrom(address account, uint256 amount) external;\r\n  function withdrawReward(address user) external;\r\n  function dividendOf(address _owner) external view returns(uint256);\r\n  function withdrawnRewardOf(address _owner) external view returns(uint256);\r\n  function accumulativeRewardOf(address _owner) external view returns(uint256);\r\n  function timelockUntil(address account) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/solidity/interface/IUniswapV2Router01.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB)\r\n        external\r\n        pure\r\n        returns (uint256 amountB);\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n\r\n// File contracts/solidity/testing/IERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/solidity/testing/IERC721.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/solidity/interface/IERC165Upgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165Upgradeable {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/solidity/token/IERC1155Upgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155Upgradeable is IERC165Upgradeable {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\n\r\n// File contracts/solidity/token/IERC721ReceiverUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721ReceiverUpgradeable {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n\r\n// File contracts/solidity/token/ERC721HolderUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC721Receiver} interface.\r\n *\r\n * Accepts all token transfers.\r\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\r\n */\r\ncontract ERC721HolderUpgradeable is IERC721ReceiverUpgradeable {\r\n    /**\r\n     * @dev See {IERC721Receiver-onERC721Received}.\r\n     *\r\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/token/IERC1155ReceiverUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\r\n\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n}\r\n\r\n\r\n// File contracts/solidity/util/ERC165Upgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165Upgradeable is IERC165Upgradeable {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/token/ERC1155ReceiverUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\nabstract contract ERC1155ReceiverUpgradeable is ERC165Upgradeable, IERC1155ReceiverUpgradeable {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\r\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/token/ERC1155HolderUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\nabstract contract ERC1155HolderUpgradeable is ERC1155ReceiverUpgradeable {\r\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/proxy/Initializable.sol\r\n\r\n\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/util/ContextUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/solidity/util/OwnableUpgradeable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File contracts/solidity/NFTXStakingZap.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Authors: @0xKiwi_.\r\n\r\ninterface IWETH {\r\n  function deposit() external payable;\r\n  function transfer(address to, uint value) external returns (bool);\r\n  function withdraw(uint) external;\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract NFTXStakingZap is Ownable, ReentrancyGuard, ERC721HolderUpgradeable, ERC1155HolderUpgradeable {\r\n  IWETH public immutable WETH; \r\n  INFTXLPStaking public immutable lpStaking;\r\n  INFTXVaultFactory public immutable nftxFactory;\r\n  IUniswapV2Router01 public immutable sushiRouter;\r\n\r\n  uint256 public lockTime = 48 hours; \r\n  uint256 constant BASE = 10**18;\r\n\r\n  event UserStaked(uint256 vaultId, uint256 count, uint256 lpBalance, uint256 timelockUntil, address sender);\r\n\r\n  constructor(address _nftxFactory, address _sushiRouter) Ownable() ReentrancyGuard() {\r\n    nftxFactory = INFTXVaultFactory(_nftxFactory);\r\n    lpStaking = INFTXLPStaking(INFTXFeeDistributor(INFTXVaultFactory(_nftxFactory).feeDistributor()).lpStaking());\r\n    sushiRouter = IUniswapV2Router01(_sushiRouter);\r\n    WETH = IWETH(IUniswapV2Router01(_sushiRouter).WETH());\r\n    IERC20Upgradeable(address(IUniswapV2Router01(_sushiRouter).WETH())).approve(_sushiRouter, type(uint256).max);\r\n  }\r\n\r\n  function setLockTime(uint256 newLockTime) external onlyOwner {\r\n    require(newLockTime <= 7 days, \"Lock too long\");\r\n    lockTime = newLockTime;\r\n  } \r\n\r\n  function addLiquidity721ETH(\r\n    uint256 vaultId, \r\n    uint256[] memory ids, \r\n    uint256 minWethIn\r\n  ) public payable returns (uint256) {\r\n    return addLiquidity721ETHTo(vaultId, ids, minWethIn, msg.sender);\r\n  }\r\n\r\n  function addLiquidity721ETHTo(\r\n    uint256 vaultId, \r\n    uint256[] memory ids, \r\n    uint256 minWethIn,\r\n    address to\r\n  ) public payable nonReentrant returns (uint256) {\r\n    WETH.deposit{value: msg.value}();\r\n    (, uint256 amountEth, uint256 liquidity) = _addLiquidity721WETH(vaultId, ids, minWethIn, msg.value, to);\r\n\r\n    // Return extras.\r\n    if (amountEth < msg.value) {\r\n      WETH.withdraw(msg.value-amountEth);\r\n      payable(to).call{value: msg.value-amountEth};\r\n    }\r\n\r\n    return liquidity;\r\n  }\r\n\r\n  function addLiquidity1155ETH(\r\n    uint256 vaultId, \r\n    uint256[] memory ids, \r\n    uint256[] memory amounts,\r\n    uint256 minEthIn\r\n  ) public payable returns (uint256) {\r\n    return addLiquidity1155ETHTo(vaultId, ids, amounts, minEthIn, msg.sender);\r\n  }\r\n\r\n  function addLiquidity1155ETHTo(\r\n    uint256 vaultId, \r\n    uint256[] memory ids, \r\n    uint256[] memory amounts,\r\n    uint256 minEthIn,\r\n    address to\r\n  ) public payable nonReentrant returns (uint256) {\r\n    WETH.deposit{value: msg.value}();\r\n    // Finish this.\r\n    (, uint256 amountEth, uint256 liquidity) = _addLiquidity1155WETH(vaultId, ids, amounts, minEthIn, msg.value, to);\r\n\r\n    // Return extras.\r\n    if (amountEth < msg.value) {\r\n      WETH.withdraw(msg.value-amountEth);\r\n      payable(to).call{value: msg.value-amountEth};\r\n    }\r\n\r\n    return liquidity;\r\n  }\r\n\r\n  function addLiquidity721(\r\n    uint256 vaultId, \r\n    uint256[] memory ids, \r\n    uint256 minWethIn,\r\n    uint256 wethIn\r\n  ) public returns (uint256) {\r\n    return addLiquidity721To(vaultId, ids, minWethIn, wethIn, msg.sender);\r\n  }\r\n\r\n  function addLiquidity721To(\r\n    uint256 vaultId, \r\n    uint256[] memory ids, \r\n    uint256 minWethIn,\r\n    uint256 wethIn,\r\n    address to\r\n  ) public nonReentrant returns (uint256) {\r\n    IERC20Upgradeable(address(WETH)).transferFrom(msg.sender, address(this), wethIn);\r\n    (, uint256 amountEth, uint256 liquidity) = _addLiquidity721WETH(vaultId, ids, minWethIn, wethIn, to);\r\n\r\n    // Return extras.\r\n    if (amountEth < wethIn) {\r\n      WETH.transfer(to, wethIn-amountEth);\r\n    }\r\n\r\n    return liquidity;\r\n  }\r\n\r\n  function addLiquidity1155(\r\n    uint256 vaultId, \r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    uint256 minWethIn,\r\n    uint256 wethIn\r\n  ) public returns (uint256) {\r\n    return addLiquidity1155To(vaultId, ids, amounts, minWethIn, wethIn, msg.sender);\r\n  }\r\n\r\n  function addLiquidity1155To(\r\n    uint256 vaultId, \r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    uint256 minWethIn,\r\n    uint256 wethIn,\r\n    address to\r\n  ) public nonReentrant returns (uint256) {\r\n    IERC20Upgradeable(address(WETH)).transferFrom(msg.sender, address(this), wethIn);\r\n    (, uint256 amountEth, uint256 liquidity) = _addLiquidity1155WETH(vaultId, ids, amounts, minWethIn, wethIn, to);\r\n\r\n    // Return extras.\r\n    if (amountEth < wethIn) {\r\n      WETH.transfer(to, wethIn-amountEth);\r\n    }\r\n\r\n    return liquidity;\r\n  }\r\n\r\n  function lockedUntil(uint256 vaultId, address who) external view returns (uint256) {\r\n    address xLPToken = lpStaking.newRewardDistributionToken(vaultId);\r\n    return ITimelockRewardDistributionToken(xLPToken).timelockUntil(who);\r\n  }\r\n\r\n  function lockedLPBalance(uint256 vaultId, address who) external view returns (uint256) {\r\n    ITimelockRewardDistributionToken xLPToken = ITimelockRewardDistributionToken(lpStaking.newRewardDistributionToken(vaultId));\r\n    if(block.timestamp > xLPToken.timelockUntil(who)) {\r\n      return 0;\r\n    }\r\n    return xLPToken.balanceOf(who);\r\n  }\r\n\r\n  function _addLiquidity721WETH(\r\n    uint256 vaultId, \r\n    uint256[] memory ids, \r\n    uint256 minWethIn,\r\n    uint256 wethIn,\r\n    address to\r\n  ) internal returns (uint256, uint256, uint256) {\r\n    address vault = nftxFactory.vault(vaultId);\r\n    require(vault != address(0), \"NFTXZap: Vault does not exist\");\r\n\r\n    // Transfer tokens to zap and mint to NFTX.\r\n    address assetAddress = INFTXVault(vault).assetAddress();\r\n    for (uint256 i = 0; i < ids.length; i++) {\r\n      transferFromERC721(assetAddress, ids[i]);\r\n      approveERC721(assetAddress, vault, ids[i]);\r\n    }\r\n    uint256[] memory emptyIds;\r\n    uint256 count = INFTXVault(vault).mint(ids, emptyIds);\r\n    uint256 balance = (count * BASE); // We should not be experiencing fees.\r\n    require(balance == IERC20Upgradeable(vault).balanceOf(address(this)), \"Did not receive expected balance\");\r\n    \r\n    return _addLiquidityAndLock(vaultId, vault, balance, minWethIn, wethIn, to);\r\n  }\r\n\r\n  function _addLiquidity1155WETH(\r\n    uint256 vaultId, \r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    uint256 minWethIn,\r\n    uint256 wethIn,\r\n    address to\r\n  ) internal returns (uint256, uint256, uint256) {\r\n    address vault = nftxFactory.vault(vaultId);\r\n    require(vault != address(0), \"NFTXZap: Vault does not exist\");\r\n\r\n    // Transfer tokens to zap and mint to NFTX.\r\n    address assetAddress = INFTXVault(vault).assetAddress();\r\n    IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(msg.sender, address(this), ids, amounts, \"\");\r\n    IERC1155Upgradeable(assetAddress).setApprovalForAll(vault, true);\r\n    uint256 count = INFTXVault(vault).mint(ids, amounts);\r\n    uint256 balance = (count * BASE); // We should not be experiencing fees.\r\n    require(balance == IERC20Upgradeable(vault).balanceOf(address(this)), \"Did not receive expected balance\");\r\n    \r\n    return _addLiquidityAndLock(vaultId, vault, balance, minWethIn, wethIn, to);\r\n  }\r\n\r\n  function _addLiquidityAndLock(\r\n    uint256 vaultId, \r\n    address vault, \r\n    uint256 minTokenIn, \r\n    uint256 minWethIn, \r\n    uint256 wethIn,\r\n    address to\r\n  ) internal returns (uint256, uint256, uint256) {\r\n    // Provide liquidity.\r\n    IERC20Upgradeable(vault).approve(address(sushiRouter), minTokenIn);\r\n    (uint256 amountToken, uint256 amountEth, uint256 liquidity) = sushiRouter.addLiquidity(\r\n      address(vault), \r\n      sushiRouter.WETH(),\r\n      minTokenIn, \r\n      wethIn, \r\n      minTokenIn,\r\n      minWethIn,\r\n      address(this), \r\n      block.timestamp\r\n    );\r\n\r\n    // Stake in LP rewards contract \r\n    address lpToken = pairFor(vault, address(WETH));\r\n    IERC20Upgradeable(lpToken).approve(address(lpStaking), liquidity);\r\n    lpStaking.timelockDepositFor(vaultId, to, liquidity, lockTime);\r\n    \r\n    if (amountToken < minTokenIn) {\r\n      IERC20Upgradeable(vault).transfer(to, minTokenIn-amountToken);\r\n    }\r\n\r\n    uint256 lockEndTime = block.timestamp + lockTime;\r\n    emit UserStaked(vaultId, minTokenIn, liquidity, lockEndTime, to);\r\n    return (amountToken, amountEth, liquidity);\r\n  }\r\n\r\n  function transferFromERC721(address assetAddr, uint256 tokenId) internal virtual {\r\n    address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\r\n    address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\r\n    bytes memory data;\r\n    if (assetAddr == kitties) {\r\n        // Cryptokitties.\r\n        data = abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", msg.sender, address(this), tokenId);\r\n    } else if (assetAddr == punks) {\r\n        // CryptoPunks.\r\n        // Fix here for frontrun attack. Added in v1.0.2.\r\n        bytes memory punkIndexToAddress = abi.encodeWithSignature(\"punkIndexToAddress(uint256)\", tokenId);\r\n        (bool checkSuccess, bytes memory result) = address(assetAddr).staticcall(punkIndexToAddress);\r\n        (address owner) = abi.decode(result, (address));\r\n        require(checkSuccess && owner == msg.sender, \"Not the owner\");\r\n        data = abi.encodeWithSignature(\"buyPunk(uint256)\", tokenId);\r\n    } else {\r\n        // Default.\r\n        data = abi.encodeWithSignature(\"safeTransferFrom(address,address,uint256)\", msg.sender, address(this), tokenId);\r\n    }\r\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\r\n    require(success, string(resultData));\r\n  }\r\n\r\n  function approveERC721(address assetAddr, address to, uint256 tokenId) internal virtual {\r\n    address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\r\n    address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\r\n    bytes memory data;\r\n    if (assetAddr == kitties) {\r\n        // Cryptokitties.\r\n        data = abi.encodeWithSignature(\"approve(address,uint256)\", to, tokenId);\r\n    } else if (assetAddr == punks) {\r\n        // CryptoPunks.\r\n        data = abi.encodeWithSignature(\"offerPunkForSaleToAddress(uint256,uint256,address)\", tokenId, 0, to);\r\n    } else {\r\n        if (IERC721(assetAddr).isApprovedForAll(address(this), to)) {\r\n          return;\r\n        }\r\n        // Default.\r\n        data = abi.encodeWithSignature(\"setApprovalForAll(address,bool)\", to, true);\r\n    }\r\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\r\n    require(success, string(resultData));\r\n  }\r\n\r\n  // calculates the CREATE2 address for a pair without making any external calls\r\n  function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\r\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n    pair = address(uint160(uint256(keccak256(abi.encodePacked(\r\n      hex'ff',\r\n      sushiRouter.factory(),\r\n      keccak256(abi.encodePacked(token0, token1)),\r\n      hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' // init code hash\r\n    )))));\r\n  }\r\n\r\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n  function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n      require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n      (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n      require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n  }\r\n\r\n  receive() external payable {\r\n\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftxFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timelockUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"UserStaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minWethIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethIn\",\"type\":\"uint256\"}],\"name\":\"addLiquidity1155\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minEthIn\",\"type\":\"uint256\"}],\"name\":\"addLiquidity1155ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minEthIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"addLiquidity1155ETHTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minWethIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"addLiquidity1155To\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minWethIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethIn\",\"type\":\"uint256\"}],\"name\":\"addLiquidity721\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minWethIn\",\"type\":\"uint256\"}],\"name\":\"addLiquidity721ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minWethIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"addLiquidity721ETHTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minWethIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"addLiquidity721To\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"lockedLPBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"lockedUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStaking\",\"outputs\":[{\"internalType\":\"contract INFTXLPStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftxFactory\",\"outputs\":[{\"internalType\":\"contract INFTXVaultFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLockTime\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NFTXStakingZap","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000be86f647b167567525ccaafcd6f881f1ee558216000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7a358e96b784a15df14ed45c5e48466d9776da9f64ca46ea73660fb9b2903f6c"}]}