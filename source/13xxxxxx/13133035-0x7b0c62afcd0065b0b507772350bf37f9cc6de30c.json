{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n\r\n// Math operations with safety checks that throw on error\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"Math error\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(a >= b, \"Math error\");\r\n        return a - b;\r\n    }\r\n}\r\n\r\n\r\n// Abstract contract for the full ERC 20 Token standard\r\ninterface ERC20 {\r\n    function balanceOf(address _address) external view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        // (bool success,) = to.call{value:value}(new bytes(0));\r\n        (bool success,) = to.call.value(value)(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// Manage contract\r\ncontract BhxManage {\r\n    // 管理员\r\n    address public owner;\r\n    // 管理员2; 用于双重签名验证\r\n    address public owner2;\r\n    // 签名的messageHash\r\n    mapping (bytes32 => bool) public signHash;\r\n    // bhx合约地址\r\n    address public bhx;\r\n    // usdt合约地址\r\n    address public usdt;\r\n    // 接受10%手续费的地址\r\n    address public feeAddress;\r\n\r\n    // 参数1: 二次签名的地址\r\n    // 参数2: bhx代币合约地址\r\n    // 参数3: usdt代币合约地址\r\n    // 参数4: 接受手续费的地址\r\n    constructor(address _owner2, address _bhx, address _usdt, address _feeAddress) public {\r\n        owner = msg.sender;\r\n        owner2 = _owner2;\r\n        bhx = _bhx;\r\n        usdt = _usdt;\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    // 领取BHX触发事件\r\n    event BhxRed(address indexed owner, uint256 value);\r\n    // 领取USDT触发事件\r\n    event UsdtRed(address indexed owner, uint256 value);\r\n\r\n    // 管理员修饰符\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"BHXManage: You are not owner\");\r\n        _;\r\n    }\r\n\r\n    // 设置新的管理员\r\n    function setOwner(address _owner) external onlyOwner {\r\n        require(_owner != address(0), \"BHXManage: Zero address error\");\r\n        owner = _owner;\r\n    }\r\n\r\n    // 设置新的管理员2\r\n    function setOwner2(address _owner2) external onlyOwner {\r\n        require(_owner2 != address(0), \"BHXManage: Zero address error\");\r\n        owner2 = _owner2;\r\n    }\r\n\r\n    // 设置新的收币地址\r\n    function setFeeAddress(address _feeAddress) external onlyOwner {\r\n        require(_feeAddress != address(0), \"BHXManage: Zero address error\");\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    // 管理员取出合约里的erc20代币\r\n    function takeErc20(address _erc20Address) external onlyOwner {\r\n        require(_erc20Address != address(0), \"BHXManage: Zero address error\");\r\n        // 创建usdt的合约对象\r\n        ERC20 erc20 = ERC20(_erc20Address);\r\n        // 获取合约地址的余额\r\n        uint256 _value = erc20.balanceOf(address(this));\r\n        // 从合约地址转出usdt到to地址\r\n        TransferHelper.safeTransfer(_erc20Address, msg.sender, _value);\r\n    }\r\n\r\n    // 管理员取出合约里的ETH\r\n    function takeETH() external onlyOwner {\r\n        uint256 _value = address(this).balance;\r\n        TransferHelper.safeTransferETH(msg.sender, _value);\r\n    }\r\n\r\n    // 后台交易bhx; 使用二次签名进行验证, 从合约地址扣除bhx\r\n    // 参数1: 交易的数量\r\n    // 参数2: 用户需要支付gas费用的10%给到feeAddress;\r\n    // 参数3: 唯一的值(使用随机的唯一数就可以)\r\n    // 参数4: owner签名的signature值\r\n    function backendTransferBhx(uint256 _value, uint256 _feeValue, uint256 _nonce, bytes memory _signature) public payable {\r\n        address _to = msg.sender;\r\n        require(_to != address(0), \"BHXManage: Zero address error\");\r\n        // 创建bhx合约对象\r\n        ERC20 bhxErc20 = ERC20(bhx);\r\n        // 获取合约地址的bhx余额\r\n        uint256 bhxBalance = bhxErc20.balanceOf(address(this));\r\n        require(bhxBalance >= _value && _value > 0, \"BHXManage: Insufficient balance or zero amount\");\r\n        // 验证得到的地址是不是owner2, 并且数据没有被修改;\r\n        // 所使用的数据有: 接受币地址, 交易的数量, 10%的手续费, nonce值\r\n        bytes32 hash = keccak256(abi.encodePacked(_to, _value, _feeValue, _nonce));\r\n        bytes32 messageHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n        address signer = recoverSigner(messageHash, _signature);\r\n        require(signer == owner2, \"BHXManage: Signer is not owner2\");\r\n        // 签名的messageHash必须是没有使用过的\r\n        require(signHash[messageHash] == false, \"BHXManage: MessageHash is used\");\r\n        // 该messageHash设置为已使用\r\n        signHash[messageHash] = true;\r\n        // 用户给的ETH必须等于签名时候使用的feeValue\r\n        require(msg.value == _feeValue, \"BHXManage: Value unequal fee value\");\r\n\r\n        // 从合约地址转出bhx到to地址\r\n        TransferHelper.safeTransfer(bhx, _to, _value);\r\n        // 把ETH给到fee地址\r\n        TransferHelper.safeTransferETH(feeAddress, _feeValue);\r\n        emit BhxRed(_to, _value);\r\n    }\r\n\r\n    // 抵押bhx借贷usdt; 使用二次签名进行验证, 从合约地址扣除usdt\r\n    // 参数1: 交易的数量\r\n    // 参数2: 用户需要支付gas费用的10%给到feeAddress;\r\n    // 参数3: 唯一的值(使用随机的唯一数就可以)\r\n    // 参数4: owner签名的signature值\r\n    function backendTransferUsdt(uint256 _value, uint256 _feeValue, uint256 _nonce, bytes memory _signature) public payable {\r\n        address _to = msg.sender;\r\n        require(_to != address(0), \"BHXManage: Zero address error\");\r\n        // 创建usdt的合约对象\r\n        ERC20 usdtErc20 = ERC20(usdt);\r\n        // 获取合约地址的usdt余额\r\n        uint256 usdtBalance = usdtErc20.balanceOf(address(this));\r\n        require(usdtBalance >= _value && _value > 0, \"BHXManage: Insufficient balance or zero amount\");\r\n        // 验证得到的地址是不是owner2, 并且数据没有被修改;\r\n        // 所使用的数据有: 接受币地址, 交易的数量, 10%的手续费, nonce值\r\n        bytes32 hash = keccak256(abi.encodePacked(_to, _value, _feeValue, _nonce));\r\n        bytes32 messageHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n        address signer = recoverSigner(messageHash, _signature);\r\n        require(signer == owner2, \"BHXManage: Signer is not owner2\");\r\n        // 签名的messageHash必须是没有使用过的\r\n        require(signHash[messageHash] == false, \"BHXManage: MessageHash is used\");\r\n        // 该messageHash设置为已使用\r\n        signHash[messageHash] = true;\r\n        // 用户给的ETH必须等于签名时候使用的feeValue\r\n        require(msg.value == _feeValue, \"BHXManage: Value unequal fee value\");\r\n\r\n        // 从合约地址转出usdt到to地址\r\n        TransferHelper.safeTransfer(usdt, _to, _value);\r\n        // 把ETH给到fee地址\r\n        TransferHelper.safeTransferETH(feeAddress, _feeValue);\r\n        emit UsdtRed(_to, _value);\r\n    }\r\n\r\n    // 提取签名中的发起方地址\r\n    function recoverSigner(bytes32 message, bytes memory sig) internal pure returns (address) {\r\n        (uint8 v, bytes32 r, bytes32 s) = splitSignature(sig);\r\n        return ecrecover(message, v, r, s);\r\n    }\r\n\r\n    // 分离签名信息的 v r s\r\n    function splitSignature(bytes memory sig) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\r\n        require(sig.length == 65);\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n        return (v, r, s);\r\n    }\r\n\r\n    function() payable external {}\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bhx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BhxRed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UsdtRed\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"backendTransferBhx\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"backendTransferUsdt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bhx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner2\",\"type\":\"address\"}],\"name\":\"setOwner2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"signHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"takeErc20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BhxManage","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ed90a957557941c61ad8c730d7f958bb6f7c668c0000000000000000000000005ca130720db57bc39d4d043d383c963d9620b14e000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000004cb67eb470c3c6d937697415c77513f0ffa486bf","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://93a90851725efd6e84d6b862b8cd3d2bd3cbb509c74f3577b77bd5280bc0d453"}]}