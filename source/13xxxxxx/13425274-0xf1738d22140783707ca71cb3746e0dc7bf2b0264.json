{"status":"1","message":"OK","result":[{"SourceCode":"// hevm: flattened sources of src/JoinFab.sol\r\n\r\npragma solidity =0.5.12 >=0.5.12;\r\n\r\n////// lib/dss/src/lib.sol\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity >=0.5.12; */\r\n\r\ncontract LibNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  usr,\r\n        bytes32  indexed  arg1,\r\n        bytes32  indexed  arg2,\r\n        bytes             data\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        _;\r\n        assembly {\r\n            // log an 'anonymous' event with a constant 6 words of calldata\r\n            // and four indexed topics: selector, caller, arg1 and arg2\r\n            let mark := msize()                       // end of memory ensures zero\r\n            mstore(0x40, add(mark, 288))              // update free memory pointer\r\n            mstore(mark, 0x20)                        // bytes type data offset\r\n            mstore(add(mark, 0x20), 224)              // bytes size (padded)\r\n            calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\r\n            log4(mark, 288,                           // calldata\r\n                 shl(224, shr(224, calldataload(0))), // msg.sig\r\n                 caller(),                            // msg.sender\r\n                 calldataload(4),                     // arg1\r\n                 calldataload(36)                     // arg2\r\n                )\r\n        }\r\n    }\r\n}\r\n\r\n////// lib/dss-gem-joins/src/join-5.sol\r\n\r\n/// join-5.sol -- Non-standard token adapters\r\n\r\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\r\n// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity >=0.5.12; */\r\n\r\n/* import \"dss/lib.sol\"; */\r\n\r\ninterface VatLike_1 {\r\n    function slip(bytes32, address, int256) external;\r\n}\r\n\r\ninterface GemLike_1 {\r\n    function decimals() external view returns (uint8);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n}\r\n\r\n// For a token that has a lower precision than 18 and it has decimals (like USDC)\r\n\r\ncontract GemJoin5 is LibNote {\r\n    // --- Auth ---\r\n    mapping (address => uint256) public wards;\r\n    function rely(address usr) external note auth { wards[usr] = 1; }\r\n    function deny(address usr) external note auth { wards[usr] = 0; }\r\n    modifier auth { require(wards[msg.sender] == 1); _; }\r\n\r\n    VatLike_1 public vat;\r\n    bytes32 public ilk;\r\n    GemLike_1 public gem;\r\n    uint256 public dec;\r\n    uint256 public live;  // Access Flag\r\n\r\n    constructor(address vat_, bytes32 ilk_, address gem_) public {\r\n        gem = GemLike_1(gem_);\r\n        dec = gem.decimals();\r\n        require(dec < 18, \"GemJoin5/decimals-18-or-higher\");\r\n        wards[msg.sender] = 1;\r\n        live = 1;\r\n        vat = VatLike_1(vat_);\r\n        ilk = ilk_;\r\n    }\r\n\r\n    function cage() external note auth {\r\n        live = 0;\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"GemJoin5/overflow\");\r\n    }\r\n\r\n    function join(address urn, uint256 amt) public note {\r\n        require(live == 1, \"GemJoin5/not-live\");\r\n        uint256 wad = mul(amt, 10 ** (18 - dec));\r\n        require(int256(wad) >= 0, \"GemJoin5/overflow\");\r\n        vat.slip(ilk, urn, int256(wad));\r\n        require(gem.transferFrom(msg.sender, address(this), amt), \"GemJoin5/failed-transfer\");\r\n    }\r\n\r\n    function exit(address guy, uint256 amt) public note {\r\n        uint256 wad = mul(amt, 10 ** (18 - dec));\r\n        require(int256(wad) >= 0, \"GemJoin5/overflow\");\r\n        vat.slip(ilk, msg.sender, -int256(wad));\r\n        require(gem.transfer(guy, amt), \"GemJoin5/failed-transfer\");\r\n    }\r\n}\r\n\r\n////// lib/dss-gem-joins/src/join-auth.sol\r\n\r\n/// join-auth.sol -- Non-standard token adapters\r\n\r\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\r\n// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity >=0.5.12; */\r\n\r\n/* import \"dss/lib.sol\"; */\r\n\r\ninterface VatLike_2 {\r\n    function slip(bytes32, address, int256) external;\r\n}\r\n\r\ninterface GemLike_2 {\r\n    function decimals() external view returns (uint256);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n}\r\n\r\n// For a token that needs restriction on the sources which are able to execute the join function (like SAI through Migration contract)\r\n\r\ncontract AuthGemJoin is LibNote {\r\n    VatLike_2 public vat;\r\n    bytes32 public ilk;\r\n    GemLike_2 public gem;\r\n    uint256 public dec;\r\n    uint256 public live;  // Access Flag\r\n\r\n    // --- Auth ---\r\n    mapping (address => uint256) public wards;\r\n    function rely(address usr) public note auth { wards[usr] = 1; }\r\n    function deny(address usr) public note auth { wards[usr] = 0; }\r\n    modifier auth { require(wards[msg.sender] == 1, \"AuthGemJoin/non-authed\"); _; }\r\n\r\n    constructor(address vat_, bytes32 ilk_, address gem_) public {\r\n        wards[msg.sender] = 1;\r\n        live = 1;\r\n        vat = VatLike_2(vat_);\r\n        ilk = ilk_;\r\n        gem = GemLike_2(gem_);\r\n        dec = gem.decimals();\r\n    }\r\n\r\n    function cage() external note auth {\r\n        live = 0;\r\n    }\r\n\r\n    function join(address usr, uint256 wad) public auth note {\r\n        require(live == 1, \"AuthGemJoin/not-live\");\r\n        require(int256(wad) >= 0, \"AuthGemJoin/overflow\");\r\n        vat.slip(ilk, usr, int256(wad));\r\n        require(gem.transferFrom(msg.sender, address(this), wad), \"AuthGemJoin/failed-transfer\");\r\n    }\r\n\r\n    function exit(address usr, uint256 wad) public note {\r\n        require(wad <= 2 ** 255, \"AuthGemJoin/overflow\");\r\n        vat.slip(ilk, msg.sender, -int256(wad));\r\n        require(gem.transfer(usr, wad), \"AuthGemJoin/failed-transfer\");\r\n    }\r\n}\r\n\r\n////// lib/dss/src/join.sol\r\n\r\n/// join.sol -- Basic token adapters\r\n\r\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity >=0.5.12; */\r\n\r\n/* import \"./lib.sol\"; */\r\n\r\ninterface GemLike_3 {\r\n    function decimals() external view returns (uint);\r\n    function transfer(address,uint) external returns (bool);\r\n    function transferFrom(address,address,uint) external returns (bool);\r\n}\r\n\r\ninterface DSTokenLike {\r\n    function mint(address,uint) external;\r\n    function burn(address,uint) external;\r\n}\r\n\r\ninterface VatLike_3 {\r\n    function slip(bytes32,address,int) external;\r\n    function move(address,address,uint) external;\r\n}\r\n\r\n/*\r\n    Here we provide *adapters* to connect the Vat to arbitrary external\r\n    token implementations, creating a bounded context for the Vat. The\r\n    adapters here are provided as working examples:\r\n\r\n      - `GemJoin`: For well behaved ERC20 tokens, with simple transfer\r\n                   semantics.\r\n\r\n      - `ETHJoin`: For native Ether.\r\n\r\n      - `DaiJoin`: For connecting internal Dai balances to an external\r\n                   `DSToken` implementation.\r\n\r\n    In practice, adapter implementations will be varied and specific to\r\n    individual collateral types, accounting for different transfer\r\n    semantics and token standards.\r\n\r\n    Adapters need to implement two basic methods:\r\n\r\n      - `join`: enter collateral into the system\r\n      - `exit`: remove collateral from the system\r\n\r\n*/\r\n\r\ncontract GemJoin is LibNote {\r\n    // --- Auth ---\r\n    mapping (address => uint) public wards;\r\n    function rely(address usr) external note auth { wards[usr] = 1; }\r\n    function deny(address usr) external note auth { wards[usr] = 0; }\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"GemJoin/not-authorized\");\r\n        _;\r\n    }\r\n\r\n    VatLike_3 public vat;   // CDP Engine\r\n    bytes32 public ilk;   // Collateral Type\r\n    GemLike_3 public gem;\r\n    uint    public dec;\r\n    uint    public live;  // Active Flag\r\n\r\n    constructor(address vat_, bytes32 ilk_, address gem_) public {\r\n        wards[msg.sender] = 1;\r\n        live = 1;\r\n        vat = VatLike_3(vat_);\r\n        ilk = ilk_;\r\n        gem = GemLike_3(gem_);\r\n        dec = gem.decimals();\r\n    }\r\n    function cage() external note auth {\r\n        live = 0;\r\n    }\r\n    function join(address usr, uint wad) external note {\r\n        require(live == 1, \"GemJoin/not-live\");\r\n        require(int(wad) >= 0, \"GemJoin/overflow\");\r\n        vat.slip(ilk, usr, int(wad));\r\n        require(gem.transferFrom(msg.sender, address(this), wad), \"GemJoin/failed-transfer\");\r\n    }\r\n    function exit(address usr, uint wad) external note {\r\n        require(wad <= 2 ** 255, \"GemJoin/overflow\");\r\n        vat.slip(ilk, msg.sender, -int(wad));\r\n        require(gem.transfer(usr, wad), \"GemJoin/failed-transfer\");\r\n    }\r\n}\r\n\r\ncontract DaiJoin is LibNote {\r\n    // --- Auth ---\r\n    mapping (address => uint) public wards;\r\n    function rely(address usr) external note auth { wards[usr] = 1; }\r\n    function deny(address usr) external note auth { wards[usr] = 0; }\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"DaiJoin/not-authorized\");\r\n        _;\r\n    }\r\n\r\n    VatLike_3 public vat;      // CDP Engine\r\n    DSTokenLike public dai;  // Stablecoin Token\r\n    uint    public live;     // Active Flag\r\n\r\n    constructor(address vat_, address dai_) public {\r\n        wards[msg.sender] = 1;\r\n        live = 1;\r\n        vat = VatLike_3(vat_);\r\n        dai = DSTokenLike(dai_);\r\n    }\r\n    function cage() external note auth {\r\n        live = 0;\r\n    }\r\n    uint constant ONE = 10 ** 27;\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n    function join(address usr, uint wad) external note {\r\n        vat.move(address(this), usr, mul(ONE, wad));\r\n        dai.burn(msg.sender, wad);\r\n    }\r\n    function exit(address usr, uint wad) external note {\r\n        require(live == 1, \"DaiJoin/not-live\");\r\n        vat.move(msg.sender, address(this), mul(ONE, wad));\r\n        dai.mint(usr, wad);\r\n    }\r\n}\r\n\r\n////// src/JoinFab.sol\r\n// Copyright (C) 2021 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n/* pragma solidity 0.5.12; */\r\n\r\n/* import {GemJoin}        from \"dss/join.sol\"; */\r\n/* import {GemJoin5}       from \"dss-gem-joins/join-5.sol\"; */\r\n/* import {AuthGemJoin}    from \"dss-gem-joins/join-auth.sol\"; */\r\n\r\ncontract GemJoinFab {\r\n    // GemJoin\r\n    // Standard ERC-20 Join Adapter\r\n    function newGemJoin(address _vat, address _owner, bytes32 _ilk, address _gem) external returns (address join) {\r\n        join = address(new GemJoin(_vat, _ilk, _gem));\r\n        GemJoin(join).rely(_owner);\r\n        GemJoin(join).deny(address(this));\r\n    }\r\n}\r\n\r\ncontract GemJoin5Fab {\r\n    // GemJoin5\r\n    // For a token that has a lower precision than 18 and it has decimals (like USDC)\r\n    function newGemJoin5(address _vat, address _owner, bytes32 _ilk, address _gem) external returns (address join) {\r\n        join = address(new GemJoin5(_vat, _ilk, _gem));\r\n        GemJoin(join).rely(_owner);\r\n        GemJoin(join).deny(address(this));\r\n    }\r\n}\r\n\r\ncontract AuthGemJoinFab {\r\n    // AuthGemJoin\r\n    // For a token that needs restriction on the sources which are able to execute the join function (like SAI through Migration contract)\r\n    function newAuthGemJoin(address _vat, address _owner, bytes32 _ilk, address _gem) external returns (address join) {\r\n        join = address(new AuthGemJoin(_vat, _ilk, _gem));\r\n        GemJoin(join).rely(_owner);\r\n        GemJoin(join).deny(address(this));\r\n    }\r\n}\r\n\r\ncontract JoinFab {\r\n\r\n    address public vat;\r\n\r\n    GemJoinFab     gemJoinFab;\r\n    GemJoin5Fab    gemJoin5Fab;\r\n    AuthGemJoinFab authGemJoinFab;\r\n\r\n    // Emit the join address and the calldata used to create it\r\n    event NewJoin(address indexed join, bytes data);\r\n\r\n    constructor(address _vat) public {\r\n        vat            = _vat;\r\n        gemJoinFab     = new GemJoinFab();\r\n        gemJoin5Fab    = new GemJoin5Fab();\r\n        authGemJoinFab = new AuthGemJoinFab();\r\n    }\r\n\r\n    function newGemJoin(address _owner, bytes32 _ilk, address _gem) external returns (address join) {\r\n        join = gemJoinFab.newGemJoin(vat, _owner, _ilk, _gem);\r\n        emit NewJoin(join, abi.encode(vat, _ilk, _gem));\r\n    }\r\n\r\n    function newGemJoin5(address _owner, bytes32 _ilk, address _gem) external returns (address join) {\r\n        join = gemJoin5Fab.newGemJoin5(vat, _owner, _ilk, _gem);\r\n        emit NewJoin(join, abi.encode(vat, _ilk, _gem));\r\n    }\r\n\r\n    function newAuthGemJoin(address _owner, bytes32 _ilk, address _gem) external returns (address join) {\r\n        join = authGemJoinFab.newAuthGemJoin(vat, _owner, _ilk, _gem);\r\n        emit NewJoin(join, abi.encode(vat, _ilk, _gem));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vat\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"join\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"NewJoin\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_gem\",\"type\":\"address\"}],\"name\":\"newAuthGemJoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"join\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_gem\",\"type\":\"address\"}],\"name\":\"newGemJoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"join\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_gem\",\"type\":\"address\"}],\"name\":\"newGemJoin5\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"join\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"JoinFab","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000035d1b3f3d7966a1dfe207aa4514c12a259a0492b","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d033897c20cd246eadb2251dc91d858a7a2ded9f6d60530ead18595b72ea47e8"}]}