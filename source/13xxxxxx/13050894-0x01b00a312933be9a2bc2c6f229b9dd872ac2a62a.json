{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11; /*                                                                                \r\n\r\n████████╗██╗░░██╗███████╗  ░█████╗░██╗░░░░░██╗███████╗███╗░░██╗  ██████╗░░█████╗░██╗░░░██╗\r\n╚══██╔══╝██║░░██║██╔════╝  ██╔══██╗██║░░░░░██║██╔════╝████╗░██║  ██╔══██╗██╔══██╗╚██╗░██╔╝\r\n░░░██║░░░███████║█████╗░░  ███████║██║░░░░░██║█████╗░░██╔██╗██║  ██████╦╝██║░░██║░╚████╔╝░\r\n░░░██║░░░██╔══██║██╔══╝░░  ██╔══██║██║░░░░░██║██╔══╝░░██║╚████║  ██╔══██╗██║░░██║░░╚██╔╝░░\r\n░░░██║░░░██║░░██║███████╗  ██║░░██║███████╗██║███████╗██║░╚███║  ██████╦╝╚█████╔╝░░░██║░░░\r\n░░░╚═╝░░░╚═╝░░╚═╝╚══════╝  ╚═╝░░╚═╝╚══════╝╚═╝╚══════╝╚═╝░░╚══╝  ╚═════╝░░╚════╝░░░░╚═╝░░░\r\n                                                                            \r\nMMMMMMMMMMMMMMMWNX0OkkxxddddddddddddxxkkO0KNWMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMWNKkdolc::::::::::::::::::::::ccodk0XWMMMMMMMMMMM\r\nMMMMMMMMMN0xoc::::::::::::::::::::::::::::::::clx0NWMMMMMMMM\r\nMMMMMMWXOoc::::::::::::::::::::::::::::::::::::::cokXWMMMMMM\r\nMMMMMNOoc::::::::::::::::::::::::::::::::::::::::::clkXMMMMM\r\nMMMWKdc::::::::::::::::::::::::::::::::::::::::::::::co0WMMM\r\nMMW0oc:::::::::::::::::::::::::::::::::::::::::::::::::lONMM\r\nMWOl::::::::::::::::::::::::::::::::::::::::::::::::::::lkNM\r\nWKo::::::::::::::::::::::::::::::::::::::::::::::::::::::l0W\r\nNxc:::::::::::::::::::::::::::::::::::::::::::::::::::::::dX\r\n0l::::::::::::::::::::::::::::::::::::::::::::::::::::::::lO\r\nkc::::::::::::::::::::::::::::::::::::::::::::::::::::::::cx\r\nkc:::::::::::::::::::::::::::::::::::::::::::::::::::::::::d\r\nkc:::::::::::::::::::::::::::::::::::::::::::::::::::::::::d\r\nkc:::::::::::::::::::::::::::::::::::::::::::::::::::::::::d\r\nOc::::::::::::::::::::::::::::::::::::::::::::::::::::::::cx\r\n0l::::::::::::::::::::::::;,........',;:::::::::::::;,..';lO\r\nNxc:::::::::::::::::::::::.           ..;:::::::::;'.   .;dX\r\nW0l:::::::::::::::::::::::.             .,::::::;'.    .,lOW\r\nMWOl::::::::::::::::::::::,.             .:::::,.     .;ckNM\r\nMMWOl::::::::::::::::::::::,.            .::::,.    .';ckNMM\r\nMMMW0oc:::::::::::::::::::::;'..       ..;::::.   .';:lOWMMM\r\nMMMMWXxl::::::::::::::::::::::::,''.'',;;,,,,;,'';::cxKWMMMM\r\nMMMMMMWKxlc:::::::::::::::::::::::::::::,. ..,::::lx0WMMMMMM\r\nMMMMMMMMWKkoc::::::::::::::::::::::::::::;;;:::cokKWMMMMMMMM\r\nMMMMMMMMMMWNKkdlcc::::::::::::::::::::::::cloxOKNWMMMMMMMMMM\r\nMMMMMMMMMMMMMMWKOxocc:::::::::::::::::::ldk0XWMMMMMMMMMMMMMM\r\n\r\n// -------------------------------------------------------------------------------\r\n// The Alien Boy Token contract with following features:\r\n//      => ERC20 Compliance;\r\n//      => Higher degree of control by owner - safeguard functionality;\r\n//      => SafeMath implementation;\r\n//      => Burnable and minting;\r\n//      => user whitelisting;\r\n//      => air drop (active and passive);\r\n//      => built-in buy/sell functions;\r\n//      => Token swap functionality (implemented for future use).\r\n//\r\n// Name        : The Alien Boy Token\r\n// Symbol      : BOY\r\n// Total supply: 1,000,000,000,000,000 (1 Quadrillion)\r\n// Decimals    : 9\r\n//\r\n// Contract by - FuegoNFT.xyz\r\n// Special thanks to openzeppelin for inspiration: ( https://github.com/zeppelinos )\r\n// ----------------------------------------------------------------------------------\r\n*/ \r\n\r\n//*******************************************************************//\r\n//------------------------ SafeMath Library -------------------------//\r\n//*******************************************************************//\r\n/**\r\n    * @title SafeMath\r\n    * @dev Math operations with safety checks that throw on error\r\n    */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'SafeMath mul failed');\r\n    return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, 'SafeMath sub failed');\r\n    return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, 'SafeMath add failed');\r\n    return c;\r\n    }\r\n}\r\n\r\n//*******************************************************************//\r\n//------------------ Contract to Manage Ownership -------------------//\r\n//*******************************************************************//\r\n    \r\ncontract owned {\r\n    address payable public owner;\r\n    address payable internal newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    //this flow is to prevent accidental transfer of ownership\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n \r\n//****************************************************************************//\r\n//---------------------        MAIN CODE STARTS HERE     ---------------------//\r\n//****************************************************************************//\r\n    \r\ncontract AlienBoy is owned {\r\n    \r\n    /*===============================\r\n    =         DATA STORAGE          =\r\n    ===============================*/\r\n\r\n    // Public variables of the token\r\n    using SafeMath for uint256;\r\n    string constant public name = \"The Alien Boy\";\r\n    string constant public symbol = \"BOY\";\r\n    uint256 constant public decimals = 9;\r\n    uint256 public totalSupply = 1000000000000000 * (10**decimals);   //1 Quadriillion tokens\r\n    bool public safeguard = false;  //putting safeguard on will halt all non-owner functions\r\n    bool public tokenSwap = false;  //when tokenSwap is on then all the token transfer to contract will trigger token swap\r\n\r\n    // This creates a mapping with all data storage\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    /*===============================\r\n    =         PUBLIC EVENTS         =\r\n    ===============================*/\r\n\r\n    // This generates a public event of token transfer\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n        \r\n    // This generates a public event for frozen (blacklisting) accounts\r\n    event FrozenAccounts(address target, bool frozen);\r\n    \r\n    // This will log approval of token Transfer\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n\r\n    // This is for token swap\r\n    event TokenSwap(address indexed user, uint256 value);\r\n\r\n    /*======================================\r\n    =       STANDARD ERC20 FUNCTIONS       =\r\n    ======================================*/\r\n\r\n    /* Internal transfer, can only be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        \r\n        //checking conditions\r\n        require(!safeguard);\r\n        require (_to != address(0));                      // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n        \r\n        // overflow and undeflow checked by SafeMath Library\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\r\n        balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\r\n        \r\n        // emit Transfer event\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n        * Transfer tokens\r\n        *\r\n        * Send `_value` tokens to `_to` from your account\r\n        *\r\n        * @param _to The address of the recipient\r\n        * @param _value the amount to send\r\n        */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        //no need to check for input validations, as that is ruled by SafeMath\r\n        _transfer(msg.sender, _to, _value);\r\n        \r\n        //code for token swap\r\n        if(tokenSwap && _to == address(this)){\r\n            //fire tokenSwap event. This event can be listed by oracle and issue tokens of ethereum or another blockchain\r\n            emit TokenSwap(msg.sender, _value);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * Transfer tokens from other address\r\n        *\r\n        * Send `_value` tokens to `_to` on behalf of `_from`\r\n        *\r\n        * @param _from The address of the sender\r\n        * @param _to The address of the recipient\r\n        * @param _value the amount to send\r\n        */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * Set allowance for other address\r\n        *\r\n        * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n        *\r\n        * @param _spender The address authorized to spend\r\n        * @param _value the max amount they can spend\r\n        */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(!safeguard);\r\n        require(balanceOf[msg.sender] >= _value, \"Balance does not have enough tokens\");\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*=====================================\r\n    =       CUSTOM PUBLIC FUNCTIONS       =\r\n    ======================================*/\r\n    \r\n    constructor() public{\r\n        //sending all the tokens to Owner\r\n        balanceOf[owner] = totalSupply;\r\n        \r\n        //firing event which logs this transaction\r\n        emit Transfer(address(0), owner, totalSupply);\r\n    }\r\n    \r\n    function () external payable {\r\n        \r\n        buyTokens();\r\n    }\r\n\r\n    /**\r\n        * Destroy tokens\r\n        *\r\n        * Remove `_value` tokens from the system irreversibly\r\n        *\r\n        * @param _value the amount of tokens to burn\r\n        */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(!safeguard);\r\n        //checking of enough token balance is done by SafeMath\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);  // Subtract from the sender\r\n        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        emit Transfer(msg.sender, address(0), _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        * Destroy tokens from other account\r\n        *\r\n        * Remove `_value` tokens from the system irreversibly on behalf of `_from`\r\n        *\r\n        * @param _from the address of the sender\r\n        * @param _value the amount of tokens to burn\r\n        */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(!safeguard);\r\n        //checking of allowance and token value is done by SafeMath\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value); // Subtract from the sender's allowance\r\n        totalSupply = totalSupply.sub(_value);                                   // Update totalSupply\r\n        emit  Burn(_from, _value);\r\n        emit Transfer(_from, address(0), _value);\r\n        return true;\r\n    }\r\n        \r\n    /** \r\n        * @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n        * @param target Address to be frozen\r\n        * @param freeze either to freeze it or not\r\n        */\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n            frozenAccount[target] = freeze;\r\n        emit  FrozenAccounts(target, freeze);\r\n    }\r\n    \r\n    /** \r\n        * @notice Create `mintedAmount` tokens and send it to `target`\r\n        * @param target Address to receive the tokens\r\n        * @param mintedAmount the amount of tokens it will receive\r\n        */\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n        balanceOf[target] = balanceOf[target].add(mintedAmount);\r\n        totalSupply = totalSupply.add(mintedAmount);\r\n        emit Transfer(address(0), target, mintedAmount);\r\n    }\r\n\r\n    /**\r\n        * Owner can transfer tokens from contract to owner address\r\n        *\r\n        * When safeguard is true, then all the non-owner functions will stop working.\r\n        * When safeguard is false, then all the functions will resume working!\r\n        */\r\n    \r\n    function manualWithdrawTokens(uint256 tokenAmount) public onlyOwner{\r\n        // no need for overflow checking as that will be done in transfer function\r\n        _transfer(address(this), owner, tokenAmount);\r\n    }\r\n    \r\n    //Just in rare case, owner wants to transfer Ether from contract to owner address\r\n    function manualWithdrawEther()onlyOwner public{\r\n        address(owner).transfer(address(this).balance);\r\n    }\r\n    \r\n    /**\r\n        * Change safeguard status on or off\r\n        *\r\n        * When safeguard is true, then all the non-owner functions will stop working.\r\n        * When safeguard is false, then all the functions will resume working!\r\n        */\r\n    function changeSafeguardStatus() onlyOwner public{\r\n        if (safeguard == false){\r\n            safeguard = true;\r\n        }\r\n        else{\r\n            safeguard = false;    \r\n        }\r\n    }\r\n    \r\n    /**\r\n     * This function allows admins to start or stop token swaps\r\n     */\r\n    function changeTokenSwapStatus() public onlyOwner{\r\n        if (tokenSwap == false){\r\n            tokenSwap = true;\r\n        }\r\n        else{\r\n            tokenSwap = false;    \r\n        }\r\n    }\r\n    \r\n    /*************************************/\r\n    /*    Section for User Airdrop      */\r\n    /*************************************/\r\n    \r\n    bool public passiveAirdropStatus;\r\n    uint256 public passiveAirdropTokensAllocation;\r\n    uint256 public airdropAmount;  //in wei\r\n    uint256 public passiveAirdropTokensSold;\r\n    mapping(uint256 => mapping(address => bool)) public airdropClaimed;\r\n    uint256 internal airdropClaimedIndex;\r\n    uint256 public airdropFee = 0.05 ether;\r\n    \r\n    /**\r\n     * This function is to start a passive airdrop by admin only\r\n     * Admin have to put airdrop amount (in wei) and total tokens allocated for it\r\n     * Admin must keep allocated tokens in the contract\r\n     */\r\n    function startNewPassiveAirDrop(uint256 passiveAirdropTokensAllocation_, uint256 airdropAmount_  ) public onlyOwner {\r\n        passiveAirdropTokensAllocation = passiveAirdropTokensAllocation_;\r\n        airdropAmount = airdropAmount_;\r\n        passiveAirdropStatus = true;\r\n    } \r\n    \r\n    /**\r\n     * This function will stop any ongoing passive airdrop\r\n     */\r\n    function stopPassiveAirDropCompletely() public onlyOwner{\r\n        passiveAirdropTokensAllocation = 0;\r\n        airdropAmount = 0;\r\n        airdropClaimedIndex++;\r\n        passiveAirdropStatus = false;\r\n    }\r\n    \r\n    /**\r\n     * This function called by user who want to claim passive airdrop\r\n     * Users can only claim airdrop once, for current airdrop. If admin stops an airdrop and starts another, then users can claim again (once only).\r\n     */\r\n    function claimPassiveAirdrop() public payable returns(bool) {\r\n        require(airdropAmount > 0, 'Token amount must not be zero');\r\n        require(passiveAirdropStatus, 'Airdrop is not active');\r\n        require(passiveAirdropTokensSold <= passiveAirdropTokensAllocation, 'Airdrop sold out');\r\n        require(!airdropClaimed[airdropClaimedIndex][msg.sender], 'user claimed airdrop already');\r\n        require(!isContract(msg.sender),  'No contract address allowed to claim airdrop');\r\n        require(msg.value >= airdropFee, 'Not enough ether to claim this airdrop');\r\n        \r\n        _transfer(address(this), msg.sender, airdropAmount);\r\n        passiveAirdropTokensSold += airdropAmount;\r\n        airdropClaimed[airdropClaimedIndex][msg.sender] = true; \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * This function allows admin to change the amount users will be getting while claiming airdrop\r\n     */\r\n    function changePassiveAirdropAmount(uint256 newAmount) public onlyOwner{\r\n        airdropAmount = newAmount;\r\n    }\r\n    \r\n    /**\r\n     * This function checks if given address is a contract address or normal wallet\r\n     */\r\n    function isContract(address _address) public view returns (bool){\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_address)\r\n        }\r\n        return (size > 0);\r\n    }\r\n    \r\n    /**\r\n     * This function allows admin to update airdrop fee. He can put zero as well if no fee to be charged\r\n     */\r\n    function updateAirdropFee(uint256 newFee) public onlyOwner{\r\n        airdropFee = newFee;\r\n    }\r\n    \r\n    /**\r\n     * Run an ACTIVE Airdrop\r\n     *\r\n     * It requires an array of all the addresses and amount of tokens to distribute\r\n     * It will only process first 150 recipients. That limit is fixed to prevent gas limit\r\n     */\r\n    function airdropACTIVE(address[] memory recipients,uint256 tokenAmount) public onlyOwner {\r\n        require(recipients.length <= 150);\r\n        uint256 totalAddresses = recipients.length;\r\n        for(uint i = 0; i < totalAddresses; i++)\r\n        {\r\n          //This will loop through all the recipients and send them the specified tokens\r\n          //Input data validation is unncessary, as that is done by SafeMath and which also saves some gas\r\n          _transfer(address(this), recipients[i], tokenAmount);\r\n        }\r\n    }\r\n    \r\n    /*************************************/\r\n    /*  Section for User whitelisting    */\r\n    /*************************************/\r\n    bool public whitelistingStatus;\r\n    mapping (address => bool) public whitelisted;\r\n    \r\n    /**\r\n     * Change whitelisting status on or off\r\n     *\r\n     * When whitelisting is true, then crowdsale will only accept investors who are whitelisted\r\n     */\r\n    function changeWhitelistingStatus() onlyOwner public{\r\n        if (whitelistingStatus == false){\r\n            whitelistingStatus = true;\r\n        }\r\n        else{\r\n            whitelistingStatus = false;    \r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Whitelist any user address - only Owner can do this\r\n     *\r\n     * It will add user address in whitelisted mapping\r\n     */\r\n    function whitelistUser(address userAddress) onlyOwner public{\r\n        require(whitelistingStatus == true);\r\n        require(userAddress != address(0));\r\n        whitelisted[userAddress] = true;\r\n    }\r\n    \r\n    /**\r\n     * Whitelist Many user address at once - only Owner can do this\r\n     * It will require maximum of 150 addresses to prevent block gas limit max-out and DoS attack\r\n     * It will add user address in whitelisted mapping\r\n     */\r\n    function whitelistManyUsers(address[] memory userAddresses) onlyOwner public{\r\n        require(whitelistingStatus == true);\r\n        uint256 addressCount = userAddresses.length;\r\n        require(addressCount <= 150);\r\n        for(uint256 i = 0; i < addressCount; i++){\r\n            whitelisted[userAddresses[i]] = true;\r\n        }\r\n    }\r\n    \r\n    /*************************************/\r\n    /*  Section for Buy/Sell of tokens   */\r\n    /*************************************/\r\n    \r\n    uint256 public sellPrice;\r\n    uint256 public buyPrice;\r\n    \r\n    /** \r\n     * Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\r\n     * newSellPrice Price the users can sell to the contract\r\n     * newBuyPrice Price users can buy from the contract\r\n     */\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\r\n        sellPrice = newSellPrice;   //sellPrice is 1 Token = ?? WEI\r\n        buyPrice = newBuyPrice;     //buyPrice is 1 ETH = ?? Tokens\r\n    }\r\n\r\n    /**\r\n     * Buy tokens from contract by sending ether\r\n     * buyPrice is 1 ETH = ?? Tokens\r\n     */\r\n    \r\n    function buyTokens() payable public {\r\n        uint amount = msg.value * buyPrice;                 // calculates the amount\r\n        _transfer(address(this), msg.sender, amount);       // makes the transfers\r\n    }\r\n\r\n    /**\r\n     * Sell `amount` tokens to contract\r\n     * amount of tokens to be sold\r\n     */\r\n    function sellTokens(uint256 amount) public {\r\n        uint256 etherAmount = amount * sellPrice/(10**decimals);\r\n        require(address(this).balance >= etherAmount);   // checks if the contract has enough ether to buy\r\n        _transfer(msg.sender, address(this), amount);           // makes the transfers\r\n        msg.sender.transfer(etherAmount);                // sends ether to the seller. It's important to do this last to avoid recursion attacks\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"passiveAirdropTokensAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"airdropACTIVE\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeTokenSwapStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimPassiveAirdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"whitelistUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeSafeguardStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"passiveAirdropTokensAllocation_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"airdropAmount_\",\"type\":\"uint256\"}],\"name\":\"startNewPassiveAirDrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"manualWithdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"passiveAirdropTokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddresses\",\"type\":\"address[]\"}],\"name\":\"whitelistManyUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeWhitelistingStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"changePassiveAirdropAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateAirdropFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"safeguard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopPassiveAirDropCompletely\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"passiveAirdropStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistingStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdropClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"manualWithdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenAccounts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AlienBoy","CompilerVersion":"v0.5.11+commit.22be8592","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://44b3483cacd5d0d1304ad0042235e7d5c9147c1336ac87853af11f2dc4f094ed"}]}