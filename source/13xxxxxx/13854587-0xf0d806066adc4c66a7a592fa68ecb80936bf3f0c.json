{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.6.8 https://hardhat.org\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/Initializable.sol@v3.4.1-solc-0.7-2\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.4.1-solc-0.7-2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IVault.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IVault {\r\n  function getRewardTokens() external view returns (address[] memory);\r\n\r\n  function balance() external view returns (uint256);\r\n\r\n  function balanceOf(address _user) external view returns (uint256);\r\n\r\n  function deposit(uint256 _amount) external;\r\n\r\n  function withdraw(uint256 _amount) external;\r\n\r\n  function claim() external;\r\n\r\n  function exit() external;\r\n\r\n  function harvest() external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IStaking.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IStaking {\r\n  function stake(uint256 _amount) external;\r\n\r\n  function stakeFor(address _recipient, uint256 _amount) external;\r\n\r\n  function unstake(address _recipient, uint256 _amount) external;\r\n\r\n  function unstakeAll(address _recipient) external;\r\n\r\n  function bondFor(address _recipient, uint256 _amount) external;\r\n\r\n  function rewardBond(address _vault, uint256 _amount) external;\r\n\r\n  function rebase() external;\r\n\r\n  function redeem(address _recipient, bool _withdraw) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/ITreasury.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface ITreasury {\r\n  enum ReserveType {\r\n    // used by reserve manager, will not used to bond ALD.\r\n    NULL,\r\n    // used by main asset bond\r\n    UNDERLYING,\r\n    // used by vault reward bond\r\n    VAULT_REWARD,\r\n    // used by liquidity token bond\r\n    LIQUIDITY_TOKEN\r\n  }\r\n\r\n  /// @dev return the usd value given token and amount.\r\n  /// @param _token The address of token.\r\n  /// @param _amount The amount of token.\r\n  function valueOf(address _token, uint256 _amount) external view returns (uint256);\r\n\r\n  /// @dev return the amount of bond ALD given token and usd value.\r\n  /// @param _token The address of token.\r\n  /// @param _value The usd of token.\r\n  function bondOf(address _token, uint256 _value) external view returns (uint256);\r\n\r\n  /// @dev deposit token to bond ALD.\r\n  /// @param _type The type of deposited token.\r\n  /// @param _token The address of token.\r\n  /// @param _amount The amount of token.\r\n  function deposit(\r\n    ReserveType _type,\r\n    address _token,\r\n    uint256 _amount\r\n  ) external returns (uint256);\r\n\r\n  /// @dev withdraw token from POL.\r\n  /// @param _token The address of token.\r\n  /// @param _amount The amount of token.\r\n  function withdraw(address _token, uint256 _amount) external;\r\n\r\n  /// @dev manage token to earn passive yield.\r\n  /// @param _token The address of token.\r\n  /// @param _amount The amount of token.\r\n  function manage(address _token, uint256 _amount) external;\r\n\r\n  /// @dev mint ALD reward.\r\n  /// @param _recipient The address of to receive ALD token.\r\n  /// @param _amount The amount of token.\r\n  function mintRewards(address _recipient, uint256 _amount) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IRewardBondDepositor.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IRewardBondDepositor {\r\n  function currentEpoch()\r\n    external\r\n    view\r\n    returns (\r\n      uint64 epochNumber,\r\n      uint64 startBlock,\r\n      uint64 nextBlock,\r\n      uint64 epochLength\r\n    );\r\n\r\n  function rewardShares(uint256 _epoch, address _vault) external view returns (uint256);\r\n\r\n  function getVaultsFromAccount(address _user) external view returns (address[] memory);\r\n\r\n  function getAccountRewardShareSince(\r\n    uint256 _epoch,\r\n    address _user,\r\n    address _vault\r\n  ) external view returns (uint256[] memory);\r\n\r\n  function bond(address _vault) external;\r\n\r\n  function rebase() external;\r\n\r\n  function notifyRewards(address _user, uint256[] memory _amounts) external;\r\n}\r\n\r\n\r\n// File contracts/bond/RewardBondDepositor.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract RewardBondDepositor is OwnableUpgradeable, IRewardBondDepositor {\r\n  using SafeMath for uint256;\r\n  using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n  uint256 private constant MAX_REWARD_TOKENS = 4;\r\n\r\n  struct Epoch {\r\n    uint64 epochNumber;\r\n    uint64 startBlock; // include\r\n    uint64 nextBlock; // not include\r\n    uint64 epochLength;\r\n  }\r\n\r\n  struct AccountCheckpoint {\r\n    uint32 epochNumber;\r\n    uint32 blockNumber;\r\n    uint192 rewardShare;\r\n  }\r\n\r\n  struct AccountEpochShare {\r\n    uint32 startEpoch; // include\r\n    uint32 endEpoch; // not inclued\r\n    uint192 totalShare;\r\n  }\r\n\r\n  struct PendingBondReward {\r\n    bool hasReward;\r\n    uint256[MAX_REWARD_TOKENS] amounts;\r\n  }\r\n\r\n  // The address of ald.\r\n  address public ald;\r\n  // The address of Treasury.\r\n  address public treasury;\r\n\r\n  // The address of staking contract\r\n  address public staking;\r\n\r\n  // The struct of current epoch.\r\n  Epoch public override currentEpoch;\r\n\r\n  // A list of epoch infomation.\r\n  // 65536 epoch is about 170 years.\r\n  Epoch[65536] public epoches;\r\n\r\n  // A list of vaults. Push only, beware false-positives.\r\n  address[] public vaults;\r\n  // Record whether an address is vault or not.\r\n  mapping(address => bool) public isVault;\r\n  // Mapping from vault address to a list of reward tokens.\r\n  mapping(address => address[]) public rewardTokens;\r\n\r\n  // Mapping from vault address to token address to reward amount in current epoch.\r\n  mapping(address => PendingBondReward) public rewards;\r\n  // Mapping from epoch number to vault address to total reward share.\r\n  mapping(uint256 => mapping(address => uint256)) public override rewardShares;\r\n\r\n  // The address of keeper.\r\n  address public keeper;\r\n\r\n  // Mapping from vault address to global checkpoint block\r\n  mapping(address => uint256) private checkpointBlock;\r\n\r\n  // Mapping from user address to vault address to account checkpoint.\r\n  mapping(address => mapping(address => AccountCheckpoint)) private accountCheckpoint;\r\n\r\n  // Mapping from user address to vault address to account epoch shares.\r\n  mapping(address => mapping(address => AccountEpochShare[])) private accountEpochShares;\r\n\r\n  // Mapping from user address to a list of interacted vault\r\n  mapping(address => address[]) private accountVaults;\r\n\r\n  function initialize(\r\n    address _ald,\r\n    address _treasury,\r\n    uint64 _startBlock,\r\n    uint64 _epochLength\r\n  ) external initializer {\r\n    OwnableUpgradeable.__Ownable_init();\r\n\r\n    require(_ald != address(0), \"RewardBondDepositor: not zero address\");\r\n    require(_treasury != address(0), \"RewardBondDepositor: not zero address\");\r\n    require(_startBlock >= block.number, \"RewardBondDepositor: start block too small\");\r\n\r\n    ald = _ald;\r\n    treasury = _treasury;\r\n\r\n    currentEpoch = Epoch({\r\n      epochNumber: 0,\r\n      startBlock: _startBlock,\r\n      nextBlock: _startBlock + _epochLength,\r\n      epochLength: _epochLength\r\n    });\r\n  }\r\n\r\n  function initializeStaking(address _staking) external onlyOwner {\r\n    require(_staking != address(0), \"RewardBondDepositor: not zero address\");\r\n    require(staking == address(0), \"RewardBondDepositor: already set\");\r\n\r\n    staking = _staking;\r\n    IERC20Upgradeable(ald).safeApprove(_staking, uint256(-1));\r\n  }\r\n\r\n  /********************************** View Functions **********************************/\r\n\r\n  function getVaultsFromAccount(address _user) external view override returns (address[] memory) {\r\n    return accountVaults[_user];\r\n  }\r\n\r\n  function getCurrentEpochRewardShare(address _vault) external view returns (uint256) {\r\n    uint256 _share = rewardShares[currentEpoch.epochNumber][_vault];\r\n    uint256 _balance = IVault(_vault).balance();\r\n    uint256 _lastBlock = checkpointBlock[_vault];\r\n    return _share.add(_balance.mul(block.number - _lastBlock));\r\n  }\r\n\r\n  function getCurrentEpochAccountRewardShare(address _user, address _vault) external view returns (uint256) {\r\n    AccountCheckpoint memory _accountCheckpoint = accountCheckpoint[_user][_vault];\r\n    if (_accountCheckpoint.blockNumber == 0) return 0;\r\n\r\n    Epoch memory _epoch = currentEpoch;\r\n    uint256 _balance = IVault(_vault).balanceOf(_user);\r\n\r\n    if (_accountCheckpoint.epochNumber == _epoch.epochNumber) {\r\n      return _balance.mul(block.number - _accountCheckpoint.blockNumber).add(_accountCheckpoint.rewardShare);\r\n    } else {\r\n      return _balance.mul(block.number - currentEpoch.startBlock + 1);\r\n    }\r\n  }\r\n\r\n  function getAccountRewardShareSince(\r\n    uint256 _epoch,\r\n    address _user,\r\n    address _vault\r\n  ) external view override returns (uint256[] memory) {\r\n    uint256[] memory _shares = new uint256[](currentEpoch.epochNumber - _epoch);\r\n    if (_shares.length == 0) return _shares;\r\n\r\n    // it is a new user. all shares equals to zero\r\n    if (accountCheckpoint[_user][_vault].blockNumber == 0) return _shares;\r\n\r\n    _getRecordedAccountRewardShareSince(_epoch, _user, _vault, _shares);\r\n    _getPendingAccountRewardShareSince(_epoch, _user, _vault, _shares);\r\n\r\n    return _shares;\r\n  }\r\n\r\n  /********************************** Mutated Functions **********************************/\r\n\r\n  function notifyRewards(address _user, uint256[] memory _amounts) external override {\r\n    require(isVault[msg.sender], \"RewardBondDepositor: not approved\");\r\n\r\n    _checkpoint(msg.sender);\r\n    _userCheckpoint(_user, msg.sender);\r\n\r\n    PendingBondReward storage _pending = rewards[msg.sender];\r\n    bool hasReward = false;\r\n\r\n    address[] memory _tokens = rewardTokens[msg.sender];\r\n    for (uint256 i = 0; i < _tokens.length; i++) {\r\n      uint256 _pool = IERC20Upgradeable(_tokens[i]).balanceOf(address(this));\r\n      IERC20Upgradeable(_tokens[i]).safeTransferFrom(msg.sender, address(this), _amounts[i]);\r\n      uint256 _amount = IERC20Upgradeable(_tokens[i]).balanceOf(address(this)).sub(_pool);\r\n      if (_amount > 0) {\r\n        hasReward = true;\r\n        _pending.amounts[i] = _pending.amounts[i].add(_amount);\r\n      }\r\n    }\r\n\r\n    if (hasReward && !_pending.hasReward) {\r\n      _pending.hasReward = true;\r\n    }\r\n  }\r\n\r\n  function bond(address _vault) external override {\r\n    require(msg.sender == keeper, \"RewardBondDepositor: not keeper\");\r\n\r\n    _bond(_vault);\r\n  }\r\n\r\n  function rebase() external override {\r\n    require(msg.sender == keeper, \"RewardBondDepositor: not keeper\");\r\n\r\n    Epoch memory _currentEpoch = currentEpoch;\r\n    require(block.number >= currentEpoch.nextBlock, \"RewardBondDepositor: too soon\");\r\n\r\n    // bond for vault has pending rewards\r\n    uint256 length = vaults.length;\r\n    for (uint256 i = 0; i < length; i++) {\r\n      address _vault = vaults[i];\r\n      _checkpoint(_vault);\r\n      _bond(_vault);\r\n    }\r\n\r\n    IStaking(staking).rebase();\r\n\r\n    // record passed epoch info\r\n    //   + start at _currentEpoch.startBlock\r\n    //   + actual end at block.number\r\n    epoches[_currentEpoch.epochNumber] = Epoch({\r\n      epochNumber: _currentEpoch.epochNumber,\r\n      startBlock: _currentEpoch.startBlock,\r\n      nextBlock: uint64(block.number),\r\n      epochLength: uint64(block.number - _currentEpoch.startBlock)\r\n    });\r\n\r\n    // update current epoch info\r\n    //   + start at block.number + 1\r\n    //   + expected end at block.number + _currentEpoch.epochLength\r\n    currentEpoch = Epoch({\r\n      epochNumber: _currentEpoch.epochNumber + 1,\r\n      startBlock: uint64(block.number),\r\n      nextBlock: uint64(block.number + _currentEpoch.epochLength),\r\n      epochLength: _currentEpoch.epochLength\r\n    });\r\n  }\r\n\r\n  /********************************** Restricted Functions **********************************/\r\n\r\n  function updateKeeper(address _keeper) external onlyOwner {\r\n    keeper = _keeper;\r\n  }\r\n\r\n  function updateVault(address _vault, bool status) external onlyOwner {\r\n    if (status) {\r\n      require(!isVault[_vault], \"RewardBondDepositor: already added\");\r\n      isVault[_vault] = true;\r\n      if (!_listContainsAddress(vaults, _vault)) {\r\n        vaults.push(_vault);\r\n\r\n        address[] memory _rewardTokens = IVault(_vault).getRewardTokens();\r\n        require(_rewardTokens.length <= MAX_REWARD_TOKENS, \"RewardBondDepositor: too much reward\");\r\n        // approve token for treasury\r\n        for (uint256 i = 0; i < _rewardTokens.length; i++) {\r\n          IERC20Upgradeable(_rewardTokens[i]).safeApprove(treasury, 0);\r\n          IERC20Upgradeable(_rewardTokens[i]).safeApprove(treasury, uint256(-1));\r\n        }\r\n\r\n        rewardTokens[_vault] = _rewardTokens;\r\n      }\r\n    } else {\r\n      require(isVault[_vault], \"RewardBondDepositor: already removed\");\r\n      isVault[_vault] = false;\r\n    }\r\n  }\r\n\r\n  /********************************** Internal Functions **********************************/\r\n\r\n  function _bond(address _vault) internal {\r\n    require(isVault[_vault], \"RewardBondDepositor: vault not approved\");\r\n\r\n    PendingBondReward storage _pending = rewards[_vault];\r\n    if (!_pending.hasReward) return;\r\n\r\n    address[] memory _tokens = rewardTokens[_vault];\r\n    address _treasury = treasury;\r\n    uint256 _bondAmount = 0;\r\n    for (uint256 i = 0; i < _tokens.length; i++) {\r\n      uint256 _amount = ITreasury(_treasury).deposit(\r\n        ITreasury.ReserveType.VAULT_REWARD,\r\n        _tokens[i],\r\n        _pending.amounts[i]\r\n      );\r\n      _bondAmount = _bondAmount.add(_amount);\r\n    }\r\n\r\n    IStaking(staking).rewardBond(_vault, _bondAmount);\r\n\r\n    delete rewards[_vault];\r\n  }\r\n\r\n  function _checkpoint(address _vault) internal {\r\n    uint256 _lastBlock = checkpointBlock[_vault];\r\n    if (_lastBlock > 0 && _lastBlock < block.number) {\r\n      uint256 _share = rewardShares[currentEpoch.epochNumber][_vault];\r\n      uint256 _balance = IVault(_vault).balance();\r\n      rewardShares[currentEpoch.epochNumber][_vault] = _share.add(_balance.mul(block.number - _lastBlock));\r\n    }\r\n    checkpointBlock[_vault] = block.number;\r\n  }\r\n\r\n  function _userCheckpoint(address _user, address _vault) internal {\r\n    AccountCheckpoint memory _accountCheckpoint = accountCheckpoint[_user][_vault];\r\n\r\n    // updated in current block.\r\n    if (block.number == _accountCheckpoint.blockNumber) {\r\n      return;\r\n    }\r\n\r\n    // keep track the vaults which user interacted with.\r\n    if (!_listContainsAddress(accountVaults[_user], _vault)) {\r\n      accountVaults[_user].push(_vault);\r\n    }\r\n\r\n    // it's a new user, just record the checkpoint\r\n    if (_accountCheckpoint.blockNumber == 0) {\r\n      accountCheckpoint[_user][_vault] = AccountCheckpoint({\r\n        epochNumber: uint32(currentEpoch.epochNumber),\r\n        blockNumber: uint32(block.number),\r\n        rewardShare: 0\r\n      });\r\n      return;\r\n    }\r\n\r\n    Epoch memory _cur = currentEpoch;\r\n    uint256 _balance = IVault(_vault).balanceOf(_user);\r\n\r\n    if (_accountCheckpoint.epochNumber == _cur.epochNumber) {\r\n      // In the same epoch\r\n      uint256 newShare = uint256(_accountCheckpoint.rewardShare).add(\r\n        _balance.mul(block.number - _accountCheckpoint.blockNumber)\r\n      );\r\n      accountCheckpoint[_user][_vault] = AccountCheckpoint({\r\n        epochNumber: uint32(currentEpoch.epochNumber),\r\n        blockNumber: uint32(block.number),\r\n        rewardShare: uint192(newShare)\r\n      });\r\n    } else {\r\n      // across multiple epoches\r\n      AccountEpochShare[] storage _shareList = accountEpochShares[_user][_vault];\r\n\r\n      Epoch memory _next;\r\n      if (_accountCheckpoint.epochNumber + 1 == _cur.epochNumber) {\r\n        _next = _cur;\r\n      } else {\r\n        _next = epoches[_accountCheckpoint.epochNumber + 1];\r\n      }\r\n\r\n      uint256 newShare = uint256(_accountCheckpoint.rewardShare).add(\r\n        _balance.mul(_next.startBlock - _accountCheckpoint.blockNumber)\r\n      );\r\n\r\n      // push current checkpoint to list\r\n      _shareList.push(\r\n        AccountEpochShare({\r\n          startEpoch: _accountCheckpoint.epochNumber,\r\n          endEpoch: _accountCheckpoint.epochNumber + 1,\r\n          totalShare: uint192(newShare)\r\n        })\r\n      );\r\n\r\n      // push old epoches to list\r\n      if (_next.epochNumber < _cur.epochNumber) {\r\n        _shareList.push(\r\n          AccountEpochShare({\r\n            startEpoch: uint32(_next.epochNumber),\r\n            endEpoch: uint32(_cur.epochNumber),\r\n            totalShare: uint192(_balance.mul(_cur.startBlock - _next.startBlock))\r\n          })\r\n        );\r\n      }\r\n\r\n      // update account checkpoint to latest one\r\n      accountCheckpoint[_user][_vault] = AccountCheckpoint({\r\n        epochNumber: uint32(_cur.epochNumber),\r\n        blockNumber: uint32(block.number),\r\n        rewardShare: uint192(_balance.mul(block.number - _cur.startBlock))\r\n      });\r\n    }\r\n  }\r\n\r\n  function _listContainsAddress(address[] storage _list, address _item) internal view returns (bool) {\r\n    uint256 length = _list.length;\r\n    for (uint256 i = 0; i < length; i++) {\r\n      if (_list[i] == _item) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function _getRecordedAccountRewardShareSince(\r\n    uint256 _epoch,\r\n    address _user,\r\n    address _vault,\r\n    uint256[] memory _shares\r\n  ) internal view {\r\n    AccountEpochShare[] storage _accountEpochShares = accountEpochShares[_user][_vault];\r\n    uint256 length = _accountEpochShares.length;\r\n\r\n    Epoch memory _cur = currentEpoch;\r\n    Epoch memory _now = epoches[0];\r\n    Epoch memory _next;\r\n    for (uint256 i = 0; i < length; i++) {\r\n      AccountEpochShare memory _epochShare = _accountEpochShares[i];\r\n      if (_epochShare.endEpoch == _cur.epochNumber) {\r\n        _next = _cur;\r\n      } else {\r\n        _next = epoches[_epochShare.endEpoch];\r\n      }\r\n      uint256 blocks = _next.startBlock - _now.startBlock;\r\n      uint256 _start;\r\n      if (_epoch <= _epochShare.startEpoch) {\r\n        _start = _epochShare.startEpoch;\r\n      } else if (_epoch < _epochShare.endEpoch) {\r\n        _start = _epoch;\r\n      } else {\r\n        _start = _epochShare.endEpoch;\r\n      }\r\n      _now = _next;\r\n\r\n      for (uint256 j = _start; j < _epochShare.endEpoch; j++) {\r\n        if (_epochShare.endEpoch == _epochShare.startEpoch + 1) {\r\n          _shares[j - _epoch] = _epochShare.totalShare;\r\n        } else {\r\n          _shares[j - _epoch] = uint256(_epochShare.totalShare).mul(epoches[j].epochLength).div(blocks);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function _getPendingAccountRewardShareSince(\r\n    uint256 _epoch,\r\n    address _user,\r\n    address _vault,\r\n    uint256[] memory _shares\r\n  ) internal view {\r\n    Epoch memory _cur = currentEpoch;\r\n    AccountCheckpoint memory _accountCheckpoint = accountCheckpoint[_user][_vault];\r\n    if (_accountCheckpoint.epochNumber == _cur.epochNumber) return;\r\n\r\n    uint256 _balance = IVault(_vault).balanceOf(_user);\r\n\r\n    if (_accountCheckpoint.epochNumber >= _epoch) {\r\n      Epoch memory _next;\r\n      if (_accountCheckpoint.epochNumber + 1 == _cur.epochNumber) {\r\n        _next = _cur;\r\n      } else {\r\n        _next = epoches[_accountCheckpoint.epochNumber + 1];\r\n      }\r\n      _shares[_accountCheckpoint.epochNumber - _epoch] = uint256(_accountCheckpoint.rewardShare).add(\r\n        _balance.mul(_next.startBlock - _accountCheckpoint.blockNumber)\r\n      );\r\n    }\r\n\r\n    for (uint256 i = _accountCheckpoint.epochNumber + 1; i < _cur.epochNumber; i++) {\r\n      if (i >= _epoch) {\r\n        _shares[i - _epoch] = _balance.mul(epoches[i].epochLength);\r\n      }\r\n    }\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ald\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"bond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"epochNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"epochLength\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epoches\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"epochNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"epochLength\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getAccountRewardShareSince\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getCurrentEpochAccountRewardShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getCurrentEpochRewardShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getVaultsFromAccount\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ald\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_startBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_epochLength\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"initializeStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"notifyRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasReward\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"updateKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RewardBondDepositor","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e2bcef06ccd7ee0cc1545fd469ae5fbe08920ccd690c56c5c819ad648b622d0d"}]}