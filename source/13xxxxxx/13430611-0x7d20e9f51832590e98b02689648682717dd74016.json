{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NFTreeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"./INFTree.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n//               ,@@@@@@@,\\r\\n//       ,,,.   ,@@@@@@/@@,  .oo8888o.\\r\\n//    ,&%%&%&&%,@@@@@/@@@@@@,8888\\\\88/8o\\r\\n//   ,%&\\\\%&&%&&%,@@@\\\\@@@/@@@88\\\\88888/88'\\r\\n//   %&&%&%&/%&&%@@\\\\@@/ /@@@88888\\\\88888'\\r\\n//   %&&%/ %&%%&&@@\\\\ V /@@' `88\\\\8 `/88'\\r\\n//   `&%\\\\ ` /%&'    |.|        \\\\ '|8'\\r\\n//       |o|        | |         | |\\r\\n//       |.|        | |         | |\\r\\n//    \\\\\\\\/ ._\\\\//_/__/  ,\\\\_//__\\\\\\\\/.  \\\\_//__/_\\r\\n\\r\\n/**  \\r\\n    @title NFTreeFactory\\r\\n    @author Lorax + Bebop\\r\\n    @notice Enables the purchase/minting of Genesis Colletion NFTrees.\\r\\n */\\r\\n\\r\\ncontract NFTreeFactory is Ownable {\\r\\n\\r\\n    INFTree nftree;\\r\\n    address treasury;\\r\\n    uint256[] levels;\\r\\n    string[] coins;\\r\\n    bool public isLocked;\\r\\n\\r\\n    mapping(uint256 => Level) levelMap;\\r\\n    mapping(string => Coin) coinMap;\\r\\n\\r\\n    struct Level {\\r\\n        bool isValid;\\r\\n        uint256 cost;\\r\\n        uint256 carbonValue;\\r\\n        uint256 numMinted;\\r\\n        string tokenURI;\\r\\n    }\\r\\n\\r\\n    struct Coin {\\r\\n        bool isValid;\\r\\n        IERC20 coinContract;\\r\\n        uint256 decimal;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Sets values for {nftree} and {treasury}.\\r\\n        @param _nftreeAddress NFTree contract address.\\r\\n        @param _treasuryAddress NFTrees vault wallet address.\\r\\n     */\\r\\n    constructor(address _nftreeAddress, address _treasuryAddress)\\r\\n    {   \\r\\n        nftree = INFTree(_nftreeAddress);\\r\\n        treasury = _treasuryAddress;\\r\\n        isLocked = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Locks/unlocks minting.\\r\\n     */\\r\\n    function toggleLock() external onlyOwner {\\r\\n        isLocked = !isLocked;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Updates {nftree} contract address.\\r\\n        @param _nftreeAddress New NFTree contract address.\\r\\n     */\\r\\n    function setNFTreeContract(address _nftreeAddress) external {\\r\\n        nftree = INFTree(_nftreeAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Retrieves current NFTree contract instance.\\r\\n        @return INFTree {nftree}.\\r\\n     */\\r\\n    function getNFTreeContract() external view returns(INFTree) {\\r\\n        return nftree;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Updates {treasury} wallet address.\\r\\n        @param _address New NFTrees vault wallet address.\\r\\n     */\\r\\n    function setTreasury(address _address) external onlyOwner {\\r\\n        treasury = _address;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n        @dev Retrieves current NFtree vault wallet address.\\r\\n        @return address {treasury}.\\r\\n     */\\r\\n    function getTreasury() external view onlyOwner returns(address) {\\r\\n        return treasury;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Creates new Level instance and maps to the {levels} array. If the level already exists,\\r\\n        the function updates the struct but does not push to the levels array.\\r\\n        @param _level Carbon value.\\r\\n        @param _cost Cost of level.\\r\\n        @param _tokenURI IPFS hash of token metadata.\\r\\n     */\\r\\n    function addLevel(uint256 _level, uint256 _cost, string memory _tokenURI) external onlyOwner {\\r\\n        if (!levelMap[_level].isValid) {\\r\\n            levels.push(_level);\\r\\n        }\\r\\n            \\r\\n        levelMap[_level] = Level(true, _cost, _level, 0, _tokenURI);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Deletes Level instance and removes from {levels} array.\\r\\n        @param _level Carbon value of level to be removed.\\r\\n\\r\\n        requirements: \\r\\n            - {_level} must be a valid level.\\r\\n\\r\\n     */\\r\\n    function removeLevel(uint256 _level) external onlyOwner {\\r\\n        require(levelMap[_level].isValid, 'Not a valid level.');\\r\\n\\r\\n        uint256 index;\\r\\n\\r\\n        for (uint256 i = 0; i < levels.length; i++) {\\r\\n            if (levels[i] == _level){\\r\\n                index = i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        levels[index] = levels[levels.length - 1];\\r\\n\\r\\n        levels.pop();\\r\\n        delete levelMap[_level];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Retrieves variables in that carbon value's Level struct.\\r\\n        @param _level Carbon value of level to be returned.\\r\\n        @return uint256 {levelMap[_level].cost}.\\r\\n        @return uint256 {levelMap[_level].carbonValue}.\\r\\n        @return uint256 {levelMap[_level].numMinted}.\\r\\n\\r\\n        requirements:\\r\\n            - {_level} must be a valid level.\\r\\n     */\\r\\n    function getLevel(uint256 _level) external view returns(uint256, uint256, uint256, string memory) {\\r\\n        require(levelMap[_level].isValid, 'Not a valid level');\\r\\n        return (levelMap[_level].carbonValue, levelMap[_level].cost, levelMap[_level].numMinted, levelMap[_level].tokenURI);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Retrieves array of valid levels.\\r\\n        @return uint256[] {levels}.\\r\\n     */\\r\\n    function getValidLevels() external view returns(uint256[] memory) {\\r\\n        return sort_array(levels);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Creates new Coin instance and maps to the {coins} array.\\r\\n        @param _coin Coin name.\\r\\n        @param _address Contract address for the coin.\\r\\n        @param _decimal Decimal number for the coin.\\r\\n\\r\\n        Requirements:\\r\\n            - {_coin} must not already be a valid coin.\\r\\n     */\\r\\n    function addCoin(string memory _coin, address _address, uint256 _decimal) external onlyOwner {\\r\\n        require(!coinMap[_coin].isValid, 'Already a valid coin.');\\r\\n\\r\\n        coins.push(_coin);\\r\\n        coinMap[_coin] = Coin(true, IERC20(_address), _decimal);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Deletes Coin instance and removes from {coins} array.\\r\\n        @param _coin Name of coin.\\r\\n\\r\\n        requirements: \\r\\n            - {_coin} must be a valid coin.\\r\\n     */\\r\\n    function removeCoin(string memory _coin) external onlyOwner {\\r\\n        require(coinMap[_coin].isValid, 'Not a valid coin.');\\r\\n\\r\\n        uint256 index;\\r\\n\\r\\n        for (uint256 i = 0; i < coins.length; i++) {\\r\\n            if (keccak256(abi.encodePacked(coins[i])) == keccak256(abi.encodePacked(_coin))) {\\r\\n                index = i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        coins[index] = coins[coins.length - 1];\\r\\n\\r\\n        coins.pop();\\r\\n        delete coinMap[_coin];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Retrieves array of valid coins.\\r\\n        @return uint256[] {coins}.\\r\\n     */\\r\\n    function getValidCoins() external view returns(string[] memory) {\\r\\n        return coins;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Mints NFTree to {msg.sender} and transfers payment to {treasury}. \\r\\n        @param _tonnes Carbon value of NFTree to purchase.\\r\\n        @param _amount Dollar value to be transferred to {treasury} from {msg.sender}.\\r\\n        @param _coin Coin to be used to purchase.\\r\\n\\r\\n        Requirements:\\r\\n            - {isLocked} must be false, mint lock must be off.\\r\\n            - {msg.sender} can not be the zero address.\\r\\n            - {_level} must be a valid level.\\r\\n            - {_coin} must be a valid coin.\\r\\n            - {_amount} must be creater than the cost to mint that level.\\r\\n            - {msg.sender} must have a balance of {_coin} that is greater than or equal to {_amount}.\\r\\n            - Allowance of {address(this)} to spend {msg.sender}'s {_coin} must be greater than or equal to {_amount}.\\r\\n\\r\\n     */\\r\\n    function mintNFTree(uint256 _tonnes, uint256 _amount, string memory _coin) external {\\r\\n        // check requirements\\r\\n        require(!isLocked, 'Minting is locked.');\\r\\n        require(msg.sender != address(0) && msg.sender != address(this), 'Sending from zero address.'); \\r\\n        require(levelMap[_tonnes].isValid, 'Not a valid level.');\\r\\n        require(coinMap[_coin].isValid, 'Not a valid coin.');\\r\\n        require(_amount >= levelMap[_tonnes].cost, 'Not enough value.');\\r\\n        require(coinMap[_coin].coinContract.balanceOf(msg.sender) >= _amount, 'Not enough balance.');\\r\\n        require(coinMap[_coin].coinContract.allowance(msg.sender, address(this)) >= _amount, 'Not enough allowance.');\\r\\n        \\r\\n        // transfer tokens\\r\\n        coinMap[_coin].coinContract.transferFrom(msg.sender, treasury, _amount * (10**coinMap[_coin].decimal));\\r\\n        nftree.mintNFTree(msg.sender, levelMap[_tonnes].tokenURI, _tonnes, \\\"Genesis\\\");\\r\\n        \\r\\n        // log purchase\\r\\n        levelMap[_tonnes].numMinted += 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Sorts array.\\r\\n        @param _arr Array to sort.\\r\\n        @return uint256[] {arr}.\\r\\n     */\\r\\n    function sort_array(uint256[] memory _arr) private pure returns (uint256[] memory) {\\r\\n        uint256 l = _arr.length;\\r\\n        for(uint i = 0; i < l; i++) {\\r\\n            for(uint j = i+1; j < l ;j++) {\\r\\n                if(_arr[i] > _arr[j]) {\\r\\n                    uint256 temp = _arr[i];\\r\\n                    _arr[i] = _arr[j];\\r\\n                    _arr[j] = temp;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return _arr;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/INFTree.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface INFTree is IERC721{\\r\\n\\r\\n    /**\\r\\n        @dev see {NFTree-mintNFTree}\\r\\n     */\\r\\n    function mintNFTree(address _recipient, string memory _tokenURI, uint256 _carbonOffset, string memory _collection) external;\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftreeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_coin\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"}],\"name\":\"addCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"addLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNFTreeContract\",\"outputs\":[{\"internalType\":\"contract INFTree\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidCoins\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidLevels\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tonnes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_coin\",\"type\":\"string\"}],\"name\":\"mintNFTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_coin\",\"type\":\"string\"}],\"name\":\"removeCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"removeLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftreeAddress\",\"type\":\"address\"}],\"name\":\"setNFTreeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NFTreeFactory","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a44929195b0c3af215c6efbe5c295cc6b99f7c440000000000000000000000004d19f901b394a7aae52d623089c7ba63a52e17e8","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}