{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/GasRefunder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n/**\\r\\n * @title NFTC Gas Refunder\\r\\n * @author @NiftyMike, NFT Culture\\r\\n * @notice Some code cribbed from Open Zeppelin Ownable.sol.\\r\\n * @dev Community available Bulk Gas Refunder.\\r\\n * Purpose of this contract is to just make it easier and cheaper to send\\r\\n * out refunds for gas issues.\\r\\n */\\r\\ncontract GasRefunder {\\r\\n    address private _owner;\\r\\n\\r\\n    constructor() {\\r\\n        _owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function executeRefunds(\\r\\n        address[] memory addresses,\\r\\n        uint256[] memory amounts\\r\\n    ) external payable {\\r\\n        require(addresses.length == amounts.length, \\\"Unmatched arrays\\\");\\r\\n\\r\\n        uint256 idx;\\r\\n        uint256 sendAmount;\\r\\n        for (idx = 0; idx < amounts.length; idx++) {\\r\\n            sendAmount += amounts[idx];\\r\\n        }\\r\\n\\r\\n        require(sendAmount == msg.value, \\\"Not right amount to send\\\");\\r\\n\\r\\n        for (idx = 0; idx < amounts.length; idx++) {\\r\\n            // send the money.\\r\\n            payable(addresses[idx]).transfer(amounts[idx]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tip() external payable {\\r\\n        // Thank you.\\r\\n    }\\r\\n\\r\\n    function withdraw() external onlyOwner {\\r\\n        payable(msg.sender).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function destroy() external onlyOwner {\\r\\n        selfdestruct(payable(_owner));\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"executeRefunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tip\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GasRefunder","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}