{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function transfer(address to, uint256 value) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n    function approve(address spender, uint256 value) external returns (bool success);\r\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n}\r\n\r\n/**\r\n * Simple ERC-20 implementation\r\n */\r\ncontract WRVN is IERC20 {\r\n    address internal owner;\r\n\r\n    address public issuer;\r\n\r\n    mapping (address => uint256) public override balanceOf;\r\n    mapping (address => mapping (address => uint256)) public override allowance;\r\n\r\n    string public override name;\r\n    string public override symbol;\r\n\r\n    uint8 public override decimals;\r\n\r\n    uint256 public override totalSupply;\r\n\r\n    modifier onlyIssuer() {\r\n        require(msg.sender == issuer); // dev: requires issuer\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Sets the token fields: owner, issuer, name, and symbol\r\n     *\r\n     */\r\n    constructor(address tokenOwner, address tokenIssuer, string memory tokenName, string memory tokenSymbol) {\r\n        owner = tokenOwner;\r\n        issuer = tokenIssuer;\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n        decimals = 8;\r\n    }\r\n\r\n    function setIssuer(address newIssuer)\r\n    external {\r\n        require(msg.sender == owner); // dev: requires owner\r\n\r\n        issuer = newIssuer;\r\n    }\r\n\r\n    /**\r\n     * Mints {value} tokens to the {to} wallet.\r\n     *\r\n     * @param to The address receiving the newly minted tokens\r\n     * @param value The number of tokens to mint\r\n     */\r\n    function mint(address to, uint256 value)\r\n    external\r\n    onlyIssuer {\r\n        require(to != address(0)); // dev: requires non-zero address\r\n\r\n        totalSupply += value;\r\n        balanceOf[to] += value;\r\n\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    /**\r\n     * Burn {value} tokens of the {from} wallet.\r\n     *\r\n     * @param from The address to burn tokens from\r\n     * @param value The number of tokens to burn\r\n     */\r\n    function burn(address from, uint256 value)\r\n    external\r\n    onlyIssuer {\r\n        uint256 balance = balanceOf[from];\r\n        require(balance >= value); // dev: exceeds balance\r\n    \r\n        balanceOf[from] = balance - value;\r\n        totalSupply -= value;\r\n    \r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * Approves the `spender` to transfer `value` tokens of the caller.\r\n     *\r\n     * @param spender The address which will spend the funds\r\n     * @param value The value approved to be spent by the spender\r\n     * @return A boolean that indicates if the operation was successful\r\n     */\r\n    function approve(address spender, uint256 value)\r\n    external\r\n    override\r\n    returns(bool) {\r\n        allowance[msg.sender][spender] = value;\r\n\r\n        emit Approval(msg.sender, spender, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfers {value} tokens from the caller, to {to}\r\n     *\r\n     * @param to The address to transfer tokens to\r\n     * @param value The number of tokens to be transferred\r\n     * @return A boolean that indicates if the operation was successful\r\n     */\r\n    function transfer(address to, uint256 value)\r\n    external\r\n    override\r\n    returns (bool) {\r\n        move(msg.sender, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfers {value} tokens of {from} to {to}, on behalf of the caller.\r\n     *\r\n     * @param from The address to transfer tokens from\r\n     * @param to The address to transfer tokens to\r\n     * @param value The number of tokens to be transferred\r\n     * @return A boolean that indicates if the operation was successful\r\n     */\r\n    function transferFrom(address from, address to, uint256 value)\r\n    external\r\n    override\r\n    returns (bool) {\r\n        uint256 currentAllowance = allowance[from][msg.sender];\r\n        require(currentAllowance >= value); // dev: exceeds allowance\r\n        move(from, to, value);\r\n        allowance[from][msg.sender] = currentAllowance - value;\r\n\r\n        return true;\r\n    }\r\n\r\n    function move(address from, address to, uint256 value)\r\n    internal {\r\n        require(to != address(0)); // dev: requires non-zero address\r\n        uint256 balance = balanceOf[from];\r\n        require(balance >= value); // dev: exceeds balance\r\n        balanceOf[from] = balance - value;\r\n        balanceOf[to] += value;\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIssuer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newIssuer\",\"type\":\"address\"}],\"name\":\"setIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WRVN","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"00000000000000000000000094874aa15438d318e2e6cbe95b0a7eae195e51f00000000000000000000000005432172494e8213444bc41af85a92dd0a672c160000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000c577261707065642045584954000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000057745584954000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d75f91b94d6ba66b24a60a422bce4e6fe383d5f5345941e9cff40baa59715493"}]}