{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Allowlist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IAllowlist.sol\\\";\\n\\n/**\\n * @title Allowlist\\n * @dev The Allowlist contract has a allowlist of addresses, and provides basic authorization control functions.\\n * @dev This simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Allowlist is IAllowlist, Ownable {\\n    mapping(address => bool) public override allowlist;\\n    uint256 public override remainingSeats = 2500;\\n    // 2022-01-15 12:00 pm UTC\\n    uint256 public override deadline = 1642248000;\\n\\n    // ------------------\\n    // Public write functions\\n    // ------------------\\n\\n    function addAddressToAllowlist(address _addr) external override {\\n        require(block.timestamp <= deadline, \\\"RetroPhonesAllowlist: Allowlist already closed\\\");\\n        require(remainingSeats > 0, \\\"RetroPhonesAllowlist: Allowlist is full\\\");\\n        require(!allowlist[_addr], \\\"RetroPhonesAllowlist: Already on the list\\\");\\n        remainingSeats--;\\n        allowlist[_addr] = true;\\n    }\\n\\n    function removeSelfFromAllowlist() external override {\\n        require(allowlist[msg.sender], \\\"RetroPhonesAllowlist: Not on the list\\\");\\n        remainingSeats++;\\n        allowlist[msg.sender] = false;\\n    }\\n\\n    // ------------------\\n    // Function for the owner\\n    // ------------------\\n\\n    function addSeats(uint256 _seatsToAdd) external override onlyOwner {\\n        remainingSeats = remainingSeats + _seatsToAdd;\\n    }\\n\\n    function reduceSeats(uint256 _seatsToSubstract) external override onlyOwner {\\n        remainingSeats = remainingSeats - _seatsToSubstract;\\n    }\\n\\n    function setDeadline(uint256 _newDeadline) external override onlyOwner {\\n        deadline = _newDeadline;\\n    }\\n\\n    function addAddressesToAllowlist(address[] calldata _addrs) external override onlyOwner {\\n        require(block.timestamp <= deadline, \\\"RetroPhonesAllowlist: Allowlist already closed\\\");\\n        require(remainingSeats >= _addrs.length, \\\"RetroPhonesAllowlist: Allowlist is full\\\");\\n\\n        for (uint256 i = 0; i < _addrs.length; i++) {\\n            if (!allowlist[_addrs[i]]) {\\n                remainingSeats--;\\n                allowlist[_addrs[i]] = true;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAllowlist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\ninterface IAllowlist {\\n    // Getters\\n    function allowlist(address) external returns (bool);\\n\\n    function remainingSeats() external returns (uint256);\\n\\n    function deadline() external returns (uint256);\\n\\n    // ------------------\\n    // Public write functions\\n    // ------------------\\n\\n    function addAddressToAllowlist(address _addr) external;\\n\\n    function removeSelfFromAllowlist() external;\\n\\n    // ------------------\\n    // Function for the owner\\n    // ------------------\\n\\n    function addSeats(uint256 _seatsToAdd) external;\\n\\n    function reduceSeats(uint256 _seatsToSubstract) external;\\n\\n    function setDeadline(uint256 _newDeadline) external;\\n\\n    function addAddressesToAllowlist(address[] calldata _addrs) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addAddressToAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"addAddressesToAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seatsToAdd\",\"type\":\"uint256\"}],\"name\":\"addSeats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowlist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seatsToSubstract\",\"type\":\"uint256\"}],\"name\":\"reduceSeats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingSeats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeSelfFromAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDeadline\",\"type\":\"uint256\"}],\"name\":\"setDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Allowlist","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}