{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/staking/TribalChiefSync.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport \\\"./ITribalChief.sol\\\";\\n\\ninterface IAutoRewardsDistributor {\\n    function setAutoRewardsDistribution() external;\\n}\\n\\ninterface ITimelock {\\n    function execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) external;\\n}\\n\\n/**\\n    @title TribalChief Synchronize contract\\n    This contract is able to keep the tribalChief and autoRewardsDistributor in sync when either:\\n    1. adding pools or \\n    2. updating block rewards\\n\\n    It needs the EXECUTOR role on the optimistic timelock, so it can atomically trigger the 3 actions\\n */\\ncontract TribalChiefSync {\\n    ITribalChief public immutable tribalChief;\\n    IAutoRewardsDistributor public immutable autoRewardsDistributor;\\n    ITimelock public immutable timelock;\\n\\n    // TribalChief struct\\n    struct RewardData {\\n        uint128 lockLength;\\n        uint128 rewardMultiplier;\\n    }\\n\\n    constructor(\\n        ITribalChief _tribalChief,\\n        IAutoRewardsDistributor _autoRewardsDistributor,\\n        ITimelock _timelock\\n    ) {\\n        tribalChief = _tribalChief;\\n        autoRewardsDistributor = _autoRewardsDistributor;\\n        timelock = _timelock;\\n    }\\n\\n    /// @notice Before an action, mass update all pools, after sync the autoRewardsDistributor\\n    modifier update {\\n        uint256 numPools = tribalChief.numPools();\\n        uint256[] memory pids = new uint256[](numPools);\\n        for (uint256 i = 0; i < numPools; i++) {\\n            pids[i] = i;\\n        }\\n        tribalChief.massUpdatePools(pids);\\n        _;\\n        autoRewardsDistributor.setAutoRewardsDistribution();\\n    }\\n\\n    /// @notice Sync a rewards rate change\\n    function decreaseRewards(uint256 tribePerBlock, bytes32 salt) external update {\\n        bytes memory data = abi.encodeWithSelector(\\n            tribalChief.updateBlockReward.selector, \\n            tribePerBlock\\n        );\\n        timelock.execute(\\n            address(tribalChief), \\n            0, \\n            data, \\n            bytes32(0), \\n            salt\\n        );\\n    }\\n\\n    /// @notice Sync a pool addition\\n    function addPool(\\n        uint120 allocPoint, \\n        address stakedToken, \\n        address rewarder, \\n        RewardData[] memory rewardData, \\n        bytes32 salt\\n    ) external update {\\n        bytes memory data = abi.encodeWithSelector(\\n            tribalChief.add.selector, \\n            allocPoint,\\n            stakedToken,\\n            rewarder,\\n            rewardData\\n        );\\n        timelock.execute(\\n            address(tribalChief), \\n            0, \\n            data, \\n            bytes32(0), \\n            salt\\n        );\\n    }\\n\\n    /// @notice Sync a pool set action\\n    function setPool(\\n        uint256 pid,\\n        uint120 allocPoint,\\n        IRewarder rewarder,\\n        bool overwrite,\\n        bytes32 salt\\n    ) external update {\\n        bytes memory data = abi.encodeWithSelector(\\n            tribalChief.set.selector,\\n            pid,\\n            allocPoint,\\n            rewarder,\\n            overwrite\\n        );\\n        timelock.execute(\\n            address(tribalChief), \\n            0, \\n            data, \\n            bytes32(0), \\n            salt\\n        );\\n    }\\n\\n    /// @notice Sync a pool reset rewards action\\n    function resetPool(\\n        uint256 pid,\\n        bytes32 salt\\n    ) external update {\\n        bytes memory data = abi.encodeWithSelector(\\n            tribalChief.resetRewards.selector,\\n            pid\\n        );\\n        timelock.execute(\\n            address(tribalChief), \\n            0, \\n            data, \\n            bytes32(0), \\n            salt\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/staking/ITribalChief.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IRewarder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title FEI stablecoin interface\\n/// @author Fei Protocol\\ninterface ITribalChief {\\n    /// @notice Data needed for governor to create a new lockup period\\n    /// and associated reward multiplier\\n    struct RewardData {\\n        uint128 lockLength;\\n        uint128 rewardMultiplier;\\n    }\\n\\n    /// @notice Info of each pool.\\n    struct PoolInfo {\\n        uint256 virtualTotalSupply;\\n        uint256 accTribePerShare;\\n        uint128 lastRewardBlock;\\n        uint120 allocPoint;\\n        bool unlocked;\\n    }\\n\\n    /// @notice view only functions that return data on pools, user deposit(s), tribe distributed per block, and other constants\\n    function rewardMultipliers(uint256 _pid, uint128 _blocksLocked) external view returns (uint128);\\n    function stakedToken(uint256 _index) external view returns(IERC20);\\n    function poolInfo(uint256 _index) external view returns(uint256, uint256, uint128, uint120, bool);\\n    function tribePerBlock() external view returns (uint256);\\n    function pendingRewards(uint256 _pid, address _user) external view returns (uint256);\\n    function getTotalStakedInPool(uint256 pid, address user) external view returns (uint256);\\n    function openUserDeposits(uint256 pid, address user) external view returns (uint256);\\n    function numPools() external view returns (uint256);\\n    function totalAllocPoint() external view returns (uint256);\\n    function SCALE_FACTOR() external view returns (uint256);\\n\\n    /// @notice functions for users to deposit, withdraw and get rewards from our contracts\\n    function deposit(uint256 _pid, uint256 _amount, uint64 _lockLength) external;\\n    function harvest(uint256 pid, address to) external;\\n    function withdrawAllAndHarvest(uint256 pid, address to) external;\\n    function withdrawFromDeposit(uint256 pid, uint256 amount, address to, uint256 index) external; \\n    function emergencyWithdraw(uint256 pid, address to) external;\\n\\n    /// @notice functions to update pools that can be called by anyone\\n    function updatePool(uint256 pid) external;\\n    function massUpdatePools(uint256[] calldata pids) external;\\n\\n    /// @notice functions to change and add pools and multipliers that can only be called by governor, guardian, or TribalChiefAdmin\\n    function resetRewards(uint256 _pid) external;\\n    function set(uint256 _pid, uint120 _allocPoint, IRewarder _rewarder, bool overwrite) external;\\n    function add(uint120 allocPoint, IERC20 _stakedToken, IRewarder _rewarder, RewardData[] calldata rewardData) external;\\n    function governorWithdrawTribe(uint256 amount) external;\\n    function governorAddPoolMultiplier(uint256 _pid, uint64 lockLength, uint64 newRewardsMultiplier) external;\\n    function unlockPool(uint256 _pid) external;\\n    function lockPool(uint256 _pid) external;\\n    function updateBlockReward(uint256 newBlockReward) external;\\n}\\n\"\r\n    },\r\n    \"./contracts/staking/IRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewarder {\\n    function onSushiReward(uint256 pid, address user, address recipient, uint256 sushiAmount, uint256 newLpAmount) external;\\n    function pendingTokens(uint256 pid, address user, uint256 sushiAmount) external view returns (IERC20[] memory, uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ITribalChief\",\"name\":\"_tribalChief\",\"type\":\"address\"},{\"internalType\":\"contract IAutoRewardsDistributor\",\"name\":\"_autoRewardsDistributor\",\"type\":\"address\"},{\"internalType\":\"contract ITimelock\",\"name\":\"_timelock\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint120\",\"name\":\"allocPoint\",\"type\":\"uint120\"},{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"lockLength\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardMultiplier\",\"type\":\"uint128\"}],\"internalType\":\"struct TribalChiefSync.RewardData[]\",\"name\":\"rewardData\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRewardsDistributor\",\"outputs\":[{\"internalType\":\"contract IAutoRewardsDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tribePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"decreaseRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"resetPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint120\",\"name\":\"allocPoint\",\"type\":\"uint120\"},{\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"overwrite\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"contract ITimelock\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tribalChief\",\"outputs\":[{\"internalType\":\"contract ITribalChief\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TribalChiefSync","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009e1076cc0d19f9b0b8019f384b0a29e48ee46f7f00000000000000000000000061be49dfbd869a601fea076e1a1379903e61a895000000000000000000000000bc9c084a12678ef5b516561df902fdc426d95483","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f13eaa8f634309bbdc05153048228c15ba3ffcbeb18ce37d4edd612a6f2dcf06"}]}