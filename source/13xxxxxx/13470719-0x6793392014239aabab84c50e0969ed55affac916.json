{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/WillProxy.sol\": {\r\n      \"content\": \"/// @author Hapi Finance Team\\n/// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"./Registry.sol\\\";\\n\\n/**\\n * @title Proxy\\n * @dev Gives the possibility to delegate any call to a foreign implementation.\\n */\\ncontract WillProxy is Proxy {\\n    /**\\n     * @dev Storage slot with the address of the current Registry.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _REGISTRY_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT =\\n        0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /** @notice initializes the proxy with a registry\\n     * @param registry registry location to get implementations\\n     */\\n    constructor(address registry) payable {\\n        StorageSlot.getAddressSlot(_REGISTRY_SLOT).value = registry;\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = msg.sender;\\n    }\\n\\n    /**\\n     * @dev returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address impl)\\n    {\\n        address registryAddress = StorageSlot\\n            .getAddressSlot(_REGISTRY_SLOT)\\n            .value;\\n        Registry registry = Registry(registryAddress);\\n\\n        // Call the registry to get the implementation of the caller\\n        try registry.getImplementation(msg.sender) returns (address _impl) {\\n            return _impl;\\n        } catch {\\n            return address(0);\\n        }\\n    }\\n\\n    /** @notice Upgrades user to the latest version\\n     */\\n    function upgrade() public {\\n        address registryAddress = StorageSlot\\n            .getAddressSlot(_REGISTRY_SLOT)\\n            .value;\\n        Registry registry = Registry(registryAddress);\\n\\n        try registry.upgrade(msg.sender) {\\n            return;\\n        } catch {\\n            return;\\n        }\\n    }\\n\\n    /** @notice Upgrades user to the specified version\\n     * @param version implementation version to set\\n     */\\n    function upgradeToVersion(uint256 version) public {\\n        address registryAddress = StorageSlot\\n            .getAddressSlot(_REGISTRY_SLOT)\\n            .value;\\n        Registry registry = Registry(registryAddress);\\n\\n        try registry.upgradeToVersion(msg.sender, version) {\\n            return;\\n        } catch {\\n            return;\\n        }\\n    }\\n\\n    /** @notice Gets implementation address for user\\n     * @return address of the implementation version for the user\\n     */\\n    function getImplementation() public view returns (address) {\\n        address registryAddress = StorageSlot\\n            .getAddressSlot(_REGISTRY_SLOT)\\n            .value;\\n        Registry registry = Registry(registryAddress);\\n\\n        try registry.getImplementation(msg.sender) returns (address _impl) {\\n            return _impl;\\n        } catch {\\n            return address(0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Registry.sol\": {\r\n      \"content\": \"/// @author Hapi Finance Team\\n/// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/** @title Will */\\ncontract Registry is Ownable {\\n    // If the Registry has been set up yet\\n    bool _initialized;\\n\\n    // Proxy contract address to verify calls\\n    address public proxy;\\n\\n    // Contracts containing implementation logic\\n    address[] public implementations;\\n\\n    // What implementation version each user is running on\\n    mapping(address => uint256) versions;\\n\\n    /// Constructor\\n    constructor() Ownable() {\\n        // Start with address 0 as v0 - as that is the base for the mapping\\n        implementations.push(address(0));\\n        proxy = address(0);\\n        _initialized = false;\\n    }\\n\\n    /// View functions\\n\\n    /** @notice Gets the implementation for the given sender\\n     * @dev If version for sender is 0, send latest implementation.\\n     * @param sender the sender of the call to the proxy\\n     * @return address of the implementation version for the sender\\n     */\\n    function getImplementation(address sender)\\n        public\\n        view\\n        onlyProxy\\n        initialized\\n        returns (address)\\n    {\\n        uint256 version = versions[sender];\\n        if (version == 0) {\\n            version = implementations.length - 1;\\n        }\\n        return implementations[version];\\n    }\\n\\n    /** @notice Gets the latest implementation contract\\n     * @return address of the latest implementation contract\\n     */\\n    function getLatestImplementation()\\n        public\\n        view\\n        initialized\\n        returns (address)\\n    {\\n        return implementations[implementations.length - 1];\\n    }\\n\\n    /** @notice Gets implementation for user, for admin/notification usage. limited to owner\\n     * @dev If version for sender is 0, send latest implementation.\\n     * @param user the user whose implementation to look up\\n     * @return address of the implementation version for the user\\n     */\\n    function getImplementationForUser(address user)\\n        public\\n        view\\n        onlyOwner\\n        initialized\\n        returns (address)\\n    {\\n        uint256 version = versions[user];\\n        if (version == 0) {\\n            version = implementations.length - 1;\\n        }\\n        return implementations[version];\\n    }\\n\\n    /// Update functions\\n\\n    /** @notice initializes registry once and only once\\n     * @param newProxy The address of the new proxy contract\\n     * @param implementation The address of the initial implementation\\n     */\\n    function initialize(address newProxy, address implementation)\\n        public\\n        onlyOwner\\n    {\\n        require(\\n            _initialized == false,\\n            \\\"Initialize may only be called once to ensure the proxy can never be switched.\\\"\\n        );\\n        proxy = newProxy;\\n        implementations.push(implementation);\\n        _initialized = true;\\n    }\\n\\n    /** @notice Updates the implementation\\n     * @param newImplementation The address of the new implementation contract\\n     */\\n    function register(address newImplementation) public onlyOwner initialized {\\n        implementations.push(newImplementation);\\n    }\\n\\n    /** @notice Upgrades the sender's contract to the latest implementation\\n     * @param sender the sender of the call to the proxy\\n     */\\n    function upgrade(address sender) public onlyProxy initialized {\\n        versions[sender] = implementations.length - 1;\\n    }\\n\\n    /** @notice Upgrades the sender's contract to the latest implementation\\n     * @param sender the sender of the call to the proxy\\n     * @param version the version of the implementation to upgrade to\\n     */\\n    function upgradeToVersion(address sender, uint256 version)\\n        public\\n        onlyProxy\\n        initialized\\n    {\\n        versions[sender] = version;\\n    }\\n\\n    /// Modifiers\\n\\n    /** @notice Restricts method to be called only by the proxy\\n     */\\n    modifier onlyProxy() {\\n        require(\\n            msg.sender == proxy,\\n            \\\"This method is restricted to the proxy. Ensure initialize has been called, and you are calling from the proxy.\\\"\\n        );\\n        _;\\n    }\\n\\n    /** @notice Restricts method to be called only once initialized\\n     */\\n    modifier initialized() {\\n        require(\\n            _initialized == true,\\n            \\\"Please initialize this contract first by calling 'initialize()'\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"upgradeToVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"WillProxy","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000cbdcc175f19fe1d71faf8279ba3da8e6ac153575","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}