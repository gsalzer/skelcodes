{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.2.1 https://hardhat.org\r\n\r\n// File contracts/access/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File contracts/security/Pausable.sol\r\n\r\npragma solidity 0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File contracts/access/Ownable.sol\r\n\r\npragma solidity 0.8.0;\r\n\r\nabstract contract Ownable is Pausable {\r\n    /// @notice store owner.\r\n    address public owner;\r\n\r\n    /// @notice store superAdmin using for reverting ownership.\r\n    address public superAdmin;\r\n\r\n    /// @notice OwnershipTransferred emit on each ownership transfered.\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor(address ownerAddress) {\r\n        owner = ownerAddress;\r\n        superAdmin = ownerAddress;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(superAdmin == _msgSender(), \"Ownable: caller is not the admin\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyAdmin {\r\n        emit OwnershipTransferred(owner, superAdmin);\r\n        owner = superAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// File contracts/interfaces/IERC20.sol\r\n\r\npragma solidity 0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File contracts/libraries/SafeMath.sol\r\n\r\npragma solidity 0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File contracts/libraries/Address.sol\r\n\r\npragma solidity 0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File contracts/libraries/SafeERC20.sol\r\n\r\npragma solidity 0.8.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).sub(\r\n                value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata =\r\n            address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File contracts/interfaces/IUFARMBeneficiaryBook.sol\r\n\r\npragma solidity 0.8.0;\r\n\r\nabstract contract IUFARMBeneficiaryBook {\r\n    function isBeneficiary(address account, uint256 insertId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (\r\n            bool,\r\n            address,\r\n            uint256\r\n        );\r\n}\r\n\r\n// File contracts/abstract/Factory.sol\r\n\r\npragma solidity 0.8.0;\r\n\r\nabstract contract Factory {\r\n    address public vestToken;\r\n}\r\n\r\n// File contracts/UnifarmVesting.sol\r\n\r\npragma solidity 0.8.0;\r\n\r\n/**\r\n * @title Unifarm Vesting Contract\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme.\r\n * @author OpenDefi by Oropocket.\r\n */\r\n\r\ncontract UnifarmVesting is Ownable {\r\n    /// @notice use of SafeMath for mathematics operations.\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice use SafeERC20 for IERC20 (interface of ERC20).\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice event Released emit on every release which is called by Valid Beneficiary of UFARM.\r\n    event Released(address indexed beneficiary, uint256 amount, uint256 time);\r\n\r\n    /// @notice event Withdrawal emit on every SafeWithdraw.\r\n    event Withdrawal(address indexed account, uint256 amount, uint256 time);\r\n\r\n    /// @notice when actually token released will be start.\r\n    uint256 public cliff;\r\n\r\n    /// @notice vesting start time.\r\n    uint256 public startTime;\r\n\r\n    /// @notice vesting end time.\r\n    uint256 public endTime;\r\n\r\n    /// @notice A struct to store beneficiary details.\r\n    struct Beneficiary {\r\n        uint256 releasedTokens;\r\n        uint256 lastRelease;\r\n    }\r\n\r\n    /// @notice store beneficiary details by its address.\r\n    mapping(address => Beneficiary) public beneficiaryDetails;\r\n\r\n    /// @notice linear unlocking duration. every period token released.\r\n    uint256 public unlockDuration;\r\n\r\n    /// @notice UFARM factory.\r\n    Factory public factory;\r\n\r\n    /// @notice UFARM Beneficiary Book Address.\r\n    address public bookAddress;\r\n\r\n    /// @notice allowReleaseAll works on special condition when there is no vesting schedule. eg Airdrop.\r\n    bool public allowReleaseAll;\r\n\r\n    /**\r\n     * @notice construct a UFARM Vesting Contract. endTime should be greater than cliff period.\r\n     * @param owner_ owner Address Provided by factory contract.\r\n     * @param cliff_ cliff duration in seconds. eg 30**86400 for 30 days cliff duration.\r\n     * @param startTime_ when will be vesting start provided by factory contract.\r\n     * @param endTime_ when vesting going to be end. eg 360**86400 for 1 year.\r\n     * @param unlockDuration_ duration of linear unlocking. eg 86400 for 1 day linear unlocking.\r\n     * @param allowReleaseAll_ allow release All once.\r\n     * @param factoryAddress_ factory address.\r\n     */\r\n\r\n    constructor(\r\n        address owner_,\r\n        uint256 cliff_,\r\n        uint256 startTime_,\r\n        uint256 endTime_,\r\n        uint256 unlockDuration_,\r\n        bool allowReleaseAll_,\r\n        address factoryAddress_\r\n    ) Ownable(owner_) {\r\n        require(\r\n            endTime_ > cliff_,\r\n            \"UnifarmVesting: endTime_ should be greater than cliff_ duration.\"\r\n        );\r\n\r\n        cliff = cliff_;\r\n        startTime = startTime_;\r\n        endTime = endTime_;\r\n        unlockDuration = unlockDuration_;\r\n        allowReleaseAll = allowReleaseAll_;\r\n\r\n        factory = Factory(factoryAddress_);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers vested tokens to beneficiary. function will fail when unverified beneficiary try.\r\n     * @notice function will failed on when allow release All disabled.\r\n     * @notice beneficiary will be derived from UFARMBeneficiaryBook Contract.\r\n     * @param insertId insertId of beneficiary.\r\n     */\r\n\r\n    function releaseAll(uint256 insertId) external whenNotPaused {\r\n        require(allowReleaseAll, \"UnifarmVesting: invalid attempt\");\r\n\r\n        (bool isBeneficiary, address vestAddress, uint256 claimTokens) =\r\n            IUFARMBeneficiaryBook(bookAddress).isBeneficiary(_msgSender(), insertId);\r\n        require(isBeneficiary, \"UnifarmVesting: Invalid Beneficiary\");\r\n        require(vestAddress == address(this), \"UnifarmVesting: Invalid Vesting Address\");\r\n        require(\r\n            beneficiaryDetails[_msgSender()].releasedTokens < claimTokens,\r\n            \"UnifarmVesting: no claimable tokens remains\"\r\n        );\r\n\r\n        beneficiaryDetails[_msgSender()].releasedTokens = beneficiaryDetails[_msgSender()]\r\n            .releasedTokens\r\n            .add(claimTokens);\r\n        beneficiaryDetails[_msgSender()].lastRelease = block.timestamp;\r\n\r\n        address vestTokenAddress = factory.vestToken();\r\n        IERC20 vestToken = IERC20(vestTokenAddress);\r\n\r\n        require(\r\n            IERC20(vestToken).balanceOf(address(this)) > claimTokens,\r\n            \"UnifarmVesting: insufficient balance\"\r\n        );\r\n        vestToken.safeTransfer(_msgSender(), claimTokens);\r\n        emit Released(_msgSender(), claimTokens, _getNow());\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers vested tokens to beneficiary. function will fail when invalid beneficiary tries.\r\n     * @notice function will fail on when beneficiary try to release during cliff period.\r\n     * @notice beneficiary will be derived from UFARMBeneficiaryBook Contract.\r\n     * @param insertId insertId of beneficiary.\r\n     */\r\n\r\n    function release(uint256 insertId) external whenNotPaused {\r\n        require(!allowReleaseAll, \"UnifarmVesting: invalid attempt\");\r\n        (bool isBeneficiary, address vestAddress, uint256 claimTokens) =\r\n            IUFARMBeneficiaryBook(bookAddress).isBeneficiary(_msgSender(), insertId);\r\n\r\n        require(isBeneficiary, \"UnifarmVesting: Invalid Beneficiary\");\r\n        require(vestAddress == address(this), \"UnifarmVesting: Invalid Vesting Address\");\r\n        require(block.timestamp >= cliff, \"UnifarmVesting: cliff period exeception\");\r\n\r\n        require(\r\n            beneficiaryDetails[_msgSender()].releasedTokens <= claimTokens,\r\n            \"UnifarmVesting: no claimable tokens remains\"\r\n        );\r\n\r\n        address vestTokenAddress = factory.vestToken();\r\n        IERC20 vestToken = IERC20(vestTokenAddress);\r\n\r\n        uint256 unlockedTokens = getUnlockedTokens(_msgSender(), claimTokens);\r\n        distribute(_msgSender(), unlockedTokens, vestToken);\r\n    }\r\n\r\n    /**\r\n     * @notice distribution of tokens. it may be failed on insufficient balance or when user have no unlocked token.\r\n     * @param holder A beneficiary Address.\r\n     * @param unlockedTokens No of Unlocked Tokens.\r\n     */\r\n\r\n    function distribute(\r\n        address holder,\r\n        uint256 unlockedTokens,\r\n        IERC20 vestToken\r\n    ) internal {\r\n        require(unlockedTokens > 0, \"UnifarmVesting: You dont have unlocked tokens\");\r\n\r\n        beneficiaryDetails[holder].releasedTokens = beneficiaryDetails[holder].releasedTokens.add(\r\n            unlockedTokens\r\n        );\r\n        beneficiaryDetails[holder].lastRelease = block.timestamp;\r\n\r\n        require(\r\n            IERC20(vestToken).balanceOf(address(this)) > unlockedTokens,\r\n            \"UnifarmVesting: insufficient balance\"\r\n        );\r\n        vestToken.safeTransfer(holder, unlockedTokens);\r\n        emit Released(holder, unlockedTokens, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice derived block timestamp.\r\n     * @return block timestamp.\r\n     */\r\n\r\n    function _getNow() internal view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    /**\r\n    * @notice A View Function for calculating unlock tokens of beneficiary.\r\n     * @notice We have impose very fancy math here\r\n               if block.timestamp >= endTime `endTime.sub(lastRelease).div(unlockDuration).mul(eachPeriod)`       \r\n               else `_getNow().sub(lastRelease).div(unlockDuration).mul(eachPeriod)`     \r\n     * @return unlockedTokens (Beneficiary Unlocked Tokens).\r\n     */\r\n\r\n    function getUnlockedTokens(address holder, uint256 claimableTokens)\r\n        internal\r\n        view\r\n        returns (uint256 unlockedTokens)\r\n    {\r\n        Beneficiary storage user = beneficiaryDetails[holder];\r\n\r\n        uint256 tokens = paymentSpliter(claimableTokens);\r\n        uint256 lastRelease = user.lastRelease > 0 ? user.lastRelease : cliff;\r\n\r\n        uint256 eachPeriod = unlockDuration.div(1 days);\r\n\r\n        uint256 unlockedDays;\r\n\r\n        if (_getNow() >= endTime)\r\n            unlockedDays = ~~endTime.sub(lastRelease).div(unlockDuration).mul(eachPeriod);\r\n        else unlockedDays = ~~_getNow().sub(lastRelease).div(unlockDuration).mul(eachPeriod);\r\n\r\n        unlockedTokens = tokens.mul(unlockedDays);\r\n    }\r\n\r\n    /**\r\n     * @notice payment spliter claim-tokens/diff\r\n     * @param claim total claimble tokens.\r\n     * @return tokens no Of tokens he receive every unlock duration.\r\n     */\r\n    function paymentSpliter(uint256 claim) internal view returns (uint256 tokens) {\r\n        uint256 diff = ~~endTime.sub(cliff);\r\n        tokens = claim.div(diff.div(unlockDuration));\r\n    }\r\n\r\n    /**\r\n     * @notice set UFARM Beneficiary Address. called by only Owner.\r\n     * @param bookAddress_ UFARM Beneficiary Book Address.\r\n     */\r\n\r\n    function setBeneficiaryBook(address bookAddress_) external onlyOwner {\r\n        bookAddress = bookAddress_;\r\n    }\r\n\r\n    /**\r\n     * @notice safe Withdraw Vest Tokens function will failed on insufficient contract balance.\r\n     * @notice called by Only Owner.\r\n     * @param noOfTokens number of tokens to withdraw.\r\n     */\r\n    function safeWithdraw(IERC20 tokenAddress, uint256 noOfTokens) external onlyOwner {\r\n        require(address(tokenAddress) != address(0), \"Invalid Token Address\");\r\n        require(\r\n            tokenAddress.balanceOf(address(this)) >= noOfTokens,\r\n            \"UnifarmVesting: Insufficient Balance\"\r\n        );\r\n        // send the tokens\r\n        tokenAddress.safeTransfer(owner, noOfTokens);\r\n        emit Withdrawal(owner, noOfTokens, _getNow());\r\n    }\r\n\r\n    /**\r\n     * @notice for security concern we will paused this contract.\r\n     * @return true when not paused.\r\n     */\r\n\r\n    function doPause() external onlyOwner returns (bool) {\r\n        _pause();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice vice-versa action like pause.\r\n     * @return true when unpaused.\r\n     */\r\n\r\n    function doUnpause() external onlyOwner returns (bool) {\r\n        _unpause();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice update the factory instance called by onlyOwner.\r\n     * @return true on succeed.\r\n     */\r\n\r\n    function updateFactory(address _newFactory) external onlyOwner returns (bool) {\r\n        require(_newFactory != address(0), \"new factory address is zero.\");\r\n        factory = Factory(_newFactory);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File contracts/UnifarmFactory.sol\r\n\r\npragma solidity 0.8.0;\r\n\r\n/**\r\n * @title Unifarm Factory\r\n * @dev Unifarm factory for deploying different investor vesting contracts with multiple beneficiary functionality.\r\n * @author Opendefi by Oropocket.\r\n */\r\n\r\ncontract UnifarmFactory is Ownable {\r\n    /// @notice using safemath for maticmatics operations in soldity.\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice Vested Array to store Multiple Vesting Addresses.\r\n    address[] public vested;\r\n\r\n    /// @notice vestToken Address basically UNIFARM TOKEN Address.\r\n    address public vestToken;\r\n\r\n    /// @notice event Vested emitted on every createVest.\r\n    event Vested(address vestAddress, uint256 time);\r\n\r\n    /**\r\n    @notice construct UnifarmFactory Contract.\r\n    @param vestToken_ vestToken Address. \r\n     */\r\n\r\n    constructor(address vestToken_) Ownable(_msgSender()) {\r\n        vestToken = vestToken_;\r\n    }\r\n\r\n    /**\r\n     * @notice create and deploy multiple vest contracts.\r\n     * @notice can be called by onlyOwner.\r\n     * @param startTime vesting startTime in EPOCH.\r\n     * @param endTime vesting endTime in EPOCH.\r\n     * @param cliff duration when claim starts.\r\n     * @param unlockDuration every liner unlocking schedule in seconds.\r\n     * @param allowReleaseAll allow release All once.\r\n     * @return vestAddress A vesting address.\r\n     */\r\n\r\n    function createVest(\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        uint256 cliff,\r\n        uint256 unlockDuration,\r\n        bool allowReleaseAll\r\n    ) external onlyOwner returns (address vestAddress) {\r\n        vestAddress = address(\r\n            new UnifarmVesting(\r\n                _msgSender(),\r\n                startTime.add(cliff),\r\n                startTime,\r\n                startTime.add(endTime),\r\n                unlockDuration,\r\n                allowReleaseAll,\r\n                address(this)\r\n            )\r\n        );\r\n\r\n        vested.push(vestAddress);\r\n        emit Vested(vestAddress, block.timestamp);\r\n    }\r\n\r\n    /**\r\n    @notice get the vest child contracts length.\r\n    @return length of vested array. \r\n     */\r\n\r\n    function getVestLength() public view returns (uint256) {\r\n        return vested.length;\r\n    }\r\n\r\n    /**\r\n    @notice update the vest Token Address.\r\n    @return bool true.\r\n     */\r\n\r\n    function updateVestToken(address _newVestToken) external onlyOwner returns (bool) {\r\n        require(_newVestToken != address(0), \"new vest token is zero address\");\r\n        vestToken = _newVestToken;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vestToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vestAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Vested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowReleaseAll\",\"type\":\"bool\"}],\"name\":\"createVest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vestAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newVestToken\",\"type\":\"address\"}],\"name\":\"updateVestToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vested\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UnifarmFactory","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000040986a85b4cfcdb054a6cbfb1210194fee51af88","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3b3a137ef37a0bd454953dabfc5c78868b3458ffd3b3e7494b5737d511b807a0"}]}