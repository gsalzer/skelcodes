{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CLDSale_V2.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Crowdsale\\r\\n * @dev Crowdsale is a base contract for managing a token crowdsale,\\r\\n * allowing investors to purchase tokens with ether. This contract implements\\r\\n * such functionality in its most fundamental form and can be extended to provide additional\\r\\n * functionality and/or custom behavior.\\r\\n * The external interface represents the basic interface for purchasing tokens, and conforms\\r\\n * the base architecture for crowdsales. It is *not* intended to be modified / overridden.\\r\\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\\r\\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\\r\\n * behavior.\\r\\n */\\r\\ncontract Crowdsale is Context, ReentrancyGuard, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // The token being sold\\r\\n    IERC20 private _token;\\r\\n\\r\\n    // Address where funds are collected\\r\\n    address payable private _wallet;\\r\\n\\r\\n    // How many token units a buyer gets per wei.\\r\\n    // The rate is the conversion between wei and the smallest and indivisible token unit.\\r\\n    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\\r\\n    // 1 wei will give you 1 unit, or 0.001 TOK.\\r\\n    uint256 private _rate;\\r\\n\\r\\n    // Amount of wei raised\\r\\n    uint256 private _weiRaised;\\r\\n\\r\\n    /**\\r\\n     * Event for token purchase logging\\r\\n     * @param purchaser who paid for the tokens\\r\\n     * @param beneficiary who got the tokens\\r\\n     * @param value weis paid for purchase\\r\\n     * @param amount amount of tokens purchased\\r\\n     */\\r\\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @param rate Number of token units a buyer gets per wei\\r\\n     * @dev The rate is the conversion between wei and the smallest and indivisible\\r\\n     * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\\r\\n     * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\\r\\n     * @param wallet Address where collected funds will be forwarded to\\r\\n     * @param token Address of the token being sold\\r\\n     */\\r\\n    constructor (uint256 rate, address payable wallet, IERC20 token) public {\\r\\n        require(rate > 0, \\\"Crowdsale: rate is 0\\\");\\r\\n        require(wallet != address(0), \\\"Crowdsale: wallet is the zero address\\\");\\r\\n        require(address(token) != address(0), \\\"Crowdsale: token is the zero address\\\");\\r\\n\\r\\n        _rate = rate;\\r\\n        _wallet = wallet;\\r\\n        _token = token;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev fallback function ***DO NOT OVERRIDE***\\r\\n     * Note that other contracts will transfer funds with a base gas stipend\\r\\n     * of 2300, which is not enough to call buyTokens. Consider calling\\r\\n     * buyTokens directly when purchasing tokens from a contract.\\r\\n     */\\r\\n    fallback () external payable {\\r\\n        buyTokens(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the token being sold.\\r\\n     */\\r\\n    function token() public view returns (IERC20) {\\r\\n        return _token;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the address where funds are collected.\\r\\n     */\\r\\n    function wallet() public view returns (address payable) {\\r\\n        return _wallet;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the number of token units a buyer gets per wei.\\r\\n     */\\r\\n    function rate() public view returns (uint256) {\\r\\n        return _rate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set the number of token units a buyer gets per wei.\\r\\n     */\\r\\n    function setRate(uint256 newRate) public onlyOwner {\\r\\n        _rate = newRate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the amount of wei raised.\\r\\n     */\\r\\n    function weiRaised() public view returns (uint256) {\\r\\n        return _weiRaised;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev low level token purchase ***DO NOT OVERRIDE***\\r\\n     * This function has a non-reentrancy guard, so it shouldn't be called by\\r\\n     * another `nonReentrant` function.\\r\\n     * @param beneficiary Recipient of the token purchase\\r\\n     */\\r\\n    function buyTokens(address beneficiary) public virtual nonReentrant payable {\\r\\n        uint256 weiAmount = msg.value;\\r\\n        _preValidatePurchase(beneficiary, weiAmount);\\r\\n\\r\\n        // calculate token amount to be created\\r\\n        uint256 tokens = _getTokenAmount(weiAmount);\\r\\n\\r\\n        // update state\\r\\n        _weiRaised = _weiRaised.add(weiAmount);\\r\\n\\r\\n        _processPurchase(beneficiary, tokens);\\r\\n        emit TokensPurchased(_msgSender(), beneficiary, weiAmount, tokens);\\r\\n\\r\\n        _updatePurchasingState(beneficiary, weiAmount);\\r\\n\\r\\n        _forwardFunds();\\r\\n        _postValidatePurchase(beneficiary, weiAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\\r\\n     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\\r\\n     * Example from CappedCrowdsale.sol's _preValidatePurchase method:\\r\\n     *     super._preValidatePurchase(beneficiary, weiAmount);\\r\\n     *     require(weiRaised().add(weiAmount) <= cap);\\r\\n     * @param beneficiary Address performing the token purchase\\r\\n     * @param weiAmount Value in wei involved in the purchase\\r\\n     */\\r\\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\\r\\n        require(beneficiary != address(0), \\\"Crowdsale: beneficiary is the zero address\\\");\\r\\n        require(weiAmount != 0, \\\"Crowdsale: weiAmount is 0\\\");\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\\r\\n     * conditions are not met.\\r\\n     * @param beneficiary Address performing the token purchase\\r\\n     * @param weiAmount Value in wei involved in the purchase\\r\\n     */\\r\\n    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\\r\\n        // solhint-disable-previous-line no-empty-blocks\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\\r\\n     * its tokens.\\r\\n     * @param beneficiary Address performing the token purchase\\r\\n     * @param tokenAmount Number of tokens to be emitted\\r\\n     */\\r\\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) virtual internal {\\r\\n        _token.safeTransfer(beneficiary, tokenAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\\r\\n     * tokens.\\r\\n     * @param beneficiary Address receiving the tokens\\r\\n     * @param tokenAmount Number of tokens to be purchased\\r\\n     */\\r\\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\\r\\n        _deliverTokens(beneficiary, tokenAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\\r\\n     * etc.)\\r\\n     * @param beneficiary Address receiving the tokens\\r\\n     * @param weiAmount Value in wei involved in the purchase\\r\\n     */\\r\\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\\r\\n        // solhint-disable-previous-line no-empty-blocks\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override to extend the way in which ether is converted to tokens.\\r\\n     * @param weiAmount Value in wei to be converted into tokens\\r\\n     * @return Number of tokens that can be purchased with the specified _weiAmount\\r\\n     */\\r\\n    function _getTokenAmount(uint256 weiAmount) virtual internal view returns (uint256) {\\r\\n        return weiAmount.mul(_rate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Determines how ETH is stored/forwarded on purchases.\\r\\n     */\\r\\n    function _forwardFunds() virtual internal {\\r\\n        _wallet.transfer(msg.value);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title AllowanceCrowdsale\\r\\n * @dev Extension of Crowdsale where tokens are held by a wallet, which approves an allowance to the crowdsale.\\r\\n */\\r\\nabstract contract AllowanceCrowdsale is Crowdsale {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    address private _tokenWallet;\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor, takes token wallet address.\\r\\n     * @param tokenWallet Address holding the tokens, which has approved allowance to the crowdsale.\\r\\n     */\\r\\n    constructor (address tokenWallet) {\\r\\n        require(tokenWallet != address(0), \\\"AllowanceCrowdsale: token wallet is the zero address\\\");\\r\\n        _tokenWallet = tokenWallet;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the address of the wallet that will hold the tokens.\\r\\n     */\\r\\n    function tokenWallet() public view returns (address) {\\r\\n        return _tokenWallet;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks the amount of tokens left in the allowance.\\r\\n     * @return Amount of tokens left in the allowance\\r\\n     */\\r\\n    function remainingTokens() public view returns (uint256) {\\r\\n        return Math.min(token().balanceOf(_tokenWallet), token().allowance(_tokenWallet, address(this)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overrides parent behavior by transferring tokens from wallet.\\r\\n     * @param beneficiary Token purchaser\\r\\n     * @param tokenAmount Amount of tokens purchased\\r\\n     */\\r\\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) override internal {\\r\\n        token().safeTransferFrom(_tokenWallet, beneficiary, tokenAmount);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Referral{\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 private constant _referralPercent = 10;\\r\\n    mapping(address => uint256) internal _referralCommission;\\r\\n    mapping(address => uint256) private _commissionPaid;\\r\\n    mapping(address => address) private _parent;\\r\\n\\r\\n    /**\\r\\n     * Event for register new account\\r\\n     * @param beneficiary who got the tokens\\r\\n     * @param referrer Refer purchaser to purchase token\\r\\n     */\\r\\n    event Register(address indexed beneficiary, address referrer);\\r\\n\\r\\n    /**\\r\\n     * Event for token purchase logging\\r\\n     * @param beneficiary who got the tokens\\r\\n     * @param value weis paid for purchase\\r\\n     */\\r\\n    event CommissionPaid(address indexed beneficiary, uint256 value);\\r\\n\\r\\n    constructor(){\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev return amount of referral percent.\\r\\n     */\\r\\n    function referralPercent() public view returns (uint256) {\\r\\n        return _referralPercent;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev return amount of referral commission.\\r\\n     */\\r\\n    function referralCommission(address account) public view returns (uint256) {\\r\\n        return _referralCommission[account];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev return amount of referral commission.\\r\\n     */\\r\\n    function commissionPaid(address account) public view returns (uint256) {\\r\\n        return _commissionPaid[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter the address of parent participant.\\r\\n     */\\r\\n    function parent(address account) public view returns (address) {\\r\\n        return _parent[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter the address of parent participant.\\r\\n     */\\r\\n    function withdrawReferralCommission() public {\\r\\n        require(referralCommission(msg.sender) > 0, \\\"Your Commission must be greater than zero\\\");\\r\\n        uint256 value = _referralCommission[msg.sender];\\r\\n        _referralCommission[msg.sender] = 0;\\r\\n        _commissionPaid[msg.sender] = _commissionPaid[msg.sender].add(value);\\r\\n        payable(msg.sender).transfer(value);\\r\\n        emit CommissionPaid(msg.sender, value);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev check referrer account for purchase\\r\\n     * @param beneficiary Recipient of the token purchase\\r\\n     * @param referrer Refer purchaser to purchase token\\r\\n     */\\r\\n    function _preValidateReferrer(address beneficiary, address referrer) internal view {\\r\\n        require(referrer != beneficiary, \\\"Beneficiary can't refer to self\\\");\\r\\n        require(parent(beneficiary) == address(0) || parent(beneficiary) == referrer, \\\"Invalid referrer\\\");\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev update referrer account for purchase\\r\\n     * @param beneficiary Recipient of the token purchase\\r\\n     * @param referrer Refer purchaser to purchase token\\r\\n     */\\r\\n    function _updateReferral(address beneficiary, address referrer) virtual internal {\\r\\n        if (parent(beneficiary) == address(0)){\\r\\n            _parent[beneficiary] = referrer;\\r\\n            emit Register(beneficiary, referrer);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title CLDSale_V2\\r\\n * @dev The CLDSale enables the purchasing of CLD token at rates determined by the current block time.\\r\\n *      It requires the crowdsale contract address be given an allowance of 14000000 CLD enabling it to distribute the purchased tokens.\\r\\n */\\r\\ncontract CLDSale_V2 is AllowanceCrowdsale, Referral{\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor, calls the inherited classes constructors\\r\\n     * @param rate Number of token units a buyer gets per wei\\r\\n     * @param landToken The landToken address, must be an ERC20 contract\\r\\n     * @param landTokensOwner Address holding the tokens, which has approved allowance to the crowdsale\\r\\n     * @param fundWallet Address that will receive the deposited fund\\r\\n     */\\r\\n    constructor(uint256 rate, IERC20 landToken, address landTokensOwner, address payable fundWallet)\\r\\n        Crowdsale(rate, fundWallet, landToken)\\r\\n        AllowanceCrowdsale(landTokensOwner)\\r\\n        public\\r\\n    {\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev This function to purchase\\r\\n     * @param beneficiary Recipient of the token purchase\\r\\n     */\\r\\n    function buyTokens(address beneficiary) public override payable {\\r\\n        super.buyTokens(beneficiary);\\r\\n        wallet().transfer(msg.value.mul(10).div(100)); // transfer referral Commission to wallet\\r\\n    }\\r\\n\\r\\n    \\r\\n     /**\\r\\n     * @dev This function to purchase via reffral account\\r\\n     * @param beneficiary Recipient of the token purchase\\r\\n     * @param referrer Refer purchaser to purchase token\\r\\n     */\\r\\n    function buyTokensWithRefer(address beneficiary, address referrer) public payable {\\r\\n        _preValidateReferrer(beneficiary, referrer);\\r\\n        super.buyTokens(beneficiary);\\r\\n        _updateReferral(beneficiary, referrer);\\r\\n        _referralCommission[referrer] = _referralCommission[referrer].add(msg.value.mul(referralPercent()).div(100));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overrides function in the Crowdsale contract to enable a custom phased distribution\\r\\n     * @param weiAmount Value in wei to be converted into tokens\\r\\n     * @return Number of tokens that can be purchased with the specified weiAmount\\r\\n     */\\r\\n    function _getTokenAmount(uint256 weiAmount) override internal view returns (uint256) {\\r\\n        uint256 amount = weiAmount.mul(rate());\\r\\n        if (amount >= 500000 * 1e18) {\\r\\n            return amount.mul(120).div(100);\\r\\n        } else if (amount >= 200000 * 1e18) {\\r\\n            return amount.mul(114).div(100);\\r\\n        } else if (amount >= 70000 * 1e18) {\\r\\n            return amount.mul(109).div(100);\\r\\n        } else if (amount >= 30000 * 1e18) {\\r\\n            return amount.mul(106).div(100);\\r\\n        } else if (amount >= 10000 * 1e18) {\\r\\n            return amount.mul(104).div(100);\\r\\n        } else {\\r\\n            return amount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Determines how ETH is stored/forwarded on purchases.\\r\\n     */\\r\\n    function _forwardFunds() override internal {\\r\\n        wallet().transfer(msg.value.sub(msg.value.mul(referralPercent()).div(100)));\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"landToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"landTokensOwner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"fundWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buyTokensWithRefer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"commissionPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"parent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"referralCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReferralCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CLDSale_V2","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000be5ec791eeb4a12221094126e7c829bbb8c776fe000000000000000000000000d9f07b350537cdb89a4be9658539b5115988cbb5000000000000000000000000a1a6e865f08918fc2994386530fa9d169c9e1fc3","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}