{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token_sale/MarchandDeGlace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport {Proxied} from \\\"../vendor/hardhat-deploy/Proxied.sol\\\";\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {\\n    PausableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {\\n    _withdrawETH,\\n    _withdrawUnlockedGEL,\\n    _withdrawAllGEL\\n} from \\\"./functions/ProxyAdminFunctions.sol\\\";\\nimport {\\n    _isPoolOneOpen,\\n    _requirePoolOneIsOpen,\\n    _hasWhaleNeverBought,\\n    _requireWhaleNeverBought,\\n    _isBoughtWithinWhaleCaps,\\n    _requireBoughtWithinWhaleCaps,\\n    _isPoolOneCapExceeded,\\n    _requirePoolOneCapNotExceeded,\\n    _isPoolTwoOpen,\\n    _requirePoolTwoIsOpen,\\n    _hasDolphinNeverBought,\\n    _requireDolphinNeverBought,\\n    _isBoughtLteDolphinMax,\\n    _requireBoughtLteDolphinMax,\\n    _getRemainingGel,\\n    _getBuyableRemainingGel,\\n    _isSaleClosing,\\n    _isBoughtEqBuyableRemaining,\\n    _requireBoughtEqBuyableRemaining,\\n    _isBoughtGteDolphinMin,\\n    _requireBoughtGteDolphinMin,\\n    _isBoughtLteRemaining,\\n    _requireBoughtLteRemaining,\\n    _requireNotAddressZero,\\n    _requireNotLocked,\\n    _requireHasGELToUnlock\\n} from \\\"./functions/CheckerFunctions.sol\\\";\\nimport {\\n    _isWhale,\\n    _requireWhale,\\n    _isDolphin,\\n    _requireDolphin\\n} from \\\"./functions/SignatureFunctions.sol\\\";\\nimport {_wmul} from \\\"../vendor/DSMath.sol\\\";\\n\\n// BE CAREFUL: DOT NOT CHANGE THE ORDER OF INHERITED CONTRACT\\n// solhint-disable-next-line max-states-count\\ncontract MarchandDeGlace is\\n    Initializable,\\n    Proxied,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    struct Whale {\\n        address addr;\\n        bytes[2] signatures;\\n    }\\n\\n    struct Dolphin {\\n        address addr;\\n        bytes signature;\\n    }\\n\\n    struct MultiIsCreatureResult {\\n        address creature;\\n        bool isCreature;\\n    }\\n\\n    // solhint-disable-next-line max-line-length\\n    ////////////////////////////////////////// CONSTANTS AND IMMUTABLES ///////////////////////////////////\\n\\n    ///@dev GEL_TOTAL_SUPPLY 420,690,000.00\\n    /// TOTAL_GEL_CAP = GEL_TOTAL_SUPPLY * 4%\\n    uint256 public constant TOTAL_GEL_CAP = 16827600000000000000000000;\\n\\n    ///@dev POOL_ONE_GEL_CAP = TOTAL_GEL_CAP * (3/5);\\n    uint256 public constant POOL_ONE_GEL_CAP = 10096560000000000000000000;\\n\\n    ///@dev GELUSD = 0.2971309 $ and WHALE_MIN_USD = 5000 $\\n    /// WHALE_POOL_USD_PRICE = POOL_ONE_GEL_CAP * GELUSD\\n    /// we know that WHALE_MIN_USD / WHALE_POOL_USD_PRICE = WHALE_MIN_GEL / POOL_ONE_GEL_CAP\\n    /// so WHALE_MIN_GEL = ( WHALE_MIN_USD / WHALE_POOL_USD_PRICE ) * POOL_ONE_GEL_CAP\\n    uint256 public constant WHALE_MIN_GEL = 16827600226028326236012;\\n\\n    ///@dev WHALE_MAX_USD = 20000 $, with same reasoning\\n    /// we know that WHALE_MAX_USD / WHALE_POOL_USD_PRICE = WHALE_MAX_GEL / POOL_ONE_GEL_CAP\\n    /// so WHALE_MAX_GEL = ( WHALE_MAX_USD / WHALE_POOL_USD_PRICE ) * POOL_ONE_GEL_CAP\\n    uint256 public constant WHALE_MAX_GEL = 67310400904113304944050;\\n\\n    ///@dev DOLPHIN_MIN_USD = 1000 $ and DOLPHIN_POOL_GEL = 6731040\\n    /// DOLPHIN_POOL_USD_PRICE = DOLPHIN_POOL_GEL * GELUSD\\n    /// we know that DOLPHIN_MIN_USD / DOLPHIN_POOL_USD_PRICE = DOLPHIN_MIN_GEL / DOLPHIN_POOL_GEL\\n    /// so DOLPHIN_MIN_GEL = ( DOLPHIN_MIN_USD / DOLPHIN_POOL_USD_PRICE ) * DOLPHIN_POOL_GEL\\n    uint256 public constant DOLPHIN_MIN_GEL = 3365520045205665247202;\\n\\n    ///@dev DOLPHIN_MAX_USD = 4000 $, with same reasoning\\n    /// we know that DOLPHIN_MAX_USD / DOLPHIN_POOL_USD_PRICE = DOLPHIN_MAX_GEL / DOLPHIN_POOL_GEL\\n    /// so DOLPHIN_MAX_GEL = ( DOLPHIN_MAX_USD / DOLPHIN_POOL_USD_PRICE ) * DOLPHIN_POOL_GEL\\n    uint256 public constant DOLPHIN_MAX_GEL = 13462080180822660988810;\\n\\n    // Token that Marchand De Glace Sell.\\n    IERC20 public immutable GEL; // solhint-disable-line var-name-mixedcase\\n\\n    // Address signing user signature.\\n    address public immutable SIGNER; // solhint-disable-line var-name-mixedcase\\n\\n    // solhint-disable-next-line max-line-length\\n    /////////////////////////////////////////// STORAGE DATA //////////////////////////////////////////////////\\n\\n    // !!!!!!!!!!!!!!!!!!!!!!!! DO NOT CHANGE ORDER !!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n\\n    // Only settable by the Admin\\n    uint256 public gelPerEth;\\n    uint256 public poolOneStartTime;\\n    uint256 public poolTwoStartTime;\\n    uint256 public poolOneEndTime;\\n    uint256 public poolTwoEndTime;\\n    uint256 public lockUpEndTime;\\n\\n    mapping(address => uint256) public gelLockedByWhale;\\n    mapping(address => uint256) public gelBoughtByDolphin;\\n    uint256 public totalGelLocked;\\n\\n    // !!!!!!!! ADD NEW PROPERTIES HERE !!!!!!!\\n\\n    event LogBuyWhale(\\n        address indexed whale,\\n        uint256 ethPaid,\\n        uint256 gelBought,\\n        uint256 gelLocked,\\n        uint256 gelUnlocked\\n    );\\n    event LogBuyDolphin(\\n        address indexed dolphin,\\n        uint256 ethPaid,\\n        uint256 gelBought\\n    );\\n    event LogWithdrawLockedGEL(\\n        address indexed whale,\\n        address indexed to,\\n        uint256 gelWithdrawn\\n    );\\n\\n    // solhint-disable-next-line func-param-name-mixedcase, var-name-mixedcase\\n    constructor(IERC20 _GEL, address _SIGNER) {\\n        GEL = _GEL;\\n        SIGNER = _SIGNER;\\n    }\\n\\n    function initialize(\\n        uint256 _gelPerEth,\\n        uint256 _poolOneStartTime,\\n        uint256 _poolTwoStartTime,\\n        uint256 _poolOneEndTime,\\n        uint256 _poolTwoEndTime,\\n        uint256 _lockUpEndTime\\n    ) external initializer {\\n        require(_gelPerEth > 0, \\\"Ether to Gel price cannot be settable to 0\\\");\\n        require(\\n            _poolOneStartTime <= _poolOneEndTime,\\n            \\\"Pool One phase cannot end before the start\\\"\\n        );\\n        require(\\n            _poolOneEndTime <= _poolTwoStartTime,\\n            \\\"Pool One phase should be closed for starting pool two\\\"\\n        );\\n        require(\\n            _poolTwoStartTime <= _poolTwoEndTime,\\n            \\\"Pool Two phase cannot end before the start\\\"\\n        );\\n        require(\\n            _poolOneEndTime + 182 days <= _lockUpEndTime,\\n            \\\"Lockup should end at least 6 months after pool one phase 1 ending\\\"\\n        );\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n        gelPerEth = _gelPerEth;\\n        poolOneStartTime = _poolOneStartTime;\\n        poolTwoStartTime = _poolTwoStartTime;\\n        poolOneEndTime = _poolOneEndTime;\\n        poolTwoEndTime = _poolTwoEndTime;\\n        lockUpEndTime = _lockUpEndTime;\\n    }\\n\\n    // We are using onlyProxyAdmin, because admin = owner,\\n    // Proxied get admin from storage position\\n    // 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\n    // and EIP173Proxy store owner at same position.\\n    // https://github.com/wighawag/hardhat-deploy/blob/master/solc_0.7/proxy/EIP173Proxy.sol\\n    function setGelPerEth(uint256 _gelPerEth) external onlyProxyAdmin {\\n        gelPerEth = _gelPerEth;\\n    }\\n\\n    function setPhaseOneStartTime(uint256 _poolOneStartTime)\\n        external\\n        onlyProxyAdmin\\n    {\\n        poolOneStartTime = _poolOneStartTime;\\n    }\\n\\n    function setPhaseTwoStartTime(uint256 _poolTwoStartTime)\\n        external\\n        onlyProxyAdmin\\n    {\\n        poolTwoStartTime = _poolTwoStartTime;\\n    }\\n\\n    function setPhaseOneEndTime(uint256 _poolOneEndTime)\\n        external\\n        onlyProxyAdmin\\n    {\\n        poolOneEndTime = _poolOneEndTime;\\n    }\\n\\n    function setPhaseTwoEndTime(uint256 _poolTwoEndTime)\\n        external\\n        onlyProxyAdmin\\n    {\\n        poolTwoEndTime = _poolTwoEndTime;\\n    }\\n\\n    function setLockUpEndTime(uint256 _lockUpEndTime) external onlyProxyAdmin {\\n        lockUpEndTime = _lockUpEndTime;\\n    }\\n\\n    function pause() external onlyProxyAdmin {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyProxyAdmin {\\n        _unpause();\\n    }\\n\\n    function withdrawETH() external onlyProxyAdmin {\\n        _withdrawETH(_proxyAdmin(), address(this).balance);\\n    }\\n\\n    function withdrawUnlockedGEL() external onlyProxyAdmin {\\n        _withdrawUnlockedGEL(\\n            GEL,\\n            _proxyAdmin(),\\n            GEL.balanceOf(address(this)),\\n            totalGelLocked\\n        );\\n    }\\n\\n    function withdrawAllGEL() external onlyProxyAdmin whenPaused {\\n        _withdrawAllGEL(GEL, _proxyAdmin(), GEL.balanceOf(address(this)));\\n    }\\n\\n    // !!!!!!!!!!!!!!!!!!!!! FUNCTIONS CALLABLE BY WHALES AND DOLPHINS !!!!!!!!!!!!!!!!!!!!!!!!!\\n\\n    function buyWhale(bytes calldata _signature)\\n        external\\n        payable\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        _requirePoolOneIsOpen(poolOneStartTime, poolOneEndTime);\\n        _requireWhale(_signature, SIGNER);\\n        _requireWhaleNeverBought(gelLockedByWhale[msg.sender]);\\n\\n        // Amount of gel bought\\n        // TODO check precision issue here.\\n        uint256 gelBought = _wmul(msg.value, gelPerEth);\\n\\n        _requireBoughtWithinWhaleCaps(gelBought, WHALE_MIN_GEL, WHALE_MAX_GEL);\\n        _requirePoolOneCapNotExceeded(\\n            TOTAL_GEL_CAP,\\n            GEL.balanceOf(address(this)),\\n            totalGelLocked,\\n            gelBought,\\n            POOL_ONE_GEL_CAP\\n        );\\n\\n        uint256 gelLocked = _wmul(gelBought, 7 * 1e17); // 70% locked.\\n        totalGelLocked = totalGelLocked + gelLocked;\\n        gelLockedByWhale[msg.sender] = gelLocked;\\n\\n        GEL.safeTransfer(msg.sender, gelBought - gelLocked);\\n\\n        emit LogBuyWhale(\\n            msg.sender,\\n            msg.value,\\n            gelBought,\\n            gelLocked,\\n            gelBought - gelLocked\\n        );\\n    }\\n\\n    // solhint-disable-next-line function-max-lines\\n    function buyDolphin(bytes calldata _signature)\\n        external\\n        payable\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        _requirePoolTwoIsOpen(poolTwoStartTime, poolTwoEndTime);\\n        _requireDolphin(_signature, SIGNER);\\n        _requireWhaleNeverBought(gelLockedByWhale[msg.sender]);\\n        _requireDolphinNeverBought(gelBoughtByDolphin[msg.sender]);\\n\\n        // Amount of gel bought\\n        // TODO check precision issue here.\\n        uint256 gelBought = _wmul(msg.value, gelPerEth);\\n\\n        _requireBoughtLteDolphinMax(gelBought, DOLPHIN_MAX_GEL);\\n        uint256 remainingGel = _getRemainingGel(\\n            GEL.balanceOf(address(this)),\\n            totalGelLocked\\n        );\\n\\n        uint256 buyableRemainingGel = _getBuyableRemainingGel(\\n            remainingGel,\\n            gelPerEth\\n        ); // buyableRemainingGel <= remainingGel\\n\\n        if (_isSaleClosing(buyableRemainingGel, DOLPHIN_MIN_GEL))\\n            _requireBoughtEqBuyableRemaining(gelBought, buyableRemainingGel);\\n        else {\\n            _requireBoughtGteDolphinMin(gelBought, DOLPHIN_MIN_GEL);\\n            _requireBoughtLteRemaining(gelBought, remainingGel);\\n        }\\n\\n        gelBoughtByDolphin[msg.sender] = gelBought;\\n\\n        GEL.safeTransfer(msg.sender, gelBought);\\n\\n        emit LogBuyDolphin(msg.sender, msg.value, gelBought);\\n    }\\n\\n    function withdrawLockedGEL(address _to)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        _requireNotAddressZero(_to);\\n        _requireNotLocked(lockUpEndTime);\\n        _requireHasGELToUnlock(gelLockedByWhale[msg.sender]);\\n\\n        uint256 gelWithdrawn = gelLockedByWhale[msg.sender];\\n        delete gelLockedByWhale[msg.sender];\\n\\n        totalGelLocked = totalGelLocked - gelWithdrawn;\\n\\n        GEL.safeTransfer(_to, gelWithdrawn);\\n\\n        emit LogWithdrawLockedGEL(msg.sender, _to, gelWithdrawn);\\n    }\\n\\n    // ======== HELPERS =======\\n\\n    function canBuyWhale(\\n        address _whale,\\n        bytes calldata _signature,\\n        uint256 _ethToSell\\n    ) external view returns (bool) {\\n        uint256 gelToBuy = getGELToBuy(_ethToSell);\\n        return\\n            !paused() &&\\n            isPoolOneOpen() &&\\n            isWhale(_whale, _signature) &&\\n            hasWhaleNeverBought(_whale) &&\\n            isBoughtWithinWhaleCaps(gelToBuy) &&\\n            !isPoolOneCapExceeded(gelToBuy);\\n    }\\n\\n    function canBuyDolphin(\\n        address _dolphin,\\n        bytes calldata _signature,\\n        uint256 _ethToSell\\n    ) external view returns (bool) {\\n        uint256 gelToBuy = getGELToBuy(_ethToSell);\\n        return\\n            !paused() &&\\n            isPoolTwoOpen() &&\\n            isDolphin(_dolphin, _signature) &&\\n            hasWhaleNeverBought(_dolphin) &&\\n            hasDolphinNeverBought(_dolphin) &&\\n            isBoughtLteDolphinMax(gelToBuy) &&\\n            (\\n                isSaleClosing()\\n                    ? isBoughtEqBuyableRemaining(gelToBuy)\\n                    : isBoughtGteDolphinMin(gelToBuy) &&\\n                        isBoughtLteRemaining(gelToBuy)\\n            );\\n    }\\n\\n    function getGELToBuy(uint256 _ethToSell) public view returns (uint256) {\\n        return _wmul(_ethToSell, gelPerEth);\\n    }\\n\\n    function isPoolOneOpen() public view returns (bool) {\\n        return _isPoolOneOpen(poolOneStartTime, poolOneEndTime);\\n    }\\n\\n    function isWhale(address _whale, bytes calldata _signature)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _isWhale(_whale, _signature, SIGNER);\\n    }\\n\\n    function multiIsWhale(Whale[] calldata _whales)\\n        public\\n        view\\n        returns (MultiIsCreatureResult[] memory results)\\n    {\\n        results = new MultiIsCreatureResult[](_whales.length);\\n\\n        for (uint256 i; i < _whales.length; i++) {\\n            MultiIsCreatureResult memory result = MultiIsCreatureResult({\\n                creature: _whales[i].addr,\\n                isCreature: isWhale(\\n                    _whales[i].addr,\\n                    _whales[i].signatures[0]\\n                ) && isDolphin(_whales[i].addr, _whales[i].signatures[1])\\n            });\\n            results[i] = result;\\n        }\\n    }\\n\\n    function hasWhaleNeverBought(address _whale) public view returns (bool) {\\n        return _hasWhaleNeverBought(gelLockedByWhale[_whale]);\\n    }\\n\\n    function isPoolOneCapExceeded(uint256 _gelToBuy)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return\\n            _isPoolOneCapExceeded(\\n                TOTAL_GEL_CAP,\\n                GEL.balanceOf((address(this))),\\n                totalGelLocked,\\n                _gelToBuy,\\n                POOL_ONE_GEL_CAP\\n            );\\n    }\\n\\n    function getRemainingGelPoolOne() public view returns (uint256) {\\n        return\\n            block.timestamp < poolOneEndTime // solhint-disable-line not-rely-on-time\\n                ? POOL_ONE_GEL_CAP -\\n                    (TOTAL_GEL_CAP -\\n                        GEL.balanceOf(address(this)) +\\n                        totalGelLocked)\\n                : 0;\\n    }\\n\\n    function isPoolTwoOpen() public view returns (bool) {\\n        return _isPoolTwoOpen(poolTwoStartTime, poolTwoEndTime);\\n    }\\n\\n    function isDolphin(address _dolphin, bytes calldata _signature)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _isDolphin(_dolphin, _signature, SIGNER);\\n    }\\n\\n    function multiIsDolphin(Dolphin[] calldata _dolphins)\\n        public\\n        view\\n        returns (MultiIsCreatureResult[] memory results)\\n    {\\n        results = new MultiIsCreatureResult[](_dolphins.length);\\n\\n        for (uint256 i; i < _dolphins.length; i++) {\\n            MultiIsCreatureResult memory result = MultiIsCreatureResult({\\n                creature: _dolphins[i].addr,\\n                isCreature: isDolphin(_dolphins[i].addr, _dolphins[i].signature)\\n            });\\n            results[i] = result;\\n        }\\n    }\\n\\n    function hasDolphinNeverBought(address _dolphin)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _hasDolphinNeverBought(gelBoughtByDolphin[_dolphin]);\\n    }\\n\\n    function isSaleClosing() public view returns (bool) {\\n        return _isSaleClosing(getBuyableRemainingGel(), DOLPHIN_MIN_GEL);\\n    }\\n\\n    function isBoughtEqBuyableRemaining(uint256 _gelToBuy)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _isBoughtEqBuyableRemaining(_gelToBuy, getBuyableRemainingGel());\\n    }\\n\\n    function isBoughtLteRemaining(uint256 _gelBought)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _isBoughtLteRemaining(_gelBought, getRemainingGel());\\n    }\\n\\n    function getBuyableRemainingGel() public view returns (uint256) {\\n        return _getBuyableRemainingGel(getRemainingGel(), gelPerEth);\\n    }\\n\\n    function getRemainingGel() public view returns (uint256) {\\n        return _getRemainingGel(GEL.balanceOf(address(this)), totalGelLocked);\\n    }\\n\\n    function isBoughtWithinWhaleCaps(uint256 _gelBought)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            _isBoughtWithinWhaleCaps(_gelBought, WHALE_MIN_GEL, WHALE_MAX_GEL);\\n    }\\n\\n    function isBoughtLteDolphinMax(uint256 _gelBought)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        return _isBoughtLteDolphinMax(_gelBought, DOLPHIN_MAX_GEL);\\n    }\\n\\n    function isBoughtGteDolphinMin(uint256 _gelToBuy)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        return _isBoughtGteDolphinMin(_gelToBuy, DOLPHIN_MIN_GEL);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token_sale/functions/CheckerFunctions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport {_wmul} from \\\"../../vendor/DSMath.sol\\\";\\n\\n// solhint-disable\\n\\n// PoolOne/Whale checkers\\n\\nfunction _isPoolOneOpen(uint256 _poolOneStartTime, uint256 _poolOneEndTime)\\n    view\\n    returns (bool)\\n{\\n    return\\n        _poolOneStartTime <= block.timestamp &&\\n        _poolOneEndTime > block.timestamp;\\n}\\n\\nfunction _requirePoolOneIsOpen(\\n    uint256 _poolOneStartTime,\\n    uint256 _poolOneEndTime\\n) view {\\n    require(\\n        _isPoolOneOpen(_poolOneStartTime, _poolOneEndTime),\\n        \\\"Pool One is not open\\\"\\n    );\\n}\\n\\nfunction _hasWhaleNeverBought(uint256 _gelLockedByWhaleAmt)\\n    pure\\n    returns (bool)\\n{\\n    return _gelLockedByWhaleAmt == 0;\\n}\\n\\nfunction _requireWhaleNeverBought(uint256 _gelLockedByWhaleAmt) pure {\\n    require(\\n        _hasWhaleNeverBought(_gelLockedByWhaleAmt),\\n        \\\"Whale had already bought GEL\\\"\\n    );\\n}\\n\\nfunction _isBoughtWithinWhaleCaps(\\n    uint256 _gelBought,\\n    uint256 _whaleMinGel,\\n    uint256 _whaleMaxGel\\n) pure returns (bool) {\\n    return _gelBought >= _whaleMinGel && _gelBought <= _whaleMaxGel;\\n}\\n\\nfunction _requireBoughtWithinWhaleCaps(\\n    uint256 _gelBought,\\n    uint256 _whaleMinGel,\\n    uint256 _whaleMaxGel\\n) pure {\\n    require(\\n        _isBoughtWithinWhaleCaps(_gelBought, _whaleMinGel, _whaleMaxGel),\\n        \\\"User buying amount is outside of Whale CAPs\\\"\\n    );\\n}\\n\\nfunction _isPoolOneCapExceeded(\\n    uint256 _totalGelCap,\\n    uint256 _marchandDeGlaceGelBalance,\\n    uint256 _totalGelLocked,\\n    uint256 _gelBought,\\n    uint256 _poolOneGelCap\\n) pure returns (bool) {\\n    return\\n        _totalGelCap -\\n            _marchandDeGlaceGelBalance +\\n            _totalGelLocked +\\n            _gelBought >\\n        _poolOneGelCap;\\n}\\n\\nfunction _requirePoolOneCapNotExceeded(\\n    uint256 _totalGelCap,\\n    uint256 _marchandDeGlaceGelBalance,\\n    uint256 _totalGelLocked,\\n    uint256 _gelBought,\\n    uint256 _poolOneGelCap\\n) pure {\\n    require(\\n        !_isPoolOneCapExceeded(\\n            _totalGelCap,\\n            _marchandDeGlaceGelBalance,\\n            _totalGelLocked,\\n            _gelBought,\\n            _poolOneGelCap\\n        ),\\n        \\\"Whale pool hasn't enough GEL Token.\\\"\\n    );\\n}\\n\\n// PoolTwo/Dolphin checkers\\n\\nfunction _isPoolTwoOpen(uint256 _poolTwoStartTime, uint256 _poolTwoEndTime)\\n    view\\n    returns (bool)\\n{\\n    return\\n        _poolTwoStartTime <= block.timestamp &&\\n        _poolTwoEndTime > block.timestamp;\\n}\\n\\nfunction _requirePoolTwoIsOpen(\\n    uint256 _poolTwoStartTime,\\n    uint256 _poolTwoEndTime\\n) view {\\n    require(\\n        _isPoolTwoOpen(_poolTwoStartTime, _poolTwoEndTime),\\n        \\\"Pool Two is not open\\\"\\n    );\\n}\\n\\nfunction _hasDolphinNeverBought(uint256 _gelBoughtByDolphin)\\n    pure\\n    returns (bool)\\n{\\n    return _gelBoughtByDolphin == 0;\\n}\\n\\nfunction _requireDolphinNeverBought(uint256 _gelBoughtByDolphin) pure {\\n    require(\\n        _hasDolphinNeverBought(_gelBoughtByDolphin),\\n        \\\"Dolphin had already bought GEL\\\"\\n    );\\n}\\n\\nfunction _isBoughtLteDolphinMax(uint256 _gelBought, uint256 _dolphinMaxGel)\\n    pure\\n    returns (bool)\\n{\\n    return _gelBought <= _dolphinMaxGel;\\n}\\n\\nfunction _requireBoughtLteDolphinMax(uint256 _gelBought, uint256 _dolphinMaxGel)\\n    pure\\n{\\n    require(\\n        _isBoughtLteDolphinMax(_gelBought, _dolphinMaxGel),\\n        \\\"User buying more than Dolphin max cap\\\"\\n    );\\n}\\n\\nfunction _getRemainingGel(\\n    uint256 _marchandDeGlaceGelBalance,\\n    uint256 _totalGelLocked\\n) pure returns (uint256) {\\n    return _marchandDeGlaceGelBalance - _totalGelLocked;\\n}\\n\\nfunction _getBuyableRemainingGel(uint256 _remainingGel, uint256 _gelPerEth)\\n    pure\\n    returns (uint256)\\n{\\n    return _wmul((_remainingGel * 1e18) / _gelPerEth, _gelPerEth);\\n}\\n\\nfunction _isSaleClosing(\\n    uint256 _marchandDeGlaceRemainingGel,\\n    uint256 _dolphinMinGel\\n) pure returns (bool) {\\n    return _marchandDeGlaceRemainingGel < _dolphinMinGel;\\n}\\n\\nfunction _isBoughtEqBuyableRemaining(\\n    uint256 _gelBought,\\n    uint256 _marchandDeGlaceBuyableRemainingGel\\n) pure returns (bool) {\\n    return _gelBought == _marchandDeGlaceBuyableRemainingGel;\\n}\\n\\nfunction _requireBoughtEqBuyableRemaining(\\n    uint256 _gelBought,\\n    uint256 _marchandDeGlaceBuyableRemainingGel\\n) pure {\\n    require(\\n        _isBoughtEqBuyableRemaining(\\n            _gelBought,\\n            _marchandDeGlaceBuyableRemainingGel\\n        ),\\n        \\\"Last buyer should buy the exact buyable remaining.\\\"\\n    );\\n}\\n\\nfunction _isBoughtGteDolphinMin(uint256 _gelBought, uint256 _dolphinMinGel)\\n    pure\\n    returns (bool)\\n{\\n    return _gelBought >= _dolphinMinGel;\\n}\\n\\nfunction _requireBoughtGteDolphinMin(uint256 _gelBought, uint256 _dolphinMinGel)\\n    pure\\n{\\n    require(\\n        _isBoughtGteDolphinMin(_gelBought, _dolphinMinGel),\\n        \\\"User buying less than Dolphin min cap\\\"\\n    );\\n}\\n\\nfunction _isBoughtLteRemaining(\\n    uint256 _gelBought,\\n    uint256 _marchandDeGlaceRemainingGel\\n) pure returns (bool) {\\n    return _gelBought <= _marchandDeGlaceRemainingGel;\\n}\\n\\nfunction _requireBoughtLteRemaining(\\n    uint256 _gelBought,\\n    uint256 _marchandDeGlaceRemainingGel\\n) pure {\\n    require(\\n        _isBoughtLteRemaining(_gelBought, _marchandDeGlaceRemainingGel),\\n        \\\"buyDolphin: GEL buy cap exceeded.\\\"\\n    );\\n}\\n\\n// Whale unlock\\n\\nfunction _requireNotAddressZero(address _to) pure {\\n    require(_to != address(0), \\\"_to == AddressZero\\\");\\n}\\n\\nfunction _requireNotLocked(uint256 _lockUpEndTime) view {\\n    require(_lockUpEndTime < block.timestamp, \\\"Still in lock time.\\\");\\n}\\n\\nfunction _requireHasGELToUnlock(uint256 _gelLockedByWhaleAmt) pure {\\n    require(_gelLockedByWhaleAmt > 0, \\\"Whale has no GEL to unlock.\\\");\\n}\\n\\n// Whale unlock\\n\"\r\n    },\r\n    \"contracts/token_sale/functions/ProxyAdminFunctions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n// solhint-disable-next-line private-vars-leading-underscore, func-visibility\\nfunction _withdrawETH(address _receiver, uint256 _amount) {\\n    Address.sendValue(payable(_receiver), _amount);\\n}\\n\\n// solhint-disable-next-line private-vars-leading-underscore, func-visibility\\nfunction _withdrawUnlockedGEL(\\n    IERC20 _GEL, // solhint-disable-line func-param-name-mixedcase , var-name-mixedcase\\n    address _receiver,\\n    uint256 _gelBalance,\\n    uint256 _totalGelLocked\\n) {\\n    SafeERC20.safeTransfer(_GEL, _receiver, _gelBalance - _totalGelLocked);\\n}\\n\\n// solhint-disable-next-line private-vars-leading-underscore, func-visibility\\nfunction _withdrawAllGEL(\\n    IERC20 _GEL, // solhint-disable-line func-param-name-mixedcase , var-name-mixedcase\\n    address _receiver,\\n    uint256 _gelBalance\\n) {\\n    SafeERC20.safeTransfer(_GEL, _receiver, _gelBalance);\\n}\\n\"\r\n    },\r\n    \"contracts/token_sale/functions/SignatureFunctions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n// solhint-disable\\n\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nfunction _isWhale(\\n    address _whale,\\n    bytes calldata _signature,\\n    address _signer\\n) pure returns (bool) {\\n    return _recover(_getWitness(true, _whale), _signature) == _signer;\\n}\\n\\nfunction _requireWhale(bytes calldata _signature, address _signer) view {\\n    require(\\n        _isWhale(msg.sender, _signature, _signer),\\n        \\\"Not whitelisted or wrong whale/dolphin type\\\"\\n    );\\n}\\n\\nfunction _isDolphin(\\n    address _dolphin,\\n    bytes calldata _signature,\\n    address _signer\\n) pure returns (bool) {\\n    return _recover(_getWitness(false, _dolphin), _signature) == _signer;\\n}\\n\\nfunction _requireDolphin(bytes calldata _signature, address _signer) view {\\n    require(\\n        _isDolphin(msg.sender, _signature, _signer),\\n        \\\"Not whitelisted or wrong whale/dolphin type\\\"\\n    );\\n}\\n\\nfunction _recover(bytes32 _hash, bytes calldata _signature)\\n    pure\\n    returns (address)\\n{\\n    return ECDSA.recover(_hash, _signature);\\n}\\n\\nfunction _getWitness(bool _whale, address _user) pure returns (bytes32) {\\n    return\\n        ECDSA.toEthSignedMessageHash(\\n            keccak256(abi.encodePacked(_whale, _user))\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/vendor/DSMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n// solhint-disable\\nfunction _add(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n}\\n\\nfunction _sub(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n}\\n\\nfunction _mul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n}\\n\\nfunction _min(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction _max(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nfunction _imin(int256 x, int256 y) pure returns (int256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction _imax(int256 x, int256 y) pure returns (int256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nuint256 constant WAD = 10**18;\\nuint256 constant RAY = 10**27;\\nuint256 constant QUA = 10**4;\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction _wmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = _add(_mul(x, y), WAD / 2) / WAD;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction _rmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = _add(_mul(x, y), RAY / 2) / RAY;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction _wdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = _add(_mul(x, WAD), y / 2) / y;\\n}\\n\\n//rounds to zero if x*y < RAY / 2\\nfunction _rdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = _add(_mul(x, RAY), y / 2) / y;\\n}\\n\\n// This famous algorithm is called \\\"exponentiation by squaring\\\"\\n// and calculates x^n with x as fixed-point and n as regular unsigned.\\n//\\n// It's O(log n), instead of O(n) for naive repeated multiplication.\\n//\\n// These facts are why it works:\\n//\\n//  If n is even, then x^n = (x^2)^(n/2).\\n//  If n is odd,  then x^n = x * x^(n-1),\\n//   and applying the equation for even x gives\\n//    x^n = x * (x^2)^((n-1) / 2).\\n//\\n//  Also, EVM division is flooring and\\n//    floor[(n-1) / 2] = floor[n / 2].\\n//\\nfunction _rpow(uint256 x, uint256 n) pure returns (uint256 z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n        x = _rmul(x, x);\\n\\n        if (n % 2 != 0) {\\n            z = _rmul(z, x);\\n        }\\n    }\\n}\\n\\n//rounds to zero if x*y < QUA / 2\\nfunction _qmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = _add(_mul(x, y), QUA / 2) / QUA;\\n}\\n\\n//rounds to zero if x*y < QUA / 2\\nfunction _qdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = _add(_mul(x, QUA), y / 2) / y;\\n}\\n\"\r\n    },\r\n    \"contracts/vendor/hardhat-deploy/Proxied.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(\\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\n            )\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_GEL\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_SIGNER\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dolphin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gelBought\",\"type\":\"uint256\"}],\"name\":\"LogBuyDolphin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whale\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gelBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gelLocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gelUnlocked\",\"type\":\"uint256\"}],\"name\":\"LogBuyWhale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whale\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gelWithdrawn\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawLockedGEL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOLPHIN_MAX_GEL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOLPHIN_MIN_GEL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GEL\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_ONE_GEL_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_GEL_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHALE_MAX_GEL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHALE_MIN_GEL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"buyDolphin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"buyWhale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dolphin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_ethToSell\",\"type\":\"uint256\"}],\"name\":\"canBuyDolphin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whale\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_ethToSell\",\"type\":\"uint256\"}],\"name\":\"canBuyWhale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gelBoughtByDolphin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gelLockedByWhale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelPerEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyableRemainingGel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethToSell\",\"type\":\"uint256\"}],\"name\":\"getGELToBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingGel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingGelPoolOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dolphin\",\"type\":\"address\"}],\"name\":\"hasDolphinNeverBought\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whale\",\"type\":\"address\"}],\"name\":\"hasWhaleNeverBought\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gelPerEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolOneStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolTwoStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolOneEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolTwoEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockUpEndTime\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gelToBuy\",\"type\":\"uint256\"}],\"name\":\"isBoughtEqBuyableRemaining\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gelToBuy\",\"type\":\"uint256\"}],\"name\":\"isBoughtGteDolphinMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gelBought\",\"type\":\"uint256\"}],\"name\":\"isBoughtLteDolphinMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gelBought\",\"type\":\"uint256\"}],\"name\":\"isBoughtLteRemaining\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gelBought\",\"type\":\"uint256\"}],\"name\":\"isBoughtWithinWhaleCaps\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dolphin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isDolphin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gelToBuy\",\"type\":\"uint256\"}],\"name\":\"isPoolOneCapExceeded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPoolOneOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPoolTwoOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSaleClosing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whale\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isWhale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockUpEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct MarchandDeGlace.Dolphin[]\",\"name\":\"_dolphins\",\"type\":\"tuple[]\"}],\"name\":\"multiIsDolphin\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creature\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCreature\",\"type\":\"bool\"}],\"internalType\":\"struct MarchandDeGlace.MultiIsCreatureResult[]\",\"name\":\"results\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes[2]\",\"name\":\"signatures\",\"type\":\"bytes[2]\"}],\"internalType\":\"struct MarchandDeGlace.Whale[]\",\"name\":\"_whales\",\"type\":\"tuple[]\"}],\"name\":\"multiIsWhale\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creature\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCreature\",\"type\":\"bool\"}],\"internalType\":\"struct MarchandDeGlace.MultiIsCreatureResult[]\",\"name\":\"results\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolOneEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolOneStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTwoEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTwoStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gelPerEth\",\"type\":\"uint256\"}],\"name\":\"setGelPerEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockUpEndTime\",\"type\":\"uint256\"}],\"name\":\"setLockUpEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolOneEndTime\",\"type\":\"uint256\"}],\"name\":\"setPhaseOneEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolOneStartTime\",\"type\":\"uint256\"}],\"name\":\"setPhaseOneStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolTwoEndTime\",\"type\":\"uint256\"}],\"name\":\"setPhaseTwoEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolTwoStartTime\",\"type\":\"uint256\"}],\"name\":\"setPhaseTwoStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGelLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllGEL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawLockedGEL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUnlockedGEL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MarchandDeGlace","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000015b7c0c907e4c6b9adaaaabc300c08991d6cea050000000000000000000000001af41728737f8bc40e9ea1a9e1a3b19f4db3bdf9","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}