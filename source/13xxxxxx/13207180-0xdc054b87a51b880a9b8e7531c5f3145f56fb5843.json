{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-09-05\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2021-08-18\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Counters.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev ERC721 token with storage based token URI management.\r\n */\r\nabstract contract ERC721URIStorage is ERC721 {\r\n    using Strings for uint256;\r\n\r\n    // Optional mapping for token URIs\r\n    mapping(uint256 => string) private _tokenURIs;\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\r\n\r\n        string memory _tokenURI = _tokenURIs[tokenId];\r\n        string memory base = _baseURI();\r\n\r\n        // If there is no base URI, return the token URI.\r\n        if (bytes(base).length == 0) {\r\n            return _tokenURI;\r\n        }\r\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\r\n        if (bytes(_tokenURI).length > 0) {\r\n            return string(abi.encodePacked(base, _tokenURI));\r\n        }\r\n\r\n        return super.tokenURI(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\r\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\r\n        _tokenURIs[tokenId] = _tokenURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual override {\r\n        super._burn(tokenId);\r\n\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n// File: contracts/PartyBones.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PartyBones is ERC721URIStorage, ERC721Enumerable, Ownable, Pausable {\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter public _mintedTokens;\r\n    uint internal constant MAX_Bones = 10300;\r\n    uint internal ticket_price = 60000000000000000; // 0.06 ETH\r\n    uint private prime_seed;\r\n    \r\n    // No more than 10,300 bones to be sold\r\n    modifier saleIsOpen{\r\n        require(_mintedTokens.current() < MAX_Bones, \"Sale end\");\r\n        _;\r\n    }\r\n    \r\n    // Modify sale price\r\n    function change_ticket_price(uint new_price) public onlyOwner returns(uint)\r\n    {\r\n        ticket_price = new_price;\r\n        return(new_price);\r\n    }\r\n    \r\n    // View price\r\n    function price() public view returns (uint256) {\r\n        return ticket_price; \r\n    }\r\n    \r\n    string private baseURI = \"\";\r\n    \r\n    constructor () payable ERC721(\"PB\", \"Party Bones\") {}\r\n    \r\n    mapping (uint256 => string) boneNames;\r\n    \r\n    mapping(address => bool) public authorised_contracts;\r\n    \r\n    // Contracts for Party Bone Merging authorised and removed here\r\n    function addAuthorisedAddress(address _address) public onlyOwner {\r\n        authorised_contracts[_address] = true;\r\n    }\r\n    \r\n    function removeAuthorisedAddress(address _address) public onlyOwner {\r\n        authorised_contracts[_address] = false;\r\n    }\r\n    \r\n    // Modifier to only alow merging contracts to interact with this function\r\n    modifier onlyAuthorised()\r\n    {\r\n        require(authorised_contracts[msg.sender]);\r\n        _;\r\n    }\r\n    \r\n    // set seed number for non-serialised minting\r\n    function set_seed_Prime(uint prime_number) onlyOwner public\r\n    {\r\n        prime_seed = prime_number;\r\n    }\r\n\r\n    // returns current token minting count\r\n    function check_mintedCount() view public returns (uint256)\r\n    {\r\n        return _mintedTokens.current();\r\n    }\r\n    \r\n    // modify the base URI \r\n    function change_base_URI(string memory new_base_URI)\r\n        onlyOwner\r\n        public\r\n    {\r\n        baseURI = new_base_URI;\r\n    }\r\n    \r\n    // check token's URI\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override(ERC721, ERC721URIStorage)\r\n        returns (string memory)\r\n    {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n    \r\n    // writing bone names as metadata associated with token\r\n    function set_tokenID_description(uint256 tokenId, string memory nameofbone)\r\n        onlyOwner\r\n        public\r\n    {\r\n        boneNames[tokenId] = nameofbone;\r\n    }\r\n    \r\n    function _baseURI() internal view override returns (string memory) {\r\n        return baseURI;\r\n    }\r\n    \r\n    // pause minting and merging\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n    \r\n    // unpause minting and merging \r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n    \r\n    // check name of a bone\r\n    function check_bone_ID_name(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        string memory nameofbone = boneNames[tokenId];\r\n        return nameofbone;\r\n    }\r\n    \r\n    \r\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\r\n        super._burn(tokenId);\r\n    }\r\n    \r\n    // burn Party Bone (I wouldn't!)\r\n    function burn(uint256 tokenid)\r\n        public\r\n        returns (uint256)\r\n    {\r\n        require(msg.sender == ownerOf(tokenid), \"This wallet does not own the tokenID!\");\r\n        _burn(tokenid);\r\n        return tokenid;\r\n    }\r\n    \r\n    // admin only function for burning in case something messes up\r\n    function burn_admin(uint256 tokenid)\r\n        public\r\n        onlyOwner\r\n        returns (uint256)\r\n    {\r\n        _burn(tokenid);\r\n        return tokenid;\r\n    }\r\n    \r\n    // bones are burned when merged for a limb\r\n    function burn_for_limb(uint256 tokenid)\r\n        public\r\n        onlyAuthorised\r\n        whenNotPaused\r\n        returns (uint256)\r\n    {\r\n        _burn(tokenid);\r\n        return tokenid;\r\n    }\r\n    \r\n    // primary sale function for the admin - for airdrops mainly and creator team\r\n    function mint_primary_admin(address address_, uint256 numberOfTokens)\r\n        public\r\n        onlyOwner\r\n        returns (uint256)\r\n    {\r\n        require(_mintedTokens.current() + numberOfTokens <= MAX_Bones, \"This exceeds the maximum number of Party Bones on sale!\");\r\n        for(uint256 i = 0; i < numberOfTokens; i++) {\r\n            uint256 newItemId  = (((prime_seed*_mintedTokens.current()^2))) % MAX_Bones + 1;\r\n            _mintedTokens.increment();\r\n            _mint(address_, newItemId);\r\n        }\r\n        \r\n        return _mintedTokens.current();\r\n    }\r\n    \r\n    // mint function for admin - in case something goes wrong \r\n    \r\n    function mint_admin(address address_, uint256[] memory tokenIds)\r\n        public\r\n        onlyOwner\r\n        returns (uint256[] memory)\r\n    {\r\n        for(uint256 i = 0; i < tokenIds.length; i++) {\r\n            _mint(address_, tokenIds[i]);\r\n        }\r\n        \r\n        return tokenIds;\r\n    }\r\n    \r\n    // mint your Party Bone!\r\n    function createBone(uint256 numberOfTokens)\r\n        public\r\n        payable\r\n        saleIsOpen\r\n        whenNotPaused\r\n    {   \r\n        require(numberOfTokens < 21, \"No more than 20 Tokens at one time!\");\r\n        require(_mintedTokens.current() + numberOfTokens <= MAX_Bones, \"This exceeds the maximum number of Party Bones on sale!\");\r\n        require(ticket_price * numberOfTokens <= msg.value, \"Please send correct amount\");\r\n        require(msg.sender == tx.origin, \"Can only mint through a wallet\");\r\n        for(uint256 i = 0; i < numberOfTokens; i++) {\r\n            uint256 newItemId  = (((prime_seed*_mintedTokens.current()^2))) % MAX_Bones + 1;\r\n            _mintedTokens.increment();\r\n            _mint(msg.sender, newItemId);\r\n        }\r\n    }\r\n    \r\n    // only owner - check contract balance\r\n    function checkContractBalance()\r\n        public\r\n        onlyOwner\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    // only owner - withdraw contract balance to wallet\r\n    function withdraw()\r\n        public\r\n        payable\r\n        onlyOwner\r\n    {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n    \r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        override(ERC721, ERC721Enumerable)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n    \r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\r\n        internal\r\n        override(ERC721, ERC721Enumerable)\r\n    {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n    \r\n    // retrieve tokens by owner\r\n    function retrieveTokens(address owner) public view returns (uint256[] memory tokens) {\r\n        uint256 iterator = balanceOf(owner);\r\n        uint256[] memory tokenlist = new uint256[](iterator);\r\n        for (uint256 i = 0; i < iterator; i++){\r\n            tokenlist[i] = tokenOfOwnerByIndex(owner, i);\r\n        }\r\n        return tokenlist;\r\n    }\r\n    \r\n    // retrieve names of tokens by owner\r\n    function retrieveTokenNames(address owner) external view returns (string[] memory tokens) {\r\n        uint256 iterator = balanceOf(owner);\r\n        string[] memory tokenlist = new string[](iterator);\r\n        for (uint256 i = 0; i < iterator; i++){\r\n            tokenlist[i] = check_bone_ID_name(tokenOfOwnerByIndex(owner, i));\r\n        }\r\n        return tokenlist;\r\n    }\r\n    \r\n}\r\n\r\ncontract PartyBonesMinter is Ownable, Pausable{\r\n    \r\n    mapping(address => uint256) public eligible_bones;\r\n    \r\n    constructor () payable {\r\n        eligible_bones[0x003c63EC6Dbe302504bfe1E0C0C771c89f46fe11] = 1;\r\n        eligible_bones[0x011A991Df27Fb53637B7319d3A43e91B5dA5b4E8] = 1;\r\n        eligible_bones[0x014C6B9e5EE1bFd155c129DF6cF228f396BE41c1] = 1;\r\n        eligible_bones[0x01e9432a589158228D061626c537Fb11bEF0873D] = 12;\r\n        eligible_bones[0x0282e055D3b2f7c0AD656952Ac1bB989FB6D0086] = 4;\r\n        eligible_bones[0x02E4F367fc7cb77d9b6818440648fC4dD5d21891] = 2;\r\n        eligible_bones[0x040845FE3c8F252C75bdeAdd61Ae00920f464662] = 1;\r\n        eligible_bones[0x06D30f1Fb36d648Baaf2042918b02137F9f876A9] = 3;\r\n        eligible_bones[0x080aD9D187b0fd917313BcB99B9fED79EC6b5AAe] = 1;\r\n        eligible_bones[0x0832221806dF52ff6759fF283cD47Eb52B86C2fa] = 3;\r\n        eligible_bones[0x08Bf8D6fA77F7Bc937E62DCb7a5d1201890C48fA] = 2;\r\n        eligible_bones[0x08d02488C97855325Cb7Fb705BbD766416eAC017] = 1;\r\n        eligible_bones[0x09306cFea01e396F89De0Ee00474657b4C86D55b] = 3;\r\n        eligible_bones[0x09d520c793dd698bd910984adB4c4718bb20bEdA] = 1;\r\n        eligible_bones[0x0A2F11af1697F563d602Ec0c7Fed18E53Cc307C2] = 1;\r\n        eligible_bones[0x0aF9983A787B7eaA9cb6f18D872476B536c922E5] = 4;\r\n        eligible_bones[0x0B2b93c8A18e3AAef1ff106613c3C222714388C6] = 1;\r\n        eligible_bones[0x0C3048115677F780CABf52532A98fd0a1a19893E] = 1;\r\n        eligible_bones[0x0d0158301E71511022362DDDd81Cb34579fd7c25] = 1;\r\n        eligible_bones[0x0D567F4BF07BC32865595FC9b43db40cB35Ea594] = 3;\r\n        eligible_bones[0x0De6716111df03b5FeF262154D4850A4f7455b3B] = 3;\r\n        eligible_bones[0x0eB6bB47a071F40CCaE5f2534666Ed9b7ADFDA16] = 2;\r\n        eligible_bones[0x0F03231440F6624881576ee8C5e0C3278815E3B0] = 3;\r\n        eligible_bones[0x0fe60E55a8C0700b47d4a2663079c445Fc4A5893] = 1;\r\n        eligible_bones[0x100f2EF1D7Ae71fDD792Fd3F2C18ef96C44d916F] = 1;\r\n        eligible_bones[0x1028a8BfbA4AD62caf408Fc6c541F42A9015b0c0] = 2;\r\n        eligible_bones[0x106b1d3E1dAF0b6Da0D4c86C23900980bFc92Ce7] = 8;\r\n        eligible_bones[0x11a3c58F9aEeC448F9e3AC45796243c63757D402] = 1;\r\n        eligible_bones[0x13a9518A451EDaD79079753c89Cc7197FF3f570A] = 3;\r\n        eligible_bones[0x15af8DF7541d8d1264dd14aC6baddB04b98A89aa] = 2;\r\n        eligible_bones[0x15b5E2A732D946D79dca83D6EC47F1C7062eB515] = 1;\r\n        eligible_bones[0x16369Ac319D02b8dc7Ed74Fc45D496F06D5cFD60] = 2;\r\n        eligible_bones[0x166a896bEC257b46E345BA0C207769A381ce25fC] = 1;\r\n        eligible_bones[0x167f2028e2410E0A5C51c62F63B8c1d4D26f4cE4] = 5;\r\n        eligible_bones[0x170b7ddA174f3EEb659b6894AE94fEf93495c675] = 1;\r\n        eligible_bones[0x17853cbED35F3153DC144D709e01575cb75d326b] = 2;\r\n        eligible_bones[0x17b737e3142330b7c21290568f43da1e75C55c7B] = 3;\r\n        eligible_bones[0x180333e4433F2e1122D725151Af7E6db97d1C660] = 3;\r\n        eligible_bones[0x184DFd1197187c8fFc88Da905fBaCd31b739fA41] = 8;\r\n        eligible_bones[0x1878D0B936CEfcC09Bee7B1405f7E921028Ac81F] = 2;\r\n        eligible_bones[0x1896B1a2836D24c7A0714CD5593c4b4064d3B031] = 1;\r\n        eligible_bones[0x18BD7cC5A8add1B36346e3a723521e5db4eD1E50] = 5;\r\n        eligible_bones[0x19308b90080eD48B2617db0943cC33482497c937] = 6;\r\n        eligible_bones[0x1b3ae8099Ab8d9CEF0A7509b419B559e58Ce2652] = 2;\r\n        eligible_bones[0x1b79F778Dd23Df64B7f1034Dc339615BdA57A931] = 1;\r\n        eligible_bones[0x1b96d78736c106e8a90997B4c8ae7B2112d67d6d] = 6;\r\n        eligible_bones[0x1BBb2295Ae8EBc67BB20B80Ec0788194d98b886c] = 2;\r\n        eligible_bones[0x1cCb2f538e97568E3C363d3191aCaE50ba8389B8] = 1;\r\n        eligible_bones[0x1CFEEE9b366E103b89Fd082530aAE7Cbb1Ca725B] = 18;\r\n        eligible_bones[0x1D5C30676cA03adAe00257568B830C8D424A1e53] = 3;\r\n        eligible_bones[0x1d92c03E25a57c0e91a675b496456ab5BB695D36] = 3;\r\n        eligible_bones[0x1e121993b4A8bC79D18A4C409dB84c100FFf25F5] = 3;\r\n        eligible_bones[0x1ef24F12aBF108B2516F2D0cc31892eC595AE292] = 1;\r\n        eligible_bones[0x21f38BF3A6706dEb5a3282DE523b9e440DA7868a] = 5;\r\n        eligible_bones[0x22801922544feFc518e1c80FBA92f633fE58161b] = 4;\r\n        eligible_bones[0x2291E649Cc1B0a4BcFf64ab64574E35F2AE49F11] = 71;\r\n        eligible_bones[0x23046D9aa616A390Aab7fAbAFC944A593141a66a] = 6;\r\n        eligible_bones[0x2342989c3E1DC7A12cE91490B4D49A74FCC4D9B8] = 16;\r\n        eligible_bones[0x23AE543c62F4602e8F143334DFc6f3d1778F35Ae] = 1;\r\n        eligible_bones[0x245c157530233a165Cd9BD2a15C5229E87e89fB8] = 2;\r\n        eligible_bones[0x25255a36287c9DF4B2363Fd9F998CEEc7F12BEf0] = 1;\r\n        eligible_bones[0x25C5Cc4BC8D15fef28140CB78735A5000DCBa337] = 1;\r\n        eligible_bones[0x261013b6398b6ad2276e8f7Edeb556DC197CB182] = 1;\r\n        eligible_bones[0x271ae5A9e689ee106EeF2E70861122Aaf2A3135f] = 1;\r\n        eligible_bones[0x27308C85BC218Bd1C3b946F76fb7b40C50d91479] = 1;\r\n        eligible_bones[0x273Dc0347CB3AbA026F8A4704B1E1a81a3647Cf3] = 1;\r\n        eligible_bones[0x27dcB67fe978CC420F8aC470dC22A0699d90da29] = 2;\r\n        eligible_bones[0x2800D55C7d96206a3e51977b418a8AA555708726] = 1;\r\n        eligible_bones[0x2947025a00F8CfA01a5Fb824bd1E98e129F178Cb] = 16;\r\n        eligible_bones[0x294803520A1E7B671C105C8a3D94836f40B2b557] = 15;\r\n        eligible_bones[0x29833F79F08C6093B3A20D584cB3aA98b0c787d3] = 1;\r\n        eligible_bones[0x2a4A017FB570f70d84749f805a808F658d72B121] = 1;\r\n        eligible_bones[0x2B2C869539188c28c202D086fE99c554493f72DD] = 3;\r\n        eligible_bones[0x2d1d925F7144a3Dd56913eB4bBd011b52dc2A2F3] = 3;\r\n        eligible_bones[0x2D3ad90fCf272135009520A310f486D12c9a4231] = 1;\r\n        eligible_bones[0x2dBf90d5999a42C819F2950eE004d074046C87a4] = 12;\r\n        eligible_bones[0x2e592c580435AD7794591FD9bdeF3af86e856D7f] = 2;\r\n        eligible_bones[0x2e61f3E5E130a9B46A49cEE5B0539A08aD0F355B] = 3;\r\n        eligible_bones[0x2f05A1f7ED11734cACB7f62F979eecB09E68b360] = 3;\r\n        eligible_bones[0x316E30d702f47db26Cd925ca4b75ce019594e80F] = 6;\r\n        eligible_bones[0x33593dce4236dc7c740f19512C2ac9Cb3A29A5E4] = 1;\r\n        eligible_bones[0x348eff9be6EBF601000221F869EFbE26560CE4EF] = 2;\r\n        eligible_bones[0x34EE160D57C7C14D018B6F751fAfd1060b560dB6] = 5;\r\n        eligible_bones[0x36165f895d6674DA2cD19aDE30869eDDCAb1DB38] = 3;\r\n        eligible_bones[0x36aB75710650754c32e4850D2ad050849EBb5899] = 1;\r\n        eligible_bones[0x37910f3C21912f1689dB81264B29711Cc40d263a] = 1;\r\n        eligible_bones[0x37BFc643769fEd7217178b19bC4A6E6365b17082] = 1;\r\n        eligible_bones[0x38e76C87D7Bc4b0A5C31077D330804A4d0ee33f1] = 1;\r\n        eligible_bones[0x3B9a4ec140AB95B32f93F4dCD7Eedb589297B647] = 1;\r\n        eligible_bones[0x3C0AC57fDedFeD4e2EdD2bb7df464cE96dB2a5fE] = 1;\r\n        eligible_bones[0x3c521687604cE4B38d2E579EE7636069eB1355F6] = 4;\r\n        eligible_bones[0x3CFbC51d12d88EBf24196d951C5E05C665C049F2] = 4;\r\n        eligible_bones[0x3d267A32f84d14B22822301c2659556B8FAAD930] = 1;\r\n        eligible_bones[0x3DdeF70eec84Cd01Fd23758f0C399C839D840F2b] = 1;\r\n        eligible_bones[0x3DFA72D396b1b1D22e39D58b203a351dDEe024e7] = 5;\r\n        eligible_bones[0x3e00d5df867d5fE6012693D8D3C945512408927d] = 1;\r\n        eligible_bones[0x3E8f0bcbCc283296fD831Cc5312714335F19B340] = 15;\r\n        eligible_bones[0x3f583e18af11aB617Cd9147f7fb7dc3138DcA5EE] = 2;\r\n        eligible_bones[0x40f249A353a66DF0ade87d7c587146FCE7531A79] = 1;\r\n        eligible_bones[0x41Ab8f6dB3998685ee817FEf052B367Aed6E71C0] = 1;\r\n        eligible_bones[0x4221E209640b90901c4932129bfaD744e5A7DadE] = 2;\r\n        eligible_bones[0x42c7bFe96C02eC253f3D9e34F24d5E263935d7A4] = 1;\r\n        eligible_bones[0x45d2baFe56c85433e0b9f9b50dd124ea3041f223] = 2;\r\n        eligible_bones[0x468162396A915dE5c14F8F8A96D4E2F1aE520b03] = 21;\r\n        eligible_bones[0x46c1fd5e7847a68B963AC57067741582b6d2f8d2] = 1;\r\n        eligible_bones[0x48eA5F638f1383270b05541761163a1585988A7A] = 1;\r\n        eligible_bones[0x49075225DF881Cd5682606732fEB168bDAFD9E68] = 22;\r\n        eligible_bones[0x4A0A344a76327987E7e1f6682cFC60bb5aAb9660] = 2;\r\n        eligible_bones[0x4AF143D85580d837b804852C12612Ad964DC13f8] = 34;\r\n        eligible_bones[0x4bC4Ad70A89eBECFa5DDBE87F914edD4Bc153BC8] = 5;\r\n        eligible_bones[0x4C9dba5fbBFddF8E006F28D0534F918d8Fcf4daa] = 2;\r\n        eligible_bones[0x4D4803722142AFc24A469729Bf10fD88414f0F65] = 1;\r\n        eligible_bones[0x4d8f57C23Aa81d6B2ce89249966FA185A2e93bc8] = 1;\r\n        eligible_bones[0x4EbF1366b046950dD0F6e00C2ffBD60630a18c5E] = 1;\r\n        eligible_bones[0x4fB9316f2EE8FB48AddCC3e996e5115A7E1F237F] = 3;\r\n        eligible_bones[0x526Fd8f3a445Da35495e7Af42a198C80DA07f30f] = 2;\r\n        eligible_bones[0x52AC5997d2Ac830D54b4BaD431aB95546d279144] = 10;\r\n        eligible_bones[0x541bf8Bf17271e3eFd75a4a0c538CD09F16D9e99] = 1;\r\n        eligible_bones[0x54aCF4977fBBB1D085e001fCDFe43c7c90891f32] = 2;\r\n        eligible_bones[0x54d339cFD8F308D32C2F07f5Dc9dD34AF7753e20] = 9;\r\n        eligible_bones[0x550e970E31A45b06dF01a00b1C89A478D4d5e00A] = 12;\r\n        eligible_bones[0x58D777F9592d77f2B490A930481A0cc82128651F] = 11;\r\n        eligible_bones[0x591F8a2deCC1c86cce0c7Bea22Fa921c2c72fb95] = 1;\r\n        eligible_bones[0x5956E7A6ab0e2CC10C078C875139e6012c8e3eBb] = 4;\r\n        eligible_bones[0x59F1875986A5EAc58Bf4959789fD5A3A3cb36C6E] = 3;\r\n        eligible_bones[0x5a503C27F7C865e63556968EdB9540Cc67fCBB3a] = 1;\r\n        eligible_bones[0x5E026495023fF8f31F12Da0Ce7e0A0Fb6A4d74f0] = 1;\r\n        eligible_bones[0x5F6ceF30C7B2c200f1243eC727Fa2a25fA08d2DD] = 2;\r\n        eligible_bones[0x61c0F6c65194aD959B72398537dE448d5F916b33] = 2;\r\n        eligible_bones[0x6395ebaEdae3420E9D8c1A8c6268df9e829A32aC] = 1;\r\n        eligible_bones[0x646F1ab329f5120Eb75f14B75D6F82d30A3c04B4] = 3;\r\n        eligible_bones[0x64B110063e6b688dfa0E5f6E7a1653321891b35A] = 1;\r\n        eligible_bones[0x65CE29640736a46C62e7d61A7337e4D3474D6192] = 1;\r\n        eligible_bones[0x65EF8236830cC27270891868C00e689dC25d0D0E] = 1;\r\n        eligible_bones[0x66883274f20a617E781c3f869c48eD93a041F178] = 4;\r\n        eligible_bones[0x66F02e34Ce51397D9eCEe0bec87E09Ef9d67993e] = 1;\r\n        eligible_bones[0x6849536eedb202f00c053652178E4B8dC1c5C1Be] = 4;\r\n        eligible_bones[0x689fD10edf629d0345156128a189295D68594741] = 1;\r\n        eligible_bones[0x6A9A8E67DBe22AF0Bb55eA0FA44Df8212b175a1D] = 4;\r\n        eligible_bones[0x6b0bf3dd3F83c1776769a87cb080eF370288f355] = 15;\r\n        eligible_bones[0x6B3878e5db0be9436D67f10B24C40Cd57B657952] = 1;\r\n        eligible_bones[0x6C92f8A08db5cf58AE5C935fe730CA63E21497E9] = 2;\r\n        eligible_bones[0x6d1E9895665516283b374c16148A8e8D156d7cD1] = 3;\r\n        eligible_bones[0x6db844C3425031d2AC1B98A68e6561E32e2B7eC4] = 1;\r\n        eligible_bones[0x6E024B6a9C58b3F941fF08b7CaF348fEbB601e84] = 3;\r\n        eligible_bones[0x6E08A394A1545faDaD5638509cc5D388C2593653] = 2;\r\n        eligible_bones[0x6e2E69e6eAB951baa91e7a0ab995e126F303a2e8] = 1;\r\n        eligible_bones[0x6f312f53307925942f7D6d5d8A066f648A51F7D0] = 1;\r\n        eligible_bones[0x6FFbc344188C05B840BDb1751de3E2c596813b1c] = 23;\r\n        eligible_bones[0x709e8CFBE13F645D03DE08A7d3DA46a4B78144AD] = 1;\r\n        eligible_bones[0x70Af43c7fbc3B83adBb03bf7E56e1D57Fa89870c] = 4;\r\n        eligible_bones[0x70b1aB8FE7dD8ca86016053088A6b07187b5E4bE] = 1;\r\n        eligible_bones[0x7137a78413Aab4a1eDCbCe16471DF28C5A0fFBdA] = 2;\r\n        eligible_bones[0x714025F79A27D68696F86e995Cc05de47883E4A1] = 2;\r\n        eligible_bones[0x72e4E7C510DC0db7A90a1c76Cd8Da74E205C8bf9] = 7;\r\n        eligible_bones[0x73F4e28928E26623278159Bcf82aFff512863bA8] = 2;\r\n        eligible_bones[0x73fc291a4740Fd0D2dF9C0aaab689726684ce300] = 1;\r\n        eligible_bones[0x751462EC653a515Bbd9A0608A0Dca8f8173f1256] = 2;\r\n        eligible_bones[0x7724c19b5AC3230B8b74457291A5f1c2e09496B1] = 10;\r\n        eligible_bones[0x777d92Fcb83Ca9131B05ce579D9A951019c4Ca5c] = 1;\r\n        eligible_bones[0x782fC2754CF28e116C63044B39d6551eFdc11d94] = 1;\r\n        eligible_bones[0x786c9Fb9494Cc3c82d5a47A62b4392c7004106ca] = 1;\r\n        eligible_bones[0x78c3deFFDE9C9216473cd340F3b24FDAC4c43427] = 2;\r\n        eligible_bones[0x7904aDB48351aF7b835Cb061316795d5226b7f1a] = 20;\r\n        eligible_bones[0x7949eb8E7b8d83eAA26D8Ad2854E6D3c59da6813] = 4;\r\n        eligible_bones[0x79908206051bD137905680e59b8bA3F0b90D302f] = 19;\r\n        eligible_bones[0x7a6aD84cCC994931934BEe3D66eDBEa6Ce4bFf9f] = 1;\r\n        eligible_bones[0x7a802D75Eeac8E81eC3857412507C3426820D450] = 2;\r\n        eligible_bones[0x7c03d483C9BFe77EF710dF050FeA54cacA4F0b46] = 1;\r\n        eligible_bones[0x7D718c010b00a1e2e4Bb3b552653ffa21Eb6aEDA] = 1;\r\n        eligible_bones[0x7e6F64C3052Fd641D422d57832AC61A071b9aB6E] = 1;\r\n        eligible_bones[0x7FbE31a692C14d6F2e0F58dA3aa974CFFfaCf09e] = 1;\r\n        eligible_bones[0x80040312D5B96eF9C459BDC68451aBA61eBFb7EF] = 1;\r\n        eligible_bones[0x8260647ab3E9C45cC4a1EB223fdEda15a1bb08E6] = 1;\r\n        eligible_bones[0x83890cF7c61EbAF717de7c7cdd0C1ABf85aBD559] = 3;\r\n        eligible_bones[0x83b6d8e99539bf54b55Eb62E0064E3b8d1ccFdA9] = 5;\r\n        eligible_bones[0x8413f65e93d31f52706C301BCc86e0727FD7c025] = 20;\r\n        eligible_bones[0x84fB8110aD6c9fa7fA1d116a7B435895e31066A4] = 4;\r\n        eligible_bones[0x85789EF93518E217598257130d6d9d4279f2776e] = 1;\r\n        eligible_bones[0x8585f48e41594cB1f2D11f6cAb7980106540d9B2] = 1;\r\n        eligible_bones[0x861fa9d749E09f3A9ED5BB5E23d7f41B65523035] = 1;\r\n        eligible_bones[0x86A350a3b9e5e38460A21C9A0B7EC4280caEC6a4] = 2;\r\n        eligible_bones[0x87180EC01780Ef48f9A581EE22eA8651357A464A] = 28;\r\n        eligible_bones[0x885EB3bFe952ef8343D6B3176C1327Ba2c44a163] = 3;\r\n        eligible_bones[0x88a70fC4662a01b809Ea51ca8c9C37843fDeA458] = 2;\r\n        eligible_bones[0x88E3378dfb5463A0d151F802a48A104698e90e3D] = 1;\r\n        eligible_bones[0x8981cC81Ec9d58da52ed779Fb7d8181e03Bc8CE3] = 16;\r\n        eligible_bones[0x8A04cEA099e2D2886aea08E33446B5a52B9cF900] = 1;\r\n        eligible_bones[0x8A23fB5DE0ed4fDF1cfC5841497E369F20597668] = 2;\r\n        eligible_bones[0x8C2365fe0b0A9aa879B4114EB2b9b6565E431153] = 5;\r\n        eligible_bones[0x8c4c4414522bF2daf9D886c4c2ACb4dD47B203f3] = 1;\r\n        eligible_bones[0x8C5264230fD3124e47347cA251a7a32039E7176E] = 1;\r\n        eligible_bones[0x8C63EA42b94678096FCF506a63F795fd760cfb39] = 1;\r\n        eligible_bones[0x8dFf027daADEacC7898851C4e750078aba53b922] = 1;\r\n        eligible_bones[0x8e2A6AfEe2B8d37B672A2827566bcb0c537cC3b1] = 114;\r\n        eligible_bones[0x8F493C12c4F5FF5Fd510549E1e28EA3dD101E850] = 8;\r\n        eligible_bones[0x9023Ef16968FFea318838A223ef2A79bd9f99F88] = 7;\r\n        eligible_bones[0x92198Ef0013A303ef7Eb236ECba0C54c2c5483Eb] = 1;\r\n        eligible_bones[0x928696d73C3B668D54dCa33073A07Ff26270FfE9] = 1;\r\n        eligible_bones[0x92c7BED5bFE4fc397CDE40229f740069B5f38FD0] = 1;\r\n        eligible_bones[0x939DC788a1902cF04788E6cC993fA4eF88400cE0] = 1;\r\n        eligible_bones[0x9417AB659e81411DC3D0385B2dd27fa0a4f38392] = 2;\r\n        eligible_bones[0x957794DCE9F2079f99064bC9Fb09B0edE4F6f690] = 82;\r\n        eligible_bones[0x95EC92Ca95Bc6B8950Be47082AD0CE8C9CfE463e] = 10;\r\n        eligible_bones[0x96f3fe3FB0D0d2BfFb718561549CF7DB3B7D91d2] = 2;\r\n        eligible_bones[0x974d3B3E324999035d4b0e4825EE6a3Dee1A6B9f] = 10;\r\n        eligible_bones[0x979690bD32044dFDE62eAB2eba688466ab955250] = 1;\r\n        eligible_bones[0x9874346057faA8C5638694e1c1959f1d4bb48149] = 4;\r\n        eligible_bones[0x9aE055f84cD047929f45BA364931839A39439957] = 1;\r\n        eligible_bones[0x9b4211e9f022c21e6735c04f4B61b801a7cFE2b6] = 1;\r\n        eligible_bones[0x9B541D86F6108A5351dE01243736B190c59969b9] = 1;\r\n        eligible_bones[0x9C8456D00C3518159EaaA839132aEE399515a617] = 6;\r\n        eligible_bones[0x9Cd9aefBd6D423F69F5c9Caf2fA9972381012b09] = 1;\r\n        eligible_bones[0x9D1A1d3ba33FFc81346f7c608d82073a3e640fa5] = 5;\r\n        eligible_bones[0x9d549154aEF058c1C819356353e4D0a78BE3dAc5] = 7;\r\n        eligible_bones[0x9EB943Ba6234cDB965527470300D8b19Fcb5c4a0] = 3;\r\n        eligible_bones[0x9f814a00565aE9cB2257e378F7cF89a586b8E3F8] = 18;\r\n        eligible_bones[0xa06694f0EC5AB033207C5667ca6e27432f10AC50] = 5;\r\n        eligible_bones[0xa08a7A825dD73D8cE5C7De7A99F0ca15a5DB1Ad3] = 1;\r\n        eligible_bones[0xa144488F244978c92A1AF328134b950cc636aBe9] = 1;\r\n        eligible_bones[0xa1d2aB323EAF3b1F79E4392A307bC8aeE2ffe4A8] = 2;\r\n        eligible_bones[0xA41A4b84D74E085bd463386d55c3b6dDe6aa2759] = 5;\r\n        eligible_bones[0xA44F0658F3412140DB4Ccd39B1F4CAdba1c17dA3] = 1;\r\n        eligible_bones[0xA4A8d44646e2F4C4a74b892303A13c85fb876338] = 1;\r\n        eligible_bones[0xa4cfd7C2B29E2b31c284Bd5e78354853a309B6e8] = 2;\r\n        eligible_bones[0xa51486EA18aAd56a67F8570A9e71AaaEf0749CcA] = 2;\r\n        eligible_bones[0xa54cd35E2E2D0DdFB03C677B981d9361743D82E2] = 2;\r\n        eligible_bones[0xA6BE6842b0f0ae6E8B3C773f5893b91A01871615] = 7;\r\n        eligible_bones[0xa800FAa33d09Da13B8CE1C4bBf1f6F642F5d8F7b] = 3;\r\n        eligible_bones[0xA81d405F7D43373AC13eF85046b0DE017253e70c] = 1;\r\n        eligible_bones[0xa9531D3B5483bef6FaE3B4Be62Ccd83697aB92b1] = 25;\r\n        eligible_bones[0xaa08e0FC844cDb18Cd7176549839B79bAd5e051D] = 1;\r\n        eligible_bones[0xaaa7C182b279edAb7f0f9B97F426E986A54b91B8] = 1;\r\n        eligible_bones[0xAD62DA09a5faC08c802aa97707186C9BE1838700] = 3;\r\n        eligible_bones[0xaEb3FEA566C8bCb7Ae6826A03f818d9d386169BA] = 1;\r\n        eligible_bones[0xAED66AaE345D979Bf6d2d5f9f7a50a30B59fBbaF] = 1;\r\n        eligible_bones[0xaf469C4a0914938e6149CF621c54FB4b1EC0c202] = 1;\r\n        eligible_bones[0xaFE7309fD01a5E6d5a258E911461ecb9558FbFDF] = 103;\r\n        eligible_bones[0xB029D0B856eb75eF623cd3A17Ac25FAe5BD788c9] = 1;\r\n        eligible_bones[0xb2b2B8bE6208acb7D2D145114A9c3DF2230D5491] = 1;\r\n        eligible_bones[0xB518E0F7F6E3C71FA8434116E1a4C63702155265] = 2;\r\n        eligible_bones[0xB82107F361Ce6CEd8efa5BFBF85aa5C886d895a6] = 3;\r\n        eligible_bones[0xB9942A2b7Ab89C1c3A7330C664897d4eA9aE2A88] = 4;\r\n        eligible_bones[0xB9afA4d8cc98BD9e4Bc1B05504588Ecb63fA8B96] = 2;\r\n        eligible_bones[0xB9f4660b106c25B3F4bf219268f39834eA3F9060] = 1;\r\n        eligible_bones[0xba449117818563a65Bc65019138c553eb87F1474] = 2;\r\n        eligible_bones[0xbb9a59009b299c1A0f341579744cBEB223a29703] = 2;\r\n        eligible_bones[0xBc5e0726a49d7eFF356BFbd2B91b24Dd612B0533] = 3;\r\n        eligible_bones[0xBeBb8063c71B9901D6C6C197e3A81dFd9E089d1f] = 3;\r\n        eligible_bones[0xBF17142Cf515089cE4F825F3d05b4983EF7e92C7] = 2;\r\n        eligible_bones[0xBF892063Bd9dD3A28364a68d286a9ef840712D03] = 1;\r\n        eligible_bones[0xc05C4f2bf8c629d6F9F674e6949B6fe54832764E] = 5;\r\n        eligible_bones[0xC08BA0cD0AAC9C1811Eb8Cd790D56A1f0D645BF9] = 5;\r\n        eligible_bones[0xC0a945B099293AFff8E8FeA836920341C7557E23] = 1;\r\n        eligible_bones[0xc1659D856312e211300DeFa7E0E771a93dFc315C] = 1;\r\n        eligible_bones[0xc3A2533988CfbC268c161B92f90Ef8147de924a5] = 3;\r\n        eligible_bones[0xc3D3f90e2210bbE23690E32B80A81745EB4dB807] = 1;\r\n        eligible_bones[0xC457749236328D6E27FC7441cC32f273D6AD05aD] = 3;\r\n        eligible_bones[0xC4B64403e00D1CfDB76E67378aFc6698f59F3D63] = 1;\r\n        eligible_bones[0xc64AaA34Cf9DcE746A4C5dA2A0732CAf86BBDA5d] = 2;\r\n        eligible_bones[0xC6c6823ad6828fc9BB7AB3931e1862d09FE3e7Ba] = 2;\r\n        eligible_bones[0xC6D4E5C1cd5c2142C4592bBf66766e0f5f588d84] = 10;\r\n        eligible_bones[0xc7E82FA77f32BFD6AeeD59924a1a564a924b2EA8] = 15;\r\n        eligible_bones[0xC810cEa2B806Cd0Ff65A79B95b5Fa8A1F5E0e555] = 4;\r\n        eligible_bones[0xC814b1E4cD1e7dDeA4b2d5e97c69089fd5634E2A] = 6;\r\n        eligible_bones[0xcb555d047891faa7EFbFfDcFD8913F851F2e161B] = 2;\r\n        eligible_bones[0xCCa11A8EdB05D64a654092e9551F9122D70EA80e] = 3;\r\n        eligible_bones[0xCcDd7eCA13716F442F01d14DBEDB6C427cb86dFA] = 1;\r\n        eligible_bones[0xCd0D4CDb238Eec15Fcf4ff9d13d5a59051E507D7] = 41;\r\n        eligible_bones[0xcD95Cb0bEe1D1a7871FE0F2d32Fe03EcF3BF31c6] = 1;\r\n        eligible_bones[0xCE37EdfC61141b33d3f82dc14c0639496dd6Bc90] = 3;\r\n        eligible_bones[0xCeb3eCf5D5b116F42C63a60168a9e7734AE3dc34] = 1;\r\n        eligible_bones[0xcEb7C97B39725844aE95c61480812F96004581B9] = 2;\r\n        eligible_bones[0xcf9882330aE4396c5FA96F9B6bF31a61C4982dF3] = 3;\r\n        eligible_bones[0xcFA66E92F4070a6D80cD45F4738aFA5AB6E62519] = 7;\r\n        eligible_bones[0xD05437d15B2c3856B6DfEC5E63CAD35A8E8480FB] = 4;\r\n        eligible_bones[0xD1e88d18a3af098D597A6df71a27B50a229165dC] = 2;\r\n        eligible_bones[0xd2E8530F30Cc43EdE9B0403f2461320D7034Ed8b] = 2;\r\n        eligible_bones[0xD3AF1d8132AF7274A6f5a8EfF6217588F56D617a] = 1;\r\n        eligible_bones[0xD3Fd32e76a1cA37eC408aAc47776b10Fc099F841] = 1;\r\n        eligible_bones[0xD433c1B56055b7aDf8e5e2982E7e2C00C378706a] = 1;\r\n        eligible_bones[0xd47f5b1A1324Aa32Bda3e58A65e5C858CEF74bE3] = 1;\r\n        eligible_bones[0xD5921C35813C4499e6c0749D3aA5D6615e050918] = 1;\r\n        eligible_bones[0xd77a75F5e39eaCb523AbF2A3c97D14939697bF97] = 3;\r\n        eligible_bones[0xd7faE3f2fD4e3294Ec61FD36fA12B4F11B2F54b3] = 1;\r\n        eligible_bones[0xd8b07BC1bC3bAe553BCA5E94E99935dC12Df24Ff] = 1;\r\n        eligible_bones[0xd94E3c6Cae30D5993426594fef07Ead907cBF0e6] = 1;\r\n        eligible_bones[0xD95DBdaB08A9FED2D71ac9C3028AAc40905d8CF3] = 6;\r\n        eligible_bones[0xD9FccC95e992B1A1D11f742144a56dec5F0ef81C] = 2;\r\n        eligible_bones[0xDbD3a4258595Ff6Ede89df9e1032f34348876531] = 7;\r\n        eligible_bones[0xDCaff7c8220d5C151080ac5f6083332eF764DbE0] = 35;\r\n        eligible_bones[0xDD09E835D0Fe15ae40eF009ab26AB4e708636362] = 1;\r\n        eligible_bones[0xdD0c252067E1197ef2C4eC48EA024D705159ED0a] = 1;\r\n        eligible_bones[0xdD112088f343074e4Ce9B4451eb840d8FF04E914] = 1;\r\n        eligible_bones[0xDd92a572bB0A4dC1422b0337301D98826Ad0B0ca] = 1;\r\n        eligible_bones[0xdE07867BBdcBb0ffc65E185686E9f1214aeDdE25] = 1;\r\n        eligible_bones[0xdF460cDD9A9C043447D308D3e22DF30e13D67bd8] = 4;\r\n        eligible_bones[0xE14f7A9AF3F75a4Ccd33909B0046b16d82c6EC0e] = 3;\r\n        eligible_bones[0xE19e7878AF48C2ADf4B1d3F349a11fCa60e20489] = 1;\r\n        eligible_bones[0xE28504E04E490b40F3aEcAc2017317F86e41f3b7] = 7;\r\n        eligible_bones[0xe2A3513936F0C52bBdDD45c2a2CE64675d59028b] = 1;\r\n        eligible_bones[0xE3346fe6e8B2bEFa06a4e14d57651aa0fefFf674] = 8;\r\n        eligible_bones[0xE35B68A44b3e1CdA5C9b7cA497000ED5e532e564] = 5;\r\n        eligible_bones[0xe36740a6d9C66D971c98D4C08412A7703445e389] = 3;\r\n        eligible_bones[0xe4f6509614bAafF74a75A0E779DbA778a3d9c225] = 1;\r\n        eligible_bones[0xE523644625b39a406f4ea844430f6913e9e4Ad66] = 2;\r\n        eligible_bones[0xe6685D866671Aa2F90Bfb611a04cB61B91fEf08C] = 11;\r\n        eligible_bones[0xE6C58f8e459FE570AFfF5b4622990eA1744F0E28] = 9;\r\n        eligible_bones[0xE7D980C7A72E3C79C05C924f89c9B8552072F3F5] = 2;\r\n        eligible_bones[0xe8cc236D8246718e2C5129F2c6Ee263BF8349Ec5] = 3;\r\n        eligible_bones[0xe946A890792C02c749D9e541BF67c3c3b3B0F1c6] = 3;\r\n        eligible_bones[0xE9a0c78E17d3C782C8C4054cebE894FddF3DF515] = 1;\r\n        eligible_bones[0xEa66f33Fb201953316dcB3a96054B664eeD7c04b] = 8;\r\n        eligible_bones[0xEbDb626C95a25f4e304336b1adcAd0521a1Bdca1] = 10;\r\n        eligible_bones[0xeC62a2EA480DC2eE661FEFCE3b1695EB603Fe398] = 1;\r\n        eligible_bones[0xEe31c15C243a8B71b3848403fE229ab1Ed9363fd] = 1;\r\n        eligible_bones[0xeF984Be913C22645Bdd7Dc1388b3D2B9C5744092] = 53;\r\n        eligible_bones[0xEfD387fC2c15BA81AD6D7038AE914eEcc0F01582] = 1;\r\n        eligible_bones[0xF00dae12C50c5D18389175157F51a4FD8735AEB1] = 1;\r\n        eligible_bones[0xf04928eC019E13753aca32e2Ea2b39238DaDcAbA] = 6;\r\n        eligible_bones[0xf0Bc457431517302d3FEF20B3d3aDe57B4441790] = 3;\r\n        eligible_bones[0xF131640b01FD2d2C7c8cD7b33ed2Ff88297A7fD5] = 1;\r\n        eligible_bones[0xF2dC63FaA6a204c23b9955531b8200f674EfF364] = 2;\r\n        eligible_bones[0xF406bbE6D08F842154B7bAD648C72d07D74538E0] = 1;\r\n        eligible_bones[0xf5262e0E634c6E1644FC96D44d88242B76B4277C] = 4;\r\n        eligible_bones[0xf57bAa3eF4097D31242A1A6b26895f5259d03c78] = 1;\r\n        eligible_bones[0xf6314bA91A86a7f02AbaAB53622328c2A2A2e3De] = 2;\r\n        eligible_bones[0xF64802215563e8d324000A259363f84e970400e7] = 13;\r\n        eligible_bones[0xF8ae11175cA54ff0A2b42DcdC6702498F3Cf0466] = 6;\r\n        eligible_bones[0xF8F2aAED08320e4dcdd1Be7cc164793f1B5de780] = 1;\r\n        eligible_bones[0xf91B00784DB6B28dEE6cF472512666741853Cd7D] = 1;\r\n        eligible_bones[0xFA4b5be3F99EAfEEf5d7971eFF26aeAAf4293520] = 1;\r\n        eligible_bones[0xFaD5447Dc0B7A85735963924bAce9B6510Baa55d] = 5;\r\n        eligible_bones[0xfbF200bE24835E7B8A5aF5f48e788804b4ef0Cbd] = 1;\r\n        eligible_bones[0xFc4EB75c701D9433BaadcdbAdb29Dee1B7658515] = 1;\r\n        eligible_bones[0xFDa615e27310eB8B3e9df2A8bf0914E5c0A3e0ed] = 1;\r\n        eligible_bones[0xFE369225C3613DdeFEa0f9776Ac3CE35054F034f] = 1;\r\n        eligible_bones[0xFe4aDbc3EAc06C94933bC984696FB1aB2D2Ddebc] = 3;\r\n        eligible_bones[0xFEcaa66f413b46c86C0fDF0fB139A81Df5cd3916] = 7;\r\n        eligible_bones[0xfFCc9e99AB4674380ff0647B9eC23111C68721b0] = 1;\r\n        eligible_bones[0xFfddCfE5B629d77F315ABC2521407C2c55aDA6C1] = 2;\r\n    }\r\n    \r\n    address addressPartyBones;\r\n    bool redemption_time = true;\r\n    bool sale_time = true;\r\n    uint internal ticket_price = 15000000000000000; // 0.015 ETH\r\n    mapping(address => bool) public authorised_contracts;\r\n    \r\n    // Modifier to only alow merging contracts to interact with this function\r\n    modifier onlyAuthorised()\r\n    {\r\n        require(authorised_contracts[msg.sender]);\r\n        _;\r\n    }\r\n    \r\n    modifier SaleOpen()\r\n    {\r\n        require(sale_time == true);\r\n        _;\r\n    }\r\n    \r\n    modifier RedemptionOpen()\r\n    {\r\n        require(redemption_time == true);\r\n        _;\r\n    }\r\n    \r\n    function open_redemption() onlyOwner public\r\n    {\r\n        redemption_time = true;\r\n    }\r\n    \r\n    function close_redemption() onlyOwner public\r\n    {\r\n        redemption_time = false;\r\n    }\r\n    \r\n    function open_sale() onlyOwner public\r\n    {\r\n        sale_time = true;\r\n    }\r\n    \r\n    function close_sale() onlyOwner public\r\n    {\r\n        sale_time = false;\r\n    }\r\n    \r\n    function edit_eligible(address address_, uint256 new_eligible_count) onlyOwner public\r\n    {\r\n        eligible_bones[address_] = new_eligible_count;\r\n    }\r\n    \r\n    // Contracts for Party Bone Merging authorised and removed here\r\n    function addAuthorisedAddress(address _address) public onlyOwner {\r\n        authorised_contracts[_address] = true;\r\n    }\r\n    \r\n    function removeAuthorisedAddress(address _address) public onlyOwner {\r\n        authorised_contracts[_address] = false;\r\n    }\r\n    \r\n    // pause minting and merging\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n    \r\n    // unpause minting and merging \r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function setaddressPartyBones(address address_) onlyOwner public\r\n    {\r\n        addressPartyBones = address_;\r\n    }\r\n    \r\n    function transferOwnershipPartyBones(address address_) onlyOwner public\r\n    {\r\n        PartyBones partyBones = PartyBones(addressPartyBones);\r\n        partyBones.transferOwnership(address_);\r\n    }\r\n\r\n    // Modify sale price\r\n    function change_ticket_price(uint new_price) public onlyOwner returns(uint)\r\n    {\r\n        ticket_price = new_price;\r\n        return(new_price);\r\n    }\r\n    \r\n    function claimBones(uint256 claim_count) RedemptionOpen public\r\n    {   \r\n        PartyBones partyBones = PartyBones(addressPartyBones);\r\n        require( claim_count <= eligible_bones[msg.sender]);\r\n        require( claim_count <= 10 );\r\n       \r\n        partyBones.mint_primary_admin(msg.sender, claim_count * 3);\r\n        eligible_bones[msg.sender] -= claim_count;\r\n    }\r\n\r\n    // mint your Party Bone!\r\n    function createBone(uint256 numberOfTokens) public payable SaleOpen\r\n    {   \r\n        PartyBones partyBones = PartyBones(addressPartyBones);\r\n        require(numberOfTokens < 21, \"No more than 20 Tokens at one time!\");\r\n        require(ticket_price * numberOfTokens <= msg.value, \"Please send correct amount\");\r\n        require(msg.sender == tx.origin, \"Can only mint through a wallet\");\r\n        partyBones.mint_primary_admin(msg.sender, numberOfTokens);\r\n    }\r\n    \r\n    // admin minting\r\n    function createBone_primary_admin(address address_, uint256 numberOfTokens) public onlyOwner\r\n    {   \r\n        PartyBones partyBones = PartyBones(addressPartyBones);\r\n        partyBones.mint_primary_admin(address_, numberOfTokens);\r\n    }\r\n    \r\n    // merging burn\r\n    function burn_for_limb(uint256 tokenid)\r\n        public\r\n        whenNotPaused\r\n        onlyAuthorised\r\n        returns (uint256)\r\n    {\r\n        PartyBones partyBones = PartyBones(addressPartyBones);\r\n        partyBones.burn_admin(tokenid);\r\n        return tokenid;\r\n    }\r\n    \r\n    // burn_admin\r\n    function burn_admin(uint256 tokenid)\r\n        public\r\n        onlyOwner\r\n        returns (uint256)\r\n    {\r\n        PartyBones partyBones = PartyBones(addressPartyBones);\r\n        partyBones.burn_admin(tokenid);\r\n        return tokenid;\r\n    }\r\n    \r\n    function createBone_admin(address address_, uint256[] memory tokenIds) public onlyOwner\r\n    {   \r\n        PartyBones partyBones = PartyBones(addressPartyBones);\r\n        partyBones.mint_admin(address_, tokenIds);\r\n    }\r\n    \r\n    function change_base_URI(string memory new_base_URI)\r\n        onlyOwner\r\n        public\r\n    {\r\n        PartyBones partyBones = PartyBones(addressPartyBones);\r\n        partyBones.change_base_URI(new_base_URI);\r\n    }\r\n    \r\n    // only owner - withdraw contract balance to wallet\r\n    function withdraw()\r\n        public\r\n        payable\r\n        onlyOwner\r\n    {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAuthorisedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorised_contracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"burn_admin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"burn_for_limb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"new_base_URI\",\"type\":\"string\"}],\"name\":\"change_base_URI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_price\",\"type\":\"uint256\"}],\"name\":\"change_ticket_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claim_count\",\"type\":\"uint256\"}],\"name\":\"claimBones\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close_redemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close_sale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"createBone\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"createBone_admin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"createBone_primary_admin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"new_eligible_count\",\"type\":\"uint256\"}],\"name\":\"edit_eligible\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"eligible_bones\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open_redemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open_sale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAuthorisedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"setaddressPartyBones\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"transferOwnershipPartyBones\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"PartyBonesMinter","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://090292266fcc8b437ce1eaf350f2678e6245d94c1964f811b0852e9bfa775e97"}]}