{"status":"1","message":"OK","result":[{"SourceCode":"{\"CartelMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\nimport \\\"./ILand.sol\\\";\\nimport \\\"./ILandCollection.sol\\\";\\nimport \\\"./ILandYield.sol\\\";\\n\\n\\ncontract CartelMinter is Ownable, ReentrancyGuard {\\n  // Collection token contract interface\\n  ILandCollection public landCollectionContract;\\n  // Land token contract interface\\n  ILand public landContract;\\n  // LandYield contract interface\\n  ILandYield public landYieldContract;\\n\\n  // Used to determine whether minting is open to public\\n  bool public openForPublic;\\n  // Stores the currently set token price\\n  uint256 public tokenPrice;\\n  // Keeps track of the total minted tokens from public sales\\n  uint256 public totalMintedForPublic;\\n  // Keeps track of claimed free mints for land owners\\n  mapping (uint256 =\\u003e bool) public claimedMints;\\n\\n  // Stores the universal groupId tracked by the main Collection\\n  uint256 public groupId;\\n\\n  constructor(\\n    uint256 _groupId,\\n    uint256 _price,\\n    address _landCollectionContractAddress,\\n    address _landContractAddress,\\n    address _landYieldContract\\n  ) {\\n    groupId = _groupId;\\n    tokenPrice = _price;\\n    landCollectionContract = ILandCollection(_landCollectionContractAddress);\\n    landContract = ILand(_landContractAddress);\\n    landYieldContract = ILandYield(_landYieldContract);\\n  }\\n\\n  // Only to be used in case there\\u0027s a need to upgrade the yield contract mid-sales\\n  function setLandYieldContract(address _address) external onlyOwner {\\n    require(_address != address(0), \\\"Invalid Address\\\");\\n    landYieldContract = ILandYield(_address);\\n  }\\n\\n  // Update the state of the public minting (open/closed)\\n  function toggleOpenForPublic(bool _state) external onlyOwner {\\n    openForPublic = _state;\\n  }\\n\\n  // Update the token price\\n  function setTokenPrice(uint256 _price) external onlyOwner {\\n    tokenPrice = _price;\\n  }\\n\\n  // Fetch the total count of unclaimed free mints for the specified account\\n  function unclaimedMintForLandOwner(address _account) external view returns (uint256) {\\n    uint256 landOwned = landContract.balanceOf(_account);\\n    uint256 mintCount = 0;\\n    for (uint256 i = 0; i \\u003c landOwned; i++) {\\n      uint256 tokenId = landContract.tokenOfOwnerByIndex(_account, i);\\n      if (!claimedMints[tokenId]) {\\n        mintCount++;\\n      }\\n    }\\n\\n    return mintCount;\\n  }\\n\\n  function _generateExtraSeed(uint256 count) private view returns (uint256) {\\n    uint256 seed = 0;\\n\\n    for (uint256 i = 0; i \\u003c count; i++) {\\n      seed = uint256(\\n        keccak256(\\n          abi.encodePacked(\\n            i,\\n            count,\\n            seed,\\n            totalMintedForPublic\\n          )\\n        )\\n      ) % 1000000000;\\n    }\\n\\n    return seed;\\n  }\\n\\n  // Handles unclaimed free minting for the land owners\\n  function mintForLandOwner() external nonReentrant {\\n    uint256 landOwned = landContract.balanceOf(msg.sender);\\n    require(landOwned \\u003e 0, \\\"Reserved For Land Owners\\\");\\n\\n    // Iterate through all the land tokens owned to get the mint count and mark them as claimed\\n    uint256 mintCount = 0;\\n    uint256 tokenIdSum = 0;\\n    for (uint256 i = 0; i \\u003c landOwned; i++) {\\n      uint256 tokenId = landContract.tokenOfOwnerByIndex(msg.sender, i);\\n      if (!claimedMints[tokenId]) {\\n        mintCount++;\\n        tokenIdSum += tokenId;\\n        claimedMints[tokenId] = true;\\n      }\\n    }\\n\\n    // Proceed to mint all unclaimed Cartels for the account\\n    require(mintCount \\u003e 0, \\\"Allocated free mints have been claimed\\\");\\n\\n    // Get an additional seed on top of the other seeds in the collection contract\\n    uint256 seed = _generateExtraSeed(mintCount + tokenIdSum);\\n    landCollectionContract.mintToken(msg.sender, groupId, mintCount, seed);\\n  }\\n\\n  // Handles public token purchases\\n  receive() external payable nonReentrant {\\n    // Check if the public minting is open\\n    require(openForPublic, \\\"Public Minting Is Not Available\\\");\\n    // Check if tokens are still available for sale\\n    uint256 maxSupply = landCollectionContract.maximumSupply(groupId);\\n    uint256 totalMinted = landCollectionContract.totalMinted(groupId);\\n    uint256 remainingTokenCount = maxSupply - totalMinted;\\n    uint256 totalReservedForPublic = maxSupply - landContract.maximumSupply();\\n    require(remainingTokenCount \\u003e 0 \\u0026\\u0026 totalMintedForPublic \\u003c totalReservedForPublic, \\\"Sold Out\\\");\\n\\n    // Check if sufficient funds are sent\\n    require(msg.value \\u003e= tokenPrice, \\\"Insufficient Funds\\\");\\n\\n    // Update the total count of tokens from the public sales\\n    totalMintedForPublic++;\\n\\n    // Minting count is fixed to only 1 per transaction\\n    uint256 seed = _generateExtraSeed(1 + totalMintedForPublic);\\n    landCollectionContract.mintToken(msg.sender, groupId, 1, seed);\\n\\n    // Transfer the funds to the yield contract for land owners and treasury\\n    (bool success, ) = address(landYieldContract).call{value: tokenPrice}(\\n      abi.encodeWithSignature(\\\"distributeSalesYield()\\\")\\n    );\\n    require(success, \\\"Failed To Distribute Sales\\\");\\n\\n    // Send back any excess funds\\n    uint256 refund = msg.value - tokenPrice;\\n    if (refund \\u003e 0) {\\n      payable(msg.sender).transfer(refund);\\n    }\\n  }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"ILand.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\ninterface ILand {\\n  function maximumSupply() external view returns (uint256);\\n  function balanceOf(address owner) external view returns (uint256);\\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n}\\n\"},\"ILandCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\ninterface ILandCollection {\\n  function totalMinted(uint256 groupId) external view returns (uint256);\\n  function maximumSupply(uint256 groupId) external view returns (uint256);\\n  function mintToken(address account, uint256 groupId, uint256 count, uint256 seed) external;\\n}\\n\"},\"ILandYield.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\ninterface ILandYield {\\n  function distributePrimaryYield() external;\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_landCollectionContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_landContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_landYieldContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedMints\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"groupId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landCollectionContract\",\"outputs\":[{\"internalType\":\"contract ILandCollection\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landContract\",\"outputs\":[{\"internalType\":\"contract ILand\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landYieldContract\",\"outputs\":[{\"internalType\":\"contract ILandYield\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintForLandOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openForPublic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLandYieldContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"toggleOpenForPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMintedForPublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unclaimedMintForLandOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CartelMinter","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000006f05b59d3b200000000000000000000000000007f0ab6a57cfd191a202ab3f813ef9b851c77e61800000000000000000000000030d5977e4c9b159c2d44461868bdc7353c2e425b00000000000000000000000074ae9a9d6d142431e682b3736f83a660e76d9bc0","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dfcd94b5f15d93bd657581782fb59b36f987cbb704a7522f4ae10184da7df5a6"}]}