{"status":"1","message":"OK","result":[{"SourceCode":"contract GVolDaoTreasury {\r\n\t// State variables\r\n\taddress payable public owner;\r\n\tuint256 public registrationFee;\r\n\tuint256 public subscriptionLength;\r\n\r\n\t// Address to expiration mapping for customers\r\n\tmapping(address => uint256) public customers;\r\n\r\n\t//@Dev Constructor setting intital owwner set to contract deployer & initializes regestration Fee to .1ETH.\r\n\tconstructor() {\r\n\t\towner = payable(msg.sender);\r\n\t\tregistrationFee = .1 ether;\r\n\t\tsubscriptionLength = 183 days;\r\n\t}\r\n\r\n\t//@Dev modifier: OnlyOwner requirement for admin functions.\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner, 'Only Owner Can Perform this function');\r\n\t\t_;\r\n\t}\r\n    \r\n    event newSubscription (address indexed _subscriber, uint indexed _subscriptionDate, uint _fee);\r\n    \r\n\t//@dev Customer subscription function. Checks if customer exists first then adds to customers array, if sufficient payment was provided\r\n\tfunction subscribe() public payable {\r\n\t\trequire(msg.value >= registrationFee, 'Insufficient funds sent');\r\n\r\n\t\tuint256 exp = customers[msg.sender];\r\n\t\trequire(exp != type(uint256).max, 'You are a whitelisted user');\r\n\t\tcustomers[msg.sender] = (exp > block.timestamp ? exp : block.timestamp) + subscriptionLength ; \r\n\t\temit newSubscription(msg.sender, block.timestamp, msg.value);\r\n\t}\r\n\r\n\t//@dev checks if a user has an active subscription\r\n\tfunction isActive(address user) public view returns (bool) {\r\n\t\treturn customers[user] > block.timestamp;\r\n\t}\r\n\r\n\tfunction untilExpiration(address user) public view returns (uint256) {\r\n\t\treturn customers[user] < block.timestamp ? 0 : customers[user] - block.timestamp;\r\n\t}\r\n\r\n\t// ADMIN FUNCTIONS\r\n\t// @dev sets new `owner` state variable. Granting new owner control to admin functions.\r\n\t// @param address.New address to be set.\r\n\tfunction setNewOwner(address payable newOwner) public onlyOwner {\r\n\t\towner = newOwner;\r\n\t}\r\n\r\n\t// @dev sets new `registrationFee` state variable. Owner can set access price.\r\n\t// @param  value to set new registration fee. Remember to set value to approiate decimal places. 1 ETH = 1000000000000000000, .069 ETH = 69000000000000000\r\n\tfunction setNewRegistrationFee(uint256 newFee) public onlyOwner {\r\n\t\tregistrationFee = newFee;\r\n\t}\r\n\t\r\n\t\t// @dev sets new `subscriptionLenght` state variable. Owner can set access price.\r\n\t// @param  value to set new subscription length. Number of days in Epoch time.  1 Day = 86400\r\n\tfunction setNewSubscriptionLength(uint256 newSubscriptionLength) public onlyOwner {\r\n\t\tsubscriptionLength = newSubscriptionLength;\r\n\t}\r\n\r\n\t//@Dev Allow Owner of the contract to withdraw the balances to themselves.\r\n\tfunction withdrawToOwner() public onlyOwner {\r\n\t\towner.transfer(address(this).balance);\r\n\t}\r\n\r\n\t// @Dev Allow Owner of the contract to withdraw a specified amount to a different address.\r\n\t// @Notice Could be used for funding a New Dao contract, another dApp, or gitcoin Grant.\r\n\tfunction withdrawToAddress(address payable recipient, uint256 amount) public onlyOwner {\r\n\t\trecipient.transfer(amount);\r\n\t}\r\n\r\n\t//@Dev Allow owner of the contract to set an address to True in mapping without payment.\r\n\tfunction freeAccount(address _address) public onlyOwner {\r\n\t\tcustomers[_address] = type(uint256).max;\r\n\t}\r\n\r\n\t//@Dev Allow owner of the contract to set an address to True in mapping without payment.\r\n\tfunction resetUser(address _address) public onlyOwner {\r\n\t\tcustomers[_address] = 0;\r\n\t}\r\n\r\n\t//fallback\r\n\tfallback() external payable {\r\n\t\towner.transfer(msg.value);\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_subscriber\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_subscriptionDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"newSubscription\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"freeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"resetUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setNewRegistrationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSubscriptionLength\",\"type\":\"uint256\"}],\"name\":\"setNewSubscriptionLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"untilExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GVolDaoTreasury","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://78ea35a1edb7baab37981171113fad9e167be9bea9342f6e350ab005e9c2e000"}]}