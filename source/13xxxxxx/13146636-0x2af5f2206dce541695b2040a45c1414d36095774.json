{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Gateway/Gateway.1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//  ______   ______     _____\\n// /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\  __-.\\n// \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\/\\\\ \\\\\\n//    \\\\ \\\\_\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\____-\\n//     \\\\/_/   \\\\/_____/   \\\\/____/\\n//\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\n\\nimport '../adapters/Adapter.sol';\\nimport '../Versioned.sol';\\nimport '../Pausable.sol';\\nimport '../Owned.sol';\\n\\n/// @title GatewayV1\\n/// @author Iulian Rotaru\\n/// @notice The Gateway aggregates all adapters and helps users performs multiple actions at the same time.\\ncontract GatewayV1 is Versioned, Pausable, Owned, ReentrancyGuardUpgradeable {\\n    //\\n    //                      _              _\\n    //   ___ ___  _ __  ___| |_ __ _ _ __ | |_ ___\\n    //  / __/ _ \\\\| '_ \\\\/ __| __/ _` | '_ \\\\| __/ __|\\n    // | (_| (_) | | | \\\\__ \\\\ || (_| | | | | |_\\\\__ \\\\\\n    //  \\\\___\\\\___/|_| |_|___/\\\\__\\\\__,_|_| |_|\\\\__|___/\\n    //\\n\\n    // Denominator used with fee variable to compute amount kept by the gateway.\\n    uint256 constant FEE_DENOMINATOR = 1000000;\\n    //\\n    //      _        _\\n    //  ___| |_ __ _| |_ ___\\n    // / __| __/ _` | __/ _ \\\\\\n    // \\\\__ \\\\ || (_| | ||  __/\\n    // |___/\\\\__\\\\__,_|\\\\__\\\\___|\\n    //\\n\\n    // Store all adapters. Adapters perform purchasing logics for each supported platforms\\n    mapping(string => Adapter) public adapters;\\n\\n    // Store all collected fees.\\n    mapping(address => uint256) public collectedFees;\\n\\n    // Fee value.\\n    uint256 public fee;\\n\\n    // Fee collector\\n    address public feeCollector;\\n\\n    //\\n    //                       _\\n    //   _____   _____ _ __ | |_ ___\\n    //  / _ \\\\ \\\\ / / _ \\\\ '_ \\\\| __/ __|\\n    // |  __/\\\\ V /  __/ | | | |_\\\\__ \\\\\\n    //  \\\\___| \\\\_/ \\\\___|_| |_|\\\\__|___/\\n    //\\n\\n    // Emitted whenever an adapter is changed\\n    event AdapterChanged(string indexed actionType, address indexed adapter, address oldAdapter, address admin);\\n\\n    // Emitted whenever a product is purchased\\n    event ExecutedAction(\\n        string indexed actionType,\\n        address indexed caller,\\n        address[] currencies,\\n        uint256[] amounts,\\n        uint256[] fees,\\n        bytes data,\\n        bytes outputData\\n    );\\n\\n    //\\n    //      _                   _\\n    //  ___| |_ _ __ _   _  ___| |_ ___\\n    // / __| __| '__| | | |/ __| __/ __|\\n    // \\\\__ \\\\ |_| |  | |_| | (__| |_\\\\__ \\\\\\n    // |___/\\\\__|_|   \\\\__,_|\\\\___|\\\\__|___/\\n    //\\n    //\\n\\n    // Input format\\n    struct Action {\\n        string actionType;\\n        address[] currencies;\\n        uint256[] amounts;\\n        bytes data;\\n    }\\n\\n    //\\n    //                      _ _  __ _\\n    //  _ __ ___   ___   __| (_)/ _(_) ___ _ __ ___\\n    // | '_ ` _ \\\\ / _ \\\\ / _` | | |_| |/ _ \\\\ '__/ __|\\n    // | | | | | | (_) | (_| | |  _| |  __/ |  \\\\__ \\\\\\n    // |_| |_| |_|\\\\___/ \\\\__,_|_|_| |_|\\\\___|_|  |___/\\n    //\\n\\n    // Check that caller is fee collector\\n    modifier isFeeCollector() {\\n        require(msg.sender == feeCollector, 'G9');\\n        _;\\n    }\\n\\n    //\\n    //  _       _                        _\\n    // (_)_ __ | |_ ___ _ __ _ __   __ _| |___\\n    // | | '_ \\\\| __/ _ \\\\ '__| '_ \\\\ / _` | / __|\\n    // | | | | | ||  __/ |  | | | | (_| | \\\\__ \\\\\\n    // |_|_| |_|\\\\__\\\\___|_|  |_| |_|\\\\__,_|_|___/\\n    //\\n\\n    /// @dev Retrieves the available balance for all used currencies.\\n    ///      Simply computes current effective balance and substract collected fees\\n    /// @param currencies Address of currencies\\n    /// @return A tuple with the raw current balances and usable balances\\n    function _getAvailableBalance(address[] memory currencies)\\n        internal\\n        view\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        uint256[] memory currentBalances = new uint256[](currencies.length);\\n        uint256[] memory availableBalances = new uint256[](currencies.length);\\n        for (uint256 idx = 0; idx < currencies.length; ++idx) {\\n            uint256 balance = _getBalance(currencies[idx]);\\n            currentBalances[idx] = balance;\\n            availableBalances[idx] = balance - collectedFees[currencies[idx]];\\n        }\\n        return (currentBalances, availableBalances);\\n    }\\n\\n    /// @dev Retrieves the available balance for one currency.\\n    /// @param currency Address of the currency\\n    /// @return The current balance of the provided currency\\n    function _getBalance(address currency) internal view returns (uint256) {\\n        if (currency == address(0)) {\\n            return address(this).balance;\\n        } else {\\n            return IERC20(currency).balanceOf(address(this));\\n        }\\n    }\\n\\n    /// @dev Prepares adapter call by approving or computing amount of eth to send with call.\\n    ///      Also computes extracted fee.\\n    /// @param currencies List of currencies to send/approve\\n    /// @param amounts Amounts of currencies to send/approve\\n    /// @param adapter Address of adapter receiving the call\\n    /// @return A tuple containing the amount of eth to send during call, the amounts without the extracted fee and the extracted fees\\n    function _transferAndGetAmount(\\n        address[] memory currencies,\\n        uint256[] memory amounts,\\n        Adapter adapter\\n    )\\n        internal\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        uint256[] memory amountsWithoutFees = new uint256[](amounts.length);\\n        uint256[] memory extractedFees = new uint256[](amounts.length);\\n        uint256 callValue = 0;\\n        for (uint256 idx; idx < currencies.length; ++idx) {\\n            amountsWithoutFees[idx] = (amounts[idx] * FEE_DENOMINATOR) / (FEE_DENOMINATOR + fee) + 1;\\n            extractedFees[idx] = amounts[idx] - amountsWithoutFees[idx];\\n\\n            collectedFees[currencies[idx]] += extractedFees[idx];\\n\\n            if (currencies[idx] == address(0)) {\\n                callValue = amountsWithoutFees[idx];\\n            } else {\\n                IERC20(currencies[idx]).approve(address(adapter), amountsWithoutFees[idx]);\\n            }\\n        }\\n\\n        return (callValue, amountsWithoutFees, extractedFees);\\n    }\\n\\n    /// @dev Retrieves all currencies for all actions provided on an execute call. If multiple actions, factorizes calls.\\n    /// @param actions list of received actions\\n    function _pull(Action[] calldata actions) internal {\\n        if (actions.length > 1) {\\n            uint256 totalCurrencies = 0;\\n            for (uint256 actionIdx = 0; actionIdx < actions.length; ++actionIdx) {\\n                Action memory action = actions[actionIdx];\\n                totalCurrencies += action.amounts.length;\\n                require(action.amounts.length == action.currencies.length, 'G1');\\n            }\\n            uint256[] memory totalAmounts = new uint256[](totalCurrencies);\\n            address[] memory currencies = new address[](totalCurrencies);\\n            for (uint256 actionIdx = 0; actionIdx < actions.length; ++actionIdx) {\\n                Action memory action = actions[actionIdx];\\n                for (uint256 currencyIdx = 0; currencyIdx < action.amounts.length; ++currencyIdx) {\\n                    if (action.currencies[currencyIdx] == address(0)) {\\n                        continue;\\n                    }\\n                    for (uint256 storedIdx; storedIdx < currencies.length; ++storedIdx) {\\n                        if (currencies[storedIdx] == action.currencies[currencyIdx]) {\\n                            totalAmounts[storedIdx] += action.amounts[currencyIdx];\\n                            break;\\n                        } else if (currencies[storedIdx] == address(0)) {\\n                            currencies[storedIdx] = action.currencies[currencyIdx];\\n                            totalAmounts[storedIdx] += action.amounts[currencyIdx];\\n                            break;\\n                        }\\n                    }\\n                }\\n            }\\n            for (\\n                uint256 currencyIdx = 0;\\n                currencyIdx < currencies.length && currencies[currencyIdx] != address(0);\\n                ++currencyIdx\\n            ) {\\n                IERC20(currencies[currencyIdx]).transferFrom(msg.sender, address(this), totalAmounts[currencyIdx]);\\n            }\\n        } else {\\n            require(actions[0].amounts.length == actions[0].currencies.length, 'G2');\\n            for (uint256 idx = 0; idx < actions[0].currencies.length; ++idx) {\\n                if (actions[0].currencies[idx] != address(0)) {\\n                    IERC20(actions[0].currencies[idx]).transferFrom(msg.sender, address(this), actions[0].amounts[idx]);\\n                }\\n            }\\n        }\\n    }\\n\\n    //\\n    //            _                        _\\n    //   _____  _| |_ ___ _ __ _ __   __ _| |___\\n    //  / _ \\\\ \\\\/ / __/ _ \\\\ '__| '_ \\\\ / _` | / __|\\n    // |  __/>  <| ||  __/ |  | | | | (_| | \\\\__ \\\\\\n    //  \\\\___/_/\\\\_\\\\\\\\__\\\\___|_|  |_| |_|\\\\__,_|_|___/\\n    //\\n\\n    /// @notice Send an array of actions you want to execute from the gateway\\n    /// @param actions List of actions to execute\\n    function execute(Action[] calldata actions) external payable nonReentrant whenNotPaused {\\n        _pull(actions);\\n        for (uint256 actionIdx = 0; actionIdx < actions.length; ++actionIdx) {\\n            Action memory action = actions[actionIdx];\\n\\n            (uint256[] memory preBalances, uint256[] memory availableBalances) = _getAvailableBalance(\\n                action.currencies\\n            );\\n\\n            for (uint256 idx = 0; idx < action.amounts.length; ++idx) {\\n                require(availableBalances[idx] >= action.amounts[idx], 'G3');\\n            }\\n\\n            Adapter adapter = adapters[action.actionType];\\n\\n            require(address(adapter) != address(0), 'G4');\\n\\n            (\\n                uint256 callValue,\\n                uint256[] memory amountsWithoutFees,\\n                uint256[] memory extractedFees\\n            ) = _transferAndGetAmount(action.currencies, action.amounts, adapter);\\n\\n            (uint256[] memory usedAmount, bytes memory outputData) = adapter.run{value: callValue}(\\n                msg.sender,\\n                action.currencies,\\n                amountsWithoutFees,\\n                action.data\\n            );\\n\\n            for (uint256 idx = 0; idx < action.currencies.length; ++idx) {\\n                uint256 postBalance = _getBalance(action.currencies[idx]);\\n                if (postBalance > preBalances[idx] - amountsWithoutFees[idx]) {\\n                    if (action.currencies[idx] == address(0)) {\\n                        (bool success, ) = payable(msg.sender).call{\\n                            value: postBalance - (preBalances[idx] - amountsWithoutFees[idx])\\n                        }('');\\n                        require(success, 'G5');\\n                    } else {\\n                        IERC20(action.currencies[idx]).transfer(\\n                            msg.sender,\\n                            postBalance - (preBalances[idx] - amountsWithoutFees[idx])\\n                        );\\n                    }\\n                }\\n            }\\n\\n            emit ExecutedAction(\\n                action.actionType,\\n                msg.sender,\\n                action.currencies,\\n                usedAmount,\\n                extractedFees,\\n                action.data,\\n                outputData\\n            );\\n        }\\n    }\\n\\n    /// @notice Register a new address as an adapter\\n    /// @param actionType Name of the action\\n    /// @param adapter Address of the new adapter\\n    function registerAdapter(string calldata actionType, address adapter) external isAdmin {\\n        require(AddressUpgradeable.isContract(adapter), 'G6');\\n        require(adapters[actionType] != Adapter(adapter), 'G7');\\n\\n        emit AdapterChanged(actionType, adapter, address(adapters[actionType]), Owned.getAdmin());\\n\\n        adapters[actionType] = Adapter(adapter);\\n    }\\n\\n    /// @notice Changes the address able to collect fees\\n    /// @param newFeeCollector Address able to collect fees\\n    function setFeeCollector(address newFeeCollector) external isAdmin {\\n        require(newFeeCollector != feeCollector, 'G8');\\n        feeCollector = newFeeCollector;\\n    }\\n\\n    /// @notice Withdraws collected fees by providing currency addresses to withdraw\\n    /// @param currencies List of currencies to withdraw\\n    /// @return List of withdrawn amounts\\n    function withdrawCollectedFees(address[] memory currencies) external isFeeCollector returns (uint256[] memory) {\\n        uint256[] memory withdrawnFees = new uint256[](currencies.length);\\n        for (uint256 idx = 0; idx < currencies.length; ++idx) {\\n            if (currencies[idx] == address(0)) {\\n                (bool success, ) = feeCollector.call{value: collectedFees[currencies[idx]]}('');\\n                require(success, 'G10');\\n            } else {\\n                IERC20(currencies[idx]).transfer(feeCollector, collectedFees[currencies[idx]]);\\n            }\\n            withdrawnFees[idx] = collectedFees[currencies[idx]];\\n            collectedFees[currencies[idx]] = 0;\\n        }\\n        return withdrawnFees;\\n    }\\n\\n    //\\n    //  _       _ _\\n    // (_)_ __ (_) |_\\n    // | | '_ \\\\| | __|\\n    // | | | | | | |_\\n    // |_|_| |_|_|\\\\__|\\n    //\\n\\n    function __GatewayV1__constructor() public initVersion(1) {\\n        fee = 1000;\\n        feeCollector = getAdmin();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/adapters/Adapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//  ______   ______     _____\\n// /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\  __-.\\n// \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\/\\\\ \\\\\\n//    \\\\ \\\\_\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\____-\\n//     \\\\/_/   \\\\/_____/   \\\\/____/\\n//\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nabstract contract Adapter {\\n    //\\n    //  _       _                        _\\n    // (_)_ __ | |_ ___ _ __ _ __   __ _| |___\\n    // | | '_ \\\\| __/ _ \\\\ '__| '_ \\\\ / _` | / __|\\n    // | | | | | ||  __/ |  | | | | (_| | \\\\__ \\\\\\n    // |_|_| |_|\\\\__\\\\___|_|  |_| |_|\\\\__,_|_|___/\\n    //\\n\\n    /// @dev Perform an internal option purchase\\n    /// @param caller Address purchasing the option\\n    /// @param currencies List of usable currencies\\n    /// @param amounts List of usable currencies amounts\\n    /// @param data Extra data usable by adapter\\n    /// @return A tuple containing used amounts and output data\\n    function purchase(\\n        address caller,\\n        address[] memory currencies,\\n        uint256[] memory amounts,\\n        bytes calldata data\\n    ) internal virtual returns (uint256[] memory, bytes memory);\\n\\n    function _preparePayment(address[] memory currencies, uint256[] memory amounts) internal {\\n        require(currencies.length == amounts.length, 'A2');\\n        for (uint256 currencyIdx = 0; currencyIdx < currencies.length; ++currencyIdx) {\\n            if (currencies[currencyIdx] == address(0)) {\\n                require(msg.value >= amounts[currencyIdx], 'A1');\\n            } else {\\n                require(\\n                    IERC20(currencies[currencyIdx]).transferFrom(msg.sender, address(this), amounts[currencyIdx]),\\n                    'A2'\\n                );\\n            }\\n        }\\n    }\\n\\n    //\\n    //            _                        _\\n    //   _____  _| |_ ___ _ __ _ __   __ _| |___\\n    //  / _ \\\\ \\\\/ / __/ _ \\\\ '__| '_ \\\\ / _` | / __|\\n    // |  __/>  <| ||  __/ |  | | | | (_| | \\\\__ \\\\\\n    //  \\\\___/_/\\\\_\\\\\\\\__\\\\___|_|  |_| |_|\\\\__,_|_|___/\\n    //\\n\\n    /// @dev Perform an option purchase\\n    /// @param caller Address purchasing the option\\n    /// @param currencies List of usable currencies\\n    /// @param amounts List of usable currencies amounts\\n    /// @param data Extra data usable by adapter\\n    /// @return A tuple containing used amounts and output data\\n    function run(\\n        address caller,\\n        address[] memory currencies,\\n        uint256[] memory amounts,\\n        bytes calldata data\\n    ) external payable returns (uint256[] memory, bytes memory) {\\n        _preparePayment(currencies, amounts);\\n        return purchase(caller, currencies, amounts, data);\\n    }\\n\\n    function name() external view virtual returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/Versioned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//  ______   ______     _____\\n// /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\  __-.\\n// \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\/\\\\ \\\\\\n//    \\\\ \\\\_\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\____-\\n//     \\\\/_/   \\\\/_____/   \\\\/____/\\n//\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\ncontract Versioned {\\n    //\\n    //      _        _\\n    //  ___| |_ __ _| |_ ___\\n    // / __| __/ _` | __/ _ \\\\\\n    // \\\\__ \\\\ || (_| | ||  __/\\n    // |___/\\\\__\\\\__,_|\\\\__\\\\___|\\n    //\\n\\n    // Stores the current implementation version\\n    uint256 version;\\n\\n    // Stores the initializing state for each version\\n    bool private _initializing;\\n\\n    //\\n    //                      _ _  __ _\\n    //  _ __ ___   ___   __| (_)/ _(_) ___ _ __ ___\\n    // | '_ ` _ \\\\ / _ \\\\ / _` | | |_| |/ _ \\\\ '__/ __|\\n    // | | | | | | (_) | (_| | |  _| |  __/ |  \\\\__ \\\\\\n    // |_| |_| |_|\\\\___/ \\\\__,_|_|_| |_|\\\\___|_|  |___/\\n    //\\n\\n    // Allows to be called only if version number is current version + 1\\n    modifier initVersion(uint256 _version) {\\n        require(!_initializing, 'V1');\\n        require(_version == version + 1, 'V2');\\n        version = _version;\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    //\\n    //            _                        _\\n    //   _____  _| |_ ___ _ __ _ __   __ _| |___\\n    //  / _ \\\\ \\\\/ / __/ _ \\\\ '__| '_ \\\\ / _` | / __|\\n    // |  __/>  <| ||  __/ |  | | | | (_| | \\\\__ \\\\\\n    //  \\\\___/_/\\\\_\\\\\\\\__\\\\___|_|  |_| |_|\\\\__,_|_|___/\\n    //\\n\\n    /// @dev Retrieves current implementation version\\n    /// @return Implementatiomn version\\n    function getVersion() public view returns (uint256) {\\n        return version;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//  ______   ______     _____\\n// /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\  __-.\\n// \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\/\\\\ \\\\\\n//    \\\\ \\\\_\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\____-\\n//     \\\\/_/   \\\\/_____/   \\\\/____/\\n//\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/utils/StorageSlot.sol';\\n\\ncontract Pausable {\\n    //\\n    //                      _              _\\n    //   ___ ___  _ __  ___| |_ __ _ _ __ | |_ ___\\n    //  / __/ _ \\\\| '_ \\\\/ __| __/ _` | '_ \\\\| __/ __|\\n    // | (_| (_) | | | \\\\__ \\\\ || (_| | | | | |_\\\\__ \\\\\\n    //  \\\\___\\\\___/|_| |_|___/\\\\__\\\\__,_|_| |_|\\\\__|___/\\n    //\\n\\n    // Storage slot for the Paused state\\n    bytes32 internal constant _PAUSED_SLOT = 0x8dea8703c3cf94703383ce38a9c894669dccd4ca8e65ddb43267aa0248711450;\\n\\n    //\\n    //                      _ _  __ _\\n    //  _ __ ___   ___   __| (_)/ _(_) ___ _ __ ___\\n    // | '_ ` _ \\\\ / _ \\\\ / _` | | |_| |/ _ \\\\ '__/ __|\\n    // | | | | | | (_) | (_| | |  _| |  __/ |  \\\\__ \\\\\\n    // |_| |_| |_|\\\\___/ \\\\__,_|_|_| |_|\\\\___|_|  |___/\\n    //\\n\\n    // Allows methods to be called if paused\\n    modifier whenPaused() {\\n        require(StorageSlot.getBooleanSlot(_PAUSED_SLOT).value == true, 'P1');\\n        _;\\n    }\\n\\n    // Allows methods to be called if not paused\\n    modifier whenNotPaused() {\\n        require(StorageSlot.getBooleanSlot(_PAUSED_SLOT).value == false, 'P1');\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//  ______   ______     _____\\n// /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\  __-.\\n// \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\/\\\\ \\\\\\n//    \\\\ \\\\_\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\____-\\n//     \\\\/_/   \\\\/_____/   \\\\/____/\\n//\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/utils/StorageSlot.sol';\\n\\ncontract Owned {\\n    //\\n    //                      _              _\\n    //   ___ ___  _ __  ___| |_ __ _ _ __ | |_ ___\\n    //  / __/ _ \\\\| '_ \\\\/ __| __/ _` | '_ \\\\| __/ __|\\n    // | (_| (_) | | | \\\\__ \\\\ || (_| | | | | |_\\\\__ \\\\\\n    //  \\\\___\\\\___/|_| |_|___/\\\\__\\\\__,_|_| |_|\\\\__|___/\\n    //\\n\\n    // Storage slot for the Admin address\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    //\\n    //                      _ _  __ _\\n    //  _ __ ___   ___   __| (_)/ _(_) ___ _ __ ___\\n    // | '_ ` _ \\\\ / _ \\\\ / _` | | |_| |/ _ \\\\ '__/ __|\\n    // | | | | | | (_) | (_| | |  _| |  __/ |  \\\\__ \\\\\\n    // |_| |_| |_|\\\\___/ \\\\__,_|_|_| |_|\\\\___|_|  |___/\\n    //\\n\\n    // Modifier allowing only admins to call methods\\n    modifier isAdmin() {\\n        require(StorageSlot.getAddressSlot(_ADMIN_SLOT).value == msg.sender, 'O1');\\n        _;\\n    }\\n\\n    //\\n    //            _                        _\\n    //   _____  _| |_ ___ _ __ _ __   __ _| |___\\n    //  / _ \\\\ \\\\/ / __/ _ \\\\ '__| '_ \\\\ / _` | / __|\\n    // |  __/>  <| ||  __/ |  | | | | (_| | \\\\__ \\\\\\n    //  \\\\___/_/\\\\_\\\\\\\\__\\\\___|_|  |_| |_|\\\\__,_|_|___/\\n    //\\n\\n    /// @dev Retrieves Admin address\\n    /// @return Admin address\\n    function getAdmin() public view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"actionType\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdapterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"actionType\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"currencies\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"outputData\",\"type\":\"bytes\"}],\"name\":\"ExecutedAction\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__GatewayV1__constructor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"adapters\",\"outputs\":[{\"internalType\":\"contract Adapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collectedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"actionType\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"currencies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct GatewayV1.Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"actionType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"registerAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"currencies\",\"type\":\"address[]\"}],\"name\":\"withdrawCollectedFees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GatewayV1","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}