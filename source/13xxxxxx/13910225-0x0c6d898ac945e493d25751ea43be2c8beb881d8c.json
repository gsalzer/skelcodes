{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/migration/LiquidityMigrationV2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.8.0;\\n\\nimport { SafeERC20, IERC20 } from \\\"../ecosystem/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IAdapter.sol\\\";\\nimport \\\"./interfaces/IMigrationController.sol\\\";\\nimport \\\"./interfaces/ILiquidityMigrationV2.sol\\\";\\nimport \\\"../helpers/Timelocked.sol\\\";\\n\\ncontract LiquidityMigrationV2 is ILiquidityMigrationV2, Timelocked {\\n    using SafeERC20 for IERC20;\\n\\n    address public controller;\\n    address public genericRouter;\\n    address public migrationCoordinator;\\n    address public emergencyReceiver;\\n\\n    bool public paused;\\n    mapping (address => bool) public adapters; // adapter -> bool\\n    mapping (address => uint256) public totalStaked; // lp -> total staked\\n    mapping (address => address) public strategies; // lp -> enso strategy\\n    mapping (address => mapping (address => uint256)) public staked; // user -> lp -> stake\\n\\n    event Staked(address adapter, address strategy, uint256 amount, address account);\\n    event Migrated(address adapter, address lp, address strategy, address account);\\n    event Created(address adapter, address lp, address strategy, address account);\\n    event Refunded(address lp, uint256 amount, address account);\\n    event EmergencyMigration(address lp, uint256 amount, address receiver);\\n\\n    /**\\n    * @dev Require adapter registered\\n    */\\n    modifier onlyRegistered(address adapter) {\\n        require(adapters[adapter], \\\"Not registered\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Require adapter allows lp\\n    */\\n    modifier onlyWhitelisted(address adapter, address lp) {\\n        require(IAdapter(adapter).isWhitelisted(lp), \\\"Not whitelist\\\");\\n        _;\\n    }\\n\\n    modifier onlyLocked() {\\n        require(block.timestamp < unlocked, \\\"Unlocked\\\");\\n        _;\\n    }\\n\\n    modifier isPaused() {\\n        require(paused, \\\"Not paused\\\");\\n        _;\\n    }\\n\\n    modifier notPaused() {\\n        require(!paused, \\\"Paused\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address[] memory adapters_,\\n        uint256 unlock_,\\n        uint256 modify_\\n    )\\n        Timelocked(unlock_, modify_, msg.sender)\\n    {\\n        for (uint256 i = 0; i < adapters_.length; i++) {\\n            adapters[adapters_[i]] = true;\\n        }\\n    }\\n\\n    function setStrategy(address lp, address strategy) external onlyOwner notPaused {\\n        require(\\n            IMigrationController(controller).initialized(strategy),\\n            \\\"Not enso strategy\\\"\\n        );\\n        if (strategies[lp] != address(0)) {\\n          // This value can be changed as long as no migration is in progress\\n          require(IERC20(strategies[lp]).balanceOf(address(this)) == 0, \\\"Already set\\\");\\n        }\\n        strategies[lp] = strategy;\\n    }\\n\\n    function setStake(\\n        address user,\\n        address lp,\\n        address adapter,\\n        uint256 amount\\n    )\\n        external\\n        override\\n        notPaused\\n        onlyLocked\\n    {\\n        require(msg.sender == migrationCoordinator, \\\"Wrong sender\\\");\\n        _stake(user, lp, adapter, amount);\\n    }\\n\\n    function stake(\\n        address lp,\\n        uint256 amount,\\n        address adapter\\n    )\\n        external\\n        notPaused\\n        onlyLocked\\n        onlyRegistered(adapter)\\n    {\\n        _transferFromAndStake(lp, adapter, amount);\\n    }\\n\\n    function batchStake(\\n        address[] memory lps,\\n        uint256[] memory amounts,\\n        address adapter\\n    )\\n        external\\n        notPaused\\n        onlyLocked\\n        onlyRegistered(adapter)\\n    {\\n        require(lps.length == amounts.length, \\\"Incorrect arrays\\\");\\n        for (uint256 i = 0; i < lps.length; i++) {\\n            _transferFromAndStake(lps[i], adapter, amounts[i]);\\n        }\\n    }\\n\\n    function buyAndStake(\\n        address lp,\\n        address adapter,\\n        address exchange,\\n        uint256 minAmountOut,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        notPaused\\n        onlyLocked\\n        onlyRegistered(adapter)\\n        onlyWhitelisted(adapter, lp)\\n    {\\n        require(msg.value > 0, \\\"No value\\\");\\n        _buyAndStake(lp, msg.value, adapter, exchange, minAmountOut, deadline);\\n    }\\n\\n    function migrateAll(\\n        address lp,\\n        address adapter\\n    )\\n        external\\n        override\\n        notPaused\\n        onlyOwner\\n        onlyUnlocked\\n        onlyRegistered(adapter)\\n        onlyWhitelisted(adapter, lp)\\n    {\\n        address strategy = strategies[lp];\\n        require(strategy != address(0), \\\"Strategy not initialized\\\");\\n        uint256 totalStake = totalStaked[lp];\\n        delete totalStaked[lp];\\n        uint256 strategyBalanceBefore = IStrategy(strategy).balanceOf(address(this));\\n        IERC20(lp).safeTransfer(genericRouter, totalStake);\\n        IMigrationController(controller).migrate(IStrategy(strategy), IStrategyRouter(genericRouter), IERC20(lp), IAdapter(adapter), totalStake);\\n        uint256 strategyBalanceAfter = IStrategy(strategy).balanceOf(address(this));\\n        assert((strategyBalanceAfter - strategyBalanceBefore) == totalStake);\\n    }\\n\\n    function refund(address user, address lp) external onlyOwner {\\n        _refund(user, lp);\\n    }\\n\\n    function withdraw(address lp) external {\\n        _refund(msg.sender, lp);\\n    }\\n\\n    function claim(address lp) external {\\n        require(totalStaked[lp] == 0, \\\"Not yet migrated\\\");\\n        uint256 amount = staked[msg.sender][lp];\\n        require(amount > 0, \\\"No claim\\\");\\n        delete staked[msg.sender][lp];\\n\\n        address strategy = strategies[lp];\\n        IERC20(strategy).safeTransfer(msg.sender, amount);\\n        emit Migrated(address(0), lp, strategy, msg.sender);\\n    }\\n\\n    function emergencyMigrate(IERC20 lp) external isPaused onlyOwner {\\n        require(emergencyReceiver != address(0), \\\"Emergency receiver not set\\\");\\n        uint256 balance = lp.balanceOf(address(this));\\n        require(balance > 0, \\\"No balance\\\");\\n        lp.safeTransfer(emergencyReceiver, balance);\\n        emit EmergencyMigration(address(lp), balance, emergencyReceiver);\\n    }\\n\\n    function pause() external notPaused onlyOwner {\\n        paused = true;\\n    }\\n\\n    function unpause() external isPaused onlyOwner {\\n        paused = false;\\n    }\\n\\n    function _stake(\\n        address user,\\n        address lp,\\n        address adapter,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        staked[user][lp] += amount;\\n        totalStaked[lp] += amount;\\n        emit Staked(adapter, lp, amount, user);\\n    }\\n\\n    function _transferFromAndStake(\\n        address lp,\\n        address adapter,\\n        uint256 amount\\n    )\\n        internal\\n        onlyWhitelisted(adapter, lp)\\n    {\\n        require(amount > 0, \\\"No amount\\\");\\n        IERC20(lp).safeTransferFrom(msg.sender, address(this), amount);\\n        _stake(msg.sender, lp, adapter, amount);\\n    }\\n\\n    function _buyAndStake(\\n        address lp,\\n        uint256 amount,\\n        address adapter,\\n        address exchange,\\n        uint256 minAmountOut,\\n        uint256 deadline\\n    )\\n        internal\\n    {\\n        uint256 balanceBefore = IERC20(lp).balanceOf(address(this));\\n        IAdapter(adapter).buy{value: amount}(lp, exchange, minAmountOut, deadline);\\n        uint256 amountAdded = IERC20(lp).balanceOf(address(this)) - balanceBefore;\\n        _stake(msg.sender, lp, adapter, amountAdded);\\n    }\\n\\n    function _refund(address user, address lp) internal {\\n        require(totalStaked[lp] > 0, \\\"Not refundable\\\");\\n        uint256 amount = staked[user][lp];\\n        require(amount > 0, \\\"No stake\\\");\\n        delete staked[user][lp];\\n        totalStaked[lp] -= amount;\\n\\n        IERC20(lp).safeTransfer(user, amount);\\n        emit Refunded(lp, amount, user);\\n    }\\n\\n    function updateController(address newController)\\n        external\\n        onlyOwner\\n    {\\n        require(controller != newController, \\\"Controller already exists\\\");\\n        controller = newController;\\n    }\\n\\n    function updateGenericRouter(address newGenericRouter)\\n        external\\n        onlyOwner\\n    {\\n        require(genericRouter != newGenericRouter, \\\"GenericRouter already exists\\\");\\n        genericRouter = newGenericRouter;\\n    }\\n\\n    function updateCoordinator(address newCoordinator)\\n        external\\n        onlyOwner\\n    {\\n        require(migrationCoordinator != newCoordinator, \\\"Coordinator already exists\\\");\\n        migrationCoordinator = newCoordinator;\\n    }\\n\\n    function updateEmergencyReceiver(address newReceiver)\\n        external\\n        onlyOwner\\n    {\\n        require(emergencyReceiver != newReceiver, \\\"Receiver already exists\\\");\\n        emergencyReceiver = newReceiver;\\n    }\\n\\n    function addAdapter(address adapter)\\n        external\\n        onlyOwner\\n    {\\n        require(!adapters[adapter], \\\"Adapter already exists\\\");\\n        adapters[adapter] = true;\\n    }\\n\\n    function removeAdapter(address adapter)\\n        external\\n        onlyOwner\\n    {\\n        require(adapters[adapter], \\\"Adapter does not exist\\\");\\n        adapters[adapter] = false;\\n    }\\n\\n    function hasStaked(address account, address lp)\\n        external\\n        view\\n        returns(bool)\\n    {\\n        return staked[account][lp] > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ecosystem/openzeppelin/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: WTFPL\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAdapter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAdapter {\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n\\n    function outputTokens(address inputToken) external view returns (address[] memory outputs);\\n\\n    function encodeMigration(address _genericRouter, address _strategy, address _lp, uint256 _amount)\\n        external view returns (Call[] memory calls);\\n\\n    function encodeWithdraw(address _lp, uint256 _amount) external view returns (Call[] memory calls);\\n\\n    function buy(address _lp, address _exchange, uint256 _minAmountOut, uint256 _deadline) external payable;\\n\\n    function getAmountOut(address _lp, address _exchange, uint256 _amountIn) external returns (uint256);\\n\\n    function isWhitelisted(address _token) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/migration/interfaces/IMigrationController.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport \\\"@enso/contracts/contracts/interfaces/IStrategy.sol\\\";\\nimport \\\"@enso/contracts/contracts/interfaces/IStrategyRouter.sol\\\";\\nimport \\\"../../interfaces/IAdapter.sol\\\";\\nimport \\\"../libraries/SafeERC20Transfer.sol\\\";\\n\\ninterface IMigrationController {\\n    function migrate(\\n        IStrategy strategy,\\n        IStrategyRouter genericRouter,\\n        IERC20 lpToken,\\n        IAdapter adapter,\\n        uint256 amount\\n    ) external;\\n\\n    function initialized(address strategy) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/migration/interfaces/ILiquidityMigrationV2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.0 <0.9.0;\\n\\ninterface ILiquidityMigrationV2 {\\n    function setStake(address user, address lp, address adapter, uint256 amount) external;\\n\\n    function migrateAll(address lp, address adapter) external;\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/Timelocked.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: WTFPL\\nimport \\\"./Ownable.sol\\\";\\npragma solidity >=0.8.0;\\n\\n\\ncontract Timelocked is Ownable {\\n\\n    uint256 public unlocked; // timestamp unlock migration\\n    uint256 public modify;   // timestamp disallow changes\\n\\n    /**\\n    * @dev Require unlock time met\\n    */\\n    modifier onlyUnlocked() {\\n        require(block.timestamp >= unlocked, \\\"Timelock#onlyUnlocked: not unlocked\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Require modifier time not met\\n    */\\n    modifier onlyModify() {\\n        require(block.timestamp < modify, \\\"Timelock#onlyModify: cannot modify\\\");\\n        _;\\n    }\\n\\n    constructor(uint256 unlock_, uint256 modify_, address owner_) {\\n        require(unlock_ > block.timestamp, 'Timelock#not greater');\\n        unlocked = unlock_;\\n        modify = modify_;\\n        _setOwner(owner_);\\n    }\\n\\n    function updateUnlock(\\n        uint256 unlock_\\n    ) \\n        public\\n        onlyOwner\\n        onlyModify\\n    {\\n        unlocked = unlock_;\\n    }\\n}\"\r\n    },\r\n    \"contracts/ecosystem/openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/ecosystem/openzeppelin/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@enso/contracts/contracts/interfaces/IStrategy.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IStrategyToken.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./IWhitelist.sol\\\";\\nimport \\\"../helpers/StrategyTypes.sol\\\";\\n\\ninterface IStrategy is IStrategyToken, StrategyTypes {\\n    function approveToken(\\n        address token,\\n        address account,\\n        uint256 amount\\n    ) external;\\n\\n    function approveDebt(\\n        address token,\\n        address account,\\n        uint256 amount\\n    ) external;\\n\\n    function approveSynths(\\n        address account,\\n        uint256 amount\\n    ) external;\\n\\n    function setStructure(StrategyItem[] memory newItems) external;\\n\\n    function setCollateral(address token) external;\\n\\n    function withdrawAll(uint256 amount) external;\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external returns (uint256);\\n\\n    function delegateSwap(\\n        address adapter,\\n        uint256 amount,\\n        address tokenIn,\\n        address tokenOut\\n    ) external;\\n\\n    function settleSynths() external;\\n\\n    function issueStreamingFee() external;\\n\\n    function updateTokenValue(uint256 total, uint256 supply) external;\\n\\n    function updatePerformanceFee(uint16 fee) external;\\n\\n    function updateRebalanceThreshold(uint16 threshold) external;\\n\\n    function updateTradeData(address item, TradeData memory data) external;\\n\\n    function lock() external;\\n\\n    function unlock() external;\\n\\n    function locked() external view returns (bool);\\n\\n    function items() external view returns (address[] memory);\\n\\n    function synths() external view returns (address[] memory);\\n\\n    function debt() external view returns (address[] memory);\\n\\n    function rebalanceThreshold() external view returns (uint256);\\n\\n    function performanceFee() external view returns (uint256);\\n\\n    function getPercentage(address item) external view returns (int256);\\n\\n    function getTradeData(address item) external view returns (TradeData memory);\\n\\n    function getPerformanceFeeOwed(address account) external view returns (uint256);\\n\\n    function controller() external view returns (address);\\n\\n    function manager() external view returns (address);\\n\\n    function oracle() external view returns (IOracle);\\n\\n    function whitelist() external view returns (IWhitelist);\\n\\n    function supportsSynths() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@enso/contracts/contracts/interfaces/IStrategyRouter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport \\\"../interfaces/IStrategyController.sol\\\";\\n\\ninterface IStrategyRouter {\\n    enum RouterCategory {GENERIC, LOOP, SYNTH, BATCH}\\n\\n    function rebalance(address strategy, bytes calldata data) external;\\n\\n    function restructure(address strategy, bytes calldata data) external;\\n\\n    function deposit(address strategy, bytes calldata data) external;\\n\\n    function withdraw(address strategy, bytes calldata) external;\\n\\n    function controller() external view returns (IStrategyController);\\n\\n    function category() external view returns (RouterCategory);\\n}\\n\"\r\n    },\r\n    \"contracts/migration/libraries/SafeERC20Transfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport \\\"../../ecosystem/openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../ecosystem/openzeppelin/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Transfer {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@enso/contracts/contracts/interfaces/IStrategyToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport \\\"./IERC20NonStandard.sol\\\";\\n\\ninterface IStrategyToken is IERC20NonStandard {\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function nonces(address owner) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@enso/contracts/contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./registries/ITokenRegistry.sol\\\";\\nimport \\\"./IStrategy.sol\\\";\\n\\ninterface IOracle {\\n    function weth() external view returns (address);\\n\\n    function susd() external view returns (address);\\n\\n    function tokenRegistry() external view returns (ITokenRegistry);\\n\\n    function estimateStrategy(IStrategy strategy) external view returns (uint256, int256[] memory);\\n\\n    function estimateItem(\\n        uint256 balance,\\n        address token\\n    ) external view returns (int256);\\n}\\n\"\r\n    },\r\n    \"@enso/contracts/contracts/interfaces/IWhitelist.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.0 <0.9.0;\\n\\ninterface IWhitelist {\\n    function approve(address account) external;\\n\\n    function revoke(address account) external;\\n\\n    function approved(address account) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@enso/contracts/contracts/helpers/StrategyTypes.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.0 <0.9.0;\\n\\ninterface StrategyTypes {\\n\\n    enum ItemCategory {BASIC, SYNTH, DEBT, RESERVE}\\n    enum EstimatorCategory {\\n      DEFAULT_ORACLE,\\n      CHAINLINK_ORACLE,\\n      UNISWAP_TWAP_ORACLE,\\n      SUSHI_TWAP_ORACLE,\\n      STRATEGY,\\n      BLOCKED,\\n      AAVE_V1,\\n      AAVE_V2,\\n      AAVE_DEBT,\\n      BALANCER,\\n      COMPOUND,\\n      CURVE,\\n      CURVE_GAUGE,\\n      SUSHI_LP,\\n      SUSHI_FARM,\\n      UNISWAP_V2_LP,\\n      UNISWAP_V3_LP,\\n      YEARN_V1,\\n      YEARN_V2\\n    }\\n    enum TimelockCategory {RESTRUCTURE, THRESHOLD, REBALANCE_SLIPPAGE, RESTRUCTURE_SLIPPAGE, TIMELOCK, PERFORMANCE}\\n\\n    struct StrategyItem {\\n        address item;\\n        int256 percentage;\\n        TradeData data;\\n    }\\n\\n    struct TradeData {\\n        address[] adapters;\\n        address[] path;\\n        bytes cache;\\n    }\\n\\n    struct InitialState {\\n        uint32 timelock;\\n        uint16 rebalanceThreshold;\\n        uint16 rebalanceSlippage;\\n        uint16 restructureSlippage;\\n        uint16 performanceFee;\\n        bool social;\\n        bool set;\\n    }\\n\\n    struct StrategyState {\\n        uint32 timelock;\\n        uint16 rebalanceSlippage;\\n        uint16 restructureSlippage;\\n        bool social;\\n        bool set;\\n    }\\n\\n    /**\\n        @notice A time lock requirement for changing the state of this Strategy\\n        @dev WARNING: Only one TimelockCategory can be pending at a time\\n    */\\n    struct Timelock {\\n        TimelockCategory category;\\n        uint256 timestamp;\\n        bytes data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@enso/contracts/contracts/interfaces/IERC20NonStandard.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.0 <0.9.0;\\n\\ninterface IERC20NonStandard {\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@enso/contracts/contracts/interfaces/registries/ITokenRegistry.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport \\\"../IEstimator.sol\\\";\\n\\ninterface ITokenRegistry {\\n    function itemCategories(address token) external view returns (uint256);\\n\\n    function estimatorCategories(address token) external view returns (uint256);\\n\\n    function estimators(uint256 categoryIndex) external view returns (IEstimator);\\n\\n    function getEstimator(address token) external view returns (IEstimator);\\n\\n    function addEstimator(uint256 estimatorCategoryIndex, address estimator) external;\\n\\n    function addItem(uint256 itemCategoryIndex, uint256 estimatorCategoryIndex, address token) external;\\n}\\n\"\r\n    },\r\n    \"@enso/contracts/contracts/interfaces/IEstimator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.0 <0.9.0;\\n\\ninterface IEstimator {\\n    function estimateItem(\\n        uint256 balance,\\n        address token\\n    ) external view returns (int256);\\n}\\n\"\r\n    },\r\n    \"@enso/contracts/contracts/interfaces/IStrategyController.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IStrategy.sol\\\";\\nimport \\\"./IStrategyRouter.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./IWhitelist.sol\\\";\\nimport \\\"../helpers/StrategyTypes.sol\\\";\\n\\ninterface IStrategyController is StrategyTypes {\\n    function setupStrategy(\\n        address manager_,\\n        address strategy_,\\n        InitialState memory state_,\\n        address router_,\\n        bytes memory data_\\n    ) external payable;\\n\\n    function deposit(\\n        IStrategy strategy,\\n        IStrategyRouter router,\\n        uint256 amount,\\n        uint256 slippage,\\n        bytes memory data\\n    ) external payable;\\n\\n    function withdrawETH(\\n        IStrategy strategy,\\n        IStrategyRouter router,\\n        uint256 amount,\\n        uint256 slippage,\\n        bytes memory data\\n    ) external;\\n\\n    function withdrawWETH(\\n        IStrategy strategy,\\n        IStrategyRouter router,\\n        uint256 amount,\\n        uint256 slippage,\\n        bytes memory data\\n    ) external;\\n\\n    function rebalance(\\n        IStrategy strategy,\\n        IStrategyRouter router,\\n        bytes memory data\\n    ) external;\\n\\n    function restructure(\\n        IStrategy strategy,\\n        StrategyItem[] memory strategyItems\\n    ) external;\\n\\n    function finalizeStructure(\\n        IStrategy strategy,\\n        IStrategyRouter router,\\n        bytes memory data\\n    ) external;\\n\\n    function updateValue(\\n        IStrategy strategy,\\n        TimelockCategory category,\\n        uint256 newValue\\n    ) external;\\n\\n    function finalizeValue(address strategy) external;\\n\\n    function openStrategy(IStrategy strategy) external;\\n\\n    function setStrategy(IStrategy strategy) external;\\n\\n    function initialized(address strategy) external view returns (bool);\\n\\n    function strategyState(address strategy) external view returns (StrategyState memory);\\n\\n    function verifyStructure(address strategy, StrategyItem[] memory newItems)\\n        external\\n        view\\n        returns (bool);\\n\\n    function oracle() external view returns (IOracle);\\n\\n    function whitelist() external view returns (IWhitelist);\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: WTFPL\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ecosystem/openzeppelin/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function _setOwner(address owner_) \\n        internal\\n    {\\n        _owner = owner_;\\n        emit OwnershipTransferred(address(0), owner_);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ecosystem/openzeppelin/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: WTFPL\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adapters_\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"unlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modify_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"EmergencyMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Migrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adapters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"addAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lps\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"batchStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"buyAndStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"emergencyMigrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genericRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"hasStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"migrateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationCoordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"removeAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"updateController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCoordinator\",\"type\":\"address\"}],\"name\":\"updateCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"updateEmergencyReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGenericRouter\",\"type\":\"address\"}],\"name\":\"updateGenericRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unlock_\",\"type\":\"uint256\"}],\"name\":\"updateUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LiquidityMigrationV2","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000061efe6400000000000000000000000000000000000000000000000000000000061efe64000000000000000000000000000000000000000000000000000000000000000060000000000000000000000005f2c716d912ce400a8a49fb87db722e8257257a7000000000000000000000000e149b1f2ef564a289dc094215835f3c8df1695aa0000000000000000000000008f516c0fb0bcf44cfc8d42d60dad3e4cdb35ce260000000000000000000000009c9326c521895c78414bd3c2945e47afc4ef16cc000000000000000000000000ae6859311c341bac4e0bceca0242247c16718ff10000000000000000000000000a883a62660328ead442eb6c2311668ba9c12e57","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}