{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@yield-protocol/yieldspace-v2/contracts/extensions/YieldMathExtensions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.6;\\n\\nimport \\\"@yield-protocol/yieldspace-interfaces/IPool.sol\\\";\\nimport \\\"../YieldMath.sol\\\";\\n\\n\\nlibrary YieldMathExtensions {\\n\\n    /// @dev Calculate the invariant for this pool\\n    function invariant(IPool pool) external view returns (uint128) {\\n        uint32 maturity = pool.maturity();\\n        uint32 timeToMaturity = (maturity > uint32(block.timestamp)) ? maturity - uint32(block.timestamp) : 0;\\n        return YieldMath.invariant(\\n            pool.getBaseBalance(),\\n            pool.getFYTokenBalance(),\\n            pool.totalSupply(),\\n            timeToMaturity,\\n            pool.ts()\\n        );\\n    }\\n\\n    /// @dev max amount of fyTokens that can be bought from the pool\\n    function maxFYTokenOut(IPool pool) external view returns (uint128) {\\n        (uint112 _baseCached, uint112 _fyTokenCached,) = pool.getCache();\\n        uint96 scaleFactor = pool.scaleFactor();\\n        return YieldMath.maxFYTokenOut(\\n            _baseCached * scaleFactor,\\n            _fyTokenCached * scaleFactor,\\n            pool.maturity() - uint32(block.timestamp),\\n            pool.ts(),\\n            pool.g1()\\n        ) / scaleFactor;\\n    }\\n\\n    /// @dev max amount of fyTokens that can be sold into the pool\\n    function maxFYTokenIn(IPool pool) external view returns (uint128) {\\n        (uint112 _baseCached, uint112 _fyTokenCached,) = pool.getCache();\\n        uint96 scaleFactor = pool.scaleFactor();\\n        return YieldMath.maxFYTokenIn(\\n            _baseCached * scaleFactor,\\n            _fyTokenCached * scaleFactor,\\n            pool.maturity() - uint32(block.timestamp),\\n            pool.ts(),\\n            pool.g2()\\n        ) / scaleFactor;\\n    }\\n\\n    /// @dev max amount of Base that can be sold to the pool\\n    function maxBaseIn(IPool pool) external view returns (uint128) {\\n        (uint112 _baseCached, uint112 _fyTokenCached,) = pool.getCache();\\n        uint96 scaleFactor = pool.scaleFactor();\\n        return YieldMath.maxBaseIn(\\n            _baseCached * scaleFactor,\\n            _fyTokenCached * scaleFactor,\\n            pool.maturity() - uint32(block.timestamp),\\n            pool.ts(),\\n            pool.g1()\\n        ) / scaleFactor;\\n    }\\n\\n    /// @dev max amount of Base that can be bought from the pool\\n    function maxBaseOut(IPool pool) external view returns (uint128) {\\n        (uint112 _baseCached, uint112 _fyTokenCached,) = pool.getCache();\\n        uint96 scaleFactor = pool.scaleFactor();\\n        return YieldMath.maxBaseOut(\\n            _baseCached * scaleFactor,\\n            _fyTokenCached * scaleFactor,\\n            pool.maturity() - uint32(block.timestamp),\\n            pool.ts(),\\n            pool.g2()\\n        ) / scaleFactor;\\n    }\\n}\\n\"\r\n    },\r\n    \"@yield-protocol/yieldspace-interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.8.0;\\nimport \\\"@yield-protocol/utils-v2/contracts/token/IERC20.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/token/IERC2612.sol\\\";\\nimport \\\"@yield-protocol/vault-interfaces/IFYToken.sol\\\";\\n\\n\\ninterface IPool is IERC20, IERC2612 {\\n    function ts() external view returns(int128);\\n    function g1() external view returns(int128);\\n    function g2() external view returns(int128);\\n    function maturity() external view returns(uint32);\\n    function scaleFactor() external view returns(uint96);\\n    function getCache() external view returns (uint112, uint112, uint32);\\n    function base() external view returns(IERC20);\\n    function fyToken() external view returns(IFYToken);\\n    function getBaseBalance() external view returns(uint112);\\n    function getFYTokenBalance() external view returns(uint112);\\n    function retrieveBase(address to) external returns(uint128 retrieved);\\n    function retrieveFYToken(address to) external returns(uint128 retrieved);\\n    function sellBase(address to, uint128 min) external returns(uint128);\\n    function buyBase(address to, uint128 baseOut, uint128 max) external returns(uint128);\\n    function sellFYToken(address to, uint128 min) external returns(uint128);\\n    function buyFYToken(address to, uint128 fyTokenOut, uint128 max) external returns(uint128);\\n    function sellBasePreview(uint128 baseIn) external view returns(uint128);\\n    function buyBasePreview(uint128 baseOut) external view returns(uint128);\\n    function sellFYTokenPreview(uint128 fyTokenIn) external view returns(uint128);\\n    function buyFYTokenPreview(uint128 fyTokenOut) external view returns(uint128);\\n    function mint(address to, address remainder, uint256 minRatio, uint256 maxRatio) external returns (uint256, uint256, uint256);\\n    function mintWithBase(address to, address remainder, uint256 fyTokenToBuy, uint256 minRatio, uint256 maxRatio) external returns (uint256, uint256, uint256);\\n    function burn(address baseTo, address fyTokenTo, uint256 minRatio, uint256 maxRatio) external returns (uint256, uint256, uint256);\\n    function burnForBase(address to, uint256 minRatio, uint256 maxRatio) external returns (uint256, uint256);\\n}\"\r\n    },\r\n    \"@yield-protocol/yieldspace-v2/contracts/YieldMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./Math64x64.sol\\\";\\r\\n\\r\\nlibrary Exp64x64 {\\r\\n  /**\\r\\n   * Raise given number x into power specified as a simple fraction y/z and then\\r\\n   * multiply the result by the normalization factor 2^(128 * (1 - y/z)).\\r\\n   * Revert if z is zero, or if both x and y are zeros.\\r\\n   *\\r\\n   * @param x number to raise into given power y/z\\r\\n   * @param y numerator of the power to raise x into\\r\\n   * @param z denominator of the power to raise x into\\r\\n   * @return x raised into power y/z and then multiplied by 2^(128 * (1 - y/z))\\r\\n   */\\r\\n  function pow(uint128 x, uint128 y, uint128 z)\\r\\n  internal pure returns(uint128) {\\r\\n    unchecked {\\r\\n      require(z != 0);\\r\\n\\r\\n      if(x == 0) {\\r\\n        require(y != 0);\\r\\n        return 0;\\r\\n      } else {\\r\\n        uint256 l =\\r\\n          uint256(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - log_2(x)) * y / z;\\r\\n        if(l > 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) return 0;\\r\\n        else return pow_2(uint128(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - l));\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate base 2 logarithm of an unsigned 128-bit integer number.  Revert\\r\\n   * in case x is zero.\\r\\n   *\\r\\n   * @param x number to calculate base 2 logarithm of\\r\\n   * @return base 2 logarithm of x, multiplied by 2^121\\r\\n   */\\r\\n  function log_2(uint128 x)\\r\\n  internal pure returns(uint128) {\\r\\n    unchecked {\\r\\n      require(x != 0);\\r\\n\\r\\n      uint b = x;\\r\\n\\r\\n      uint l = 0xFE000000000000000000000000000000;\\r\\n\\r\\n      if(b < 0x10000000000000000) {l -= 0x80000000000000000000000000000000; b <<= 64;}\\r\\n      if(b < 0x1000000000000000000000000) {l -= 0x40000000000000000000000000000000; b <<= 32;}\\r\\n      if(b < 0x10000000000000000000000000000) {l -= 0x20000000000000000000000000000000; b <<= 16;}\\r\\n      if(b < 0x1000000000000000000000000000000) {l -= 0x10000000000000000000000000000000; b <<= 8;}\\r\\n      if(b < 0x10000000000000000000000000000000) {l -= 0x8000000000000000000000000000000; b <<= 4;}\\r\\n      if(b < 0x40000000000000000000000000000000) {l -= 0x4000000000000000000000000000000; b <<= 2;}\\r\\n      if(b < 0x80000000000000000000000000000000) {l -= 0x2000000000000000000000000000000; b <<= 1;}\\r\\n\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000;} /*\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) l |= 0x1; */\\r\\n\\r\\n      return uint128(l);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate 2 raised into given power.\\r\\n   *\\r\\n   * @param x power to raise 2 into, multiplied by 2^121\\r\\n   * @return 2 raised into given power\\r\\n   */\\r\\n  function pow_2(uint128 x)\\r\\n  internal pure returns(uint128) {\\r\\n    unchecked {\\r\\n      uint r = 0x80000000000000000000000000000000;\\r\\n      if(x & 0x1000000000000000000000000000000 > 0) r = r * 0xb504f333f9de6484597d89b3754abe9f >> 127;\\r\\n      if(x & 0x800000000000000000000000000000 > 0) r = r * 0x9837f0518db8a96f46ad23182e42f6f6 >> 127;\\r\\n      if(x & 0x400000000000000000000000000000 > 0) r = r * 0x8b95c1e3ea8bd6e6fbe4628758a53c90 >> 127;\\r\\n      if(x & 0x200000000000000000000000000000 > 0) r = r * 0x85aac367cc487b14c5c95b8c2154c1b2 >> 127;\\r\\n      if(x & 0x100000000000000000000000000000 > 0) r = r * 0x82cd8698ac2ba1d73e2a475b46520bff >> 127;\\r\\n      if(x & 0x80000000000000000000000000000 > 0) r = r * 0x8164d1f3bc0307737be56527bd14def4 >> 127;\\r\\n      if(x & 0x40000000000000000000000000000 > 0) r = r * 0x80b1ed4fd999ab6c25335719b6e6fd20 >> 127;\\r\\n      if(x & 0x20000000000000000000000000000 > 0) r = r * 0x8058d7d2d5e5f6b094d589f608ee4aa2 >> 127;\\r\\n      if(x & 0x10000000000000000000000000000 > 0) r = r * 0x802c6436d0e04f50ff8ce94a6797b3ce >> 127;\\r\\n      if(x & 0x8000000000000000000000000000 > 0) r = r * 0x8016302f174676283690dfe44d11d008 >> 127;\\r\\n      if(x & 0x4000000000000000000000000000 > 0) r = r * 0x800b179c82028fd0945e54e2ae18f2f0 >> 127;\\r\\n      if(x & 0x2000000000000000000000000000 > 0) r = r * 0x80058baf7fee3b5d1c718b38e549cb93 >> 127;\\r\\n      if(x & 0x1000000000000000000000000000 > 0) r = r * 0x8002c5d00fdcfcb6b6566a58c048be1f >> 127;\\r\\n      if(x & 0x800000000000000000000000000 > 0) r = r * 0x800162e61bed4a48e84c2e1a463473d9 >> 127;\\r\\n      if(x & 0x400000000000000000000000000 > 0) r = r * 0x8000b17292f702a3aa22beacca949013 >> 127;\\r\\n      if(x & 0x200000000000000000000000000 > 0) r = r * 0x800058b92abbae02030c5fa5256f41fe >> 127;\\r\\n      if(x & 0x100000000000000000000000000 > 0) r = r * 0x80002c5c8dade4d71776c0f4dbea67d6 >> 127;\\r\\n      if(x & 0x80000000000000000000000000 > 0) r = r * 0x8000162e44eaf636526be456600bdbe4 >> 127;\\r\\n      if(x & 0x40000000000000000000000000 > 0) r = r * 0x80000b1721fa7c188307016c1cd4e8b6 >> 127;\\r\\n      if(x & 0x20000000000000000000000000 > 0) r = r * 0x8000058b90de7e4cecfc487503488bb1 >> 127;\\r\\n      if(x & 0x10000000000000000000000000 > 0) r = r * 0x800002c5c8678f36cbfce50a6de60b14 >> 127;\\r\\n      if(x & 0x8000000000000000000000000 > 0) r = r * 0x80000162e431db9f80b2347b5d62e516 >> 127;\\r\\n      if(x & 0x4000000000000000000000000 > 0) r = r * 0x800000b1721872d0c7b08cf1e0114152 >> 127;\\r\\n      if(x & 0x2000000000000000000000000 > 0) r = r * 0x80000058b90c1aa8a5c3736cb77e8dff >> 127;\\r\\n      if(x & 0x1000000000000000000000000 > 0) r = r * 0x8000002c5c8605a4635f2efc2362d978 >> 127;\\r\\n      if(x & 0x800000000000000000000000 > 0) r = r * 0x800000162e4300e635cf4a109e3939bd >> 127;\\r\\n      if(x & 0x400000000000000000000000 > 0) r = r * 0x8000000b17217ff81bef9c551590cf83 >> 127;\\r\\n      if(x & 0x200000000000000000000000 > 0) r = r * 0x800000058b90bfdd4e39cd52c0cfa27c >> 127;\\r\\n      if(x & 0x100000000000000000000000 > 0) r = r * 0x80000002c5c85fe6f72d669e0e76e411 >> 127;\\r\\n      if(x & 0x80000000000000000000000 > 0) r = r * 0x8000000162e42ff18f9ad35186d0df28 >> 127;\\r\\n      if(x & 0x40000000000000000000000 > 0) r = r * 0x80000000b17217f84cce71aa0dcfffe7 >> 127;\\r\\n      if(x & 0x20000000000000000000000 > 0) r = r * 0x8000000058b90bfc07a77ad56ed22aaa >> 127;\\r\\n      if(x & 0x10000000000000000000000 > 0) r = r * 0x800000002c5c85fdfc23cdead40da8d6 >> 127;\\r\\n      if(x & 0x8000000000000000000000 > 0) r = r * 0x80000000162e42fefc25eb1571853a66 >> 127;\\r\\n      if(x & 0x4000000000000000000000 > 0) r = r * 0x800000000b17217f7d97f692baacded5 >> 127;\\r\\n      if(x & 0x2000000000000000000000 > 0) r = r * 0x80000000058b90bfbead3b8b5dd254d7 >> 127;\\r\\n      if(x & 0x1000000000000000000000 > 0) r = r * 0x8000000002c5c85fdf4eedd62f084e67 >> 127;\\r\\n      if(x & 0x800000000000000000000 > 0) r = r * 0x800000000162e42fefa58aef378bf586 >> 127;\\r\\n      if(x & 0x400000000000000000000 > 0) r = r * 0x8000000000b17217f7d24a78a3c7ef02 >> 127;\\r\\n      if(x & 0x200000000000000000000 > 0) r = r * 0x800000000058b90bfbe9067c93e474a6 >> 127;\\r\\n      if(x & 0x100000000000000000000 > 0) r = r * 0x80000000002c5c85fdf47b8e5a72599f >> 127;\\r\\n      if(x & 0x80000000000000000000 > 0) r = r * 0x8000000000162e42fefa3bdb315934a2 >> 127;\\r\\n      if(x & 0x40000000000000000000 > 0) r = r * 0x80000000000b17217f7d1d7299b49c46 >> 127;\\r\\n      if(x & 0x20000000000000000000 > 0) r = r * 0x8000000000058b90bfbe8e9a8d1c4ea0 >> 127;\\r\\n      if(x & 0x10000000000000000000 > 0) r = r * 0x800000000002c5c85fdf4745969ea76f >> 127;\\r\\n      if(x & 0x8000000000000000000 > 0) r = r * 0x80000000000162e42fefa3a0df5373bf >> 127;\\r\\n      if(x & 0x4000000000000000000 > 0) r = r * 0x800000000000b17217f7d1cff4aac1e1 >> 127;\\r\\n      if(x & 0x2000000000000000000 > 0) r = r * 0x80000000000058b90bfbe8e7db95a2f1 >> 127;\\r\\n      if(x & 0x1000000000000000000 > 0) r = r * 0x8000000000002c5c85fdf473e61ae1f8 >> 127;\\r\\n      if(x & 0x800000000000000000 > 0) r = r * 0x800000000000162e42fefa39f121751c >> 127;\\r\\n      if(x & 0x400000000000000000 > 0) r = r * 0x8000000000000b17217f7d1cf815bb96 >> 127;\\r\\n      if(x & 0x200000000000000000 > 0) r = r * 0x800000000000058b90bfbe8e7bec1e0d >> 127;\\r\\n      if(x & 0x100000000000000000 > 0) r = r * 0x80000000000002c5c85fdf473dee5f17 >> 127;\\r\\n      if(x & 0x80000000000000000 > 0) r = r * 0x8000000000000162e42fefa39ef5438f >> 127;\\r\\n      if(x & 0x40000000000000000 > 0) r = r * 0x80000000000000b17217f7d1cf7a26c8 >> 127;\\r\\n      if(x & 0x20000000000000000 > 0) r = r * 0x8000000000000058b90bfbe8e7bcf4a4 >> 127;\\r\\n      if(x & 0x10000000000000000 > 0) r = r * 0x800000000000002c5c85fdf473de72a2 >> 127; /*\\r\\n      if(x & 0x8000000000000000 > 0) r = r * 0x80000000000000162e42fefa39ef3765 >> 127;\\r\\n      if(x & 0x4000000000000000 > 0) r = r * 0x800000000000000b17217f7d1cf79b37 >> 127;\\r\\n      if(x & 0x2000000000000000 > 0) r = r * 0x80000000000000058b90bfbe8e7bcd7d >> 127;\\r\\n      if(x & 0x1000000000000000 > 0) r = r * 0x8000000000000002c5c85fdf473de6b6 >> 127;\\r\\n      if(x & 0x800000000000000 > 0) r = r * 0x800000000000000162e42fefa39ef359 >> 127;\\r\\n      if(x & 0x400000000000000 > 0) r = r * 0x8000000000000000b17217f7d1cf79ac >> 127;\\r\\n      if(x & 0x200000000000000 > 0) r = r * 0x800000000000000058b90bfbe8e7bcd6 >> 127;\\r\\n      if(x & 0x100000000000000 > 0) r = r * 0x80000000000000002c5c85fdf473de6a >> 127;\\r\\n      if(x & 0x80000000000000 > 0) r = r * 0x8000000000000000162e42fefa39ef35 >> 127;\\r\\n      if(x & 0x40000000000000 > 0) r = r * 0x80000000000000000b17217f7d1cf79a >> 127;\\r\\n      if(x & 0x20000000000000 > 0) r = r * 0x8000000000000000058b90bfbe8e7bcd >> 127;\\r\\n      if(x & 0x10000000000000 > 0) r = r * 0x800000000000000002c5c85fdf473de6 >> 127;\\r\\n      if(x & 0x8000000000000 > 0) r = r * 0x80000000000000000162e42fefa39ef3 >> 127;\\r\\n      if(x & 0x4000000000000 > 0) r = r * 0x800000000000000000b17217f7d1cf79 >> 127;\\r\\n      if(x & 0x2000000000000 > 0) r = r * 0x80000000000000000058b90bfbe8e7bc >> 127;\\r\\n      if(x & 0x1000000000000 > 0) r = r * 0x8000000000000000002c5c85fdf473de >> 127;\\r\\n      if(x & 0x800000000000 > 0) r = r * 0x800000000000000000162e42fefa39ef >> 127;\\r\\n      if(x & 0x400000000000 > 0) r = r * 0x8000000000000000000b17217f7d1cf7 >> 127;\\r\\n      if(x & 0x200000000000 > 0) r = r * 0x800000000000000000058b90bfbe8e7b >> 127;\\r\\n      if(x & 0x100000000000 > 0) r = r * 0x80000000000000000002c5c85fdf473d >> 127;\\r\\n      if(x & 0x80000000000 > 0) r = r * 0x8000000000000000000162e42fefa39e >> 127;\\r\\n      if(x & 0x40000000000 > 0) r = r * 0x80000000000000000000b17217f7d1cf >> 127;\\r\\n      if(x & 0x20000000000 > 0) r = r * 0x8000000000000000000058b90bfbe8e7 >> 127;\\r\\n      if(x & 0x10000000000 > 0) r = r * 0x800000000000000000002c5c85fdf473 >> 127;\\r\\n      if(x & 0x8000000000 > 0) r = r * 0x80000000000000000000162e42fefa39 >> 127;\\r\\n      if(x & 0x4000000000 > 0) r = r * 0x800000000000000000000b17217f7d1c >> 127;\\r\\n      if(x & 0x2000000000 > 0) r = r * 0x80000000000000000000058b90bfbe8e >> 127;\\r\\n      if(x & 0x1000000000 > 0) r = r * 0x8000000000000000000002c5c85fdf47 >> 127;\\r\\n      if(x & 0x800000000 > 0) r = r * 0x800000000000000000000162e42fefa3 >> 127;\\r\\n      if(x & 0x400000000 > 0) r = r * 0x8000000000000000000000b17217f7d1 >> 127;\\r\\n      if(x & 0x200000000 > 0) r = r * 0x800000000000000000000058b90bfbe8 >> 127;\\r\\n      if(x & 0x100000000 > 0) r = r * 0x80000000000000000000002c5c85fdf4 >> 127;\\r\\n      if(x & 0x80000000 > 0) r = r * 0x8000000000000000000000162e42fefa >> 127;\\r\\n      if(x & 0x40000000 > 0) r = r * 0x80000000000000000000000b17217f7d >> 127;\\r\\n      if(x & 0x20000000 > 0) r = r * 0x8000000000000000000000058b90bfbe >> 127;\\r\\n      if(x & 0x10000000 > 0) r = r * 0x800000000000000000000002c5c85fdf >> 127;\\r\\n      if(x & 0x8000000 > 0) r = r * 0x80000000000000000000000162e42fef >> 127;\\r\\n      if(x & 0x4000000 > 0) r = r * 0x800000000000000000000000b17217f7 >> 127;\\r\\n      if(x & 0x2000000 > 0) r = r * 0x80000000000000000000000058b90bfb >> 127;\\r\\n      if(x & 0x1000000 > 0) r = r * 0x8000000000000000000000002c5c85fd >> 127;\\r\\n      if(x & 0x800000 > 0) r = r * 0x800000000000000000000000162e42fe >> 127;\\r\\n      if(x & 0x400000 > 0) r = r * 0x8000000000000000000000000b17217f >> 127;\\r\\n      if(x & 0x200000 > 0) r = r * 0x800000000000000000000000058b90bf >> 127;\\r\\n      if(x & 0x100000 > 0) r = r * 0x80000000000000000000000002c5c85f >> 127;\\r\\n      if(x & 0x80000 > 0) r = r * 0x8000000000000000000000000162e42f >> 127;\\r\\n      if(x & 0x40000 > 0) r = r * 0x80000000000000000000000000b17217 >> 127;\\r\\n      if(x & 0x20000 > 0) r = r * 0x8000000000000000000000000058b90b >> 127;\\r\\n      if(x & 0x10000 > 0) r = r * 0x800000000000000000000000002c5c85 >> 127;\\r\\n      if(x & 0x8000 > 0) r = r * 0x80000000000000000000000000162e42 >> 127;\\r\\n      if(x & 0x4000 > 0) r = r * 0x800000000000000000000000000b1721 >> 127;\\r\\n      if(x & 0x2000 > 0) r = r * 0x80000000000000000000000000058b90 >> 127;\\r\\n      if(x & 0x1000 > 0) r = r * 0x8000000000000000000000000002c5c8 >> 127;\\r\\n      if(x & 0x800 > 0) r = r * 0x800000000000000000000000000162e4 >> 127;\\r\\n      if(x & 0x400 > 0) r = r * 0x8000000000000000000000000000b172 >> 127;\\r\\n      if(x & 0x200 > 0) r = r * 0x800000000000000000000000000058b9 >> 127;\\r\\n      if(x & 0x100 > 0) r = r * 0x80000000000000000000000000002c5c >> 127;\\r\\n      if(x & 0x80 > 0) r = r * 0x8000000000000000000000000000162e >> 127;\\r\\n      if(x & 0x40 > 0) r = r * 0x80000000000000000000000000000b17 >> 127;\\r\\n      if(x & 0x20 > 0) r = r * 0x8000000000000000000000000000058b >> 127;\\r\\n      if(x & 0x10 > 0) r = r * 0x800000000000000000000000000002c5 >> 127;\\r\\n      if(x & 0x8 > 0) r = r * 0x80000000000000000000000000000162 >> 127;\\r\\n      if(x & 0x4 > 0) r = r * 0x800000000000000000000000000000b1 >> 127;\\r\\n      if(x & 0x2 > 0) r = r * 0x80000000000000000000000000000058 >> 127;\\r\\n      if(x & 0x1 > 0) r = r * 0x8000000000000000000000000000002c >> 127; */\\r\\n\\r\\n      r >>= 127 -(x >> 121);\\r\\n\\r\\n      return uint128(r);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Ethereum smart contract library implementing Yield Math model.\\r\\n */\\r\\nlibrary YieldMath {\\r\\n  using Math64x64 for int128;\\r\\n  using Math64x64 for uint128;\\r\\n  using Math64x64 for int256;\\r\\n  using Math64x64 for uint256;\\r\\n  using Exp64x64 for uint128;\\r\\n\\r\\n  uint128 public constant ONE = 0x10000000000000000; // In 64.64\\r\\n  uint128 public constant TWO = 0x20000000000000000; // In 64.64\\r\\n  uint256 public constant MAX = type(uint128).max;   // Used for overflow checks\\r\\n  uint256 public constant VAR = 1e12;                // The logarithm math used is not precise to the wei, but can deviate up to 1e12 from the real value.\\r\\n\\r\\n  /**\\r\\n   * Calculate a YieldSpace pool invariant according to the whitepaper\\r\\n   */\\r\\n  function invariant(uint128 baseReserves, uint128 fyTokenReserves, uint256 totalSupply, uint128 timeTillMaturity, int128 ts)\\r\\n      public pure returns(uint128)\\r\\n  {\\r\\n    if (totalSupply == 0) return 0;\\r\\n\\r\\n    unchecked {\\r\\n      // a = (1 - ts * timeTillMaturity)\\r\\n      int128 a = int128(ONE).sub(ts.mul(timeTillMaturity.fromUInt()));\\r\\n      require (a > 0, \\\"YieldMath: Too far from maturity\\\");\\r\\n\\r\\n      uint256 sum =\\r\\n      uint256(baseReserves.pow(uint128 (a), ONE)) +\\r\\n      uint256(fyTokenReserves.pow(uint128 (a), ONE)) >> 1;\\r\\n      require(sum < MAX, \\\"YieldMath: Sum overflow\\\");\\r\\n\\r\\n      uint256 result = uint256(uint128(sum).pow(ONE, uint128(a))) / totalSupply;\\r\\n      require (result < MAX, \\\"YieldMath: Result overflow\\\");\\r\\n\\r\\n      return uint128(result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate the amount of fyToken a user would get for given amount of Base.\\r\\n   * https://www.desmos.com/calculator/5nf2xuy6yb\\r\\n   * @param baseReserves base reserves amount\\r\\n   * @param fyTokenReserves fyToken reserves amount\\r\\n   * @param baseAmount base amount to be traded\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return the amount of fyToken a user would get for given amount of Base\\r\\n   */\\r\\n  function fyTokenOutForBaseIn(\\r\\n    uint128 baseReserves, uint128 fyTokenReserves, uint128 baseAmount,\\r\\n    uint128 timeTillMaturity, int128 ts, int128 g)\\r\\n  public pure returns(uint128) {\\r\\n    unchecked {\\r\\n      uint128 a = _computeA(timeTillMaturity, ts, g);\\r\\n\\r\\n      // za = baseReserves ** a\\r\\n      uint256 za = baseReserves.pow(a, ONE);\\r\\n\\r\\n      // ya = fyTokenReserves ** a\\r\\n      uint256 ya = fyTokenReserves.pow(a, ONE);\\r\\n\\r\\n      // zx = baseReserves + baseAmount\\r\\n      uint256 zx = uint256(baseReserves) + uint256(baseAmount);\\r\\n      require(zx <= MAX, \\\"YieldMath: Too much base in\\\");\\r\\n\\r\\n      // zxa = zx ** a\\r\\n      uint256 zxa = uint128(zx).pow(a, ONE);\\r\\n\\r\\n      // sum = za + ya - zxa\\r\\n      uint256 sum = za + ya - zxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n      require(sum <= MAX, \\\"YieldMath: Insufficient fyToken reserves\\\");\\r\\n\\r\\n      // result = fyTokenReserves - (sum ** (1/a))\\r\\n      uint256 result = uint256(fyTokenReserves) - uint256(uint128(sum).pow(ONE, a));\\r\\n      require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n      result = result > VAR ? result - VAR : 0; // Subtract error guard, flooring the result at zero\\r\\n\\r\\n      return uint128(result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate the amount of base a user would get for certain amount of fyToken.\\r\\n   * https://www.desmos.com/calculator/6jlrre7ybt\\r\\n   * @param baseReserves base reserves amount\\r\\n   * @param fyTokenReserves fyToken reserves amount\\r\\n   * @param fyTokenAmount fyToken amount to be traded\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return the amount of Base a user would get for given amount of fyToken\\r\\n   */\\r\\n  function baseOutForFYTokenIn(\\r\\n    uint128 baseReserves, uint128 fyTokenReserves, uint128 fyTokenAmount,\\r\\n    uint128 timeTillMaturity, int128 ts, int128 g)\\r\\n  public pure returns(uint128) {\\r\\n    unchecked {\\r\\n      uint128 a = _computeA(timeTillMaturity, ts, g);\\r\\n\\r\\n      // za = baseReserves ** a\\r\\n      uint256 za = baseReserves.pow(a, ONE);\\r\\n\\r\\n      // ya = fyTokenReserves ** a\\r\\n      uint256 ya = fyTokenReserves.pow(a, ONE);\\r\\n\\r\\n      // yx = fyDayReserves + fyTokenAmount\\r\\n      uint256 yx = uint256(fyTokenReserves) + uint256(fyTokenAmount);\\r\\n      require(yx <= MAX, \\\"YieldMath: Too much fyToken in\\\");\\r\\n\\r\\n      // yxa = yx ** a\\r\\n      uint256 yxa = uint128(yx).pow(a, ONE);\\r\\n\\r\\n      // sum = za + ya - yxa\\r\\n      uint256 sum = za + ya - yxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n      require(sum <= MAX, \\\"YieldMath: Insufficient base reserves\\\");\\r\\n\\r\\n      // result = baseReserves - (sum ** (1/a))\\r\\n      uint256 result = uint256(baseReserves) - uint256(uint128(sum).pow(ONE, a));\\r\\n      require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n      result = result > VAR ? result - VAR : 0; // Subtract error guard, flooring the result at zero\\r\\n\\r\\n      return uint128(result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate the amount of fyToken a user could sell for given amount of Base.\\r\\n   * https://www.desmos.com/calculator/0rgnmtckvy\\r\\n   * @param baseReserves base reserves amount\\r\\n   * @param fyTokenReserves fyToken reserves amount\\r\\n   * @param baseAmount Base amount to be traded\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return the amount of fyToken a user could sell for given amount of Base\\r\\n   */\\r\\n  function fyTokenInForBaseOut(\\r\\n    uint128 baseReserves, uint128 fyTokenReserves, uint128 baseAmount,\\r\\n    uint128 timeTillMaturity, int128 ts, int128 g)\\r\\n  public pure returns(uint128) {\\r\\n    unchecked {\\r\\n      uint128 a = _computeA(timeTillMaturity, ts, g);\\r\\n\\r\\n      // za = baseReserves ** a\\r\\n      uint256 za = baseReserves.pow(a, ONE);\\r\\n\\r\\n      // ya = fyTokenReserves ** a\\r\\n      uint256 ya = fyTokenReserves.pow(a, ONE);\\r\\n\\r\\n      // zx = baseReserves - baseAmount\\r\\n      uint256 zx = uint256(baseReserves) - uint256(baseAmount);\\r\\n      require(zx <= MAX, \\\"YieldMath: Too much base out\\\");\\r\\n\\r\\n      // zxa = zx ** a\\r\\n      uint256 zxa = uint128(zx).pow(a, ONE);\\r\\n\\r\\n      // sum = za + ya - zxa\\r\\n      uint256 sum = za + ya - zxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n      require(sum <= MAX, \\\"YieldMath: Resulting fyToken reserves too high\\\");\\r\\n\\r\\n      // result = (sum ** (1/a)) - fyTokenReserves\\r\\n      uint256 result = uint256(uint128(sum).pow(ONE, a)) - uint256(fyTokenReserves);\\r\\n      require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n      result = result < MAX - VAR ? result + VAR : MAX; // Add error guard, ceiling the result at max\\r\\n\\r\\n      return uint128(result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate the amount of base a user would have to pay for certain amount of fyToken.\\r\\n   * https://www.desmos.com/calculator/ws5oqj8x5i\\r\\n   * @param baseReserves Base reserves amount\\r\\n   * @param fyTokenReserves fyToken reserves amount\\r\\n   * @param fyTokenAmount fyToken amount to be traded\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return the amount of base a user would have to pay for given amount of\\r\\n   *         fyToken\\r\\n   */\\r\\n  function baseInForFYTokenOut(\\r\\n    uint128 baseReserves, uint128 fyTokenReserves, uint128 fyTokenAmount,\\r\\n    uint128 timeTillMaturity, int128 ts, int128 g)\\r\\n  public pure returns(uint128) {\\r\\n    unchecked {\\r\\n      uint128 a = _computeA(timeTillMaturity, ts, g);\\r\\n\\r\\n      // za = baseReserves ** a\\r\\n      uint256 za = baseReserves.pow(a, ONE);\\r\\n\\r\\n      // ya = fyTokenReserves ** a\\r\\n      uint256 ya = fyTokenReserves.pow(a, ONE);\\r\\n\\r\\n      // yx = baseReserves - baseAmount\\r\\n      uint256 yx = uint256(fyTokenReserves) - uint256(fyTokenAmount);\\r\\n      require(yx <= MAX, \\\"YieldMath: Too much fyToken out\\\");\\r\\n\\r\\n      // yxa = yx ** a\\r\\n      uint256 yxa = uint128(yx).pow(a, ONE);\\r\\n\\r\\n      // sum = za + ya - yxa\\r\\n      uint256 sum = za + ya - yxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n      require(sum <= MAX, \\\"YieldMath: Resulting base reserves too high\\\");\\r\\n\\r\\n      // result = (sum ** (1/a)) - baseReserves\\r\\n      uint256 result = uint256(uint128(sum).pow(ONE, a)) - uint256(baseReserves);\\r\\n      require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n      result = result < MAX - VAR ? result + VAR : MAX; // Add error guard, ceiling the result at max\\r\\n\\r\\n      return uint128(result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate the max amount of fyTokens that can be bought from the pool without making the interest rate negative.\\r\\n   * See section 6.3 of the YieldSpace White paper\\r\\n   * @param baseReserves Base reserves amount\\r\\n   * @param fyTokenReserves fyToken reserves amount\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return max amount of fyTokens that can be bought from the pool\\r\\n   */\\r\\n  function maxFYTokenOut(\\r\\n    uint128 baseReserves, uint128 fyTokenReserves,\\r\\n    uint128 timeTillMaturity, int128 ts, int128 g)\\r\\n  public pure returns(uint128) {\\r\\n    if (baseReserves == fyTokenReserves) return 0;\\r\\n    unchecked {\\r\\n      uint128 a = _computeA(timeTillMaturity, ts, g);\\r\\n\\r\\n      // xa = baseReserves ** a\\r\\n      uint128 xa = baseReserves.pow(a, ONE);\\r\\n\\r\\n      // ya = fyTokenReserves ** a\\r\\n      uint128 ya = fyTokenReserves.pow(a, ONE);\\r\\n\\r\\n      int128 xy2 = (xa + ya).divu(TWO);\\r\\n\\r\\n      uint inaccessible = uint256(uint128(xy2).pow(ONE, a));\\r\\n      require(inaccessible <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n      inaccessible = inaccessible < MAX - VAR ? inaccessible + VAR : MAX; // Add error guard, ceiling the result at max\\r\\n\\r\\n      return uint128(inaccessible) > fyTokenReserves ? 0 : fyTokenReserves - uint128(inaccessible);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate the max amount of fyTokens that can be sold to into the pool.\\r\\n   * @param baseReserves Base reserves amount\\r\\n   * @param fyTokenReserves fyToken reserves amount\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return max amount of fyTokens that can be sold to into the pool\\r\\n   */\\r\\n  function maxFYTokenIn(\\r\\n    uint128 baseReserves, uint128 fyTokenReserves,\\r\\n    uint128 timeTillMaturity, int128 ts, int128 g)\\r\\n  public pure returns(uint128) {\\r\\n    unchecked {\\r\\n      uint128 b = _computeB(timeTillMaturity, ts, g);\\r\\n\\r\\n      // xa = baseReserves ** a\\r\\n      uint128 xa = baseReserves.pow(b, ONE);\\r\\n\\r\\n      // ya = fyTokenReserves ** a\\r\\n      uint128 ya = fyTokenReserves.pow(b, ONE);\\r\\n\\r\\n      uint result = (xa + ya).pow(ONE, b) - fyTokenReserves;\\r\\n      require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n      result = result > VAR ? result - VAR : 0; // Subtract error guard, flooring the result at zero\\r\\n\\r\\n      return uint128(result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate the max amount of base that can be sold to into the pool without making the interest rate negative.\\r\\n   * @param baseReserves Base reserves amount\\r\\n   * @param fyTokenReserves fyToken reserves amount\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return max amount of base that can be sold to into the pool\\r\\n   */\\r\\n  function maxBaseIn(\\r\\n    uint128 baseReserves, uint128 fyTokenReserves,\\r\\n    uint128 timeTillMaturity, int128 ts, int128 g)\\r\\n  public pure returns (uint128) {\\r\\n    uint128 _maxFYTokenOut = maxFYTokenOut(baseReserves, fyTokenReserves, timeTillMaturity, ts, g);\\r\\n    if (_maxFYTokenOut > 0)\\r\\n      return baseInForFYTokenOut(baseReserves, fyTokenReserves, _maxFYTokenOut, timeTillMaturity, ts, g);\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate the max amount of base that can be bought from the pool.\\r\\n   * @param baseReserves Base reserves amount\\r\\n   * @param fyTokenReserves fyToken reserves amount\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return max amount of base that can be bought from the pool\\r\\n   */\\r\\n  function maxBaseOut(\\r\\n    uint128 baseReserves, uint128 fyTokenReserves,\\r\\n    uint128 timeTillMaturity, int128 ts, int128 g)\\r\\n  public pure returns (uint128) {\\r\\n    uint128 _maxFYTokenIn = maxFYTokenIn(baseReserves, fyTokenReserves, timeTillMaturity, ts, g);\\r\\n    return baseOutForFYTokenIn(baseReserves, fyTokenReserves, _maxFYTokenIn, timeTillMaturity, ts, g);\\r\\n  }\\r\\n\\r\\n  function _computeA(uint128 timeTillMaturity, int128 ts, int128 g) private pure returns (uint128) {\\r\\n    unchecked {\\r\\n      // t = ts * timeTillMaturity\\r\\n      int128 t = ts.mul(timeTillMaturity.fromUInt());\\r\\n      require(t >= 0, \\\"YieldMath: t must be positive\\\"); // Meaning neither T or ts can be negative\\r\\n\\r\\n      // a = (1 - gt)\\r\\n      int128 a = int128(ONE).sub(g.mul(t));\\r\\n      require(a > 0, \\\"YieldMath: Too far from maturity\\\");\\r\\n      require(a <= int128(ONE), \\\"YieldMath: g must be positive\\\");\\r\\n\\r\\n      return uint128(a);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _computeB(uint128 timeTillMaturity, int128 ts, int128 g) private pure returns (uint128) {\\r\\n    unchecked {\\r\\n      // t = ts * timeTillMaturity\\r\\n      int128 t = ts.mul(timeTillMaturity.fromUInt());\\r\\n      require(t >= 0, \\\"YieldMath: t must be positive\\\"); // Meaning neither T or ts can be negative\\r\\n\\r\\n      // b = (1 - t/g)\\r\\n      int128 b = int128(ONE).sub(t.div(g));\\r\\n      require(b > 0, \\\"YieldMath: Too far from maturity\\\");\\r\\n      require(b <= int128(ONE), \\\"YieldMath: g must be positive\\\");\\r\\n\\r\\n      return uint128(b);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/token/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/token/IERC2612.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n */\\ninterface IERC2612 {\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@yield-protocol/vault-interfaces/IFYToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@yield-protocol/utils-v2/contracts/token/IERC20.sol\\\";\\n\\n\\ninterface IFYToken is IERC20 {\\n    /// @dev Asset that is returned on redemption.\\n    function underlying() external view returns (address);\\n\\n    /// @dev Unix time at which redemption of fyToken for underlying are possible\\n    function maturity() external view returns (uint256);\\n    \\n    /// @dev Record price data at maturity\\n    function mature() external;\\n\\n    /// @dev Mint fyToken providing an equal amount of underlying to the protocol\\n    function mintWithUnderlying(address to, uint256 amount) external;\\n\\n    /// @dev Burn fyToken after maturity for an amount of underlying.\\n    function redeem(address to, uint256 amount) external returns (uint256);\\n\\n    /// @dev Mint fyToken.\\n    /// This function can only be called by other Yield contracts, not users directly.\\n    /// @param to Wallet to mint the fyToken in.\\n    /// @param fyTokenAmount Amount of fyToken to mint.\\n    function mint(address to, uint256 fyTokenAmount) external;\\n\\n    /// @dev Burn fyToken.\\n    /// This function can only be called by other Yield contracts, not users directly.\\n    /// @param from Wallet to burn the fyToken from.\\n    /// @param fyTokenAmount Amount of fyToken to burn.\\n    function burn(address from, uint256 fyTokenAmount) external;\\n}\"\r\n    },\r\n    \"@yield-protocol/yieldspace-v2/contracts/Math64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n/*\\r\\n *  Math 64.64 Smart Contract Library.  Copyright © 2019 by  Consulting.\\r\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\r\\n */\\r\\npragma solidity 0.8.6;\\r\\n\\r\\n/**\\r\\n * Smart contract library of mathematical functions operating with signed\\r\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\r\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\r\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\r\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\r\\n * represented by int128 type holding only the numerator.\\r\\n */\\r\\nlibrary Math64x64 {\\r\\n  /*\\r\\n   * Minimum value signed 64.64-bit fixed point number may have. \\r\\n   */\\r\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\r\\n\\r\\n  /*\\r\\n   * Maximum value signed 64.64-bit fixed point number may have. \\r\\n   */\\r\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n  /**\\r\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\r\\n   * number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function fromInt (int256 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\r\\n      return int128 (x << 64);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\r\\n   * rounding down.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64-bit integer number\\r\\n   */\\r\\n  function toInt (int128 x) internal pure returns (int64) {\\r\\n    unchecked {\\r\\n      return int64 (x >> 64);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\r\\n   * number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x <= 0x7FFFFFFFFFFFFFFF);\\r\\n      return int128 (int256 (x << 64));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\r\\n   * number rounding down.  Revert on underflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return unsigned 64-bit integer number\\r\\n   */\\r\\n  function toUInt (int128 x) internal pure returns (uint64) {\\r\\n    unchecked {\\r\\n      require (x >= 0);\\r\\n      return uint64 (uint128 (x >> 64));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\r\\n   * number rounding down.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 128.128-bin fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function from128x128 (int256 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      int256 result = x >> 64;\\r\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\r\\n   * number.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 128.128 fixed point number\\r\\n   */\\r\\n  function to128x128 (int128 x) internal pure returns (int256) {\\r\\n    unchecked {\\r\\n      return int256 (x) << 64;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x + y.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      int256 result = int256(x) + y;\\r\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x - y.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      int256 result = int256(x) - y;\\r\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x * y rounding down.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      int256 result = int256(x) * y >> 64;\\r\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\r\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64 fixed point number\\r\\n   * @param y signed 256-bit integer number\\r\\n   * @return signed 256-bit integer number\\r\\n   */\\r\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\r\\n    unchecked {\\r\\n      if (x == MIN_64x64) {\\r\\n        require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\r\\n          y <= 0x1000000000000000000000000000000000000000000000000);\\r\\n        return -y << 63;\\r\\n      } else {\\r\\n        bool negativeResult = false;\\r\\n        if (x < 0) {\\r\\n          x = -x;\\r\\n          negativeResult = true;\\r\\n        }\\r\\n        if (y < 0) {\\r\\n          y = -y; // We rely on overflow behavior here\\r\\n          negativeResult = !negativeResult;\\r\\n        }\\r\\n        uint256 absoluteResult = mulu (x, uint256 (y));\\r\\n        if (negativeResult) {\\r\\n          require (absoluteResult <=\\r\\n            0x8000000000000000000000000000000000000000000000000000000000000000);\\r\\n          return -int256 (absoluteResult); // We rely on overflow behavior here\\r\\n        } else {\\r\\n          require (absoluteResult <=\\r\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n          return int256 (absoluteResult);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\r\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64 fixed point number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return unsigned 256-bit integer number\\r\\n   */\\r\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      if (y == 0) return 0;\\r\\n\\r\\n      require (x >= 0);\\r\\n\\r\\n      uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\r\\n      uint256 hi = uint256 (int256 (x)) * (y >> 128);\\r\\n\\r\\n      require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n      hi <<= 64;\\r\\n\\r\\n      require (hi <=\\r\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\r\\n      return hi + lo;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\r\\n   * zero.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (y != 0);\\r\\n      int256 result = (int256 (x) << 64) / y;\\r\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x signed 256-bit integer number\\r\\n   * @param y signed 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (y != 0);\\r\\n\\r\\n      bool negativeResult = false;\\r\\n      if (x < 0) {\\r\\n        x = -x; // We rely on overflow behavior here\\r\\n        negativeResult = true;\\r\\n      }\\r\\n      if (y < 0) {\\r\\n        y = -y; // We rely on overflow behavior here\\r\\n        negativeResult = !negativeResult;\\r\\n      }\\r\\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\r\\n      if (negativeResult) {\\r\\n        require (absoluteResult <= 0x80000000000000000000000000000000);\\r\\n        return -int128 (absoluteResult); // We rely on overflow behavior here\\r\\n      } else {\\r\\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n        return int128 (absoluteResult); // We rely on overflow behavior here\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (y != 0);\\r\\n      uint128 result = divuu (x, y);\\r\\n      require (result <= uint128 (MAX_64x64));\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate -x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function neg (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x != MIN_64x64);\\r\\n      return -x;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate |x|.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function abs (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x != MIN_64x64);\\r\\n      return x < 0 ? -x : x;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\r\\n   * zero.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function inv (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x != 0);\\r\\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\\r\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      return int128 ((int256 (x) + int256 (y)) >> 1);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\r\\n   * Revert on overflow or in case x * y is negative.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      int256 m = int256 (x) * int256 (y);\\r\\n      require (m >= 0);\\r\\n      require (m <\\r\\n          0x4000000000000000000000000000000000000000000000000000000000000000);\\r\\n      return int128 (sqrtu (uint256 (m)));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\r\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y uint256 value\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      bool negative = x < 0 && y & 1 == 1;\\r\\n\\r\\n      uint256 absX = uint128 (x < 0 ? -x : x);\\r\\n      uint256 absResult;\\r\\n      absResult = 0x100000000000000000000000000000000;\\r\\n\\r\\n      if (absX <= 0x10000000000000000) {\\r\\n        absX <<= 63;\\r\\n        while (y != 0) {\\r\\n          if (y & 0x1 != 0) {\\r\\n            absResult = absResult * absX >> 127;\\r\\n          }\\r\\n          absX = absX * absX >> 127;\\r\\n\\r\\n          if (y & 0x2 != 0) {\\r\\n            absResult = absResult * absX >> 127;\\r\\n          }\\r\\n          absX = absX * absX >> 127;\\r\\n\\r\\n          if (y & 0x4 != 0) {\\r\\n            absResult = absResult * absX >> 127;\\r\\n          }\\r\\n          absX = absX * absX >> 127;\\r\\n\\r\\n          if (y & 0x8 != 0) {\\r\\n            absResult = absResult * absX >> 127;\\r\\n          }\\r\\n          absX = absX * absX >> 127;\\r\\n\\r\\n          y >>= 4;\\r\\n        }\\r\\n\\r\\n        absResult >>= 64;\\r\\n      } else {\\r\\n        uint256 absXShift = 63;\\r\\n        if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\\r\\n        if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\\r\\n        if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\\r\\n        if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\\r\\n        if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\\r\\n        if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\\r\\n\\r\\n        uint256 resultShift = 0;\\r\\n        while (y != 0) {\\r\\n          require (absXShift < 64);\\r\\n\\r\\n          if (y & 0x1 != 0) {\\r\\n            absResult = absResult * absX >> 127;\\r\\n            resultShift += absXShift;\\r\\n            if (absResult > 0x100000000000000000000000000000000) {\\r\\n              absResult >>= 1;\\r\\n              resultShift += 1;\\r\\n            }\\r\\n          }\\r\\n          absX = absX * absX >> 127;\\r\\n          absXShift <<= 1;\\r\\n          if (absX >= 0x100000000000000000000000000000000) {\\r\\n              absX >>= 1;\\r\\n              absXShift += 1;\\r\\n          }\\r\\n\\r\\n          y >>= 1;\\r\\n        }\\r\\n\\r\\n        require (resultShift < 64);\\r\\n        absResult >>= 64 - resultShift;\\r\\n      }\\r\\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\\r\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function sqrt (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x >= 0);\\r\\n      return int128 (sqrtu (uint256 (int256 (x)) << 64));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function log_2 (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x > 0);\\r\\n\\r\\n      int256 msb = 0;\\r\\n      int256 xc = x;\\r\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\r\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n      int256 result = msb - 64 << 64;\\r\\n      uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\\r\\n      for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\r\\n        ux *= ux;\\r\\n        uint256 b = ux >> 255;\\r\\n        ux >>= 127 + b;\\r\\n        result += bit * int256 (b);\\r\\n      }\\r\\n\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function ln (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x > 0);\\r\\n\\r\\n      return int128 (int256 (\\r\\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate binary exponent of x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function exp_2 (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x < 0x400000000000000000); // Overflow\\r\\n\\r\\n      if (x < -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n      uint256 result = 0x80000000000000000000000000000000;\\r\\n\\r\\n      if (x & 0x8000000000000000 > 0)\\r\\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\r\\n      if (x & 0x4000000000000000 > 0)\\r\\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\r\\n      if (x & 0x2000000000000000 > 0)\\r\\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\r\\n      if (x & 0x1000000000000000 > 0)\\r\\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\r\\n      if (x & 0x800000000000000 > 0)\\r\\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\r\\n      if (x & 0x400000000000000 > 0)\\r\\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\r\\n      if (x & 0x200000000000000 > 0)\\r\\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\r\\n      if (x & 0x100000000000000 > 0)\\r\\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\r\\n      if (x & 0x80000000000000 > 0)\\r\\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\r\\n      if (x & 0x40000000000000 > 0)\\r\\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\r\\n      if (x & 0x20000000000000 > 0)\\r\\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\r\\n      if (x & 0x10000000000000 > 0)\\r\\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\r\\n      if (x & 0x8000000000000 > 0)\\r\\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\r\\n      if (x & 0x4000000000000 > 0)\\r\\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\r\\n      if (x & 0x2000000000000 > 0)\\r\\n        result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\r\\n      if (x & 0x1000000000000 > 0)\\r\\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\r\\n      if (x & 0x800000000000 > 0)\\r\\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\r\\n      if (x & 0x400000000000 > 0)\\r\\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\r\\n      if (x & 0x200000000000 > 0)\\r\\n        result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\r\\n      if (x & 0x100000000000 > 0)\\r\\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\r\\n      if (x & 0x80000000000 > 0)\\r\\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\r\\n      if (x & 0x40000000000 > 0)\\r\\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\r\\n      if (x & 0x20000000000 > 0)\\r\\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\r\\n      if (x & 0x10000000000 > 0)\\r\\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\r\\n      if (x & 0x8000000000 > 0)\\r\\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\r\\n      if (x & 0x4000000000 > 0)\\r\\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\r\\n      if (x & 0x2000000000 > 0)\\r\\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\r\\n      if (x & 0x1000000000 > 0)\\r\\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\r\\n      if (x & 0x800000000 > 0)\\r\\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\r\\n      if (x & 0x400000000 > 0)\\r\\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\r\\n      if (x & 0x200000000 > 0)\\r\\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\r\\n      if (x & 0x100000000 > 0)\\r\\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\r\\n      if (x & 0x80000000 > 0)\\r\\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\r\\n      if (x & 0x40000000 > 0)\\r\\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\r\\n      if (x & 0x20000000 > 0)\\r\\n        result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\r\\n      if (x & 0x10000000 > 0)\\r\\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\r\\n      if (x & 0x8000000 > 0)\\r\\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\r\\n      if (x & 0x4000000 > 0)\\r\\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\r\\n      if (x & 0x2000000 > 0)\\r\\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\r\\n      if (x & 0x1000000 > 0)\\r\\n        result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\r\\n      if (x & 0x800000 > 0)\\r\\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\r\\n      if (x & 0x400000 > 0)\\r\\n        result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\r\\n      if (x & 0x200000 > 0)\\r\\n        result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\r\\n      if (x & 0x100000 > 0)\\r\\n        result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\r\\n      if (x & 0x80000 > 0)\\r\\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\r\\n      if (x & 0x40000 > 0)\\r\\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\r\\n      if (x & 0x20000 > 0)\\r\\n        result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\r\\n      if (x & 0x10000 > 0)\\r\\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\r\\n      if (x & 0x8000 > 0)\\r\\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\r\\n      if (x & 0x4000 > 0)\\r\\n        result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\r\\n      if (x & 0x2000 > 0)\\r\\n        result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\r\\n      if (x & 0x1000 > 0)\\r\\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\r\\n      if (x & 0x800 > 0)\\r\\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\r\\n      if (x & 0x400 > 0)\\r\\n        result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\r\\n      if (x & 0x200 > 0)\\r\\n        result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\r\\n      if (x & 0x100 > 0)\\r\\n        result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\r\\n      if (x & 0x80 > 0)\\r\\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\r\\n      if (x & 0x40 > 0)\\r\\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\r\\n      if (x & 0x20 > 0)\\r\\n        result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\r\\n      if (x & 0x10 > 0)\\r\\n        result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\r\\n      if (x & 0x8 > 0)\\r\\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\r\\n      if (x & 0x4 > 0)\\r\\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\r\\n      if (x & 0x2 > 0)\\r\\n        result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\r\\n      if (x & 0x1 > 0)\\r\\n        result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\r\\n\\r\\n      result >>= uint256 (int256 (63 - (x >> 64)));\\r\\n      require (result <= uint256 (int256 (MAX_64x64)));\\r\\n\\r\\n      return int128 (int256 (result));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate natural exponent of x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function exp (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x < 0x400000000000000000); // Overflow\\r\\n\\r\\n      if (x < -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n      return exp_2 (\\r\\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return unsigned 64.64-bit fixed point number\\r\\n   */\\r\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\r\\n    unchecked {\\r\\n      require (y != 0);\\r\\n\\r\\n      uint256 result;\\r\\n\\r\\n      if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\r\\n        result = (x << 64) / y;\\r\\n      else {\\r\\n        uint256 msb = 192;\\r\\n        uint256 xc = x >> 192;\\r\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n        result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\r\\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n        uint256 hi = result * (y >> 128);\\r\\n        uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n        uint256 xh = x >> 192;\\r\\n        uint256 xl = x << 64;\\r\\n\\r\\n        if (xl < lo) xh -= 1;\\r\\n        xl -= lo; // We rely on overflow behavior here\\r\\n        lo = hi << 128;\\r\\n        if (xl < lo) xh -= 1;\\r\\n        xl -= lo; // We rely on overflow behavior here\\r\\n\\r\\n        assert (xh == hi >> 128);\\r\\n\\r\\n        result += xl / y;\\r\\n      }\\r\\n\\r\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n      return uint128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\r\\n   * number.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @return unsigned 128-bit integer number\\r\\n   */\\r\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\r\\n    unchecked {\\r\\n      if (x == 0) return 0;\\r\\n      else {\\r\\n        uint256 xx = x;\\r\\n        uint256 r = 1;\\r\\n        if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\r\\n        if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\r\\n        if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\r\\n        if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\r\\n        if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\r\\n        if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\r\\n        if (xx >= 0x8) { r <<= 1; }\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\r\\n        uint256 r1 = x / r;\\r\\n        return uint128 (r < r1 ? r : r1);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"@yield-protocol/yieldspace-v2/contracts/YieldMath.sol\": {\r\n        \"YieldMath\": \"0x856ddd1a74b6e620d043efd6f74d81b8bf34868d\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"IPool\"}],\"name\":\"invariant\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"IPool\"}],\"name\":\"maxBaseIn\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"IPool\"}],\"name\":\"maxBaseOut\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"IPool\"}],\"name\":\"maxFYTokenIn\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"IPool\"}],\"name\":\"maxFYTokenOut\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"YieldMathExtensions","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}