{"status":"1","message":"OK","result":[{"SourceCode":"// =================================================================================================================\r\n//  _|_|_|    _|_|_|_|  _|    _|    _|_|_|      _|_|_|_|  _|                                                       |\r\n//  _|    _|  _|        _|    _|  _|            _|            _|_|_|      _|_|_|  _|_|_|      _|_|_|    _|_|       |\r\n//  _|    _|  _|_|_|    _|    _|    _|_|        _|_|_|    _|  _|    _|  _|    _|  _|    _|  _|        _|_|_|_|     |\r\n//  _|    _|  _|        _|    _|        _|      _|        _|  _|    _|  _|    _|  _|    _|  _|        _|           |\r\n//  _|_|_|    _|_|_|_|    _|_|    _|_|_|        _|        _|  _|    _|    _|_|_|  _|    _|    _|_|_|    _|_|_|     |\r\n// =================================================================================================================\r\n//                         %@(                                                @@@                       \r\n//                       @@@@@@@                                      @@@@@@@@@@@@@@@@@@@               \r\n//                       @@@@@@@                                   @@@@@@@@         *@@@@@@@(           \r\n//                    #@@@ @@@,@@@,                             @@@@@@                   @@@@@@         \r\n//                  @@@@   @@@   @@@@                  @@@@@@@@@@@@@                       @@@@@@@@@@@@@\r\n//               #@@@.     @@@     *@@@,               @@@@@@@@@@@                           @@@@@@@@@@@\r\n//             @@@@        @@@        @@@@                   @@@@            @@@@@            @@@@      \r\n//          (@@@.          @@@          ,@@@,               @@@@@          @@@@@@@@@          (@@@@     \r\n//        @@@@            .@@@             @@@@             @@@@.          @@@@@@@@@           @@@@     \r\n//  @@@@@@@              @@@@@@&             ,@@@@@@&       *@@@@           @@@@@@@           @@@@&     \r\n// @@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@        @@@@@                            @@@@      \r\n//  (@@@@@@,  *@@@@@@@            ,@@@@@@@,  /@@@@@@.  @@@@@@@@@@@@                         @@@@@@@@@@@@\r\n//        @@@@    @@@@             @@@&    @@@@        @@@@@@@@@@@@@@                     @@@@@@@@@@@@@@\r\n//          .@@@,   @@@          .@@&   (@@@                     @@@@@@@               @@@@@@@          \r\n//             @@@@  (@@*       @@@.  @@@@                          @@@@@@@@@@@@@@@@@@@@@@@             \r\n//               ,@@@. @@@     @@@ /@@@                                  @@@@@@@@@@@@@                  \r\n//                  @@@@@@@   @@@@@@@                \r\n//                    .@@@@@ @@@@@                   \r\n//                       @@@@@@@                     \r\n//                       @@@@@@@\r\n// ======================= DEUS Bridge ======================\r\n// ==========================================================\r\n// DEUS Finance: https://github.com/DeusFinance\r\n\r\n// Primary Author(s)\r\n// Sadegh: https://github.com/sadeghte\r\n// Reza: https://github.com/bakhshandeh\r\n// Vahid: https://github.com/vahid-dev\r\n// Mahdi: https://github.com/Mahdi-HF\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/cryptography/ECDSA.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n        } else if (signature.length == 64) {\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                let vs := mload(add(signature, 0x40))\r\n                r := mload(add(signature, 0x20))\r\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n                v := add(shr(255, vs), 27)\r\n            }\r\n        } else {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n\r\n        return recover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n รท 2 + 1, and for v in (282): v โ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\r\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IMuonV02.sol\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nstruct SchnorrSign {\r\n    uint256 signature;\r\n    address owner;\r\n    address nonce;\r\n}\r\n\r\ninterface IMuonV02{\r\n    function verify(bytes calldata reqId, uint256 hash, SchnorrSign[] calldata _sigs) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IDeusBridge.sol\r\n\r\npragma solidity >=0.8.0 <=0.9.0;\r\n\r\n\r\nstruct Transaction {\r\n    uint txId;\r\n    uint tokenId;\r\n    uint amount;\r\n    uint fromChain;\r\n    uint toChain;\r\n    address user;\r\n    uint txBlockNo;\r\n}\r\n\r\ninterface IDeusBridge {\r\n\t/* ========== STATE VARIABLES ========== */\r\n\t\r\n    function lastTxId() external view returns (uint);\r\n    function network() external view returns (uint);\r\n    function minReqSigs() external view returns (uint);\r\n    function scale() external view returns (uint);\r\n    function bridgeReserve() external view returns (uint);\r\n    function muonContract() external view returns (address);\r\n    function deiAddress() external view returns (address);\r\n    function mintable() external view returns (bool);\r\n    function ETH_APP_ID() external view returns (uint8);\r\n    function sideContracts(uint) external view returns (address);\r\n    function tokens(uint) external view returns (address);\r\n    function claimedTxs(uint, uint) external view returns (bool);\r\n    function fee(uint) external view returns (uint);\r\n    function collectedFee(uint) external view returns (uint);\r\n\r\n\t/* ========== PUBLIC FUNCTIONS ========== */\r\n\tfunction deposit(\r\n\t\tuint amount, \r\n\t\tuint toChain,\r\n\t\tuint tokenId\r\n\t) external returns (uint txId);\r\n\tfunction depositFor(\r\n\t\taddress user,\r\n\t\tuint amount, \r\n\t\tuint toChain,\r\n\t\tuint tokenId\r\n\t) external returns (uint txId);\r\n\tfunction deposit(\r\n\t\tuint amount, \r\n\t\tuint toChain,\r\n\t\tuint tokenId,\r\n\t\tuint referralCode\r\n\t) external returns (uint txId);\r\n\tfunction depositFor(\r\n\t\taddress user,\r\n\t\tuint amount, \r\n\t\tuint toChain,\r\n\t\tuint tokenId,\r\n\t\tuint referralCode\r\n\t) external returns (uint txId);\r\n\tfunction claim(\r\n        address user,\r\n        uint amount,\r\n        uint fromChain,\r\n        uint toChain,\r\n        uint tokenId,\r\n        uint txId,\r\n        bytes calldata _reqId,\r\n        SchnorrSign[] calldata sigs\r\n    ) external;\r\n\r\n\t/* ========== VIEWS ========== */\r\n\tfunction collatDollarBalance(uint collat_usd_price) external view returns (uint);\r\n\tfunction pendingTxs(\r\n\t\tuint fromChain, \r\n\t\tuint[] calldata ids\r\n\t) external view returns (bool[] memory unclaimedIds);\r\n\tfunction getUserTxs(\r\n\t\taddress user, \r\n\t\tuint toChain\r\n\t) external view returns (uint[] memory);\r\n\tfunction getTransaction(uint txId_) external view returns (\r\n\t\tuint txId,\r\n\t\tuint tokenId,\r\n\t\tuint amount,\r\n\t\tuint fromChain,\r\n\t\tuint toChain,\r\n\t\taddress user,\r\n\t\tuint txBlockNo,\r\n\t\tuint currentBlockNo\r\n\t);\r\n\tfunction getExecutingChainID() external view returns (uint);\r\n\r\n\t/* ========== RESTRICTED FUNCTIONS ========== */\r\n\tfunction setBridgeReserve(uint bridgeReserve_) external;\r\n\tfunction setToken(uint tokenId, address tokenAddress) external;\r\n\tfunction setNetworkID(uint network_) external;\r\n\tfunction setFee(uint tokenId, uint fee_) external;\r\n\tfunction setDeiAddress(address deiAddress_) external;\r\n\tfunction setMinReqSigs(uint minReqSigs_) external;\r\n\tfunction setSideContract(uint network_, address address_) external;\r\n\tfunction setMintable(bool mintable_) external;\r\n\tfunction setEthAppId(uint8 ethAppId_) external;\r\n\tfunction setMuonContract(address muonContract_) external;\r\n\tfunction pause() external;\r\n\tfunction unpase() external;\r\n\tfunction withdrawFee(uint tokenId, address to) external;\r\n\tfunction emergencyWithdrawETH(address to, uint amount) external;\r\n\tfunction emergencyWithdrawERC20Tokens(address tokenAddr, address to, uint amount) external;\r\n}\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\npragma solidity >=0.8.0 <=0.9.0;\r\n\r\ninterface IERC20 {\r\n\tfunction transfer(address recipient, uint256 amount) external;\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external;\r\n\tfunction pool_burn_from(address b_address, uint256 b_amount) external;\r\n\tfunction pool_mint(address m_address, uint256 m_amount) external;\r\n}\r\n\r\n// File: contracts/interfaces/IDEIStablecoin.sol\r\n\r\npragma solidity >=0.8.0 <=0.9.0;\r\n\r\ninterface IDEIStablecoin {\r\n\tfunction global_collateral_ratio() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/DeusBridge.sol\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\ncontract DeusBridge is IDeusBridge, Ownable, Pausable {\r\n    using ECDSA for bytes32;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    uint public lastTxId = 0;  // unique id for deposit tx\r\n    uint public network;  // current chain id\r\n    uint public minReqSigs;  // minimum required tss\r\n    uint public scale = 1e6;\r\n    uint public bridgeReserve;  // it handles buyback & recollaterlize on dei pools\r\n    address public muonContract;  // muon signature verifier contract\r\n    address public deiAddress;\r\n    uint8   public ETH_APP_ID;  // muon's eth app id\r\n    bool    public mintable;  // use mint functions instead of transfer\r\n    // we assign a unique ID to each chain (default is CHAIN-ID)\r\n    mapping (uint => address) public sideContracts;\r\n    // tokenId => tokenContractAddress\r\n    mapping(uint => address)  public tokens;\r\n    mapping(uint => Transaction) private txs;\r\n    // user => (destination chain => user's txs id)\r\n    mapping(address => mapping(uint => uint[])) private userTxs;\r\n    // source chain => (tx id => false/true)\r\n    mapping(uint => mapping(uint => bool)) public claimedTxs;\r\n    // tokenId => tokenFee\r\n    mapping(uint => uint) public fee;\r\n    // tokenId => collectedFee\r\n    mapping(uint => uint) public collectedFee;\r\n\r\n    /* ========== EVENTS ========== */\r\n    event Deposit(\r\n        address indexed user,\r\n        uint tokenId,\r\n        uint amount,\r\n        uint indexed toChain,\r\n        uint txId\r\n    );\r\n    event DepositWithReferralCode(\r\n        address indexed user,\r\n        uint tokenId,\r\n        uint amount,\r\n        uint indexed toChain,\r\n        uint txId,\r\n        uint referralCode\r\n    );\r\n    event Claim(\r\n        address indexed user,\r\n        uint tokenId, \r\n        uint amount, \r\n        uint indexed fromChain, \r\n        uint txId\r\n    );\r\n    event BridgeReserveSet(uint bridgeReserve, uint _bridgeReserve);\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(\r\n        uint minReqSigs_, \r\n        uint bridgeReserve_,\r\n        uint8 ETH_APP_ID_,\r\n        address muon_, \r\n        address deiAddress_,\r\n        bool mintable_\r\n    ) {\r\n        network = getExecutingChainID();\r\n        minReqSigs = minReqSigs_;\r\n        bridgeReserve = bridgeReserve_;\r\n        ETH_APP_ID = ETH_APP_ID_;\r\n        muonContract = muon_;\r\n        deiAddress = deiAddress_;\r\n        mintable = mintable_;\r\n    }\r\n\r\n    /* ========== PUBLIC FUNCTIONS ========== */\r\n\r\n    function deposit(\r\n        uint amount, \r\n        uint toChain,\r\n        uint tokenId\r\n    ) external returns (uint txId) {\r\n        txId = _deposit(msg.sender, amount, toChain, tokenId);\r\n        emit Deposit(msg.sender, tokenId, amount, toChain, txId);\r\n    }\r\n\r\n    function depositFor(\r\n        address user,\r\n        uint amount, \r\n        uint toChain,\r\n        uint tokenId\r\n    ) external returns (uint txId) {\r\n        txId = _deposit(user, amount, toChain, tokenId);\r\n        emit Deposit(user, tokenId, amount, toChain, txId);\r\n    }\r\n\r\n    function deposit(\r\n        uint amount, \r\n        uint toChain,\r\n        uint tokenId,\r\n        uint referralCode\r\n    ) external returns (uint txId) {\r\n        txId = _deposit(msg.sender, amount, toChain, tokenId);\r\n        emit DepositWithReferralCode(msg.sender, tokenId, amount, toChain, txId, referralCode);\r\n    }\r\n\r\n    function depositFor(\r\n        address user,\r\n        uint amount, \r\n        uint toChain,\r\n        uint tokenId,\r\n        uint referralCode\r\n    ) external returns (uint txId) {\r\n        txId = _deposit(user, amount, toChain, tokenId);\r\n        emit DepositWithReferralCode(user, tokenId, amount, toChain, txId, referralCode);\r\n    }\r\n\r\n    function _deposit(\r\n        address user,\r\n        uint amount,\r\n        uint toChain,\r\n        uint tokenId\r\n    ) \r\n        internal \r\n        whenNotPaused() \r\n        returns (uint txId) \r\n    {\r\n        require(sideContracts[toChain] != address(0), \"Bridge: unknown toChain\");\r\n        require(toChain != network, \"Bridge: selfDeposit\");\r\n        require(tokens[tokenId] != address(0), \"Bridge: unknown tokenId\");\r\n\r\n        IERC20 token = IERC20(tokens[tokenId]);\r\n        if (mintable) {\r\n            token.pool_burn_from(msg.sender, amount);\r\n            if (tokens[tokenId] == deiAddress) {\r\n                bridgeReserve -= amount;\r\n            }\r\n        } else {\r\n            token.transferFrom(msg.sender, address(this), amount);\r\n        }\r\n\r\n        if (fee[tokenId] > 0) {\r\n            uint feeAmount = amount * fee[tokenId] / scale;\r\n            amount -= feeAmount;\r\n            collectedFee[tokenId] += feeAmount;\r\n        }\r\n\r\n        txId = ++lastTxId;\r\n        txs[txId] = Transaction({\r\n            txId: txId,\r\n            tokenId: tokenId,\r\n            fromChain: network,\r\n            toChain: toChain,\r\n            amount: amount,\r\n            user: user,\r\n            txBlockNo: block.number\r\n        });\r\n        userTxs[user][toChain].push(txId);\r\n    }\r\n\r\n    function claim(\r\n        address user,\r\n        uint amount,\r\n        uint fromChain,\r\n        uint toChain,\r\n        uint tokenId,\r\n        uint txId,\r\n        bytes calldata _reqId,\r\n        SchnorrSign[] calldata sigs\r\n    ) external {\r\n        require(sideContracts[fromChain] != address(0), 'Bridge: source contract not exist');\r\n        require(toChain == network, \"Bridge: toChain should equal network\");\r\n        require(sigs.length >= minReqSigs, \"Bridge: insufficient number of signatures\");\r\n\r\n        {\r\n            bytes32 hash = keccak256(\r\n            abi.encodePacked(\r\n                abi.encodePacked(sideContracts[fromChain], txId, tokenId, amount),\r\n                abi.encodePacked(fromChain, toChain, user, ETH_APP_ID)\r\n                )\r\n            );\r\n\r\n            IMuonV02 muon = IMuonV02(muonContract);\r\n            require(muon.verify(_reqId, uint(hash), sigs), \"Bridge: not verified\");\r\n        }\r\n\r\n        require(!claimedTxs[fromChain][txId], \"Bridge: already claimed\");\r\n        require(tokens[tokenId] != address(0), \"Bridge: unknown tokenId\");\r\n\r\n        IERC20 token = IERC20(tokens[tokenId]);\r\n        if (mintable) {\r\n            token.pool_mint(user, amount);\r\n            if (tokens[tokenId] == deiAddress) {\r\n                bridgeReserve += amount;\r\n            }\r\n        } else { \r\n            token.transfer(user, amount);\r\n        }\r\n\r\n        claimedTxs[fromChain][txId] = true;\r\n        emit Claim(user, tokenId, amount, fromChain, txId);\r\n    }\r\n\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    // This function use pool feature to handle buyback and recollateralize on DEI minter pool\r\n    function collatDollarBalance(uint collat_usd_price) public view returns (uint) {\r\n        uint collateralRatio = IDEIStablecoin(deiAddress).global_collateral_ratio();\r\n        return bridgeReserve * collateralRatio / 1e6;\r\n    }\r\n\r\n    function pendingTxs(\r\n        uint fromChain, \r\n        uint[] calldata ids\r\n    ) public view returns (bool[] memory unclaimedIds) {\r\n        unclaimedIds = new bool[](ids.length);\r\n        for(uint i=0; i < ids.length; i++){\r\n            unclaimedIds[i] = claimedTxs[fromChain][ids[i]];\r\n        }\r\n    }\r\n\r\n    function getUserTxs(\r\n        address user, \r\n        uint toChain\r\n    ) public view returns (uint[] memory) {\r\n        return userTxs[user][toChain];\r\n    }\r\n\r\n    function getTransaction(uint txId_) public view returns(\r\n        uint txId,\r\n        uint tokenId,\r\n        uint amount,\r\n        uint fromChain,\r\n        uint toChain,\r\n        address user,\r\n        uint txBlockNo,\r\n        uint currentBlockNo\r\n    ){\r\n        txId = txs[txId_].txId;\r\n        tokenId = txs[txId_].tokenId;\r\n        amount = txs[txId_].amount;\r\n        fromChain = txs[txId_].fromChain;\r\n        toChain = txs[txId_].toChain;\r\n        user = txs[txId_].user;\r\n        txBlockNo = txs[txId_].txBlockNo;\r\n        currentBlockNo = block.number;\r\n    }\r\n\r\n    function getExecutingChainID() public view returns (uint) {\r\n        uint id;\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n        return id;\r\n    }\r\n\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    function setBridgeReserve(uint bridgeReserve_) external onlyOwner {\r\n        emit BridgeReserveSet(bridgeReserve, bridgeReserve_);\r\n\r\n        bridgeReserve = bridgeReserve_;\r\n    }\r\n\r\n    function setToken(uint tokenId, address tokenAddress) external onlyOwner {\r\n        tokens[tokenId] = tokenAddress;\r\n    }\r\n\r\n    function setNetworkID(uint network_) external onlyOwner {\r\n        network = network_;\r\n        delete sideContracts[network];\r\n    }\r\n\r\n    function setFee(uint tokenId, uint fee_) external onlyOwner {\r\n        fee[tokenId] = fee_;\r\n    }\r\n    \r\n    function setDeiAddress(address deiAddress_) external onlyOwner {\r\n        deiAddress = deiAddress_;\r\n    }\r\n\r\n    function setMinReqSigs(uint minReqSigs_) external onlyOwner {\r\n        minReqSigs = minReqSigs_;\r\n    }\r\n\r\n    function setSideContract(uint network_, address address_) external onlyOwner {\r\n        require (network != network_, \"Bridge: current network\");\r\n        sideContracts[network_] = address_;\r\n    }\r\n\r\n    function setMintable(bool mintable_) external onlyOwner {\r\n        mintable = mintable_;\r\n    }\r\n\r\n    function setEthAppId(uint8 ETH_APP_ID_) external onlyOwner {\r\n        ETH_APP_ID = ETH_APP_ID_;\r\n    }\r\n\r\n    function setMuonContract(address muonContract_) external onlyOwner {\r\n        muonContract = muonContract_;\r\n    }\r\n\r\n    function pause() external onlyOwner { super._pause(); }\r\n\r\n    function unpase() external onlyOwner { super._unpause(); }\r\n\r\n    function withdrawFee(uint tokenId, address to) external onlyOwner {\r\n        require(collectedFee[tokenId] > 0, \"Bridge: No fee to collect\");\r\n\r\n        IERC20(tokens[tokenId]).pool_mint(to, collectedFee[tokenId]);\r\n        collectedFee[tokenId] = 0;\r\n    }\r\n\r\n    function emergencyWithdrawETH(address to, uint amount) external onlyOwner {\r\n        require(to != address(0));\r\n        payable(to).transfer(amount);\r\n    }\r\n\r\n    function emergencyWithdrawERC20Tokens(address tokenAddr, address to, uint amount) external onlyOwner {\r\n        require(to != address(0));\r\n        IERC20(tokenAddr).transfer(to, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minReqSigs_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bridgeReserve_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"ETH_APP_ID_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"muon_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deiAddress_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"mintable_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeReserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bridgeReserve\",\"type\":\"uint256\"}],\"name\":\"BridgeReserveSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"}],\"name\":\"DepositWithReferralCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_APP_ID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_reqId\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"signature\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nonce\",\"type\":\"address\"}],\"internalType\":\"struct SchnorrSign[]\",\"name\":\"sigs\",\"type\":\"tuple[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedTxs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collat_usd_price\",\"type\":\"uint256\"}],\"name\":\"collatDollarBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collectedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExecutingChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txId_\",\"type\":\"uint256\"}],\"name\":\"getTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txBlockNo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBlockNo\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"}],\"name\":\"getUserTxs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTxId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReqSigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"muonContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"network\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"pendingTxs\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"unclaimedIds\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bridgeReserve_\",\"type\":\"uint256\"}],\"name\":\"setBridgeReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deiAddress_\",\"type\":\"address\"}],\"name\":\"setDeiAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"ETH_APP_ID_\",\"type\":\"uint8\"}],\"name\":\"setEthAppId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minReqSigs_\",\"type\":\"uint256\"}],\"name\":\"setMinReqSigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"mintable_\",\"type\":\"bool\"}],\"name\":\"setMintable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"muonContract_\",\"type\":\"address\"}],\"name\":\"setMuonContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"network_\",\"type\":\"uint256\"}],\"name\":\"setNetworkID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"network_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"setSideContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sideContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DeusBridge","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"100000","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000422ca8b0a00a4250000000000000000000000000000000000000000000000000000000000000000000007000000000000000000000000e4f8d9a30936a6f8b17a73dc6feb51a3bbabd51a000000000000000000000000de12c7959e1a72bbe8a5f7a1dc8f8eef9ab011b30000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5267cd32de4995426ce5fbc263b54c2967a2244bd6e462d5a411f91eb25ea1c9"}]}