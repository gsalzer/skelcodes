{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NFTSaleClonable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.7;\\ninterface IERC1155 {\\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 value, bytes calldata _data) external;\\n    function balanceOf(address _owner, uint256 _id) external view returns(uint256);\\n}\\n\\ninterface IERC20 {\\n    function balanceOf(address _who) external returns (uint256);\\n}\\n\\nlibrary Math {\\n    function add(uint a, uint b) internal pure returns (uint c) {require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");}\\n    function sub(uint a, uint b) internal pure returns (uint c) {require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");}\\n    function mul(uint a, uint b) internal pure returns (uint c) {require(a == 0 || (c = a * b)/b == a, \\\"BoringMath: Mul Overflow\\\");}\\n}\\n\\ncontract NFTSaleClonable {\\n    using Math for uint256;\\n\\n    address public controller;\\n    address public hausAddress;\\n    address public stakingSwapContract;\\n    \\n    IERC1155 public nft;\\n    uint256  public price;\\n    uint256  public id;\\n    uint256  public start;\\n    uint256 public limitPerOrder;\\n    uint256 public stakingRewardPercentageBasisPoints;\\n    \\n    event Buy(address buyer, uint256 amount);\\n    \\n    function initialize(\\n        address _hausAddress,\\n        uint256 _startTime,\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        uint256 _priceWei,\\n        uint256 _limitPerOrder,\\n        uint256 _stakingRewardPercentageBasisPoints,\\n        address _stakingSwapContract,\\n        address _controllerAddress\\n    ) public {\\n        hausAddress = _hausAddress;\\n        start = _startTime;\\n        nft = IERC1155(_tokenAddress);\\n        id = _tokenId;\\n        price = _priceWei;\\n        limitPerOrder = _limitPerOrder;\\n        controller = _controllerAddress;\\n        stakingRewardPercentageBasisPoints = _stakingRewardPercentageBasisPoints;\\n        stakingSwapContract = _stakingSwapContract;\\n    }\\n    \\n    function buy(uint256 amount) public payable {\\n        require(msg.sender == tx.origin, \\\"no contracts\\\");\\n        require(block.timestamp >= start, \\\"early\\\");\\n        require(amount <= supply(), \\\"ordered too many\\\");\\n        require(amount <= limitPerOrder, \\\"ordered too many\\\");\\n        require(msg.value == price.mul(amount), \\\"wrong amount\\\");\\n        nft.safeTransferFrom(address(this), msg.sender, id, amount, new bytes(0x0));\\n        uint256 stakingReward = (address(this).balance * stakingRewardPercentageBasisPoints) / 10000;\\n        (bool stakingRewardSuccess, ) = stakingSwapContract.call{value: stakingReward}(\\\"\\\");\\n        require(stakingRewardSuccess, \\\"Staking reward transfer failed.\\\");\\n        (bool successMultisig, ) = hausAddress.call{value: address(this).balance}(\\\"\\\");\\n        require(successMultisig, \\\"Multisig transfer failed.\\\");\\n        emit Buy(msg.sender, amount);\\n    }\\n    \\n    function supply() public view returns(uint256) {\\n        return nft.balanceOf(address(this), id);\\n    }\\n\\n    function setTokenAddress(address _tokenAddress) public onlyController {\\n        nft = IERC1155(_tokenAddress);\\n    }\\n\\n    function setTokenId(uint256 _tokenId) public onlyController {\\n        id = _tokenId;\\n    }\\n\\n    function pull() public onlyController {\\n        nft.safeTransferFrom(address(this), controller, id, nft.balanceOf(address(this), id), new bytes(0x0));\\n    }\\n\\n    modifier onlyController {\\n      require(msg.sender == controller);\\n      _;\\n    }\\n    \\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure returns(bytes4) {\\n        return bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"));\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hausAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hausAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limitPerOrder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingRewardPercentageBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakingSwapContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controllerAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitPerOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingRewardPercentageBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingSwapContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"NFTSaleClonable","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}