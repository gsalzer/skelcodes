{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/******************************************/\r\n/*       IERC20 starts here               */\r\n/******************************************/\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/******************************************/\r\n/*       Context starts here              */\r\n/******************************************/\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/******************************************/\r\n/*       Ownable starts here              */\r\n/******************************************/\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/******************************************/\r\n/*       KnightAllocation Starting below      */\r\n/******************************************/\r\n\r\ncontract KNIGHTAllocation is Ownable {\r\n\r\n    IERC20 public KNIGHT; \r\n\r\n    uint256 public startBlock;\r\n    uint256 public endBlock;\r\n    bool initialized;\r\n\r\n    mapping (address => Allocation) public allocations;\r\n\r\n    struct Allocation {\r\n        uint256 sharePerBlock;\r\n        uint256 lastWithdrawalBlock;\r\n    }\r\n\r\n    /**\r\n     * @dev Populate allocations.\r\n     */\r\n    constructor()\r\n    {\r\n        address[30] memory shareHolders = [0x61281cBcBD75AF6C382b2E6Bf0675152918f0981,\r\n            0x40d22832ed3De14151D2eD0Ea923cf0A858909E0,\r\n            0xE1476C3dD4BE8C160636e68094D235922B9Cdf14,\r\n            0x530588ECE1281D1dBe1691F18eD8472Bb898f815,\r\n            0xF5bC8bb5FA79B608f55AfbE002884f736dAf11ee,\r\n            0x1Fea39EFC76aef6495804Ef648008a183e64450B,\r\n            0x3b1358Fb498FfDB89A0D1A265D3C13365B1F9f96,\r\n            0x3870edA39536c95CD2C6370464E0C0d619e198f7,\r\n            0x8888888888E9997E64793849389a8Faf5E8e547C,\r\n            0x1f2ac9F2686fBFf594E3aaa9AfC9ec9AEeBbc820,\r\n            0x647e778aD23b5b22D188e8d664fA4fEEc259385C,\r\n            0xcAb6d7B72E8046a036Be68796b0954b5f9e24695,\r\n            0xEcBBE9aed91361Ea5747FA6a9e816156D2a67015,\r\n            0x07c02E53F05Dae5B9317ad179181e0a2d931f057,\r\n            0x9A52120fC23606E40caC53abc7a2af857c357408,\r\n            0x9e67D018488aD636B538e4158E9e7577F2ECac12,\r\n            0xDa4f84247Bd3aC0705757267Ab2742Aa3bEb84F3,\r\n            0x4AcA1BB479Fa8B229d7B2D51f6BD75962D5e45EC,\r\n            0xCA63CD425d0e78fFE05a84c330Bfee691242113d,\r\n            0x128f0081Fdcb8b902fF0f45Ae90bBE93d87dF47b,\r\n            0xd4BAE583B857EaC6bA205bbC863369CfE4B813F5,\r\n            0x82Ba7508f7F1995AB1623258D66Cb4E2B2b8F467,\r\n            0x3EB377Be158C4F0b409B917c10D163dFF8b5C9F3,\r\n            0x8CD649c1bCEcf0A2F2cdFe23d9a75E4cB69c9AE6,\r\n            0x529C9428572fFd389b031f7bd5bdC44b3F471D8e,\r\n            0x3C80D903d94f50dBc2a609631557EFAfC50FeE9b,\r\n            0x54B626f9fec0c83f2282Dd293B195Dc7EDfe5FF1,\r\n            0x1dBAc441b975c9497667DA662207326a15A1C795,\r\n            0x66122f79Ff0e852Db68EAd808D773f51f934Ee07,\r\n            0xE984cDA2f65323cC1EC4011CA5D282a5a819D9fA];\r\n\r\n        uint256[30] memory sharesPerBlock =[uint256(178165621784979000),305426954732510000,50904594264403300,50904594264403300,25452144418724300,63630513760288100,25452144418724300,38178369341563800,101808883101852000,127261332947531000,25452144418724300,76356738683127600,63630513760288100,254522360468107000,12726224922839500,76356738683127600,50904594264403300,127261332947531000,12726224922839500,38178369341563800,12726224922839500,12726224922839500,12726224922839500,2545122813786010,12726224922839500,2545122813786010,2545122813786010,6362959747942390,7635673868312760,5090551054526750];\r\n\r\n        for (uint256 index = 0; index < shareHolders.length; index++) {\r\n            allocations[shareHolders[index]] = Allocation({\r\n            sharePerBlock: sharesPerBlock[index],\r\n            lastWithdrawalBlock: block.number\r\n            });\r\n        }\r\n       \r\n        startBlock = block.number;\r\n        endBlock = block.number + 3110400; //5760 blocks per day * 30 days * 18 months\r\n    }\r\n\r\n    function initialize(IERC20 _KNIGHT) external onlyOwner\r\n    {\r\n        require(initialized == false, \"Already initialized.\");\r\n        initialized = true;\r\n        KNIGHT = _KNIGHT;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw all unlocked shares.\r\n     */\r\n    function withdrawShare() external\r\n    {\r\n        require(allocations[msg.sender].lastWithdrawalBlock < endBlock, \"All shares have already been claimed.\");\r\n        uint256 unlockedBlock;\r\n        if (block.number > endBlock) {\r\n            unlockedBlock = endBlock;\r\n        } else {\r\n            unlockedBlock = block.number;\r\n        }\r\n        uint256 tempLastWithdrawalBlock = allocations[msg.sender].lastWithdrawalBlock;\r\n        allocations[msg.sender].lastWithdrawalBlock = unlockedBlock;                    // Avoid reentrancy\r\n        uint256 unlockedShares = allocations[msg.sender].sharePerBlock * (unlockedBlock - tempLastWithdrawalBlock);\r\n        KNIGHT.transfer(msg.sender, unlockedShares);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the remaining balance of a shareholder's total outstanding shares.\r\n     */\r\n    function getOutstandingShares() external view returns(uint256)\r\n    {\r\n        return allocations[msg.sender].sharePerBlock * (endBlock - allocations[msg.sender].lastWithdrawalBlock);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the balance of a shareholder's claimable shares.\r\n     */\r\n    function getUnlockedShares() external view returns(uint256)\r\n    {\r\n        uint256 unlockedBlock;\r\n        if (block.number > endBlock) {\r\n            unlockedBlock = endBlock;\r\n        } else {\r\n            unlockedBlock = block.number;\r\n        }\r\n        return allocations[msg.sender].sharePerBlock * (unlockedBlock - allocations[msg.sender].lastWithdrawalBlock);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the withdrawn shares of a shareholder.\r\n     */\r\n    function getWithdrawnShares() external view returns(uint256)\r\n    {\r\n        return allocations[msg.sender].sharePerBlock * (allocations[msg.sender].lastWithdrawalBlock - startBlock);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total shares of shareholder.\r\n     */\r\n    function getTotalShares(address shareholder) external view returns(uint256)\r\n    {\r\n        return allocations[shareholder].sharePerBlock * 3110400;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"KNIGHT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawalBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOutstandingShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawnShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_KNIGHT\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"KNIGHTAllocation","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3e252d84ed75ae6d44005435888186cedadf095660e65747c14dbdf04f622c94"}]}