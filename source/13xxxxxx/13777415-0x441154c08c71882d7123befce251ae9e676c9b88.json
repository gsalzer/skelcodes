{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\n\r\ninterface IHyperLiquidrium {\r\n\r\n    /* user functions */\r\n\r\n    function rebalance(\r\n        int24 _baseLower,\r\n        int24 _baseUpper,\r\n        int24 _limitLower,\r\n        int24 _limitUpper,\r\n        address _feeRecipient,\r\n        int256 swapQuantity\r\n    ) external;\r\n\r\n    function setMaxTotalSupply(uint256 _maxTotalSupply) external;\r\n\r\n    function setDepositMax(uint256 _deposit0Max, uint256 _deposit1Max) external;\r\n\r\n    function appendList(address[] memory listed) external;\r\n\r\n    function toggleWhitelist() external;\r\n\r\n    function emergencyWithdraw(IERC20 token, uint256 amount) external;\r\n\r\n    function emergencyBurn(\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 liquidity\r\n    ) external;\r\n\r\n    function transferOwnership(address newOwner) external;\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\npragma solidity 0.7.6;\r\n\r\ncontract Admin is ReentrancyGuard{\r\n    \r\n    event OwnerTransferPrepared(address hypervisor, address newOwner, address admin, uint256 timestamp);\r\n    event OwnerTransferFullfilled(address hypervisor, address newOwner, address admin, uint256 timestamp);\r\n    event AdminTransfer(address newAdmin, uint256 timestamp);\r\n    event AdvisorTransfer(address newAdmin, uint256 timestamp);\r\n    event RescueTokens(IERC20 token, address recipient, uint256 value);\r\n\r\n    address public admin;\r\n    address public advisor;\r\n    \r\n    \r\n    struct OwnershipData {\r\n        address newOwner;\r\n        uint256 lastUpdatedTime;\r\n    }\r\n\r\n    mapping(address => OwnershipData) hypervisorOwner;\r\n\r\n    modifier onlyAdvisor {\r\n        require(msg.sender == advisor, \"only advisor\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin, \"only admin\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _admin, address _advisor) public {\r\n        admin = _admin;\r\n        advisor = _advisor;\r\n    }\r\n\r\n    function rebalance(\r\n        address _hypervisor,\r\n        int24 _baseLower,\r\n        int24 _baseUpper,\r\n        int24 _limitLower,\r\n        int24 _limitUpper,\r\n        address _feeRecipient,\r\n        int256 swapQuantity\r\n    ) external onlyAdvisor {\r\n        IHyperLiquidrium(_hypervisor).rebalance(_baseLower, _baseUpper, _limitLower, _limitUpper, _feeRecipient, swapQuantity);\r\n    }\r\n\r\n    function emergencyWithdraw(\r\n        address _hypervisor,\r\n        IERC20 token,\r\n        uint256 amount\r\n    ) external onlyAdmin {\r\n        IHyperLiquidrium(_hypervisor).emergencyWithdraw(token, amount);\r\n    }\r\n\r\n    function emergencyBurn(\r\n        address _hypervisor,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 liquidity\r\n    ) external onlyAdmin {\r\n        IHyperLiquidrium(_hypervisor).emergencyBurn(tickLower, tickUpper, liquidity);\r\n    }\r\n\r\n    function setDepositMax(address _hypervisor, uint256 _deposit0Max, uint256 _deposit1Max) external onlyAdmin {\r\n        IHyperLiquidrium(_hypervisor).setDepositMax(_deposit0Max, _deposit1Max);\r\n    }\r\n\r\n    function setMaxTotalSupply(address _hypervisor, uint256 _maxTotalSupply) external onlyAdmin {\r\n        IHyperLiquidrium(_hypervisor).setMaxTotalSupply(_maxTotalSupply);\r\n    }\r\n\r\n    function toggleWhitelist(address _hypervisor) external onlyAdmin {\r\n        IHyperLiquidrium(_hypervisor).toggleWhitelist();\r\n    }\r\n\r\n    function appendList(address _hypervisor, address[] memory listed) external onlyAdmin {\r\n        IHyperLiquidrium(_hypervisor).appendList(listed);\r\n    }\r\n\r\n    function transferAdmin(address newAdmin) external onlyAdmin {\r\n        admin = newAdmin;\r\n        emit AdminTransfer(newAdmin, block.timestamp);\r\n    }\r\n\r\n    function transferAdvisor(address newAdvisor) external onlyAdmin {\r\n        advisor = newAdvisor;\r\n        emit AdvisorTransfer(newAdvisor, block.timestamp);\r\n    }\r\n\r\n    function prepareHVOwnertransfer(address _hypervisor, address newOwner) external onlyAdmin {\r\n        require(newOwner != address(0), \"newOwner must not be zero\");\r\n        hypervisorOwner[_hypervisor] = OwnershipData(newOwner, block.timestamp + 86400);\r\n        emit OwnerTransferPrepared(_hypervisor, newOwner, admin, block.timestamp);\r\n    }\r\n\r\n    function fullfillHVOwnertransfer(address _hypervisor, address newOwner) external onlyAdmin {\r\n        OwnershipData storage data = hypervisorOwner[_hypervisor];\r\n        require(data.newOwner == newOwner && data.lastUpdatedTime != 0 && data.lastUpdatedTime < block.timestamp, \"owner or update time wrong\");\r\n        IHyperLiquidrium(_hypervisor).transferOwnership(newOwner);\r\n        delete hypervisorOwner[_hypervisor];\r\n        emit OwnerTransferFullfilled(_hypervisor, newOwner, admin, block.timestamp);\r\n    }\r\n\r\n    function rescueERC20(IERC20 token, address recipient) external nonReentrant onlyAdmin {\r\n        require(token.transfer(recipient, token.balanceOf(address(this))), \"transfer failed\");\r\n        emit RescueTokens(token,recipient,token.balanceOf(address(this)));\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_advisor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AdminTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AdvisorTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"hypervisor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OwnerTransferFullfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"hypervisor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OwnerTransferPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RescueTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"advisor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hypervisor\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"listed\",\"type\":\"address[]\"}],\"name\":\"appendList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hypervisor\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"name\":\"emergencyBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hypervisor\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hypervisor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"fullfillHVOwnertransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hypervisor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"prepareHVOwnertransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hypervisor\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"_baseLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"_baseUpper\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"_limitLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"_limitUpper\",\"type\":\"int24\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"swapQuantity\",\"type\":\"int256\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hypervisor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deposit0Max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deposit1Max\",\"type\":\"uint256\"}],\"name\":\"setDepositMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hypervisor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotalSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hypervisor\",\"type\":\"address\"}],\"name\":\"toggleWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdvisor\",\"type\":\"address\"}],\"name\":\"transferAdvisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Admin","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"00000000000000000000000023664fb1797754dc97b9b7bbacf92090c7b93600000000000000000000000000f98f2cf2668e8553bb6c619593d30543b499ddda","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7ad18373056fb86d372b8eab36d61625d8b17057342b1ce81c4081f8938a1027"}]}