{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ComplexVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n  @dev This contract is one of 3 vesting contracts for the JustCarbon Foundation\\n\\n  Here, we cover the case of complex vesting contract with a nonLinear vesting schedule over a fixed time period\\n\\n  @author jordaniza (jordan.imran@predixa.ai)\\n */\\n\\ncontract ComplexVesting is Ownable, ReentrancyGuard {\\n    /* =============== Immutable variables ================= */\\n\\n    // length of a vesting period\\n    uint256 public immutable vestingPeriodLength;\\n\\n    // length of the interval to adjust the vesting rate,\\n    // in terms of vesting periods\\n    uint256 public immutable vestingPeriodsBeforeDecay;\\n\\n    // qty by which to reduce the base vesting\\n    uint256 public immutable decayQty;\\n\\n    // base vesting quantity over the decay interval\\n    uint256 public immutable baseQty;\\n\\n    // address of the account who can interact with the contract\\n    address public immutable beneficiary;\\n\\n    // start timestamp of vesting period for the account\\n    uint256 public immutable startTimestamp;\\n\\n    // end timestamp of vesting period for the account\\n    uint256 public immutable endTimestamp;\\n\\n    // the contract address of the token\\n    IERC20 private immutable token;\\n\\n    /* ================ Mutable variables ================= */\\n\\n    // balance of the contract\\n    uint256 public balance = 0;\\n\\n    // total value already withdrawn by the account\\n    uint256 public withdrawn = 0;\\n\\n    // Lifecycle flag to prevent adding beneficiaries after tokens have been deposited\\n    bool public tokensDeposited = false;\\n\\n    // prevent contract interactions after withdraw method called\\n    bool public closed = false;\\n\\n    /* ===== Events ===== */\\n\\n    event DepositTokens(uint256 qty);\\n    event WithdrawSuccess(address benficiary, uint256 qty);\\n    event EmergencyWithdraw();\\n\\n    /* ===== Constructor ===== */\\n\\n    constructor(\\n        address _tokenAddress,\\n        address _beneficiary,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        uint256 _vestingPeriodLength,\\n        uint256 _vestingPeriodsBeforeDecay,\\n        uint256 _decayQty,\\n        uint256 _baseQty\\n    ) {\\n        require((_startTimestamp > block.timestamp), \\\"Pass start in future\\\");\\n        require(_endTimestamp > _startTimestamp, \\\"End before start\\\");\\n        require(_baseQty >= _decayQty, \\\"Cannot decay more than base\\\");\\n        require(\\n            (_vestingPeriodsBeforeDecay > 0) &&\\n                (_vestingPeriodLength > 0) &&\\n                (_decayQty > 0) &&\\n                (_baseQty > 0),\\n            \\\"Pass positive quantities\\\"\\n        );\\n        token = IERC20(_tokenAddress);\\n        beneficiary = _beneficiary;\\n        startTimestamp = _startTimestamp;\\n        endTimestamp = _endTimestamp;\\n        vestingPeriodLength = _vestingPeriodLength;\\n        vestingPeriodsBeforeDecay = _vestingPeriodsBeforeDecay;\\n        decayQty = _decayQty;\\n        baseQty = _baseQty;\\n    }\\n\\n    /* ===== Modifiers ==== */\\n\\n    modifier afterDeposit() {\\n        require(tokensDeposited, \\\"Cannot call before deposit\\\");\\n        _;\\n    }\\n\\n    modifier notClosed() {\\n        require(!closed, \\\"Contract closed\\\");\\n        _;\\n    }\\n\\n    /* ===== Getters and view functions ===== */\\n\\n    /**\\n    Non linear vesting schedule that pays out progressively less per period, as time goes on.\\n\\n    @dev Compute the cumulative amount vested by incrementing a `vestingAmount` variable.\\n    Each decayPeriod (eg. year), the amount vesting per period (eg. month) declines, according to the decay\\n\\n        @param elapsedDecayPeriods is the number of whole \\\"decay periods\\\" the contract has been running - eg. 3 years\\n        @param elapsedCarryover is the completed vesting periods in the in the decay period - eg. 2 months\\n        @return the amount that has been vested over time\\n    */\\n    function _calculateVestingAmount(\\n        uint256 elapsedDecayPeriods,\\n        uint256 elapsedCarryover\\n    ) private view returns (uint256) {\\n        // initially set the vesting amount to zero\\n        uint256 vestingAmount = 0;\\n\\n        // then, for every whole \\\"decay period\\\" that has passed (i.e. years):\\n        for (uint256 i; i <= elapsedDecayPeriods; i++) {\\n            // initialize the quantity vested in this period to zero\\n            uint256 periodVestingQty = 0;\\n            uint256 decayForPeriod = decayQty * i;\\n\\n            // if decay would cause underflow, just set vesting quantity to zero\\n            if (decayForPeriod < baseQty) {\\n                // otherwise, get the per period vesting quantity (i.e monthly)\\n                periodVestingQty =\\n                    (baseQty - decayForPeriod) /\\n                    vestingPeriodsBeforeDecay;\\n            }\\n            // i is the period, if it's less than the elapsed, just take the whole period\\n            if (i < elapsedDecayPeriods) {\\n                vestingAmount += periodVestingQty * vestingPeriodsBeforeDecay;\\n\\n                // otherwise, take the number of periods in the current decay period\\n            } else {\\n                vestingAmount += periodVestingQty * elapsedCarryover;\\n            }\\n        }\\n        return vestingAmount;\\n    }\\n\\n    /**\\n        @return the amount owed to the beneficiary at a given point in time\\n    */\\n    function calculateWithdrawal() public view returns (uint256) {\\n        require(block.timestamp >= startTimestamp, \\\"Vesting not started\\\");\\n        if (block.timestamp >= endTimestamp) {\\n            return balance;\\n        }\\n        uint256 elapsedSeconds = block.timestamp - startTimestamp;\\n\\n        // whole vesting periods completed i.e. 14 months\\n        uint256 elapsedWholePeriods = elapsedSeconds / vestingPeriodLength;\\n\\n        // whole periods completed where, after each, rate of vesting decays i.e. 2 years\\n        uint256 elapsedDecayPeriods = elapsedWholePeriods /\\n            vestingPeriodsBeforeDecay;\\n\\n        // whole vesting periods in the current \\\"decay period\\\" i.e. 2 months (into year 3)\\n        uint256 elapsedCarryover = elapsedWholePeriods -\\n            (elapsedDecayPeriods * vestingPeriodsBeforeDecay);\\n        uint256 vestingAmount = _calculateVestingAmount(\\n            elapsedDecayPeriods,\\n            elapsedCarryover\\n        );\\n        uint256 finalAmount = vestingAmount - withdrawn;\\n        if (finalAmount > balance) {\\n            return balance;\\n        }\\n        return finalAmount;\\n    }\\n\\n    /**\\n      @dev Deposit tokens into the contract, that can then be withdrawn by the beneficiaries\\n     */\\n    function deposit(uint256 amount) public onlyOwner returns (bool) {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n\\n        tokensDeposited = true;\\n        balance += amount;\\n\\n        require(token.transferFrom(msg.sender, address(this), amount));\\n        emit DepositTokens(amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n      @dev Transfer all tokens currently vested to the whitelisted account.  \\n     */\\n    function withdraw()\\n        public\\n        notClosed\\n        afterDeposit\\n        nonReentrant\\n        returns (bool)\\n    {\\n        require(msg.sender == beneficiary, \\\"Only whitelisted\\\");\\n        uint256 amount = calculateWithdrawal();\\n        require(amount > 0, \\\"Nothing to withdraw\\\");\\n\\n        balance -= amount;\\n        withdrawn += amount;\\n\\n        require(token.transfer(msg.sender, amount));\\n\\n        emit WithdrawSuccess(msg.sender, amount);\\n        return true;\\n    }\\n\\n    /**\\n      @dev Withdraw the full token balance of the contract to a the owner\\n      Used in the case of a discovered vulnerability.\\n     */\\n    function emergencyWithdraw() public onlyOwner returns (bool) {\\n        require(balance > 0, \\\"No funds to withdraw\\\");\\n        withdrawn += balance;\\n        balance = 0;\\n        closed = true;\\n        require(token.transfer(msg.sender, token.balanceOf(address(this))));\\n        emit EmergencyWithdraw();\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPeriodLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPeriodsBeforeDecay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decayQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseQty\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"DepositTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"benficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"WithdrawSuccess\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseQty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decayQty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensDeposited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingPeriodLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingPeriodsBeforeDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ComplexVesting","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000be601dd49da9ee1d2f64d422c4aecf8eb83c119f0000000000000000000000007829dffa5f1b34d343e0fd1cc4450bfb0165e3070000000000000000000000000000000000000000000000000000000061f541910000000000000000000000000000000000000000000000000000000074c475fd000000000000000000000000000000000000000000000000000000000028206f000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000084595161401484a00000000000000000000000000000000000000000000000052b7d2dcc80cd2e4000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}