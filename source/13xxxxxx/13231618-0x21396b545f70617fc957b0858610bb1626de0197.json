{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/strategies/yel/YelHodlStrategyMainnet_YEL_WETH.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./YelHodlStrategy.sol\\\";\\n\\ncontract YelHodlStrategyMainnet_YEL_WETH is YelHodlStrategy {\\n\\n  address public yel_weth_unused; // just a differentiator for the bytecode\\n\\n  constructor() public {}\\n\\n  function initializeStrategy(\\n    address _storage,\\n    address _vault\\n  ) public initializer {\\n    address underlying = address(0xc83cE8612164eF7A13d17DDea4271DD8e8EEbE5d);\\n    address yel = address(0x7815bDa662050D84718B988735218CFfd32f75ea);\\n    YelHodlStrategy.initializeMasterChefHodlStrategy(\\n      _storage,\\n      underlying,\\n      _vault,\\n      address(0xe7c8477C0c7AAaD6106EBDbbED3a5a2665b273b9), // master chef contract\\n      yel,\\n      1,  // Pool id\\n      address(0x0000000000000000000000000000000000000000), // manually set it later\\n      address(0x0000000000000000000000000000000000000000) // manually set it later\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/yel/YelHodlStrategy.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../base/interface/uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"../../base/interface/IStrategy.sol\\\";\\nimport \\\"../../base/interface/IVault.sol\\\";\\nimport \\\"../../base/upgradability/BaseUpgradeableStrategy.sol\\\";\\nimport \\\"../../base/sushi-base/interfaces/IMasterChef.sol\\\";\\nimport \\\"../../base/interface/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../../base/PotPool.sol\\\";\\n\\ncontract YelHodlStrategy is IStrategy, BaseUpgradeableStrategy {\\n\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  address public constant uniswapRouterV2 = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n  address public constant sushiswapRouterV2 = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\\n\\n  // additional storage slots (on top of BaseUpgradeableStrategy ones) are defined here\\n  bytes32 internal constant _POOLID_SLOT = 0x3fd729bfa2e28b7806b03a6e014729f59477b530f995be4d51defc9dad94810b;\\n  bytes32 internal constant _HODLVAULT_SLOT = 0xc26d330f887c749cb38ae7c37873ff08ac4bba7aec9113c82d48a0cf6cc145f2;\\n  bytes32 internal constant _POTPOOL_SLOT = 0x7f4b50847e7d7a4da6a6ea36bfb188c77e9f093697337eb9a876744f926dd014;\\n\\n  constructor() public BaseUpgradeableStrategy() {\\n    assert(_POOLID_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.poolId\\\")) - 1));\\n    assert(_HODLVAULT_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.hodlVault\\\")) - 1));\\n    assert(_POTPOOL_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.potPool\\\")) - 1));\\n  }\\n\\n\\n  function initializeMasterChefHodlStrategy(\\n    address _storage,\\n    address _underlying,\\n    address _vault,\\n    address _rewardPool,\\n    address _rewardToken,\\n    uint256 _poolId,\\n    address _hodlVault,\\n    address _potPool\\n  ) public initializer {\\n    require(_rewardPool != address(0), \\\"reward pool is empty\\\");\\n\\n    BaseUpgradeableStrategy.initialize(\\n      _storage,\\n      _underlying,\\n      _vault,\\n      _rewardPool,\\n      _rewardToken,\\n      300, // profit sharing numerator\\n      1000, // profit sharing denominator\\n      true, // sell\\n      1e18, // sell floor\\n      12 hours // implementation change delay\\n    );\\n\\n    address _lpt;\\n    (_lpt,,,) = IMasterChef(rewardPool()).poolInfo(_poolId);\\n    require(_lpt == underlying(), \\\"Pool Info does not match underlying\\\");\\n    _setPoolId(_poolId);\\n    setAddress(_HODLVAULT_SLOT, _hodlVault);\\n    setAddress(_POTPOOL_SLOT, _potPool);\\n  }\\n\\n  function depositArbCheck() public view returns(bool) {\\n    return true;\\n  }\\n\\n  function rewardPoolBalance() internal view returns (uint256 bal) {\\n      (bal,) = IMasterChef(rewardPool()).userInfo(poolId(), address(this));\\n  }\\n\\n  function exitRewardPool() internal {\\n      uint256 bal = rewardPoolBalance();\\n      if (bal != 0) {\\n          IMasterChef(rewardPool()).withdraw(poolId(), bal);\\n      }\\n  }\\n\\n  function emergencyExitRewardPool() internal {\\n      uint256 bal = rewardPoolBalance();\\n      if (bal != 0) {\\n          IMasterChef(rewardPool()).emergencyWithdraw(poolId());\\n      }\\n  }\\n\\n  function unsalvagableTokens(address token) public view returns (bool) {\\n    return (token == rewardToken() || token == underlying());\\n  }\\n\\n  function enterRewardPool() internal {\\n    uint256 entireBalance = IERC20(underlying()).balanceOf(address(this));\\n    IERC20(underlying()).safeApprove(rewardPool(), 0);\\n    IERC20(underlying()).safeApprove(rewardPool(), entireBalance);\\n    IMasterChef(rewardPool()).deposit(poolId(), entireBalance);\\n  }\\n\\n  /*\\n  *   In case there are some issues discovered about the pool or underlying asset\\n  *   Governance can exit the pool properly\\n  *   The function is only used for emergency to exit the pool\\n  */\\n  function emergencyExit() public onlyGovernance {\\n    emergencyExitRewardPool();\\n    _setPausedInvesting(true);\\n  }\\n\\n  /*\\n  *   Resumes the ability to invest into the underlying reward pools\\n  */\\n\\n  function continueInvesting() public onlyGovernance {\\n    _setPausedInvesting(false);\\n  }\\n\\n  // We Hodl all the rewards\\n  function _hodlAndNotify() internal {\\n    uint256 rewardBalance = IERC20(rewardToken()).balanceOf(address(this));\\n    notifyProfitInRewardToken(rewardBalance);\\n    uint256 remainingRewardBalance = IERC20(rewardToken()).balanceOf(address(this));\\n\\n    if (remainingRewardBalance == 0) {\\n      return;\\n    }\\n\\n    IERC20(rewardToken()).safeApprove(hodlVault(), 0);\\n    IERC20(rewardToken()).safeApprove(hodlVault(), remainingRewardBalance);\\n    IVault(hodlVault()).deposit(remainingRewardBalance);\\n    uint256 fRewardBalance = IERC20(hodlVault()).balanceOf(address(this));\\n    IERC20(hodlVault()).safeTransfer(potPool(), fRewardBalance);\\n    PotPool(potPool()).notifyTargetRewardAmount(hodlVault(), fRewardBalance);\\n  }\\n\\n  /*\\n  *   Stakes everything the strategy holds into the reward pool\\n  */\\n  function investAllUnderlying() internal onlyNotPausedInvesting {\\n    // this check is needed, because most of the SNX reward pools will revert if\\n    // you try to stake(0).\\n    if(IERC20(underlying()).balanceOf(address(this)) > 0) {\\n      enterRewardPool();\\n    }\\n  }\\n\\n  /*\\n  *   Withdraws all the asset to the vault\\n  */\\n  function withdrawAllToVault() public restricted {\\n    exitRewardPool();\\n    _hodlAndNotify();\\n    IERC20(underlying()).safeTransfer(vault(), IERC20(underlying()).balanceOf(address(this)));\\n  }\\n\\n  /*\\n  *   Withdraws all the asset to the vault\\n  */\\n  function withdrawToVault(uint256 amount) public restricted {\\n    // Typically there wouldn't be any amount here\\n    // however, it is possible because of the emergencyExit\\n    uint256 entireBalance = IERC20(underlying()).balanceOf(address(this));\\n\\n    if(amount > entireBalance){\\n      // While we have the check above, we still using SafeMath below\\n      // for the peace of mind (in case something gets changed in between)\\n      uint256 needToWithdraw = amount.sub(entireBalance);\\n      uint256 toWithdraw = Math.min(rewardPoolBalance(), needToWithdraw);\\n      IMasterChef(rewardPool()).withdraw(poolId(), toWithdraw);\\n    }\\n\\n    IERC20(underlying()).safeTransfer(vault(), amount);\\n  }\\n\\n  /*\\n  *   Note that we currently do not have a mechanism here to include the\\n  *   amount of reward that is accrued.\\n  */\\n  function investedUnderlyingBalance() external view returns (uint256) {\\n    if (rewardPool() == address(0)) {\\n      return IERC20(underlying()).balanceOf(address(this));\\n    }\\n    // Adding the amount locked in the reward pool and the amount that is somehow in this contract\\n    // both are in the units of \\\"underlying\\\"\\n    // The second part is needed because there is the emergency exit mechanism\\n    // which would break the assumption that all the funds are always inside of the reward pool\\n    return rewardPoolBalance().add(IERC20(underlying()).balanceOf(address(this)));\\n  }\\n\\n  /*\\n  *   Governance or Controller can claim coins that are somehow transferred into the contract\\n  *   Note that they cannot come in take away coins that are used and defined in the strategy itself\\n  */\\n  function salvage(address recipient, address token, uint256 amount) external onlyControllerOrGovernance {\\n     // To make sure that governance cannot come in and take away the coins\\n    require(!unsalvagableTokens(token), \\\"token is defined as not salvagable\\\");\\n    IERC20(token).safeTransfer(recipient, amount);\\n  }\\n\\n  /*\\n  *   Get the reward, sell it in exchange for underlying, invest what you got.\\n  *   It's not much, but it's honest work.\\n  *\\n  *   Note that although `onlyNotPausedInvesting` is not added here,\\n  *   calling `investAllUnderlying()` affectively blocks the usage of `doHardWork`\\n  *   when the investing is being paused by governance.\\n  */\\n  function doHardWork() external onlyNotPausedInvesting restricted {\\n    IMasterChef(rewardPool()).withdraw(poolId(), 0);\\n    _hodlAndNotify();\\n    investAllUnderlying();\\n  }\\n\\n  function setHodlVault(address _value) public onlyGovernance {\\n    require(hodlVault() == address(0), \\\"Hodl vault already set\\\");\\n    setAddress(_HODLVAULT_SLOT, _value);\\n  }\\n\\n  function hodlVault() public view returns (address) {\\n    return getAddress(_HODLVAULT_SLOT);\\n  }\\n\\n  function setPotPool(address _value) public onlyGovernance {\\n    require(potPool() == address(0), \\\"PotPool already set\\\");\\n    setAddress(_POTPOOL_SLOT, _value);\\n  }\\n\\n  function potPool() public view returns (address) {\\n    return getAddress(_POTPOOL_SLOT);\\n  }\\n\\n  function finalizeUpgrade() external onlyGovernance {\\n    _finalizeUpgrade();\\n  }\\n\\n  // masterchef rewards pool ID\\n  function _setPoolId(uint256 _value) internal {\\n    setUint256(_POOLID_SLOT, _value);\\n  }\\n\\n  function poolId() public view returns (uint256) {\\n    return getUint256(_POOLID_SLOT);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/uniswap/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IStrategy.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IStrategy {\\n    \\n    function unsalvagableTokens(address tokens) external view returns (bool);\\n    \\n    function governance() external view returns (address);\\n    function controller() external view returns (address);\\n    function underlying() external view returns (address);\\n    function vault() external view returns (address);\\n\\n    function withdrawAllToVault() external;\\n    function withdrawToVault(uint256 amount) external;\\n\\n    function investedUnderlyingBalance() external view returns (uint256); // itsNotMuch()\\n\\n    // should only be called by controller\\n    function salvage(address recipient, address token, uint256 amount) external;\\n\\n    function doHardWork() external;\\n    function depositArbCheck() external view returns(bool);\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IVault.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IVault {\\n\\n    function initializeVault(\\n      address _storage,\\n      address _underlying,\\n      uint256 _toInvestNumerator,\\n      uint256 _toInvestDenominator\\n    ) external ;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function underlyingBalanceInVault() external view returns (uint256);\\n    function underlyingBalanceWithInvestment() external view returns (uint256);\\n\\n    // function store() external view returns (address);\\n    function governance() external view returns (address);\\n    function controller() external view returns (address);\\n    function underlying() external view returns (address);\\n    function strategy() external view returns (address);\\n\\n    function setStrategy(address _strategy) external;\\n    function announceStrategyUpdate(address _strategy) external;\\n    function setVaultFractionToInvest(uint256 numerator, uint256 denominator) external;\\n\\n    function deposit(uint256 amountWei) external;\\n    function depositFor(uint256 amountWei, address holder) external;\\n\\n    function withdrawAll() external;\\n    function withdraw(uint256 numberOfShares) external;\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    function underlyingBalanceWithInvestmentForHolder(address holder) view external returns (uint256);\\n\\n    // hard work should be callable only by the controller (by the hard worker) or by governance\\n    function doHardWork() external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/upgradability/BaseUpgradeableStrategy.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"./BaseUpgradeableStrategyStorage.sol\\\";\\nimport \\\"../inheritance/ControllableInit.sol\\\";\\nimport \\\"../interface/IController.sol\\\";\\nimport \\\"../interface/IFeeRewardForwarderV6.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\ncontract BaseUpgradeableStrategy is Initializable, ControllableInit, BaseUpgradeableStrategyStorage {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  event ProfitsNotCollected(bool sell, bool floor);\\n  event ProfitLogInReward(uint256 profitAmount, uint256 feeAmount, uint256 timestamp);\\n  event ProfitAndBuybackLog(uint256 profitAmount, uint256 feeAmount, uint256 timestamp);\\n\\n  modifier restricted() {\\n    require(msg.sender == vault() || msg.sender == controller()\\n      || msg.sender == governance(),\\n      \\\"The sender has to be the controller, governance, or vault\\\");\\n    _;\\n  }\\n\\n  // This is only used in `investAllUnderlying()`\\n  // The user can still freely withdraw from the strategy\\n  modifier onlyNotPausedInvesting() {\\n    require(!pausedInvesting(), \\\"Action blocked as the strategy is in emergency state\\\");\\n    _;\\n  }\\n\\n  constructor() public BaseUpgradeableStrategyStorage() {\\n  }\\n\\n  function initialize(\\n    address _storage,\\n    address _underlying,\\n    address _vault,\\n    address _rewardPool,\\n    address _rewardToken,\\n    uint256 _profitSharingNumerator,\\n    uint256 _profitSharingDenominator,\\n    bool _sell,\\n    uint256 _sellFloor,\\n    uint256 _implementationChangeDelay\\n  ) public initializer {\\n    ControllableInit.initialize(\\n      _storage\\n    );\\n    _setUnderlying(_underlying);\\n    _setVault(_vault);\\n    _setRewardPool(_rewardPool);\\n    _setRewardToken(_rewardToken);\\n    _setProfitSharingNumerator(_profitSharingNumerator);\\n    _setProfitSharingDenominator(_profitSharingDenominator);\\n\\n    _setSell(_sell);\\n    _setSellFloor(_sellFloor);\\n    _setNextImplementationDelay(_implementationChangeDelay);\\n    _setPausedInvesting(false);\\n  }\\n\\n  /**\\n  * Schedules an upgrade for this vault's proxy.\\n  */\\n  function scheduleUpgrade(address impl) public onlyGovernance {\\n    _setNextImplementation(impl);\\n    _setNextImplementationTimestamp(block.timestamp.add(nextImplementationDelay()));\\n  }\\n\\n  function _finalizeUpgrade() internal {\\n    _setNextImplementation(address(0));\\n    _setNextImplementationTimestamp(0);\\n  }\\n\\n  function shouldUpgrade() external view returns (bool, address) {\\n    return (\\n      nextImplementationTimestamp() != 0\\n        && block.timestamp > nextImplementationTimestamp()\\n        && nextImplementation() != address(0),\\n      nextImplementation()\\n    );\\n  }\\n\\n  // reward notification\\n\\n  function notifyProfitInRewardToken(uint256 _rewardBalance) internal {\\n    if( _rewardBalance > 0 ){\\n      uint256 feeAmount = _rewardBalance.mul(profitSharingNumerator()).div(profitSharingDenominator());\\n      emit ProfitLogInReward(_rewardBalance, feeAmount, block.timestamp);\\n      IERC20(rewardToken()).safeApprove(controller(), 0);\\n      IERC20(rewardToken()).safeApprove(controller(), feeAmount);\\n\\n      IController(controller()).notifyFee(\\n        rewardToken(),\\n        feeAmount\\n      );\\n    } else {\\n      emit ProfitLogInReward(0, 0, block.timestamp);\\n    }\\n  }\\n\\n  function notifyProfitAndBuybackInRewardToken(uint256 _rewardBalance, address pool, uint256 _buybackRatio) internal {\\n    if( _rewardBalance > 0 ){\\n      uint256 feeAmount = _rewardBalance.mul(profitSharingNumerator()).div(profitSharingDenominator());\\n      uint256 buybackAmount = _rewardBalance.sub(feeAmount).mul(_buybackRatio).div(10000);\\n\\n      address forwarder = IController(controller()).feeRewardForwarder();\\n      emit ProfitAndBuybackLog(_rewardBalance, feeAmount, block.timestamp);\\n\\n      IERC20(rewardToken()).safeApprove(forwarder, 0);\\n      IERC20(rewardToken()).safeApprove(forwarder, _rewardBalance);\\n\\n      IFeeRewardForwarderV6(forwarder).notifyFeeAndBuybackAmounts(\\n        rewardToken(),\\n        feeAmount,\\n        pool,\\n        buybackAmount\\n      );\\n    } else {\\n      emit ProfitAndBuybackLog(0, 0, block.timestamp);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/sushi-base/interfaces/IMasterChef.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IMasterChef {\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n    function emergencyWithdraw(uint256 _pid) external;\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256 amount, uint256 rewardDebt);\\n    function poolInfo(uint256 _pid) external view returns (address lpToken, uint256, uint256, uint256);\\n    function massUpdatePools() external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/uniswap/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n *Submitted for verification at Etherscan.io on 2020-05-05\\n*/\\n\\n// File: contracts/interfaces/IUniswapV2Pair.sol\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"\r\n    },\r\n    \"contracts/base/PotPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.5.16;\\n\\nimport \\\"./inheritance/Controllable.sol\\\";\\nimport \\\"./interface/IController.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\n\\ncontract IRewardDistributionRecipient is Ownable {\\n\\n    mapping (address => bool) public rewardDistribution;\\n\\n    constructor(address[] memory _rewardDistributions) public {\\n        // NotifyHelper\\n        rewardDistribution[0xE20c31e3d08027F5AfACe84A3A46B7b3B165053c] = true;\\n\\n        // FeeRewardForwarderV5\\n        rewardDistribution[0x153C544f72329c1ba521DDf5086cf2fA98C86676] = true;\\n\\n        for(uint256 i = 0; i < _rewardDistributions.length; i++) {\\n          rewardDistribution[_rewardDistributions[i]] = true;\\n        }\\n    }\\n\\n    function notifyTargetRewardAmount(address rewardToken, uint256 reward) external;\\n    function notifyRewardAmount(uint256 reward) external;\\n\\n    modifier onlyRewardDistribution() {\\n        require(rewardDistribution[_msgSender()], \\\"Caller is not reward distribution\\\");\\n        _;\\n    }\\n\\n    function setRewardDistribution(address[] calldata _newRewardDistribution, bool _flag)\\n        external\\n        onlyOwner\\n    {\\n        for(uint256 i = 0; i < _newRewardDistribution.length; i++){\\n          rewardDistribution[_newRewardDistribution[i]] = _flag;\\n        }\\n    }\\n}\\n\\ncontract PotPool is IRewardDistributionRecipient, Controllable, ERC20, ERC20Detailed {\\n\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    address public lpToken;\\n    uint256 public duration; // making it not a constant is less gas efficient, but portable\\n\\n    mapping(address => uint256) public stakedBalanceOf;\\n\\n    mapping (address => bool) smartContractStakers;\\n    address[] public rewardTokens;\\n    mapping(address => uint256) public periodFinishForToken;\\n    mapping(address => uint256) public rewardRateForToken;\\n    mapping(address => uint256) public lastUpdateTimeForToken;\\n    mapping(address => uint256) public rewardPerTokenStoredForToken;\\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaidForToken;\\n    mapping(address => mapping(address => uint256)) public rewardsForToken;\\n\\n    event RewardAdded(address rewardToken, uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, address rewardToken, uint256 reward);\\n    event RewardDenied(address indexed user, address rewardToken, uint256 reward);\\n    event SmartContractRecorded(address indexed smartContractAddress, address indexed smartContractInitiator);\\n\\n    modifier updateRewards(address account) {\\n      for(uint256 i = 0; i < rewardTokens.length; i++ ){\\n        address rt = rewardTokens[i];\\n        rewardPerTokenStoredForToken[rt] = rewardPerToken(rt);\\n        lastUpdateTimeForToken[rt] = lastTimeRewardApplicable(rt);\\n        if (account != address(0)) {\\n            rewardsForToken[rt][account] = earned(rt, account);\\n            userRewardPerTokenPaidForToken[rt][account] = rewardPerTokenStoredForToken[rt];\\n        }\\n      }\\n      _;\\n    }\\n\\n    modifier updateReward(address account, address rt){\\n      rewardPerTokenStoredForToken[rt] = rewardPerToken(rt);\\n      lastUpdateTimeForToken[rt] = lastTimeRewardApplicable(rt);\\n      if (account != address(0)) {\\n          rewardsForToken[rt][account] = earned(rt, account);\\n          userRewardPerTokenPaidForToken[rt][account] = rewardPerTokenStoredForToken[rt];\\n      }\\n      _;\\n    }\\n\\n    /** View functions to respect old interface */\\n    function rewardToken() public view returns(address) {\\n      return rewardTokens[0];\\n    }\\n\\n    function rewardPerToken() public view returns(uint256) {\\n      return rewardPerToken(rewardTokens[0]);\\n    }\\n\\n    function periodFinish() public view returns(uint256) {\\n      return periodFinishForToken[rewardTokens[0]];\\n    }\\n\\n    function rewardRate() public view returns(uint256) {\\n      return rewardRateForToken[rewardTokens[0]];\\n    }\\n\\n    function lastUpdateTime() public view returns(uint256) {\\n      return lastUpdateTimeForToken[rewardTokens[0]];\\n    }\\n\\n    function rewardPerTokenStored() public view returns(uint256) {\\n      return rewardPerTokenStoredForToken[rewardTokens[0]];\\n    }\\n\\n    function userRewardPerTokenPaid(address user) public view returns(uint256) {\\n      return userRewardPerTokenPaidForToken[rewardTokens[0]][user];\\n    }\\n\\n    function rewards(address user) public view returns(uint256) {\\n      return rewardsForToken[rewardTokens[0]][user];\\n    }\\n\\n    // [Hardwork] setting the reward, lpToken, duration, and rewardDistribution for each pool\\n    constructor(\\n        address[] memory _rewardTokens,\\n        address _lpToken,\\n        uint256 _duration,\\n        address[] memory _rewardDistribution,\\n        address _storage,\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n      ) public\\n      ERC20Detailed(_name, _symbol, _decimals)\\n      IRewardDistributionRecipient(_rewardDistribution)\\n      Controllable(_storage) // only used for referencing the grey list\\n    {\\n        require(_decimals == ERC20Detailed(_lpToken).decimals(), \\\"decimals has to be aligned with the lpToken\\\");\\n        require(_rewardTokens.length != 0, \\\"should initialize with at least 1 rewardToken\\\");\\n        rewardTokens = _rewardTokens;\\n        lpToken = _lpToken;\\n        duration = _duration;\\n    }\\n\\n    function lastTimeRewardApplicable(uint256 i) public view returns (uint256) {\\n        return lastTimeRewardApplicable(rewardTokens[i]);\\n    }\\n\\n    function lastTimeRewardApplicable(address rt) public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinishForToken[rt]);\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return lastTimeRewardApplicable(rewardTokens[0]);\\n    }\\n\\n    function rewardPerToken(uint256 i) public view returns (uint256) {\\n        return rewardPerToken(rewardTokens[i]);\\n    }\\n\\n    function rewardPerToken(address rt) public view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return rewardPerTokenStoredForToken[rt];\\n        }\\n        return\\n            rewardPerTokenStoredForToken[rt].add(\\n                lastTimeRewardApplicable(rt)\\n                    .sub(lastUpdateTimeForToken[rt])\\n                    .mul(rewardRateForToken[rt])\\n                    .mul(1e18)\\n                    .div(totalSupply())\\n            );\\n    }\\n\\n    function earned(uint256 i, address account) public view returns (uint256) {\\n        return earned(rewardTokens[i], account);\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return earned(rewardTokens[0], account);\\n    }\\n\\n    function earned(address rt, address account) public view returns (uint256) {\\n        return\\n            stakedBalanceOf[account]\\n                .mul(rewardPerToken(rt).sub(userRewardPerTokenPaidForToken[rt][account]))\\n                .div(1e18)\\n                .add(rewardsForToken[rt][account]);\\n    }\\n\\n    function stake(uint256 amount) public updateRewards(msg.sender) {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        recordSmartContract();\\n        super._mint(msg.sender, amount); // ERC20 is used as a staking receipt\\n        stakedBalanceOf[msg.sender] = stakedBalanceOf[msg.sender].add(amount);\\n        IERC20(lpToken).safeTransferFrom(msg.sender, address(this), amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount) public updateRewards(msg.sender) {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        super._burn(msg.sender, amount);\\n        stakedBalanceOf[msg.sender] = stakedBalanceOf[msg.sender].sub(amount);\\n        IERC20(lpToken).safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function exit() external {\\n        withdraw(Math.min(stakedBalanceOf[msg.sender], balanceOf(msg.sender)));\\n        getAllRewards();\\n    }\\n\\n    /// A push mechanism for accounts that have not claimed their rewards for a long time.\\n    /// The implementation is semantically analogous to getReward(), but uses a push pattern\\n    /// instead of pull pattern.\\n    function pushAllRewards(address recipient) public updateRewards(recipient) onlyGovernance {\\n      bool rewardPayout = (!smartContractStakers[recipient] || !IController(controller()).greyList(recipient));\\n      for(uint256 i = 0 ; i < rewardTokens.length; i++ ){\\n        uint256 reward = earned(rewardTokens[i], recipient);\\n        if (reward > 0) {\\n            rewardsForToken[rewardTokens[i]][recipient] = 0;\\n            // If it is a normal user and not smart contract,\\n            // then the requirement will pass\\n            // If it is a smart contract, then\\n            // make sure that it is not on our greyList.\\n            if (rewardPayout) {\\n                IERC20(rewardTokens[i]).safeTransfer(recipient, reward);\\n                emit RewardPaid(recipient, rewardTokens[i], reward);\\n            } else {\\n                emit RewardDenied(recipient, rewardTokens[i], reward);\\n            }\\n        }\\n      }\\n    }\\n\\n    function getAllRewards() public updateRewards(msg.sender) {\\n      recordSmartContract();\\n      bool rewardPayout = (!smartContractStakers[msg.sender] || !IController(controller()).greyList(msg.sender));\\n      for(uint256 i = 0 ; i < rewardTokens.length; i++ ){\\n        _getRewardAction(rewardTokens[i], rewardPayout);\\n      }\\n    }\\n\\n    function getReward(address rt) public updateReward(msg.sender, rt) {\\n      recordSmartContract();\\n      _getRewardAction(\\n        rt,\\n        // don't payout if it is a grey listed smart contract\\n        (!smartContractStakers[msg.sender] || !IController(controller()).greyList(msg.sender))\\n      );\\n    }\\n\\n    function getReward() public {\\n      getReward(rewardTokens[0]);\\n    }\\n\\n    function _getRewardAction(address rt, bool rewardPayout) internal {\\n      uint256 reward = earned(rt, msg.sender);\\n      if (reward > 0 && IERC20(rt).balanceOf(address(this)) >= reward ) {\\n          rewardsForToken[rt][msg.sender] = 0;\\n          // If it is a normal user and not smart contract,\\n          // then the requirement will pass\\n          // If it is a smart contract, then\\n          // make sure that it is not on our greyList.\\n          if (rewardPayout) {\\n              IERC20(rt).safeTransfer(msg.sender, reward);\\n              emit RewardPaid(msg.sender, rt, reward);\\n          } else {\\n              emit RewardDenied(msg.sender, rt, reward);\\n          }\\n      }\\n    }\\n\\n    function addRewardToken(address rt) public onlyGovernance {\\n      require(getRewardTokenIndex(rt) == uint256(-1), \\\"Reward token already exists\\\");\\n      rewardTokens.push(rt);\\n    }\\n\\n    function removeRewardToken(address rt) public onlyGovernance {\\n      uint256 i = getRewardTokenIndex(rt);\\n      require(i != uint256(-1), \\\"Reward token does not exists\\\");\\n      require(periodFinishForToken[rewardTokens[i]] < block.timestamp, \\\"Can only remove when the reward period has passed\\\");\\n      require(rewardTokens.length > 1, \\\"Cannot remove the last reward token\\\");\\n      uint256 lastIndex = rewardTokens.length - 1;\\n\\n      // swap\\n      rewardTokens[i] = rewardTokens[lastIndex];\\n\\n      // delete last element\\n      rewardTokens.length--;\\n    }\\n\\n    // If the return value is MAX_UINT256, it means that\\n    // the specified reward token is not in the list\\n    function getRewardTokenIndex(address rt) public view returns(uint256) {\\n      for(uint i = 0 ; i < rewardTokens.length ; i++){\\n        if(rewardTokens[i] == rt)\\n          return i;\\n      }\\n      return uint256(-1);\\n    }\\n\\n    function notifyTargetRewardAmount(address _rewardToken, uint256 reward)\\n        public\\n        onlyRewardDistribution\\n        updateRewards(address(0))\\n    {\\n        // overflow fix according to https://sips.synthetix.io/sips/sip-77\\n        require(reward < uint(-1) / 1e18, \\\"the notified reward cannot invoke multiplication overflow\\\");\\n\\n        uint256 i = getRewardTokenIndex(_rewardToken);\\n        require(i != uint256(-1), \\\"rewardTokenIndex not found\\\");\\n\\n        if (block.timestamp >= periodFinishForToken[_rewardToken]) {\\n            rewardRateForToken[_rewardToken] = reward.div(duration);\\n        } else {\\n            uint256 remaining = periodFinishForToken[_rewardToken].sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRateForToken[_rewardToken]);\\n            rewardRateForToken[_rewardToken] = reward.add(leftover).div(duration);\\n        }\\n        lastUpdateTimeForToken[_rewardToken] = block.timestamp;\\n        periodFinishForToken[_rewardToken] = block.timestamp.add(duration);\\n        emit RewardAdded(_rewardToken, reward);\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        onlyRewardDistribution\\n        updateRewards(address(0))\\n    {\\n      notifyTargetRewardAmount(rewardTokens[0], reward);\\n    }\\n\\n    function rewardTokensLength() public view returns(uint256){\\n      return rewardTokens.length;\\n    }\\n\\n    // Harvest Smart Contract recording\\n    function recordSmartContract() internal {\\n      if( tx.origin != msg.sender ) {\\n        smartContractStakers[msg.sender] = true;\\n        emit SmartContractRecorded(msg.sender, tx.origin);\\n      }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/uniswap/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/base/upgradability/BaseUpgradeableStrategyStorage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\ncontract BaseUpgradeableStrategyStorage {\\n\\n  bytes32 internal constant _UNDERLYING_SLOT = 0xa1709211eeccf8f4ad5b6700d52a1a9525b5f5ae1e9e5f9e5a0c2fc23c86e530;\\n  bytes32 internal constant _VAULT_SLOT = 0xefd7c7d9ef1040fc87e7ad11fe15f86e1d11e1df03c6d7c87f7e1f4041f08d41;\\n\\n  bytes32 internal constant _REWARD_TOKEN_SLOT = 0xdae0aafd977983cb1e78d8f638900ff361dc3c48c43118ca1dd77d1af3f47bbf;\\n  bytes32 internal constant _REWARD_POOL_SLOT = 0x3d9bb16e77837e25cada0cf894835418b38e8e18fbec6cfd192eb344bebfa6b8;\\n  bytes32 internal constant _SELL_FLOOR_SLOT = 0xc403216a7704d160f6a3b5c3b149a1226a6080f0a5dd27b27d9ba9c022fa0afc;\\n  bytes32 internal constant _SELL_SLOT = 0x656de32df98753b07482576beb0d00a6b949ebf84c066c765f54f26725221bb6;\\n  bytes32 internal constant _PAUSED_INVESTING_SLOT = 0xa07a20a2d463a602c2b891eb35f244624d9068572811f63d0e094072fb54591a;\\n\\n  bytes32 internal constant _PROFIT_SHARING_NUMERATOR_SLOT = 0xe3ee74fb7893020b457d8071ed1ef76ace2bf4903abd7b24d3ce312e9c72c029;\\n  bytes32 internal constant _PROFIT_SHARING_DENOMINATOR_SLOT = 0x0286fd414602b432a8c80a0125e9a25de9bba96da9d5068c832ff73f09208a3b;\\n\\n  bytes32 internal constant _NEXT_IMPLEMENTATION_SLOT = 0x29f7fcd4fe2517c1963807a1ec27b0e45e67c60a874d5eeac7a0b1ab1bb84447;\\n  bytes32 internal constant _NEXT_IMPLEMENTATION_TIMESTAMP_SLOT = 0x414c5263b05428f1be1bfa98e25407cc78dd031d0d3cd2a2e3d63b488804f22e;\\n  bytes32 internal constant _NEXT_IMPLEMENTATION_DELAY_SLOT = 0x82b330ca72bcd6db11a26f10ce47ebcfe574a9c646bccbc6f1cd4478eae16b31;\\n\\n  bytes32 internal constant _REWARD_CLAIMABLE_SLOT = 0xbc7c0d42a71b75c3129b337a259c346200f901408f273707402da4b51db3b8e7;\\n  bytes32 internal constant _MULTISIG_SLOT = 0x3e9de78b54c338efbc04e3a091b87dc7efb5d7024738302c548fc59fba1c34e6;\\n\\n  constructor() public {\\n    assert(_UNDERLYING_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.underlying\\\")) - 1));\\n    assert(_VAULT_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.vault\\\")) - 1));\\n    assert(_REWARD_TOKEN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.rewardToken\\\")) - 1));\\n    assert(_REWARD_POOL_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.rewardPool\\\")) - 1));\\n    assert(_SELL_FLOOR_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.sellFloor\\\")) - 1));\\n    assert(_SELL_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.sell\\\")) - 1));\\n    assert(_PAUSED_INVESTING_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.pausedInvesting\\\")) - 1));\\n\\n    assert(_PROFIT_SHARING_NUMERATOR_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.profitSharingNumerator\\\")) - 1));\\n    assert(_PROFIT_SHARING_DENOMINATOR_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.profitSharingDenominator\\\")) - 1));\\n\\n    assert(_NEXT_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.nextImplementation\\\")) - 1));\\n    assert(_NEXT_IMPLEMENTATION_TIMESTAMP_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.nextImplementationTimestamp\\\")) - 1));\\n    assert(_NEXT_IMPLEMENTATION_DELAY_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.nextImplementationDelay\\\")) - 1));\\n\\n    assert(_REWARD_CLAIMABLE_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.rewardClaimable\\\")) - 1));\\n    assert(_MULTISIG_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategyStorage.multiSig\\\")) - 1));\\n  }\\n\\n  function _setUnderlying(address _address) internal {\\n    setAddress(_UNDERLYING_SLOT, _address);\\n  }\\n\\n  function underlying() public view returns (address) {\\n    return getAddress(_UNDERLYING_SLOT);\\n  }\\n\\n  function _setRewardPool(address _address) internal {\\n    setAddress(_REWARD_POOL_SLOT, _address);\\n  }\\n\\n  function rewardPool() public view returns (address) {\\n    return getAddress(_REWARD_POOL_SLOT);\\n  }\\n\\n  function _setRewardToken(address _address) internal {\\n    setAddress(_REWARD_TOKEN_SLOT, _address);\\n  }\\n\\n  function rewardToken() public view returns (address) {\\n    return getAddress(_REWARD_TOKEN_SLOT);\\n  }\\n\\n  function _setVault(address _address) internal {\\n    setAddress(_VAULT_SLOT, _address);\\n  }\\n\\n  function vault() public view returns (address) {\\n    return getAddress(_VAULT_SLOT);\\n  }\\n\\n  // a flag for disabling selling for simplified emergency exit\\n  function _setSell(bool _value) internal {\\n    setBoolean(_SELL_SLOT, _value);\\n  }\\n\\n  function sell() public view returns (bool) {\\n    return getBoolean(_SELL_SLOT);\\n  }\\n\\n  function _setPausedInvesting(bool _value) internal {\\n    setBoolean(_PAUSED_INVESTING_SLOT, _value);\\n  }\\n\\n  function pausedInvesting() public view returns (bool) {\\n    return getBoolean(_PAUSED_INVESTING_SLOT);\\n  }\\n\\n  function _setSellFloor(uint256 _value) internal {\\n    setUint256(_SELL_FLOOR_SLOT, _value);\\n  }\\n\\n  function sellFloor() public view returns (uint256) {\\n    return getUint256(_SELL_FLOOR_SLOT);\\n  }\\n\\n  function _setProfitSharingNumerator(uint256 _value) internal {\\n    setUint256(_PROFIT_SHARING_NUMERATOR_SLOT, _value);\\n  }\\n\\n  function profitSharingNumerator() public view returns (uint256) {\\n    return getUint256(_PROFIT_SHARING_NUMERATOR_SLOT);\\n  }\\n\\n  function _setProfitSharingDenominator(uint256 _value) internal {\\n    setUint256(_PROFIT_SHARING_DENOMINATOR_SLOT, _value);\\n  }\\n\\n  function profitSharingDenominator() public view returns (uint256) {\\n    return getUint256(_PROFIT_SHARING_DENOMINATOR_SLOT);\\n  }\\n\\n  function allowedRewardClaimable() public view returns (bool) {\\n    return getBoolean(_REWARD_CLAIMABLE_SLOT);\\n  }\\n\\n  function _setRewardClaimable(bool _value) internal {\\n    setBoolean(_REWARD_CLAIMABLE_SLOT, _value);\\n  }\\n\\n  function multiSig() public view returns(address) {\\n    return getAddress(_MULTISIG_SLOT);\\n  }\\n\\n  function _setMultiSig(address _address) internal {\\n    setAddress(_MULTISIG_SLOT, _address);\\n  }\\n\\n  // upgradeability\\n\\n  function _setNextImplementation(address _address) internal {\\n    setAddress(_NEXT_IMPLEMENTATION_SLOT, _address);\\n  }\\n\\n  function nextImplementation() public view returns (address) {\\n    return getAddress(_NEXT_IMPLEMENTATION_SLOT);\\n  }\\n\\n  function _setNextImplementationTimestamp(uint256 _value) internal {\\n    setUint256(_NEXT_IMPLEMENTATION_TIMESTAMP_SLOT, _value);\\n  }\\n\\n  function nextImplementationTimestamp() public view returns (uint256) {\\n    return getUint256(_NEXT_IMPLEMENTATION_TIMESTAMP_SLOT);\\n  }\\n\\n  function _setNextImplementationDelay(uint256 _value) internal {\\n    setUint256(_NEXT_IMPLEMENTATION_DELAY_SLOT, _value);\\n  }\\n\\n  function nextImplementationDelay() public view returns (uint256) {\\n    return getUint256(_NEXT_IMPLEMENTATION_DELAY_SLOT);\\n  }\\n\\n  function setBoolean(bytes32 slot, bool _value) internal {\\n    setUint256(slot, _value ? 1 : 0);\\n  }\\n\\n  function getBoolean(bytes32 slot) internal view returns (bool) {\\n    return (getUint256(slot) == 1);\\n  }\\n\\n  function setAddress(bytes32 slot, address _address) internal {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      sstore(slot, _address)\\n    }\\n  }\\n\\n  function setUint256(bytes32 slot, uint256 _value) internal {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      sstore(slot, _value)\\n    }\\n  }\\n\\n  function getAddress(bytes32 slot) internal view returns (address str) {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      str := sload(slot)\\n    }\\n  }\\n\\n  function getUint256(bytes32 slot) internal view returns (uint256 str) {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      str := sload(slot)\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/ControllableInit.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./GovernableInit.sol\\\";\\n\\n// A clone of Governable supporting the Initializable interface and pattern\\ncontract ControllableInit is GovernableInit {\\n\\n  constructor() public {\\n  }\\n\\n  function initialize(address _storage) public initializer {\\n    GovernableInit.initialize(_storage);\\n  }\\n\\n  modifier onlyController() {\\n    require(Storage(_storage()).isController(msg.sender), \\\"Not a controller\\\");\\n    _;\\n  }\\n\\n  modifier onlyControllerOrGovernance(){\\n    require((Storage(_storage()).isController(msg.sender) || Storage(_storage()).isGovernance(msg.sender)),\\n      \\\"The caller must be controller or governance\\\");\\n    _;\\n  }\\n\\n  function controller() public view returns (address) {\\n    return Storage(_storage()).controller();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IController.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IController {\\n\\n    event SharePriceChangeLog(\\n      address indexed vault,\\n      address indexed strategy,\\n      uint256 oldSharePrice,\\n      uint256 newSharePrice,\\n      uint256 timestamp\\n    );\\n\\n    // [Grey list]\\n    // An EOA can safely interact with the system no matter what.\\n    // If you're using Metamask, you're using an EOA.\\n    // Only smart contracts may be affected by this grey list.\\n    //\\n    // This contract will not be able to ban any EOA from the system\\n    // even if an EOA is being added to the greyList, he/she will still be able\\n    // to interact with the whole system as if nothing happened.\\n    // Only smart contracts will be affected by being added to the greyList.\\n    // This grey list is only used in Vault.sol, see the code there for reference\\n    function greyList(address _target) external view returns(bool);\\n\\n    function addVaultAndStrategy(address _vault, address _strategy) external;\\n    function doHardWork(address _vault) external;\\n\\n    function salvage(address _token, uint256 amount) external;\\n    function salvageStrategy(address _strategy, address _token, uint256 amount) external;\\n\\n    function notifyFee(address _underlying, uint256 fee) external;\\n    function profitSharingNumerator() external view returns (uint256);\\n    function profitSharingDenominator() external view returns (uint256);\\n\\n    function feeRewardForwarder() external view returns(address);\\n    function setFeeRewardForwarder(address _value) external;\\n\\n    function addHardWorker(address _worker) external;\\n    function addToWhitelist(address _target) external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IFeeRewardForwarderV6.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IFeeRewardForwarderV6 {\\n    function poolNotifyFixedTarget(address _token, uint256 _amount) external;\\n\\n    function notifyFeeAndBuybackAmounts(uint256 _feeAmount, address _pool, uint256 _buybackAmount) external;\\n    function notifyFeeAndBuybackAmounts(address _token, uint256 _feeAmount, address _pool, uint256 _buybackAmount) external;\\n    function profitSharingPool() external view returns (address);\\n    function configureLiquidation(address[] calldata _path, bytes32[] calldata _dexes) external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/GovernableInit.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n\\n// A clone of Governable supporting the Initializable interface and pattern\\ncontract GovernableInit is Initializable {\\n\\n  bytes32 internal constant _STORAGE_SLOT = 0xa7ec62784904ff31cbcc32d09932a58e7f1e4476e1d041995b37c917990b16dc;\\n\\n  modifier onlyGovernance() {\\n    require(Storage(_storage()).isGovernance(msg.sender), \\\"Not governance\\\");\\n    _;\\n  }\\n\\n  constructor() public {\\n    assert(_STORAGE_SLOT == bytes32(uint256(keccak256(\\\"eip1967.governableInit.storage\\\")) - 1));\\n  }\\n\\n  function initialize(address _store) public initializer {\\n    _setStorage(_store);\\n  }\\n\\n  function _setStorage(address newStorage) private {\\n    bytes32 slot = _STORAGE_SLOT;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      sstore(slot, newStorage)\\n    }\\n  }\\n\\n  function setStorage(address _store) public onlyGovernance {\\n    require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\n    _setStorage(_store);\\n  }\\n\\n  function _storage() internal view returns (address str) {\\n    bytes32 slot = _STORAGE_SLOT;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      str := sload(slot)\\n    }\\n  }\\n\\n  function governance() public view returns (address) {\\n    return Storage(_storage()).governance();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/Storage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ncontract Storage {\\n\\n  address public governance;\\n  address public controller;\\n\\n  constructor() public {\\n    governance = msg.sender;\\n  }\\n\\n  modifier onlyGovernance() {\\n    require(isGovernance(msg.sender), \\\"Not governance\\\");\\n    _;\\n  }\\n\\n  function setGovernance(address _governance) public onlyGovernance {\\n    require(_governance != address(0), \\\"new governance shouldn't be empty\\\");\\n    governance = _governance;\\n  }\\n\\n  function setController(address _controller) public onlyGovernance {\\n    require(_controller != address(0), \\\"new controller shouldn't be empty\\\");\\n    controller = _controller;\\n  }\\n\\n  function isGovernance(address account) public view returns (bool) {\\n    return account == governance;\\n  }\\n\\n  function isController(address account) public view returns (bool) {\\n    return account == controller;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/Controllable.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./Governable.sol\\\";\\n\\ncontract Controllable is Governable {\\n\\n  constructor(address _storage) Governable(_storage) public {\\n  }\\n\\n  modifier onlyController() {\\n    require(store.isController(msg.sender), \\\"Not a controller\\\");\\n    _;\\n  }\\n\\n  modifier onlyControllerOrGovernance(){\\n    require((store.isController(msg.sender) || store.isGovernance(msg.sender)),\\n      \\\"The caller must be controller or governance\\\");\\n    _;\\n  }\\n\\n  function controller() public view returns (address) {\\n    return store.controller();\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/Governable.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./Storage.sol\\\";\\n\\ncontract Governable {\\n\\n  Storage public store;\\n\\n  constructor(address _store) public {\\n    require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\n    store = Storage(_store);\\n  }\\n\\n  modifier onlyGovernance() {\\n    require(store.isGovernance(msg.sender), \\\"Not governance\\\");\\n    _;\\n  }\\n\\n  function setStorage(address _store) public onlyGovernance {\\n    require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\n    store = Storage(_store);\\n  }\\n\\n  function governance() public view returns (address) {\\n    return store.governance();\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProfitAndBuybackLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProfitLogInReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sell\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"floor\",\"type\":\"bool\"}],\"name\":\"ProfitsNotCollected\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowedRewardClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"continueInvesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositArbCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doHardWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hodlVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_profitSharingNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profitSharingDenominator\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_sell\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_sellFloor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_implementationChangeDelay\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_hodlVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_potPool\",\"type\":\"address\"}],\"name\":\"initializeMasterChefHodlStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"initializeStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investedUnderlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiSig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextImplementationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextImplementationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pausedInvesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"potPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitSharingDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitSharingNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"salvage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"scheduleUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setHodlVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setPotPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shouldUpgrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sushiswapRouterV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapRouterV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unsalvagableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yel_weth_unused\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"YelHodlStrategyMainnet_YEL_WETH","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}