{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENCED\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface Token {\r\n    function decimals() external view returns(uint256);\r\n}\r\n\r\n\r\ninterface uniswapInterface{\r\n    function getAmountsOut(uint amountIn, address[] memory path)external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface tellorInterface{\r\n    function getLastNewValueById(uint _requestId) external view returns(uint,bool);\r\n}\r\n\r\n\r\ninterface OracleInterface{\r\n    function latestAnswer() external view returns (int256);\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title CustomOwnable\r\n * @dev This contract has the owner address providing basic authorization control\r\n */\r\ncontract CustomOwnable is Context  {\r\n    /**\r\n     * @dev Event to show ownership has been transferred\r\n     * @param previousOwner representing the address of the previous owner\r\n     * @param newOwner representing the address of the new owner\r\n     */\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    // Owner of the contract\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_msgSender() == owner(), \"CustomOwnable: FORBIDDEN\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Tells the address of the owner\r\n     * @return the address of the owner\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new owner address\r\n     */\r\n    function _setOwner(address newOwner) internal {\r\n        _owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"CustomOwnable: FORBIDDEN\");\r\n        emit OwnershipTransferred(owner(), newOwner);\r\n        _setOwner(newOwner);\r\n    }\r\n}\r\n\r\ncontract OracleWrapper is CustomOwnable {\r\n    \r\n    bool isInitialized;\r\n    address public tellerContractAddress;\r\n    address public UniswapV2Router02;\r\n\r\n    struct coinDetails {\r\n        address oracleAddress;\r\n        uint8   oracleType;\r\n        uint88  id;\r\n    }\r\n\r\n    mapping(address => coinDetails) public coin;\r\n\r\n   \r\n   function initializeOracle(address _owner, address _tellerContractAddress, address _UniswapV2Router02) public {\r\n        require(!isInitialized,\"OracleWrapperV0 : Already initialized\");\r\n        tellerContractAddress = _tellerContractAddress;\r\n        UniswapV2Router02 = _UniswapV2Router02;\r\n        _setOwner(_owner);\r\n        isInitialized = true;\r\n    }\r\n    \r\n    function setOracleAddresses (address _coinAddress, address _oracleAddress, uint8 _oracleType, uint88 _id) public onlyOwner {\r\n        require((_oracleType == 1) || (_oracleType == 2) || (_oracleType == 3), \"OracleWrapperV0: Invalid oracleType\");\r\n        require(_coinAddress != address(0), \"OracleWrapperV0 : Zero address\");\r\n        \r\n        if (coin[_coinAddress].oracleType != 0) {\r\n            require(coin[_coinAddress].oracleType == _oracleType, \"OracleWrapperV0: Invalid Oracle type\");\r\n        }\r\n        \r\n        if (_oracleType == 3) {\r\n            coin[_coinAddress].oracleType = _oracleType;\r\n            coin[_oracleAddress].oracleType = _oracleType;\r\n            coin[_coinAddress].oracleAddress = _oracleAddress;\r\n            return;\r\n        }\r\n        \r\n        coin[_coinAddress].oracleAddress = _oracleAddress;\r\n        coin[_coinAddress].oracleType = _oracleType;\r\n        \r\n        if(_oracleType == 2) {\r\n            coin[_coinAddress].id = _id;\r\n        }\r\n    }\r\n  \r\n    function getPrice(address _coinAddress, address pair) external view returns (uint256) {\r\n        require((coin[_coinAddress].oracleType != uint8(0)), \"OracleWrapperV0 : Coin not exists\");\r\n        \r\n        uint256 price;\r\n\r\n        if (coin[_coinAddress].oracleType  == 1) {\r\n            OracleInterface oObj = OracleInterface(coin[_coinAddress].oracleAddress);\r\n            return price = uint256(oObj.latestAnswer());\r\n        } else if (coin[_coinAddress].oracleType == 2) {\r\n            tellorInterface tObj = tellorInterface(tellerContractAddress);\r\n            uint256 actualFiatPrice;\r\n            bool statusTellor;\r\n            (actualFiatPrice,statusTellor) = tObj.getLastNewValueById(coin[_coinAddress].id);\r\n            return price = uint256(actualFiatPrice);\r\n        } else if (coin[_coinAddress].oracleType == 3 && pair != address(0)) {\r\n            uniswapInterface uObj = uniswapInterface(UniswapV2Router02);\r\n            \r\n            address[] memory path = new address[](2);\r\n            path[0] = _coinAddress;\r\n            path[1] = pair;\r\n            uint[] memory values = uObj.getAmountsOut(10**(Token(_coinAddress).decimals()), path);\r\n\r\n            return price = (values[1] * 100);\r\n        }\r\n        \r\n        require(price != 0, \"OracleWrapperV0: Price can't be zero\");\r\n        \r\n        return 0;\r\n        \r\n    }\r\n    \r\n    function updateUniswapV2Router02(address _UniswapV2Router02) external onlyOwner {\r\n        UniswapV2Router02 = _UniswapV2Router02;\r\n    }\r\n\r\n    function updateTellerContractAddress(address newAddress) public onlyOwner {\r\n        tellerContractAddress = newAddress;\r\n    }\r\n    \r\n    //check if this works\r\n    function removeCoin(address _coinAddress) public onlyOwner {\r\n        require(coin[_coinAddress].oracleType != 0, \"OracleWrapperV0: Coin not exists\");\r\n        \r\n        delete coin[_coinAddress];\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UniswapV2Router02\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"oracleType\",\"type\":\"uint8\"},{\"internalType\":\"uint88\",\"name\":\"id\",\"type\":\"uint88\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tellerContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_UniswapV2Router02\",\"type\":\"address\"}],\"name\":\"initializeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coinAddress\",\"type\":\"address\"}],\"name\":\"removeCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_oracleType\",\"type\":\"uint8\"},{\"internalType\":\"uint88\",\"name\":\"_id\",\"type\":\"uint88\"}],\"name\":\"setOracleAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tellerContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateTellerContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_UniswapV2Router02\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router02\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OracleWrapper","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://34848468928d9274080e9a983efca3d9b95072c77eb3d39c41ad0541a3526327"}]}