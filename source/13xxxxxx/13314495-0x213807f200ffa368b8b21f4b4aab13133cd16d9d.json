{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [////IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * ////IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /home/fabio/Jibrel/tranche-compound-protocol/contracts/JCompound.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\n////import \"../utils/AddressUpgradeable.sol\";\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /home/fabio/Jibrel/tranche-compound-protocol/contracts/JCompound.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n////import \"../proxy/Initializable.sol\";\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /home/fabio/Jibrel/tranche-compound-protocol/contracts/JCompound.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IETHGateway {\r\n  function withdrawETH(uint256 amount, address onBehalfOf, bool redeemType, uint256 _cEthBal) external;\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /home/fabio/Jibrel/tranche-compound-protocol/contracts/JCompound.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface ICEth {\r\n    function mint() external payable;\r\n    function exchangeRateCurrent() external returns (uint256);\r\n    function supplyRatePerBlock() external view returns (uint256);\r\n    function redeem(uint) external returns (uint);\r\n    function redeemUnderlying(uint) external returns (uint);\r\n    function exchangeRateStored() external view returns (uint);\r\n    function setExchangeRateStored(uint256 rate) external;\r\n}\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /home/fabio/Jibrel/tranche-compound-protocol/contracts/JCompound.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n////import \"../utils/ContextUpgradeable.sol\";\r\n////import \"../proxy/Initializable.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /home/fabio/Jibrel/tranche-compound-protocol/contracts/JCompound.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /home/fabio/Jibrel/tranche-compound-protocol/contracts/JCompound.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * ////IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /home/fabio/Jibrel/tranche-compound-protocol/contracts/JCompound.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IJCompoundHelper {\r\n    // function sendErc20ToCompoundHelper(address _underToken, address _cToken, uint256 _numTokensToSupply) external returns(uint256);\r\n    // function redeemCErc20TokensHelper(address _cToken, uint256 _amount, bool _redeemType) external returns (uint256 redeemResult);\r\n\r\n    function getMantissaHelper(uint256 _underDecs, uint256 _cTokenDecs) external pure returns (uint256 mantissa);\r\n    function getCompoundPurePriceHelper(address _cTokenAddress) external view returns (uint256 compoundPrice);\r\n    function getCompoundPriceHelper(address _cTokenAddress, uint256 _underDecs, uint256 _cTokenDecs) external view returns (uint256 compNormPrice);\r\n}\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /home/fabio/Jibrel/tranche-compound-protocol/contracts/JCompound.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n/**\r\n * Created on 2021-06-18\r\n * @summary: Markets Interface\r\n * @author: Jibrel Team\r\n */\r\npragma solidity 0.6.12;\r\n\r\ninterface IIncentivesController {\r\n    function trancheANewEnter(address account, address trancheA) external; \r\n    function trancheBNewEnter(address account, address trancheB) external; \r\n\r\n    function claimRewardsAllMarkets(address _account) external returns (bool);\r\n    function claimRewardSingleMarketTrA(uint256 _idxMarket, address _account) external;\r\n    function claimRewardSingleMarketTrB(uint256 _idxMarket, address _account) external;\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /home/fabio/Jibrel/tranche-compound-protocol/contracts/JCompound.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity 0.6.12;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferETHHelper {\r\n    function safeTransferETH(address _to, uint256 _value) internal {\r\n        (bool success,) = _to.call{value:_value}(new bytes(0));\r\n        require(success, 'TH ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /home/fabio/Jibrel/tranche-compound-protocol/contracts/JCompound.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n/**\r\n * Created on 2021-01-16\r\n * @summary: Jibrel Protocol Storage\r\n * @author: Jibrel Team\r\n */\r\npragma solidity 0.6.12;\r\n\r\n////import \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n////import \"./interfaces/ICEth.sol\";\r\n////import \"./interfaces/IETHGateway.sol\";\r\n\r\ncontract JCompoundStorage is OwnableUpgradeable {\r\n/* WARNING: NEVER RE-ORDER VARIABLES! Always double-check that new variables are added APPEND-ONLY. Re-ordering variables can permanently BREAK the deployed proxy contract.*/\r\n\r\n    uint256 public constant PERCENT_DIVIDER = 10000;  // percentage divider for redemption\r\n\r\n    struct TrancheAddresses {\r\n        address buyerCoinAddress;       // ETH (ZERO_ADDRESS) or DAI\r\n        address cTokenAddress;          // cETH or cDAI\r\n        address ATrancheAddress;\r\n        address BTrancheAddress;\r\n    }\r\n\r\n    struct TrancheParameters {\r\n        uint256 trancheAFixedPercentage;    // fixed percentage (i.e. 4% = 0.04 * 10^18 = 40000000000000000)\r\n        uint256 trancheALastActionBlock;\r\n        uint256 storedTrancheAPrice;\r\n        uint256 trancheACurrentRPB;\r\n        uint16 redemptionPercentage;        // percentage with 2 decimals (divided by 10000, i.e. 95% is 9500)\r\n        uint8 cTokenDecimals;\r\n        uint8 underlyingDecimals;\r\n    }\r\n\r\n    address public adminToolsAddress;\r\n    address public feesCollectorAddress;\r\n    address public tranchesDeployerAddress;\r\n    address public compTokenAddress;\r\n    address public comptrollerAddress;\r\n    address public rewardsToken;\r\n\r\n    uint256 public tranchePairsCounter;\r\n    uint256 public totalBlocksPerYear; \r\n    uint32 public redeemTimeout;\r\n\r\n    mapping(address => address) public cTokenContracts;\r\n    mapping(uint256 => TrancheAddresses) public trancheAddresses;\r\n    mapping(uint256 => TrancheParameters) public trancheParameters;\r\n    // last block number when the user buy/reddem tranche tokens\r\n    mapping(address => uint256) public lastActivity;\r\n\r\n    ICEth public cEthToken;\r\n    IETHGateway public ethGateway;\r\n\r\n    // enabling / disabling tranches for fund deposit\r\n    mapping(uint256 => bool) public trancheDepositEnabled;\r\n}\r\n\r\n\r\ncontract JCompoundStorageV2 is JCompoundStorage {\r\n    struct StakingDetails {\r\n        uint256 startTime;\r\n        uint256 amount;\r\n    }\r\n\r\n    address public incentivesControllerAddress;\r\n\r\n    // user => trancheNum => counter\r\n    mapping (address => mapping(uint256 => uint256)) public stakeCounterTrA;\r\n    mapping (address => mapping(uint256 => uint256)) public stakeCounterTrB;\r\n    // user => trancheNum => stakeCounter => struct\r\n    mapping (address => mapping (uint256 => mapping (uint256 => StakingDetails))) public stakingDetailsTrancheA;\r\n    mapping (address => mapping (uint256 => mapping (uint256 => StakingDetails))) public stakingDetailsTrancheB;\r\n\r\n    address public jCompoundHelperAddress;\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /home/fabio/Jibrel/tranche-compound-protocol/contracts/JCompound.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IComptrollerLensInterface {\r\n    function claimComp(address) external;\r\n    function compAccrued(address) external view returns (uint);\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /home/fabio/Jibrel/tranche-compound-protocol/contracts/JCompound.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface ICErc20 {\r\n    function mint(uint256) external returns (uint256);\r\n    function exchangeRateCurrent() external returns (uint256);\r\n    function supplyRatePerBlock() external view returns (uint256);\r\n    function redeem(uint) external returns (uint);\r\n    function redeemUnderlying(uint) external returns (uint);\r\n    function exchangeRateStored() external view returns (uint);\r\n    function setExchangeRateStored(uint256 rate) external;\r\n}\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /home/fabio/Jibrel/tranche-compound-protocol/contracts/JCompound.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IJCompound {\r\n    event TrancheAddedToProtocol(uint256 trancheNum, address trancheA, address trancheB);\r\n    event TrancheATokenMinted(uint256 trancheNum, address buyer, uint256 amount, uint256 taAmount);\r\n    event TrancheBTokenMinted(uint256 trancheNum, address buyer, uint256 amount, uint256 tbAmount);\r\n    event TrancheATokenRedemption(uint256 trancheNum, address burner, uint256 amount, uint256 userAmount, uint256 feesAmount);\r\n    event TrancheBTokenRedemption(uint256 trancheNum, address burner, uint256 amount, uint256 userAmount, uint256 feesAmount);\r\n\r\n    function getSingleTrancheUserStakeCounterTrA(address _user, uint256 _trancheNum) external view returns (uint256);\r\n    function getSingleTrancheUserStakeCounterTrB(address _user, uint256 _trancheNum) external view returns (uint256);\r\n    function getSingleTrancheUserSingleStakeDetailsTrA(address _user, uint256 _trancheNum, uint256 _num) external view returns (uint256, uint256);\r\n    function getSingleTrancheUserSingleStakeDetailsTrB(address _user, uint256 _trancheNum, uint256 _num) external view returns (uint256, uint256);\r\n    function getTrAValue(uint256 _trancheNum) external view returns (uint256 trANormValue);\r\n    function getTrBValue(uint256 _trancheNum) external view returns (uint256);\r\n    function getTotalValue(uint256 _trancheNum) external view returns (uint256);\r\n    function getTrancheACurrentRPB(uint256 _trancheNum) external view returns (uint256);\r\n    function getTrancheAExchangeRate(uint256 _trancheNum) external view returns (uint256);\r\n    function getTrancheBExchangeRate(uint256 _trancheNum, uint256 _newAmount) external view returns (uint256 tbPrice);\r\n}\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /home/fabio/Jibrel/tranche-compound-protocol/contracts/JCompound.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n/**\r\n * Created on 2021-01-15\r\n * @summary: JProtocol Interface\r\n * @author: Jibrel Team\r\n */\r\npragma solidity 0.6.12;\r\n\r\ninterface IJTranchesDeployer {\r\n    function deployNewTrancheATokens(string calldata _nameA, string calldata _symbolA, address _sender, address _rewardToken) external returns (address);\r\n    function deployNewTrancheBTokens(string calldata _nameB, string calldata _symbolB, address _sender, address _rewardToken) external returns (address);\r\n}\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /home/fabio/Jibrel/tranche-compound-protocol/contracts/JCompound.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n/**\r\n * Created on 2021-01-16\r\n * @summary: JTranches Interface\r\n * @author: Jibrel Team\r\n */\r\npragma solidity 0.6.12;\r\n\r\ninterface IJTrancheTokens {\r\n    function mint(address account, uint256 value) external;\r\n    function burn(uint256 value) external;\r\n    function updateFundsReceived() external;\r\n    function emergencyTokenTransfer(address _token, address _to, uint256 _amount) external;\r\n    function setRewardTokenAddress(address _token) external;\r\n}\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /home/fabio/Jibrel/tranche-compound-protocol/contracts/JCompound.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n/**\r\n * Created on 2021-05-16\r\n * @summary: Admin Tools Interface\r\n * @author: Jibrel Team\r\n */\r\npragma solidity 0.6.12;\r\n\r\ninterface IJAdminTools {\r\n    function isAdmin(address account) external view returns (bool);\r\n    function addAdmin(address account) external;\r\n    function removeAdmin(address account) external;\r\n    function renounceAdmin() external;\r\n\r\n    event AdminAdded(address account);\r\n    event AdminRemoved(address account);\r\n}\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /home/fabio/Jibrel/tranche-compound-protocol/contracts/JCompound.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n////import \"../proxy/Initializable.sol\";\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal initializer {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /home/fabio/Jibrel/tranche-compound-protocol/contracts/JCompound.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n////import \"./IERC20Upgradeable.sol\";\r\n////import \"../../math/SafeMathUpgradeable.sol\";\r\n////import \"../../utils/AddressUpgradeable.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/** \r\n *  SourceUnit: /home/fabio/Jibrel/tranche-compound-protocol/contracts/JCompound.sol\r\n*/\r\n\r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n/**\r\n * Created on 2021-02-11\r\n * @summary: Jibrel Compound Tranche Protocol\r\n * @author: Jibrel Team\r\n */\r\npragma solidity 0.6.12;\r\n\r\n////import \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\r\n////import \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\";\r\n////import \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\r\n////import \"./interfaces/IJAdminTools.sol\";\r\n////import \"./interfaces/IJTrancheTokens.sol\";\r\n////import \"./interfaces/IJTranchesDeployer.sol\";\r\n////import \"./interfaces/IJCompound.sol\";\r\n////import \"./interfaces/ICErc20.sol\";\r\n////import \"./interfaces/IComptrollerLensInterface.sol\";\r\n////import \"./JCompoundStorage.sol\";\r\n////import \"./TransferETHHelper.sol\";\r\n////import \"./interfaces/IIncentivesController.sol\";\r\n////import \"./interfaces/IJCompoundHelper.sol\";\r\n\r\n\r\ncontract JCompound is OwnableUpgradeable, ReentrancyGuardUpgradeable, JCompoundStorageV2, IJCompound {\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    /**\r\n     * @dev contract initializer\r\n     * @param _adminTools price oracle address\r\n     * @param _feesCollector fees collector contract address\r\n     * @param _tranchesDepl tranches deployer contract address\r\n     * @param _compTokenAddress COMP token contract address\r\n     * @param _comptrollAddress comptroller contract address\r\n     * @param _rewardsToken rewards token address (slice token address)\r\n     */\r\n    function initialize(address _adminTools, \r\n            address _feesCollector, \r\n            address _tranchesDepl,\r\n            address _compTokenAddress,\r\n            address _comptrollAddress,\r\n            address _rewardsToken) external initializer() {\r\n        OwnableUpgradeable.__Ownable_init();\r\n        adminToolsAddress = _adminTools;\r\n        feesCollectorAddress = _feesCollector;\r\n        tranchesDeployerAddress = _tranchesDepl;\r\n        compTokenAddress = _compTokenAddress;\r\n        comptrollerAddress = _comptrollAddress;\r\n        rewardsToken = _rewardsToken;\r\n        redeemTimeout = 3; //default\r\n        totalBlocksPerYear = 2102400; // same number like in Compound protocol\r\n    }\r\n\r\n    /**\r\n     * @dev set constants for JCompound\r\n     * @param _trNum tranche number\r\n     * @param _redemPerc redemption percentage (scaled by 1e4)\r\n     * @param _redemTimeout redemption timeout, in blocks\r\n     * @param _blocksPerYear blocks per year (compound set it to 2102400)\r\n     */\r\n    function setConstantsValues(uint256 _trNum, uint16 _redemPerc, uint32 _redemTimeout, uint256 _blocksPerYear) external onlyAdmins {\r\n        trancheParameters[_trNum].redemptionPercentage = _redemPerc;\r\n        redeemTimeout = _redemTimeout;\r\n        totalBlocksPerYear = _blocksPerYear;\r\n    }\r\n\r\n    /**\r\n     * @dev set eth gateway \r\n     * @param _ethGateway ethGateway address\r\n     */\r\n    function setETHGateway(address _ethGateway) external onlyAdmins {\r\n        ethGateway = IETHGateway(_ethGateway);\r\n    }\r\n\r\n    /**\r\n     * @dev set incentive rewards address\r\n     * @param _incentivesController incentives controller contract address\r\n     */\r\n    function setincentivesControllerAddress(address _incentivesController) external onlyAdmins {\r\n        incentivesControllerAddress = _incentivesController;\r\n    }\r\n\r\n    /**\r\n     * @dev set incentive rewards address\r\n     * @param _helper JCompound helper contract address\r\n     */\r\n    function setJCompoundHelperAddress(address _helper) external onlyAdmins {\r\n        jCompoundHelperAddress = _helper;\r\n    }\r\n\r\n    /**\r\n     * @dev admins modifiers\r\n     */\r\n    modifier onlyAdmins() {\r\n        require(IJAdminTools(adminToolsAddress).isAdmin(msg.sender), \"!Admin\");\r\n        _;\r\n    }\r\n\r\n    // This is needed to receive ETH\r\n    fallback() external payable {}\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @dev set new addresses for price oracle, fees collector and tranche deployer \r\n     * @param _adminTools price oracle address\r\n     * @param _feesCollector fees collector contract address\r\n     * @param _tranchesDepl tranches deployer contract address\r\n     * @param _compTokenAddress COMP token contract address\r\n     * @param _comptrollAddress comptroller contract address\r\n     * @param _rewardsToken rewards token address (slice token address)\r\n     */\r\n    function setNewEnvironment(address _adminTools, \r\n            address _feesCollector, \r\n            address _tranchesDepl,\r\n            address _compTokenAddress,\r\n            address _comptrollAddress,\r\n            address _rewardsToken) external onlyOwner {\r\n        require((_adminTools != address(0)) && (_feesCollector != address(0)) && \r\n            (_tranchesDepl != address(0)) && (_comptrollAddress != address(0)) && (_compTokenAddress != address(0)), \"ChkAddress\");\r\n        adminToolsAddress = _adminTools;\r\n        feesCollectorAddress = _feesCollector;\r\n        tranchesDeployerAddress = _tranchesDepl;\r\n        compTokenAddress = _compTokenAddress;\r\n        comptrollerAddress = _comptrollAddress;\r\n        rewardsToken = _rewardsToken;\r\n    }\r\n\r\n    /**\r\n     * @dev set relationship between ethers and the corresponding Compound cETH contract\r\n     * @param _cEtherContract compound token contract address (cETH contract, on Kovan: 0x41b5844f4680a8c38fbb695b7f9cfd1f64474a72)\r\n     */\r\n    function setCEtherContract(address _cEtherContract) external onlyAdmins {\r\n        cEthToken = ICEth(_cEtherContract);\r\n        cTokenContracts[address(0)] = _cEtherContract;\r\n    }\r\n\r\n    /**\r\n     * @dev set relationship between a token and the corresponding Compound cToken contract\r\n     * @param _erc20Contract token contract address (i.e. DAI contract, on Kovan: 0x4f96fe3b7a6cf9725f59d353f723c1bdb64ca6aa)\r\n     * @param _cErc20Contract compound token contract address (i.e. cDAI contract, on Kovan: 0xf0d0eb522cfa50b716b3b1604c4f0fa6f04376ad)\r\n     */\r\n    function setCTokenContract(address _erc20Contract, address _cErc20Contract) external onlyAdmins {\r\n        cTokenContracts[_erc20Contract] = _cErc20Contract;\r\n    }\r\n\r\n    /**\r\n     * @dev check if a cToken is allowed or not\r\n     * @param _erc20Contract token contract address (i.e. DAI contract, on Kovan: 0x4f96fe3b7a6cf9725f59d353f723c1bdb64ca6aa)\r\n     * @return true or false\r\n     */\r\n    function isCTokenAllowed(address _erc20Contract) public view returns (bool) {\r\n        return cTokenContracts[_erc20Contract] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev get RPB from compound\r\n     * @param _trancheNum tranche number\r\n     * @return cToken compound supply RPB\r\n     */\r\n    function getCompoundSupplyRPB(uint256 _trancheNum) external view returns (uint256) {\r\n        ICErc20 cToken = ICErc20(cTokenContracts[trancheAddresses[_trancheNum].buyerCoinAddress]);\r\n        return cToken.supplyRatePerBlock();\r\n    }\r\n\r\n    /**\r\n     * @dev check if a cToken is allowed or not\r\n     * @param _trancheNum tranche number\r\n     * @param _cTokenDec cToken decimals\r\n     * @param _underlyingDec underlying token decimals\r\n     */\r\n    function setDecimals(uint256 _trancheNum, uint8 _cTokenDec, uint8 _underlyingDec) external onlyAdmins {\r\n        require((_cTokenDec <= 18) && (_underlyingDec <= 18), \"Decs\");\r\n        trancheParameters[_trancheNum].cTokenDecimals = _cTokenDec;\r\n        trancheParameters[_trancheNum].underlyingDecimals = _underlyingDec;\r\n    }\r\n\r\n    /**\r\n     * @dev set tranche A fixed percentage (scaled by 1e18)\r\n     * @param _trancheNum tranche number\r\n     * @param _newTrAPercentage new tranche A fixed percentage (scaled by 1e18)\r\n     */\r\n    function setTrancheAFixedPercentage(uint256 _trancheNum, uint256 _newTrAPercentage) external onlyAdmins {\r\n        trancheParameters[_trancheNum].trancheAFixedPercentage = _newTrAPercentage;\r\n        trancheParameters[_trancheNum].storedTrancheAPrice = setTrancheAExchangeRate(_trancheNum);\r\n    }\r\n\r\n    /**\r\n     * @dev add tranche in protocol\r\n     * @param _erc20Contract token contract address (0x0000000000000000000000000000000000000000 if eth)\r\n     * @param _nameA tranche A token name\r\n     * @param _symbolA tranche A token symbol\r\n     * @param _nameB tranche B token name\r\n     * @param _symbolB tranche B token symbol\r\n     * @param _fixedRpb tranche A percentage fixed compounded interest per year\r\n     * @param _cTokenDec cToken decimals\r\n     * @param _underlyingDec underlying token decimals\r\n     */\r\n    function addTrancheToProtocol(address _erc20Contract, string memory _nameA, string memory _symbolA, string memory _nameB, \r\n                string memory _symbolB, uint256 _fixedRpb, uint8 _cTokenDec, uint8 _underlyingDec) external onlyAdmins nonReentrant {\r\n        require(tranchesDeployerAddress != address(0), \"!TrDepl\");\r\n        require(isCTokenAllowed(_erc20Contract), \"!Allow\");\r\n\r\n        trancheAddresses[tranchePairsCounter].buyerCoinAddress = _erc20Contract;\r\n        trancheAddresses[tranchePairsCounter].cTokenAddress = cTokenContracts[_erc20Contract];\r\n        // our tokens always with 18 decimals\r\n        trancheAddresses[tranchePairsCounter].ATrancheAddress = \r\n                IJTranchesDeployer(tranchesDeployerAddress).deployNewTrancheATokens(_nameA, _symbolA, msg.sender, rewardsToken);\r\n        trancheAddresses[tranchePairsCounter].BTrancheAddress = \r\n                IJTranchesDeployer(tranchesDeployerAddress).deployNewTrancheBTokens(_nameB, _symbolB, msg.sender, rewardsToken);\r\n        \r\n        trancheParameters[tranchePairsCounter].cTokenDecimals = _cTokenDec;\r\n        trancheParameters[tranchePairsCounter].underlyingDecimals = _underlyingDec;\r\n        trancheParameters[tranchePairsCounter].trancheAFixedPercentage = _fixedRpb;\r\n        trancheParameters[tranchePairsCounter].trancheALastActionBlock = block.number;\r\n        // if we would like to have always 18 decimals\r\n        trancheParameters[tranchePairsCounter].storedTrancheAPrice = \r\n            IJCompoundHelper(jCompoundHelperAddress).getCompoundPriceHelper(cTokenContracts[_erc20Contract], _underlyingDec, _cTokenDec);\r\n\r\n        trancheParameters[tranchePairsCounter].redemptionPercentage = 9950;  //default value 99.5%\r\n\r\n        calcRPBFromPercentage(tranchePairsCounter); // initialize tranche A RPB\r\n\r\n        emit TrancheAddedToProtocol(tranchePairsCounter, trancheAddresses[tranchePairsCounter].ATrancheAddress, trancheAddresses[tranchePairsCounter].BTrancheAddress);\r\n\r\n        tranchePairsCounter = tranchePairsCounter.add(1);\r\n    } \r\n\r\n    /**\r\n     * @dev enables or disables tranche deposit (default: disabled)\r\n     * @param _trancheNum tranche number\r\n     * @param _enable true or false\r\n     */\r\n    function setTrancheDeposit(uint256 _trancheNum, bool _enable) external onlyAdmins {\r\n        trancheDepositEnabled[_trancheNum] = _enable;\r\n    }\r\n\r\n    /**\r\n     * @dev send an amount of tokens to corresponding compound contract (it takes tokens from this contract). Only allowed token should be sent\r\n     * @param _erc20Contract token contract address\r\n     * @param _numTokensToSupply token amount to be sent\r\n     * @return mint result\r\n     */\r\n    function sendErc20ToCompound(address _erc20Contract, uint256 _numTokensToSupply) internal returns(uint256) {\r\n        address cTokenAddress = cTokenContracts[_erc20Contract];\r\n        require(cTokenAddress != address(0), \"!Accept\");\r\n\r\n        IERC20Upgradeable underlying = IERC20Upgradeable(_erc20Contract);\r\n\r\n        ICErc20 cToken = ICErc20(cTokenAddress);\r\n\r\n        SafeERC20Upgradeable.safeApprove(underlying, cTokenAddress, _numTokensToSupply);\r\n        require(underlying.allowance(address(this), cTokenAddress) >= _numTokensToSupply, \"!AllowCToken\");\r\n\r\n        uint256 mintResult = cToken.mint(_numTokensToSupply);\r\n        return mintResult;\r\n    }\r\n\r\n    /**\r\n     * @dev redeem an amount of cTokens to have back original tokens (tokens remains in this contract). Only allowed token should be sent\r\n     * @param _erc20Contract original token contract address\r\n     * @param _amount cToken amount to be sent\r\n     * @param _redeemType true or false, normally true\r\n     */\r\n    function redeemCErc20Tokens(address _erc20Contract, uint256 _amount, bool _redeemType) internal returns (uint256 redeemResult) {\r\n        address cTokenAddress = cTokenContracts[_erc20Contract];\r\n        require(cTokenAddress != address(0),  \"!Accept\");\r\n\r\n        ICErc20 cToken = ICErc20(cTokenAddress);\r\n\r\n        if (_redeemType) {\r\n            // Retrieve your asset based on a cToken amount\r\n            redeemResult = cToken.redeem(_amount);\r\n        } else {\r\n            // Retrieve your asset based on an amount of the asset\r\n            redeemResult = cToken.redeemUnderlying(_amount);\r\n        }\r\n        return redeemResult;\r\n    }\r\n\r\n    /**\r\n     * @dev get Tranche A exchange rate\r\n     * @param _trancheNum tranche number\r\n     * @return tranche A token stored price\r\n     */\r\n    function getTrancheAExchangeRate(uint256 _trancheNum) public view override returns (uint256) {\r\n        return trancheParameters[_trancheNum].storedTrancheAPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev get RPB for a given percentage (expressed in 1e18)\r\n     * @param _trancheNum tranche number\r\n     * @return RPB for a fixed percentage\r\n     */\r\n    function getTrancheACurrentRPB(uint256 _trancheNum) external view override returns (uint256) {\r\n        return trancheParameters[_trancheNum].trancheACurrentRPB;\r\n    }\r\n\r\n    /**\r\n     * @dev set Tranche A exchange rate\r\n     * @param _trancheNum tranche number\r\n     * @return tranche A token stored price\r\n     */\r\n    function setTrancheAExchangeRate(uint256 _trancheNum) internal returns (uint256) {\r\n        calcRPBFromPercentage(_trancheNum);\r\n        uint256 deltaBlocks = (block.number).sub(trancheParameters[_trancheNum].trancheALastActionBlock);\r\n        if (deltaBlocks > 0) {\r\n            uint256 deltaPrice = (trancheParameters[_trancheNum].trancheACurrentRPB).mul(deltaBlocks);\r\n            trancheParameters[_trancheNum].storedTrancheAPrice = (trancheParameters[_trancheNum].storedTrancheAPrice).add(deltaPrice);\r\n            trancheParameters[_trancheNum].trancheALastActionBlock = block.number;\r\n        }\r\n        return trancheParameters[_trancheNum].storedTrancheAPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev get Tranche A exchange rate (tokens with 18 decimals)\r\n     * @param _trancheNum tranche number\r\n     * @return tranche A token current price\r\n     */\r\n    function calcRPBFromPercentage(uint256 _trancheNum) public returns (uint256) {\r\n        // if normalized price in tranche A price, everything should be scaled to 1e18 \r\n        trancheParameters[_trancheNum].trancheACurrentRPB = trancheParameters[_trancheNum].storedTrancheAPrice\r\n            .mul(trancheParameters[_trancheNum].trancheAFixedPercentage).div(totalBlocksPerYear).div(1e18);\r\n        return trancheParameters[_trancheNum].trancheACurrentRPB;\r\n    }\r\n\r\n    /**\r\n     * @dev get Tranche A value in underlying tokens\r\n     * @param _trancheNum tranche number\r\n     * @return trANormValue tranche A value in underlying tokens\r\n     */\r\n    function getTrAValue(uint256 _trancheNum) public view override returns (uint256 trANormValue) {\r\n        uint256 totASupply = IERC20Upgradeable(trancheAddresses[_trancheNum].ATrancheAddress).totalSupply();\r\n        uint256 diffDec = uint256(18).sub(uint256(trancheParameters[_trancheNum].underlyingDecimals));\r\n        uint256 storedAPrice = trancheParameters[_trancheNum].storedTrancheAPrice;\r\n        trANormValue = totASupply.mul(storedAPrice).div(1e18).div(10 ** diffDec);\r\n        return trANormValue;\r\n    }\r\n\r\n    /**\r\n     * @dev get Tranche B value in underlying tokens\r\n     * @param _trancheNum tranche number\r\n     * @return tranche B valuein underlying tokens\r\n     */\r\n    function getTrBValue(uint256 _trancheNum) external view override returns (uint256) {\r\n        uint256 totProtValue = getTotalValue(_trancheNum);\r\n        uint256 totTrAValue = getTrAValue(_trancheNum);\r\n        if (totProtValue > totTrAValue) {\r\n            return totProtValue.sub(totTrAValue);\r\n        } else\r\n            return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev get Tranche total value in underlying tokens\r\n     * @param _trancheNum tranche number\r\n     * @return tranche total value in underlying tokens\r\n     */\r\n    function getTotalValue(uint256 _trancheNum) public view override returns (uint256) {\r\n        address cTokenAddress = trancheAddresses[_trancheNum].cTokenAddress;\r\n        uint256 underDecs = uint256(trancheParameters[_trancheNum].underlyingDecimals);\r\n        uint256 cTokenDecs = uint256(trancheParameters[_trancheNum].cTokenDecimals);\r\n        uint256 compNormPrice = IJCompoundHelper(jCompoundHelperAddress).getCompoundPriceHelper(cTokenAddress, underDecs, cTokenDecs);\r\n        uint256 mantissa = IJCompoundHelper(jCompoundHelperAddress).getMantissaHelper(underDecs, cTokenDecs);\r\n        if (mantissa < 18) {\r\n            compNormPrice = compNormPrice.div(10 ** (uint256(18).sub(mantissa)));\r\n        } else {\r\n            compNormPrice = IJCompoundHelper(jCompoundHelperAddress).getCompoundPurePriceHelper(cTokenAddress);\r\n        }\r\n        uint256 totProtSupply = getTokenBalance(trancheAddresses[_trancheNum].cTokenAddress);\r\n        return totProtSupply.mul(compNormPrice).div(1e18);\r\n    }\r\n\r\n    /**\r\n     * @dev get Tranche B exchange rate\r\n     * @param _trancheNum tranche number\r\n     * @param _newAmount new amount entering tranche B (in underlying tokens)\r\n     * @return tbPrice tranche B token current price\r\n     */\r\n    function getTrancheBExchangeRate(uint256 _trancheNum, uint256 _newAmount) public view override returns (uint256 tbPrice) {\r\n        // set amount of tokens to be minted via taToken price\r\n        // Current tbDai price = (((cDai X cPrice)-(aSupply X taPrice)) / bSupply)\r\n        // where: cDai = How much cDai we hold in the protocol\r\n        // cPrice = cDai / Dai price\r\n        // aSupply = Total number of taDai in protocol\r\n        // taPrice = taDai / Dai price\r\n        // bSupply = Total number of tbDai in protocol\r\n        uint256 totTrBValue;\r\n\r\n        uint256 totBSupply = IERC20Upgradeable(trancheAddresses[_trancheNum].BTrancheAddress).totalSupply(); // 18 decimals\r\n        // if normalized price in tranche A price, everything should be scaled to 1e18 \r\n        uint256 underlyingDec = uint256(trancheParameters[_trancheNum].underlyingDecimals);\r\n        uint256 normAmount = _newAmount;\r\n        if (underlyingDec < 18)\r\n            normAmount = _newAmount.mul(10 ** uint256(18).sub(underlyingDec));\r\n        uint256 newBSupply = totBSupply.add(normAmount); // 18 decimals\r\n\r\n        uint256 totProtValue = getTotalValue(_trancheNum).add(_newAmount); //underlying token decimals\r\n        uint256 totTrAValue = getTrAValue(_trancheNum); //underlying token decimals\r\n        if (totProtValue >= totTrAValue)\r\n            totTrBValue = totProtValue.sub(totTrAValue); //underlying token decimals\r\n        else\r\n            totTrBValue = 0;\r\n        // if normalized price in tranche A price, everything should be scaled to 1e18 \r\n        if (underlyingDec < 18 && totTrBValue > 0) {\r\n            totTrBValue = totTrBValue.mul(10 ** (uint256(18).sub(underlyingDec)));\r\n        }\r\n        if (totTrBValue > 0 && newBSupply > 0) {\r\n            // if normalized price in tranche A price, everything should be scaled to 1e18 \r\n            tbPrice = totTrBValue.mul(1e18).div(newBSupply);\r\n        } else\r\n            // if normalized price in tranche A price, everything should be scaled to 1e18 \r\n            tbPrice = uint256(1e18);\r\n\r\n        return tbPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev set staking details for tranche A holders, with number, amount and time\r\n     * @param _trancheNum tranche number\r\n     * @param _account user's account\r\n     * @param _stkNum staking detail counter\r\n     * @param _amount amount of tranche A tokens\r\n     * @param _time time to be considered the deposit\r\n     */\r\n    function setTrAStakingDetails(uint256 _trancheNum, address _account, uint256 _stkNum, uint256 _amount, uint256 _time) external onlyAdmins {\r\n        stakeCounterTrA[_account][_trancheNum] = _stkNum;\r\n        StakingDetails storage details = stakingDetailsTrancheA[_account][_trancheNum][_stkNum];\r\n        details.startTime = _time;\r\n        details.amount = _amount;\r\n    }\r\n\r\n    /**\r\n     * @dev when redemption occurs on tranche A, removing tranche A tokens from staking information (FIFO logic)\r\n     * @param _trancheNum tranche number\r\n     * @param _amount amount of redeemed tokens\r\n     */\r\n    function decreaseTrancheATokenFromStake(uint256 _trancheNum, uint256 _amount) internal {\r\n        uint256 senderCounter = stakeCounterTrA[msg.sender][_trancheNum];\r\n        uint256 tmpAmount = _amount;\r\n        for (uint i = 1; i <= senderCounter; i++) {\r\n            StakingDetails storage details = stakingDetailsTrancheA[msg.sender][_trancheNum][i];\r\n            if (details.amount > 0) {\r\n                if (details.amount <= tmpAmount) {\r\n                    tmpAmount = tmpAmount.sub(details.amount);\r\n                    details.amount = 0;\r\n                    //delete stakingDetailsTrancheA[msg.sender][_trancheNum][i];\r\n                    // update details number\r\n                    //stakeCounterTrA[msg.sender][_trancheNum] = stakeCounterTrA[msg.sender][_trancheNum].sub(1);\r\n                } else {\r\n                    details.amount = details.amount.sub(tmpAmount);\r\n                    tmpAmount = 0;\r\n                }\r\n            }\r\n            if (tmpAmount == 0)\r\n                break;\r\n        }\r\n    }\r\n\r\n    function getSingleTrancheUserStakeCounterTrA(address _user, uint256 _trancheNum) external view override returns (uint256) {\r\n        return stakeCounterTrA[_user][_trancheNum];\r\n    }\r\n\r\n    function getSingleTrancheUserSingleStakeDetailsTrA(address _user, uint256 _trancheNum, uint256 _num) external view override returns (uint256, uint256) {\r\n        return (stakingDetailsTrancheA[_user][_trancheNum][_num].startTime, stakingDetailsTrancheA[_user][_trancheNum][_num].amount);\r\n    }\r\n\r\n    /**\r\n     * @dev set staking details for tranche B holders, with number, amount and time\r\n     * @param _trancheNum tranche number\r\n     * @param _account user's account\r\n     * @param _stkNum staking detail counter\r\n     * @param _amount amount of tranche B tokens\r\n     * @param _time time to be considered the deposit\r\n     */\r\n    function setTrBStakingDetails(uint256 _trancheNum, address _account, uint256 _stkNum, uint256 _amount, uint256 _time) external onlyAdmins {\r\n        stakeCounterTrB[_account][_trancheNum] = _stkNum;\r\n        StakingDetails storage details = stakingDetailsTrancheB[_account][_trancheNum][_stkNum];\r\n        details.startTime = _time;\r\n        details.amount = _amount; \r\n    }\r\n\r\n    /**\r\n     * @dev when redemption occurs on tranche B, removing tranche B tokens from staking information (FIFO logic)\r\n     * @param _trancheNum tranche number\r\n     * @param _amount amount of redeemed tokens\r\n     */\r\n    function decreaseTrancheBTokenFromStake(uint256 _trancheNum, uint256 _amount) internal {\r\n        uint256 senderCounter = stakeCounterTrB[msg.sender][_trancheNum];\r\n        uint256 tmpAmount = _amount;\r\n        for (uint i = 1; i <= senderCounter; i++) {\r\n            StakingDetails storage details = stakingDetailsTrancheB[msg.sender][_trancheNum][i];\r\n            if (details.amount > 0) {\r\n                if (details.amount <= tmpAmount) {\r\n                    tmpAmount = tmpAmount.sub(details.amount);\r\n                    details.amount = 0;\r\n                    //delete stakingDetailsTrancheB[msg.sender][_trancheNum][i];\r\n                    // update details number\r\n                    //stakeCounterTrB[msg.sender][_trancheNum] = stakeCounterTrB[msg.sender][_trancheNum].sub(1);\r\n                } else {\r\n                    details.amount = details.amount.sub(tmpAmount);\r\n                    tmpAmount = 0;\r\n                }\r\n            }\r\n            if (tmpAmount == 0)\r\n                break;\r\n        }\r\n    }\r\n\r\n    function getSingleTrancheUserStakeCounterTrB(address _user, uint256 _trancheNum) external view override returns (uint256) {\r\n        return stakeCounterTrB[_user][_trancheNum];\r\n    }\r\n\r\n    function getSingleTrancheUserSingleStakeDetailsTrB(address _user, uint256 _trancheNum, uint256 _num) external view override returns (uint256, uint256) {\r\n        return (stakingDetailsTrancheB[_user][_trancheNum][_num].startTime, stakingDetailsTrancheB[_user][_trancheNum][_num].amount);\r\n    }\r\n\r\n    /**\r\n     * @dev buy Tranche A Tokens\r\n     * @param _trancheNum tranche number\r\n     * @param _amount amount of stable coins sent by buyer\r\n     */\r\n    function buyTrancheAToken(uint256 _trancheNum, uint256 _amount) external payable nonReentrant {\r\n        require(trancheDepositEnabled[_trancheNum], \"!Deposit\");\r\n        address cTokenAddress = trancheAddresses[_trancheNum].cTokenAddress;\r\n        address underTokenAddress = trancheAddresses[_trancheNum].buyerCoinAddress;\r\n        uint256 prevCompTokenBalance = getTokenBalance(cTokenAddress);\r\n        if (underTokenAddress == address(0)){\r\n            require(msg.value == _amount, \"!Amount\");\r\n            //Transfer ETH from msg.sender to protocol;\r\n            TransferETHHelper.safeTransferETH(address(this), _amount);\r\n            // transfer ETH to Coompound receiving cETH\r\n            cEthToken.mint{value: _amount}();\r\n        } else {\r\n            // check approve\r\n            require(IERC20Upgradeable(underTokenAddress).allowance(msg.sender, address(this)) >= _amount, \"!Allowance\");\r\n            //Transfer DAI from msg.sender to protocol;\r\n            SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(underTokenAddress), msg.sender, address(this), _amount);\r\n            // transfer DAI to Coompound receiving cDai\r\n            sendErc20ToCompound(underTokenAddress, _amount);\r\n            // IJCompoundHelper(jCompoundHelperAddress).sendErc20ToCompoundHelper(underTokenAddress, cTokenAddress, _amount);\r\n        }\r\n        uint256 newCompTokenBalance = getTokenBalance(cTokenAddress);\r\n        // set amount of tokens to be minted calculate taToken amount via taToken price\r\n        setTrancheAExchangeRate(_trancheNum);\r\n        uint256 taAmount;\r\n        if (newCompTokenBalance > prevCompTokenBalance) {\r\n            // if normalized price in tranche A price, everything should be scaled to 1e18 \r\n            uint256 diffDec = uint256(18).sub(uint256(trancheParameters[_trancheNum].underlyingDecimals));\r\n            uint256 normAmount = _amount.mul(10 ** diffDec);\r\n            taAmount = normAmount.mul(1e18).div(trancheParameters[_trancheNum].storedTrancheAPrice);\r\n            //Mint trancheA tokens and send them to msg.sender and notify to incentive controller BEFORE totalSupply updates\r\n            IIncentivesController(incentivesControllerAddress).trancheANewEnter(msg.sender, trancheAddresses[_trancheNum].ATrancheAddress);\r\n            IJTrancheTokens(trancheAddresses[_trancheNum].ATrancheAddress).mint(msg.sender, taAmount);\r\n        } else {\r\n            taAmount = 0;\r\n        }\r\n\r\n        stakeCounterTrA[msg.sender][_trancheNum] = stakeCounterTrA[msg.sender][_trancheNum].add(1);\r\n        StakingDetails storage details = stakingDetailsTrancheA[msg.sender][_trancheNum][stakeCounterTrA[msg.sender][_trancheNum]];\r\n        details.startTime = block.timestamp;\r\n        details.amount = taAmount;\r\n\r\n        lastActivity[msg.sender] = block.number;\r\n        emit TrancheATokenMinted(_trancheNum, msg.sender, _amount, taAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev redeem Tranche A Tokens\r\n     * @param _trancheNum tranche number\r\n     * @param _amount amount of stable coins sent by buyer\r\n     */\r\n    function redeemTrancheAToken(uint256 _trancheNum, uint256 _amount) external nonReentrant {\r\n        require((block.number).sub(lastActivity[msg.sender]) >= redeemTimeout, \"!Timeout\");\r\n        // check approve\r\n        address aTrancheAddress = trancheAddresses[_trancheNum].ATrancheAddress;\r\n        require(IERC20Upgradeable(aTrancheAddress).allowance(msg.sender, address(this)) >= _amount, \"!Allowance\");\r\n        //Transfer DAI from msg.sender to protocol;\r\n        SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(aTrancheAddress), msg.sender, address(this), _amount);\r\n\r\n        uint256 oldBal;\r\n        uint256 diffBal;\r\n        uint256 userAmount;\r\n        uint256 feesAmount;\r\n        setTrancheAExchangeRate(_trancheNum);\r\n        // if normalized price in tranche A price, everything should be scaled to 1e18 \r\n        uint256 taAmount = _amount.mul(trancheParameters[_trancheNum].storedTrancheAPrice).div(1e18);\r\n        uint256 diffDec = uint256(18).sub(uint256(trancheParameters[_trancheNum].underlyingDecimals));\r\n        uint256 normAmount = taAmount.div(10 ** diffDec);\r\n\r\n        address cTokenAddress = trancheAddresses[_trancheNum].cTokenAddress;\r\n        uint256 cTokenBal = getTokenBalance(cTokenAddress); // needed for emergency\r\n        address underTokenAddress = trancheAddresses[_trancheNum].buyerCoinAddress;\r\n        uint256 redeemPerc = uint256(trancheParameters[_trancheNum].redemptionPercentage);\r\n        if (underTokenAddress == address(0)) {\r\n            SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(cTokenAddress), address(ethGateway), cTokenBal);\r\n            // calculate taAmount via cETH price\r\n            oldBal = getEthBalance();\r\n            ethGateway.withdrawETH(normAmount, address(this), false, cTokenBal);\r\n            diffBal = getEthBalance().sub(oldBal);\r\n            userAmount = diffBal.mul(redeemPerc).div(PERCENT_DIVIDER);\r\n            TransferETHHelper.safeTransferETH(msg.sender, userAmount);\r\n            if (diffBal != userAmount) {\r\n                // transfer fees to JFeesCollector\r\n                feesAmount = diffBal.sub(userAmount);\r\n                TransferETHHelper.safeTransferETH(feesCollectorAddress, feesAmount);\r\n            }   \r\n        } else {\r\n            // calculate taAmount via cToken price\r\n            oldBal = getTokenBalance(underTokenAddress);\r\n            uint256 compoundRetCode = redeemCErc20Tokens(underTokenAddress, normAmount, false);\r\n            // uint256 compoundRetCode = IJCompoundHelper(jCompoundHelperAddress).redeemCErc20TokensHelper(cTokenAddress, normAmount, false);\r\n            if(compoundRetCode != 0) {\r\n                // emergency: send all ctokens balance to compound \r\n                redeemCErc20Tokens(underTokenAddress, cTokenBal, true); \r\n                // SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(aTrancheAddress), jCompoundHelperAddress, cTokenBal);\r\n                // IJCompoundHelper(jCompoundHelperAddress).redeemCErc20TokensHelper(cTokenAddress, cTokenBal, false); \r\n            }\r\n            diffBal = getTokenBalance(underTokenAddress).sub(oldBal);\r\n            userAmount = diffBal.mul(redeemPerc).div(PERCENT_DIVIDER);\r\n            SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(underTokenAddress), msg.sender, userAmount);\r\n            if (diffBal != userAmount) {\r\n                // transfer fees to JFeesCollector\r\n                feesAmount = diffBal.sub(userAmount);\r\n                SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(underTokenAddress), feesCollectorAddress, feesAmount);\r\n            }\r\n        }\r\n\r\n        // claim and transfer rewards to msg.sender. Be sure to wait for this function to be completed! \r\n        bool rewClaimCompleted = IIncentivesController(incentivesControllerAddress).claimRewardsAllMarkets(msg.sender);\r\n\r\n        // decrease tokens after claiming rewards\r\n        if (rewClaimCompleted && _amount > 0)\r\n            decreaseTrancheATokenFromStake(_trancheNum, _amount);\r\n     \r\n        IJTrancheTokens(aTrancheAddress).burn(_amount);\r\n\r\n        lastActivity[msg.sender] = block.number;\r\n        emit TrancheATokenRedemption(_trancheNum, msg.sender, 0, userAmount, feesAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev buy Tranche B Tokens\r\n     * @param _trancheNum tranche number\r\n     * @param _amount amount of stable coins sent by buyer\r\n     */\r\n    function buyTrancheBToken(uint256 _trancheNum, uint256 _amount) external payable nonReentrant {\r\n        require(trancheDepositEnabled[_trancheNum], \"!Deposit\");\r\n        address cTokenAddress = trancheAddresses[_trancheNum].cTokenAddress;\r\n        address underTokenAddress = trancheAddresses[_trancheNum].buyerCoinAddress;\r\n        uint256 prevCompTokenBalance = getTokenBalance(cTokenAddress);\r\n        // if eth, ignore _amount parameter and set it to msg.value\r\n        if (trancheAddresses[_trancheNum].buyerCoinAddress == address(0)) {\r\n            require(msg.value == _amount, \"!Amount\");\r\n            //_amount = msg.value;\r\n        }\r\n        // refresh value for tranche A\r\n        setTrancheAExchangeRate(_trancheNum);\r\n        // get tranche B exchange rate\r\n        // if normalized price in tranche B price, everything should be scaled to 1e18 \r\n        uint256 diffDec = uint256(18).sub(uint256(trancheParameters[_trancheNum].underlyingDecimals));\r\n        uint256 normAmount = _amount.mul(10 ** diffDec);\r\n        uint256 tbAmount = normAmount.mul(1e18).div(getTrancheBExchangeRate(_trancheNum, _amount));\r\n        if (underTokenAddress == address(0)) {\r\n            TransferETHHelper.safeTransferETH(address(this), _amount);\r\n            // transfer ETH to Coompound receiving cETH\r\n            cEthToken.mint{value: _amount}();\r\n        } else {\r\n            // check approve\r\n            require(IERC20Upgradeable(underTokenAddress).allowance(msg.sender, address(this)) >= _amount, \"!Allowance\");\r\n            //Transfer DAI from msg.sender to protocol;\r\n            SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(underTokenAddress), msg.sender, address(this), _amount);\r\n            // transfer DAI to Couompound receiving cDai\r\n            sendErc20ToCompound(underTokenAddress, _amount);\r\n            // IJCompoundHelper(jCompoundHelperAddress).sendErc20ToCompoundHelper(underTokenAddress, cTokenAddress, _amount);\r\n        }\r\n        uint256 newCompTokenBalance = getTokenBalance(cTokenAddress);\r\n        if (newCompTokenBalance > prevCompTokenBalance) {\r\n            //Mint trancheB tokens and send them to msg.sender and notify to incentive controller BEFORE totalSupply updates\r\n            IIncentivesController(incentivesControllerAddress).trancheBNewEnter(msg.sender, trancheAddresses[_trancheNum].BTrancheAddress);\r\n            IJTrancheTokens(trancheAddresses[_trancheNum].BTrancheAddress).mint(msg.sender, tbAmount);\r\n        } else \r\n            tbAmount = 0;\r\n\r\n        stakeCounterTrB[msg.sender][_trancheNum] = stakeCounterTrB[msg.sender][_trancheNum].add(1);\r\n        StakingDetails storage details = stakingDetailsTrancheB[msg.sender][_trancheNum][stakeCounterTrB[msg.sender][_trancheNum]];\r\n        details.startTime = block.timestamp;\r\n        details.amount = tbAmount;     \r\n\r\n        lastActivity[msg.sender] = block.number;\r\n        emit TrancheBTokenMinted(_trancheNum, msg.sender, _amount, tbAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev redeem Tranche B Tokens\r\n     * @param _trancheNum tranche number\r\n     * @param _amount amount of stable coins sent by buyer\r\n     */\r\n    function redeemTrancheBToken(uint256 _trancheNum, uint256 _amount) external nonReentrant {\r\n        require((block.number).sub(lastActivity[msg.sender]) >= redeemTimeout, \"!Timeout\");\r\n        // check approve\r\n        address bTrancheAddress = trancheAddresses[_trancheNum].BTrancheAddress;\r\n        require(IERC20Upgradeable(bTrancheAddress).allowance(msg.sender, address(this)) >= _amount, \"!Allowance\");\r\n        //Transfer DAI from msg.sender to protocol;\r\n        SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(bTrancheAddress), msg.sender, address(this), _amount);\r\n\r\n        uint256 oldBal;\r\n        uint256 diffBal;\r\n        uint256 userAmount;\r\n        uint256 feesAmount;\r\n        // refresh value for tranche A\r\n        setTrancheAExchangeRate(_trancheNum);\r\n        // get tranche B exchange rate\r\n        // if normalized price in tranche B price, everything should be scaled to 1e18 \r\n        uint256 tbAmount = _amount.mul(getTrancheBExchangeRate(_trancheNum, 0)).div(1e18);\r\n        uint256 diffDec = uint256(18).sub(uint256(trancheParameters[_trancheNum].underlyingDecimals));\r\n        uint256 normAmount = tbAmount.div(10 ** diffDec);\r\n\r\n        address cTokenAddress = trancheAddresses[_trancheNum].cTokenAddress;\r\n        uint256 cTokenBal = getTokenBalance(cTokenAddress); // needed for emergency\r\n        address underTokenAddress = trancheAddresses[_trancheNum].buyerCoinAddress;\r\n        uint256 redeemPerc = uint256(trancheParameters[_trancheNum].redemptionPercentage);\r\n        if (underTokenAddress == address(0)){\r\n            SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(cTokenAddress), address(ethGateway), cTokenBal);\r\n            // calculate tbETH amount via cETH price\r\n            oldBal = getEthBalance();\r\n            ethGateway.withdrawETH(normAmount, address(this), false, cTokenBal);\r\n            diffBal = getEthBalance().sub(oldBal);\r\n            userAmount = diffBal.mul(redeemPerc).div(PERCENT_DIVIDER);\r\n            TransferETHHelper.safeTransferETH(msg.sender, userAmount);\r\n            if (diffBal != userAmount) {\r\n                // transfer fees to JFeesCollector\r\n                feesAmount = diffBal.sub(userAmount);\r\n                TransferETHHelper.safeTransferETH(feesCollectorAddress, feesAmount);\r\n            }   \r\n        } else {\r\n            // calculate taToken amount via cToken price\r\n            oldBal = getTokenBalance(underTokenAddress);\r\n            require(redeemCErc20Tokens(underTokenAddress, normAmount, false) == 0, \"!cTokenAnswer\");\r\n            // uint256 compRetCode = IJCompoundHelper(jCompoundHelperAddress).redeemCErc20TokensHelper(cTokenAddress, normAmount, false);\r\n            // require(compRetCode == 0, \"!cTokenAnswer\");\r\n            diffBal = getTokenBalance(underTokenAddress);\r\n            userAmount = diffBal.mul(redeemPerc).div(PERCENT_DIVIDER);\r\n            SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(underTokenAddress), msg.sender, userAmount);\r\n            if (diffBal != userAmount) {\r\n                // transfer fees to JFeesCollector\r\n                feesAmount = diffBal.sub(userAmount);\r\n                SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(underTokenAddress), feesCollectorAddress, feesAmount);\r\n            }   \r\n        }\r\n\r\n        // claim and transfer rewards to msg.sender. Be sure to wait for this function to be completed! \r\n        bool rewClaimCompleted = IIncentivesController(incentivesControllerAddress).claimRewardsAllMarkets(msg.sender);\r\n\r\n        // decrease tokens after claiming rewards\r\n        if (rewClaimCompleted && _amount > 0)\r\n            decreaseTrancheBTokenFromStake(_trancheNum, _amount);\r\n\r\n        IJTrancheTokens(bTrancheAddress).burn(_amount);\r\n\r\n        lastActivity[msg.sender] = block.number;\r\n        emit TrancheBTokenRedemption(_trancheNum, msg.sender, 0, userAmount, feesAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev redeem every cToken amount and send values to fees collector\r\n     * @param _trancheNum tranche number\r\n     * @param _cTokenAmount cToken amount to send to compound protocol\r\n     */\r\n    function redeemCTokenAmount(uint256 _trancheNum, uint256 _cTokenAmount) external onlyAdmins nonReentrant {\r\n        uint256 oldBal;\r\n        uint256 diffBal;\r\n        address underTokenAddress = trancheAddresses[_trancheNum].buyerCoinAddress;\r\n        uint256 cTokenBal = getTokenBalance(trancheAddresses[_trancheNum].cTokenAddress); // needed for emergency\r\n        if (underTokenAddress == address(0)) {\r\n            oldBal = getEthBalance();\r\n            ethGateway.withdrawETH(_cTokenAmount, address(this), true, cTokenBal);\r\n            diffBal = getEthBalance().sub(oldBal);\r\n            TransferETHHelper.safeTransferETH(feesCollectorAddress, diffBal);\r\n        } else {\r\n            // calculate taToken amount via cToken price\r\n            oldBal = getTokenBalance(underTokenAddress);\r\n            require(redeemCErc20Tokens(underTokenAddress, _cTokenAmount, true) == 0, \"!cTokenAnswer\");\r\n            // address cToken = cTokenContracts[trancheAddresses[_trancheNum].buyerCoinAddress];\r\n            // uint256 compRetCode = IJCompoundHelper(jCompoundHelperAddress).redeemCErc20TokensHelper(cToken, _cTokenAmount, false);\r\n            // require(compRetCode == 0, \"!cTokenAnswer\");\r\n            diffBal = getTokenBalance(underTokenAddress);\r\n            SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(underTokenAddress), feesCollectorAddress, diffBal);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev get every token balance in this contract\r\n     * @param _tokenContract token contract address\r\n     */\r\n    function getTokenBalance(address _tokenContract) public view returns (uint256) {\r\n        return IERC20Upgradeable(_tokenContract).balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev get eth balance on this contract\r\n     */\r\n    function getEthBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    /**\r\n     * @dev transfer tokens in this contract to fees collector contract\r\n     * @param _tokenContract token contract address\r\n     * @param _amount token amount to be transferred \r\n     */\r\n    function transferTokenToFeesCollector(address _tokenContract, uint256 _amount) external onlyAdmins {\r\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(_tokenContract), feesCollectorAddress, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev transfer ethers in this contract to fees collector contract\r\n     * @param _amount ethers amount to be transferred \r\n     */\r\n    function withdrawEthToFeesCollector(uint256 _amount) external onlyAdmins {\r\n        TransferETHHelper.safeTransferETH(feesCollectorAddress, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev get total accrued Comp token from all market in comptroller\r\n     * @return comp amount accrued\r\n     */\r\n    function getTotalCompAccrued() public view onlyAdmins returns (uint256) {\r\n        return IComptrollerLensInterface(comptrollerAddress).compAccrued(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev claim total accrued Comp token from all market in comptroller and transfer the amount to a receiver address\r\n     * @param _receiver destination address\r\n     */\r\n    function claimTotalCompAccruedToReceiver(address _receiver) external onlyAdmins nonReentrant {\r\n        uint256 totAccruedAmount = getTotalCompAccrued();\r\n        if (totAccruedAmount > 0) {\r\n            IComptrollerLensInterface(comptrollerAddress).claimComp(address(this));\r\n            uint256 amount = IERC20Upgradeable(compTokenAddress).balanceOf(address(this));\r\n            SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(compTokenAddress), _receiver, amount);\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trancheNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taAmount\",\"type\":\"uint256\"}],\"name\":\"TrancheATokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trancheNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feesAmount\",\"type\":\"uint256\"}],\"name\":\"TrancheATokenRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trancheNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trancheA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trancheB\",\"type\":\"address\"}],\"name\":\"TrancheAddedToProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trancheNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tbAmount\",\"type\":\"uint256\"}],\"name\":\"TrancheBTokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trancheNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feesAmount\",\"type\":\"uint256\"}],\"name\":\"TrancheBTokenRedemption\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"PERCENT_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Contract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_nameA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbolA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_nameB\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbolB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_fixedRpb\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_cTokenDec\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_underlyingDec\",\"type\":\"uint8\"}],\"name\":\"addTrancheToProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminToolsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyTrancheAToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyTrancheBToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cEthToken\",\"outputs\":[{\"internalType\":\"contract ICEth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cTokenContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"}],\"name\":\"calcRPBFromPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimTotalCompAccruedToReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptrollerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethGateway\",\"outputs\":[{\"internalType\":\"contract IETHGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesCollectorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"}],\"name\":\"getCompoundSupplyRPB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"getSingleTrancheUserSingleStakeDetailsTrA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"getSingleTrancheUserSingleStakeDetailsTrB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"}],\"name\":\"getSingleTrancheUserStakeCounterTrA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"}],\"name\":\"getSingleTrancheUserStakeCounterTrB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCompAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"}],\"name\":\"getTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"}],\"name\":\"getTrAValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"trANormValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"}],\"name\":\"getTrBValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"}],\"name\":\"getTrancheACurrentRPB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"}],\"name\":\"getTrancheAExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"getTrancheBExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tbPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentivesControllerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminTools\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feesCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tranchesDepl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_compTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_comptrollAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Contract\",\"type\":\"address\"}],\"name\":\"isCTokenAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jCompoundHelperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastActivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cTokenAmount\",\"type\":\"uint256\"}],\"name\":\"redeemCTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemTimeout\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemTrancheAToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemTrancheBToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cEtherContract\",\"type\":\"address\"}],\"name\":\"setCEtherContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cErc20Contract\",\"type\":\"address\"}],\"name\":\"setCTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trNum\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_redemPerc\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"_redemTimeout\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_blocksPerYear\",\"type\":\"uint256\"}],\"name\":\"setConstantsValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_cTokenDec\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_underlyingDec\",\"type\":\"uint8\"}],\"name\":\"setDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethGateway\",\"type\":\"address\"}],\"name\":\"setETHGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_helper\",\"type\":\"address\"}],\"name\":\"setJCompoundHelperAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminTools\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feesCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tranchesDepl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_compTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_comptrollAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"setNewEnvironment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stkNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setTrAStakingDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stkNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setTrBStakingDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newTrAPercentage\",\"type\":\"uint256\"}],\"name\":\"setTrancheAFixedPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setTrancheDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incentivesController\",\"type\":\"address\"}],\"name\":\"setincentivesControllerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeCounterTrA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeCounterTrB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingDetailsTrancheA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingDetailsTrancheB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trancheAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyerCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ATrancheAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"BTrancheAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trancheDepositEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tranchePairsCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trancheParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheAFixedPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trancheALastActionBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"storedTrancheAPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trancheACurrentRPB\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"redemptionPercentage\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"cTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"underlyingDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tranchesDeployerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTokenToFeesCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEthToFeesCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"JCompound","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d2a10e51ee99a7d1b5170d32b2e16676d8ee5bc9bfa7adaf71c8fa440ad2baf7"}]}