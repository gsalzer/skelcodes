{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//                                                                                                                                                         //\r\n//                                                                                                                                                         //\r\n//       .;dkkkkkkkkkkkkkkkkkkd'      .:xkkkkkkkkd,           .:dk0XXXXXXXK0xdl,.    .lxkkkkkkkkkkkkkkkkkk:.,okkkkkkko.    .cxkkkkkkxc.      ;dkkkkkko.    //\r\n//      ;xNMMMMMMMMMMMMMMMMMMMX:    .:kNWMMMMMMMMWx.        .l0NWWWWWMMMMMMMMMWNO;..lKWMMMMMMMMMMMMMMMMMMMKkKWMMMMMMMK,  .c0WMMMMMMMMX:   .;xXWMMMMMNo.    //\r\n//    .,lddddddddddddddddxKMMMK;   .,lddddddx0WMMMX;      .;llc::;;::cox0XWMMMMMWXdcoddddddddddddddddONMW0ddddddxXMMMK, .:odddddONMMMMO' .,lddddd0WWd.     //\r\n//    ..                 .dWWKl.   .         :XMMMWx.    ...            .,oKWMMMMWx.                 ,KMNc      .kMMM0, ..      .xWMMMWx'.      'kNk.      //\r\n//    ..                 .dKo'    ..         .xWMMMK;  ..       .'..       ,OWWMMWx.                 ,Okc'      .kMMMK,  ..      ,0MMMMXl.     .dNO'       //\r\n//    ..      .:ooo;......,'      .           :XMMMWd. .      .l0XXOc.      ;xKMWNo.      ,looc'......'...      .kMMMK,   ..      cXMMM0,     .oNK;        //\r\n//    ..      '0MMMk.            ..           .kWMMMK,.'      ;KMMMWNo.     .;kNkc,.     .dWMMK:        ..      .kMMMK,    ..     .dWMXc      cXK:         //\r\n//    ..      '0MMMXkxxxxxxxxd'  .     .:.     cXMMMWd,'      '0MMMMM0l;;;;;;:c;. ..     .dWMMW0xxxxxxxxx;      .kMMMK,     ..     'ONd.     :KXc          //\r\n//    ..      '0MMMMMMMMMMMMMNc ..     :O:     .kMMMMK:.       'd0NWMWWWWWWWNXOl'...     .dWMMMMMMMMMMMMWl      .kMMMK,      .      :d'     ;0No.          //\r\n//    ..      .lkkkkkkkkkKWMMNc .     .dNd.     cNMMMWo..        .':dOXWMMMMMMMWXk:.      :xkkkkkkkk0NMMWl      .kMMMK,       .      .     'ONd.           //\r\n//    ..                .oNMXd...     '0M0'     .kMMMM0, ..           .;o0NMMMMMMWx.                ,0MN0:      .kMMMK,       ..          .kW0'            //\r\n//    ..                 cKk,  .      lNMNl      cNMMMNo  .',..          .;xXWMMMWx.                'O0c'.      .kMMMK,        ..        .xWMO.            //\r\n//    ..      .,ccc,.....,,.  ..     .kMMMk.     .OMMMW0;'d0XX0xc,.         :d0MMWx.      ':cc:'....';. ..      .kMMMK,         ..      .oNMMO.            //\r\n//    ..      '0MMMk.         ..     ,kKKKk'      lNMMMN0KWWWMMMWNKl.         cXMWx.     .dWMMX:        ..      .kMMMK,         ..      .OMMMO.            //\r\n//    ..      '0MMMk'..........       .....       'OMMKo:::::cxNMMMKl'.       .OMWx.     .dWMMXc..........      .kMMMK:.........,'      .OMMMO.            //\r\n//    ..      '0MMMNXKKKKKKKKd.                    lNM0'      ;XMMMWN0c       .OMWd.     .dWMMWXKKKKKKKK0c      .kMMMWXKKKKKKKKK0:      .OMMMO.            //\r\n//    ..      'OWWWWWWWWWWMMNc      'llc'   .      '0MNc      .kWMMMMX:       ,KXx:.     .oNWWWWWWWWWWMMWl      .xWWWWWWWWWWWMMMN:      .OMMMO.            //\r\n//    ..       ,:::::::::cOWO.     .xWWO'   .       oNMO'      .lkOOx;.     .'cd,...      .::::::::::dXMWl       '::::::::::xWMMX:      .OMMWx.            //\r\n//    ..                  dNl      ,0Xd.    ..      ,0MNo.        .        ..'.   ..                 ,0WK:                  :NWOo,      .OWKo.             //\r\n//    .'                 .oO,     .co,       ..     .oOc....             ...      ..                 ,xo,..                 ckl..'.     'dd'               //\r\n//     .............................         ..........       .   ..   .          .....................  .....................   .........                 //\r\n//                                                                                                                                                         //\r\n//                                                                                                                                                         //\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n * \r\n * This ERC721 Has been adjusted from OpenZepplins to have a totalSupply method. It also is set up to better handle \r\n * batch transactions. Namely it does not update _balances on a call to {_mint} and expects the minting method to do so. \r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string internal _name;\r\n\r\n    // Token symbol\r\n    string internal _symbol;\r\n\r\n    // Tracking total minted\r\n    uint256 internal _totalMinted;\r\n\r\n    // Tracking total burned\r\n    uint256 internal _totalBurned;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) internal _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) internal _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total current supply of the contract. \r\n     *\r\n     * WARNING - Underlying variables do NOT get automatically updated on mints\r\n     * so that we can save gas on transactions that mint multiple tokens.\r\n     *\r\n     */\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalMinted - _totalBurned;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total ever minted from this contract. \r\n     *\r\n     * WARNING - Underlying variable do NOT get automatically updated on mints\r\n     * so that we can save gas on transactions that mint multiple tokens.\r\n     *\r\n     */\r\n    function totalMinted() public view virtual returns (uint256) {\r\n        return _totalMinted;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`. \r\n     *\r\n     * WARNING - this method does not update totalSupply or _balances, please update that externally. Doing so\r\n     * will allow us to save gas on transactions that mint more than one NFT\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     * WARNING: This method does not update totalSupply, please update that externally. Doing so\r\n     * will allow us to save gas on transactions\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     * WARNING: This method does not update totalSupply or _balances, please update that externally. Doing so\r\n     * will allow us to save gas on transactions that mint more than one NFT\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        _totalBurned += 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n/**\r\n * @dev Interface for the NFT Royalty Standard\r\n */\r\ninterface IERC2981 is IERC165 {\r\n    /** \r\n     * ERC165 bytes to add to interface array - set in parent contract\r\n     * implementing this standard\r\n     *\r\n     * bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\r\n     * bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\r\n     * _registerInterface(_INTERFACE_ID_ERC2981);\r\n     */\r\n\r\n    /**\r\n     * @notice Called with the sale price to determine how much royalty\r\n     *          is owed and to whom.\r\n     * @param _tokenId - the NFT asset queried for royalty information\r\n     * @param _salePrice - the sale price of the NFT asset specified by _tokenId\r\n     * @return receiver - address of who should be sent the royalty payment\r\n     * @return royaltyAmount - the royalty payment amount for _salePrice\r\n     */\r\n    function royaltyInfo(\r\n        uint256 _tokenId,\r\n        uint256 _salePrice\r\n    ) external view returns (\r\n        address receiver,\r\n        uint256 royaltyAmount\r\n    );\r\n}\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return tryRecover(hash, r, vs);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n            v := add(shr(255, vs), 27)\r\n        }\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n/**\r\n * @dev External interface of the EaselyPayout contract\r\n */\r\ninterface IEaselyPayout {\r\n    /**\r\n     * @dev Takes in a payable amount and splits it among the given royalties. \r\n     * Also takes a cut of the payable amount depending on the sender and the primaryPayout address.\r\n     * Ensures that this method never splits over 100% of the payin amount.\r\n     */\r\n    function splitPayable(address primaryPayout, address[] memory royalties, uint256[] memory bps) external payable;\r\n}\r\n\r\n/** \r\n * @dev Extension of the ERC721Enumerable contract that integrates a marketplace so that simple lazy-sales\r\n * do not have to be done on another contract. This saves gas fees on secondary sales because\r\n * buyers will not have to pay a gas fee to setApprovalForAll for another marketplace contract after buying.\r\n *\r\n * Easely will help power the lazy-selling as well as lazy minting that take place on \r\n * directly on the collection, which is why we take a cut of these transactions. Our cut can \r\n * be publically seen in the connected EaselyPayout contract and cannot exceed 5%.\r\n * \r\n * Owners also set an alternate signer which they can change at any time. This alternate signer helps enable\r\n * sales for large batches of addresses without needing to manually sign hundreds or thousands of hashes.\r\n */\r\nabstract contract ERC721Marketplace is ERC721, Ownable {\r\n    using ECDSA for bytes32;\r\n    using Strings for uint256;\r\n\r\n    /* see {IEaselyPayout} for more */\r\n    address public constant PAYOUT_CONTRACT_ADDRESS = 0x68f5C1e24677Ac4ae845Dde07504EAaD98f82572;\r\n    uint256 public constant TIME_PER_DECREMENT = 300;\r\n\r\n    uint256 public constant MAX_ROYALTIES_BPS = 9500;\r\n    /* Optional basis points for the owner for secondary sales of this collection */\r\n    uint256 public constant MAX_SECONDARY_BPS = 1000;\r\n    \r\n    /* Let's the owner enable another address to lazy mint */\r\n    address public alternateSignerAddress;\r\n    /* Optional basis points for the owner for secondary sales of this collection */\r\n    uint256 public ownerRoyaltyBPS;\r\n    /* Optional addresses to distribute revenue of primary sales of this collection */\r\n    address[] public revenueShare;\r\n    /* Optional basis points for revenue share for primary sales of this collection */\r\n    uint256[] public revenueShareBPS;\r\n\r\n    /* Mapping to the active version for all signed transactions */\r\n    mapping(address => uint256) internal _addressToActiveVersion;\r\n    /* Cancelled or finalized sales by hash to determine buyabliity */\r\n    mapping(bytes32 => bool) internal _cancelledOrFinalizedSales;\r\n\r\n    // Events related to lazy selling\r\n    event SaleCancelled(address indexed seller, bytes32 hash);\r\n    event SaleCompleted(uint256 indexed tokenId, uint256 price, address indexed seller, address indexed buyer, bytes32 hash);\r\n\r\n    // Miscellaneous events\r\n    event VersionChanged(address indexed seller, uint256 version);\r\n    event AltSignerChanged(address newSigner);\r\n    event BalanceWithdrawn(uint256 balance);\r\n    event RoyaltyUpdated(uint256 bps);\r\n    event RevenueShareUpdated(address address1, address address2, uint256 bps1, uint256 bps2);\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(Ownable).interfaceId\r\n            || interfaceId == type(IERC2981).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev see {IERC2981-supportsInterface}\r\n     */\r\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view returns (address receiver, uint256 royaltyAmount) {\r\n        uint256 royalty = _salePrice * ownerRoyaltyBPS / 10000;\r\n        return (owner(), royalty);\r\n    }\r\n\r\n    /** \r\n     * @dev See {_currentPrice}\r\n     */\r\n    function getCurrentPrice(uint256[4] memory pricesAndTimestamps) external view returns (uint256) {\r\n        return _currentPrice(pricesAndTimestamps);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current activeVersion of an address both used to create signatures\r\n     * and to verify signatures of {buyToken} and {buyNewToken}\r\n     */\r\n    function getActiveVersion(address address_) external view returns (uint256) {\r\n        return _addressToActiveVersion[address_];\r\n    }\r\n\r\n    /**\r\n     * This function, while callable by anybody will always ONLY withdraw the\r\n     * contract's balance to:\r\n     *\r\n     * the owner's account\r\n     * the addresses the owner has set up for revenue share\r\n     * the easely payout contract cut - capped at 5% but can be lower for some users\r\n     *\r\n     * This is callable by anybody so that Easely can set up automatic payouts\r\n     * after a contract has reached a certain minimum to save creators the gas fees\r\n     * involved in withdrawing balances.\r\n     */\r\n    function withdrawBalance(uint256 withdrawAmount) external {\r\n        require(withdrawAmount <= address(this).balance);\r\n        IEaselyPayout payoutContract = IEaselyPayout(PAYOUT_CONTRACT_ADDRESS);\r\n        payoutContract.splitPayable{ value: withdrawAmount }(owner(), revenueShare, revenueShareBPS);\r\n        emit BalanceWithdrawn(withdrawAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to change who the alternate signer is \r\n     */\r\n    function setAltSigner(address alt) external onlyOwner {\r\n        alternateSignerAddress = alt;\r\n        emit AltSignerChanged(alt);\r\n    }\r\n\r\n    /**\r\n     * @dev see {_setRoyalties}\r\n     */\r\n    function setRevenueShare(address[2] memory newAddresses, uint256[2] memory newBPS) external onlyOwner {\r\n        _setRevenueShare(newAddresses, newBPS);\r\n        emit RevenueShareUpdated(newAddresses[0], newAddresses[1], newBPS[0], newBPS[1]);\r\n    }\r\n\r\n    /**\r\n     * @dev see {_setSecondary}\r\n     */\r\n    function setRoyaltiesBPS(uint256 newBPS) external onlyOwner() {\r\n        _setRoyaltiesBPS(newBPS);\r\n        emit RoyaltyUpdated(newBPS);\r\n    }\r\n\r\n    /**\r\n     * @dev Usable by any user to update the version that they want their signatures to check. This is helpful if\r\n     * an address wants to mass invalidate their signatures without having to call cancelSale on each one.\r\n     */\r\n    function updateVersion(uint256 version) external {\r\n        _addressToActiveVersion[_msgSender()] = version;\r\n        emit VersionChanged(_msgSender(), version);\r\n    }\r\n\r\n    /**\r\n     * @dev Usable by the owner of any token initiate a sale for their token. This does not\r\n     * lock the tokenId and the owner can freely trade their token, but doing so will \r\n     * invalidate the ability for others to buy.\r\n     */\r\n    function hashToSignToSellToken(\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 tokenId,\r\n        uint256[4] memory pricesAndTimestamps\r\n    ) external view returns (bytes32) {\r\n        require(_msgSender() == ownerOf(tokenId), \"Not the owner of the token\");\r\n        return _hashForSale(_msgSender(), version, nonce, tokenId, pricesAndTimestamps);\r\n    }\r\n\r\n    /**\r\n     * @dev With a hash signed by the method {hashToSignToSellToken} any user sending enough value can buy\r\n     * the token from the seller. Tokens not owned by the contract owner are all considered secondary sales and \r\n     * will give a cut to the owner of the contract based on the secondaryOwnerBPS.\r\n     */\r\n    function buyToken(\r\n        address seller,\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 tokenId,\r\n        uint256[4] memory pricesAndTimestamps,\r\n        bytes memory signature\r\n    ) external payable {\r\n        uint256 currentPrice = _currentPrice(pricesAndTimestamps);\r\n\r\n        require(_addressToActiveVersion[seller] == version, \"Incorrect signature version\");\r\n        require(msg.value >= currentPrice, \"Not enough ETH to buy\");\r\n\r\n        _markHashSold(seller, version, nonce, tokenId, pricesAndTimestamps, currentPrice, signature);\r\n        _transfer(seller, _msgSender(), tokenId);\r\n\r\n        if (seller != owner()) {\r\n            IEaselyPayout(PAYOUT_CONTRACT_ADDRESS).splitPayable{ value: currentPrice }(seller, _ownerRoyalties(), _ownerBPS());\r\n        }\r\n        payable(_msgSender()).transfer(msg.value - currentPrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Usable to cancel hashes generated from {hashToSignToSellToken}\r\n     */\r\n    function cancelSale(\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 tokenId,\r\n        uint256[4] memory pricesAndTimestamps\r\n    ) external {\r\n        bytes32 hash = _hashToCheckForSale(_msgSender(), version, nonce, tokenId, pricesAndTimestamps);\r\n        _cancelledOrFinalizedSales[hash] = true;\r\n        emit SaleCancelled(_msgSender(), hash);\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return \"ipfs://\";\r\n    }\r\n\r\n    /**\r\n     * @dev helper method get ownerRoyalties into an array form\r\n     */\r\n    function _ownerRoyalties() internal view returns (address[] memory) {\r\n        address[] memory ownerRoyalties = new address[](1);\r\n        ownerRoyalties[0] = owner();\r\n        return ownerRoyalties;\r\n    }\r\n\r\n    /**\r\n     * @dev helper method get secondary BPS into array form\r\n     */\r\n    function _ownerBPS() internal view returns (uint256[] memory) {\r\n        uint256[] memory ownerBPS = new uint256[](1);\r\n        ownerBPS[0] = ownerRoyaltyBPS;\r\n        return ownerBPS;\r\n    }\r\n\r\n    /**\r\n     * @dev Current price for a sale which is calculated for the case of a descending sale. So\r\n     * the ending price must be less than the starting price and the timestamp is active.\r\n     * Standard single fare sales will have a matching starting and ending price.\r\n     */\r\n    function _currentPrice(uint256[4] memory pricesAndTimestamps) internal view returns (uint256) {\r\n        uint256 startingPrice = pricesAndTimestamps[0];\r\n        uint256 endingPrice = pricesAndTimestamps[1];\r\n        uint256 startingTimestamp = pricesAndTimestamps[2];\r\n        uint256 endingTimestamp = pricesAndTimestamps[3];\r\n\r\n        uint256 currTime = block.timestamp;\r\n        require(currTime >= startingTimestamp, \"Has not started yet\");\r\n        require(startingTimestamp < endingTimestamp, \"Must end after it starts\");\r\n        require(startingPrice >= endingPrice, \"Ending price cannot be bigger\");\r\n\r\n        if (startingPrice == endingPrice || currTime > endingTimestamp) {\r\n            return endingPrice;\r\n        }\r\n\r\n        uint256 diff = startingPrice - endingPrice;\r\n        uint256 decrements = (currTime - startingTimestamp) / TIME_PER_DECREMENT;\r\n        if (decrements == 0) {\r\n            return startingPrice;\r\n        }\r\n\r\n        // decrements will equal 0 before totalDecrements does so we will not divide by 0\r\n        uint256 totalDecrements = (endingTimestamp - startingTimestamp) / TIME_PER_DECREMENT;\r\n\r\n        return startingPrice - diff / totalDecrements * decrements;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets secondary BPS amount\r\n     */\r\n    function _setRoyaltiesBPS(uint256 newBPS) internal {\r\n        require(ownerRoyaltyBPS <= MAX_SECONDARY_BPS, \"Cannot take more than 10% of secondaries\");\r\n        ownerRoyaltyBPS = newBPS;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets primary revenue share\r\n     */\r\n    function _setRevenueShare(address[2] memory newAddresses, uint256[2] memory newBPS) internal {\r\n        require(newBPS[0] + newBPS[1] <= MAX_ROYALTIES_BPS, \"Revenue share too high\");\r\n        revenueShare = newAddresses;\r\n        revenueShareBPS = newBPS;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if an address is either the owner, or the approved alternate signer.\r\n     */\r\n    function _checkValidSigner(address signer) internal view {\r\n        require(signer == owner() || signer == alternateSignerAddress, \"Not valid signer.\");\r\n    }\r\n\r\n    /**\r\n     * @dev First checks if a sale is valid by checking that the hash has not been cancelled or already completed\r\n     * and that the correct address has given the signature. If both checks pass we mark the hash as complete and\r\n     * emit an event.\r\n     */\r\n    function _markHashSold(\r\n        address owner,\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 tokenId,\r\n        uint256[4] memory pricesAndTimestamps,\r\n        uint256 salePrice,\r\n        bytes memory signature\r\n    ) internal {\r\n        bytes32 hash = _hashToCheckForSale(owner, version, nonce, tokenId, pricesAndTimestamps);\r\n        require(!_cancelledOrFinalizedSales[hash], \"Sale no longer active\");\r\n        require(hash.recover(signature) == owner, \"Not signed by current token owner\");\r\n        _cancelledOrFinalizedSales[hash] = true;\r\n\r\n        emit SaleCompleted(tokenId, salePrice, owner, _msgSender(), hash);\r\n    }\r\n\r\n    /**\r\n     * @dev Hash an order, returning the hash that a client must sign, including the standard message prefix\r\n     * @return Hash of message prefix and order hash per Ethereum format\r\n     */\r\n    function _hashToCheckForSale(\r\n        address owner,\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 tokenId,\r\n        uint256[4] memory pricesAndTimestamps\r\n    ) internal view returns (bytes32) {\r\n        return ECDSA.toEthSignedMessageHash(_hashForSale(owner, version, nonce, tokenId, pricesAndTimestamps));\r\n    }\r\n\r\n    /**\r\n     * @dev Hash an order, returning the hash that a client must sign, including the standard message prefix\r\n     * @return Hash of message prefix and order hash per Ethereum format\r\n     */\r\n    function _hashForSale(\r\n        address owner,\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 tokenId,\r\n        uint256[4] memory pricesAndTimestamps\r\n    ) internal view returns (bytes32) {\r\n        return keccak256(abi.encode(address(this), block.chainid, owner, version, nonce, tokenId, pricesAndTimestamps));\r\n    }\r\n}\r\n\r\n/**\r\n * @dev This implements a lazy-minted, randomized collection of ERC721Marketplace.\r\n * It requires that the creator knows the total number of NFTs they want and has an IPFS\r\n * hash that is a directory with all the tokenIds from 0 to the #NFTs - 1.\r\n *\r\n * It has two main methods to lazy-mint, one allows the owner or alternate signer to approve single use signatures\r\n * for specific wallet addresses and the other allows a general mint signature that anyone can use.\r\n *\r\n * Minting from this collection is always random, this can be done either with a reveal\r\n * mechanism that has a random offset, or on-chain randomness if the collection is already revealed. \r\n */\r\ncontract ERC721RandomizedCollection is ERC721Marketplace {  \r\n    using ECDSA for bytes32;  \r\n    using Strings for uint256;\r\n\r\n    bool public burnable;\r\n    bool public isRevealed = false;\r\n    bool private hasInit = false;\r\n\r\n    uint256 public constant MAX_SUPPLY_LIMIT = 10 ** 9;\r\n    uint256 public maxSupply;\r\n    // Limits how much any single transaction can be\r\n    uint256 public transactionMax;\r\n    // Limits how much any single wallet can mint on a collection.\r\n    uint256 public maxMint;\r\n    \r\n    mapping(address => uint256) public mintCount;\r\n\r\n    // Used to shuffle tokenURI upon reveal\r\n    uint256 public offset;\r\n    // Used when switching from incremental tokenId to \r\n    uint256 private randOffset;\r\n\r\n    // Mapping to enable constant time onchain randomness\r\n    uint256[MAX_SUPPLY_LIMIT] private indices;\r\n    string private ipfsHash;\r\n\r\n    // Randomized Collection Events\r\n    event Minted(address indexed buyer, uint256 amount, uint256 unitPrice, bytes32 hash);\r\n    event IpfsRevealed(string ipfsHash, bool locked);\r\n\r\n    /**\r\n     * @dev Constructor function\r\n     */\r\n    constructor(\r\n        bool[2] memory bools, address[3] memory addresses, uint256[6] memory uints, string[3] memory strings\r\n    ) ERC721(strings[0], strings[1]) {\r\n        addresses[0] = _msgSender();\r\n        _init(bools, addresses, uints, strings);\r\n    }\r\n\r\n    function init(\r\n        bool[2] memory bools, \r\n        address[3] memory addresses, \r\n        uint256[6] memory uints, \r\n        string[3] memory strings\r\n    ) external {\r\n        _init(bools, addresses, uints, strings);\r\n    }\r\n\r\n    function _init(\r\n        bool[2] memory bools, \r\n        address[3] memory addresses, \r\n        uint256[6] memory uints, \r\n        string[3] memory strings\r\n    ) internal {\r\n        require(!hasInit, \"Already has be initiated\");\r\n        hasInit = true;\r\n\r\n        burnable = bools[0];\r\n        isRevealed = bools[1];\r\n\r\n        _owner = msg.sender;\r\n        address[2] memory revenueShare = [addresses[0], addresses[1]];\r\n        alternateSignerAddress = addresses[2];\r\n                \r\n        _setRoyaltiesBPS(uints[0]);\r\n        _setRevenueShare(revenueShare, [uints[1], uints[2]]);\r\n        maxSupply = uints[3];\r\n        require(maxSupply < MAX_SUPPLY_LIMIT, \"Collection is too big\");\r\n        \r\n        // Do not allow more than 20 mints a transaction so users cannot exceed gas limit\r\n        if (uints[4] == 0 || uints[4] >= 20){\r\n            transactionMax = 20;\r\n        } else {\r\n            transactionMax = uints[4];\r\n        }\r\n        maxMint = uints[5];\r\n\r\n        _name = strings[0];\r\n        _symbol = strings[1];\r\n        ipfsHash = strings[2];\r\n        if (isRevealed) {\r\n            emit IpfsRevealed(ipfsHash, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev If this collection was created with burnable on, owners of tokens\r\n     * can use this method to burn their tokens. Easely will keep track of \r\n     * burns in case creators want to reward users for burning tokens.\r\n     */\r\n    function burn(uint256 tokenId) external {\r\n        require(burnable, \"Tokens from this collection are not burnable\");\r\n        require(ownerOf(tokenId) == _msgSender(), \"Cannot burn a token you do not own\");\r\n\r\n        _burn(tokenId);\r\n    }\r\n    \r\n    /**\r\n     * @dev Method used if the creator wants to keep their collection hidden until\r\n     * a later release date. On reveal, a creator can decide if they want to \r\n     * lock the unminted tokens or enable them for on-chain randomness minting.\r\n     * \r\n     * IMPORTANT - this function can only be called ONCE, if a wrong IPFS hash\r\n     * is submitted by the owner, it cannot ever be switched to a different one.\r\n     */\r\n    function lockTokenURI(string calldata revealIPFSHash, bool lockOnReveal) external onlyOwner {\r\n        require(!isRevealed, \"The token URI has already been set\");\r\n        offset = _random(maxSupply);\r\n        ipfsHash = revealIPFSHash;\r\n        isRevealed = true;\r\n\r\n        if (!lockOnReveal) {\r\n            // so we know what index to start generating random numbers from\r\n            randOffset = _totalMinted;\r\n        } else {\r\n            // This will lock the unminted tokens at reveal time\r\n            maxSupply = _totalMinted;\r\n        }\r\n\r\n        emit IpfsRevealed(revealIPFSHash, lockOnReveal);\r\n    }\r\n\r\n    /**\r\n     * @dev tokenURI of a tokenId, will change to include the tokeId and an offset in\r\n     * the URI once the collection has been revealed.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        if (!isRevealed) {\r\n            return string(abi.encodePacked(_baseURI(), ipfsHash));\r\n        }\r\n\r\n        require(_exists(tokenId), \"URI query for nonexistent token\");\r\n\r\n        uint256 offsetId = (tokenId + offset) % maxSupply;\r\n        return string(abi.encodePacked(_baseURI(), ipfsHash, \"/\", offsetId.toString()));\r\n    }\r\n\r\n    /**\r\n     * @dev Hash that the owner or approved alternate signer then sign that the approved buyer\r\n     * can use in order to call the {mintAllow} method.\r\n     */\r\n    function hashToSignForAllowList(\r\n        address allowedAddress,\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 price,\r\n        uint256 amount\r\n    ) external view returns (bytes32) {\r\n        _checkValidSigner(_msgSender());\r\n        return _hashForAllowList(allowedAddress, version, nonce, price, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev A way to invalidate a signature so the given params cannot be used in the {mintAllow} method.\r\n     */\r\n    function cancelAllowList(\r\n        address allowedAddress,\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 price,\r\n        uint256 amount\r\n    ) external {\r\n        _checkValidSigner(_msgSender());\r\n        bytes32 hash = _hashToCheckForAllowList(allowedAddress, version, nonce, price, amount);\r\n        _cancelledOrFinalizedSales[hash] = true;\r\n        emit SaleCancelled(_msgSender(), hash);\r\n    }\r\n    \r\n    /**\r\n     * @dev Allows a user with an approved signature to mint at a price and quantity specified by the\r\n     * contract. A user is still limited by totalSupply, transactionMax, and mintMax if populated.\r\n     */\r\n    function mintAllow(\r\n        address allowedAddress,\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 price,\r\n        uint256 amount,\r\n        uint256 buyAmount,\r\n        bytes memory signature\r\n    ) external payable {\r\n        require(_totalMinted + buyAmount <= maxSupply, \"Over token supply limit\");\r\n        require(buyAmount <= amount, \"Over signature amount\");\r\n        require(buyAmount <= transactionMax, \"Over transaction limit\");\r\n        require(version == _addressToActiveVersion[owner()], \"This presale version is disabled\");\r\n        require(allowedAddress == _msgSender(), \"Invalid sender\");\r\n\r\n        uint256 totalPrice = price * buyAmount;\r\n        uint256 msgValue = msg.value;\r\n        require(msgValue >= totalPrice, \"Msg value too small\");\r\n\r\n        bytes32 hash = _hashToCheckForAllowList(allowedAddress, version, nonce, price, amount);\r\n        require(!_cancelledOrFinalizedSales[hash], \"Signature no longer active\");\r\n        address signer = hash.recover(signature);\r\n        _checkValidSigner(signer);\r\n        _cancelledOrFinalizedSales[hash] = true;\r\n\r\n        _mintRandom(_msgSender(), buyAmount);\r\n        emit Minted(_msgSender(), buyAmount, price, hash);\r\n        payable(_msgSender()).transfer(msgValue - totalPrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Hash that the owner or approved alternate signer then sign that buyers use \r\n     * in order to call the {mint} method.\r\n     */\r\n    function hashToSignForMint(uint256 version, uint256 amount, uint256[4] memory pricesAndTimestamps) external view returns (bytes32) {\r\n        _checkValidSigner(_msgSender());\r\n        require(amount <= transactionMax, \"Over transaction limit\");\r\n\r\n        return _hashForMint(version, amount, pricesAndTimestamps);\r\n    }\r\n\r\n    /**\r\n     * @dev A way to invalidate a signature so the given params cannot be used in the {mint} method.\r\n     */\r\n    function cancelMint(uint256 version, uint256 amount, uint256[4] memory pricesAndTimestamps) external {\r\n        _checkValidSigner(_msgSender());\r\n        bytes32 hash = _hashToCheckForMint(version, amount, pricesAndTimestamps);\r\n        _cancelledOrFinalizedSales[hash] = true;\r\n        emit SaleCancelled(_msgSender(), hash);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows anyone to buy an amount of tokens at a price which matches\r\n     * the signature that the owner or alternate signer has approved\r\n     */\r\n    function mint(\r\n        uint256 version,\r\n        uint256 amount,\r\n        uint256[4] memory pricesAndTimestamps, \r\n        bytes memory signature\r\n    ) external payable {\r\n        require(_totalMinted + amount <= maxSupply, \"Over token supply limit\");\r\n        require(amount <= transactionMax, \"Over transaction limit\");\r\n        require(version == _addressToActiveVersion[owner()], \"Invalid version\");\r\n\r\n        uint256 unitPrice = _currentPrice(pricesAndTimestamps);\r\n        uint256 totalPrice = amount * unitPrice;\r\n        uint256 msgValue = msg.value;\r\n        require(msgValue >= totalPrice, \"Msg value too small\");\r\n\r\n        bytes32 hash = _hashToCheckForMint(version, amount, pricesAndTimestamps);\r\n        require(!_cancelledOrFinalizedSales[hash], \"Signature no longer active\");\r\n        address signer = hash.recover(signature);\r\n        _checkValidSigner(signer);\r\n\r\n        _mintRandom(_msgSender(), amount);\r\n        emit Minted(_msgSender(), amount, unitPrice, hash);\r\n\r\n        payable(_msgSender()).transfer(msgValue - totalPrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Hash an order that we need to check against the signature to see who the signer is.\r\n     * see {_hashForAllowList} to see the hash that needs to be signed.\r\n     */\r\n    function _hashToCheckForAllowList(\r\n        address allowedAddress,\r\n        uint256 nonce,\r\n        uint256 version,\r\n        uint256 price,\r\n        uint256 amount\r\n    ) internal view returns (bytes32) {\r\n        return ECDSA.toEthSignedMessageHash(_hashForAllowList(allowedAddress, nonce, version, price, amount));\r\n    }\r\n\r\n    /**\r\n     * @dev Hash that the owner or alternate wallet must sign to enable a {mintAllow} for a user\r\n     * @return Hash of message prefix and order hash per Ethereum format\r\n     */\r\n    function _hashForAllowList(        \r\n        address allowedAddress,\r\n        uint256 nonce,\r\n        uint256 version,\r\n        uint256 price,\r\n        uint256 amount\r\n    ) internal view returns (bytes32) {\r\n        return keccak256(abi.encode(address(this), block.chainid, owner(), allowedAddress, nonce, version, price, amount));\r\n    }\r\n\r\n    /**\r\n     * @dev Hash an order that we need to check against the signature to see who the signer is.\r\n    * see {_hashForMint} to see the hash that needs to be signed.\r\n     */\r\n    function _hashToCheckForMint(\r\n        uint256 version,\r\n        uint256 amount,\r\n        uint256[4] memory pricesAndTimestamps\r\n    ) internal view returns (bytes32) {\r\n        return ECDSA.toEthSignedMessageHash(_hashForMint(version, amount, pricesAndTimestamps));\r\n    }\r\n\r\n    /**\r\n     * @dev Hash that the owner or alternate wallet must sign to enable {mint} for all users \r\n     */\r\n    function _hashForMint(        \r\n        uint256 version,\r\n        uint256 amount,\r\n        uint256[4] memory pricesAndTimestamps\r\n    ) internal view returns (bytes32) {\r\n        return keccak256(abi.encode(address(this), block.chainid, owner(), amount, pricesAndTimestamps, version));\r\n    }\r\n\r\n    /// @notice Generates a pseudo random index of our tokens that has not been used so far\r\n    function _mintRandomIndex(address buyer, uint256 amount) internal {\r\n        //  number of tokens left to create\r\n        uint256 supplyLeft = maxSupply - _totalMinted;\r\n\r\n        for (uint256 i = 0; i < amount; i++) {\r\n            // generate a random index\r\n            uint256 index = _random(supplyLeft);\r\n            uint256 tokenAtPlace = indices[index];\r\n\r\n            uint256 tokenId;\r\n            // if we havent stored a replacement token...\r\n            if (tokenAtPlace == 0) {\r\n                //... we just return the current index\r\n                tokenId = index;\r\n            } else {\r\n                // else we take the replace we stored with logic below\r\n                tokenId = tokenAtPlace;\r\n            }\r\n\r\n            // get the highest token id we havent handed out\r\n            uint256 lastTokenAvailable = indices[supplyLeft - 1];\r\n            // we need to store a replacement token for the next time we roll the same index\r\n            // if the last token is still unused...\r\n            if (lastTokenAvailable == 0) {\r\n                // ... we store the last token as index\r\n                indices[index] = supplyLeft - 1;\r\n            } else {\r\n                // ... we store the token that was stored for the last token\r\n                indices[index] = lastTokenAvailable;\r\n            }\r\n\r\n            _safeMint(buyer, tokenId + randOffset);\r\n            supplyLeft--;\r\n        }\r\n    }\r\n\r\n    /// @notice Generates a pseudo random number based on arguments with decent entropy\r\n    /// @param max The maximum value we want to receive\r\n    /// @return A random number less than the max\r\n    function _random(uint256 max) internal view returns (uint256) {\r\n        if (max == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 rand = uint256(\r\n            keccak256(\r\n                abi.encode(\r\n                    msg.sender,\r\n                    block.difficulty,\r\n                    block.timestamp,\r\n                    blockhash(block.number - 1)\r\n                )\r\n            )\r\n        );\r\n        return rand % max;\r\n    }\r\n\r\n    /**\r\n     * @dev Wrapper around {_mintRandomIndex} that incrementally if the collection has not \r\n     * been revealed yet, which also checks the buyer has not exceeded maxMint count \r\n     */\r\n    function _mintRandom(address buyer, uint256 amount) internal {\r\n        require(maxMint == 0 || mintCount[buyer] + amount <= maxMint, \"Buyer over mint maximum\");\r\n        mintCount[buyer] += amount;\r\n        uint256 nextTokenId = _totalMinted;\r\n\r\n        if (isRevealed) {\r\n            _mintRandomIndex(buyer, amount);\r\n        } else {\r\n            for (uint256 i = 0; i < amount; i++) {\r\n                _safeMint(buyer, nextTokenId + i);\r\n            }\r\n        }\r\n\r\n        _balances[buyer] += amount;\r\n        _totalMinted += amount;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"bool[2]\",\"name\":\"bools\",\"type\":\"bool[2]\"},{\"internalType\":\"address[3]\",\"name\":\"addresses\",\"type\":\"address[3]\"},{\"internalType\":\"uint256[6]\",\"name\":\"uints\",\"type\":\"uint256[6]\"},{\"internalType\":\"string[3]\",\"name\":\"strings\",\"type\":\"string[3]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"AltSignerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"BalanceWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"IpfsRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"address1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"address2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bps1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bps2\",\"type\":\"uint256\"}],\"name\":\"RevenueShareUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"RoyaltyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"SaleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"SaleCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"VersionChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ROYALTIES_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SECONDARY_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAYOUT_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_PER_DECREMENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alternateSignerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"pricesAndTimestamps\",\"type\":\"uint256[4]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"cancelAllowList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"pricesAndTimestamps\",\"type\":\"uint256[4]\"}],\"name\":\"cancelMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"pricesAndTimestamps\",\"type\":\"uint256[4]\"}],\"name\":\"cancelSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"getActiveVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"pricesAndTimestamps\",\"type\":\"uint256[4]\"}],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hashToSignForAllowList\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"pricesAndTimestamps\",\"type\":\"uint256[4]\"}],\"name\":\"hashToSignForMint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"pricesAndTimestamps\",\"type\":\"uint256[4]\"}],\"name\":\"hashToSignToSellToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[2]\",\"name\":\"bools\",\"type\":\"bool[2]\"},{\"internalType\":\"address[3]\",\"name\":\"addresses\",\"type\":\"address[3]\"},{\"internalType\":\"uint256[6]\",\"name\":\"uints\",\"type\":\"uint256[6]\"},{\"internalType\":\"string[3]\",\"name\":\"strings\",\"type\":\"string[3]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"revealIPFSHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"lockOnReveal\",\"type\":\"bool\"}],\"name\":\"lockTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"pricesAndTimestamps\",\"type\":\"uint256[4]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintAllow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerRoyaltyBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"revenueShare\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"revenueShareBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"alt\",\"type\":\"address\"}],\"name\":\"setAltSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"newAddresses\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"newBPS\",\"type\":\"uint256[2]\"}],\"name\":\"setRevenueShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBPS\",\"type\":\"uint256\"}],\"name\":\"setRoyaltiesBPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"updateVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ERC721RandomizedCollection","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"1","Runs":"200","ConstructorArgumentsa000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000006456173656c790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000445415345000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7f00f48e4ebda0e81dd636fb2f7ba7ac4d05156cfe49838720655c50f1a4d2a5"}]}