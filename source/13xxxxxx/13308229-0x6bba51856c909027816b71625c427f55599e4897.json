{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.7;\r\n\r\ncontract MerkleHashStorage {\r\n\r\n\tstruct MerkleHashData {\r\n\t\tbytes32 hash;\r\n\t\tuint256 block_timestamp;\r\n\t}\r\n\r\n\taddress public contrat_owner;\r\n\t\r\n\tmapping (bytes9 => MerkleHashData) public merkleHashDataArray;\r\n\t\r\n\t\r\n\t/* events */\r\n\t/* ------ */\r\n\tevent MerkleHashAdded(bytes9 indexed merkle_ref, bytes32 merkle_hash, uint256 block_timestamp);\r\n \t/* end events */\r\n \t/* ---------- */\r\n\t\r\n\tconstructor() {\r\n\t\tcontrat_owner = msg.sender;\r\n\t}\r\n\t\r\n\t/* external functions */\r\n\t/* ------------------ */\r\n\tfunction addMerkleHashData(bytes9 merkle_ref, bytes32 merkle_hash) external {\r\n\t\trequire(merkle_ref != 0, \"merkle_ref must be > 0\");\r\n\t\trequire(merkle_hash != 0, \"merkle_hash must be > 0\");\r\n\t\trequire(msg.sender == contrat_owner, \"only contract owner can call addMerkleHashData\");\r\n\t\t\r\n\t\t/* check if merkle_hash has been already added for this merkle_ref */\r\n\t\trequire(merkleHashDataArray[merkle_ref].hash == 0, \"merkle_hash has been already added for this merkle_ref\");\r\n\t\t\r\n\t\t/* add new merkleHashData into merkleHashDataArray */\r\n\t\tmerkleHashDataArray[merkle_ref] = MerkleHashData(merkle_hash, block.timestamp);\r\n\t\temit MerkleHashAdded(merkle_ref, merkle_hash, block.timestamp);\r\n\t}\r\n\t/* end external functions */\r\n\t/* ---------------------- */\r\n    \t\r\n\t/* external view function */\r\n\t/* ---------------------- */\r\n\tfunction getMerkleHashData(bytes9 merkle_ref) external view returns (MerkleHashData memory) {\r\n\t\trequire(merkle_ref != 0, \"merkle_ref must be > 0\");\r\n\t\t\r\n\t\tMerkleHashData memory merkleHashData = merkleHashDataArray[merkle_ref];\r\n\r\n\t\tif (merkleHashData.hash == 0)\r\n\t\t\treturn MerkleHashData(0, 0);\r\n\r\n\t\treturn merkleHashData;\r\n\t}\r\n\t/* end external view function */\r\n\t/* -------------------------- */\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes9\",\"name\":\"merkle_ref\",\"type\":\"bytes9\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkle_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block_timestamp\",\"type\":\"uint256\"}],\"name\":\"MerkleHashAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes9\",\"name\":\"merkle_ref\",\"type\":\"bytes9\"},{\"internalType\":\"bytes32\",\"name\":\"merkle_hash\",\"type\":\"bytes32\"}],\"name\":\"addMerkleHashData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contrat_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes9\",\"name\":\"merkle_ref\",\"type\":\"bytes9\"}],\"name\":\"getMerkleHashData\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"block_timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct MerkleHashStorage.MerkleHashData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes9\",\"name\":\"\",\"type\":\"bytes9\"}],\"name\":\"merkleHashDataArray\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"block_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MerkleHashStorage","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fd2a46370757cf7fbfdb8427bf7db04b1093fd1d9a8db919415dddf3268358f9"}]}