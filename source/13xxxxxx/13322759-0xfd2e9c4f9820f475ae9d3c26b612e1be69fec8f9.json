{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.11;\r\n\r\ninterface IERC721 {\r\n    function burn(uint256 tokenId) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function mint( address _to, uint256 _tokenId, string calldata _uri, string calldata _payload) external;\r\n    function changeName(string calldata name, string calldata symbol) external;\r\n    function updateTokenUri(uint256 _tokenId,string memory _uri) external;\r\n    function tokenPayload(uint256 _tokenId) external view returns (string memory);\r\n    function ownerOf(uint256 _tokenId) external view returns (address _owner);\r\n    function getApproved(uint256 _tokenId) external returns (address);\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\r\n    function tokenByIndex(uint256 _index) external view returns (uint256);\r\n}\r\n\r\ninterface IStorage {\r\n    function getZero() external view returns(address);\r\n    function getDead() external view returns(address);\r\n    function addToLegacy(address nftAddress, uint tokenId, address _owner) external;\r\n    function getLegacyClaims(address nftAddress, uint tokenId) external view returns (address);\r\n    function addToClaims(address nftAddress, uint tokenId, address _owner) external;\r\n    function getClaims(address nftAddress, uint tokenId) external view returns (address);\r\n    function getBurnAddresses() external view returns (address[] memory);\r\n    function addToBurnAddresses(address burnAddress) external;\r\n    function removeFromLegacy(address nftAddress, uint tokenId) external;\r\n}\r\n\r\ncontract ClaimedVaults {\r\n    \r\n    event Tick(uint tick);\r\n    event Tock(address tock);\r\n    event Complete();\r\n    event Finally();\r\n    \r\n    address StorageAddress;\r\n    bool initialized = false;\r\n    address owner;\r\n    \r\n    constructor(address storageContract) public {\r\n        StorageAddress = storageContract;\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier isOwner() {\r\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\r\n        // changes to the state and to Ether balances are reverted.\r\n        // This used to consume all gas in old EVM versions, but not anymore.\r\n        // It is often a good idea to use 'require' to check if functions are called correctly.\r\n        // As a second argument, you can also provide an explanation about what went wrong.\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    function init() public {\r\n        require(!initialized, 'already initialized');\r\n        initialized = true;\r\n    }\r\n    \r\n    \r\n    function getZeroFromStorage() public view returns (address) {\r\n        return IStorage(StorageAddress).getZero();\r\n    }\r\n    \r\n    function isBurnAddress(address needle) public view returns (bool) {\r\n        address[] memory BurnAddresses = IStorage(StorageAddress).getBurnAddresses();\r\n        for (uint i=0; i < BurnAddresses.length; i++) {\r\n            if (BurnAddresses[i] == needle) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function claim(address nftAddress, uint tokenId) public {\r\n        IERC721 token = IERC721(nftAddress);\r\n        token.transferFrom(msg.sender, IStorage(StorageAddress).getDead(), tokenId);\r\n        IStorage(StorageAddress).addToClaims(nftAddress, tokenId, msg.sender);\r\n    }\r\n    \r\n    function isClaimed(address nftAddress, uint tokenId) public view returns(bool) {\r\n        IERC721 token = IERC721(nftAddress);\r\n        bool legacyClaimed = IStorage(StorageAddress).getLegacyClaims(nftAddress, tokenId) != getZeroFromStorage();\r\n        bool claimed = IStorage(StorageAddress).getClaims(nftAddress, tokenId) != getZeroFromStorage();\r\n        bool addressClaimed = false;\r\n        try token.ownerOf(tokenId) returns (address _owner) {\r\n            if (isBurnAddress(_owner)) {\r\n                addressClaimed = true;\r\n            }\r\n        } catch {}\r\n        return legacyClaimed || addressClaimed || claimed;\r\n    }\r\n    \r\n    function claimedBy(address nftAddress, uint tokenId) public view returns (address _owner, string memory _type) {\r\n        address legacyClaimed = IStorage(StorageAddress).getLegacyClaims(nftAddress, tokenId);\r\n        address claimed = IStorage(StorageAddress).getClaims(nftAddress, tokenId);\r\n        if (legacyClaimed != getZeroFromStorage()) {\r\n            return (legacyClaimed, \"legacy\");\r\n        } else if (claimed != getZeroFromStorage()) {\r\n            return (claimed, \"record\");\r\n        } else {\r\n            return (getZeroFromStorage(), \"unknown\");\r\n        }\r\n    }\r\n    \r\n    function addManyLegacy(address nftAddress, address[] memory owners, uint[] memory tokenIds) isOwner public {\r\n        for (uint i=0; i < owners.length; i++) {\r\n            IStorage(StorageAddress).addToLegacy(nftAddress, tokenIds[i], owners[i]);\r\n        }\r\n    }\r\n    \r\n    function removeFromLegacy(address nftAddress, uint tokenId) isOwner public {\r\n        IStorage(StorageAddress).removeFromLegacy(nftAddress, tokenId);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storageContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Complete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finally\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tick\",\"type\":\"uint256\"}],\"name\":\"Tick\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tock\",\"type\":\"address\"}],\"name\":\"Tock\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"addManyLegacy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimedBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getZeroFromStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"needle\",\"type\":\"address\"}],\"name\":\"isBurnAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"removeFromLegacy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ClaimedVaults","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000004842e8a13def6017ca57f8a71f6a18d52bd5cc76","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://17b38812ddd72e72cd8db414128b209758988ff564de7e2e811e9cd630454e29"}]}