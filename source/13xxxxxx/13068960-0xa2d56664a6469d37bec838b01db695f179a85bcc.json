{"status":"1","message":"OK","result":[{"SourceCode":"library SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n abstract contract ERC20Interface {\r\n    function totalSupply()virtual  public  view returns (uint);\r\n    function balanceOf(address tokenOwner)virtual public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) virtual public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) virtual public returns (bool success);\r\n    function approve(address spender, uint tokens) virtual public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) virtual public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\nabstract contract ERC20_Gen_Lib{\r\n    function Create(address p_owner, uint256 p_total ,string memory p_symbol , string memory p_name , uint8 p_decimals ) virtual public  returns(address);\r\n}\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\nabstract contract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes memory data)virtual public;\r\n}\r\n\r\n abstract contract ERC20_Prop_Interface {\r\n     \r\n\r\n     \r\n     function symbol()virtual  public  view returns (string memory);\r\n     function name()virtual  public  view returns (string memory);\r\n     function decimals()virtual  public  view returns (uint8);\r\n    \r\n}\r\nabstract contract Trading_Charge\r\n{\r\n    function Amount(uint256 amount ,address to) virtual public view  returns(uint256);\r\n   \r\n}\r\nabstract contract D_Swap_Main\r\n{\r\n    \r\n    function m_Address_of_System_Reward_Token()virtual  public view returns (address);\r\n    function m_Address_of_Token_Collecter()virtual  public view returns (address);\r\n    function m_Trading_Charge_Lib()virtual  public view returns (address);\r\n\r\n    function m_ERC20_Gen_Lib()virtual  public view returns (address);\r\n    function Triger_Create(address swap ,address user,address swap_owner ,address token_head,address token_tail,uint256 sys_reward)virtual  public ;\r\n    function Triger_Entanglement(address swap ,address user ,address op_token_head,address op_token_tail)virtual  public ;\r\n    function Triger_Initialize(address swap ,address user,uint256 total_amount_head ,uint256 total_amount_tail ,uint256 future_block,string memory slogan)virtual  public ;\r\n    function Triger_Permit_User(address swap ,address user,address target )virtual public;\r\n    function Triger_Token_Price(address swap ,address user, uint256 price)virtual public;\r\n    function Triger_Claim_For_Head(address swap ,address user)virtual  public ;\r\n    function Triger_Claim_For_Tail(address swap ,address user)virtual  public ;\r\n    function Triger_Deposit_For_Head(address swap ,address user, uint256 amount,uint256 deposited_amount,address referer,uint256 head_remaining,uint256 tail_remaining)virtual  public ;\r\n    function Triger_Deposit_For_Tail(address swap ,address user, uint256 amount,uint256 deposited_amount,address referer,uint256 head_remaining,uint256 tail_remaining)virtual  public ;\r\n    function Triger_Withdraw_Head(address swap ,address user ,uint256 status)virtual  public ;\r\n    function Triger_Withdraw_Tail(address swap ,address user ,uint256 status)virtual  public ;\r\n    function Triger_Claim_For_Delivery(address swap ,address user) virtual  public ;\r\n    function Triger_Remaining_Supply(address swap ,uint256 head_amount,uint256 tail_amount)virtual public;\r\n    function Triger_Token_Info(address swap ,address user ,address head ,uint256 head_decimal,uint256 head_name ,address tail ,uint256 tail_decimal,uint256 tail_name,address reward ,uint256 reward_decimal,uint256 reward_name )virtual  public ;\r\n   \r\n  \r\n}\r\n\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract D_Swap_Factory is Owned {\r\n\r\n    function Set_DSwap_Main_Address(address addr) public onlyOwner\r\n    {\r\n        m_DSwap_Main_Address=addr;\r\n    }\r\n    address public m_DSwap_Main_Address=address(0);\r\n    function Create(address user, address token_head,address token_tail,address sys_reward_addr,uint256 sys_reward) payable public  returns(address){\r\n        require(msg.sender==m_DSwap_Main_Address,\"INVALID INVOKER\");\r\n        address res= address(new D_Swap(m_DSwap_Main_Address , user,token_head,token_tail,sys_reward_addr,sys_reward));\r\n        return (res);\r\n    }\r\n   \r\n}\r\n\r\n\r\ncontract D_Swap is Owned {\r\n    \r\n\r\n    using SafeMath for uint;\r\n    bool public m_Initialized=false;\r\n    address public m_DSwap_Main_Address;\r\n    uint256 public m_Future_Block;\r\n    string  public  m_Slogan;\r\n    \r\n    uint256 public m_Amount_Reward;\r\n    address public m_Token_Reward=address(0);\r\n    \r\n    string  public m_Version=\"0.0.1\"; \r\n    address public m_Token_Head;\r\n    address public m_Token_Tail;\r\n    \r\n    //address public m_referer_Head;\r\n    //address public m_referer_Tail;\r\n    \r\n    address public m_OP_Token_Head;\r\n    address public m_OP_Token_Tail;\r\n    \r\n    address public m_Rival_Head;\r\n    address public m_Rival_Tail;\r\n    \r\n    uint256 public m_Amount_Head;\r\n    uint256 public m_Amount_Tail;\r\n    \r\n    uint256 public m_Amount_Head_Swapped;\r\n    uint256 public m_Amount_Tail_Swapped;\r\n    uint256 public m_Amount_Head_Deliveryed;\r\n    uint256 public m_Amount_Tail_Deliveryed;\r\n    uint256 public m_Amount_Reward_Swapped;\r\n    \r\n    uint256 public m_Total_Amount_Head;\r\n    uint256 public m_Total_Amount_Tail;\r\n\r\n    \r\n    \r\n    bool public m_Entanglement=false;\r\n    bool public m_Permit_Mode=false;\r\n    mapping(address => bool) m_Permit_List;\r\n    mapping(address => uint256) m_Future_Balance_Tail;\r\n    uint256 public m_Future_Balance_Head;\r\n    uint256 public m_Total_Future_Balance_Tail;\r\n    bool public m_Option_Finish_Head=false;\r\n    bool public m_Option_Finish_Tail=false;\r\n     \r\n    constructor(address swap_main,address swap_owner ,address token_head,address token_tail,address sys_reward_addr,uint256 sys_reward) public {\r\n        \r\n        require(token_head!=token_tail,\"YOU CAN NOT STEP INTO THE REVOLVING DOOR\");\r\n        //require(sys_reward_addr!=token_tail,\"YOU MAY USE ANOTHER TOKEN AS REWARD\");\r\n        //require(token_head!=sys_reward_addr,\"YOU MAY USE ANOTHER TOKEN AS REWARD\");\r\n        owner =swap_owner;\r\n        m_DSwap_Main_Address=swap_main;\r\n        m_Token_Head=  token_head;\r\n        m_Token_Tail=  token_tail;\r\n        m_Amount_Reward=sys_reward;\r\n        m_Token_Reward=sys_reward_addr;\r\n        \r\n    }\r\n    function  StringConcat(string memory _a, string memory _b) public pure returns (string memory){\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        string memory ret = new string(_ba.length + _bb.length +4);\r\n        bytes memory bret = bytes(ret);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++)bret[k++] = _ba[i];\r\n        for (uint i = 0; i < _bb.length; i++) bret[k++] = _bb[i];\r\n        return string(ret);\r\n   }  \r\n   function Str_To_Uint(string memory _str) private returns(uint256)\r\n   {\r\n       bytes memory str_bytes = bytes(_str);\r\n\r\n        uint256 res = 0;\r\n        for (uint i = 0; i < str_bytes.length; i++)\r\n        {\r\n            res=res+(uint8) (str_bytes[i]);\r\n            res=res*256;\r\n            if(i>=20)\r\n            {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return (res);\r\n   }\r\n    function Set_Initializing_Params(uint256 total_amount_head ,uint256 total_amount_tail ,uint256 future_block_offset,string memory slogan)public  onlyOwner\r\n    {\r\n        require(total_amount_head>0 && total_amount_tail >0 ,\"YOU CAN NOT EXCHANGE ETHER\");\r\n        require(m_Initialized==false,\"NO MAN EVER STEPS IN THE SAME RIVER TWICE\");\r\n        \r\n        m_Future_Block=block.number+future_block_offset;\r\n        m_Initialized=true;\r\n        m_Total_Amount_Head=total_amount_head;\r\n        m_Total_Amount_Tail=total_amount_tail;\r\n        m_Slogan=slogan;\r\n        D_Swap_Main(m_DSwap_Main_Address).Triger_Initialize( address(this) , msg.sender, total_amount_head , total_amount_tail ,future_block_offset,slogan);\r\n            \r\n        uint256 price=total_amount_head.mul(1e18);\r\n        price=price.div(total_amount_tail);\r\n        D_Swap_Main(m_DSwap_Main_Address).Triger_Token_Price( address(this) , msg.sender,price );\r\n        \r\n        D_Swap_Main(m_DSwap_Main_Address).Triger_Token_Info(\r\n            address(this) , msg.sender,\r\n            m_Token_Head,ERC20_Prop_Interface(m_Token_Head).decimals(),Str_To_Uint(ERC20_Prop_Interface(m_Token_Head).symbol()),\r\n            m_Token_Tail,ERC20_Prop_Interface(m_Token_Tail).decimals(),Str_To_Uint(ERC20_Prop_Interface(m_Token_Tail).symbol()),\r\n            m_Token_Reward,ERC20_Prop_Interface(m_Token_Reward).decimals(),Str_To_Uint(ERC20_Prop_Interface(m_Token_Reward).symbol())\r\n            );\r\n        \r\n        \r\n    }\r\n    \r\n    function Permit_User(address[] memory users)public onlyOwner\r\n    {\r\n        for(uint256 i=0;i<users.length;i++)\r\n        {\r\n            m_Permit_List[users[i]]=true;\r\n            D_Swap_Main(m_DSwap_Main_Address).Triger_Permit_User( address(this) , msg.sender, users[i]);\r\n            \r\n        }\r\n        m_Permit_Mode=true;\r\n    }\r\n    function Claim_For_Head()public onlyOwner\r\n    {\r\n        require(m_Initialized==true,\"STEP INTO THE ETHER\");\r\n        require(m_Entanglement==false,\"YOU ARE TOOOOO RIIIIIIICH\");\r\n   \r\n\r\n        Receive_Token(m_Token_Head,m_Total_Amount_Head,msg.sender);\r\n\r\n        m_Amount_Head=m_Total_Amount_Head;                \r\n        D_Swap_Main(m_DSwap_Main_Address).Triger_Claim_For_Head( address(this) , msg.sender);\r\n        m_Entanglement=true;\r\n    }\r\n    function Probe_Deposit_For_Tail(uint256 amount)public view returns(uint256 ,uint256)\r\n    {\r\n\r\n      \r\n\r\n        require (m_Entanglement==true,\"NOT ACTIONABLE\");\r\n        require (m_Option_Finish_Tail==false ,\"SWAP CLOSED\");\r\n        if(m_Amount_Tail>=m_Total_Amount_Tail)revert();\r\n        uint256 e_amount=amount;\r\n\r\n\r\n        ////Calculate the amount of how many tokens to be transfered///////////////\r\n        uint256 amount_back=e_amount.mul(m_Total_Amount_Head);\r\n        amount_back=amount_back.div(m_Total_Amount_Tail);\r\n        if(amount_back>=1)\r\n        {\r\n            amount_back=amount_back.sub(1);\r\n        }\r\n        \r\n      \r\n        uint256 reward_back=m_Amount_Reward.mul(e_amount); \r\n        reward_back=reward_back.div(m_Total_Amount_Tail);\r\n        \r\n        if(reward_back>=1)\r\n        {\r\n            reward_back=reward_back.sub(1);\r\n        }\r\n        \r\n        /////////////////////////////////////////////////////////////////////////////////\r\n        \r\n        \r\n        return (amount_back,reward_back);      \r\n \r\n    }\r\n    \r\n    function Get_Token_Balances() public view returns(uint256,uint256)\r\n    {\r\n         uint256 amount_back=0;//\r\n        amount_back=m_Total_Amount_Head- m_Amount_Head_Deliveryed;\r\n       \r\n        uint256 reward_back=0;//\r\n        reward_back=m_Amount_Reward- m_Amount_Reward_Swapped;\r\n        \r\n        return (amount_back,reward_back);   \r\n    }\r\n    \r\n    function Deposit_For_Tail(uint256 amount,address referer)public\r\n    {   \r\n        address e_referer=referer;\r\n        if(e_referer==address(0))\r\n        {\r\n            e_referer=D_Swap_Main(m_DSwap_Main_Address).m_Address_of_Token_Collecter();\r\n        }\r\n        \r\n        if(m_Permit_Mode==true)\r\n        {\r\n            require(m_Permit_List[msg.sender]==true,\"NOT PERMITTED\");\r\n        }\r\n        \r\n\r\n        require (m_Entanglement==true,\"NOT ACTIONABLE\");\r\n        require (m_Option_Finish_Tail==false ,\"SWAP CLOSED\");\r\n        \r\n        \r\n        ////calculate exactly amount whitch can be swapped ////////////////////////////////////////////////////////////////////////\r\n        if(m_Amount_Tail>=m_Total_Amount_Tail)revert();\r\n        uint256 e_amount= m_Total_Amount_Tail.sub(m_Amount_Tail);\r\n        if(e_amount>amount)\r\n        {\r\n            e_amount=amount;\r\n        }\r\n\r\n        //////////////////////////////////////////////////////////////////////////////\r\n        \r\n        ////Receive tokens of tail and accumulate the variable m_Amount_Tail//////\r\n        require(e_amount>0,\"NO TOKEN RECEIVED\");//check\r\n        m_Amount_Tail=m_Amount_Tail.add(e_amount);//effect\r\n        m_Amount_Tail_Swapped= m_Amount_Tail_Swapped.add(e_amount);//effect\r\n        Receive_Token(m_Token_Tail,e_amount,msg.sender);//interaction\r\n        \r\n        //////////////////////////////////////////////////////////////////////////////\r\n        \r\n        \r\n        ////Calculate the amount of how many tokens to be transfered///////////////\r\n        uint256 amount_back=e_amount.mul(m_Total_Amount_Head);\r\n        amount_back=amount_back.div(m_Total_Amount_Tail);\r\n        if(amount_back>=1)\r\n        {\r\n            amount_back=amount_back.sub(1);\r\n        }\r\n        m_Amount_Head_Swapped= m_Amount_Head_Swapped.add(amount_back);\r\n      \r\n        uint256 reward_back=m_Amount_Reward.mul(e_amount); \r\n        reward_back=reward_back.div(m_Total_Amount_Tail);\r\n        \r\n        if(reward_back>=1)\r\n        {\r\n            reward_back=reward_back.sub(1);\r\n        }\r\n        m_Amount_Reward_Swapped= m_Amount_Reward_Swapped.add(reward_back);\r\n        /////////////////////////////////////////////////////////////////////////////////\r\n        \r\n        \r\n        \r\n        ////Transfer token and rewards /////////////////////////////////////////////\r\n        if(amount_back>=1)\r\n        {\r\n            m_Total_Future_Balance_Tail=m_Total_Future_Balance_Tail.add(amount_back);\r\n            m_Future_Balance_Tail[msg.sender]=m_Future_Balance_Tail[msg.sender].add(amount_back);\r\n        }       \r\n        if(reward_back>=1)\r\n        {\r\n            safeTransfer(m_Token_Reward,e_referer ,reward_back);\r\n        }             \r\n        if(e_amount>=1)\r\n        {\r\n            m_Future_Balance_Head=m_Future_Balance_Head.add(e_amount);\r\n        }\r\n        ///////////////////////////////////////////////////////////////////////////\r\n        \r\n        \r\n        ////Auto Delivery////////////////////////////////////////////////////////\r\n        if(block.number>= m_Future_Block)\r\n        {\r\n            Impl_Delivery(msg.sender);\r\n        }\r\n        /////////////////////////////////////////////////////////////////////////\r\n        \r\n        \r\n        ////Triger Event \r\n        D_Swap_Main(m_DSwap_Main_Address).Triger_Deposit_For_Tail( address(this) , msg.sender, e_amount,m_Amount_Tail,referer,\r\n        m_Total_Amount_Head.sub(m_Amount_Head_Swapped),m_Total_Amount_Tail.sub(m_Amount_Tail_Swapped));\r\n        \r\n        D_Swap_Main(m_DSwap_Main_Address).Triger_Remaining_Supply( address(this) ,\r\n        m_Total_Amount_Head.sub(m_Amount_Head_Swapped),m_Total_Amount_Tail.sub(m_Amount_Tail_Swapped));\r\n    }\r\n    function Impl_Delivery(address user) internal\r\n    {\r\n        // Delivery Token For Tail\r\n        uint256 head_amount_back=m_Future_Balance_Tail[user];\r\n        m_Amount_Head_Deliveryed=m_Amount_Head_Deliveryed.add(head_amount_back);\r\n        m_Total_Future_Balance_Tail=m_Total_Future_Balance_Tail.sub(head_amount_back);\r\n        m_Future_Balance_Tail[user]=0;\r\n        \r\n        if(head_amount_back>=1)\r\n        {\r\n            Charging_Transfer_ERC20(m_Token_Head,user,head_amount_back);//interaction \r\n        } \r\n        \r\n        //////////////////////////////////////////////////////\r\n        \r\n        // Delivery Token For Head\r\n        uint256 tail_amount_back=0;\r\n        tail_amount_back=m_Future_Balance_Head;\r\n        m_Future_Balance_Head=0;\r\n        m_Amount_Tail_Deliveryed=m_Amount_Tail_Deliveryed.add( tail_amount_back);\r\n        Charging_Transfer_ERC20(m_Token_Tail,owner,tail_amount_back);//interation\r\n        \r\n        D_Swap_Main(m_DSwap_Main_Address).Triger_Claim_For_Delivery( address(this) , user);\r\n    \r\n    }\r\n    function Claim_For_Delivery() public\r\n    {\r\n        require(block.number>= m_Future_Block,\"WAIT FOR THE BLOCK BY DAY AND BY NIGHT\");\r\n        \r\n        Impl_Delivery(msg.sender);\r\n        \r\n        D_Swap_Main(m_DSwap_Main_Address).Triger_Claim_For_Delivery( address(this) , msg.sender);\r\n    }\r\n\r\n    function Charging_Transfer_ERC20 (address token ,address to ,uint256 amount)private\r\n    {\r\n        (address tc_addr)= D_Swap_Main(m_DSwap_Main_Address).m_Trading_Charge_Lib();\r\n        (address collecter_addr)= D_Swap_Main(m_DSwap_Main_Address).m_Address_of_Token_Collecter();\r\n        uint256 exactly_amount=Trading_Charge(tc_addr).Amount(amount,to);\r\n        \r\n        \r\n        bool res=true;\r\n        if(exactly_amount>=1)\r\n        {\r\n            safeTransfer(token,to,exactly_amount);\r\n        }\r\n       \r\n        \r\n        if(amount.sub(exactly_amount)>=1)\r\n        {\r\n           safeTransfer(token,collecter_addr,amount.sub(exactly_amount));\r\n        }\r\n        \r\n    }\r\n    function Withdraw_Head()public onlyOwner\r\n    {\r\n        \r\n        uint256 status=0;\r\n        require(m_Option_Finish_Head==false,\"Option Closed\");\r\n        m_Option_Finish_Head=true;\r\n        m_Option_Finish_Tail=true;\r\n\r\n        if(m_Entanglement==true)\r\n        {\r\n            \r\n            uint256 amount_back=0;//\r\n            amount_back=m_Total_Amount_Head.sub(m_Amount_Head_Swapped);\r\n            \r\n            if(amount_back>=1)\r\n            {\r\n                safeTransfer(m_Token_Head, msg.sender,amount_back);\r\n            }\r\n        }\r\n        \r\n        if(m_Initialized==true)\r\n        {\r\n            \r\n            uint256 reward_back=0;//\r\n            reward_back= m_Amount_Reward.sub( m_Amount_Reward_Swapped);\r\n            if(reward_back>=1)\r\n            {\r\n                safeTransfer(m_Token_Reward, msg.sender,reward_back);\r\n            }\r\n        }\r\n        \r\n         ////Triger Event \r\n        D_Swap_Main(m_DSwap_Main_Address).Triger_Withdraw_Head( address(this) , msg.sender,status);\r\n\r\n    }\r\n   \r\n    function Receive_Token(address addr,uint256 value,address from) internal\r\n    {\r\n        \r\n        // FUCK U TETHER;\r\n        uint256 t_balance_old = ERC20Interface(addr).balanceOf(address(this));\r\n        safeTransferFrom(addr,from, address(this),value);\r\n        uint256 t_balance = ERC20Interface(addr).balanceOf(address(this));\r\n        \r\n        uint256 e_amount=t_balance.sub(t_balance_old);\r\n        \r\n        require(e_amount>=value,\"TOKEN LOST,REBASING TOKEN IS NOT SUPPORTED\");\r\n        \r\n    }\r\n    function safeTransfer(address _token, address _to, uint _value) internal {\r\n        \r\n        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(ERC20Interface.transfer.selector, _to, _value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TRANSFER FAILED ,CHEACK OUT YOUR BALANCE');\r\n    }\r\n    function safeTransferFrom(address _token,address _from, address _to, uint _value) internal {\r\n        \r\n        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(ERC20Interface.transferFrom.selector, _from,_to, _value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TRANSFER FAILED ,CHEACK OUT YOUR BALANCE');\r\n    }\r\n    fallback() external payable {}\r\n    receive() external payable { \r\n        //revert();\r\n    }\r\n    //function Call_Function(address addr,uint256 value ,bytes memory data) public  onlyOwner  {\r\n    //addr.call{value:value}(data);\r\n    // \r\n    //}\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_head\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_tail\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sys_reward_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sys_reward\",\"type\":\"uint256\"}],\"name\":\"Create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Set_DSwap_Main_Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m_DSwap_Main_Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"D_Swap_Factory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://708053a75f20a11201a1da1a688b2679b0e9aea7a0f00df57e7e20bb6cdaddaf"}]}