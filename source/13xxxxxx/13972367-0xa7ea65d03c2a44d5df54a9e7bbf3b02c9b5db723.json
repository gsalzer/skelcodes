{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Tan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n\\n\\n\\n///  _           _   _         _    _                                         _     \\n/// | |_ ___ ___| |_|_|___ ___| |  | |_ ___ ___ ___ ___ ___ _____ ___        |_|___ \\n/// |  _| .'|  _|  _| |  _| .'| |  |  _| .'|   | . |  _| .'|     |_ -|   _   | | . |\\n/// |_| |__,|___|_| |_|___|__,|_|  |_| |__,|_|_|_  |_| |__,|_|_|_|___|  |_|  |_|___|\\n///                                            |___|                                \\n///\\n///                                                              tacticaltangrams.io\\n\\n\\n\\n\\n///  _                   _       \\n/// |_|_____ ___ ___ ___| |_ ___ \\n/// | |     | . | . |  _|  _|_ -|\\n/// |_|_|_|_|  _|___|_| |_| |___|\\n///         |_|                  \\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\nimport \\\"./State.sol\\\";\\nimport \\\"./Team.sol\\\";\\nimport \\\"./VRFD20.sol\\\";\\n\\n\\n\\n\\n///  _     _           ___                 \\n/// |_|___| |_ ___ ___|  _|___ ___ ___ ___ \\n/// | |   |  _| -_|  _|  _| .'|  _| -_|_ -|\\n/// |_|_|_|_| |___|_| |_| |__,|___|___|___|\\n\\ninterface TangramContract {\\n    function getGeneration(uint tokenId) external pure returns (uint);\\n    function getTanMetadata(uint tokenId, uint generation, uint generationSeed) external pure returns (string memory);\\n}\\n\\n\\n\\n\\n///              _               _      _____         \\n///  ___ ___ ___| |_ ___ ___ ___| |_   |_   _|___ ___ \\n/// |  _| . |   |  _|  _| .'|  _|  _|    | | | .'|   |\\n/// |___|___|_|_|_| |_| |__,|___|_|      |_| |__,|_|_|                                                  \\n\\n/// @title Tactical Tangrams main Tan contract\\n/// @author tacticaltangrams.io\\n/// @notice Tracks all Tan operations for tacticaltangrams.io. This makes this contract the OpenSea Tan collection\\ncontract Tan is\\n    ERC721Enumerable,\\n    Ownable,\\n    Pausable,\\n    State,\\n    Team,\\n    VRFD20 {\\n\\n\\n\\n\\n    /// @notice Emit Generation closing event; triggered by swapping 80+ Tans for the current generation\\n    /// @param generation Generation that is closing\\n    event GenerationClosing(uint generation);\\n\\n    /// @notice Emit Generation closed event\\n    /// @param generation Generation that is closed\\n    event GenerationClosed(uint generation);\\n\\n\\n\\n\\n    ///                  _               _           \\n    ///  ___ ___ ___ ___| |_ ___ _ _ ___| |_ ___ ___ \\n    /// |  _| . |   |_ -|  _|  _| | |  _|  _| . |  _|\\n    /// |___|___|_|_|___|_| |_| |___|___|_| |___|_|  \\n\\n    /// @notice Deployment constructor\\n    /// @param _name                    ERC721 name of token\\n    /// @param _symbol                  ERC721 symbol of token\\n    /// @param _openPremintAtDeployment Opens premint directly at contract deployment\\n    /// @param _vrfCoordinator          Chainlink VRF Coordinator address\\n    /// @param _link                    LINK token address\\n    /// @param _keyHash                 Public key against which randomness is created\\n    /// @param _fee                     VRF Chainlink fee in LINK\\n    /// @param _teamAddresses           List of team member's addresses; first address is emergency address\\n    /// @param _tangramContract         Address for Tangram contract\\n    constructor(\\n            address payable[TEAM_SIZE] memory _teamAddresses,\\n            string memory                     _name,\\n            string memory                     _symbol,\\n            bool                              _openPremintAtDeployment,\\n            address                           _vrfCoordinator,\\n            address                           _link,\\n            bytes32                           _keyHash,\\n            uint                              _fee,\\n            address                           _tangramContract\\n        )\\n\\n        ERC721(\\n            _name,\\n            _symbol\\n        )\\n\\n        Team(\\n            _teamAddresses\\n        )\\n\\n        VRFD20(\\n            _vrfCoordinator,\\n            _link,\\n            _keyHash,\\n            _fee\\n        )\\n    {\\n        vrfCoordinator = _vrfCoordinator;\\n        setTangramContract(_tangramContract);\\n\\n        if (_openPremintAtDeployment)\\n        {\\n            changeState(\\n                StateType.DEPLOYED,\\n                StateType.PREMINT);\\n        }\\n    }\\n\\n\\n\\n\\n    ///        _     _   \\n    ///  _____|_|___| |_ \\n    /// |     | |   |  _|\\n    /// |_|_|_|_|_|_|_|  \\n\\n    uint constant public MAX_MINT         = 15554;\\n    uint constant public MAX_TANS_OG      = 7;\\n    uint constant public MAX_TANS_WL      = 7;\\n    uint constant public MAX_TANS_PUBLIC  = 14;\\n\\n    uint constant public PRICE_WL         = 2 * 1e16;\\n    uint constant public PRICE_PUBLIC     = 3 * 1e16;\\n\\n    bytes32 private merkleRootOG = 0x67a345396a56431c46add239308b6fcfbab7dbf09287447d3f5f2458c0cccdc5;\\n    bytes32 private merkleRootWL = 0xf6c54efaf65ac33f79611e973313be91913aaf019de02d6d3ae1e6566f75929a;\\n\\n    mapping (address => bool) private addressPreminted;\\n    mapping (uint    => uint) public mintCounter;\\n\\n    string private constant INVALID_NUMBER_OF_TANS = \\\"Invalid number of tans or no more tans left\\\";\\n\\n    /// @notice Get maximum number of mints for the given generation\\n    /// @param generation Generation to get max mints for\\n    /// @return Maximum number of mints for generation\\n    function maxMintForGeneration(uint generation) public pure\\n        generationBetween(generation, 1, 7)\\n        returns (uint)\\n    {\\n        if (generation == 7) {\\n            return 55;\\n        }\\n        if (generation == 6) {\\n            return 385;\\n        }\\n        if (generation == 5) {\\n            return 980;\\n        }\\n        if (generation == 4) {\\n            return 2310;\\n        }\\n        if (generation == 3) {\\n            return 5005;\\n        }\\n        if (generation == 2) {\\n            return 9156;\\n        }\\n\\n        return MAX_MINT;\\n    }\\n\\n\\n    /// @notice Get number of mints for the given generation for closing announcement\\n    /// @param generation Generation to get max mints for\\n    /// @return Maximum number of mints for generation\\n    function maxMintForGenerationBeforeClosing(uint generation) public pure\\n        generationBetween(generation, 2, 6)\\n        returns (uint)\\n    {\\n        if (generation == 6) {\\n            return 308;\\n        }\\n        if (generation == 5) {\\n            return 784;\\n        }\\n        if (generation == 4) {\\n            return 1848;\\n        }\\n        if (generation == 3) {\\n            return 4004;\\n        }\\n\\n        return 7325;\\n    }\\n\\n\\n    /// @notice Get the lowest Tan ID for a given generation\\n    /// @param generation Generation to get lowest ID for\\n    /// @return Lowest Tan ID for generation\\n    function mintStartNumberForGeneration(uint generation) public pure\\n        generationBetween(generation, 1, 7)\\n        returns (uint)\\n    {\\n        uint tmp = 1;\\n        for (uint gen = 1; gen <= 7; gen++) {\\n            if (generation == gen) {\\n                return tmp;\\n            }\\n            tmp += maxMintForGeneration(gen);\\n        }\\n\\n        return 0;\\n    }\\n\\n\\n    /// @notice Public mint method. Checks whether the paid price is correct and max. 14 Tans are minted per tx\\n    /// @param numTans number of Tans to mint\\n    function mint(uint numTans) external payable\\n        forPrice(numTans, PRICE_PUBLIC, msg.value)\\n        inState(StateType.MINT)\\n        limitTans(numTans, MAX_TANS_PUBLIC)\\n    {\\n        mintLocal(numTans);\\n    }\\n\\n\\n    /// @notice Mint helper method\\n    /// @dev All checks need to be performed before calling this method\\n    /// @param numTans number of Tans to mint\\n    function mintLocal(uint numTans) private\\n        inEitherState(StateType.PREMINT, StateType.MINT)\\n        whenNotPaused()\\n    {\\n        for (uint mintedTan = 0; mintedTan < numTans; mintedTan++) {\\n            _mint(_msgSender(), totalSupply() + 1);\\n        }        \\n    }\\n\\n\\n    /// @notice Mint next-gen Tans at Tangram swap\\n    /// @param numTans number of Tans to mint\\n    /// @param _for Address to mint Tans for\\n    function mintForNextGeneration(uint numTans, address _for) external\\n        generationBetween(currentGeneration, 1, 6)\\n        inStateOrAbove(StateType.GENERATIONSTARTED)\\n        onlyTangramContract()\\n        whenNotPaused()\\n    {\\n        uint nextGeneration = currentGeneration + 1;\\n\\n        uint maxMintForNextGeneration = maxMintForGeneration(nextGeneration);\\n\\n        require(\\n            mintCounter[nextGeneration] + numTans <= maxMintForNextGeneration,\\n            INVALID_NUMBER_OF_TANS\\n        );\\n\\n        for (uint mintedTan = 0; mintedTan < numTans; mintedTan++) {\\n            _mint(\\n                _for,\\n                mintStartNumberForGeneration(nextGeneration) + mintCounter[nextGeneration]++\\n            );\\n        }\\n    }\\n\\n\\n    /// @notice OG mint method. Allowed once per OG minter, OG proof is by merkle proof. Max 7 Tans allowed\\n    /// @dev Method is not payable since OG mint for free\\n    /// @param merkleProof Merkle proof of minter address for OG tree\\n    /// @param numTans     Number of Tans to mint\\n    function mintOG(bytes32[] calldata merkleProof, uint numTans) external\\n        inEitherState(StateType.PREMINT, StateType.MINT)\\n        isValidMerkleProof(merkleRootOG, merkleProof)\\n        limitTans(numTans, MAX_TANS_OG)\\n        oneMint()\\n    {\\n        addressPreminted[_msgSender()] = true;\\n        mintLocal(numTans);\\n    }\\n\\n\\n    /// @notice WL mint method. Allowed once per WL minter, WL proof is by merkle proof. Max 7 Tans allowed\\n    /// @param merkleProof Merkle proof of minter address for WL tree\\n    /// @param numTans     Number of Tans to mint\\n    function mintWL(bytes32[] calldata merkleProof, uint numTans) external payable\\n        forPrice(numTans, PRICE_WL, msg.value)\\n        inEitherState(StateType.PREMINT, StateType.MINT)\\n        isValidMerkleProof(merkleRootWL, merkleProof)\\n        limitTans(numTans, MAX_TANS_WL)\\n        oneMint()\\n    {\\n        addressPreminted[_msgSender()] = true;\\n        mintLocal(numTans);\\n    }\\n\\n\\n    /// @notice Update merkle roots for OG/WL minters\\n    /// @param og OG merkle root\\n    /// @param wl WL merkle root\\n    function setMerkleRoot(bytes32 og, bytes32 wl) external\\n        onlyOwner()\\n    {\\n        merkleRootOG = og;\\n        merkleRootWL = wl;\\n    }\\n\\n\\n    /// @notice Require correct paid price\\n    /// @dev WL and public mint pay a fixed price per Tan\\n    /// @param numTans   Number of Tans to mint\\n    /// @param unitPrice Fixed price per Tan\\n    /// @param ethSent   Value of ETH sent in this transaction\\n    modifier forPrice(uint numTans, uint unitPrice, uint ethSent) {\\n        require(\\n            numTans * unitPrice == ethSent,\\n            \\\"Wrong value sent\\\"\\n        );\\n        _;\\n    }\\n\\n\\n    /// @notice Verify provided merkle proof to given root\\n    /// @dev Root is manually generated before contract deployment. Proof is automatically provided by minting site based on connected wallet address.\\n    /// @param root  Merkle root to verify against\\n    /// @param proof Merkle proof to verify\\n    modifier isValidMerkleProof(bytes32 root, bytes32[] calldata proof) {\\n        require(\\n            MerkleProof.verify(proof, root, keccak256(abi.encodePacked(_msgSender()))),\\n            \\\"Invalid proof\\\"\\n        );\\n        _;\\n    }\\n\\n\\n    /// @notice Require a valid number of Tans\\n    /// @param numTans Number of Tans to mint\\n    /// @param maxTans Maximum number of Tans to allow\\n    modifier limitTans(uint numTans, uint maxTans) {\\n        require(\\n            numTans >= 1 &&\\n            numTans <= maxTans &&\\n            totalSupply() + numTans <= MAX_MINT,\\n            INVALID_NUMBER_OF_TANS\\n        );\\n        _;\\n    }\\n\\n\\n    /// @notice Require maximum one mint per address\\n    /// @dev OG and WL minters have this restriction\\n    modifier oneMint() {\\n        require(\\n            addressPreminted[_msgSender()] == false,\\n            \\\"Only one premint allowed\\\"\\n        );\\n        _;\\n    }\\n\\n\\n\\n\\n    ///      _       _       \\n    ///  ___| |_ ___| |_ ___ \\n    /// |_ -|  _| .'|  _| -_|\\n    /// |___|_| |__,|_| |___|                     \\n\\n    /// @notice Change to mint stage; this is an implicit action when \\\"mint\\\" is called when shouldPublicMintBeOpen == true\\n    /// @dev Can only be called over Chainlink VRF random response\\n    function changeStateGenerationClosed() internal virtual override\\n        generationBetween(currentGeneration, 1, 7)\\n        inEitherState(StateType.GENERATIONSTARTED, StateType.GENERATIONCLOSING)\\n        onlyTeamMemberOrOwner()\\n    {\\n        if (currentGeneration < 7) {\\n            lastGenerationSeedRequestTimestamp = 0;\\n            requestGenerationSeed(currentGeneration + 1);\\n        }\\n\\n        emit GenerationClosed(currentGeneration);\\n    }\\n\\n\\n    /// @notice Change to mint stage; this is an implicit action when \\\"mint\\\" is called when shouldPublicMintBeOpen == true\\n    /// @dev Can only be called over Chainlink VRF random response\\n    function changeStateGenerationClosing() internal virtual override\\n        inState(StateType.GENERATIONSTARTED)\\n        onlyTangramContract()\\n    {\\n        emit GenerationClosing(currentGeneration);\\n    }\\n\\n\\n    /// @notice Change to mint stage; this is an implicit action when \\\"mint\\\" is called when shouldPublicMintBeOpen == true\\n    /// @dev Can only be called over Chainlink VRF random response\\n    function changeStateGenerationStarted() internal virtual override\\n        inEitherState(StateType.MINTCLOSED, StateType.GENERATIONCLOSED)\\n        onlyVRFCoordinator()\\n    {\\n    }\\n\\n\\n    /// @notice Change to mint stage; this is an implicit action when \\\"mint\\\" is called when shouldPublicMintBeOpen == true\\n    /// @dev Can also be called over setState method\\n    function changeStateMint() internal virtual override\\n        inState(StateType.PREMINT)\\n        onlyTeamMemberOrOwner()\\n    {\\n    }\\n\\n\\n    /// @notice Request Gen-1 seed, payout caller's funds\\n    /// @dev Caller's funds are only paid when this method was invoked from a team member's address; not the owner's address\\n    function changeStateMintClosed() internal virtual override\\n        inState(StateType.MINT)\\n        onlyTeamMemberOrOwner()\\n    {\\n        requestGenerationSeed(1);\\n    }\\n\\n\\n    /// @notice Request Gen-1 seed, payout caller's funds\\n    /// @dev Caller's funds are only paid when this method was invoked from a team member's address; not the owner's address\\n    function changeStateMintClosedAfter() internal virtual override\\n        inState(StateType.MINTCLOSED)\\n        onlyTeamMemberOrOwner()\\n    {\\n        mintCounter[1] = totalSupply();\\n        mintBalanceTotal = address(this).balance - secondaryBalanceTotal;\\n        if (!emergencyCalled && isTeamMember(_msgSender()) && address(this).balance > 0)\\n        {\\n            payout();\\n        }\\n    }\\n\\n\\n    /// @notice Change to premint stage\\n    /// @dev This is only allowed by the contract owner, either by means of deployment or later execution of setState\\n    function changeStatePremint() internal virtual override\\n        inState(StateType.DEPLOYED)\\n        onlyTeamMemberOrOwner()\\n    {\\n    }\\n\\n\\n    /// @notice Set new state\\n    /// @dev Use this for non-automatic state changes (e.g. open premint, close generation)\\n    /// @param _to New state to change to\\n    function setState(StateType _to) external\\n        onlyTeamMemberOrOwner()\\n    {\\n        changeState(state, _to);\\n    }\\n\\n\\n    /// @notice Announce generation close\\n    function setStateGenerationClosing() external\\n        onlyTangramContract()\\n    {\\n        changeState(state, StateType.GENERATIONCLOSING);\\n    }\\n\\n\\n\\n\\n    ///                _                           \\n    ///  ___ ___ ___ _| |___ _____ ___ ___ ___ ___ \\n    /// |  _| .'|   | . | . |     |   | -_|_ -|_ -|\\n    /// |_| |__,|_|_|___|___|_|_|_|_|_|___|___|___|\\n\\n    address private immutable vrfCoordinator;\\n\\n    /// @notice Generation seed received, open generation\\n    /// @dev Only possibly when mint is closed or previous generation has been closed. Seed is in VRFD20.generationSeed[generation]. Event is NOT emitted from contract address.\\n    /// @param generation Generation for which seed has been received\\n    function processGenerationSeedReceived(uint generation) internal virtual override\\n        inEitherState(StateType.MINTCLOSED, StateType.GENERATIONCLOSED)\\n        onlyVRFCoordinator()\\n    {\\n        require(\\n            generation == currentGeneration + 1,\\n            \\\"Invalid seed generation\\\"\\n        );\\n\\n        currentGeneration = generation;\\n\\n        state = StateType.GENERATIONSTARTED;\\n\\n        // Emitting stateChanged event is useless, as this is in the VRF Coordinator's tx context\\n    }\\n\\n\\n    /// @notice Re-request generation seed\\n    /// @dev Only possible before starting new generation. Requests seed for the next generation. Important checks performed by internal method.\\n    function reRequestGenerationSeed() external\\n        inEitherState(StateType.MINT, StateType.GENERATIONCLOSED)\\n        onlyTeamMemberOrOwner()\\n    {\\n        requestGenerationSeed(currentGeneration + 1);\\n    }\\n\\n\\n    /// @notice Require that the sender is Chainlink's VRF Coordinator\\n    modifier onlyVRFCoordinator() {\\n        require(\\n            _msgSender() == vrfCoordinator,\\n            \\\"Only VRF Coordinator\\\"\\n        );\\n        _;\\n    }\\n\\n\\n\\n\\n    ///                      _   \\n    ///  ___ ___ _ _ ___ _ _| |_ \\n    /// | . | .'| | | . | | |  _|\\n    /// |  _|__,|_  |___|___|_|  \\n    /// |_|     |___|            \\n\\n    string private constant TX_FAILED = \\\"TX failed\\\";\\n\\n    /// @notice Pay out all funds directly to the emergency wallet\\n    /// @dev Only emergency payouts can be used; personal payouts are locked\\n    function emergencyPayout() external\\n        onlyTeamMemberOrOwner()\\n    {\\n        emergencyCalled = true;\\n        (bool sent,) = teamAddresses[0].call{value: address(this).balance}(\\\"\\\");\\n        require(\\n            sent,\\n            TX_FAILED\\n        );\\n    }\\n\\n\\n    /// @notice Pay the yet unpaid funds to the caller, when it is a team member\\n    /// @dev Does not work after emergency payout was used. Implement secondary share payouts\\n    function payout() public\\n        emergencyNotCalled()\\n        inStateOrAbove(StateType.MINTCLOSED)\\n    {\\n        (bool isTeamMember, uint teamIndex) = getTeamIndex(_msgSender());\\n        require(\\n            isTeamMember,\\n            \\\"Invalid address\\\"\\n        );\\n\\n        uint shareIndex = teamIndex * TEAM_SHARE_RECORD_SIZE;\\n\\n        uint mintShare = 0;\\n        if (mintSharePaid[teamIndex] == false) {\\n            mintSharePaid[teamIndex] = true;\\n            mintShare = (mintBalanceTotal * teamShare[shareIndex + TEAM_SHARE_MINT_OFFSET]) / 1000;\\n        }\\n        \\n        uint secondaryShare = 0;\\n        if (secondaryBalanceTotal > teamShare[shareIndex + TEAM_SHARE_SECONDARY_PAID_OFFSET]) {\\n            uint secondaryShareToPay = secondaryBalanceTotal - teamShare[shareIndex + TEAM_SHARE_SECONDARY_PAID_OFFSET];\\n            teamShare[shareIndex + TEAM_SHARE_SECONDARY_PAID_OFFSET] = secondaryBalanceTotal;\\n            secondaryShare = (secondaryShareToPay * teamShare[shareIndex + TEAM_SHARE_SECONDARY_OFFSET]) / 1000;\\n        }\\n\\n        uint total = mintShare + secondaryShare;\\n        require(\\n            total > 0,\\n            \\\"Nothing to pay\\\"\\n        );\\n\\n        (bool sent,) = payable(_msgSender()).call{value: total}(\\\"\\\");\\n        require(\\n            sent,\\n            TX_FAILED\\n        );\\n    }\\n\\n\\n    /// @notice Keep track of total secondary sales earnings\\n    receive() external payable\\n    {\\n        secondaryBalanceTotal += msg.value;\\n    }\\n\\n\\n    /// @notice Require emergency payout to not have been called\\n    modifier emergencyNotCalled() {\\n        require(\\n            false == emergencyCalled,\\n            \\\"Emergency called\\\"\\n        );\\n        _;\\n    }\\n\\n\\n\\n    ///              ___ ___ ___   \\n    ///  ___ ___ ___|_  |_  |_  |  \\n    /// | -_|  _|  _| | |  _|_| |_ \\n    /// |___|_| |___| |_|___|_____|\\n\\n\\n    /// @notice Burn token on behalf of Tangram contract\\n    /// @dev Caller needs to verify token ownership\\n    /// @param tokenId Token ID to burn\\n    function burn(uint256 tokenId) external \\n        onlyTangramContract()\\n        whenNotPaused()\\n    {\\n        _burn(tokenId);\\n    }\\n\\n\\n    /// @notice Return metadata url (placeholder) or base64-encoded metadata when gen-1 has started\\n    /// @dev Overridden from OpenZeppelin's implementation to skip the unused baseURI check\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(\\n            _exists(tokenId),\\n            \\\"Nonexistent token\\\"\\n        );\\n        \\n        if (state <= StateType.MINTCLOSED)\\n        {\\n            return string(abi.encodePacked(\\n                METADATA_BASE_URI,\\n                \\\"placeholder\\\",\\n                JSON_EXT\\n            ));\\n        }\\n\\n        uint generation = tangramContract.getGeneration(tokenId);\\n        require(\\n            generation <= currentGeneration,\\n            INVALID_GENERATION\\n        );\\n\\n        return tangramContract.getTanMetadata(tokenId, generation, generationSeed[generation]);\\n    }\\n\\n\\n\\n\\n    ///            _         _     _       \\n    ///  _____ ___| |_ ___ _| |___| |_ ___ \\n    /// |     | -_|  _| .'| . | .'|  _| .'|\\n    /// |_|_|_|___|_| |__,|___|__,|_| |__,|\\n\\n    function contractURI() public pure returns (string memory) {\\n        return string(abi.encodePacked(\\n            METADATA_BASE_URI,\\n            METADATA_CONTRACT,\\n            JSON_EXT\\n        ));\\n    }\\n\\n\\n\\n\\n    ///                          _ \\n    ///  ___ ___ ___ ___ ___ ___| |\\n    /// | . | -_|   | -_|  _| .'| |\\n    /// |_  |___|_|_|___|_| |__,|_|\\n    /// |___|                      \\n\\n    uint private mintBalanceTotal      = 0;\\n    uint private secondaryBalanceTotal = 0;\\n    uint public  currentGeneration     = 0;\\n\\n    string private constant METADATA_BASE_URI = 'https://tacticaltangrams.io/metadata/';\\n    string private constant METADATA_CONTRACT = 'contract_tan';\\n    string private constant JSON_EXT          = '.json';\\n\\n    string private constant INVALID_GENERATION = \\\"Invalid generation\\\";\\n    string private constant ONLY_TEAM_MEMBER   = \\\"Only team member\\\";\\n\\n    modifier generationBetween(uint generation, uint from, uint to) {\\n        require(\\n            generation >= from && generation <= to,\\n            INVALID_GENERATION\\n        );\\n        _;\\n    }\\n\\n    /// @notice Require that the sender is a team member\\n    modifier onlyTeamMember() {\\n        require(\\n            isTeamMember(_msgSender()),\\n            ONLY_TEAM_MEMBER\\n        );\\n        _;\\n    }\\n\\n\\n    /// @notice Require that the sender is a team member or the contract owner\\n    modifier onlyTeamMemberOrOwner() {\\n        require(\\n            _msgSender() == owner() || isTeamMember(_msgSender()),\\n            string(abi.encodePacked(ONLY_TEAM_MEMBER, \\\" or owner\\\"))\\n        );\\n        _;\\n    }\\n\\n\\n\\n\\n    ///              _               _      _____                           \\n    ///  ___ ___ ___| |_ ___ ___ ___| |_   |_   _|___ ___ ___ ___ ___ _____ \\n    /// |  _| . |   |  _|  _| .'|  _|  _|    | | | .'|   | . |  _| .'|     |\\n    /// |___|___|_|_|_| |_| |__,|___|_|      |_| |__,|_|_|_  |_| |__,|_|_|_|\\n    ///                                                  |___|                      \\n\\n    TangramContract tangramContract;\\n    address tangramContractAddress;\\n\\n    /// @notice Set Tangram contract address\\n    /// @param _tangramContract Address for Tangram contract\\n    function setTangramContract(address _tangramContract) public\\n        onlyOwner()\\n    {\\n        tangramContractAddress = _tangramContract;\\n        tangramContract = TangramContract(_tangramContract);\\n    }\\n\\n\\n    /// @notice Require that the sender is the Tangram contract\\n    modifier onlyTangramContract() {\\n        require(\\n            _msgSender() == tangramContractAddress,\\n            \\\"Only Tangram contract\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/State.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n\\n\\n\\n///  _           _   _         _    _                                         _     \\n/// | |_ ___ ___| |_|_|___ ___| |  | |_ ___ ___ ___ ___ ___ _____ ___        |_|___ \\n/// |  _| .'|  _|  _| |  _| .'| |  |  _| .'|   | . |  _| .'|     |_ -|   _   | | . |\\n/// |_| |__,|___|_| |_|___|__,|_|  |_| |__,|_|_|_  |_| |__,|_|_|_|___|  |_|  |_|___|\\n///                                            |___|                                \\n///\\n///                                                              tacticaltangrams.io\\n\\n\\n\\n\\n///              _               _      _____ _       _       \\n///  ___ ___ ___| |_ ___ ___ ___| |_   |   __| |_ ___| |_ ___ \\n/// |  _| . |   |  _|  _| .'|  _|  _|  |__   |  _| .'|  _| -_|\\n/// |___|___|_|_|_| |_| |__,|___|_|    |_____|_| |__,|_| |___|\\n\\n/// @title Tactical Tangrams State contract\\n/// @author tacticaltangrams.io\\n/// @notice Implements the basis for Tactical Tangram's state machine\\nabstract contract State {\\n\\n\\n    /// @notice Emit state changes\\n    /// @param oldState Previous state\\n    /// @param newState Current state\\n    event StateChanged(StateType oldState, StateType newState);\\n\\n\\n    /// @notice Change to new state when state change is allowed\\n    /// @dev Virtual methods changeState* have to be implemented. Invalid state changes have to be reverted in each changeState* method\\n    /// @param _from State to change from\\n    /// @param _to   State to change to\\n    function changeState(StateType _from, StateType _to) internal\\n    {\\n        require(\\n            (_from != _to) &&\\n            (StateType.ALL == _from || state == _from),\\n            INVALID_STATE_CHANGE\\n        );\\n\\n        bool stateChangeHandled = false;\\n\\n        if (StateType.PREMINT == _to)\\n        {\\n            stateChangeHandled = true;\\n            changeStatePremint();\\n        }\\n        else if (StateType.MINT == _to)\\n        {\\n            stateChangeHandled = true;\\n            changeStateMint();\\n        }\\n        else if (StateType.MINTCLOSED == _to)\\n        {\\n            stateChangeHandled = true;\\n            changeStateMintClosed();\\n        }\\n\\n        // StateType.GENERATIONSTARTED cannot be set over setState, this is done implicitly by processGenerationSeedReceived\\n\\n        else if (StateType.GENERATIONCLOSING == _to)\\n        {\\n            stateChangeHandled = true;\\n            changeStateGenerationClosing();\\n        }\\n        else if (StateType.GENERATIONCLOSED == _to)\\n        {\\n            stateChangeHandled = true;\\n            changeStateGenerationClosed();\\n        }\\n\\n        require(\\n            stateChangeHandled,\\n            INVALID_STATE_CHANGE\\n        );\\n\\n        state = _to;\\n\\n        emit StateChanged(_from, _to);\\n\\n        if (StateType.MINTCLOSED == _to) {\\n            changeStateMintClosedAfter();\\n        }\\n    }\\n\\n\\n    function changeStatePremint()           internal virtual;\\n    function changeStateMint()              internal virtual;\\n    function changeStateMintClosed()        internal virtual;\\n    function changeStateMintClosedAfter()   internal virtual;\\n    function changeStateGenerationStarted() internal virtual;\\n    function changeStateGenerationClosing() internal virtual;\\n    function changeStateGenerationClosed()  internal virtual;\\n\\n\\n    /// @notice Verify allowed states\\n    /// @param _either Allowed state\\n    /// @param _or     Allowed state\\n    modifier inEitherState(StateType _either, StateType _or) {\\n        require(\\n            (state == _either) || (state == _or),\\n            INVALID_STATE\\n        );\\n        _;\\n    }\\n\\n\\n    /// @notice Verify allowed state\\n    /// @param _state Allowed state\\n    modifier inState(StateType _state) {\\n        require(\\n            state == _state,\\n            INVALID_STATE\\n        );\\n        _;\\n    }\\n\\n\\n\\n    /// @notice Verify allowed minimum state\\n    /// @param _state Minimum allowed state\\n    modifier inStateOrAbove(StateType _state) {\\n        require(\\n            state >= _state,\\n            INVALID_STATE\\n        );\\n        _;\\n    }\\n\\n\\n    /// @notice List of states for Tactical Tangrams\\n    /// @dev When in states GENERATIONSTARTED, GENERATIONCLOSING or GENERATIONCLOSED, Tan.currentGeneration indicates the current state\\n    enum StateType\\n    {\\n        ALL               ,\\n        DEPLOYED          , // contract has been deployed\\n        PREMINT           , // only OG and WL minting allowed\\n        MINT              , // only public minting allowed\\n        MINTCLOSED        , // no more minting allowed; total mint income stored, random seed for gen 1 requested\\n        GENERATIONSTARTED , // random seed available, Tans revealed\\n        GENERATIONCLOSING , // 80-100% Tans swapped\\n        GENERATIONCLOSED    // 100% Tans swapped, random  seed for next generation requested for gen < 7\\n    }\\n\\n\\n    StateType public state = StateType.DEPLOYED;\\n\\n\\n    string private constant INVALID_STATE        = \\\"Invalid state\\\";\\n    string private constant INVALID_STATE_CHANGE = \\\"Invalid state change\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/Team.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n\\n\\n\\n///  _           _   _         _    _                                         _     \\n/// | |_ ___ ___| |_|_|___ ___| |  | |_ ___ ___ ___ ___ ___ _____ ___        |_|___ \\n/// |  _| .'|  _|  _| |  _| .'| |  |  _| .'|   | . |  _| .'|     |_ -|   _   | | . |\\n/// |_| |__,|___|_| |_|___|__,|_|  |_| |__,|_|_|_  |_| |__,|_|_|_|___|  |_|  |_|___|\\n///                                            |___|                                \\n///\\n///                                                              tacticaltangrams.io\\n\\n\\n\\n\\n///  _                   _       \\n/// |_|_____ ___ ___ ___| |_ ___ \\n/// | |     | . | . |  _|  _|_ -|\\n/// |_|_|_|_|  _|___|_| |_| |___|\\n///         |_|                  \\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n\\n\\n\\n///              _               _      _____               \\n///  ___ ___ ___| |_ ___ ___ ___| |_   |_   _|___ ___ _____ \\n/// |  _| . |   |  _|  _| .'|  _|  _|    | | | -_| .'|     |\\n/// |___|___|_|_|_| |_| |__,|___|_|      |_| |___|__,|_|_|_|\\n                                                        \\n/// @title Tactical Tangrams Team contract\\n/// @author tacticaltangrams.io\\n/// @notice Contains wallet and share details for personal payouts\\ncontract Team is Context {\\n\\n    uint internal constant TEAM_SIZE = 4;\\n    uint internal constant TEAM_SHARE_RECORD_SIZE = 3;\\n    uint internal constant TEAM_SHARE_MINT_OFFSET = 0;\\n    uint internal constant TEAM_SHARE_SECONDARY_OFFSET = 1;\\n    uint internal constant TEAM_SHARE_SECONDARY_PAID_OFFSET = 2;\\n\\n\\n\\n\\n    ///                  _               _           \\n    ///  ___ ___ ___ ___| |_ ___ _ _ ___| |_ ___ ___ \\n    /// |  _| . |   |_ -|  _|  _| | |  _|  _| . |  _|\\n    /// |___|___|_|_|___|_| |_| |___|___|_| |___|_|  \\n\\n    /// @notice Deployment constructor\\n    /// @dev Initializes team addresses. Note that this is only meant for deployment flexibility; the team size and rewards are fixed in the contract\\n    /// @param _teamAddresses    List of team member's addresses; first address is emergency address\\n    constructor(address payable[TEAM_SIZE] memory _teamAddresses)\\n    {\\n        for (uint teamIndex = 0; teamIndex < teamAddresses.length; teamIndex++)\\n        {\\n            teamAddresses[teamIndex] = _teamAddresses[teamIndex];\\n        }\\n\\n    }\\n\\n\\n    /// @notice Returns the team member's index based on wallet address\\n    /// @param _address Wallet address of team member\\n    /// @return (bool, index) where bool indicates whether the given address is a team member\\n    function getTeamIndex(address _address) internal view returns (bool, uint) {\\n        for (uint index = 0; index < TEAM_SIZE; index++) {\\n            if (_address == teamAddresses[index]) {\\n                return (true, index);\\n            }\\n        }\\n\\n        return (false, 0);\\n    }\\n\\n\\n    /// @notice Checks whether given address is a team member\\n    /// @param _address Address to check team membership for\\n    /// @return True when _address is a team member, False otherwise\\n    function isTeamMember(address _address) internal view returns (bool) {\\n        (bool _isTeamMember,) = getTeamIndex(_address);\\n        return _isTeamMember;\\n    }\\n\\n\\n    /// @notice Team member's addresses\\n    /// @dev Team member information in other arrays can be found at the corresponding index.\\n    address payable[TEAM_SIZE] internal teamAddresses;\\n\\n    /// @notice The emergency address is used when things go wrong; no personal payout is possible anymore after emergency payout\\n    bool internal emergencyCalled = false;\\n\\n    /// @notice Mint shares are paid out only once per address, after public minting has closed\\n    bool[TEAM_SIZE] internal mintSharePaid = [ false, false, false, false ];\\n\\n    /// @notice Mint and secondary sales details per team member\\n    /// @dev Flattened array: [[<mint promille>, <secondary sales promille>, <secondary sales shares paid>], ..]\\n    uint[TEAM_SIZE * TEAM_SHARE_RECORD_SIZE] internal teamShare = [\\n        450, 287, 0,\\n        300, 287, 0,\\n        215, 286, 0,\\n         35, 140, 0\\n    ];\\n}\\n\"\r\n    },\r\n    \"contracts/VRFD20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n\\n\\n\\n///  _           _   _         _    _                                         _     \\n/// | |_ ___ ___| |_|_|___ ___| |  | |_ ___ ___ ___ ___ ___ _____ ___        |_|___ \\n/// |  _| .'|  _|  _| |  _| .'| |  |  _| .'|   | . |  _| .'|     |_ -|   _   | | . |\\n/// |_| |__,|___|_| |_|___|__,|_|  |_| |__,|_|_|_  |_| |__,|_|_|_|___|  |_|  |_|___|\\n///                                            |___|                                \\n///\\n///                                                              tacticaltangrams.io\\n\\n\\n\\n\\n///  _                   _       \\n/// |_|_____ ___ ___ ___| |_ ___ \\n/// | |     | . | . |  _|  _|_ -|\\n/// |_|_|_|_|  _|___|_| |_| |___|\\n///         |_|                  \\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\n\\n\\n\\n///              _               _      _____ _____ _____ ___ ___ \\n///  ___ ___ ___| |_ ___ ___ ___| |_   |  |  | __  |   __|_  |   |\\n/// |  _| . |   |  _|  _| .'|  _|  _|  |  |  |    -|   __|  _| | |\\n/// |___|___|_|_|_| |_| |__,|___|_|     \\\\___/|__|__|__|  |___|___|\\n                                                              \\n/// @title Tactical Tangrams VRP20 randomness contract\\n/// @author tacticaltangrams.io, based on a sample taken from https://docs.chain.link/docs/chainlink-vrf/\\n/// @notice Requests random seed for each generation\\nabstract contract VRFD20 is VRFConsumerBase {\\n\\n\\n\\n\\n    ///                  _               _           \\n    ///  ___ ___ ___ ___| |_ ___ _ _ ___| |_ ___ ___ \\n    /// |  _| . |   |_ -|  _|  _| | |  _|  _| . |  _|\\n    /// |___|___|_|_|___|_| |_| |___|___|_| |___|_|  \\n\\n    /// @notice Deployment constructor\\n    /// @dev Note that these parameter values differ per network, see https://docs.chain.link/docs/vrf-contracts/\\n    /// @param _vrfCoordinator Chainlink VRF Coordinator address\\n    /// @param _link           LINK token address\\n    /// @param _keyHash        Public key against which randomness is created\\n    /// @param _fee            VRF Chainlink fee in LINK\\n    constructor(address _vrfCoordinator, address _link, bytes32 _keyHash, uint _fee)\\n        VRFConsumerBase(_vrfCoordinator, _link)\\n    {\\n        keyHash = _keyHash;\\n        fee = _fee;\\n    }\\n\\n\\n    /// @notice Request generation seed\\n    /// @dev Only request when last request is: older than 30 minutes and (seed has not been requested or received) and (previous generation seed has been received)\\n    /// @param requestForGeneration Generation for which to request seed\\n    function requestGenerationSeed(uint requestForGeneration) internal\\n        lastGenerationSeedRequestTimedOut()\\n    {\\n        require(\\n            LINK.balanceOf(address(this)) >= fee,\\n            \\\"Not enough LINK\\\"\\n        );\\n\\n        // Do not check whether seed has already been requested; requests can theoretically timeout\\n        require(\\n            (generationSeed[requestForGeneration] == 0) ||            // not requested\\n            (generationSeed[requestForGeneration] == type(uint).max), // not received\\n            \\\"Seed already requested or received\\\"\\n        );\\n\\n        // Verify that previous generation seed has been received, when applicable\\n        if (requestForGeneration > 1)\\n        {\\n            require(\\n                generationSeed[requestForGeneration-1] != type(uint).max,\\n                \\\"Previous generation seed not received\\\"\\n            );\\n        }\\n\\n        lastGenerationSeedRequestTimestamp = block.timestamp;\\n\\n        bytes32 requestId = requestRandomness(keyHash, fee);\\n        generationSeedRequest[requestId] = requestForGeneration;\\n        generationSeed[requestForGeneration] = type(uint).max;\\n    }\\n\\n\\n    /// @notice Cast uint256 to bytes\\n    /// @param x Value to cast from\\n    /// @return b Bytes representation of x\\n    function toBytes(uint256 x) private pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n    }\\n\\n\\n    /// @notice Receive generation seed\\n    /// @dev Only possible when generation seed has not been received yet\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        uint generation = generationSeedRequest[requestId];\\n\\n        require(\\n            (generation >= 1) && (generation <= 7),\\n            \\\"Invalid generation\\\"\\n        );\\n\\n        if (generation > 1)\\n        {\\n            require(\\n                generationSeed[generation-1] != type(uint).max,\\n                \\\"Previous generation seed not received\\\"\\n            );\\n        }\\n\\n        require(\\n            generationSeed[generation] == type(uint).max,\\n            \\\"Random number not requested or already received\\\"\\n        );\\n\\n        generationSeed[generation] = randomness;\\n        generationHash[generation] = keccak256(toBytes(randomness));\\n\\n        processGenerationSeedReceived(generation);\\n    }\\n\\n\\n\\n\\n    /// @notice Method invoked when randomness for a valid request has been received\\n    /// @dev Implement this method in inheriting contract. Random number is stored in generationSeed[generation]\\n    /// @param generation Generation number for which random number has been received\\n    function processGenerationSeedReceived(uint generation) virtual internal;\\n\\n\\n    /// @notice Allow re-requesting of generation seeds after GENERATION_SEED_REQUEST_TIMEOUT (30 minutes)\\n    /// @dev In the very unlikely event that a request is never answered, re-requesting should be allowed\\n    modifier lastGenerationSeedRequestTimedOut()\\n    {\\n        require(\\n            (lastGenerationSeedRequestTimestamp + GENERATION_SEED_REQUEST_TIMEOUT) < block.timestamp,\\n            \\\"Not timed out\\\"\\n        );\\n        _;\\n    }\\n\\n\\n    /// @notice Chainlink fee in LINK for VRF\\n    /// @dev Set this to 0.1 LINK for Rinkeby, 2 LINK for mainnet\\n    uint private immutable fee;\\n\\n    bytes32 private immutable keyHash;\\n\\n    uint lastGenerationSeedRequestTimestamp = 0;\\n    uint GENERATION_SEED_REQUEST_TIMEOUT    = 1800; // 30 minutes request timeout\\n\\n    mapping(bytes32 => uint) public generationSeedRequest;\\n    mapping(uint    => uint) public generationSeed;\\n    mapping(uint    => bytes32) public generationHash;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    internal\\n    virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(\\n    bytes32 _keyHash,\\n    uint256 _fee\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(\\n    address _vrfCoordinator,\\n    address _link\\n  ) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    external\\n  {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256\\n    )\\n  {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash,\\n    uint256 _vRFInputSeed\\n  )\\n    internal\\n    pure\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable[4]\",\"name\":\"_teamAddresses\",\"type\":\"address[4]\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_openPremintAtDeployment\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tangramContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"}],\"name\":\"GenerationClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"}],\"name\":\"GenerationClosing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum State.StateType\",\"name\":\"oldState\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum State.StateType\",\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"StateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TANS_OG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TANS_PUBLIC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TANS_WL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PUBLIC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_WL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentGeneration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"generationHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"generationSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"generationSeedRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"}],\"name\":\"maxMintForGeneration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"}],\"name\":\"maxMintForGenerationBeforeClosing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTans\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTans\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"mintForNextGeneration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"numTans\",\"type\":\"uint256\"}],\"name\":\"mintOG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"}],\"name\":\"mintStartNumberForGeneration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"numTans\",\"type\":\"uint256\"}],\"name\":\"mintWL\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reRequestGenerationSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"og\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"wl\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum State.StateType\",\"name\":\"_to\",\"type\":\"uint8\"}],\"name\":\"setState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setStateGenerationClosing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tangramContract\",\"type\":\"address\"}],\"name\":\"setTangramContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum State.StateType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Tan","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"000000000000000000000000e0ba13bc43000d3073b680e65b44b357d2c8cdd7000000000000000000000000ece39a881dfa37b7fbcce8f764981790553ec0f80000000000000000000000009ccd31cae8b047ddefa522c347886d51faccee6900000000000000000000000057e2a4ec7250d768220e8fa1110b210de917d0e9000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000f0d54349addcf704f77ae15b96510dea15cb7952000000000000000000000000514910771af9ca656af840dff83e8264ecf986caaa77729d3466ca35ae8d28b3bbac7cc36a5031efdc430821c02bc31a238af4450000000000000000000000000000000000000000000000001bc16d674ec800000000000000000000000000006735053c615bde13203d97e9c65b76a0df0f7b660000000000000000000000000000000000000000000000000000000000000018546163746963616c2054616e6772616d73202d2054616e73000000000000000000000000000000000000000000000000000000000000000000000000000000055454414e47000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}