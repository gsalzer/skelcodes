{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.15;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call.value(weiValue)(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract VestingPool {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint128;\r\n\r\n    struct Stream {\r\n        address recipient;\r\n        uint128 startTime;\r\n        uint128 length;\r\n        uint256 totalAmount;\r\n        uint256 amountPaidOut;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Opens a new stream that continuously pays out.\r\n     * @param recipient Account that will receive the funds.\r\n     * @param length The amount of time in seconds that the stream lasts\r\n     * @param totalAmount The total amount to payout in the stream\r\n     */\r\n    function openStream(\r\n        address recipient,\r\n        uint128 length,\r\n        uint256 totalAmount\r\n    )\r\n        public\r\n        returns (uint256 streamIndex);\r\n\r\n    /**\r\n     * @dev Closes the specified stream. Pays out pending amounts, clears out the stream, and emits a StreamClosed event.\r\n     * @param streamId The id of the stream to close.\r\n     */\r\n    function closeStream(uint256 streamId)\r\n        public;\r\n}\r\n\r\n\r\n// Swapper allows the governor to create swaps\r\n// A swap executes trustlessly and minimizes slippage to a set amount by using TWAPs\r\n// Swaps can be broken up, TWAPs repeatedly updated, etc. \r\n// Anyone can update TWAPs or execute a swap\r\ncontract Swapper {\r\n    /** Structs */\r\n    struct SwapParams {\r\n        address sourceToken;\r\n        address destinationToken;\r\n        address router;\r\n        address pool1;\r\n        address pool2;\r\n        uint128 sourceAmount;\r\n        uint64 slippageLimit;\r\n    }\r\n\r\n    struct SwapState {\r\n        SwapParams params;\r\n        uint256 lastCumulativePriceUpdate;\r\n        uint256 lastCumulativePricePool1;\r\n        uint256 lastCumulativePricePool2;\r\n    }\r\n\r\n\r\n    /** Gov functions */\r\n    function addSwap(SwapParams calldata params) external;\r\n\r\n}\r\n\r\n\r\ninterface YVault {\r\n    function deposit(uint256 amount, address recipient)\r\n        external\r\n        returns (uint256);\r\n\r\n    function withdraw(uint256 amount) external returns (uint256);\r\n}\r\n\r\n\r\n\r\ncontract Proposal19 {\r\n    // Stream updates\r\n    VestingPool internal constant pool =\r\n        VestingPool(0xDCf613db29E4d0B35e7e15e93BF6cc6315eB0b82);\r\n\r\n    // For paying contributors\r\n    address internal constant RESERVES =\r\n        0x97990B693835da58A281636296D2Bf02787DEa17;\r\n    YVault internal constant yUSDC =\r\n        YVault(0x5f18C75AbDAe578b483E5F43f12a39cF75b973a9);\r\n    IERC20 internal constant USDC =\r\n        IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n\r\n    Swapper internal constant SWAPPER = Swapper(0xB4E5BaFf059C5CE3a0EE7ff8e9f16ca9dd91F1fE);\r\n    function execute() public {\r\n        IERC20(address(yUSDC)).transferFrom(\r\n            RESERVES,\r\n            address(this),\r\n            IERC20(address(yUSDC)).balanceOf(RESERVES)\r\n        );\r\n        yUSDC.withdraw(uint256(-1));\r\n        // E\r\n        USDC.transfer(\r\n            0x8A8acf1cEcC4ed6Fe9c408449164CE2034AdC03f,\r\n            yearlyUSDToMonthlyUSD(120000 * (10**6))\r\n        );\r\n        // Nate\r\n        USDC.transfer(\r\n            0xEC3281124d4c2FCA8A88e3076C1E7749CfEcb7F2,\r\n            yearlyUSDToMonthlyUSD(105000 * (10**6))\r\n        );\r\n        // Chilly\r\n        USDC.transfer(\r\n            0x01e0C7b70E0E05a06c7cC8deeb97Fa03d6a77c9C,\r\n            yearlyUSDToMonthlyUSD(84000 * (10**6))\r\n        );\r\n        // Krguman\r\n        USDC.transfer(\r\n            0xcc506b3c2967022094C3B00276617883167BF32B,\r\n            yearlyUSDToMonthlyUSD(30000 * (10**6))\r\n        );\r\n        // Designer\r\n        USDC.transfer(\r\n            0x3FdcED6B5C1f176b543E5E0b841cB7224596C33C,\r\n            yearlyUSDToMonthlyUSD(96000 * (10**6))\r\n        );\r\n        // Ross\r\n        USDC.transfer(\r\n            0x88c868B1024ECAefDc648eb152e91C57DeA984d0,\r\n            yearlyUSDToMonthlyUSD(84000 * (10**6))\r\n        );\r\n        // Jason\r\n        USDC.transfer(\r\n            0x43fD74401B4BF04095590a5308B6A5e3Db44b9e3,\r\n            yearlyUSDToMonthlyUSD(48000 * (10**6))\r\n        );\r\n        // Blokku\r\n        USDC.transfer(\r\n            0x392027fDc620d397cA27F0c1C3dCB592F27A4dc3,\r\n            yearlyUSDToMonthlyUSD(22500 * (10**6))\r\n        );\r\n        // Kris\r\n        USDC.transfer(\r\n            0x386568164bdC5B105a66D8Ae83785D4758939eE6,\r\n            yearlyUSDToMonthlyUSD(15000 * (10**6))\r\n        );\r\n        // Jono\r\n        USDC.transfer(\r\n            0xFcB4f3a1710FefA583e7b003F3165f2E142bC725,\r\n            yearlyUSDToMonthlyUSD(42000 * (10**6))\r\n        );\r\n        // Will\r\n        USDC.transfer(\r\n            0x31920DF2b31B5f7ecf65BDb2c497DE31d299d472,\r\n            yearlyUSDToMonthlyUSD(84000 * (10**6))\r\n        );\r\n\r\n        uint256 usdcBalance = USDC.balanceOf(address(this));\r\n        USDC.approve(address(yUSDC), usdcBalance);\r\n        yUSDC.deposit(usdcBalance, RESERVES);\r\n\r\n        // Close Tom stream\r\n        pool.closeStream(63);\r\n\r\n        // Close Indigo stream\r\n        pool.closeStream(59);\r\n\r\n        // Update Ross stream\r\n        pool.closeStream(65);\r\n        pool.openStream(\r\n            0x88c868B1024ECAefDc648eb152e91C57DeA984d0,\r\n            180 days,\r\n            1250 * (10**24) * 6\r\n        );\r\n\r\n        // Update Blokku stream\r\n        pool.closeStream(61);\r\n        pool.openStream(\r\n            0x392027fDc620d397cA27F0c1C3dCB592F27A4dc3,\r\n            180 days,\r\n            2333 * (10**24) * 6\r\n        );\r\n\r\n        // Update Kris stream\r\n        pool.closeStream(62);\r\n        pool.openStream(\r\n            0x386568164bdC5B105a66D8Ae83785D4758939eE6,\r\n            180 days,\r\n            667 * (10**24) * 6\r\n        );\r\n\r\n        // Update Jono stream\r\n        pool.closeStream(56);\r\n        pool.openStream(\r\n            0xFcB4f3a1710FefA583e7b003F3165f2E142bC725,\r\n            180 days,\r\n            800 * (10**24) * 6\r\n        );\r\n\r\n        // Update Will stream\r\n        pool.closeStream(57);\r\n        pool.openStream(\r\n            0x31920DF2b31B5f7ecf65BDb2c497DE31d299d472,\r\n            180 days,\r\n            1600 * (10**24) * 6\r\n        );\r\n\r\n        // Open Snake stream\r\n        pool.openStream(\r\n            0xce1559448e21981911fAC70D4eC0C02cA1EFF39C,\r\n            180 days,\r\n            5120 * (10**24) * 6\r\n        );\r\n\r\n        // Open Joe stream\r\n        pool.openStream(\r\n            0x1Ba2A537A771AA4EaC2f18427716557e4E744864,\r\n            180 days,\r\n            853 * (10**24) * 6\r\n        );\r\n\r\n        // Snake trial period payment\r\n        pool.openStream(\r\n            0xce1559448e21981911fAC70D4eC0C02cA1EFF39C,\r\n            0 days,\r\n            4545 * (10**24)\r\n        );\r\n\r\n        // Joe trial period payment\r\n        pool.openStream(\r\n            0x1Ba2A537A771AA4EaC2f18427716557e4E744864,\r\n            0 days,\r\n            1818 * (10**24)\r\n        );\r\n\r\n        // Sushiswap 2 hop INDEX to ETH to USDC\r\n        SWAPPER.addSwap(\r\n            Swapper.SwapParams({\r\n                sourceToken: 0x0954906da0Bf32d5479e25f46056d22f08464cab,\r\n                destinationToken: 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48,\r\n                router: 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F,\r\n                pool1: 0xA73DF646512C82550C2b3C0324c4EEdEE53b400C,\r\n                pool2: 0x397FF1542f962076d0BFE58eA045FfA2d347ACa0,\r\n                sourceAmount: 5000 * (10**18),\r\n                slippageLimit: 35 * (10**15)\r\n            })\r\n        );\r\n\r\n    }\r\n\r\n    function yearlyUSDToMonthlyUSD(uint256 yearlyUSD)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return ((yearlyUSD / uint256(12)));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Proposal19","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"1","Runs":"5","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3fc3112f37f0c10bd83fc2bd4a400ce8b1acb3be2fe4e994d60f8b47ed20d7e6"}]}