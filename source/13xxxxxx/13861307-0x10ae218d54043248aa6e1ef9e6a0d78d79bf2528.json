{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AMM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"contracts/interfaces/IAMM.sol\\\";\\nimport \\\"contracts/interfaces/IERC20.sol\\\";\\nimport \\\"contracts/interfaces/ILPToken.sol\\\";\\nimport \\\"contracts/interfaces/IFutureVault.sol\\\";\\nimport \\\"contracts/interfaces/IFutureWallet.sol\\\";\\nimport \\\"contracts/interfaces/IController.sol\\\";\\nimport \\\"./library/AMMMaths.sol\\\";\\nimport \\\"contracts/RoleCheckable.sol\\\";\\n\\ncontract AMM is IAMM, RoleCheckable {\\n    using AMMMathsUtils for uint256;\\n    using SafeERC20Upgradeable for IERC20;\\n\\n    // ERC-165 identifier for the main token standard.\\n    bytes4 public constant ERC1155_ERC165 = 0xd9b67a26;\\n\\n    uint64 public override ammId;\\n\\n    IFutureVault private futureVault;\\n    uint256 public swapFee;\\n\\n    IERC20 private ibt;\\n    IERC20 private pt;\\n    IERC20 private underlyingOfIBT;\\n    IERC20 private fyt;\\n\\n    address internal feesRecipient;\\n\\n    ILPToken private poolTokens;\\n\\n    uint256 private constant BASE_WEIGHT = 5 * 10**17;\\n\\n    enum AMMGlobalState { Created, Activated, Paused }\\n    AMMGlobalState private state;\\n\\n    uint256 public currentPeriodIndex;\\n    uint256 public lastBlockYieldRecorded;\\n    uint256 public lastYieldRecorded;\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    mapping(uint256 => mapping(uint256 => uint256)) private poolToUnderlyingAtPeriod;\\n    mapping(uint256 => uint256) private generatedYieldAtPeriod;\\n    mapping(uint256 => uint256) private underlyingSavedPerPeriod;\\n    mapping(uint256 => mapping(uint256 => uint256)) private totalLPSupply;\\n\\n    mapping(uint256 => Pair) private pairs;\\n    mapping(address => uint256) private tokenToPairID;\\n\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    event AMMStateChanged(AMMGlobalState _newState);\\n    event PairCreated(uint256 indexed _pairID, address _token);\\n    event LiquidityCreated(address _user, uint256 _pairID);\\n    event PoolJoined(address _user, uint256 _pairID, uint256 _poolTokenAmount);\\n    event PoolExited(address _user, uint256 _pairID, uint256 _poolTokenAmount);\\n    event LiquidityIncreased(address _from, uint256 _pairID, uint256 _tokenID, uint256 _amount);\\n    event LiquidityDecreased(address _to, uint256 _pairID, uint256 _tokenID, uint256 _amount);\\n    event Swapped(\\n        address _user,\\n        uint256 _pairID,\\n        uint256 _tokenInID,\\n        uint256 _tokenOutID,\\n        uint256 _tokenAmountIn,\\n        uint256 _tokenAmountOut,\\n        address _to\\n    );\\n    event PeriodSwitched(uint256 _newPeriodIndex);\\n    event WeightUpdated(address _token, uint256[2] _newWeights);\\n    event ExpiredTokensWithdrawn(address _user, uint256 _amount);\\n    event SwappingFeeSet(uint256 _swapFee);\\n\\n    /* General State functions */\\n\\n    /**\\n     * @notice AMM initializer\\n     * @param _ammId We might need to create an AMMFactory to maintain a counter index which can be passed as _ammId\\n     * @param _underlyingOfIBTAddress the address of the IBT underlying\\n     * @param _futureVault the address of the future vault\\n     * @param _poolTokens ERC1155 contract to maintain LPTokens\\n     * @param _admin the address of the contract admin\\n     */\\n    function initialize(\\n        uint64 _ammId,\\n        address _underlyingOfIBTAddress,\\n        address _futureVault,\\n        ILPToken _poolTokens,\\n        address _admin,\\n        address _feesRecipient\\n    ) public virtual initializer {\\n        require(_poolTokens.supportsInterface(ERC1155_ERC165), \\\"AMM: Interface not supported\\\");\\n        require(_underlyingOfIBTAddress != address(0), \\\"AMM: Invalid underlying address\\\");\\n        require(_futureVault != address(0), \\\"AMM: Invalid future address\\\");\\n        require(_admin != address(0), \\\"AMM: Invalid admin address\\\");\\n        require(_feesRecipient != address(0), \\\"AMM: Invalid fees recipient address\\\");\\n\\n        ammId = _ammId;\\n        poolTokens = _poolTokens;\\n        feesRecipient = _feesRecipient;\\n        futureVault = IFutureVault(_futureVault);\\n        ibt = IERC20(futureVault.getIBTAddress());\\n\\n        address _ptAddress = futureVault.getPTAddress();\\n\\n        // Initialize first PT x Underlying pool\\n        underlyingOfIBT = IERC20(_underlyingOfIBTAddress);\\n        pt = IERC20(_ptAddress);\\n\\n        // Instantiate weights of first pool\\n        tokenToPairID[_ptAddress] = 0;\\n        _createPair(uint256(0), _underlyingOfIBTAddress);\\n        _status = _NOT_ENTERED;\\n        // Role initialization\\n        _setupRole(ADMIN_ROLE, _admin);\\n\\n        state = AMMGlobalState.Created; // waiting to be finalized\\n    }\\n\\n    function _createPair(uint256 _pairID, address _tokenAddress) internal {\\n        pairs[_pairID] = Pair({\\n            tokenAddress: _tokenAddress,\\n            weights: [BASE_WEIGHT, BASE_WEIGHT],\\n            balances: [uint256(0), uint256(0)],\\n            liquidityIsInitialized: false\\n        });\\n        tokenToPairID[_tokenAddress] = _pairID;\\n        emit PairCreated(_pairID, _tokenAddress);\\n    }\\n\\n    function togglePauseAmm() external override isAdmin {\\n        require(state != AMMGlobalState.Created, \\\"AMM: Not Initialized\\\");\\n        state = state == AMMGlobalState.Activated ? AMMGlobalState.Paused : AMMGlobalState.Activated;\\n        emit AMMStateChanged(state);\\n    }\\n\\n    /**\\n     * @notice finalize the initialization of the amm\\n     * @dev must be called during the first period the amm is supposed to be active, will initialize fyt address\\n     */\\n    function finalize() external override isAdmin {\\n        require(state == AMMGlobalState.Created, \\\"AMM: Already Finalized\\\");\\n        currentPeriodIndex = futureVault.getCurrentPeriodIndex();\\n        require(currentPeriodIndex >= 1, \\\"AMM: Invalid period ID\\\");\\n\\n        address fytAddress = futureVault.getFYTofPeriod(currentPeriodIndex);\\n        fyt = IERC20(fytAddress);\\n\\n        _createPair(uint256(1), fytAddress);\\n\\n        state = AMMGlobalState.Activated;\\n        emit AMMStateChanged(AMMGlobalState.Activated);\\n    }\\n\\n    /**\\n     * @notice switch period\\n     * @dev must be called after each new period switch\\n     * @dev the switch will auto renew part of the tokens and update the weights accordingly\\n     */\\n    function switchPeriod() external override {\\n        ammIsActive();\\n        require(futureVault.getCurrentPeriodIndex() > currentPeriodIndex, \\\"AMM: Invalid period index\\\");\\n        _renewUnderlyingPool();\\n        _renewFYTPool();\\n        generatedYieldAtPeriod[currentPeriodIndex] = futureVault.getYieldOfPeriod(currentPeriodIndex);\\n        currentPeriodIndex = futureVault.getCurrentPeriodIndex();\\n        emit PeriodSwitched(currentPeriodIndex);\\n    }\\n\\n    function _renewUnderlyingPool() internal {\\n        underlyingSavedPerPeriod[currentPeriodIndex] = pairs[0].balances[1];\\n        uint256 oldIBTBalance = ibt.balanceOf(address(this));\\n        uint256 ptBalance = pairs[0].balances[0];\\n        if (ptBalance != 0) {\\n            IController(futureVault.getControllerAddress()).withdraw(address(futureVault), ptBalance);\\n        }\\n        _saveExpiredIBTs(0, ibt.balanceOf(address(this)).sub(oldIBTBalance), currentPeriodIndex);\\n        _resetPair(0);\\n    }\\n\\n    function _renewFYTPool() internal {\\n        address fytAddress = futureVault.getFYTofPeriod(futureVault.getCurrentPeriodIndex());\\n        pairs[1].tokenAddress = fytAddress;\\n        fyt = IERC20(fytAddress);\\n        uint256 oldIBTBalance = ibt.balanceOf(address(this));\\n        uint256 ptBalance = pairs[1].balances[0];\\n        if (ptBalance != 0) {\\n            IFutureWallet(futureVault.getFutureWalletAddress()).redeemYield(currentPeriodIndex); // redeem ibt from expired ibt\\n            IController(futureVault.getControllerAddress()).withdraw(address(futureVault), ptBalance); // withdraw current pt and generated fyt\\n        }\\n        _saveExpiredIBTs(1, ibt.balanceOf(address(this)).sub(oldIBTBalance), currentPeriodIndex);\\n        _resetPair(1);\\n    }\\n\\n    function _resetPair(uint256 _pairID) internal {\\n        pairs[_pairID].balances = [uint256(0), uint256(0)];\\n        pairs[_pairID].weights = [BASE_WEIGHT, BASE_WEIGHT];\\n        pairs[_pairID].liquidityIsInitialized = false;\\n    }\\n\\n    function _saveExpiredIBTs(\\n        uint256 _pairID,\\n        uint256 _ibtGenerated,\\n        uint256 _periodID\\n    ) internal {\\n        poolToUnderlyingAtPeriod[_pairID][_periodID] = futureVault.convertIBTToUnderlying(_ibtGenerated);\\n    }\\n\\n    /**\\n     * @notice update the weights at each new block depending on the generated yield\\n     */\\n    function _updateWeightsFromYieldAtBlock() internal {\\n        (uint256 newUnderlyingWeight, uint256 yieldRecorded) = _getUpdatedUnderlyingWeightAndYield();\\n\\n        if (newUnderlyingWeight != pairs[0].weights[1]) {\\n            lastYieldRecorded = yieldRecorded;\\n            lastBlockYieldRecorded = block.number;\\n            pairs[0].weights = [AMMMaths.UNIT - newUnderlyingWeight, newUnderlyingWeight];\\n\\n            emit WeightUpdated(pairs[0].tokenAddress, pairs[0].weights);\\n        }\\n    }\\n\\n    function getPTWeightInPair() external view override returns (uint256) {\\n        (uint256 newUnderlyingWeight, ) = _getUpdatedUnderlyingWeightAndYield();\\n        return AMMMaths.UNIT - newUnderlyingWeight;\\n    }\\n\\n    function _getUpdatedUnderlyingWeightAndYield() internal view returns (uint256, uint256) {\\n        uint256 inverseSpotPrice = (AMMMaths.SQUARED_UNIT).div(getSpotPrice(0, 1, 0));\\n        uint256 yieldRecorded = futureVault.convertIBTToUnderlying(futureVault.getUnrealisedYieldPerPT());\\n        if (lastBlockYieldRecorded != block.number && lastYieldRecorded != yieldRecorded) {\\n            uint256 newSpotPrice =\\n                ((AMMMaths.UNIT + yieldRecorded).mul(AMMMaths.SQUARED_UNIT)).div(\\n                    ((AMMMaths.UNIT + lastYieldRecorded).mul(inverseSpotPrice))\\n                );\\n            if (newSpotPrice < AMMMaths.UNIT) {\\n                uint256[2] memory balances = pairs[0].balances;\\n                uint256 newUnderlyingWeight =\\n                    balances[1].mul(AMMMaths.UNIT).div(balances[1].add(balances[0].mul(newSpotPrice).div(AMMMaths.UNIT)));\\n                return (newUnderlyingWeight, yieldRecorded);\\n            } else {\\n                return (pairs[0].weights[1], yieldRecorded);\\n            }\\n        } else {\\n            return (pairs[0].weights[1], yieldRecorded);\\n        }\\n    }\\n\\n    /* Renewal functions */\\n\\n    /**\\n     * @notice Withdraw expired LP tokens\\n     */\\n    function withdrawExpiredToken(address _user, uint256 _lpTokenId) public override nonReentrant {\\n        _withdrawExpiredToken(_user, _lpTokenId);\\n    }\\n\\n    function _withdrawExpiredToken(address _user, uint256 _lpTokenId) internal {\\n        (uint256 redeemableTokens, uint256 lastPeriodId, uint256 pairId) = getExpiredTokensInfo(_user, _lpTokenId);\\n        require(redeemableTokens > 0, \\\"AMM: no redeemable token\\\");\\n        uint256 userTotal = poolTokens.balanceOf(_user, _lpTokenId);\\n        uint256 tokenSupply = totalLPSupply[pairId][lastPeriodId];\\n\\n        totalLPSupply[pairId][lastPeriodId] = totalLPSupply[pairId][lastPeriodId].sub(userTotal);\\n        poolTokens.burnFrom(_user, _lpTokenId, userTotal);\\n\\n        if (pairId == 0) {\\n            uint256 userUnderlyingAmount = underlyingSavedPerPeriod[lastPeriodId].mul(userTotal).div(tokenSupply);\\n            underlyingOfIBT.safeTransfer(_user, userUnderlyingAmount);\\n        }\\n        ibt.safeTransfer(_user, redeemableTokens);\\n\\n        emit ExpiredTokensWithdrawn(_user, redeemableTokens);\\n    }\\n\\n    /**\\n     * @notice Getter for redeemable expired tokens info\\n     * @param _user the address of the user to check the redeemable tokens of\\n     * @param _lpTokenId the lp token id\\n     * @return the amount, the period id and the pair id of the expired tokens of the user\\n     */\\n    function getExpiredTokensInfo(address _user, uint256 _lpTokenId)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(poolTokens.getAMMId(_lpTokenId) == ammId, \\\"AMM: invalid amm id\\\");\\n        uint256 pairID = poolTokens.getPairId(_lpTokenId);\\n        require(pairID < 2, \\\"AMM: invalid pair id\\\");\\n        uint256 periodIndex = poolTokens.getPeriodIndex(_lpTokenId);\\n        require(periodIndex <= currentPeriodIndex, \\\"AMM: invalid period id\\\");\\n        if (periodIndex == 0 || periodIndex == currentPeriodIndex) return (0, periodIndex, pairID);\\n        uint256 redeemable =\\n            poolTokens\\n                .balanceOf(_user, getLPTokenId(ammId, periodIndex, pairID))\\n                .mul(poolToUnderlyingAtPeriod[pairID][periodIndex])\\n                .div(totalLPSupply[pairID][periodIndex]);\\n        for (uint256 i = periodIndex.add(1); i < currentPeriodIndex; i++) {\\n            redeemable = redeemable\\n                .mul(AMMMaths.UNIT.add(futureVault.convertIBTToUnderlying(generatedYieldAtPeriod[i])))\\n                .div(AMMMaths.UNIT);\\n        }\\n        return (\\n            futureVault.convertUnderlyingtoIBT(\\n                redeemable.add(\\n                    redeemable.mul(futureVault.convertIBTToUnderlying(futureVault.getUnrealisedYieldPerPT())).div(\\n                        AMMMaths.UNIT\\n                    )\\n                )\\n            ),\\n            periodIndex,\\n            pairID\\n        );\\n    }\\n\\n    function _getRedeemableExpiredTokens(address _user, uint256 _lpTokenId) internal view returns (uint256) {}\\n\\n    /* Swapping functions */\\n    function swapExactAmountIn(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _tokenAmountIn,\\n        uint256 _tokenOut,\\n        uint256 _minAmountOut,\\n        address _to\\n    ) external override nonReentrant returns (uint256 tokenAmountOut, uint256 spotPriceAfter) {\\n        ammIsActive();\\n        pairLiquidityIsInitialized(_pairID);\\n        tokenIdsAreValid(_tokenIn, _tokenOut);\\n        _updateWeightsFromYieldAtBlock();\\n\\n        (tokenAmountOut, spotPriceAfter) = calcOutAndSpotGivenIn(\\n            _pairID,\\n            _tokenIn,\\n            _tokenAmountIn,\\n            _tokenOut,\\n            _minAmountOut\\n        );\\n\\n        _pullToken(msg.sender, _pairID, _tokenIn, _tokenAmountIn);\\n        _pushToken(_to, _pairID, _tokenOut, tokenAmountOut);\\n        emit Swapped(msg.sender, _pairID, _tokenIn, _tokenOut, _tokenAmountIn, tokenAmountOut, _to);\\n        return (tokenAmountOut, spotPriceAfter);\\n    }\\n\\n    function calcOutAndSpotGivenIn(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _tokenAmountIn,\\n        uint256 _tokenOut,\\n        uint256 _minAmountOut\\n    ) public view override returns (uint256 tokenAmountOut, uint256 spotPriceAfter) {\\n        tokenIdsAreValid(_tokenIn, _tokenOut);\\n        uint256[2] memory balances = pairs[_pairID].balances;\\n        uint256[2] memory weights = pairs[_pairID].weights;\\n        require(weights[_tokenIn] > 0 && weights[_tokenOut] > 0, \\\"AMM: Invalid token address\\\");\\n\\n        uint256 spotPriceBefore =\\n            AMMMaths.calcSpotPrice(balances[_tokenIn], weights[_tokenIn], balances[_tokenOut], weights[_tokenOut], swapFee);\\n\\n        tokenAmountOut = AMMMaths.calcOutGivenIn(\\n            balances[_tokenIn],\\n            weights[_tokenIn],\\n            balances[_tokenOut],\\n            weights[_tokenOut],\\n            _tokenAmountIn,\\n            swapFee\\n        );\\n        require(tokenAmountOut >= _minAmountOut, \\\"AMM: Min amount not reached\\\");\\n\\n        spotPriceAfter = AMMMaths.calcSpotPrice(\\n            balances[_tokenIn].add(_tokenAmountIn),\\n            weights[_tokenIn],\\n            balances[_tokenOut].sub(tokenAmountOut),\\n            weights[_tokenOut],\\n            swapFee\\n        );\\n        require(spotPriceAfter >= spotPriceBefore, \\\"AMM: Math approximation error\\\");\\n    }\\n\\n    function swapExactAmountOut(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _maxAmountIn,\\n        uint256 _tokenOut,\\n        uint256 _tokenAmountOut,\\n        address _to\\n    ) external override nonReentrant returns (uint256 tokenAmountIn, uint256 spotPriceAfter) {\\n        ammIsActive();\\n        pairLiquidityIsInitialized(_pairID);\\n        tokenIdsAreValid(_tokenIn, _tokenOut);\\n        _updateWeightsFromYieldAtBlock();\\n\\n        (tokenAmountIn, spotPriceAfter) = calcInAndSpotGivenOut(_pairID, _tokenIn, _maxAmountIn, _tokenOut, _tokenAmountOut);\\n\\n        _pullToken(msg.sender, _pairID, _tokenIn, tokenAmountIn);\\n        _pushToken(_to, _pairID, _tokenOut, _tokenAmountOut);\\n        emit Swapped(msg.sender, _pairID, _tokenIn, _tokenOut, tokenAmountIn, _tokenAmountOut, _to);\\n\\n        return (tokenAmountIn, spotPriceAfter);\\n    }\\n\\n    function calcInAndSpotGivenOut(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _maxAmountIn,\\n        uint256 _tokenOut,\\n        uint256 _tokenAmountOut\\n    ) public view override returns (uint256 tokenAmountIn, uint256 spotPriceAfter) {\\n        tokenIdsAreValid(_tokenIn, _tokenOut);\\n        uint256 inTokenBalance = pairs[_pairID].balances[_tokenIn];\\n        uint256 outTokenBalance = pairs[_pairID].balances[_tokenOut];\\n        uint256 tokenWeightIn = pairs[_pairID].weights[_tokenIn];\\n        uint256 tokenWeightOut = pairs[_pairID].weights[_tokenOut];\\n        require(tokenWeightIn > 0 && tokenWeightOut > 0, \\\"AMM: Invalid token address\\\");\\n\\n        uint256 spotPriceBefore =\\n            AMMMaths.calcSpotPrice(inTokenBalance, tokenWeightIn, outTokenBalance, tokenWeightOut, swapFee);\\n\\n        tokenAmountIn = AMMMaths.calcInGivenOut(\\n            inTokenBalance,\\n            tokenWeightIn,\\n            outTokenBalance,\\n            tokenWeightOut,\\n            _tokenAmountOut,\\n            swapFee\\n        );\\n        require(tokenAmountIn <= _maxAmountIn, \\\"AMM: Max amount in reached\\\");\\n\\n        spotPriceAfter = AMMMaths.calcSpotPrice(\\n            inTokenBalance.add(tokenAmountIn),\\n            tokenWeightIn,\\n            outTokenBalance.sub(_tokenAmountOut),\\n            tokenWeightOut,\\n            swapFee\\n        );\\n        require(spotPriceAfter >= spotPriceBefore, \\\"AMM: Math approximation error\\\");\\n    }\\n\\n    function joinSwapExternAmountIn(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _tokenAmountIn,\\n        uint256 _minPoolAmountOut\\n    ) external override nonReentrant returns (uint256 poolAmountOut) {\\n        ammIsActive();\\n        pairLiquidityIsInitialized(_pairID);\\n\\n        require(_tokenIn < 2, \\\"AMM: Invalid Token Id\\\");\\n        _updateWeightsFromYieldAtBlock();\\n\\n        Pair memory pair = pairs[_pairID];\\n\\n        uint256 inTokenBalance = pair.balances[_tokenIn];\\n        uint256 tokenWeightIn = pair.weights[_tokenIn];\\n\\n        require(tokenWeightIn > 0, \\\"AMM: Invalid token address\\\");\\n        require(_tokenAmountIn <= inTokenBalance.mul(AMMMaths.MAX_IN_RATIO) / AMMMaths.UNIT, \\\"AMM: Max in ratio reached\\\");\\n\\n        poolAmountOut = AMMMaths.calcPoolOutGivenSingleIn(\\n            inTokenBalance,\\n            tokenWeightIn,\\n            totalLPSupply[_pairID][currentPeriodIndex],\\n            AMMMaths.UNIT,\\n            _tokenAmountIn,\\n            swapFee\\n        );\\n\\n        require(poolAmountOut >= _minPoolAmountOut, \\\"AMM: Min amount not reached\\\");\\n\\n        _pullToken(msg.sender, _pairID, _tokenIn, _tokenAmountIn);\\n        _joinPool(msg.sender, poolAmountOut, _pairID);\\n        return poolAmountOut;\\n    }\\n\\n    function joinSwapPoolAmountOut(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _poolAmountOut,\\n        uint256 _maxAmountIn\\n    ) external override nonReentrant returns (uint256 tokenAmountIn) {\\n        ammIsActive();\\n        pairLiquidityIsInitialized(_pairID);\\n        require(_tokenIn < 2, \\\"AMM: Invalid Token Id\\\");\\n        _updateWeightsFromYieldAtBlock();\\n        Pair memory pair = pairs[_pairID];\\n\\n        uint256 inTokenBalance = pair.balances[_tokenIn];\\n        uint256 tokenWeightIn = pair.weights[_tokenIn];\\n\\n        require(tokenWeightIn > 0, \\\"AMM: Invalid token address\\\");\\n        tokenAmountIn = AMMMaths.calcSingleInGivenPoolOut(\\n            inTokenBalance,\\n            tokenWeightIn,\\n            totalLPSupply[_pairID][currentPeriodIndex],\\n            AMMMaths.UNIT,\\n            _poolAmountOut,\\n            swapFee\\n        );\\n\\n        require(tokenAmountIn <= inTokenBalance.mul(AMMMaths.MAX_IN_RATIO) / AMMMaths.UNIT, \\\"AMM: Max in ratio reached\\\");\\n        require(tokenAmountIn != 0, \\\"AMM: Math approximation error\\\");\\n        require(tokenAmountIn <= _maxAmountIn, \\\"AMM: Max amount in reached\\\");\\n\\n        _pullToken(msg.sender, _pairID, _tokenIn, tokenAmountIn);\\n        _joinPool(msg.sender, _poolAmountOut, _pairID);\\n        return tokenAmountIn;\\n    }\\n\\n    function exitSwapPoolAmountIn(\\n        uint256 _pairID,\\n        uint256 _tokenOut,\\n        uint256 _poolAmountIn,\\n        uint256 _minAmountOut\\n    ) external override nonReentrant returns (uint256 tokenAmountOut) {\\n        ammIsActive();\\n        pairLiquidityIsInitialized(_pairID);\\n        require(_tokenOut < 2, \\\"AMM: Invalid Token Id\\\");\\n\\n        _updateWeightsFromYieldAtBlock();\\n        Pair memory pair = pairs[_pairID];\\n\\n        uint256 outTokenBalance = pair.balances[_tokenOut];\\n        uint256 tokenWeightOut = pair.weights[_tokenOut];\\n        require(tokenWeightOut > 0, \\\"AMM: Invalid token address\\\");\\n\\n        tokenAmountOut = AMMMaths.calcSingleOutGivenPoolIn(\\n            outTokenBalance,\\n            tokenWeightOut,\\n            totalLPSupply[_pairID][currentPeriodIndex],\\n            AMMMaths.UNIT,\\n            _poolAmountIn,\\n            swapFee\\n        );\\n\\n        require(tokenAmountOut <= outTokenBalance.mul(AMMMaths.MAX_OUT_RATIO) / AMMMaths.UNIT, \\\"AMM: Max out ratio reached\\\");\\n        require(tokenAmountOut >= _minAmountOut, \\\"AMM: Min amount not reached\\\");\\n\\n        _exitPool(msg.sender, _poolAmountIn, _pairID);\\n        _pushToken(msg.sender, _pairID, _tokenOut, tokenAmountOut);\\n        return tokenAmountOut;\\n    }\\n\\n    function exitSwapExternAmountOut(\\n        uint256 _pairID,\\n        uint256 _tokenOut,\\n        uint256 _tokenAmountOut,\\n        uint256 _maxPoolAmountIn\\n    ) external override nonReentrant returns (uint256 poolAmountIn) {\\n        ammIsActive();\\n        pairLiquidityIsInitialized(_pairID);\\n        require(_tokenOut < 2, \\\"AMM: Invalid Token Id\\\");\\n\\n        _updateWeightsFromYieldAtBlock();\\n        Pair memory pair = pairs[_pairID];\\n\\n        uint256 outTokenBalance = pair.balances[_tokenOut];\\n        uint256 tokenWeightOut = pair.weights[_tokenOut];\\n        require(tokenWeightOut > 0, \\\"AMM: Invalid token address\\\");\\n        require(\\n            _tokenAmountOut <= outTokenBalance.mul(AMMMaths.MAX_OUT_RATIO) / AMMMaths.UNIT,\\n            \\\"AMM: Max out ratio reached\\\"\\n        );\\n\\n        poolAmountIn = AMMMaths.calcPoolInGivenSingleOut(\\n            outTokenBalance,\\n            tokenWeightOut,\\n            totalLPSupply[_pairID][currentPeriodIndex],\\n            AMMMaths.UNIT,\\n            _tokenAmountOut,\\n            swapFee\\n        );\\n\\n        require(poolAmountIn != 0, \\\"AMM: Math approximation error\\\");\\n        require(poolAmountIn <= _maxPoolAmountIn, \\\"AMM: Max amount is reached\\\");\\n\\n        _exitPool(msg.sender, poolAmountIn, _pairID);\\n        _pushToken(msg.sender, _pairID, _tokenOut, _tokenAmountOut);\\n        return poolAmountIn;\\n    }\\n\\n    /* Liquidity-related functions */\\n\\n    /**\\n     * @notice Create liquidity on the pair setting an initial price\\n     */\\n    function createLiquidity(uint256 _pairID, uint256[2] memory _tokenAmounts) external override nonReentrant {\\n        ammIsActive();\\n        require(!pairs[_pairID].liquidityIsInitialized, \\\"AMM: Liquidity already present\\\");\\n        require(_tokenAmounts[0] != 0 && _tokenAmounts[1] != 0, \\\"AMM: Tokens Liquidity not exists\\\");\\n        _pullToken(msg.sender, _pairID, 0, _tokenAmounts[0]);\\n        _pullToken(msg.sender, _pairID, 1, _tokenAmounts[1]);\\n        _joinPool(msg.sender, AMMMaths.UNIT, _pairID);\\n        pairs[_pairID].liquidityIsInitialized = true;\\n        emit LiquidityCreated(msg.sender, _pairID);\\n    }\\n\\n    function _pullToken(\\n        address _sender,\\n        uint256 _pairID,\\n        uint256 _tokenID,\\n        uint256 _amount\\n    ) internal {\\n        address _tokenIn = _tokenID == 0 ? address(pt) : pairs[_pairID].tokenAddress;\\n        pairs[_pairID].balances[_tokenID] = pairs[_pairID].balances[_tokenID].add(_amount);\\n        IERC20(_tokenIn).safeTransferFrom(_sender, address(this), _amount);\\n        emit LiquidityIncreased(_sender, _pairID, _tokenID, _amount);\\n    }\\n\\n    function _pushToken(\\n        address _recipient,\\n        uint256 _pairID,\\n        uint256 _tokenID,\\n        uint256 _amount\\n    ) internal {\\n        address _tokenIn = _tokenID == 0 ? address(pt) : pairs[_pairID].tokenAddress;\\n        pairs[_pairID].balances[_tokenID] = pairs[_pairID].balances[_tokenID].sub(_amount);\\n        IERC20(_tokenIn).safeTransfer(_recipient, _amount);\\n        emit LiquidityDecreased(_recipient, _pairID, _tokenID, _amount);\\n    }\\n\\n    function addLiquidity(\\n        uint256 _pairID,\\n        uint256 _poolAmountOut,\\n        uint256[2] memory _maxAmountsIn\\n    ) external override nonReentrant {\\n        ammIsActive();\\n        pairLiquidityIsInitialized(_pairID);\\n        require(_poolAmountOut != 0, \\\"AMM: Amount cannot be 0\\\");\\n        _updateWeightsFromYieldAtBlock();\\n\\n        uint256 poolTotal = totalLPSupply[_pairID][currentPeriodIndex];\\n\\n        for (uint256 i; i < 2; i++) {\\n            uint256 amountIn = _computeAmountWithShares(pairs[_pairID].balances[i], _poolAmountOut, poolTotal);\\n            require(amountIn != 0, \\\"AMM: Math approximation error\\\");\\n            require(amountIn <= _maxAmountsIn[i], \\\"AMM: Max amount in reached\\\");\\n            _pullToken(msg.sender, _pairID, i, amountIn);\\n        }\\n        _joinPool(msg.sender, _poolAmountOut, _pairID);\\n    }\\n\\n    function removeLiquidity(\\n        uint256 _pairID,\\n        uint256 _poolAmountIn,\\n        uint256[2] memory _minAmountsOut\\n    ) external override nonReentrant {\\n        ammIsActive();\\n        pairLiquidityIsInitialized(_pairID);\\n        require(_poolAmountIn != 0, \\\"AMM: Amount cannot be 0\\\");\\n        _updateWeightsFromYieldAtBlock();\\n\\n        uint256 poolTotal = totalLPSupply[_pairID][currentPeriodIndex];\\n\\n        for (uint256 i; i < 2; i++) {\\n            uint256 amountOut = _computeAmountWithShares(pairs[_pairID].balances[i], _poolAmountIn, poolTotal);\\n            require(amountOut != 0, \\\"AMM: Math approximation error\\\");\\n            require(amountOut >= _minAmountsOut[i], \\\"AMM: Min amount not reached\\\");\\n            _pushToken(msg.sender, _pairID, i, amountOut.mul(AMMMaths.UNIT.sub(AMMMaths.EXIT_FEE)).div(AMMMaths.UNIT));\\n        }\\n        _exitPool(msg.sender, _poolAmountIn, _pairID);\\n    }\\n\\n    function _joinPool(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _pairID\\n    ) internal {\\n        poolTokens.mint(_user, ammId, uint64(currentPeriodIndex), uint32(_pairID), _amount, bytes(\\\"\\\"));\\n        totalLPSupply[_pairID][currentPeriodIndex] = totalLPSupply[_pairID][currentPeriodIndex].add(_amount);\\n        emit PoolJoined(_user, _pairID, _amount);\\n    }\\n\\n    function _exitPool(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _pairID\\n    ) internal {\\n        uint256 lpTokenId = getLPTokenId(ammId, currentPeriodIndex, _pairID);\\n\\n        uint256 exitFee = _amount.mul(AMMMaths.EXIT_FEE).div(AMMMaths.UNIT);\\n        uint256 userAmount = _amount.sub(exitFee);\\n        poolTokens.burnFrom(_user, lpTokenId, userAmount);\\n        poolTokens.safeTransferFrom(_user, feesRecipient, lpTokenId, exitFee, \\\"\\\");\\n\\n        totalLPSupply[_pairID][currentPeriodIndex] = totalLPSupply[_pairID][currentPeriodIndex].sub(userAmount);\\n        emit PoolExited(_user, _pairID, _amount);\\n    }\\n\\n    function setSwappingFees(uint256 _swapFee) external override isAdmin {\\n        require(_swapFee < AMMMaths.UNIT, \\\"AMM: Fee must be < 1\\\");\\n        swapFee = _swapFee;\\n        emit SwappingFeeSet(_swapFee);\\n    }\\n\\n    // Emergency withdraw - will only rescue funds mistakenly sent to the address\\n    function rescueFunds(IERC20 _token, address _recipient) external isAdmin {\\n        uint256 pairId = tokenToPairID[address(_token)];\\n        bool istokenPresent = false;\\n        if (pairId == 0) {\\n            if (_token == pt || address(_token) == pairs[0].tokenAddress) {\\n                istokenPresent = true;\\n            }\\n        } else {\\n            istokenPresent = true;\\n        }\\n        require(!istokenPresent, \\\"AMM: Token is present\\\");\\n        uint256 toRescue = _token.balanceOf(address(this));\\n        require(toRescue > 0, \\\"AMM: No funds to rescue\\\");\\n        _token.safeTransfer(_recipient, toRescue);\\n    }\\n\\n    /* Utils*/\\n    function _computeAmountWithShares(\\n        uint256 _amount,\\n        uint256 _sharesAmount,\\n        uint256 _sharesTotalAmount\\n    ) internal pure returns (uint256) {\\n        return _sharesAmount.mul(_amount).div(_sharesTotalAmount);\\n    }\\n\\n    /* Getters */\\n\\n    /**\\n     * @notice Getter for the spot price of a pair\\n     * @param _pairID the id of the pair\\n     * @param _tokenIn the id of the tokens sent\\n     * @param _tokenOut the id of the tokens received\\n     * @return the sport price of the pair\\n     */\\n    function getSpotPrice(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _tokenOut\\n    ) public view override returns (uint256) {\\n        return\\n            AMMMaths.calcSpotPrice(\\n                pairs[_pairID].balances[_tokenIn],\\n                pairs[_pairID].weights[_tokenIn],\\n                pairs[_pairID].balances[_tokenOut],\\n                pairs[_pairID].weights[_tokenOut],\\n                swapFee\\n            );\\n    }\\n\\n    /**\\n     * @notice Getter for the paused state of the AMM\\n     * @return true if the AMM is paused, false otherwise\\n     */\\n    function getAMMState() external view returns (AMMGlobalState) {\\n        return state;\\n    }\\n\\n    /**\\n     * @notice Getter for the address of the corresponding future vault\\n     * @return the address of the future vault\\n     */\\n    function getFutureAddress() external view override returns (address) {\\n        return address(futureVault);\\n    }\\n\\n    /**\\n     * @notice Getter for the pt address\\n     * @return the pt address\\n     */\\n    function getPTAddress() external view override returns (address) {\\n        return address(pt);\\n    }\\n\\n    /**\\n     * @notice Getter for the address of the underlying token of the ibt\\n     * @return the address of the underlying token of the ibt\\n     */\\n    function getUnderlyingOfIBTAddress() external view override returns (address) {\\n        return address(underlyingOfIBT);\\n    }\\n\\n    /**\\n     * @notice Getter for the address of the ibt\\n     * @return the address of the ibt token\\n     */\\n    function getIBTAddress() external view returns (address) {\\n        return address(ibt);\\n    }\\n\\n    /**\\n     * @notice Getter for the fyt address\\n     * @return the fyt address\\n     */\\n    function getFYTAddress() external view override returns (address) {\\n        return address(fyt);\\n    }\\n\\n    /**\\n     * @notice Getter for the pool token address\\n     * @return the pool tokens address\\n     */\\n    function getPoolTokenAddress() external view returns (address) {\\n        return address(poolTokens);\\n    }\\n\\n    function getPairWithID(uint256 _pairID) external view override returns (Pair memory) {\\n        return pairs[_pairID];\\n    }\\n\\n    function getTotalSupplyWithTokenId(uint256 _tokenId) external view returns (uint256) {\\n        uint256 pairId = poolTokens.getPairId(_tokenId);\\n        uint256 periodId = poolTokens.getPeriodIndex(_tokenId);\\n        return totalLPSupply[pairId][periodId];\\n    }\\n\\n    function getPairIDForToken(address _tokenAddress) external view returns (uint256) {\\n        if (tokenToPairID[_tokenAddress] == 0)\\n            require(pairs[0].tokenAddress == _tokenAddress || _tokenAddress == address(pt), \\\"AMM: invalid token address\\\");\\n        return tokenToPairID[_tokenAddress];\\n    }\\n\\n    function getLPTokenId(\\n        uint256 _ammId,\\n        uint256 _periodIndex,\\n        uint256 _pairID\\n    ) public pure override returns (uint256) {\\n        return (_ammId << 192) | (_periodIndex << 128) | (_pairID << 96);\\n    }\\n\\n    /* Modifier functions */\\n\\n    /**\\n     * @notice Check state of AMM\\n     */\\n    function ammIsActive() private view {\\n        require(state == AMMGlobalState.Activated, \\\"AMM: AMM not active\\\");\\n    }\\n\\n    /**\\n     * @notice Check liquidity is initilized for the given _pairId\\n     * @param _pairID the id of the pair\\n     */\\n    function pairLiquidityIsInitialized(uint256 _pairID) private view {\\n        require(pairs[_pairID].liquidityIsInitialized, \\\"AMM: Pair not active\\\");\\n    }\\n\\n    /**\\n     * @notice Check valid Token ID's\\n     * @param _tokenIdInd the id of token In\\n     * @param _tokenIdOut the id of token Out\\n     */\\n    function tokenIdsAreValid(uint256 _tokenIdInd, uint256 _tokenIdOut) private pure {\\n        require(_tokenIdInd < 2 && _tokenIdOut < 2 && _tokenIdInd != _tokenIdOut, \\\"AMM: Invalid Token ID\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAMM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IAMM {\\n    /* Struct */\\n    struct Pair {\\n        address tokenAddress; // first is always PT\\n        uint256[2] weights;\\n        uint256[2] balances;\\n        bool liquidityIsInitialized;\\n    }\\n\\n    /**\\n     * @notice finalize the initialization of the amm\\n     * @dev must be called during the first period the amm is supposed to be active\\n     */\\n    function finalize() external;\\n\\n    /**\\n     * @notice switch period\\n     * @dev must be called after each new period switch\\n     * @dev the switch will auto renew part of the tokens and update the weights accordingly\\n     */\\n    function switchPeriod() external;\\n\\n    /**\\n     * @notice toggle amm pause for pausing/resuming all user functionalities\\n     */\\n    function togglePauseAmm() external;\\n\\n    /**\\n     * @notice Withdraw expired LP tokens\\n     */\\n    function withdrawExpiredToken(address _user, uint256 _lpTokenId) external;\\n\\n    /**\\n     * @notice Getter for redeemable expired tokens info\\n     * @param _user the address of the user to check the redeemable tokens of\\n     * @param _lpTokenId the lp token id\\n     * @return the amount, the period id and the pair id of the expired tokens of the user\\n     */\\n    function getExpiredTokensInfo(address _user, uint256 _lpTokenId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function swapExactAmountIn(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _tokenAmountIn,\\n        uint256 _tokenOut,\\n        uint256 _minAmountOut,\\n        address _to\\n    ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\\n\\n    function swapExactAmountOut(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _maxAmountIn,\\n        uint256 _tokenOut,\\n        uint256 _tokenAmountOut,\\n        address _to\\n    ) external returns (uint256 tokenAmountIn, uint256 spotPriceAfter);\\n\\n    /**\\n     * @notice Create liquidity on the pair setting an initial price\\n     */\\n    function createLiquidity(uint256 _pairID, uint256[2] memory _tokenAmounts) external;\\n\\n    function addLiquidity(\\n        uint256 _pairID,\\n        uint256 _poolAmountOut,\\n        uint256[2] memory _maxAmountsIn\\n    ) external;\\n\\n    function removeLiquidity(\\n        uint256 _pairID,\\n        uint256 _poolAmountIn,\\n        uint256[2] memory _minAmountsOut\\n    ) external;\\n\\n    function joinSwapExternAmountIn(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _tokenAmountIn,\\n        uint256 _minPoolAmountOut\\n    ) external returns (uint256 poolAmountOut);\\n\\n    function joinSwapPoolAmountOut(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _poolAmountOut,\\n        uint256 _maxAmountIn\\n    ) external returns (uint256 tokenAmountIn);\\n\\n    function exitSwapPoolAmountIn(\\n        uint256 _pairID,\\n        uint256 _tokenOut,\\n        uint256 _poolAmountIn,\\n        uint256 _minAmountOut\\n    ) external returns (uint256 tokenAmountOut);\\n\\n    function exitSwapExternAmountOut(\\n        uint256 _pairID,\\n        uint256 _tokenOut,\\n        uint256 _tokenAmountOut,\\n        uint256 _maxPoolAmountIn\\n    ) external returns (uint256 poolAmountIn);\\n\\n    function setSwappingFees(uint256 _swapFee) external;\\n\\n    /* Getters */\\n    function calcOutAndSpotGivenIn(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _tokenAmountIn,\\n        uint256 _tokenOut,\\n        uint256 _minAmountOut\\n    ) external view returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\\n\\n    function calcInAndSpotGivenOut(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _maxAmountIn,\\n        uint256 _tokenOut,\\n        uint256 _tokenAmountOut\\n    ) external view returns (uint256 tokenAmountIn, uint256 spotPriceAfter);\\n\\n    /**\\n     * @notice Getter for the spot price of a pair\\n     * @param _pairID the id of the pair\\n     * @param _tokenIn the id of the tokens sent\\n     * @param _tokenOut the id of the tokens received\\n     * @return the sport price of the pair\\n     */\\n    function getSpotPrice(\\n        uint256 _pairID,\\n        uint256 _tokenIn,\\n        uint256 _tokenOut\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the address of the corresponding future vault\\n     * @return the address of the future vault\\n     */\\n    function getFutureAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the pt address\\n     * @return the pt address\\n     */\\n    function getPTAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the address of the underlying token of the ibt\\n     * @return the address of the underlying token of the ibt\\n     */\\n    function getUnderlyingOfIBTAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the fyt address\\n     * @return the fyt address\\n     */\\n    function getFYTAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the PT weight in the first pair (0)\\n     * @return the weight of the pt\\n     */\\n    function getPTWeightInPair() external view returns (uint256);\\n\\n    function getPairWithID(uint256 _pairID) external view returns (Pair memory);\\n\\n    function getLPTokenId(\\n        uint256 _ammId,\\n        uint256 _periodIndex,\\n        uint256 _pairID\\n    ) external pure returns (uint256);\\n\\n    function ammId() external returns (uint64);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IERC20 is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILPToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\nimport \\\"contracts/interfaces/IERC1155.sol\\\";\\n\\npragma solidity ^0.7.6;\\n\\ninterface ILPToken is IERC1155 {\\n    function amms(uint64 _ammId) external view returns (address);\\n\\n    /**\\n     * @notice Getter for AMM id\\n     * @param _id the id of the LP Token\\n     * @return AMM id\\n     */\\n    function getAMMId(uint256 _id) external pure returns (uint64);\\n\\n    /**\\n     * @notice Getter for PeriodIndex\\n     * @param _id the id of the LP Token\\n     * @return period index\\n     */\\n    function getPeriodIndex(uint256 _id) external pure returns (uint64);\\n\\n    /**\\n     * @notice Getter for PairId\\n     * @param _id the index of the Pair\\n     * @return pair index\\n     */\\n    function getPairId(uint256 _id) external pure returns (uint32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFutureVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"contracts/interfaces/IPT.sol\\\";\\nimport \\\"contracts/interfaces/IRegistry.sol\\\";\\nimport \\\"contracts/interfaces/IFutureWallet.sol\\\";\\n\\ninterface IFutureVault {\\n    /* Events */\\n    event NewPeriodStarted(uint256 _newPeriodIndex);\\n    event FutureWalletSet(address _futureWallet);\\n    event RegistrySet(IRegistry _registry);\\n    event FundsDeposited(address _user, uint256 _amount);\\n    event FundsWithdrawn(address _user, uint256 _amount);\\n    event PTSet(IPT _pt);\\n    event LiquidityTransfersPaused();\\n    event LiquidityTransfersResumed();\\n    event DelegationCreated(address _delegator, address _receiver, uint256 _amount);\\n    event DelegationRemoved(address _delegator, address _receiver, uint256 _amount);\\n\\n    /* Params */\\n    /**\\n     * @notice Getter for the PERIOD future parameter\\n     * @return returns the period duration of the future\\n     */\\n    function PERIOD_DURATION() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the PLATFORM_NAME future parameter\\n     * @return returns the platform of the future\\n     */\\n    function PLATFORM_NAME() external view returns (string memory);\\n\\n    /**\\n     * @notice Start a new period\\n     * @dev needs corresponding permissions for sender\\n     */\\n    function startNewPeriod() external;\\n\\n    /**\\n     * @notice Update the state of the user and mint claimable pt\\n     * @param _user user adress\\n     */\\n    function updateUserState(address _user) external;\\n\\n    /**\\n     * @notice Send the user their owed FYT (and pt if there are some claimable)\\n     * @param _user address of the user to send the FYT to\\n     */\\n    function claimFYT(address _user, uint256 _amount) external;\\n\\n    /**\\n     * @notice Deposit funds into ongoing period\\n     * @param _user user adress\\n     * @param _amount amount of funds to unlock\\n     * @dev part of the amount deposited will be used to buy back the yield already generated proportionally to the amount deposited\\n     */\\n    function deposit(address _user, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sender unlocks the locked funds corresponding to their pt holding\\n     * @param _user user adress\\n     * @param _amount amount of funds to unlock\\n     * @dev will require a transfer of FYT of the ongoing period corresponding to the funds unlocked\\n     */\\n    function withdraw(address _user, uint256 _amount) external;\\n\\n    /**\\n     * @notice Create a delegation from one address to another\\n     * @param _delegator the address delegating its future FYTs\\n     * @param _receiver the address receiving the future FYTs\\n     * @param _amount the of future FYTs to delegate\\n     */\\n    function createFYTDelegationTo(\\n        address _delegator,\\n        address _receiver,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Remove a delegation from one address to another\\n     * @param _delegator the address delegating its future FYTs\\n     * @param _receiver the address receiving the future FYTs\\n     * @param _amount the of future FYTs to remove from the delegation\\n     */\\n    function withdrawFYTDelegationFrom(\\n        address _delegator,\\n        address _receiver,\\n        uint256 _amount\\n    ) external;\\n\\n    /* Getters */\\n\\n    /**\\n     * @notice Getter the total number of FYTs on address is delegating\\n     * @param _delegator the delegating address\\n     * @return totalDelegated the number of FYTs delegated\\n     */\\n    function getTotalDelegated(address _delegator) external view returns (uint256 totalDelegated);\\n\\n    /**\\n     * @notice Getter for next period index\\n     * @return next period index\\n     * @dev index starts at 1\\n     */\\n    function getNextPeriodIndex() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for current period index\\n     * @return current period index\\n     * @dev index starts at 1\\n     */\\n    function getCurrentPeriodIndex() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the amount of pt that the user can claim\\n     * @param _user user to check the check the claimable pt of\\n     * @return the amount of pt claimable by the user\\n     */\\n    function getClaimablePT(address _user) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the amount (in underlying) of premium redeemable with the corresponding amount of fyt/pt to be burned\\n     * @param _user user adress\\n     * @return premiumLocked the premium amount unlockage at this period (in underlying), amountRequired the amount of pt/fyt required for that operation\\n     */\\n    function getUserEarlyUnlockablePremium(address _user)\\n        external\\n        view\\n        returns (uint256 premiumLocked, uint256 amountRequired);\\n\\n    /**\\n     * @notice Getter for user IBT amount that is unlockable\\n     * @param _user the user to unlock the IBT from\\n     * @return the amount of IBT the user can unlock\\n     */\\n    function getUnlockableFunds(address _user) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the amount of FYT that the user can claim for a certain period\\n     * @param _user the user to check the claimable FYT of\\n     * @param _periodIndex period ID to check the claimable FYT of\\n     * @return the amount of FYT claimable by the user for this period ID\\n     */\\n    function getClaimableFYTForPeriod(address _user, uint256 _periodIndex) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the yield currently generated by one pt for the current period\\n     * @return the amount of yield (in IBT) generated during the current period\\n     */\\n    function getUnrealisedYieldPerPT() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the number of pt that can be minted for an amoumt deposited now\\n     * @param _amount the amount to of IBT to deposit\\n     * @return the number of pt that can be minted for that amount\\n     */\\n    function getPTPerAmountDeposited(uint256 _amount) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for premium in underlying tokens that can be redeemed at the end of the period of the deposit\\n     * @param _amount the amount of underlying deposited\\n     * @return the number of underlying of the ibt deposited that will be redeemable\\n     */\\n    function getPremiumPerUnderlyingDeposited(uint256 _amount) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for total underlying deposited in the vault\\n     * @return the total amount of funds deposited in the vault (in underlying)\\n     */\\n    function getTotalUnderlyingDeposited() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the total yield generated during one period\\n     * @param _periodID the period id\\n     * @return the total yield in underlying value\\n     */\\n    function getYieldOfPeriod(uint256 _periodID) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for controller address\\n     * @return the controller address\\n     */\\n    function getControllerAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for futureWallet address\\n     * @return futureWallet address\\n     */\\n    function getFutureWalletAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the IBT address\\n     * @return IBT address\\n     */\\n    function getIBTAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for future pt address\\n     * @return pt address\\n     */\\n    function getPTAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for FYT address of a particular period\\n     * @param _periodIndex period index\\n     * @return FYT address\\n     */\\n    function getFYTofPeriod(uint256 _periodIndex) external view returns (address);\\n\\n    /**\\n     * @notice Getter for the terminated state of the future\\n     * @return true if this vault is terminated\\n     */\\n    function isTerminated() external view returns (bool);\\n\\n    /**\\n     * @notice Getter for the performance fee factor of the current period\\n     * @return the performance fee factor of the futureVault\\n     */\\n    function getPerformanceFeeFactor() external view returns (uint256);\\n\\n    /* Rewards mecanisms*/\\n\\n    /**\\n     * @notice Harvest all rewards from the vault\\n     */\\n    function harvestRewards() external;\\n\\n    /**\\n     * @notice Transfer all the redeemable rewards to set defined recipient\\n     */\\n    function redeemAllVaultRewards() external;\\n\\n    /**\\n     * @notice Transfer the specified token reward balance tot the defined recipient\\n     * @param _rewardToken the reward token to redeem the balance of\\n     */\\n    function redeemVaultRewards(address _rewardToken) external;\\n\\n    /**\\n     * @notice Add a token to the list of reward tokens\\n     * @param _token the reward token to add to the list\\n     * @dev the token must be different than the ibt\\n     */\\n    function addRewardsToken(address _token) external;\\n\\n    /**\\n     * @notice Getter to check if a token is in the reward tokens list\\n     * @param _token the token to check if it is in the list\\n     * @return true if the token is a reward token\\n     */\\n    function isRewardToken(address _token) external view returns (bool);\\n\\n    /**\\n     * @notice Getter for the reward token at an index\\n     * @param _index the index of the reward token in the list\\n     * @return the address of the token at this index\\n     */\\n    function getRewardTokenAt(uint256 _index) external view returns (address);\\n\\n    /**\\n     * @notice Getter for the size of the list of reward tokens\\n     * @return the number of token in the list\\n     */\\n    function getRewardTokensCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the address of the rewards recipient\\n     * @return the address of the rewards recipient\\n     */\\n    function getRewardsRecipient() external view returns (address);\\n\\n    /**\\n     * @notice Setter for the address of the rewards recipient\\n     */\\n    function setRewardRecipient(address _recipient) external;\\n\\n    /* Admin functions */\\n\\n    /**\\n     * @notice Set futureWallet address\\n     */\\n    function setFutureWallet(IFutureWallet _futureWallet) external;\\n\\n    /**\\n     * @notice Set Registry\\n     */\\n    function setRegistry(IRegistry _registry) external;\\n\\n    /**\\n     * @notice Pause liquidity transfers\\n     */\\n    function pauseLiquidityTransfers() external;\\n\\n    /**\\n     * @notice Resume liquidity transfers\\n     */\\n    function resumeLiquidityTransfers() external;\\n\\n    /**\\n     * @notice Convert an amount of IBTs in its equivalent in underlying tokens\\n     * @param _amount the amount of IBTs\\n     * @return the corresponding amount of underlying\\n     */\\n    function convertIBTToUnderlying(uint256 _amount) external view returns (uint256);\\n\\n    /**\\n     * @notice Convert an amount of underlying tokens in its equivalent in IBTs\\n     * @param _amount the amount of underlying tokens\\n     * @return the corresponding amount of IBTs\\n     */\\n    function convertUnderlyingtoIBT(uint256 _amount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFutureWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\ninterface IFutureWallet {\\n    /**\\n     * @notice Intializer\\n     * @param _futureAddress the address of the corresponding future\\n     * @param _adminAddress the address of the ACR admin\\n     */\\n    function initialize(address _futureAddress, address _adminAddress) external;\\n\\n    /**\\n     * @notice register the yield of an expired period\\n     * @param _amount the amount of yield to be registered\\n     */\\n    function registerExpiredFuture(uint256 _amount) external;\\n\\n    /**\\n     * @notice redeem the yield of the underlying yield of the FYT held by the sender\\n     * @param _periodIndex the index of the period to redeem the yield from\\n     */\\n    function redeemYield(uint256 _periodIndex) external;\\n\\n    /**\\n     * @notice return the yield that could be redeemed by an address for a particular period\\n     * @param _periodIndex the index of the corresponding period\\n     * @param _tokenHolder the FYT holder\\n     * @return the yield that could be redeemed by the token holder for this period\\n     */\\n    function getRedeemableYield(uint256 _periodIndex, address _tokenHolder) external view returns (uint256);\\n\\n    /**\\n     * @notice getter for the address of the future corresponding to this future wallet\\n     * @return the address of the future\\n     */\\n    function getFutureAddress() external view returns (address);\\n\\n    /**\\n     * @notice getter for the address of the IBT corresponding to this future wallet\\n     * @return the address of the IBT\\n     */\\n    function getIBTAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\ninterface IController {\\n    /* Getters */\\n\\n    function STARTING_DELAY() external view returns (uint256);\\n\\n    /* Future Settings Setters */\\n\\n    /**\\n     * @notice Change the delay for starting a new period\\n     * @param _startingDelay the new delay (+-) to start the next period\\n     */\\n    function setPeriodStartingDelay(uint256 _startingDelay) external;\\n\\n    /**\\n     * @notice Set the next period switch timestamp for the future with corresponding duration\\n     * @param _periodDuration the duration of a period\\n     * @param _nextPeriodTimestamp the next period switch timestamp\\n     */\\n    function setNextPeriodSwitchTimestamp(uint256 _periodDuration, uint256 _nextPeriodTimestamp) external;\\n\\n    /* User Methods */\\n\\n    /**\\n     * @notice Deposit funds into ongoing period\\n     * @param _futureVault the address of the future to be deposit the funds in\\n     * @param _amount the amount to deposit on the ongoing period\\n     * @dev part of the amount depostied will be used to buy back the yield already generated proportionaly to the amount deposited\\n     */\\n    function deposit(address _futureVault, uint256 _amount) external;\\n\\n    /**\\n     * @notice Withdraw deposited funds from APWine\\n     * @param _futureVault the address of the future to withdraw the IBT from\\n     * @param _amount the amount to withdraw\\n     */\\n    function withdraw(address _futureVault, uint256 _amount) external;\\n\\n    /**\\n     * @notice Claim FYT of the msg.sender\\n     * @param _futureVault the future from which to claim the FYT\\n     */\\n    function claimFYT(address _futureVault) external;\\n\\n    /**\\n     * @notice Getter for the registry address of the protocol\\n     * @return the address of the protocol registry\\n     */\\n    function getRegistryAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the symbol of the PT of one future\\n     * @param _ibtSymbol the IBT of the external protocol\\n     * @param _platform the external protocol name\\n     * @param _periodDuration the duration of the periods for the future\\n     * @return the generated symbol of the PT\\n     */\\n    function getFutureIBTSymbol(\\n        string memory _ibtSymbol,\\n        string memory _platform,\\n        uint256 _periodDuration\\n    ) external pure returns (string memory);\\n\\n    /**\\n     * @notice Getter for the symbol of the FYT of one future\\n     * @param _ptSymbol the PT symbol for this future\\n     * @param _periodDuration the duration of the periods for this future\\n     * @return the generated symbol of the FYT\\n     */\\n    function getFYTSymbol(string memory _ptSymbol, uint256 _periodDuration) external view returns (string memory);\\n\\n    /**\\n     * @notice Getter for the period index depending on the period duration of the future\\n     * @param _periodDuration the periods duration\\n     * @return the period index\\n     */\\n    function getPeriodIndex(uint256 _periodDuration) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for beginning timestamp of the next period for the futures with a defined periods duration\\n     * @param _periodDuration the periods duration\\n     * @return the timestamp of the beginning of the next period\\n     */\\n    function getNextPeriodStart(uint256 _periodDuration) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the next performance fee factor of one futureVault\\n     * @param _futureVault the address of the futureVault\\n     * @return the next performance fee factor of the futureVault\\n     */\\n    function getNextPerformanceFeeFactor(address _futureVault) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the performance fee factor of one futureVault\\n     * @param _futureVault the address of the futureVault\\n     * @return the performance fee factor of the futureVault\\n     */\\n    function getCurrentPerformanceFeeFactor(address _futureVault) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the list of future durations registered in the contract\\n     * @return the list of futures duration\\n     */\\n    function getDurations() external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Register a newly created future in the registry\\n     * @param _futureVault the address of the new future\\n     */\\n    function registerNewFutureVault(address _futureVault) external;\\n\\n    /**\\n     * @notice Unregister a future from the registry\\n     * @param _futureVault the address of the future to unregister\\n     */\\n    function unregisterFutureVault(address _futureVault) external;\\n\\n    /**\\n     * @notice Start all the futures that have a defined periods duration to synchronize them\\n     * @param _periodDuration the periods duration of the futures to start\\n     */\\n    function startFuturesByPeriodDuration(uint256 _periodDuration) external;\\n\\n    /**\\n     * @notice Getter for the futures by periods duration\\n     * @param _periodDuration the periods duration of the futures to return\\n     */\\n    function getFuturesWithDuration(uint256 _periodDuration) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Claim the FYTs of the corresponding futures\\n     * @param _user the address of the user\\n     * @param _futureVaults the addresses of the futures to claim the fyts from\\n     */\\n    function claimSelectedFYTS(address _user, address[] memory _futureVaults) external;\\n\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address); // OZ ACL getter\\n\\n    /**\\n     * @notice Getter for the future deposits state\\n     * @param _futureVault the address of the future\\n     * @return true is new deposits are paused, false otherwise\\n     */\\n    function isDepositsPaused(address _futureVault) external view returns (bool);\\n\\n    /**\\n     * @notice Getter for the future withdrawals state\\n     * @param _futureVault the address of the future\\n     * @return true is new withdrawals are paused, false otherwise\\n     */\\n    function isWithdrawalsPaused(address _futureVault) external view returns (bool);\\n\\n    /**\\n     * @notice Getter for the future period state\\n     * @param _futureVault the address of the future\\n     * @return true if the future is set to be terminated\\n     */\\n    function isFutureSetToBeTerminated(address _futureVault) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/library/AMMMaths.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.7.6;\\n\\n// https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol\\nlibrary AMMMathsUtils {\\n    uint256 internal constant UNIT = 10**18;\\n    uint256 internal constant MIN_POW_BASE = 1 wei;\\n    uint256 internal constant MAX_POW_BASE = (2 * UNIT) - 1 wei;\\n    uint256 internal constant POW_PRECISION = UNIT / 10**10;\\n\\n    function powi(uint256 a, uint256 n) internal pure returns (uint256) {\\n        uint256 z = n % 2 != 0 ? a : UNIT;\\n        for (n /= 2; n != 0; n /= 2) {\\n            a = div(mul(a, a), UNIT);\\n            if (n % 2 != 0) {\\n                z = div(mul(z, a), UNIT);\\n            }\\n        }\\n        return z;\\n    }\\n\\n    function pow(uint256 base, uint256 exp) internal pure returns (uint256) {\\n        require(base >= MIN_POW_BASE, \\\"ERR_POW_BASE_TOO_LOW\\\");\\n        require(base <= MAX_POW_BASE, \\\"ERR_POW_BASE_TOO_HIGH\\\");\\n        uint256 whole = mul(div(exp, UNIT), UNIT);\\n        uint256 remain = sub(exp, whole);\\n        uint256 wholePow = powi(base, div(whole, UNIT));\\n        if (remain == 0) {\\n            return wholePow;\\n        }\\n        uint256 partialResult = powApprox(base, remain, POW_PRECISION);\\n        return div(mul(wholePow, partialResult), UNIT);\\n    }\\n\\n    function subSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\\n        return (a >= b) ? (a - b, false) : (b - a, true);\\n    }\\n\\n    function powApprox(\\n        uint256 base,\\n        uint256 exp,\\n        uint256 precision\\n    ) internal pure returns (uint256) {\\n        // term 0:\\n        uint256 a = exp;\\n        (uint256 x, bool xneg) = subSign(base, UNIT);\\n        uint256 term = UNIT;\\n        uint256 sum = term;\\n        bool negative = false;\\n        for (uint256 i = 1; term >= precision; ++i) {\\n            uint256 bigK = mul(i, UNIT);\\n            (uint256 c, bool cneg) = subSign(a, sub(bigK, UNIT));\\n            term = div(mul(term, div(mul(c, x), UNIT)), UNIT);\\n            term = div(mul(UNIT, term), bigK);\\n            if (term == 0) break;\\n            if (xneg) negative = !negative;\\n            if (cneg) negative = !negative;\\n            if (negative) {\\n                sum = sub(sum, term);\\n            } else {\\n                sum = add(sum, term);\\n            }\\n        }\\n        return sum;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"AMMMaths: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"AMMMaths: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"AMMMaths: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"AMMMaths: division by zero\\\");\\n        return a / b;\\n    }\\n}\\n\\n// https://github.com/balancer-labs/balancer-core/blob/master/contracts/BMath.sol\\nlibrary AMMMaths {\\n    using AMMMathsUtils for uint256;\\n    uint256 internal constant UNIT = 10**18;\\n    uint256 internal constant SQUARED_UNIT = UNIT * UNIT;\\n    uint256 internal constant EXIT_FEE = 0;\\n\\n    uint256 internal constant MAX_IN_RATIO = UNIT / 2;\\n    uint256 internal constant MAX_OUT_RATIO = (UNIT / 3) + 1 wei;\\n\\n    function calcOutGivenIn(\\n        uint256 _tokenBalanceIn,\\n        uint256 _tokenWeightIn,\\n        uint256 _tokenBalanceOut,\\n        uint256 _tokenWeightOut,\\n        uint256 _tokenAmountIn,\\n        uint256 _swapFee\\n    ) internal pure returns (uint256) {\\n        return\\n            calcOutGivenIn(\\n                _tokenBalanceIn,\\n                _tokenWeightIn,\\n                _tokenBalanceOut,\\n                _tokenWeightOut,\\n                _tokenAmountIn,\\n                _swapFee,\\n                UNIT\\n            );\\n    }\\n\\n    function calcOutGivenIn(\\n        uint256 _tokenBalanceIn,\\n        uint256 _tokenWeightIn,\\n        uint256 _tokenBalanceOut,\\n        uint256 _tokenWeightOut,\\n        uint256 _tokenAmountIn,\\n        uint256 _swapFee,\\n        uint256 _slippageFactor\\n    ) internal pure returns (uint256) {\\n        uint256 slippageBase = UNIT.mul(UNIT).div(_slippageFactor);\\n        uint256 weightRatio = slippageBase.mul(_tokenWeightIn).div(_tokenWeightOut);\\n        uint256 adjustedIn = _tokenAmountIn.mul(UNIT.sub(_swapFee)).div(UNIT);\\n        uint256 y = UNIT.mul(_tokenBalanceIn).div(_tokenBalanceIn.add(adjustedIn));\\n        uint256 bar = UNIT.sub(AMMMathsUtils.pow(y, weightRatio));\\n        return _tokenBalanceOut.mul(bar).div(UNIT);\\n    }\\n\\n    function calcInGivenOut(\\n        uint256 _tokenBalanceIn,\\n        uint256 _tokenWeightIn,\\n        uint256 _tokenBalanceOut,\\n        uint256 _tokenWeightOut,\\n        uint256 _tokenAmountOut,\\n        uint256 _swapFee\\n    ) internal pure returns (uint256) {\\n        return\\n            calcInGivenOut(\\n                _tokenBalanceIn,\\n                _tokenWeightIn,\\n                _tokenBalanceOut,\\n                _tokenWeightOut,\\n                _tokenAmountOut,\\n                _swapFee,\\n                UNIT\\n            );\\n    }\\n\\n    function calcInGivenOut(\\n        uint256 _tokenBalanceIn,\\n        uint256 _tokenWeightIn,\\n        uint256 _tokenBalanceOut,\\n        uint256 _tokenWeightOut,\\n        uint256 _tokenAmountOut,\\n        uint256 _swapFee,\\n        uint256 _slippageFactor\\n    ) internal pure returns (uint256) {\\n        uint256 slippageBase = UNIT.mul(UNIT).div(_slippageFactor);\\n        uint256 weightRatio = slippageBase.mul(_tokenWeightOut).div(_tokenWeightIn);\\n        uint256 y = UNIT.mul(_tokenBalanceOut).div(_tokenBalanceOut.sub(_tokenAmountOut));\\n        uint256 foo = AMMMathsUtils.pow(y, weightRatio).sub(UNIT);\\n        return _tokenBalanceIn.mul(foo).div(UNIT.sub(_swapFee));\\n    }\\n\\n    function calcPoolOutGivenSingleIn(\\n        uint256 _tokenBalanceIn,\\n        uint256 _tokenWeightIn,\\n        uint256 _poolSupply,\\n        uint256 _totalWeight,\\n        uint256 _tokenAmountIn,\\n        uint256 _swapFee\\n    ) internal pure returns (uint256) {\\n        uint256 normalizedWeight = UNIT.mul(_tokenWeightIn).div(_totalWeight);\\n        uint256 zaz = (UNIT.sub(normalizedWeight)).mul(_swapFee).div(UNIT);\\n        uint256 tokenAmountInAfterFee = _tokenAmountIn.mul(UNIT.sub(zaz)).div(UNIT);\\n        uint256 newTokenBalanceIn = _tokenBalanceIn.add(tokenAmountInAfterFee);\\n        uint256 tokenInRatio = UNIT.mul(newTokenBalanceIn).div(_tokenBalanceIn);\\n        uint256 poolRatio = AMMMathsUtils.pow(tokenInRatio, normalizedWeight);\\n        uint256 newPoolSupply = poolRatio.mul(_poolSupply).div(UNIT);\\n        return newPoolSupply.sub(_poolSupply);\\n    }\\n\\n    function calcSingleInGivenPoolOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountOut,\\n        uint256 swapFee\\n    ) internal pure returns (uint256 tokenAmountIn) {\\n        uint256 normalizedWeight = UNIT.mul(tokenWeightIn).div(totalWeight);\\n        uint256 newPoolSupply = poolSupply.add(poolAmountOut);\\n        uint256 poolRatio = UNIT.mul(newPoolSupply).div(poolSupply);\\n\\n        //uint256 newBalTi = poolRatio^(1/weightTi) * balTi;\\n        uint256 boo = UNIT.mul(UNIT).div(normalizedWeight);\\n        uint256 tokenInRatio = AMMMathsUtils.pow(poolRatio, boo);\\n        uint256 newTokenBalanceIn = tokenInRatio.mul(tokenBalanceIn).div(UNIT);\\n        uint256 tokenAmountInAfterFee = newTokenBalanceIn.sub(tokenBalanceIn);\\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way\\n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\\n        //uint256 tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\\n        uint256 zar = (UNIT.sub(normalizedWeight)).mul(swapFee).div(UNIT);\\n        tokenAmountIn = UNIT.mul(tokenAmountInAfterFee).div(UNIT.sub(zar));\\n        return tokenAmountIn;\\n    }\\n\\n    function calcSpotPrice(\\n        uint256 _tokenBalanceIn,\\n        uint256 _tokenWeightIn,\\n        uint256 _tokenBalanceOut,\\n        uint256 _tokenWeightOut,\\n        uint256 _swapFee\\n    ) internal pure returns (uint256) {\\n        uint256 numer = UNIT.mul(_tokenBalanceIn).div(_tokenWeightIn);\\n        uint256 denom = UNIT.mul(_tokenBalanceOut).div(_tokenWeightOut);\\n        uint256 ratio = UNIT.mul(numer).div(denom);\\n        uint256 scale = UNIT.mul(UNIT).div(UNIT.sub(_swapFee));\\n        return ratio.mul(scale).div(UNIT);\\n    }\\n\\n    function calcSingleOutGivenPoolIn(\\n        uint256 _tokenBalanceOut,\\n        uint256 _tokenWeightOut,\\n        uint256 _poolSupply,\\n        uint256 _totalWeight,\\n        uint256 _poolAmountIn,\\n        uint256 _swapFee\\n    ) internal pure returns (uint256) {\\n        uint256 normalizedWeight = UNIT.mul(_tokenWeightOut).div(_totalWeight);\\n        // charge exit fee on the pool token side\\n        // pAiAfterExitFee = pAi*(1-exitFee)\\n        uint256 poolAmountInAfterExitFee = _poolAmountIn.mul(UNIT.sub(EXIT_FEE)).div(UNIT);\\n        uint256 newPoolSupply = _poolSupply.sub(poolAmountInAfterExitFee);\\n        uint256 poolRatio = UNIT.mul(newPoolSupply).div(_poolSupply);\\n\\n        // newBalTo = poolRatio^(1/weightTo) * balTo;\\n        uint256 tokenOutRatio = AMMMathsUtils.pow(poolRatio, UNIT.mul(UNIT).div(normalizedWeight));\\n        uint256 newTokenBalanceOut = tokenOutRatio.mul(_tokenBalanceOut).div(UNIT);\\n\\n        uint256 tokenAmountOutBeforeSwapFee = _tokenBalanceOut.sub(newTokenBalanceOut);\\n\\n        // charge swap fee on the output token side\\n        //uint256 tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * _swapFee)\\n        uint256 zaz = (UNIT.sub(normalizedWeight)).mul(_swapFee).div(UNIT);\\n        return tokenAmountOutBeforeSwapFee.mul(UNIT.sub(zaz)).div(UNIT);\\n    }\\n\\n    function calcPoolInGivenSingleOut(\\n        uint256 _tokenBalanceOut,\\n        uint256 _tokenWeightOut,\\n        uint256 _poolSupply,\\n        uint256 _totalWeight,\\n        uint256 _tokenAmountOut,\\n        uint256 _swapFee\\n    ) internal pure returns (uint256) {\\n        // charge swap fee on the output token side\\n        uint256 normalizedWeight = UNIT.mul(_tokenWeightOut).div(_totalWeight);\\n        //uint256 tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * _swapFee) ;\\n        uint256 zoo = UNIT.sub(normalizedWeight);\\n        uint256 zar = zoo.mul(_swapFee).div(UNIT);\\n        uint256 tokenAmountOutBeforeSwapFee = UNIT.mul(_tokenAmountOut).div(UNIT.sub(zar));\\n\\n        uint256 newTokenBalanceOut = _tokenBalanceOut.sub(tokenAmountOutBeforeSwapFee);\\n        uint256 tokenOutRatio = UNIT.mul(newTokenBalanceOut).div(_tokenBalanceOut);\\n\\n        //uint256 newPoolSupply = (ratioTo ^ weightTo) * _poolSupply;\\n        uint256 poolRatio = AMMMathsUtils.pow(tokenOutRatio, normalizedWeight);\\n        uint256 newPoolSupply = poolRatio.mul(_poolSupply).div(UNIT);\\n        uint256 poolAmountInAfterExitFee = _poolSupply.sub(newPoolSupply);\\n\\n        // charge exit fee on the pool token side\\n        // pAi = pAiAfterExitFee/(1-exitFee)\\n        return UNIT.mul(poolAmountInAfterExitFee).div(UNIT.sub(EXIT_FEE));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/RoleCheckable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\ncontract RoleCheckable is Initializable {\\n    /* ACR Roles*/\\n    using AddressUpgradeable for address;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    // keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 internal constant ADMIN_ROLE = 0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775;\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    /* Modifiers */\\n    struct RoleData {\\n        EnumerableSetUpgradeable.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    modifier isAdmin() {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"RoleCheckable: Caller should be ADMIN\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function MINTER_ROLE() external view returns (bytes32);\\n\\n    function mint(\\n        address to,\\n        uint64 _ammId,\\n        uint64 _periodIndex,\\n        uint32 _pairId,\\n        uint256 amount,\\n        bytes memory data\\n    ) external returns (uint256 id);\\n\\n    function burnFrom(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IPT is IERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) external;\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @notice Returns the current balance of one user (without the claimable amount)\\n     * @param account the address of the account to check the balance of\\n     * @return the current pt balance of this address\\n     */\\n    function recordedBalanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the current balance of one user including the pt that were not claimed yet\\n     * @param account the address of the account to check the balance of\\n     * @return the total pt balance of one address\\n     */\\n    function balanceOf(address account) external view override returns (uint256);\\n\\n    /**\\n     * @notice Getter for the future vault link to this pt\\n     * @return the address of the future vault\\n     */\\n    function futureVault() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IRegistry {\\n    /**\\n     * @notice Initializer of the contract\\n     * @param _admin the address of the admin of the contract\\n     */\\n    function initialize(address _admin) external;\\n\\n    /* Setters */\\n    /**\\n     * @notice Setter for the treasury address\\n     * @param _newTreasury the address of the new treasury\\n     */\\n    function setTreasury(address _newTreasury) external;\\n\\n    /**\\n     * @notice Setter for the controller address\\n     * @param _newController the address of the new controller\\n     */\\n    function setController(address _newController) external;\\n\\n    /**\\n     * @notice Setter for the APW token address\\n     * @param _newAPW the address of the APW token\\n     */\\n    function setAPW(address _newAPW) external;\\n\\n    /**\\n     * @notice Setter for the proxy factory address\\n     * @param _proxyFactory the address of the new proxy factory\\n     */\\n    function setProxyFactory(address _proxyFactory) external;\\n\\n    /**\\n     * @notice Setter for the APWine IBT logic address\\n     * @param _PTLogic the address of the new APWine IBT logic\\n     */\\n    function setPTLogic(address _PTLogic) external;\\n\\n    /**\\n     * @notice Setter for the APWine FYT logic address\\n     * @param _FYTLogic the address of the new APWine FYT logic\\n     */\\n    function setFYTLogic(address _FYTLogic) external;\\n\\n    /**\\n     * @notice Setter for the maths utils address\\n     * @param _mathsUtils the address of the new math utils\\n     */\\n    function setMathsUtils(address _mathsUtils) external;\\n\\n    /**\\n     * @notice Setter for the naming utils address\\n     * @param _namingUtils the address of the new naming utils\\n     */\\n    function setNamingUtils(address _namingUtils) external;\\n\\n    /**\\n     * @notice Getter for the controller address\\n     * @return the address of the controller\\n     */\\n    function getControllerAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the treasury address\\n     * @return the address of the treasury\\n     */\\n    function getTreasuryAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the tokens factory address\\n     * @return the address of the tokens factory\\n     */\\n    function getTokensFactoryAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the DAO address\\n     * @return the address of the DAO that has admin rights on the APW token\\n     */\\n    function getDAOAddress() external returns (address);\\n\\n    /**\\n     * @notice Getter for the APW token address\\n     * @return the address the APW token\\n     */\\n    function getAPWAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the AMM factory address\\n     * @return the AMM factory address\\n     */\\n    function getAMMFactoryAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the token factory address\\n     * @return the token factory address\\n     */\\n    function getTokenFactoryAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the proxy factory address\\n     * @return the proxy factory address\\n     */\\n    function getProxyFactoryAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for APWine IBT logic address\\n     * @return the APWine IBT logic address\\n     */\\n    function getPTLogicAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for APWine FYT logic address\\n     * @return the APWine FYT logic address\\n     */\\n    function getFYTLogicAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for APWine AMM logic address\\n     * @return the APWine AMM logic address\\n     */\\n    function getAMMLogicAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for APWine AMM LP token logic address\\n     * @return the APWine AMM LP token logic address\\n     */\\n    function getAMMLPTokenLogicAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for math utils address\\n     * @return the math utils address\\n     */\\n    function getMathsUtils() external view returns (address);\\n\\n    /**\\n     * @notice Getter for naming utils address\\n     * @return the naming utils address\\n     */\\n    function getNamingUtils() external view returns (address);\\n\\n    /* Futures */\\n    /**\\n     * @notice Add a future to the registry\\n     * @param _future the address of the future to add to the registry\\n     */\\n    function addFuture(address _future) external;\\n\\n    /**\\n     * @notice Remove a future from the registry\\n     * @param _future the address of the future to remove from the registry\\n     */\\n    function removeFuture(address _future) external;\\n\\n    /**\\n     * @notice Getter to check if a future is registered\\n     * @param _future the address of the future to check the registration of\\n     * @return true if it is, false otherwise\\n     */\\n    function isRegisteredFuture(address _future) external view returns (bool);\\n\\n    /**\\n     * @notice Getter to check if an AMM is registered\\n     * @param _ammAddress the address of the amm to check the registration of\\n     * @return true if it is, false otherwise\\n     */\\n    function isRegisteredAMM(address _ammAddress) external view returns (bool);\\n\\n    /**\\n     * @notice Getter for the future registered at an index\\n     * @param _index the index of the future to return\\n     * @return the address of the corresponding future\\n     */\\n    function getFutureAt(uint256 _index) external view returns (address);\\n\\n    /**\\n     * @notice Getter for number of future registered\\n     * @return the number of future registered\\n     */\\n    function futureCount() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum AMM.AMMGlobalState\",\"name\":\"_newState\",\"type\":\"uint8\"}],\"name\":\"AMMStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ExpiredTokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pairID\",\"type\":\"uint256\"}],\"name\":\"LiquidityCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pairID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pairID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_pairID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPeriodIndex\",\"type\":\"uint256\"}],\"name\":\"PeriodSwitched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pairID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolTokenAmount\",\"type\":\"uint256\"}],\"name\":\"PoolExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pairID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolTokenAmount\",\"type\":\"uint256\"}],\"name\":\"PoolJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pairID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenInID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenOutID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_swapFee\",\"type\":\"uint256\"}],\"name\":\"SwappingFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"_newWeights\",\"type\":\"uint256[2]\"}],\"name\":\"WeightUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC1155_ERC165\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"_maxAmountsIn\",\"type\":\"uint256[2]\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ammId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountOut\",\"type\":\"uint256\"}],\"name\":\"calcInAndSpotGivenOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spotPriceAfter\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"calcOutAndSpotGivenIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spotPriceAfter\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairID\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"_tokenAmounts\",\"type\":\"uint256[2]\"}],\"name\":\"createLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriodIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPoolAmountIn\",\"type\":\"uint256\"}],\"name\":\"exitSwapExternAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"exitSwapPoolAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAMMState\",\"outputs\":[{\"internalType\":\"enum AMM.AMMGlobalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokenId\",\"type\":\"uint256\"}],\"name\":\"getExpiredTokensInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFYTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFutureAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIBTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ammId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pairID\",\"type\":\"uint256\"}],\"name\":\"getLPTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPTWeightInPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getPairIDForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairID\",\"type\":\"uint256\"}],\"name\":\"getPairWithID\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"weights\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"balances\",\"type\":\"uint256[2]\"},{\"internalType\":\"bool\",\"name\":\"liquidityIsInitialized\",\"type\":\"bool\"}],\"internalType\":\"struct IAMM.Pair\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenOut\",\"type\":\"uint256\"}],\"name\":\"getSpotPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTotalSupplyWithTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlyingOfIBTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ammId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_underlyingOfIBTAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_futureVault\",\"type\":\"address\"},{\"internalType\":\"contract ILPToken\",\"name\":\"_poolTokens\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feesRecipient\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPoolAmountOut\",\"type\":\"uint256\"}],\"name\":\"joinSwapExternAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"joinSwapPoolAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBlockYieldRecorded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastYieldRecorded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"_minAmountsOut\",\"type\":\"uint256[2]\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapFee\",\"type\":\"uint256\"}],\"name\":\"setSwappingFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swapExactAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spotPriceAfter\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swapExactAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spotPriceAfter\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePauseAmm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawExpiredToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AMM","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}