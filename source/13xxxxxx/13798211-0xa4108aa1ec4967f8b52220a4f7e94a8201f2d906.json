{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Gravity.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./CosmosToken.sol\\\";\\n\\nerror InvalidSignature();\\nerror InvalidValsetNonce(uint256 newNonce, uint256 currentNonce);\\nerror InvalidBatchNonce(uint256 newNonce, uint256 currentNonce);\\nerror InvalidLogicCallNonce(uint256 newNonce, uint256 currentNonce);\\nerror InvalidLogicCallTransfers();\\nerror InvalidLogicCallFees();\\nerror InvalidSendToCosmos();\\nerror IncorrectCheckpoint();\\nerror MalformedNewValidatorSet();\\nerror MalformedCurrentValidatorSet();\\nerror MalformedBatch();\\nerror InsufficientPower(uint256 cumulativePower, uint256 powerThreshold);\\nerror BatchTimedOut();\\nerror LogicCallTimedOut();\\n\\n// This is being used purely to avoid stack too deep errors\\nstruct LogicCallArgs {\\n\\t// Transfers out to the logic contract\\n\\tuint256[] transferAmounts;\\n\\taddress[] transferTokenContracts;\\n\\t// The fees (transferred to msg.sender)\\n\\tuint256[] feeAmounts;\\n\\taddress[] feeTokenContracts;\\n\\t// The arbitrary logic call\\n\\taddress logicContractAddress;\\n\\tbytes payload;\\n\\t// Invalidation metadata\\n\\tuint256 timeOut;\\n\\tbytes32 invalidationId;\\n\\tuint256 invalidationNonce;\\n}\\n\\n// This is used purely to avoid stack too deep errors\\n// represents everything about a given validator set\\nstruct ValsetArgs {\\n\\t// the validators in this set, represented by an Ethereum address\\n\\taddress[] validators;\\n\\t// the powers of the given validators in the same order as above\\n\\tuint256[] powers;\\n\\t// the nonce of this validator set\\n\\tuint256 valsetNonce;\\n\\t// the reward amount denominated in the below reward token, can be\\n\\t// set to zero\\n\\tuint256 rewardAmount;\\n\\t// the reward token, should be set to the zero address if not being used\\n\\taddress rewardToken;\\n}\\n\\n// This represents a validator signature\\nstruct Signature {\\n\\tuint8 v;\\n\\tbytes32 r;\\n\\tbytes32 s;\\n}\\n\\ncontract Gravity is ReentrancyGuard {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t// The number of 'votes' required to execute a valset\\n\\t// update or batch execution, set to 2/3 of 2^32\\n\\tuint256 constant constant_powerThreshold = 2863311530;\\n\\n\\t// These are updated often\\n\\tbytes32 public state_lastValsetCheckpoint;\\n\\tmapping(address => uint256) public state_lastBatchNonces;\\n\\tmapping(bytes32 => uint256) public state_invalidationMapping;\\n\\tuint256 public state_lastValsetNonce = 0;\\n\\t// event nonce zero is reserved by the Cosmos module as a special\\n\\t// value indicating that no events have yet been submitted\\n\\tuint256 public state_lastEventNonce = 1;\\n\\n\\t// This is set once at initialization\\n\\tbytes32 public immutable state_gravityId;\\n\\n\\t// TransactionBatchExecutedEvent and SendToCosmosEvent both include the field _eventNonce.\\n\\t// This is incremented every time one of these events is emitted. It is checked by the\\n\\t// Cosmos module to ensure that all events are received in order, and that none are lost.\\n\\t//\\n\\t// ValsetUpdatedEvent does not include the field _eventNonce because it is never submitted to the Cosmos\\n\\t// module. It is purely for the use of relayers to allow them to successfully submit batches.\\n\\tevent TransactionBatchExecutedEvent(\\n\\t\\tuint256 indexed _batchNonce,\\n\\t\\taddress indexed _token,\\n\\t\\tuint256 _eventNonce\\n\\t);\\n\\tevent SendToCosmosEvent(\\n\\t\\taddress indexed _tokenContract,\\n\\t\\taddress indexed _sender,\\n\\t\\tstring _destination,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _eventNonce\\n\\t);\\n\\tevent ERC20DeployedEvent(\\n\\t\\t// FYI: Can't index on a string without doing a bunch of weird stuff\\n\\t\\tstring _cosmosDenom,\\n\\t\\taddress indexed _tokenContract,\\n\\t\\tstring _name,\\n\\t\\tstring _symbol,\\n\\t\\tuint8 _decimals,\\n\\t\\tuint256 _eventNonce\\n\\t);\\n\\tevent ValsetUpdatedEvent(\\n\\t\\tuint256 indexed _newValsetNonce,\\n\\t\\tuint256 _eventNonce,\\n\\t\\tuint256 _rewardAmount,\\n\\t\\taddress _rewardToken,\\n\\t\\taddress[] _validators,\\n\\t\\tuint256[] _powers\\n\\t);\\n\\tevent LogicCallEvent(\\n\\t\\tbytes32 _invalidationId,\\n\\t\\tuint256 _invalidationNonce,\\n\\t\\tbytes _returnData,\\n\\t\\tuint256 _eventNonce\\n\\t);\\n\\n\\t// TEST FIXTURES\\n\\t// These are here to make it easier to measure gas usage. They should be removed before production\\n\\tfunction testMakeCheckpoint(ValsetArgs calldata _valsetArgs, bytes32 _gravityId) external pure {\\n\\t\\tmakeCheckpoint(_valsetArgs, _gravityId);\\n\\t}\\n\\n\\tfunction testCheckValidatorSignatures(\\n\\t\\tValsetArgs calldata _currentValset,\\n\\t\\tSignature[] calldata _sigs,\\n\\t\\tbytes32 _theHash,\\n\\t\\tuint256 _powerThreshold\\n\\t) external pure {\\n\\t\\tcheckValidatorSignatures(_currentValset, _sigs, _theHash, _powerThreshold);\\n\\t}\\n\\n\\t// END TEST FIXTURES\\n\\n\\tfunction lastBatchNonce(address _erc20Address) external view returns (uint256) {\\n\\t\\treturn state_lastBatchNonces[_erc20Address];\\n\\t}\\n\\n\\tfunction lastLogicCallNonce(bytes32 _invalidation_id) external view returns (uint256) {\\n\\t\\treturn state_invalidationMapping[_invalidation_id];\\n\\t}\\n\\n\\t// Utility function to verify geth style signatures\\n\\tfunction verifySig(\\n\\t\\taddress _signer,\\n\\t\\tbytes32 _theHash,\\n\\t\\tSignature calldata _sig\\n\\t) private pure returns (bool) {\\n\\t\\tbytes32 messageDigest = keccak256(\\n\\t\\t\\tabi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _theHash)\\n\\t\\t);\\n\\t\\treturn _signer == ECDSA.recover(messageDigest, _sig.v, _sig.r, _sig.s);\\n\\t}\\n\\n\\t// Utility function to determine that a validator set and signatures are well formed\\n\\tfunction validateValset(ValsetArgs calldata _valset, Signature[] calldata _sigs) private pure {\\n\\t\\t// Check that current validators, powers, and signatures (v,r,s) set is well-formed\\n\\t\\tif (\\n\\t\\t\\t_valset.validators.length != _valset.powers.length ||\\n\\t\\t\\t_valset.validators.length != _sigs.length\\n\\t\\t) {\\n\\t\\t\\trevert MalformedCurrentValidatorSet();\\n\\t\\t}\\n\\t}\\n\\n\\t// Make a new checkpoint from the supplied validator set\\n\\t// A checkpoint is a hash of all relevant information about the valset. This is stored by the contract,\\n\\t// instead of storing the information directly. This saves on storage and gas.\\n\\t// The format of the checkpoint is:\\n\\t// h(gravityId, \\\"checkpoint\\\", valsetNonce, validators[], powers[])\\n\\t// Where h is the keccak256 hash function.\\n\\t// The validator powers must be decreasing or equal. This is important for checking the signatures on the\\n\\t// next valset, since it allows the caller to stop verifying signatures once a quorum of signatures have been verified.\\n\\tfunction makeCheckpoint(ValsetArgs memory _valsetArgs, bytes32 _gravityId)\\n\\t\\tprivate\\n\\t\\tpure\\n\\t\\treturns (bytes32)\\n\\t{\\n\\t\\t// bytes32 encoding of the string \\\"checkpoint\\\"\\n\\t\\tbytes32 methodName = 0x636865636b706f696e7400000000000000000000000000000000000000000000;\\n\\n\\t\\tbytes32 checkpoint = keccak256(\\n\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t_gravityId,\\n\\t\\t\\t\\tmethodName,\\n\\t\\t\\t\\t_valsetArgs.valsetNonce,\\n\\t\\t\\t\\t_valsetArgs.validators,\\n\\t\\t\\t\\t_valsetArgs.powers,\\n\\t\\t\\t\\t_valsetArgs.rewardAmount,\\n\\t\\t\\t\\t_valsetArgs.rewardToken\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\treturn checkpoint;\\n\\t}\\n\\n\\tfunction checkValidatorSignatures(\\n\\t\\t// The current validator set and their powers\\n\\t\\tValsetArgs calldata _currentValset,\\n\\t\\t// The current validator's signatures\\n\\t\\tSignature[] calldata _sigs,\\n\\t\\t// This is what we are checking they have signed\\n\\t\\tbytes32 _theHash,\\n\\t\\tuint256 _powerThreshold\\n\\t) private pure {\\n\\t\\tuint256 cumulativePower = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _currentValset.validators.length; i++) {\\n\\t\\t\\t// If v is set to 0, this signifies that it was not possible to get a signature from this validator and we skip evaluation\\n\\t\\t\\t// (In a valid signature, it is either 27 or 28)\\n\\t\\t\\tif (_sigs[i].v != 0) {\\n\\t\\t\\t\\t// Check that the current validator has signed off on the hash\\n\\t\\t\\t\\tif (!verifySig(_currentValset.validators[i], _theHash, _sigs[i])) {\\n\\t\\t\\t\\t\\trevert InvalidSignature();\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Sum up cumulative power\\n\\t\\t\\t\\tcumulativePower = cumulativePower + _currentValset.powers[i];\\n\\n\\t\\t\\t\\t// Break early to avoid wasting gas\\n\\t\\t\\t\\tif (cumulativePower > _powerThreshold) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Check that there was enough power\\n\\t\\tif (cumulativePower <= _powerThreshold) {\\n\\t\\t\\trevert InsufficientPower(cumulativePower, _powerThreshold);\\n\\t\\t}\\n\\t\\t// Success\\n\\t}\\n\\n\\t// This updates the valset by checking that the validators in the current valset have signed off on the\\n\\t// new valset. The signatures supplied are the signatures of the current valset over the checkpoint hash\\n\\t// generated from the new valset.\\n\\t// Anyone can call this function, but they must supply valid signatures of constant_powerThreshold of the current valset over\\n\\t// the new valset.\\n\\tfunction updateValset(\\n\\t\\t// The new version of the validator set\\n\\t\\tValsetArgs calldata _newValset,\\n\\t\\t// The current validators that approve the change\\n\\t\\tValsetArgs calldata _currentValset,\\n\\t\\t// These are arrays of the parts of the current validator's signatures\\n\\t\\tSignature[] calldata _sigs\\n\\t) external {\\n\\t\\t// CHECKS\\n\\n\\t\\t// Check that the valset nonce is greater than the old one\\n\\t\\tif (_newValset.valsetNonce <= _currentValset.valsetNonce) {\\n\\t\\t\\trevert InvalidValsetNonce({\\n\\t\\t\\t\\tnewNonce: _newValset.valsetNonce,\\n\\t\\t\\t\\tcurrentNonce: _currentValset.valsetNonce\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\t// Check that the valset nonce is less than a million nonces forward from the old one\\n\\t\\t// this makes it difficult for an attacker to lock out the contract by getting a single\\n\\t\\t// bad validator set through with uint256 max nonce\\n\\t\\tif (_newValset.valsetNonce > _currentValset.valsetNonce + 1000000) {\\n\\t\\t\\trevert InvalidValsetNonce({\\n\\t\\t\\t\\tnewNonce: _newValset.valsetNonce,\\n\\t\\t\\t\\tcurrentNonce: _currentValset.valsetNonce\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\t// Check that new validators and powers set is well-formed\\n\\t\\tif (\\n\\t\\t\\t_newValset.validators.length != _newValset.powers.length ||\\n\\t\\t\\t_newValset.validators.length == 0\\n\\t\\t) {\\n\\t\\t\\trevert MalformedNewValidatorSet();\\n\\t\\t}\\n\\n\\t\\t// Check that current validators, powers, and signatures (v,r,s) set is well-formed\\n\\t\\tvalidateValset(_currentValset, _sigs);\\n\\n\\t\\t// Check cumulative power to ensure the contract has sufficient power to actually\\n\\t\\t// pass a vote\\n\\t\\tuint256 cumulativePower = 0;\\n\\t\\tfor (uint256 i = 0; i < _newValset.powers.length; i++) {\\n\\t\\t\\tcumulativePower = cumulativePower + _newValset.powers[i];\\n\\t\\t\\tif (cumulativePower > constant_powerThreshold) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (cumulativePower <= constant_powerThreshold) {\\n\\t\\t\\trevert InsufficientPower({\\n\\t\\t\\t\\tcumulativePower: cumulativePower,\\n\\t\\t\\t\\tpowerThreshold: constant_powerThreshold\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\t// Check that the supplied current validator set matches the saved checkpoint\\n\\t\\tif (makeCheckpoint(_currentValset, state_gravityId) != state_lastValsetCheckpoint) {\\n\\t\\t\\trevert IncorrectCheckpoint();\\n\\t\\t}\\n\\n\\t\\t// Check that enough current validators have signed off on the new validator set\\n\\t\\tbytes32 newCheckpoint = makeCheckpoint(_newValset, state_gravityId);\\n\\n\\t\\tcheckValidatorSignatures(_currentValset, _sigs, newCheckpoint, constant_powerThreshold);\\n\\n\\t\\t// ACTIONS\\n\\n\\t\\t// Stored to be used next time to validate that the valset\\n\\t\\t// supplied by the caller is correct.\\n\\t\\tstate_lastValsetCheckpoint = newCheckpoint;\\n\\n\\t\\t// Store new nonce\\n\\t\\tstate_lastValsetNonce = _newValset.valsetNonce;\\n\\n\\t\\t// Send submission reward to msg.sender if reward token is a valid value\\n\\t\\tif (_newValset.rewardToken != address(0) && _newValset.rewardAmount != 0) {\\n\\t\\t\\tIERC20(_newValset.rewardToken).safeTransfer(msg.sender, _newValset.rewardAmount);\\n\\t\\t}\\n\\n\\t\\t// LOGS\\n\\n\\t\\tstate_lastEventNonce = state_lastEventNonce + 1;\\n\\t\\temit ValsetUpdatedEvent(\\n\\t\\t\\t_newValset.valsetNonce,\\n\\t\\t\\tstate_lastEventNonce,\\n\\t\\t\\t_newValset.rewardAmount,\\n\\t\\t\\t_newValset.rewardToken,\\n\\t\\t\\t_newValset.validators,\\n\\t\\t\\t_newValset.powers\\n\\t\\t);\\n\\t}\\n\\n\\t// submitBatch processes a batch of Cosmos -> Ethereum transactions by sending the tokens in the transactions\\n\\t// to the destination addresses. It is approved by the current Cosmos validator set.\\n\\t// Anyone can call this function, but they must supply valid signatures of constant_powerThreshold of the current valset over\\n\\t// the batch.\\n\\tfunction submitBatch(\\n\\t\\t// The validators that approve the batch\\n\\t\\tValsetArgs calldata _currentValset,\\n\\t\\t// These are arrays of the parts of the validators signatures\\n\\t\\tSignature[] calldata _sigs,\\n\\t\\t// The batch of transactions\\n\\t\\tuint256[] calldata _amounts,\\n\\t\\taddress[] calldata _destinations,\\n\\t\\tuint256[] calldata _fees,\\n\\t\\tuint256 _batchNonce,\\n\\t\\taddress _tokenContract,\\n\\t\\t// a block height beyond which this batch is not valid\\n\\t\\t// used to provide a fee-free timeout\\n\\t\\tuint256 _batchTimeout\\n\\t) external nonReentrant {\\n\\t\\t// CHECKS scoped to reduce stack depth\\n\\t\\t{\\n\\t\\t\\t// Check that the batch nonce is higher than the last nonce for this token\\n\\t\\t\\tif (_batchNonce <= state_lastBatchNonces[_tokenContract]) {\\n\\t\\t\\t\\trevert InvalidBatchNonce({\\n\\t\\t\\t\\t\\tnewNonce: _batchNonce,\\n\\t\\t\\t\\t\\tcurrentNonce: state_lastBatchNonces[_tokenContract]\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Check that the batch nonce is less than one million nonces forward from the old one\\n\\t\\t\\t// this makes it difficult for an attacker to lock out the contract by getting a single\\n\\t\\t\\t// bad batch through with uint256 max nonce\\n\\t\\t\\tif (_batchNonce > state_lastBatchNonces[_tokenContract] + 1000000) {\\n\\t\\t\\t\\trevert InvalidBatchNonce({\\n\\t\\t\\t\\t\\tnewNonce: _batchNonce,\\n\\t\\t\\t\\t\\tcurrentNonce: state_lastBatchNonces[_tokenContract]\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Check that the block height is less than the timeout height\\n\\t\\t\\tif (block.number >= _batchTimeout) {\\n\\t\\t\\t\\trevert BatchTimedOut();\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Check that current validators, powers, and signatures (v,r,s) set is well-formed\\n\\t\\t\\tvalidateValset(_currentValset, _sigs);\\n\\n\\t\\t\\t// Check that the supplied current validator set matches the saved checkpoint\\n\\t\\t\\tif (makeCheckpoint(_currentValset, state_gravityId) != state_lastValsetCheckpoint) {\\n\\t\\t\\t\\trevert IncorrectCheckpoint();\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Check that the transaction batch is well-formed\\n\\t\\t\\tif (_amounts.length != _destinations.length || _amounts.length != _fees.length) {\\n\\t\\t\\t\\trevert MalformedBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Check that enough current validators have signed off on the transaction batch and valset\\n\\t\\t\\tcheckValidatorSignatures(\\n\\t\\t\\t\\t_currentValset,\\n\\t\\t\\t\\t_sigs,\\n\\t\\t\\t\\t// Get hash of the transaction batch and checkpoint\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\t\\tstate_gravityId,\\n\\t\\t\\t\\t\\t\\t// bytes32 encoding of \\\"transactionBatch\\\"\\n\\t\\t\\t\\t\\t\\t0x7472616e73616374696f6e426174636800000000000000000000000000000000,\\n\\t\\t\\t\\t\\t\\t_amounts,\\n\\t\\t\\t\\t\\t\\t_destinations,\\n\\t\\t\\t\\t\\t\\t_fees,\\n\\t\\t\\t\\t\\t\\t_batchNonce,\\n\\t\\t\\t\\t\\t\\t_tokenContract,\\n\\t\\t\\t\\t\\t\\t_batchTimeout\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tconstant_powerThreshold\\n\\t\\t\\t);\\n\\n\\t\\t\\t// ACTIONS\\n\\n\\t\\t\\t// Store batch nonce\\n\\t\\t\\tstate_lastBatchNonces[_tokenContract] = _batchNonce;\\n\\n\\t\\t\\t{\\n\\t\\t\\t\\t// Send transaction amounts to destinations\\n\\t\\t\\t\\tuint256 totalFee;\\n\\t\\t\\t\\tfor (uint256 i = 0; i < _amounts.length; i++) {\\n\\t\\t\\t\\t\\tIERC20(_tokenContract).safeTransfer(_destinations[i], _amounts[i]);\\n\\t\\t\\t\\t\\ttotalFee = totalFee + _fees[i];\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Send transaction fees to msg.sender\\n\\t\\t\\t\\tIERC20(_tokenContract).safeTransfer(msg.sender, totalFee);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// LOGS scoped to reduce stack depth\\n\\t\\t{\\n\\t\\t\\tstate_lastEventNonce = state_lastEventNonce + 1;\\n\\t\\t\\temit TransactionBatchExecutedEvent(_batchNonce, _tokenContract, state_lastEventNonce);\\n\\t\\t}\\n\\t}\\n\\n\\t// This makes calls to contracts that execute arbitrary logic\\n\\t// First, it gives the logic contract some tokens\\n\\t// Then, it gives msg.senders tokens for fees\\n\\t// Then, it calls an arbitrary function on the logic contract\\n\\t// invalidationId and invalidationNonce are used for replay prevention.\\n\\t// They can be used to implement a per-token nonce by setting the token\\n\\t// address as the invalidationId and incrementing the nonce each call.\\n\\t// They can be used for nonce-free replay prevention by using a different invalidationId\\n\\t// for each call.\\n\\tfunction submitLogicCall(\\n\\t\\t// The validators that approve the call\\n\\t\\tValsetArgs calldata _currentValset,\\n\\t\\t// These are arrays of the parts of the validators signatures\\n\\t\\tSignature[] calldata _sigs,\\n\\t\\tLogicCallArgs memory _args\\n\\t) external nonReentrant {\\n\\t\\t// CHECKS scoped to reduce stack depth\\n\\t\\t{\\n\\t\\t\\t// Check that the call has not timed out\\n\\t\\t\\tif (block.number >= _args.timeOut) {\\n\\t\\t\\t\\trevert LogicCallTimedOut();\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Check that the invalidation nonce is higher than the last nonce for this invalidation Id\\n\\t\\t\\tif (state_invalidationMapping[_args.invalidationId] >= _args.invalidationNonce) {\\n\\t\\t\\t\\trevert InvalidLogicCallNonce({\\n\\t\\t\\t\\t\\tnewNonce: _args.invalidationNonce,\\n\\t\\t\\t\\t\\tcurrentNonce: state_invalidationMapping[_args.invalidationId]\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\t// note the lack of nonce skipping check, it's not needed here since an attacker\\n\\t\\t\\t// will never be able to fill the invalidationId space, therefore a nonce lockout\\n\\t\\t\\t// is simply not possible\\n\\n\\t\\t\\t// Check that current validators, powers, and signatures (v,r,s) set is well-formed\\n\\t\\t\\tvalidateValset(_currentValset, _sigs);\\n\\n\\t\\t\\t// Check that the supplied current validator set matches the saved checkpoint\\n\\t\\t\\tif (makeCheckpoint(_currentValset, state_gravityId) != state_lastValsetCheckpoint) {\\n\\t\\t\\t\\trevert IncorrectCheckpoint();\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (_args.transferAmounts.length != _args.transferTokenContracts.length) {\\n\\t\\t\\t\\trevert InvalidLogicCallTransfers();\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (_args.feeAmounts.length != _args.feeTokenContracts.length) {\\n\\t\\t\\t\\trevert InvalidLogicCallFees();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t{\\n\\t\\t\\tbytes32 argsHash = keccak256(\\n\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\tstate_gravityId,\\n\\t\\t\\t\\t\\t// bytes32 encoding of \\\"logicCall\\\"\\n\\t\\t\\t\\t\\t0x6c6f67696343616c6c0000000000000000000000000000000000000000000000,\\n\\t\\t\\t\\t\\t_args.transferAmounts,\\n\\t\\t\\t\\t\\t_args.transferTokenContracts,\\n\\t\\t\\t\\t\\t_args.feeAmounts,\\n\\t\\t\\t\\t\\t_args.feeTokenContracts,\\n\\t\\t\\t\\t\\t_args.logicContractAddress,\\n\\t\\t\\t\\t\\t_args.payload,\\n\\t\\t\\t\\t\\t_args.timeOut,\\n\\t\\t\\t\\t\\t_args.invalidationId,\\n\\t\\t\\t\\t\\t_args.invalidationNonce\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Check that enough current validators have signed off on the transaction batch and valset\\n\\t\\t\\tcheckValidatorSignatures(\\n\\t\\t\\t\\t_currentValset,\\n\\t\\t\\t\\t_sigs,\\n\\t\\t\\t\\t// Get hash of the transaction batch and checkpoint\\n\\t\\t\\t\\targsHash,\\n\\t\\t\\t\\tconstant_powerThreshold\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// ACTIONS\\n\\n\\t\\t// Update invaldiation nonce\\n\\t\\tstate_invalidationMapping[_args.invalidationId] = _args.invalidationNonce;\\n\\n\\t\\t// Send tokens to the logic contract\\n\\t\\tfor (uint256 i = 0; i < _args.transferAmounts.length; i++) {\\n\\t\\t\\tIERC20(_args.transferTokenContracts[i]).safeTransfer(\\n\\t\\t\\t\\t_args.logicContractAddress,\\n\\t\\t\\t\\t_args.transferAmounts[i]\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// Make call to logic contract\\n\\t\\tbytes memory returnData = Address.functionCall(_args.logicContractAddress, _args.payload);\\n\\n\\t\\t// Send fees to msg.sender\\n\\t\\tfor (uint256 i = 0; i < _args.feeAmounts.length; i++) {\\n\\t\\t\\tIERC20(_args.feeTokenContracts[i]).safeTransfer(msg.sender, _args.feeAmounts[i]);\\n\\t\\t}\\n\\n\\t\\t// LOGS scoped to reduce stack depth\\n\\t\\t{\\n\\t\\t\\tstate_lastEventNonce = state_lastEventNonce + 1;\\n\\t\\t\\temit LogicCallEvent(\\n\\t\\t\\t\\t_args.invalidationId,\\n\\t\\t\\t\\t_args.invalidationNonce,\\n\\t\\t\\t\\treturnData,\\n\\t\\t\\t\\tstate_lastEventNonce\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction sendToCosmos(\\n\\t\\taddress _tokenContract,\\n\\t\\tstring calldata _destination,\\n\\t\\tuint256 _amount\\n\\t) external nonReentrant {\\n\\t\\t// we snapshot our current balance of this token\\n\\t\\tuint256 ourStartingBalance = IERC20(_tokenContract).balanceOf(address(this));\\n\\n\\t\\t// attempt to transfer the user specified amount\\n\\t\\tIERC20(_tokenContract).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n\\t\\t// check what this particular ERC20 implementation actually gave us, since it doesn't\\n\\t\\t// have to be at all related to the _amount\\n\\t\\tuint256 ourEndingBalance = IERC20(_tokenContract).balanceOf(address(this));\\n\\n\\t\\t// a very strange ERC20 may trigger this condition, if we didn't have this we would\\n\\t\\t// underflow, so it's mostly just an error message printer\\n\\t\\tif (ourEndingBalance <= ourStartingBalance) {\\n\\t\\t\\trevert InvalidSendToCosmos();\\n\\t\\t}\\n\\n\\t\\tstate_lastEventNonce = state_lastEventNonce + 1;\\n\\n\\t\\t// emit to Cosmos the actual amount our balance has changed, rather than the user\\n\\t\\t// provided amount. This protects against a small set of wonky ERC20 behavior, like\\n\\t\\t// burning on send but not tokens that for example change every users balance every day.\\n\\t\\temit SendToCosmosEvent(\\n\\t\\t\\t_tokenContract,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_destination,\\n\\t\\t\\tourEndingBalance - ourStartingBalance,\\n\\t\\t\\tstate_lastEventNonce\\n\\t\\t);\\n\\t}\\n\\n\\tfunction deployERC20(\\n\\t\\tstring calldata _cosmosDenom,\\n\\t\\tstring calldata _name,\\n\\t\\tstring calldata _symbol,\\n\\t\\tuint8 _decimals\\n\\t) external {\\n\\t\\t// Deploy an ERC20 with entire supply granted to Gravity.sol\\n\\t\\tCosmosERC20 erc20 = new CosmosERC20(address(this), _name, _symbol, _decimals);\\n\\n\\t\\t// Fire an event to let the Cosmos module know\\n\\t\\tstate_lastEventNonce = state_lastEventNonce + 1;\\n\\t\\temit ERC20DeployedEvent(\\n\\t\\t\\t_cosmosDenom,\\n\\t\\t\\taddress(erc20),\\n\\t\\t\\t_name,\\n\\t\\t\\t_symbol,\\n\\t\\t\\t_decimals,\\n\\t\\t\\tstate_lastEventNonce\\n\\t\\t);\\n\\t}\\n\\n\\tconstructor(\\n\\t\\t// A unique identifier for this gravity instance to use in signatures\\n\\t\\tbytes32 _gravityId,\\n\\t\\t// The validator set, not in valset args format since many of it's\\n\\t\\t// arguments would never be used in this case\\n\\t\\taddress[] memory _validators,\\n\\t\\tuint256[] memory _powers\\n\\t) {\\n\\t\\t// CHECKS\\n\\n\\t\\t// Check that validators, powers, and signatures (v,r,s) set is well-formed\\n\\t\\tif (_validators.length != _powers.length || _validators.length == 0) {\\n\\t\\t\\trevert MalformedCurrentValidatorSet();\\n\\t\\t}\\n\\n\\t\\t// Check cumulative power to ensure the contract has sufficient power to actually\\n\\t\\t// pass a vote\\n\\t\\tuint256 cumulativePower = 0;\\n\\t\\tfor (uint256 i = 0; i < _powers.length; i++) {\\n\\t\\t\\tcumulativePower = cumulativePower + _powers[i];\\n\\t\\t\\tif (cumulativePower > constant_powerThreshold) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (cumulativePower <= constant_powerThreshold) {\\n\\t\\t\\trevert InsufficientPower({\\n\\t\\t\\t\\tcumulativePower: cumulativePower,\\n\\t\\t\\t\\tpowerThreshold: constant_powerThreshold\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tValsetArgs memory _valset;\\n\\t\\t_valset = ValsetArgs(_validators, _powers, 0, 0, address(0));\\n\\n\\t\\tbytes32 newCheckpoint = makeCheckpoint(_valset, _gravityId);\\n\\n\\t\\t// ACTIONS\\n\\n\\t\\tstate_gravityId = _gravityId;\\n\\t\\tstate_lastValsetCheckpoint = newCheckpoint;\\n\\n\\t\\t// LOGS\\n\\n\\t\\temit ValsetUpdatedEvent(\\n\\t\\t\\tstate_lastValsetNonce,\\n\\t\\t\\tstate_lastEventNonce,\\n\\t\\t\\t0,\\n\\t\\t\\taddress(0),\\n\\t\\t\\t_validators,\\n\\t\\t\\t_powers\\n\\t\\t);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CosmosToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract CosmosERC20 is ERC20 {\\n\\tuint256 MAX_UINT = 2**256 - 1;\\n\\tuint8 private cosmosDecimals;\\n\\taddress private gravityAddress;\\n\\n\\t// This override ensures we return the proper number of decimals\\n\\t// for the cosmos token\\n\\tfunction decimals() public view virtual override returns (uint8) {\\n\\t\\treturn cosmosDecimals;\\n\\t}\\n\\n\\t// This is not an accurate total supply. Instead this is the total supply\\n\\t// of the given cosmos asset on Ethereum at this moment in time. Keeping\\n\\t// a totally accurate supply would require constant updates from the Cosmos\\n\\t// side, while in theory this could be piggy-backed on some existing bridge\\n\\t// operation it's a lot of complextiy to add so we chose to forgoe it.\\n\\tfunction totalSupply() public view virtual override returns (uint256) {\\n\\t\\treturn MAX_UINT - balanceOf(gravityAddress);\\n\\t}\\n\\n\\tconstructor(\\n\\t\\taddress _gravityAddress,\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tuint8 _decimals\\n\\t) ERC20(_name, _symbol) {\\n\\t\\tcosmosDecimals = _decimals;\\n\\t\\tgravityAddress = _gravityAddress;\\n\\t\\t_mint(_gravityAddress, MAX_UINT);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_gravityId\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BatchTimedOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectCheckpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cumulativePower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"powerThreshold\",\"type\":\"uint256\"}],\"name\":\"InsufficientPower\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidBatchNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLogicCallFees\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidLogicCallNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLogicCallTransfers\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSendToCosmos\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidValsetNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LogicCallTimedOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MalformedBatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MalformedCurrentValidatorSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MalformedNewValidatorSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_cosmosDenom\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"ERC20DeployedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_invalidationId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_invalidationNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_returnData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"LogicCallEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_destination\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"SendToCosmosEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_batchNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"TransactionBatchExecutedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newValsetNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"ValsetUpdatedEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_cosmosDenom\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"deployERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"lastBatchNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_invalidation_id\",\"type\":\"bytes32\"}],\"name\":\"lastLogicCallNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_destination\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToCosmos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_gravityId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"state_invalidationMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"state_lastBatchNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastEventNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastValsetCheckpoint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastValsetNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"valsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct ValsetArgs\",\"name\":\"_currentValset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Signature[]\",\"name\":\"_sigs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_destinations\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_batchNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_batchTimeout\",\"type\":\"uint256\"}],\"name\":\"submitBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"valsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct ValsetArgs\",\"name\":\"_currentValset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Signature[]\",\"name\":\"_sigs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"transferAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"transferTokenContracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"feeTokenContracts\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"logicContractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"timeOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"invalidationId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"invalidationNonce\",\"type\":\"uint256\"}],\"internalType\":\"struct LogicCallArgs\",\"name\":\"_args\",\"type\":\"tuple\"}],\"name\":\"submitLogicCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"valsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct ValsetArgs\",\"name\":\"_currentValset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Signature[]\",\"name\":\"_sigs\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"_theHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_powerThreshold\",\"type\":\"uint256\"}],\"name\":\"testCheckValidatorSignatures\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"valsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct ValsetArgs\",\"name\":\"_valsetArgs\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_gravityId\",\"type\":\"bytes32\"}],\"name\":\"testMakeCheckpoint\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"valsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct ValsetArgs\",\"name\":\"_newValset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"valsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct ValsetArgs\",\"name\":\"_currentValset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Signature[]\",\"name\":\"_sigs\",\"type\":\"tuple[]\"}],\"name\":\"updateValset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Gravity","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"677261766974792d6272696467652d6d61696e6e65740000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000cc00000000000000000000000000000000000000000000000000000000000000062000000000000000000000000d02ec8a3fa36cad9d0e6c57b2b8dac9c919bf47e000000000000000000000000d06615eb94920948fededf59e012f688274db5270000000000000000000000001346d2b524c7f8d5549d5f3e87cce3904aa9b4cb000000000000000000000000bdadee22baf8ea072351ef197f48a76c3c18261a000000000000000000000000f6558340163774cc70b38bc1480e21065b0adde80000000000000000000000002c9df7dbe6e73f0b2a1045d1ae608a5230915fee000000000000000000000000042d9cdd6548b51456115000a777f3c59569d99700000000000000000000000011ea1cf1dd5fd9315d45cb6c15e901cb5159d8bb000000000000000000000000fd272eab659160c9ed5a89296a0ca21d28766b6d000000000000000000000000def65f9f0caef14616e2f2ed1945b68ad66562750000000000000000000000003e8ebde4324526ed7119ebc557886b84f9e92c0a0000000000000000000000006299a50d80549dfc758b335e174a2bfac81d6c62000000000000000000000000ac6d6d4ecdeb8d1174e1d948f71f0ba0c331ff920000000000000000000000008f7d963b5402bf073a67ba800b98d788213367c4000000000000000000000000a7298bc2025623626fe139ac65443112a9964953000000000000000000000000659b31cf9b3eff48aaa2f69a29cd96b331a5dde2000000000000000000000000e7b73fa6b0965faf3ec97efa884e7dd6d741e8bb0000000000000000000000002e5c835adb3f9561ded370bd8ad06a8306254f03000000000000000000000000026504d0c32a99205de5af38875864ede58a746f000000000000000000000000af15575b8cfee665a215606a76313fce2eeb5aa90000000000000000000000007beb98a706033fa28b22098a160974c270325da2000000000000000000000000f08506576345fb6abb6a80fcec2d34e4c547c8060000000000000000000000000c84b0299018757c8a94cad699800b68856acbab00000000000000000000000006a49340adeabbbea0b850c581cd07c5a1e57c47000000000000000000000000eb529af497f6736ed9eeb2749edc6c38658f32cf0000000000000000000000006259523bc13e1e3ec964d3cdf9da9517958804cb000000000000000000000000c16e3b44b0779d4b183a581055c7fef55ed25519000000000000000000000000048de1810eee92d2c540125c9a4896ea5c064c67000000000000000000000000049796a46ad4e24e6feea4f836b56c407484b52c000000000000000000000000097ee4acab904d9b477e4fc49c7e1ea67b460bc90000000000000000000000001864f0c868eedcc541391dbcf95028bed3dfbe590000000000000000000000001a055371f135c350df98d43be53a71d719f987d90000000000000000000000001d039a919efb8d88e5c24d8011c1581beaa4e8c30000000000000000000000001bcc53de17f04151865912e29173105653727cff00000000000000000000000020f604dc5a3d49b93b21bd40227f43dc37b3106e00000000000000000000000021872c12b1bab85607399b2ee36be75116d708a400000000000000000000000023f91f6a4d0d33d0a48c0728b5f4fb51d4c85edb000000000000000000000000290515f2a26f70c34daf51448c983d3931ea352b0000000000000000000000002982ceaba98bab8ec05a067ffe3a1c2ec3c610c30000000000000000000000002e28d0fc5fd9a0eb807f9c3ea1a0aa43ad7da86c0000000000000000000000002ba80daad13b74ff72dab650fc55a8df343190f20000000000000000000000002c0c794c54a2f6fb37a636da651f00c19497d6ce00000000000000000000000031c32051fca40b133cf9970cfaf141c11ec32512000000000000000000000000366fb970995e737a7b6eb8be8c46b0a5f6392aa100000000000000000000000038a838a8783d5f47b09d28c5c5107e72b880669e0000000000000000000000003d38ca4e28d3e60c16aeaf5617a32a0682211a940000000000000000000000004902d2683cc0123c1fea82ebc361a8f58fb8305500000000000000000000000052173e859a91551a383b3bc96d40d73114ff038700000000000000000000000052511a2b60cfd6e1fb0af37b7ba0a1d8ef82b0ca00000000000000000000000053093609e41632ade1108d22c98e7a90c9e51101000000000000000000000000532a1deebc5c54ec93627866cfc9007be2f6181300000000000000000000000054848e2870925d2a0df158feb10a9f99c45f8f3d000000000000000000000000577de4619f91d8fd5e434af791318a45db166d370000000000000000000000005b390b4256279dbdd9b699853edd787a97975a4d0000000000000000000000005c1522670a750d548ce767eba332d09e171a196d0000000000000000000000005deb18a724df51902e0742d7477340ab80fe611c000000000000000000000000624977fe6a9f887fa858957b3b92b39423b43b3200000000000000000000000063e37e48f29f1b2aca247e045d6244309cba577e000000000000000000000000646f836b0a88a7a1dc2dfddee260b4c86a583fa40000000000000000000000006b1dfe7ca2e93b6a0b534d140b02054deaa834490000000000000000000000007960c3c30718f9f99137956646763146736802340000000000000000000000007baa546a8af98076e0ff868730f1c30a50a0a7f20000000000000000000000007e33410db54e9eadf619911b2e4d404fa08a7f3d0000000000000000000000007f96379a0f136176270f382b37c6215b2f25790300000000000000000000000082a2ef1df41bdec4292ddbf8fca870ca40a253cd00000000000000000000000082b72ce9b848b91d3943867eca064bc4b3504a8f00000000000000000000000083377eb59ffbf333179d241457e4efdbdb9f7bc10000000000000000000000008477bf7c6d465405a840570a405a2973d9dc8d520000000000000000000000008f8011fda21d25d9c4846790d6ef66c8398cc3b50000000000000000000000008be231e6ed8e002cac60ca2284e6ef377c188eca0000000000000000000000009384803b6a8f07b13691e40747933c09b6c5635600000000000000000000000098f99515c0a44eb4f45f33bd41eea304da13e4000000000000000000000000009f7bbb1f313e8bc7309ab6be429ebf1df0fd54fe000000000000000000000000a17e673d399308aa4f6f80065e484058b1bc69c3000000000000000000000000be365629ced317dd785328a0c4425dd1be1c6f8c000000000000000000000000caa8b3e3bf2385c74041a96b6599560e68808a46000000000000000000000000dca8c176c2610adc07e84b008cc5b6dbbcce7236000000000000000000000000db6b96055156908d1263796ce559cccacdef3d7b000000000000000000000000de328ee7b3a6e3918a54ea8765d09e841ad5f56a000000000000000000000000e20d2fda099815b5b7724712d39b97daacb4b855000000000000000000000000a61889a82f66a9286075e2bf3984e49df28a9a11000000000000000000000000b1d6785e38ba13a35e479222dab48e083b18a282000000000000000000000000b3261b22e3fd1715ec639b1a8f1edea8ed3163dd000000000000000000000000b9d03c913e368a0137b2d08d75263525ad3fccfc000000000000000000000000bc3f6a075c931ce5d9d6a20d8ee652d940cf5b7a000000000000000000000000c0043256d85d56194fe50e83bc819c4dcb1d9a97000000000000000000000000c20f0557cf68ed2ea1227473960fcb532a0f430b000000000000000000000000c6de773e6f30155f55468e0b3ddb612904225597000000000000000000000000cebfd2dd7b42032582fccd2b6a9bba88a2e4ebf0000000000000000000000000d059ee08dacf95c91940515aec6353bdcd587929000000000000000000000000d5bc4fea09f514a1c86ba06dad51aeb8edefdd34000000000000000000000000d9bc82708848dca0eccb6d51712185da2a8cadee000000000000000000000000e0fbe446c1fb21f42aa41f9edcf8a6611c86d419000000000000000000000000ef2403fe087a250697d9d93709466bf51d228188000000000000000000000000eb60b3c0ed0c75a4ed52d27a7f505e596afa9e3e000000000000000000000000ee320c1e727bc617545a8ae09e71b85dbef7a8e4000000000000000000000000f65615165d3520a4b804a7710f17a687a2164c79000000000000000000000000fa42a24df34df089413e9aceb162b7c8f02131f90000000000000000000000000000000000000000000000000000000000000062000000000000000000000000000000000000000000000000000000002344dc27000000000000000000000000000000000000000000000000000000000246b8a9000000000000000000000000000000000000000000000000000000000246b561000000000000000000000000000000000000000000000000000000000246b48f000000000000000000000000000000000000000000000000000000000246b48f000000000000000000000000000000000000000000000000000000000246b3bd000000000000000000000000000000000000000000000000000000000246b2eb000000000000000000000000000000000000000000000000000000000246b2eb000000000000000000000000000000000000000000000000000000000246b2eb000000000000000000000000000000000000000000000000000000000246b147000000000000000000000000000000000000000000000000000000000246b075000000000000000000000000000000000000000000000000000000000246b075000000000000000000000000000000000000000000000000000000000246b075000000000000000000000000000000000000000000000000000000000246aed1000000000000000000000000000000000000000000000000000000000246ad2d000000000000000000000000000000000000000000000000000000000246ac5b000000000000000000000000000000000000000000000000000000000246a9e6000000000000000000000000000000000000000000000000000000000246a914000000000000000000000000000000000000000000000000000000000246a428000000000000000000000000000000000000000000000000000000000246a0e0000000000000000000000000000000000000000000000000000000000246a00e0000000000000000000000000000000000000000000000000000000002469e6a0000000000000000000000000000000000000000000000000000000002469b220000000000000000000000000000000000000000000000000000000002469636000000000000000000000000000000000000000000000000000000000246949300000000000000000000000000000000000000000000000000000000024693c10000000000000000000000000000000000000000000000000000000002468b8d00000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b500000000000000000000000000000000000000000000000000000000024681b5","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}