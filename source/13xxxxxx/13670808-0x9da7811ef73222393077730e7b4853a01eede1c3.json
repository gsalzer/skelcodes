{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BitstraysDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title The Bitstrays NFT descriptor\\n\\n/***********************************************************\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@........................@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@%.................................@@@@@@@@@@@@@\\n.......................@@@@@@@..............................\\n./@@@@@@@@@...................@@@....*@@@@.......*@@@@@@@@@.\\n./@@@@@@@.......@@@@@.........@@@.........@@@@@.......@@@@@.\\n@%..@@.......................................@@.......@@@..@\\n@%**.........,**.........................................**@\\n@@@@##.....##(**#######   .........  ,#######  .......###@@@\\n@@@@@@...@@@@#  @@   @@   .........  ,@@  @@@  .......@@@@@@\\n@@@@@@.....@@#  @@@@@@@   .........  ,@@@@@@@  .......@@@@@@\\n@@@@@@.....@@@@@       @@%............       .........@@@@@@\\n@@@@@@@@@..../@@@@@@@@@.............................@@@@@@@@\\n@@@@@@@@@............                   ............@@@@@@@@\\n@@@@@@@@@@@..........  @@@@@@@@@@@@@@%  .........*@@@@@@@@@@\\n@@@@@@@@@@@@@%....   @@//////////////#@@  .....@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@  @@@///////////////////@@   @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@  ************************   @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n************************************************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\\nimport { Strings } from '@openzeppelin/contracts/utils/Strings.sol';\\nimport { IBitstraysDescriptor } from './interfaces/IBitstraysDescriptor.sol';\\nimport { IBitstraysSeeder } from './interfaces/IBitstraysSeeder.sol';\\nimport { NFTDescriptor } from './libs/NFTDescriptor.sol';\\nimport { MultiPartRLEToSVG } from './libs/MultiPartRLEToSVG.sol';\\nimport { StringUtil } from './libs/StringUtil.sol';\\n\\ncontract BitstraysDescriptor is IBitstraysDescriptor, Ownable {\\n    using Strings for uint256;\\n\\n    // prettier-ignore\\n    // https://creativecommons.org/publicdomain/zero/1.0/legalcode.txt\\n    bytes32 constant COPYRIGHT_CC0_1_0_UNIVERSAL_LICENSE = 0xa2010f343487d3f7618affe54f789f5487602331c0a8d03f49e9a7c547cf0499;\\n\\n    // Whether or not new Bitstray parts can be added\\n    bool public override arePartsLocked;\\n\\n    // Whether or not `tokenURI` should be returned as a data URI (Default: true)\\n    bool public override isDataURIEnabled = true;\\n\\n    // Whether or not attributes should be returned in tokenURI response (Default: true)\\n    bool public override areAttributesEnabled = true;\\n\\n    // Base URI\\n    string public override baseURI;\\n\\n    // Bitstray Color Palettes (Index => Hex Colors)\\n    mapping(uint8 => string[]) public override palettes;\\n\\n    // Bitstray Backgrounds (Hex Colors)\\n    string[] public override backgrounds;\\n\\n    // Bitstray Arms (Custom RLE)\\n    bytes[] public override arms;\\n\\n    // Bitstray Shirts (Custom RLE)\\n    bytes[] public override shirts;\\n\\n    // Bitstray Motives (Custom RLE)\\n    bytes[] public override motives;\\n\\n    // Bitstray Heads (Custom RLE)\\n    bytes[] public override heads;\\n\\n    // Bitstray Eyes (Custom RLE)\\n    bytes[] public override eyes;\\n\\n    // Bitstray Mouths (Custom RLE)\\n    bytes[] public override mouths;\\n\\n    // Bitstary Metadata (Array of String)\\n    mapping(uint8 => string[]) public override metadata;\\n\\n    // Bitstary Trait Names (Array of String)\\n    string[] public override traitNames;\\n\\n    /**\\n     * @notice Require that the parts have not been locked.\\n     */\\n    modifier whenPartsNotLocked() {\\n        require(!arePartsLocked, 'Parts are locked');\\n        _;\\n    }\\n\\n    /**\\n     * @notice Get the number of available Bitstray `backgrounds`.\\n     */\\n    function backgroundCount() external view override returns (uint256) {\\n        return backgrounds.length;\\n    }\\n\\n    /**\\n     * @notice Get the number of available Bitstray `arms`.\\n     */\\n    function armsCount() external view override returns (uint256) {\\n        return arms.length;\\n    }\\n\\n    /**\\n     * @notice Get the number of available Bitstray `shirts`.\\n     */\\n    function shirtsCount() external view override returns (uint256) {\\n        return shirts.length;\\n    }\\n\\n    /**\\n     * @notice Get the number of available Bitstray `motives`.\\n     */\\n    function motivesCount() external view override returns (uint256) {\\n        return motives.length;\\n    }\\n\\n    /**\\n     * @notice Get the number of available Bitstray `heads`.\\n     */\\n    function headCount() external view override returns (uint256) {\\n        return heads.length;\\n    }\\n\\n    /**\\n     * @notice Get the number of available Bitstray `eyes`.\\n     */\\n    function eyesCount() external view override returns (uint256) {\\n        return eyes.length;\\n    }\\n\\n    /**\\n     * @notice Get the number of available Bitstray `mouths`.\\n     */\\n    function mouthsCount() external view override returns (uint256) {\\n        return mouths.length;\\n    }\\n\\n    /**\\n     * @notice Add metadata for all parts.\\n     * @dev This function can only be called by the owner.\\n     * should container encoding details for traits [#traits, trait1, #elements, trait2, #elements, data ...]\\n     */\\n    function addManyMetadata(string[] calldata _metadata) external override onlyOwner {\\n        require(_metadata.length >= 1, '_metadata length < 1');\\n        uint256 _traits = StringUtil.parseInt(_metadata[0]);\\n        uint256 offset = _traits + 1; //define first real data element\\n        // traits are provided in #traits, traitname\\n        uint8 index = 0;\\n        for (uint8 i = 1; i < _traits; i+=2 ) {\\n            _addTraitName(_metadata[i]); // read trait name\\n            uint256 elements = StringUtil.parseInt(_metadata[i+1]);\\n            for (uint256 j = offset; j < (offset + elements); j++) {\\n                _addMetadata(index, _metadata[j]);\\n            }\\n            offset = offset + elements;\\n            index++;\\n        }\\n    }\\n\\n    /**\\n     * @notice Add colors to a color palette.\\n     * @dev This function can only be called by the owner.\\n     */\\n    function addManyColorsToPalette(uint8 paletteIndex, string[] calldata newColors) external override onlyOwner {\\n        require(palettes[paletteIndex].length + newColors.length <= 256, 'Palettes can only hold 256 colors');\\n        for (uint256 i = 0; i < newColors.length; i++) {\\n            _addColorToPalette(paletteIndex, newColors[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Batch add Bitstray backgrounds.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addManyBackgrounds(string[] calldata _backgrounds) external override onlyOwner whenPartsNotLocked {\\n        for (uint256 i = 0; i < _backgrounds.length; i++) {\\n            _addBackground(_backgrounds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Batch add Bitstray arms.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addManyArms(bytes[] calldata _arms) external override onlyOwner whenPartsNotLocked {\\n        for (uint256 i = 0; i < _arms.length; i++) {\\n            _addArms(_arms[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Batch add Bitstray shirts.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addManyShirts(bytes[] calldata _shirts) external override onlyOwner whenPartsNotLocked {\\n        for (uint256 i = 0; i < _shirts.length; i++) {\\n            _addShirt(_shirts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Batch add Bitstray motives.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addManyMotives(bytes[] calldata _motives) external override onlyOwner whenPartsNotLocked {\\n        for (uint256 i = 0; i < _motives.length; i++) {\\n            _addMotive(_motives[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Batch add Bitstray heads.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addManyHeads(bytes[] calldata _heads) external override onlyOwner whenPartsNotLocked {\\n        for (uint256 i = 0; i < _heads.length; i++) {\\n            _addHead(_heads[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Batch add Bitstray eyes.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addManyEyes(bytes[] calldata _eyes) external override onlyOwner whenPartsNotLocked {\\n        for (uint256 i = 0; i < _eyes.length; i++) {\\n            _addEyes(_eyes[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Batch add Bitstray eyes.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addManyMouths(bytes[] calldata _mouths) external override onlyOwner whenPartsNotLocked {\\n        for (uint256 i = 0; i < _mouths.length; i++) {\\n            _addMouth(_mouths[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Add a single color to a color palette.\\n     * @dev This function can only be called by the owner.\\n     */\\n    function addColorToPalette(uint8 _paletteIndex, string calldata _color) external override onlyOwner {\\n        require(palettes[_paletteIndex].length <= 255, 'Palettes can only hold 256 colors');\\n        _addColorToPalette(_paletteIndex, _color);\\n    }\\n\\n    /**\\n     * @notice Add a Bitstray background.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addBackground(string calldata _background) external override onlyOwner whenPartsNotLocked {\\n        _addBackground(_background);\\n    }\\n\\n    /**\\n     * @notice Add a Bitstray arms.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addArms(bytes calldata _arms) external override onlyOwner whenPartsNotLocked {\\n        _addArms(_arms);\\n    }\\n\\n    /**\\n     * @notice Add a Bitstray shirt.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addShirt(bytes calldata _shirt) external override onlyOwner whenPartsNotLocked {\\n        _addShirt(_shirt);\\n    }\\n\\n    /**\\n     * @notice Add a Bitstray motive.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addMotive(bytes calldata _motive) external override onlyOwner whenPartsNotLocked {\\n        _addMotive(_motive);\\n    }\\n\\n    /**\\n     * @notice Add a Bitstray head.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addHead(bytes calldata _head) external override onlyOwner whenPartsNotLocked {\\n        _addHead(_head);\\n    }\\n\\n    /**\\n     * @notice Add Bitstray eyes.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addEyes(bytes calldata _eyes) external override onlyOwner whenPartsNotLocked {\\n        _addEyes(_eyes);\\n    }\\n\\n    /**\\n     * @notice Add Bitstray mouth.\\n     * @dev This function can only be called by the owner when not locked.\\n     */\\n    function addMouth(bytes calldata _mouth) external override onlyOwner whenPartsNotLocked {\\n        _addMouth(_mouth);\\n    }\\n\\n    /**\\n     * @notice Lock all Bitstray parts.\\n     * @dev This cannot be reversed and can only be called by the owner when not locked.\\n     */\\n    function lockParts() external override onlyOwner whenPartsNotLocked {\\n        arePartsLocked = true;\\n\\n        emit PartsLocked();\\n    }\\n\\n\\n    /**\\n     * @notice Toggle a boolean value which determines if `tokenURI` returns a data URI\\n     * or an HTTP URL.\\n     * @dev This can only be called by the owner.\\n     */\\n    function toggleAttributesEnabled() external override onlyOwner {\\n        bool enabled = !areAttributesEnabled;\\n\\n        areAttributesEnabled = enabled;\\n        emit AttributesToggled(enabled);\\n    }\\n\\n    /**\\n     * @notice Toggle a boolean value which determines if `tokenURI` returns a data URI\\n     * or an HTTP URL.\\n     * @dev This can only be called by the owner.\\n     */\\n    function toggleDataURIEnabled() external override onlyOwner {\\n        bool enabled = !isDataURIEnabled;\\n\\n        isDataURIEnabled = enabled;\\n        emit DataURIToggled(enabled);\\n    }\\n\\n    /**\\n     * @notice Set the base URI for all token IDs. It is automatically\\n     * added as a prefix to the value returned in {tokenURI}, or to the\\n     * token ID if {tokenURI} is empty.\\n     * @dev This can only be called by the owner.\\n     */\\n    function setBaseURI(string calldata _baseURI) external override onlyOwner {\\n        baseURI = _baseURI;\\n\\n        emit BaseURIUpdated(_baseURI);\\n    }\\n\\n    /**\\n     * @notice Given a token ID and seed, construct a token URI for an official Bitstrays DAO bitstray.\\n     * @dev The returned value may be a base64 encoded data URI or an API URL.\\n     */\\n    function tokenURI(uint256 tokenId, IBitstraysSeeder.Seed memory seed) external view override returns (string memory) {\\n        if (isDataURIEnabled) {\\n            return dataURI(tokenId, seed);\\n        }\\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\\n    }\\n\\n    /**\\n     * @notice Given a token ID and seed, construct a base64 encoded data URI for an official Bitstrays DAO bitstray.\\n     */\\n    function dataURI(uint256 tokenId, IBitstraysSeeder.Seed memory seed) public view override returns (string memory) {\\n        string memory bitstrayId = tokenId.toString();\\n        string memory name = string(abi.encodePacked('Bitstray #', bitstrayId));\\n        string memory description = string(abi.encodePacked('Bitstray #', bitstrayId, ' is a member of the Bitstrays DAO and on-chain citizen'));\\n        return genericDataURI(name, description,  seed);\\n    }\\n\\n    /**\\n     * @notice Given a name, description, and seed, construct a base64 encoded data URI.\\n     */\\n    function genericDataURI(\\n        string memory name,\\n        string memory description,\\n        IBitstraysSeeder.Seed memory seed\\n    ) public view override returns (string memory) {\\n        NFTDescriptor.TokenURIParams memory params = NFTDescriptor.TokenURIParams({\\n            name: name,\\n            description: description,\\n            attributes : _getAttributesForSeed(seed),\\n            parts: _getPartsForSeed(seed),\\n            background: backgrounds[seed.background]\\n        });\\n        return NFTDescriptor.constructTokenURI(params, palettes);\\n    }\\n\\n    /**\\n     * @notice Given a seed, construct a base64 encoded SVG image.\\n     */\\n    function generateSVGImage(IBitstraysSeeder.Seed memory seed) external view override returns (string memory) {\\n        MultiPartRLEToSVG.SVGParams memory params = MultiPartRLEToSVG.SVGParams({\\n            parts: _getPartsForSeed(seed),\\n            background: backgrounds[seed.background]\\n        });\\n        return NFTDescriptor.generateSVGImage(params, palettes);\\n    }\\n\\n    /**\\n     * @notice Add a single attribute to metadata.\\n     */\\n    function _addTraitName(string calldata _traitName) internal {\\n        traitNames.push(_traitName);\\n    }\\n\\n    /**\\n     * @notice Add a single attribute to metadata.\\n     */\\n    function _addMetadata(uint8 _index, string calldata _metadata) internal {\\n        metadata[_index].push(_metadata);\\n    }\\n\\n    /**\\n     * @notice Add a single color to a color palette.\\n     */\\n    function _addColorToPalette(uint8 _paletteIndex, string calldata _color) internal {\\n        palettes[_paletteIndex].push(_color);\\n    }\\n\\n    /**\\n     * @notice Add a Bitstray background.\\n     */\\n    function _addBackground(string calldata _background) internal {\\n        backgrounds.push(_background);\\n    }\\n\\n    /**\\n     * @notice Add a Bitstray arm.\\n     */\\n    function _addArms(bytes calldata _arms) internal {\\n        arms.push(_arms);\\n    }\\n\\n    /**\\n     * @notice Add a Bitstray shirt.\\n     */\\n    function _addShirt(bytes calldata _shirt) internal {\\n        shirts.push(_shirt);\\n    }\\n\\n    /**\\n     * @notice Add a Bitstray motive.\\n     */\\n    function _addMotive(bytes calldata _motive) internal {\\n        motives.push(_motive);\\n    }\\n\\n    /**\\n     * @notice Add a Bitstray head.\\n     */\\n    function _addHead(bytes calldata _head) internal {\\n        heads.push(_head);\\n    }\\n\\n    /**\\n     * @notice Add Bitstray eyes.\\n     */\\n    function _addEyes(bytes calldata _eyes) internal {\\n        eyes.push(_eyes);\\n    }\\n    \\n    /**\\n     * @notice Add Bitstray mouths.\\n     */\\n    function _addMouth(bytes calldata _mouth) internal {\\n        mouths.push(_mouth);\\n    }\\n\\n\\n\\n    /**\\n     * @notice Get all Bitstray attributes for the passed `seed`.\\n     */\\n    function _getAttributesForSeed(IBitstraysSeeder.Seed memory seed) internal view returns (string[] memory) {\\n        if (areAttributesEnabled) {\\n            string[] memory _attributes = new string[](14);\\n            _attributes[0] = traitNames[0];\\n            _attributes[1] = metadata[0][seed.head];\\n            _attributes[2] = traitNames[1];\\n            _attributes[3] = metadata[1][seed.head];\\n            _attributes[4] = traitNames[2];\\n            _attributes[5] = metadata[2][seed.arms];\\n            _attributes[6] = traitNames[3];\\n            _attributes[7] = metadata[3][seed.shirt];\\n            _attributes[8] = traitNames[4];\\n            _attributes[9] = metadata[4][seed.motive];\\n            _attributes[10] = traitNames[5];\\n            _attributes[11] = metadata[5][seed.eyes];\\n            _attributes[12] = traitNames[6];\\n            _attributes[13] = metadata[6][seed.mouth];\\n            return _attributes;\\n        }\\n        string[] memory _empty = new string[](0);\\n        return _empty;\\n    }\\n\\n    /**\\n     * @notice Get all Bitstray parts for the passed `seed`.\\n     */\\n    function _getPartsForSeed(IBitstraysSeeder.Seed memory seed) internal view returns (bytes[] memory) {\\n        bytes[] memory _parts = new bytes[](6);\\n        _parts[0] = arms[seed.arms];\\n        _parts[1] = shirts[seed.shirt];\\n        _parts[2] = motives[seed.motive];\\n        _parts[3] = heads[seed.head];\\n        _parts[4] = eyes[seed.eyes];\\n        _parts[5] = mouths[seed.mouth];\\n        return _parts;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBitstraysDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for BitstraysDescriptor\\n\\n/***********************************************************\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@........................@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@%.................................@@@@@@@@@@@@@\\n.......................@@@@@@@..............................\\n./@@@@@@@@@...................@@@....*@@@@.......*@@@@@@@@@.\\n./@@@@@@@.......@@@@@.........@@@.........@@@@@.......@@@@@.\\n@%..@@.......................................@@.......@@@..@\\n@%**.........,**.........................................**@\\n@@@@##.....##(**#######   .........  ,#######  .......###@@@\\n@@@@@@...@@@@#  @@   @@   .........  ,@@  @@@  .......@@@@@@\\n@@@@@@.....@@#  @@@@@@@   .........  ,@@@@@@@  .......@@@@@@\\n@@@@@@.....@@@@@       @@%............       .........@@@@@@\\n@@@@@@@@@..../@@@@@@@@@.............................@@@@@@@@\\n@@@@@@@@@............                   ............@@@@@@@@\\n@@@@@@@@@@@..........  @@@@@@@@@@@@@@%  .........*@@@@@@@@@@\\n@@@@@@@@@@@@@%....   @@//////////////#@@  .....@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@  @@@///////////////////@@   @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@  ************************   @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n************************************************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport { IBitstraysSeeder } from './IBitstraysSeeder.sol';\\n\\ninterface IBitstraysDescriptor {\\n    \\n    event PartsLocked();\\n\\n    event DataURIToggled(bool enabled);\\n\\n    event AttributesToggled(bool enabled);\\n\\n    event BaseURIUpdated(string baseURI);\\n\\n    function arePartsLocked() external returns (bool);\\n\\n    function areAttributesEnabled() external returns (bool);\\n\\n    function isDataURIEnabled() external returns (bool);\\n\\n    function baseURI() external returns (string memory);\\n\\n    function palettes(uint8 paletteIndex, uint256 colorIndex) external view returns (string memory);\\n    \\n    function metadata(uint8 index, uint256 traitIndex) external view returns (string memory);\\n\\n    function traitNames(uint256 index) external view returns (string memory);\\n\\n    function backgrounds(uint256 index) external view returns (string memory);\\n\\n    function arms(uint256 index) external view returns (bytes memory);\\n\\n    function shirts(uint256 index) external view returns (bytes memory);\\n\\n    function motives(uint256 index) external view returns (bytes memory);\\n\\n    function heads(uint256 index) external view returns (bytes memory);\\n\\n    function eyes(uint256 index) external view returns (bytes memory);\\n\\n    function mouths(uint256 index) external view returns (bytes memory);\\n\\n    function backgroundCount() external view returns (uint256);\\n\\n    function armsCount() external view returns (uint256);\\n\\n    function shirtsCount() external view returns (uint256);\\n\\n    function motivesCount() external view returns (uint256);\\n\\n    function headCount() external view returns (uint256);\\n\\n    function eyesCount() external view returns (uint256);\\n\\n    function mouthsCount() external view returns (uint256);\\n\\n    function addManyMetadata(string[] calldata _metadata) external;\\n\\n    function addManyColorsToPalette(uint8 paletteIndex, string[] calldata newColors) external;\\n\\n    function addManyBackgrounds(string[] calldata backgrounds) external;\\n\\n    function addManyArms(bytes[] calldata _arms) external;\\n\\n    function addManyShirts(bytes[] calldata _shirts) external;\\n\\n    function addManyMotives(bytes[] calldata _motives) external;\\n\\n    function addManyHeads(bytes[] calldata _heads) external;\\n\\n    function addManyEyes(bytes[] calldata _eyes) external;\\n\\n    function addManyMouths(bytes[] calldata _mouths) external;\\n\\n    function addColorToPalette(uint8 paletteIndex, string calldata color) external;\\n\\n    function addBackground(string calldata background) external;\\n\\n    function addArms(bytes calldata body) external;\\n\\n    function addShirt(bytes calldata shirt) external;\\n\\n    function addMotive(bytes calldata motive) external;\\n\\n    function addHead(bytes calldata head) external;\\n\\n    function addEyes(bytes calldata eyes) external;\\n\\n    function addMouth(bytes calldata mouth) external;\\n\\n    function lockParts() external;\\n\\n    function toggleDataURIEnabled() external;\\n\\n    function toggleAttributesEnabled() external;\\n\\n    function setBaseURI(string calldata baseURI) external;\\n\\n    function tokenURI(uint256 tokenId, IBitstraysSeeder.Seed memory seed) external view returns (string memory);\\n\\n    function dataURI(uint256 tokenId, IBitstraysSeeder.Seed memory seed) external view returns (string memory);\\n\\n    function genericDataURI(\\n        string calldata name,\\n        string calldata description,\\n        IBitstraysSeeder.Seed memory seed\\n    ) external view returns (string memory);\\n\\n    function generateSVGImage(IBitstraysSeeder.Seed memory seed) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBitstraysSeeder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for BitstraysSeeder\\n\\n/***********************************************************\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@........................@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@%.................................@@@@@@@@@@@@@\\n.......................@@@@@@@..............................\\n./@@@@@@@@@...................@@@....*@@@@.......*@@@@@@@@@.\\n./@@@@@@@.......@@@@@.........@@@.........@@@@@.......@@@@@.\\n@%..@@.......................................@@.......@@@..@\\n@%**.........,**.........................................**@\\n@@@@##.....##(**#######   .........  ,#######  .......###@@@\\n@@@@@@...@@@@#  @@   @@   .........  ,@@  @@@  .......@@@@@@\\n@@@@@@.....@@#  @@@@@@@   .........  ,@@@@@@@  .......@@@@@@\\n@@@@@@.....@@@@@       @@%............       .........@@@@@@\\n@@@@@@@@@..../@@@@@@@@@.............................@@@@@@@@\\n@@@@@@@@@............                   ............@@@@@@@@\\n@@@@@@@@@@@..........  @@@@@@@@@@@@@@%  .........*@@@@@@@@@@\\n@@@@@@@@@@@@@%....   @@//////////////#@@  .....@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@  @@@///////////////////@@   @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@  ************************   @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n************************************************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport { IBitstraysDescriptor } from './IBitstraysDescriptor.sol';\\n\\ninterface IBitstraysSeeder {\\n    struct Seed {\\n        uint48 background;\\n        uint48 arms;\\n        uint48 shirt;\\n        uint48 motive;\\n        uint48 head;\\n        uint48 eyes;\\n        uint48 mouth;\\n    }\\n\\n    function generateSeed(uint256 bitstrayId, IBitstraysDescriptor descriptor) external view returns (Seed memory);\\n}\\n\"\r\n    },\r\n    \"contracts/libs/NFTDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title A library used to construct ERC721 token URIs and SVG images\\n\\n/***********************************************************\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@........................@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@%.................................@@@@@@@@@@@@@\\n.......................@@@@@@@..............................\\n./@@@@@@@@@...................@@@....*@@@@.......*@@@@@@@@@.\\n./@@@@@@@.......@@@@@.........@@@.........@@@@@.......@@@@@.\\n@%..@@.......................................@@.......@@@..@\\n@%**.........,**.........................................**@\\n@@@@##.....##(**#######   .........  ,#######  .......###@@@\\n@@@@@@...@@@@#  @@   @@   .........  ,@@  @@@  .......@@@@@@\\n@@@@@@.....@@#  @@@@@@@   .........  ,@@@@@@@  .......@@@@@@\\n@@@@@@.....@@@@@       @@%............       .........@@@@@@\\n@@@@@@@@@..../@@@@@@@@@.............................@@@@@@@@\\n@@@@@@@@@............                   ............@@@@@@@@\\n@@@@@@@@@@@..........  @@@@@@@@@@@@@@%  .........*@@@@@@@@@@\\n@@@@@@@@@@@@@%....   @@//////////////#@@  .....@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@  @@@///////////////////@@   @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@  ************************   @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n************************************************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport { Base64 } from 'base64-sol/base64.sol';\\nimport { MultiPartRLEToSVG } from './MultiPartRLEToSVG.sol';\\n\\nlibrary NFTDescriptor {\\n    struct TokenURIParams {\\n        string name;\\n        string description;\\n        string[] attributes;\\n        bytes[] parts;\\n        string background;\\n    }\\n    /**\\n     * @notice Construct an ERC721 token attributes.\\n     */\\n    function _generateAttributes(TokenURIParams memory params) internal pure returns (string memory attributes)\\n    {\\n        string memory _attributes = \\\"[\\\";\\n        if (params.attributes.length >0) {\\n            string [] memory att = params.attributes;\\n            for (uint256 i = 0; i < att.length && i + 1 < att.length; i += 2) {\\n                if (i == 0) {\\n                    _attributes = string(abi.encodePacked(_attributes,'{\\\"trait_type\\\":\\\"',att[i],'\\\",\\\"value\\\":\\\"',att[i+1],'\\\"}'));\\n                } else {\\n                    _attributes = string(abi.encodePacked(_attributes, ',{\\\"trait_type\\\":\\\"',att[i],'\\\",\\\"value\\\":\\\"',att[i+1],'\\\"}'));\\n                }\\n            }\\n            _attributes = string(abi.encodePacked(_attributes, \\\"]\\\"));\\n            return _attributes;\\n        }\\n        // empty array\\n\\n        return string(abi.encodePacked(_attributes, \\\"]\\\"));\\n    }\\n\\n    /**\\n     * @notice Construct an ERC721 token URI.\\n     */\\n    function constructTokenURI(TokenURIParams memory params, mapping(uint8 => string[]) storage palettes)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        string memory image = generateSVGImage(\\n            MultiPartRLEToSVG.SVGParams({ parts: params.parts, background: params.background }),\\n            palettes\\n        );\\n        string memory attributes = _generateAttributes(params);\\n        // prettier-ignore\\n        return string(\\n            abi.encodePacked(\\n                'data:application/json;base64,',\\n                Base64.encode(\\n                    bytes(\\n                        abi.encodePacked(\\n                        '{\\\"name\\\":\\\"', params.name, '\\\",\\\"description\\\":\\\"', params.description, '\\\",\\\"attributes\\\":',attributes,',\\\"image\\\": \\\"', 'data:image/svg+xml;base64,', image, '\\\"}')\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Generate an SVG image for use in the ERC721 token URI.\\n     */\\n    function generateSVGImage(MultiPartRLEToSVG.SVGParams memory params, mapping(uint8 => string[]) storage palettes)\\n        public\\n        view\\n        returns (string memory svg)\\n    {\\n        return Base64.encode(bytes(MultiPartRLEToSVG.generateSVG(params, palettes)));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/MultiPartRLEToSVG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title A library used to convert multi-part RLE compressed images to SVG\\n\\n/***********************************************************\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@........................@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@%.................................@@@@@@@@@@@@@\\n.......................@@@@@@@..............................\\n./@@@@@@@@@...................@@@....*@@@@.......*@@@@@@@@@.\\n./@@@@@@@.......@@@@@.........@@@.........@@@@@.......@@@@@.\\n@%..@@.......................................@@.......@@@..@\\n@%**.........,**.........................................**@\\n@@@@##.....##(**#######   .........  ,#######  .......###@@@\\n@@@@@@...@@@@#  @@   @@   .........  ,@@  @@@  .......@@@@@@\\n@@@@@@.....@@#  @@@@@@@   .........  ,@@@@@@@  .......@@@@@@\\n@@@@@@.....@@@@@       @@%............       .........@@@@@@\\n@@@@@@@@@..../@@@@@@@@@.............................@@@@@@@@\\n@@@@@@@@@............                   ............@@@@@@@@\\n@@@@@@@@@@@..........  @@@@@@@@@@@@@@%  .........*@@@@@@@@@@\\n@@@@@@@@@@@@@%....   @@//////////////#@@  .....@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@  @@@///////////////////@@   @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@  ************************   @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n************************************************************/\\n\\npragma solidity ^0.8.6;\\n\\nlibrary MultiPartRLEToSVG {\\n    struct SVGParams {\\n        bytes[] parts;\\n        string background;\\n    }\\n\\n    struct ContentBounds {\\n        uint8 top;\\n        uint8 right;\\n        uint8 bottom;\\n        uint8 left;\\n    }\\n\\n    struct Rect {\\n        uint8 length;\\n        uint8 colorIndex;\\n    }\\n\\n    struct DecodedImage {\\n        uint8 paletteIndex;\\n        ContentBounds bounds;\\n        Rect[] rects;\\n    }\\n\\n    /**\\n     * @notice Given RLE image parts and color palettes, merge to generate a single SVG image.\\n     */\\n    function generateSVG(SVGParams memory params, mapping(uint8 => string[]) storage palettes)\\n        internal\\n        view\\n        returns (string memory svg)\\n    {\\n        // prettier-ignore\\n        return string(\\n            abi.encodePacked(\\n                '<svg width=\\\"320\\\" height=\\\"320\\\" viewBox=\\\"0 0 320 320\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" shape-rendering=\\\"crispEdges\\\">',\\n                '<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#', params.background, '\\\" />',\\n                _generateSVGRects(params, palettes),\\n                '</svg>'\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Given RLE image parts and color palettes, generate SVG rects.\\n     */\\n    // prettier-ignore\\n    function _generateSVGRects(SVGParams memory params, mapping(uint8 => string[]) storage palettes)\\n        private\\n        view\\n        returns (string memory svg)\\n    {\\n        string[33] memory lookup = [\\n            '0', '10', '20', '30', '40', '50', '60', '70', \\n            '80', '90', '100', '110', '120', '130', '140', '150', \\n            '160', '170', '180', '190', '200', '210', '220', '230', \\n            '240', '250', '260', '270', '280', '290', '300', '310',\\n            '320' \\n        ];\\n        string memory rects;\\n        for (uint8 p = 0; p < params.parts.length; p++) {\\n            DecodedImage memory image = _decodeRLEImage(params.parts[p]);\\n            string[] storage palette = palettes[image.paletteIndex];\\n            uint256 currentX = image.bounds.left;\\n            uint256 currentY = image.bounds.top;\\n            uint256 cursor;\\n            string[16] memory buffer;\\n\\n            string memory part;\\n            for (uint256 i = 0; i < image.rects.length; i++) {\\n                Rect memory rect = image.rects[i];\\n                if (rect.colorIndex != 0) {\\n                    buffer[cursor] = lookup[rect.length];          // width\\n                    buffer[cursor + 1] = lookup[currentX];         // x\\n                    buffer[cursor + 2] = lookup[currentY];         // y\\n                    buffer[cursor + 3] = palette[rect.colorIndex]; // color\\n\\n                    cursor += 4;\\n\\n                    if (cursor >= 16) {\\n                        part = string(abi.encodePacked(part, _getChunk(cursor, buffer)));\\n                        cursor = 0;\\n                    }\\n                }\\n\\n                currentX += rect.length;\\n                if (currentX == image.bounds.right) {\\n                    currentX = image.bounds.left;\\n                    currentY++;\\n                }\\n            }\\n\\n            if (cursor != 0) {\\n                part = string(abi.encodePacked(part, _getChunk(cursor, buffer)));\\n            }\\n            rects = string(abi.encodePacked(rects, part));\\n        }\\n        return rects;\\n    }\\n\\n    /**\\n     * @notice Return a string that consists of all rects in the provided `buffer`.\\n     */\\n    // prettier-ignore\\n    function _getChunk(uint256 cursor, string[16] memory buffer) private pure returns (string memory) {\\n        string memory chunk;\\n        for (uint256 i = 0; i < cursor; i += 4) {\\n            chunk = string(\\n                abi.encodePacked(\\n                    chunk,\\n                    '<rect width=\\\"', buffer[i], '\\\" height=\\\"10\\\" x=\\\"', buffer[i + 1], '\\\" y=\\\"', buffer[i + 2], '\\\" fill=\\\"#', buffer[i + 3], '\\\" />'\\n                )\\n            );\\n        }\\n        return chunk;\\n    }\\n\\n    /**\\n     * @notice Decode a single RLE compressed image into a `DecodedImage`.\\n     */\\n    function _decodeRLEImage(bytes memory image) private pure returns (DecodedImage memory) {\\n        uint8 paletteIndex = uint8(image[0]);\\n        ContentBounds memory bounds = ContentBounds({\\n            top: uint8(image[1]),\\n            right: uint8(image[2]),\\n            bottom: uint8(image[3]),\\n            left: uint8(image[4])\\n        });\\n\\n        uint256 cursor;\\n        Rect[] memory rects = new Rect[]((image.length - 5) / 2);\\n        for (uint256 i = 5; i < image.length; i += 2) {\\n            rects[cursor] = Rect({ length: uint8(image[i]), colorIndex: uint8(image[i + 1]) });\\n            cursor++;\\n        }\\n        return DecodedImage({ paletteIndex: paletteIndex, bounds: bounds, rects: rects });\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/StringUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title A library used to convert string to int\\n\\n/***********************************************************\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@........................@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@%.................................@@@@@@@@@@@@@\\n.......................@@@@@@@..............................\\n./@@@@@@@@@...................@@@....*@@@@.......*@@@@@@@@@.\\n./@@@@@@@.......@@@@@.........@@@.........@@@@@.......@@@@@.\\n@%..@@.......................................@@.......@@@..@\\n@%**.........,**.........................................**@\\n@@@@##.....##(**#######   .........  ,#######  .......###@@@\\n@@@@@@...@@@@#  @@   @@   .........  ,@@  @@@  .......@@@@@@\\n@@@@@@.....@@#  @@@@@@@   .........  ,@@@@@@@  .......@@@@@@\\n@@@@@@.....@@@@@       @@%............       .........@@@@@@\\n@@@@@@@@@..../@@@@@@@@@.............................@@@@@@@@\\n@@@@@@@@@............                   ............@@@@@@@@\\n@@@@@@@@@@@..........  @@@@@@@@@@@@@@%  .........*@@@@@@@@@@\\n@@@@@@@@@@@@@%....   @@//////////////#@@  .....@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@  @@@///////////////////@@   @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@  ************************   @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n************************************************************/\\n\\npragma solidity ^0.8.6;\\n\\n library StringUtil {\\n\\n\\n    function parseInt(string memory _a) internal pure returns (uint _parsedInt) {\\n        return parseInt(_a, 0);\\n    }\\n\\n    /**\\n     * @notice parse string to uint\\n     */\\n    function parseInt(string memory _a, uint _b) internal pure returns (uint _parsedInt) {\\n        bytes memory bresult = bytes(_a);\\n        uint mint = 0;\\n        bool decimals = false;\\n        for (uint i = 0; i < bresult.length; i++) {\\n            if ((uint(uint8(bresult[i])) >= 48) && (uint(uint8(bresult[i])) <= 57)) {\\n                if (decimals) {\\n                   if (_b == 0) {\\n                       break;\\n                   } else {\\n                       _b--;\\n                   }\\n                }\\n                mint *= 10;\\n                mint += uint(uint8(bresult[i])) - 48;\\n            } else if (uint(uint8(bresult[i])) == 46) {\\n                decimals = true;\\n            }\\n        }\\n        if (_b > 0) {\\n            mint *= 10 ** _b;\\n        }\\n        return mint;\\n    }\\n\\n }\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"base64-sol/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libs/NFTDescriptor.sol\": {\r\n        \"NFTDescriptor\": \"0x94523e4741a1f8fb3707e01bde572132582f3cc7\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"AttributesToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"BaseURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"DataURIToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PartsLocked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_arms\",\"type\":\"bytes\"}],\"name\":\"addArms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_background\",\"type\":\"string\"}],\"name\":\"addBackground\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_paletteIndex\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_color\",\"type\":\"string\"}],\"name\":\"addColorToPalette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_eyes\",\"type\":\"bytes\"}],\"name\":\"addEyes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_head\",\"type\":\"bytes\"}],\"name\":\"addHead\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_arms\",\"type\":\"bytes[]\"}],\"name\":\"addManyArms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_backgrounds\",\"type\":\"string[]\"}],\"name\":\"addManyBackgrounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"paletteIndex\",\"type\":\"uint8\"},{\"internalType\":\"string[]\",\"name\":\"newColors\",\"type\":\"string[]\"}],\"name\":\"addManyColorsToPalette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_eyes\",\"type\":\"bytes[]\"}],\"name\":\"addManyEyes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_heads\",\"type\":\"bytes[]\"}],\"name\":\"addManyHeads\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_metadata\",\"type\":\"string[]\"}],\"name\":\"addManyMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_motives\",\"type\":\"bytes[]\"}],\"name\":\"addManyMotives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_mouths\",\"type\":\"bytes[]\"}],\"name\":\"addManyMouths\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_shirts\",\"type\":\"bytes[]\"}],\"name\":\"addManyShirts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_motive\",\"type\":\"bytes\"}],\"name\":\"addMotive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_mouth\",\"type\":\"bytes\"}],\"name\":\"addMouth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_shirt\",\"type\":\"bytes\"}],\"name\":\"addShirt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areAttributesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arePartsLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arms\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"armsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backgroundCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"backgrounds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"background\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"arms\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"shirt\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"motive\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"head\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"eyes\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"mouth\",\"type\":\"uint48\"}],\"internalType\":\"struct IBitstraysSeeder.Seed\",\"name\":\"seed\",\"type\":\"tuple\"}],\"name\":\"dataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eyes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eyesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"background\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"arms\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"shirt\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"motive\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"head\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"eyes\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"mouth\",\"type\":\"uint48\"}],\"internalType\":\"struct IBitstraysSeeder.Seed\",\"name\":\"seed\",\"type\":\"tuple\"}],\"name\":\"generateSVGImage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"background\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"arms\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"shirt\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"motive\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"head\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"eyes\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"mouth\",\"type\":\"uint48\"}],\"internalType\":\"struct IBitstraysSeeder.Seed\",\"name\":\"seed\",\"type\":\"tuple\"}],\"name\":\"genericDataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"headCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"heads\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDataURIEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockParts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"motives\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"motivesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mouths\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mouthsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"palettes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shirts\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shirtsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleAttributesEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleDataURIEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"background\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"arms\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"shirt\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"motive\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"head\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"eyes\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"mouth\",\"type\":\"uint48\"}],\"internalType\":\"struct IBitstraysSeeder.Seed\",\"name\":\"seed\",\"type\":\"tuple\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traitNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BitstraysDescriptor","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}