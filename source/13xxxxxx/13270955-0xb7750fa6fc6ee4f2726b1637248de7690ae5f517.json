{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/bridge/Bridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./../interfaces/IBridge.sol\\\";\\nimport \\\"./../libraries/ECDSA.sol\\\";\\n\\nimport \\\"./../utils/Cache.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\n\\n/// @title Ethereum Bridge contract\\n/// @author https://github.com/broxus\\n/// @dev Stores relays for each round, implements slashing, helps in validating TON-ETH events\\ncontract Bridge is OwnableUpgradeable, PausableUpgradeable, Cache, IBridge {\\n    using ECDSA for bytes32;\\n\\n    // NOTE: round number -> address -> is relay?\\n    mapping (uint32 => mapping(address => bool)) public relays;\\n\\n    // NOTE: is relay banned or not\\n    mapping (address => bool) public blacklist;\\n\\n    // NOTE: round meta data\\n    mapping (uint32 => Round) public rounds;\\n\\n    // NOTE: signature verifications always fails is emergency is on\\n    bool public emergencyShutdown;\\n\\n    // NOTE: The required signatures per round can't be less than this\\n    uint32 public minimumRequiredSignatures;\\n\\n    // NOTE: how long round signatures are considered valid after the end of the round\\n    uint32 public roundTTL;\\n\\n    // NOTE: initial round number\\n    uint32 public initialRound;\\n\\n    // NOTE: last round with known relays\\n    uint32 public lastRound;\\n\\n    // NOTE: special address, can set up rounds without relays's signatures\\n    address public roundSubmitter;\\n\\n    // NOTE: Broxus Bridge TON-ETH configuration address, that emits event with round relays\\n    TONAddress public roundRelaysConfiguration;\\n\\n    /**\\n        @notice\\n            Bridge initializer\\n        @dev\\n            `roundRelaysConfiguration` should be specified later.\\n        @param _owner Bridge owner\\n        @param _roundSubmitter Round submitter\\n        @param _minimumRequiredSignatures Minimum required signatures per round.\\n        @param _roundTTL Round TTL after round ends.\\n        @param _initialRound Initial round number. Useful in case new EVM network is connected to the bridge.\\n        @param _initialRoundEnd Initial round end timestamp.\\n        @param _relays Initial set of relays. Encode addresses as uint160\\n    */\\n    function initialize(\\n        address _owner,\\n        address _roundSubmitter,\\n        uint32 _minimumRequiredSignatures,\\n        uint32 _roundTTL,\\n        uint32 _initialRound,\\n        uint32 _initialRoundEnd,\\n        uint160[] calldata _relays\\n    ) external initializer {\\n        __Pausable_init();\\n        __Ownable_init();\\n        transferOwnership(_owner);\\n\\n        roundSubmitter = _roundSubmitter;\\n        emit UpdateRoundSubmitter(_roundSubmitter);\\n\\n        minimumRequiredSignatures = _minimumRequiredSignatures;\\n        emit UpdateMinimumRequiredSignatures(minimumRequiredSignatures);\\n\\n        roundTTL = _roundTTL;\\n        emit UpdateRoundTTL(roundTTL);\\n\\n        require(\\n            _initialRoundEnd >= block.timestamp,\\n            \\\"Bridge: initial round end should be in the future\\\"\\n        );\\n\\n        initialRound = _initialRound;\\n        _setRound(initialRound, _relays, _initialRoundEnd);\\n\\n        lastRound = initialRound;\\n    }\\n\\n    /**\\n        @notice\\n            Update address of configuration, that emits event with next round relays.\\n        @param _roundRelaysConfiguration TON address of configuration\\n    */\\n    function updateRoundRelaysConfiguration(\\n        TONAddress calldata _roundRelaysConfiguration\\n    ) external override onlyOwner {\\n        emit UpdateRoundRelaysConfiguration(_roundRelaysConfiguration);\\n\\n        roundRelaysConfiguration = _roundRelaysConfiguration;\\n    }\\n\\n    /**\\n        @notice\\n            Pause Bridge contract.\\n        @dev\\n            When Bridge paused, signature verification fails.\\n    */\\n    function pause() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n        @notice\\n            Unpause Bridge contract.\\n    */\\n    function unpause() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n        @notice\\n            Update minimum amount of required signatures per round\\n        @param _minimumRequiredSignatures New value\\n    */\\n    function updateMinimumRequiredSignatures(\\n        uint32 _minimumRequiredSignatures\\n    ) external override onlyOwner {\\n        minimumRequiredSignatures = _minimumRequiredSignatures;\\n\\n        emit UpdateMinimumRequiredSignatures(_minimumRequiredSignatures);\\n    }\\n\\n    /**\\n        @notice\\n            Update round TTL\\n        @dev\\n            This affects only future rounds. Rounds, that were already set,\\n            keep their current TTL.\\n        @param _roundTTL New TTL value\\n    */\\n    function updateRoundTTL(\\n        uint32 _roundTTL\\n    ) external override onlyOwner {\\n        roundTTL = _roundTTL;\\n\\n        emit UpdateRoundTTL(_roundTTL);\\n    }\\n\\n    /// @dev Check if relay is banned.\\n    /// Ban is global. If the relay is banned it means it lost\\n    /// relay power in all rounds, past and future.\\n    /// @param candidate Address to check\\n    function isBanned(\\n        address candidate\\n    ) override public view returns(bool) {\\n        return blacklist[candidate];\\n    }\\n\\n    /// @dev Check if some address is relay at specific round\\n    /// @param round Round id\\n    /// @param candidate Address to check\\n    function isRelay(\\n        uint32 round,\\n        address candidate\\n    ) override public view returns (bool) {\\n        return relays[round][candidate];\\n    }\\n\\n    /// @dev Check if round is rotten\\n    /// @param round Round id\\n    function isRoundRotten(\\n        uint32 round\\n    ) override public view returns (bool) {\\n        return block.timestamp > rounds[round].ttl;\\n    }\\n\\n    /**\\n        @notice\\n            Verify payload signatures.\\n        @dev\\n            Signatures should be sorted by the ascending signers.\\n            Error codes:\\n                0. Verification passed (no error)\\n                1. Specified round is less than `initialRound`\\n                2. Specified round is more than `lastRound`\\n                3. Not enough correct signatures. Possible reasons:\\n                    - Some of the signers are not relays at the specified round\\n                    - Some of the signers are banned\\n                4. Round is rotten.\\n                5. Everything is correct, but bridge is in \\\"paused\\\" state\\n\\n        @param payload Bytes encoded TONEvent structure\\n        @param signatures Payload signatures\\n        @return errorCode Error code\\n    */\\n    function verifySignedTonEvent(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    )\\n        override\\n        public\\n        view\\n    returns (\\n        uint32 errorCode\\n    ) {\\n        (TONEvent memory tonEvent) = abi.decode(payload, (TONEvent));\\n\\n        uint32 round = tonEvent.round;\\n\\n        // Check round is not less than initial round\\n        if (round < initialRound) return 1;\\n\\n        // Check round is not more than last initialized round\\n        if (round > lastRound) return 2;\\n\\n        // Check there are enough correct signatures\\n        uint32 count = _countRelaySignatures(payload, signatures, round);\\n        if (count < rounds[round].requiredSignatures) return 3;\\n\\n        // Check round rotten\\n        if (isRoundRotten(round)) return 4;\\n\\n        // Check bridge has been paused\\n        if (paused()) return 5;\\n\\n        return 0;\\n    }\\n\\n    /**\\n        @notice\\n            Recover signer from the payload and signature\\n        @param payload Payload\\n        @param signature Signature\\n    */\\n    function recoverSignature(\\n        bytes memory payload,\\n        bytes memory signature\\n    ) public pure returns (address signer) {\\n        signer = keccak256(payload)\\n            .toBytesPrefixed()\\n            .recover(signature);\\n    }\\n\\n    /**\\n        @notice Forced set of next round relays\\n        @dev Can be called only by `roundSubmitter`\\n        @param _relays Next round relays\\n        @param roundEnd Round end\\n    */\\n    function forceRoundRelays(\\n        uint160[] calldata _relays,\\n        uint32 roundEnd\\n    ) override external {\\n        require(msg.sender == roundSubmitter, \\\"Bridge: sender not round submitter\\\");\\n\\n        _setRound(lastRound + 1, _relays, roundEnd);\\n\\n        lastRound++;\\n    }\\n\\n    /**\\n        @notice Set round submitter\\n        @dev Can be called only by owner\\n        @param _roundSubmitter New round submitter address\\n    */\\n    function setRoundSubmitter(\\n        address _roundSubmitter\\n    ) override external onlyOwner {\\n        roundSubmitter = _roundSubmitter;\\n\\n        emit UpdateRoundSubmitter(roundSubmitter);\\n    }\\n\\n    /**\\n        @dev Grant relay permission for set of addresses at specific round\\n        @param payload Bytes encoded TONEvent structure\\n        @param signatures Payload signatures\\n    */\\n    function setRoundRelays(\\n        bytes calldata payload,\\n        bytes[] calldata signatures\\n    ) override external notCached(payload) {\\n        require(\\n            verifySignedTonEvent(\\n                payload,\\n                signatures\\n            ) == 0,\\n            \\\"Bridge: signatures verification failed\\\"\\n        );\\n\\n        (TONEvent memory tonEvent) = abi.decode(payload, (TONEvent));\\n\\n        require(\\n            tonEvent.configurationWid == roundRelaysConfiguration.wid &&\\n            tonEvent.configurationAddress == roundRelaysConfiguration.addr,\\n            \\\"Bridge: wrong event configuration\\\"\\n        );\\n\\n        (uint32 round, uint160[] memory _relays, uint32 roundEnd) = decodeRoundRelaysEventData(payload);\\n\\n        require(round == lastRound + 1, \\\"Bridge: wrong round\\\");\\n\\n        _setRound(round, _relays, roundEnd);\\n\\n        lastRound++;\\n    }\\n\\n    function decodeRoundRelaysEventData(\\n        bytes memory payload\\n    ) public pure returns(\\n        uint32 round,\\n        uint160[] memory _relays,\\n        uint32 roundEnd\\n    ) {\\n        (TONEvent memory tonEvent) = abi.decode(payload, (TONEvent));\\n\\n        (round, _relays, roundEnd) = abi.decode(\\n            tonEvent.eventData,\\n            (uint32, uint160[], uint32)\\n        );\\n    }\\n\\n    function decodeTonEvent(\\n        bytes memory payload\\n    ) external pure returns (TONEvent memory tonEvent) {\\n        (tonEvent) = abi.decode(payload, (TONEvent));\\n    }\\n\\n    /**\\n        @notice\\n            Ban relays\\n        @param _relays List of relay addresses to ban\\n    */\\n    function banRelays(\\n        address[] calldata _relays\\n    ) override external onlyOwner {\\n        for (uint i=0; i<_relays.length; i++) {\\n            blacklist[_relays[i]] = true;\\n\\n            emit BanRelay(_relays[i], true);\\n        }\\n    }\\n\\n    /**\\n        @notice\\n            Unban relays\\n        @param _relays List of relay addresses to unban\\n    */\\n    function unbanRelays(\\n        address[] calldata _relays\\n    ) override external onlyOwner {\\n        for (uint i=0; i<_relays.length; i++) {\\n            blacklist[_relays[i]] = false;\\n\\n            emit BanRelay(_relays[i], false);\\n        }\\n    }\\n\\n    function _setRound(\\n        uint32 round,\\n        uint160[] memory _relays,\\n        uint32 roundEnd\\n    ) internal {\\n        uint32 requiredSignatures = uint32(_relays.length * 2 / 3) + 1;\\n\\n        rounds[round] = Round(\\n            roundEnd,\\n            roundEnd + roundTTL,\\n            uint32(_relays.length),\\n            requiredSignatures < minimumRequiredSignatures ? minimumRequiredSignatures : requiredSignatures\\n        );\\n\\n        emit NewRound(round, rounds[round]);\\n\\n        for (uint i=0; i<_relays.length; i++) {\\n            address relay = address(_relays[i]);\\n\\n            relays[round][relay] = true;\\n\\n            emit RoundRelay(round, relay);\\n        }\\n    }\\n\\n    function _countRelaySignatures(\\n        bytes memory payload,\\n        bytes[] memory signatures,\\n        uint32 round\\n    ) internal view returns (uint32) {\\n        address lastSigner = address(0);\\n        uint32 count = 0;\\n\\n        for (uint i=0; i<signatures.length; i++) {\\n            address signer = recoverSignature(payload, signatures[i]);\\n\\n            require(signer > lastSigner, \\\"Bridge: signatures sequence wrong\\\");\\n            lastSigner = signer;\\n\\n            if (isRelay(round, signer) && !isBanned(signer)) {\\n                count++;\\n            }\\n        }\\n\\n        return count;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IBridge {\\n    struct TONEvent {\\n        uint64 eventTransactionLt;\\n        uint32 eventTimestamp;\\n        bytes eventData;\\n        int8 configurationWid;\\n        uint256 configurationAddress;\\n        int8 eventContractWid;\\n        uint256 eventContractAddress;\\n        address proxy;\\n        uint32 round;\\n    }\\n\\n    struct Round {\\n        uint32 end;\\n        uint32 ttl;\\n        uint32 relays;\\n        uint32 requiredSignatures;\\n    }\\n\\n    struct TONAddress {\\n        int8 wid;\\n        uint256 addr;\\n    }\\n\\n    function updateMinimumRequiredSignatures(uint32 _minimumRequiredSignatures) external;\\n    function updateRoundRelaysConfiguration(TONAddress calldata _roundRelaysConfiguration) external;\\n    function updateRoundTTL(uint32 _roundTTL) external;\\n\\n    function isRelay(\\n        uint32 round,\\n        address candidate\\n    ) external view returns(bool);\\n\\n    function isBanned(\\n        address candidate\\n    ) external view returns(bool);\\n\\n    function isRoundRotten(\\n        uint32 round\\n    ) external view returns(bool);\\n\\n    function verifySignedTonEvent(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) external view returns(uint32);\\n\\n    function setRoundRelays(\\n        bytes calldata payload,\\n        bytes[] calldata signatures\\n    ) external;\\n\\n    function forceRoundRelays(\\n        uint160[] calldata _relays,\\n        uint32 roundEnd\\n    ) external;\\n\\n    function banRelays(\\n        address[] calldata _relays\\n    ) external;\\n\\n    function unbanRelays(\\n        address[] calldata _relays\\n    ) external;\\n\\n    function pause() external;\\n    function unpause() external;\\n\\n    function setRoundSubmitter(address _roundSubmitter) external;\\n\\n    event EmergencyShutdown(bool active);\\n\\n    event UpdateMinimumRequiredSignatures(uint32 value);\\n    event UpdateRoundTTL(uint32 value);\\n    event UpdateRoundRelaysConfiguration(TONAddress configuration);\\n    event UpdateRoundSubmitter(address _roundSubmitter);\\n\\n    event NewRound(uint32 indexed round, Round meta);\\n    event RoundRelay(uint32 indexed round, address indexed relay);\\n    event BanRelay(address indexed relay, bool status);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nlibrary ECDSA {\\n\\n    /**\\n     * @dev Recover signer address from a message by using their signature\\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\\n     * @param signature bytes signature, the signature is generated using web3.eth.sign()\\n     */\\n    function recover(bytes32 hash, bytes memory signature)\\n    internal\\n    pure\\n    returns (address)\\n    {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            return (address(0));\\n        }\\n\\n        // Divide the signature in r, s and v variables with inline assembly.\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        // If the version is correct return the signer address\\n        if (v != 27 && v != 28) {\\n            return (address(0));\\n        } else {\\n            // solium-disable-next-line arg-overflow\\n            return ecrecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n      * toBytesPrefixed\\n      * @dev prefix a bytes32 value with \\\"\\\\x19Ethereum Signed Message:\\\"\\n      * and hash the result\\n      */\\n    function toBytesPrefixed(bytes32 hash)\\n    internal\\n    pure\\n    returns (bytes32)\\n    {\\n        return keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Cache.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\ncontract Cache {\\n    mapping (bytes32 => bool) public cache;\\n\\n    modifier notCached(bytes memory payload) {\\n        bytes32 hash_ = keccak256(abi.encode(payload));\\n\\n        require(cache[hash_] == false, \\\"Cache: payload already seen\\\");\\n\\n        _;\\n\\n        cache[hash_] = true;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"BanRelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"EmergencyShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"end\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"ttl\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"relays\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"requiredSignatures\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IBridge.Round\",\"name\":\"meta\",\"type\":\"tuple\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"}],\"name\":\"RoundRelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"UpdateMinimumRequiredSignatures\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBridge.TONAddress\",\"name\":\"configuration\",\"type\":\"tuple\"}],\"name\":\"UpdateRoundRelaysConfiguration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_roundSubmitter\",\"type\":\"address\"}],\"name\":\"UpdateRoundSubmitter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"UpdateRoundTTL\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_relays\",\"type\":\"address[]\"}],\"name\":\"banRelays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"decodeRoundRelaysEventData\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"},{\"internalType\":\"uint160[]\",\"name\":\"_relays\",\"type\":\"uint160[]\"},{\"internalType\":\"uint32\",\"name\":\"roundEnd\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"decodeTonEvent\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"eventTransactionLt\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"eventTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"eventData\",\"type\":\"bytes\"},{\"internalType\":\"int8\",\"name\":\"configurationWid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"configurationAddress\",\"type\":\"uint256\"},{\"internalType\":\"int8\",\"name\":\"eventContractWid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"eventContractAddress\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"}],\"internalType\":\"struct IBridge.TONEvent\",\"name\":\"tonEvent\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160[]\",\"name\":\"_relays\",\"type\":\"uint160[]\"},{\"internalType\":\"uint32\",\"name\":\"roundEnd\",\"type\":\"uint32\"}],\"name\":\"forceRoundRelays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialRound\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roundSubmitter\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_minimumRequiredSignatures\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_roundTTL\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_initialRound\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_initialRoundEnd\",\"type\":\"uint32\"},{\"internalType\":\"uint160[]\",\"name\":\"_relays\",\"type\":\"uint160[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"isBanned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"isRelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"}],\"name\":\"isRoundRotten\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRound\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumRequiredSignatures\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"recoverSignature\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"relays\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundRelaysConfiguration\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundSubmitter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundTTL\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"end\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"ttl\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"relays\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"requiredSignatures\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"setRoundRelays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roundSubmitter\",\"type\":\"address\"}],\"name\":\"setRoundSubmitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_relays\",\"type\":\"address[]\"}],\"name\":\"unbanRelays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_minimumRequiredSignatures\",\"type\":\"uint32\"}],\"name\":\"updateMinimumRequiredSignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"internalType\":\"struct IBridge.TONAddress\",\"name\":\"_roundRelaysConfiguration\",\"type\":\"tuple\"}],\"name\":\"updateRoundRelaysConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_roundTTL\",\"type\":\"uint32\"}],\"name\":\"updateRoundTTL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"verifySignedTonEvent\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"errorCode\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Bridge","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":""}]}