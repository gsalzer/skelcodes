{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Shares.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract Shares {\\n    mapping(address => uint256) private shares;\\n    mapping(address => uint256) private withdrawals;\\n    uint256 public cumulatedBalance;\\n\\n    receive() external payable {\\n        cumulatedBalance += msg.value;\\n    }\\n\\n    constructor(\\n        address _holder1,\\n        uint256 _amountHolder1,\\n        address _holder2,\\n        uint256 _amountHolder2\\n    ) {\\n        shares[_holder1] = _amountHolder1;\\n        shares[_holder2] = _amountHolder2;\\n    }\\n\\n    function getShareHolderAmount(address _holder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            ((cumulatedBalance / 100) * shares[_holder]) - withdrawals[_holder];\\n    }\\n\\n    function withdraw() public {\\n        require(shares[msg.sender] > 0, \\\"Not a shareholder\\\");\\n        uint256 withdrawableAmount = getShareHolderAmount(msg.sender);\\n        require(withdrawableAmount > 0, \\\"Empty balance\\\");\\n        withdrawals[msg.sender] += withdrawableAmount;\\n        payable(msg.sender).transfer(withdrawableAmount);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountHolder1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_holder2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountHolder2\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"cumulatedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getShareHolderAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Shares","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000312ebaf93885a7df8dad4ef9797559232a89afe40000000000000000000000000000000000000000000000000000000000000041000000000000000000000000ee6336c9dd7d509ea59bc3b940a880caf30d93760000000000000000000000000000000000000000000000000000000000000023","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}