{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.8.10;\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\nabstract contract ReentrancyGuard {\r\n   \r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n   \r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external view returns(uint8);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\ncontract TokenSwap is Ownable, ReentrancyGuard{\r\n    \r\n    uint256 public rate;\r\n    uint256 public timeToWait;\r\n    mapping(address => uint256) private contributions;\r\n    \r\n    address public token;\r\n    uint256 private decimals;\r\n    uint256 public maxBuy; \r\n    uint256 public minBuy;\r\n    \r\n    mapping(address => uint256) tokensPurchasedByUser;\r\n    mapping(address => uint256) public depositTimestamp;\r\n    \r\n    event SwapRecorded(uint256 weiAmt, uint256 tokensAmt, address user);\r\n    \r\n    constructor(address _token, uint256 _rate, uint256 _timeToWait, uint256 _minBuy, uint256 _maxBuy) {\r\n        rate = _rate;\r\n        timeToWait = _timeToWait;\r\n        token = _token;\r\n        decimals = IERC20(_token).decimals();\r\n        minBuy = _minBuy;\r\n        maxBuy = _maxBuy;\r\n    }\r\n    \r\n    function swapBnbForTokens() external payable nonReentrant{\r\n        require(msg.value >= minBuy, \"You must buy at least minBuy\");\r\n        require(contributions[msg.sender] + msg.value <= maxBuy, \"You are exceeding maxBuy\");\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokensAmt = _getTokenAmount(weiAmount) * 10**decimals;\r\n        contributions[msg.sender] += msg.value;\r\n        tokensPurchasedByUser[msg.sender] += tokensAmt;\r\n        depositTimestamp[msg.sender] = block.timestamp;\r\n        emit SwapRecorded(weiAmount, tokensAmt, msg.sender);\r\n    }\r\n    \r\n    function claim() external nonReentrant{\r\n        require(tokensPurchasedByUser[msg.sender] > 0, \"No tokens to claim\");\r\n        require(tokensPurchasedByUser[msg.sender] <= IERC20(token).balanceOf(address(this)), \"No enough tokens in contract\");\r\n        require( block.timestamp > timeToWait, \"You must wait : timeToWait\");\r\n        uint256 amount = tokensPurchasedByUser[msg.sender];\r\n        tokensPurchasedByUser[msg.sender] = 0;\r\n        IERC20(token).transfer(msg.sender, amount);\r\n    }\r\n    \r\n    function setRate(uint256 amount) external onlyOwner{\r\n        rate = amount;\r\n    }\r\n    \r\n    function setTimeToWait(uint256 amount) external onlyOwner{\r\n        timeToWait = amount;\r\n    }\r\n\r\n    function setMinAndMaxBuy(uint256 _minBuy, uint256 _maxBuy) external onlyOwner{\r\n        minBuy = _minBuy;\r\n        maxBuy = _maxBuy;\r\n    }\r\n    \r\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\r\n        return (weiAmount * rate) / 10**18;\r\n    }\r\n\r\n    function getUserContribution(address _user) public view returns(uint256) {\r\n        return contributions[_user];\r\n    }\r\n    \r\n    function getDepositTimeOfUser(address user) external view returns(uint256){\r\n        return depositTimestamp[user];\r\n    }\r\n    \r\n    function getTokensPurchasedByUser(address user) external view returns(uint256){\r\n        return tokensPurchasedByUser[user];\r\n    }\r\n\r\n    function withdrawBNB() external onlyOwner nonReentrant{\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function rescueBep20 (address tokenAddress) external onlyOwner nonReentrant{\r\n        IERC20(tokenAddress).transfer(msg.sender,  IERC20(tokenAddress).balanceOf(address(this)));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeToWait\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBuy\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"SwapRecorded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDepositTimeOfUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTokensPurchasedByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"rescueBep20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBuy\",\"type\":\"uint256\"}],\"name\":\"setMinAndMaxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTimeToWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBnbForTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeToWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenSwap","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000942198e6815b4bb8563d9b372e4161926f71feb900000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000061edd8be00000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000008ac7230489e80000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0a78d131d33caa19764d001e59dbfbfd59e6e086b6b7d5bbd004623c52ec728a"}]}