{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MagicLampWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./MagicLampWalletBase.sol\\\";\\nimport \\\"./MagicLampWalletEvents.sol\\\";\\n\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC1155.sol\\\";\\n\\ncontract MagicLampWallet is MagicLampWalletBase, MagicLampWalletEvents, ERC165, IERC1155Receiver, IERC721Receiver {\\n    using SafeMath for uint256;\\n\\n    function tokenTypeERC20() external pure returns (uint8) {\\n        return _TOKEN_TYPE_ERC20;\\n    }\\n\\n    function tokenTypeERC721() external pure returns (uint8) {\\n        return _TOKEN_TYPE_ERC721;\\n    }\\n\\n    function tokenTypeERC1155() external pure returns (uint8) {\\n        return _TOKEN_TYPE_ERC1155;\\n    }\\n\\n    /**\\n     * @dev Checks if magicLamp has been locked.\\n     */\\n    function isLocked(address host, uint256 id) external view returns (bool locked, uint256 endTime) {\\n        if (_lockedTimestamps[host][id] <= block.timestamp) {\\n            locked = false;\\n        } else {\\n            locked = true;\\n            endTime = _lockedTimestamps[host][id] - 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets token counts inside wallet, including ETH\\n     */\\n    function getTokensCount(address host, uint256 id)\\n    public view returns (uint256 ethCount, uint256 erc20Count, uint256 erc721Count, uint256 erc1155Count) {\\n        if (_ethBalances[host][id] > 0) {\\n            ethCount = 1;\\n        }\\n\\n        Token[] memory tokens = _tokens[host][id];\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            Token memory token = tokens[i];\\n            if (token.tokenType == _TOKEN_TYPE_ERC20) {\\n                erc20Count++;\\n            } else if (token.tokenType == _TOKEN_TYPE_ERC721) {\\n                erc721Count++;\\n            } else if (token.tokenType == _TOKEN_TYPE_ERC1155) {\\n                erc1155Count++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets tokens for wallet\\n     */\\n    function getTokens(address host, uint256 id) \\n    external view returns (uint8[] memory tokenTypes, address[] memory tokenAddresses) {\\n        Token[] memory tokens = _tokens[host][id];\\n\\n        tokenTypes = new uint8[](tokens.length);\\n        tokenAddresses = new address[](tokens.length);\\n\\n        for (uint256 i; i < tokens.length; i++) {\\n            tokenTypes[i] = tokens[i].tokenType;\\n            tokenAddresses[i] = tokens[i].tokenAddress;\\n        }\\n    }\\n\\n    /**\\n     * @dev Supports host(ERC721 token address) for wallet features\\n     */\\n    function support(address host) external onlyOwner {\\n        require(!walletFeatureHosted[host], \\\"MagicLampWallet::support: already supported\\\");\\n\\n        walletFeatureHosts.push(host);\\n        walletFeatureHosted[host] = true;\\n\\n        emit MagicLampWalletSupported(host);\\n    }\\n\\n    /**\\n     * @dev Unsupports host(ERC721 token address) for wallet features\\n     */\\n    function unsupport(address host) external onlyOwner {\\n        require(walletFeatureHosted[host], \\\"MagicLampWallet::unsupport: not found\\\");\\n\\n        for (uint256 i = 0; i < walletFeatureHosts.length; i++) {\\n            if (walletFeatureHosts[i] == host) {\\n                walletFeatureHosts[i] = walletFeatureHosts[walletFeatureHosts.length - 1];\\n                walletFeatureHosts.pop();\\n                delete walletFeatureHosted[host];\\n                emit MagicLampWalletUnsupported(host);\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets \\n     */\\n    function isSupported(address host) external view returns(bool) {\\n        return walletFeatureHosted[host];\\n    }\\n\\n    /**\\n     * @dev Sets MagicLamp Swap contract\\n     */\\n    function setMagicLampSwap(address newAddress) external onlyOwner {\\n        address priviousAddress = magicLampSwap;\\n        require(priviousAddress != newAddress, \\\"MagicLampWallet::setMagicLampSwap: same address\\\");\\n\\n        magicLampSwap = newAddress;\\n\\n        emit MagicLampWalletSwapChanged(priviousAddress, newAddress);\\n    }\\n\\n    /**\\n     * @dev Locks wallet\\n     */\\n    function lock(address host, uint256 id, uint256 timeInSeconds) external  {\\n        _onlyWalletOwner(host, id);\\n        // _unlocked(host, id);\\n        _lockedTimestamps[host][id] = block.timestamp.add(timeInSeconds);\\n\\n        emit MagicLampWalletLocked(_msgSender(), host, id, block.timestamp, _lockedTimestamps[host][id]);\\n    }\\n\\n    /**\\n     * @dev Checks if token exists inside wallet\\n     */\\n    function existsERC721ERC1155(address host, uint256 id, address token, uint256 tokenId) public view returns (bool) {\\n        uint256[] memory ids = _erc721ERC1155TokenIds[host][id][token];\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            if (ids[i] == tokenId) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Gets ETH balance\\n     */\\n    function getETH(address host, uint256 id) \\n    public view  returns (uint256 balance) {\\n        _exists(host, id);\\n        \\n        balance = _ethBalances[host][id];\\n    }\\n\\n    /**\\n     * @dev Deposits ETH tokens into wallet\\n     */\\n    function depositETH(address host, uint256 id, uint256 amount) external payable {\\n        _exists(host, id);\\n        require(amount > 0 && amount == msg.value, \\\"MagicLampWallet::depositETH: invalid amount\\\");\\n        \\n        _ethBalances[host][id] = _ethBalances[host][id].add(msg.value);\\n\\n        emit MagicLampWalletETHDeposited(_msgSender(), host, id, msg.value);\\n    }\\n\\n    /**\\n     * @dev Withdraws ETH tokens from wallet\\n     */\\n    function withdrawETH(address host, uint256 id, uint256 amount) public payable {\\n        _onlyWalletOwner(host, id);\\n        _unlocked(host, id);\\n        require(amount > 0 && amount <= address(this).balance);\\n        require(amount <= getETH(host, id));\\n\\n        address to = IERC721(host).ownerOf(id);\\n        payable(to).transfer(amount);\\n        _ethBalances[host][id] = _ethBalances[host][id].sub(amount);\\n\\n        emit MagicLampWalletETHWithdrawn(_msgSender(), host, id, amount, to);\\n    }\\n\\n    /**\\n     * @dev Transfers ETH tokens from wallet into another wallet\\n     */\\n    function transferETH(address fromHost, uint256 fromId, uint256 amount, address toHost, uint256 toId) public  {\\n        _onlyWalletOwner(fromHost, fromId);\\n        _unlocked(fromHost, fromId);\\n        _exists(toHost, toId);\\n         require(fromHost != toHost || fromId != toId, \\\"MagicLampWallet::transferETH: same wallet\\\");\\t\\n\\n        _ethBalances[fromHost][fromId] = _ethBalances[fromHost][fromId].sub(amount);\\t\\n        _ethBalances[toHost][toId] = _ethBalances[toHost][toId].add(amount);\\n\\n        emit MagicLampWalletETHTransferred(_msgSender(), fromHost, fromId, amount, toHost, toId);\\n    }\\n\\n    /**\\n     * @dev Gets ERC20 token info\\n     */\\n    function getERC20Tokens(address host, uint256 id) \\n    public view  returns (address[] memory addresses, uint256[] memory tokenBalances) {\\n        Token[] memory tokens = _tokens[host][id];\\n        (, uint256 erc20Count, , ) = getTokensCount(host, id);\\n        addresses = new address[](erc20Count);\\n        tokenBalances = new uint256[](erc20Count);\\n        uint256 j = 0;\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            Token memory token = tokens[i];\\n            if (token.tokenType == _TOKEN_TYPE_ERC20) {\\n                addresses[j] = token.tokenAddress;\\n                tokenBalances[j] = _erc20TokenBalances[host][id][token.tokenAddress];\\n                j++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets ERC721 token info\\n     */\\n    function getERC721Tokens(address host, uint256 id) \\n    public view  returns (address[] memory addresses, uint256[] memory tokenBalances) {\\n        Token[] memory tokens = _tokens[host][id];\\n        (,, uint256 erc721Count, ) = getTokensCount(host, id);\\n        addresses = new address[](erc721Count);\\n        tokenBalances = new uint256[](erc721Count);\\n        uint256 j = 0;\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            Token memory token = tokens[i];\\n            if (token.tokenType == _TOKEN_TYPE_ERC721) {\\n                addresses[j] = token.tokenAddress;\\n                tokenBalances[j] = _erc721ERC1155TokenIds[host][id][token.tokenAddress].length;\\n                j++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets ERC721 or ERC1155 IDs\\n     */\\n    function getERC721ERC1155IDs(address host, uint256 id, address token) public view  returns (uint256[] memory) {\\n        return _erc721ERC1155TokenIds[host][id][token];\\n    }\\n\\n    /**\\n     * @dev Gets ERC1155 token addresses info\\n     */\\n    function getERC1155Tokens(address host, uint256 id) public view returns (address[] memory addresses) {\\n        Token[] memory tokens = _tokens[host][id];\\n        (,,, uint256 erc1155Count) = getTokensCount(host, id);\\n\\n        addresses = new address[](erc1155Count);\\n        uint256 j = 0;\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            Token memory token = tokens[i];\\n            if (token.tokenType == _TOKEN_TYPE_ERC1155) {\\n                addresses[j] = token.tokenAddress;\\n                j++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets ERC1155 token balances by IDs\\n     */\\n    function getERC1155TokenBalances(address host, uint256 id, address token, uint256[] memory tokenIds)\\n    public view returns (uint256[] memory tokenBalances) {\\n        tokenBalances = new uint256[](tokenIds.length);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            tokenBalances[i] = _erc1155TokenBalances[host][id][token][tokenIds[i]];\\n        }\\n    }\\n\\n    /**\\n     * @dev Deposits ERC20 tokens into wallet.\\n     */\\n    function depositERC20(address host, uint256 id, address[] memory tokens, uint256[] memory amounts) external {\\n        _exists(host, id);\\n        require(tokens.length > 0 && tokens.length == amounts.length, \\\"MagicLampWallet::depositERC20: invalid parameters\\\");\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            IERC20 token = IERC20(tokens[i]);\\n            uint256 prevBalance = token.balanceOf(address(this));\\n            token.transferFrom(_msgSender(), address(this), amounts[i]);\\n            uint256 receivedAmount = token.balanceOf(address(this)).sub(prevBalance);\\n            _addERC20TokenBalance(host, id, tokens[i], receivedAmount);\\n\\n            emit MagicLampWalletERC20Deposited(_msgSender(), host, id, tokens[i], receivedAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraws ERC20 tokens from wallet.\\n     */\\n    function withdrawERC20(address host, uint256 id, address[] memory tokens, uint256[] memory amounts)\\n    public  {\\n        _onlyWalletOwner(host, id);\\n        _unlocked(host, id);\\n        require(tokens.length > 0 && tokens.length == amounts.length, \\\"MagicLampWallet::withdrawERC20: invalid parameters\\\");\\n\\n        address to = IERC721(host).ownerOf(id);\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            IERC20 token = IERC20(tokens[i]);\\n            token.transfer(to, amounts[i]);\\n            _subERC20TokenBalance(host, id, tokens[i], amounts[i]);\\n\\n            emit MagicLampWalletERC20Withdrawn(_msgSender(), host, id, tokens[i], amounts[i], to);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers ERC20 tokens from wallet into another wallet.\\n     */\\n    function transferERC20(address fromHost, uint256 fromId, address token, uint256 amount, address toHost, uint256 toId)\\n    public  {\\n        _onlyWalletOwner(fromHost, fromId);\\n        _unlocked(fromHost, fromId);\\n        _exists(toHost, toId);\\n        require(fromHost != toHost || fromId != toId, \\\"MagicLampWallet::transferERC20: same wallet\\\");\\n        \\n        _subERC20TokenBalance(fromHost, fromId, token, amount);\\t\\n        _addERC20TokenBalance(toHost, toId, token, amount);\\n\\n        emit MagicLampWalletERC20Transferred(_msgSender(), fromHost, fromId, token, amount, toHost, toId);\\n    }\\n\\n    /**\\n     * @dev Deposits ERC721 tokens into wallet.\\n     */\\n    function depositERC721(address host, uint256 id, address token, uint256[] memory tokenIds) external  {\\n        _exists(host, id);\\n\\n        IERC721 iToken = IERC721(token);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(token != host || tokenIds[i] != id, \\\"MagicLampWallet::depositERC721: self deposit\\\");\\n\\n            iToken.safeTransferFrom(_msgSender(), address(this), tokenIds[i]);\\n            _putTokenId(host, id, _TOKEN_TYPE_ERC721, token, tokenIds[i]);\\n\\n            emit MagicLampWalletERC721Deposited(_msgSender(), host, id, token, tokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraws ERC721 token from wallet.\\n     */\\n    function withdrawERC721(address host, uint256 id, address token, uint256[] memory tokenIds)\\n    public {\\n        _onlyWalletOwner(host, id);\\n        _unlocked(host, id);\\n        \\n        IERC721 iToken = IERC721(token);\\n        address to = IERC721(host).ownerOf(id);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(iToken.ownerOf(tokenIds[i]) == address(this));\\n            iToken.safeTransferFrom(address(this), to, tokenIds[i]);\\n            _popTokenId(host, id, _TOKEN_TYPE_ERC721, token, tokenIds[i]);\\n\\n            emit MagicLampWalletERC721Withdrawn(_msgSender(), host, id, token, tokenIds[i], to);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers ERC721 tokens from wallet to another wallet.\\n     */\\n    function transferERC721(address fromHost, uint256 fromId, address token, uint256[] memory tokenIds, address toHost, uint256 toId) \\n    public {\\n        _onlyWalletOwner(fromHost, fromId);\\n        _unlocked(fromHost, fromId);\\n        _exists(toHost, toId);\\n        require(fromHost != toHost || fromId != toId, \\\"MagicLampWallet::transferERC721: same wallet\\\");\\n        \\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\t\\n            _popTokenId(fromHost, fromId, _TOKEN_TYPE_ERC721, token, tokenIds[i]);\\t\\n            _putTokenId(toHost, toId, _TOKEN_TYPE_ERC721, token, tokenIds[i]);\\n\\n            emit MagicLampWalletERC721Transferred(_msgSender(), fromHost, fromId, token, tokenIds[i], toHost, toId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Deposits ERC1155 token into wallet.\\n     */\\n    function depositERC1155(address host, uint256 id, address token, uint256[] memory tokenIds, uint256[] memory amounts) \\n    external {\\n        _exists(host, id);\\n        IERC1155 iToken = IERC1155(token);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            iToken.safeTransferFrom(_msgSender(), address(this), tokenIds[i], amounts[i], bytes(\\\"\\\"));\\n            _addERC1155TokenBalance(host, id, token, tokenIds[i], amounts[i]);\\n\\n            emit MagicLampWalletERC1155Deposited(_msgSender(), host, id, token, tokenIds[i], amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraws ERC1155 token from wallet.\\n     */\\n    function withdrawERC1155(address host, uint256 id, address token, uint256[] memory tokenIds, uint256[] memory amounts)\\n    public {\\n        _onlyWalletOwner(host, id);\\n        _unlocked(host, id);\\n        IERC1155 iToken = IERC1155(token);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 amount = amounts[i];\\n            address to = IERC721(host).ownerOf(id);\\n            iToken.safeTransferFrom(address(this), to, tokenId, amount, bytes(\\\"\\\"));\\n            _subERC1155TokenBalance(host, id, token, tokenId, amount);\\n\\n            emit MagicLampWalletERC1155Withdrawn(_msgSender(), host, id, token, tokenId, amount, to);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers ERC1155 token from wallet to another wallet.\\n     */\\n    function transferERC1155(address fromHost, uint256 fromId, address token, uint256[] memory tokenIds, uint256[] memory amounts, address toHost, uint256 toId)\\n    public {\\n        _onlyWalletOwner(fromHost, fromId);\\n        _unlocked(fromHost, fromId); \\n        require(fromHost != toHost || fromId != toId, \\\"MagicLampWallet::transferERC1155: same wallet\\\");\\n        \\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\t\\n            uint256 tokenId = tokenIds[i];\\t\\n            uint256 amount = amounts[i];\\t\\n            _subERC1155TokenBalance(fromHost, fromId, token, tokenId, amount);\\t\\n            _addERC1155TokenBalance(toHost, toId, token, tokenId, amount);\\n\\n            emit MagicLampWalletERC1155Transferred(_msgSender(), fromHost, fromId, token, tokenId, amount, toHost, toId);\\t\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraws all of tokens from wallet.\\n     */\\n    function withdrawAll(address host, uint256 id) external {\\n        uint256 eth = getETH(host, id);\\n        if (eth > 0) {\\n            withdrawETH(host, id, eth);\\n        }\\n\\n        (address[] memory erc20Addresses, uint256[] memory erc20Balances) = getERC20Tokens(host, id);\\n        if (erc20Addresses.length > 0) {\\n            withdrawERC20(host, id, erc20Addresses, erc20Balances);\\n        }\\n\\n        (address[] memory erc721Addresses, ) = getERC721Tokens(host, id);\\n        for (uint256 a = 0; a < erc721Addresses.length; a++) {\\n            uint256[] memory ids = _erc721ERC1155TokenIds[host][id][erc721Addresses[a]];\\n            withdrawERC721(host, id, erc721Addresses[a], ids);\\n        }\\n\\n        address[] memory erc1155Addresses = getERC1155Tokens(host, id);\\n        for (uint256 a = 0; a < erc1155Addresses.length; a++) {\\n            uint256[] memory ids = _erc721ERC1155TokenIds[host][id][erc1155Addresses[a]];\\n            uint256[] memory tokenBalances = getERC1155TokenBalances(host, id, erc1155Addresses[a], ids);\\n            withdrawERC1155(host, id, erc1155Addresses[a], ids, tokenBalances);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers all of tokens to another wallet.\\n     */\\n    function transferAll(address fromHost, uint256 fromId, address toHost, uint256 toId) external {\\n        {\\n            uint256 eth = getETH(fromHost, fromId);\\n            if (eth > 0) {\\n                transferETH(fromHost, fromId, eth, toHost, toId);\\n            }\\n        }\\n\\n        {\\n            (address[] memory erc20Addresses, uint256[] memory erc20Balances ) = getERC20Tokens(fromHost, fromId);\\n            for(uint256 i = 0; i < erc20Addresses.length; i++){\\n                transferERC20(fromHost, fromId, erc20Addresses[i], erc20Balances[i], toHost, toId);\\n            }\\n        }\\n\\n        {\\n            (address[] memory erc721Addresses, ) = getERC721Tokens(fromHost, fromId);\\n            for (uint256 a = 0; a < erc721Addresses.length; a++) {\\n                uint256[] memory ids = getERC721ERC1155IDs(fromHost, fromId, erc721Addresses[a]);\\n                transferERC721(fromHost, fromId, erc721Addresses[a], ids, toHost, toId);\\n            }\\n        }\\n\\n        {\\n            address[] memory erc1155Addresses = getERC1155Tokens(fromHost, fromId);\\n            for (uint256 a = 0; a < erc1155Addresses.length; a++) {\\n                uint256[] memory ids = getERC721ERC1155IDs(fromHost, fromId, erc1155Addresses[a]);\\t\\n            uint256[] memory tokenBalances = getERC1155TokenBalances(fromHost, fromId, erc1155Addresses[a], ids);\\t\\n            transferERC1155(fromHost, fromId, erc1155Addresses[a], ids, tokenBalances, toHost, toId);\\n            }\\n        }\\n    }\\n\\n    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure override returns (bytes4) {\\n        return 0xf23a6e61;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] calldata, uint256[] calldata, bytes calldata) external pure override returns (bytes4) {\\n        return 0xbc197c81;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MagicLampWalletBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./MagicLampWalletStorage.sol\\\";\\n\\ncontract MagicLampWalletBase is MagicLampWalletStorage, Ownable {\\n    using SafeMath for uint256;\\n\\n    function _onlyWalletOwner(address host, uint256 id) internal view {\\n        require(walletFeatureHosted[host], \\\"Unsupported host\\\");\\n        require(\\n            IERC721(host).ownerOf(id) == _msgSender(),\\n            \\\"Only wallet owner can call\\\"\\n        );\\n    }\\n\\n    function _exists(address host, uint256 id) internal view {\\n        require(walletFeatureHosted[host], \\\"Unsupported host\\\");\\n        require(IERC721(host).ownerOf(id) != address(0), \\\"NFT does not exist\\\");\\n    }\\n\\n    function _unlocked(address host, uint256 id) internal view {\\n        require(_lockedTimestamps[host][id] <= block.timestamp, \\\"Wallet is locked\\\");\\n    }\\n\\n    function _onlyWalletOwnerOrHost(address host, uint256 id) internal view {\\n        require(walletFeatureHosted[host], \\\"Unsupported host\\\");\\n        require(\\n            IERC721(host).ownerOf(id) == _msgSender() || host == _msgSender(),\\n            \\\"Only wallet owner or host can call\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Puts token(type, address)\\n     */\\n    function _putToken(address host, uint256 id, uint8 tokenType, address token) internal {\\n        Token[] storage tokens = _tokens[host][id];\\n\\n        uint256 i = 0;\\n        for (; i < tokens.length && (tokens[i].tokenType != tokenType || tokens[i].tokenAddress != token); i++) {\\n        }\\n\\n        if (i == tokens.length) {\\n            tokens.push(Token({tokenType: tokenType, tokenAddress: token}));\\n        }\\n    }\\n\\n    /**\\n     * @dev Pops token(type, address)\\n     */\\n    function _popToken(address host, uint256 id, uint8 tokenType, address token) internal {\\n        Token[] storage tokens = _tokens[host][id];\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (tokens[i].tokenType == tokenType && tokens[i].tokenAddress == token) {\\n                tokens[i] = tokens[tokens.length - 1];\\n                tokens.pop();\\n                if (tokens.length == 0) {\\n                    delete _tokens[host][id];\\n                }\\n                return;\\n            }\\n        }        \\n        require(false, \\\"Not found token\\\");\\n    }\\n\\n    /**\\n     * @dev Puts a token id\\n     */\\n    function _putTokenId(address host, uint256 id, uint8 tokenType, address token, uint256 tokenId) internal {\\n        if (_erc721ERC1155TokenIds[host][id][token].length == 0) {\\n            _putToken(host, id, tokenType, token);\\n        }\\n        _erc721ERC1155TokenIds[host][id][token].push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Pops a token id\\n     */\\n    function _popTokenId(address host, uint256 id, uint8 tokenType, address token, uint256 tokenId) internal {\\n        uint256[] storage ids = _erc721ERC1155TokenIds[host][id][token];\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            if (ids[i] == tokenId) {\\n                ids[i] = ids[ids.length - 1];\\n                ids.pop();\\n                if (ids.length == 0) {\\n                    delete _erc721ERC1155TokenIds[host][id][token];\\n                    _popToken(host, id, tokenType, token);\\n                }\\n                return;\\n            }\\n        }\\n        require(false, \\\"Not found token id\\\");\\n    }\\n\\n    /**\\n     * @dev Adds token balance\\n     */\\n    function _addERC20TokenBalance(address host, uint256 id, address token, uint256 amount) internal {\\n        if (amount == 0) return;\\n        if (_erc20TokenBalances[host][id][token] == 0) {\\n            _putToken(host, id, _TOKEN_TYPE_ERC20, token);\\n        }\\n        _erc20TokenBalances[host][id][token] = _erc20TokenBalances[host][id][token].add(amount);\\n    }\\n\\n    /**\\n     * @dev Subs token balance\\n     */\\n    function _subERC20TokenBalance(address host, uint256 id, address token, uint256 amount) internal {\\n        if (amount == 0) return;\\n        _erc20TokenBalances[host][id][token] = _erc20TokenBalances[host][id][token].sub(amount);\\n        if (_erc20TokenBalances[host][id][token] == 0) {\\n            _popToken(host, id, _TOKEN_TYPE_ERC20, token);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds ERC1155 token balance\\n     */\\n    function _addERC1155TokenBalance(address host, uint256 id, address token, uint256 tokenId, uint256 amount) internal {\\n        if (amount == 0) return;\\n        if (_erc1155TokenBalances[host][id][token][tokenId] == 0) {\\n            _putTokenId(host, id, _TOKEN_TYPE_ERC1155, token, tokenId);\\n        }\\n        _erc1155TokenBalances[host][id][token][tokenId] = _erc1155TokenBalances[host][id][token][tokenId].add(amount);\\n    }\\n\\n    /**\\n     * @dev Subs ERC1155 token balance\\n     */\\n    function _subERC1155TokenBalance(address host, uint256 id, address token, uint256 tokenId, uint256 amount) internal {\\n        if (amount == 0) return;\\n        _erc1155TokenBalances[host][id][token][tokenId] = _erc1155TokenBalances[host][id][token][tokenId].sub(amount);\\n        if (_erc1155TokenBalances[host][id][token][tokenId] == 0) {\\n            _popTokenId(host, id, _TOKEN_TYPE_ERC1155, token, tokenId);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/MagicLampWalletEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract MagicLampWalletEvents {\\n    event MagicLampWalletSupported(\\n        address indexed host\\n    );\\n\\n    event MagicLampWalletUnsupported(\\n        address indexed host\\n    );\\n\\n    event MagicLampWalletSwapChanged(\\n        address indexed previousMagicLampSwap,\\n        address indexed newMagicLampSwap\\n    );\\n\\n    event MagicLampWalletLocked(\\n        address indexed owner,\\n        address indexed host,\\n        uint256 id,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp\\n    );\\n\\n    event MagicLampWalletOpened(\\n        address indexed owner,\\n        address indexed host,\\n        uint256 id\\n    );\\n\\n    event MagicLampWalletClosed(\\n        address indexed owner,\\n        address indexed host,\\n        uint256 id\\n    );\\n\\n    event MagicLampWalletETHDeposited(\\n        address indexed owner,\\n        address indexed host,\\n        uint256 id,\\n        uint256 amount\\n    );\\n\\n    event MagicLampWalletETHWithdrawn(\\n        address indexed owner,\\n        address indexed host,\\n        uint256 id,\\n        uint256 amount,\\n        address to\\n    );\\n\\n    event MagicLampWalletETHTransferred(\\n        address indexed owner,\\n        address indexed host,\\n        uint256 id,\\n        uint256 amount,\\n        address indexed toHost,\\n        uint256 toId\\n    );\\n\\n    event MagicLampWalletERC20Deposited(\\n        address indexed owner,\\n        address indexed host,\\n        uint256 id,\\n        address erc20Token,\\n        uint256 amount\\n    );\\n\\n    event MagicLampWalletERC20Withdrawn(\\n        address indexed owner,\\n        address indexed host,\\n        uint256 id,\\n        address erc20Token,\\n        uint256 amount,\\n        address to\\n    );\\n\\n    event MagicLampWalletERC20Transferred(\\n        address indexed owner,\\n        address indexed host,\\n        uint256 id,\\n        address erc20Token,\\n        uint256 amount,\\n        address indexed toHost,\\n        uint256 toId\\n    );\\n\\n    event MagicLampWalletERC721Deposited(\\n        address indexed owner,\\n        address indexed host,\\n        uint256 id,\\n        address erc721Token,\\n        uint256 erc721TokenId\\n    );\\n\\n    event MagicLampWalletERC721Withdrawn(\\n        address indexed owner,\\n        address indexed host,\\n        uint256 id,\\n        address erc721Token,\\n        uint256 erc721TokenId,\\n        address to\\n    );\\n\\n    event MagicLampWalletERC721Transferred(\\n        address indexed owner,\\n        address indexed host,\\n        uint256 id,\\n        address erc721Token,\\n        uint256 erc721TokenId,\\n        address indexed toHost,\\n        uint256 toId\\n    );\\n\\n    event MagicLampWalletERC1155Deposited(\\n        address indexed owner,\\n        address indexed host,\\n        uint256 id,\\n        address erc1155Token,\\n        uint256 erc1155TokenId,\\n        uint256 amount\\n    );\\n\\n    event MagicLampWalletERC1155Withdrawn(\\n        address indexed owner,\\n        address indexed host,\\n        uint256 id,\\n        address erc1155Token,\\n        uint256 erc1155TokenId,\\n        uint256 amount,\\n        address indexed to\\n    );\\n\\n    event MagicLampWalletERC1155Transferred(\\n        address indexed owner,\\n        address indexed host,\\n        uint256 id,\\n        address erc1155Token,\\n        uint256 erc1155TokenId,\\n        uint256 amount,\\n        address indexed toHost,\\n        uint256 toId\\n    );\\n\\n    event MagicLampWalletERC20Swapped(\\n        address indexed owner,\\n        address indexed host,\\n        uint256 id,\\n        address inToken,\\n        uint256 inAmount,\\n        address outToken,\\n        uint256 outAmount,\\n        address indexed to\\n    );\\n\\n    event MagicLampWalletERC721Swapped(\\n        address indexed owner,\\n        address indexed host,\\n        uint256 id,\\n        address inToken,\\n        uint256 inTokenId,\\n        address outToken,\\n        uint256 outTokenId,\\n        address indexed to\\n    );\\n\\n    event MagicLampWalletERC1155Swapped(\\n        address indexed owner,\\n        address indexed host,\\n        uint256 id,\\n        address inToken,\\n        uint256 inTokenId,\\n        uint256 inAmount,\\n        address outToken,\\n        uint256 outTokenId,\\n        uint256 outTokenAmount,\\n        address indexed to\\n    );\\n    \\n}\"\r\n    },\r\n    \"contracts/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\"\r\n    },\r\n    \"contracts/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\"\r\n    },\r\n    \"contracts/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\ncontract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\"\r\n    },\r\n    \"contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev custom add\\n     */\\n    function burn(uint256 burnQuantity) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\"\r\n    },\r\n    \"contracts/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\"\r\n    },\r\n    \"contracts/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n    address private _authorizedNewOwner;\\n\\n    event OwnershipTransferAuthorization(address indexed authorizedAddress);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current authorized new owner.\\n     */\\n    function authorizedNewOwner() public view virtual returns (address) {\\n        return _authorizedNewOwner;\\n    }\\n\\n    /**\\n     * @notice Authorizes the transfer of ownership from _owner to the provided address.\\n     * NOTE: No transfer will occur unless authorizedAddress calls assumeOwnership( ).\\n     * This authorization may be removed by another call to this function authorizing\\n     * the null address.\\n     *\\n     * @param authorizedAddress The address authorized to become the new owner.\\n     */\\n    function authorizeOwnershipTransfer(address authorizedAddress) external onlyOwner {\\n        _authorizedNewOwner = authorizedAddress;\\n        emit OwnershipTransferAuthorization(_authorizedNewOwner);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of this contract to the _authorizedNewOwner.\\n     */\\n    function assumeOwnership() external {\\n        require(_msgSender() == _authorizedNewOwner, \\\"Ownable: only the authorized new owner can accept ownership\\\");\\n        emit OwnershipTransferred(_owner, _authorizedNewOwner);\\n        _owner = _authorizedNewOwner;\\n        _authorizedNewOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     *\\n     * @param confirmAddress The address wants to give up ownership.\\n     */\\n    function renounceOwnership(address confirmAddress) public virtual onlyOwner {\\n        require(confirmAddress == _owner, \\\"Ownable: confirm address is wrong\\\");\\n        emit OwnershipTransferred(_owner, address(0));\\n        _authorizedNewOwner = address(0);\\n        _owner = address(0);\\n    }\\n    \\n}\\n\"\r\n    },\r\n    \"contracts/MagicLampWalletStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract MagicLampWalletStorage {\\n    struct Token {\\n        uint8 tokenType; // TOKEN_TYPE\\n        address tokenAddress;\\n    }\\n\\n    // Token types\\n    uint8 internal constant _TOKEN_TYPE_ERC20 = 1;\\n    uint8 internal constant _TOKEN_TYPE_ERC721 = 2;\\n    uint8 internal constant _TOKEN_TYPE_ERC1155 = 3;\\n  \\n    // Mapping from Host -> ID -> Token(ERC721 or ERC1155) -> IDs\\n    mapping(address => mapping(uint256 => mapping(address => uint256[]))) internal _erc721ERC1155TokenIds;\\n\\n    // Mapping from Host -> ID -> Token(ERC20) -> Balance\\n    mapping(address => mapping(uint256 => mapping(address => uint256))) internal _erc20TokenBalances;\\n\\n    // Mapping from Host -> ID -> Token(ERC1155) -> Token ID -> Balance\\n    mapping(address => mapping(uint256 => mapping(address => mapping(uint256 => uint256)))) internal _erc1155TokenBalances;\\n\\n    // Mapping from Host -> ID -> Token(ETH) -> Balance\\n    mapping(address => mapping(uint256 => uint256)) internal _ethBalances;\\n\\n    address public magicLampSwap;\\n\\n    // List of ERC721 tokens which wallet features get supported\\n    address[] public walletFeatureHosts;\\n\\n    // Mapping from Host -> bool\\n    mapping(address => bool) public walletFeatureHosted;\\n\\n    // Mapping from Host -> ID -> Tokens\\n    mapping(address => mapping(uint256 => Token[])) internal _tokens;\\n\\n    // Mapping from Host -> ID -> Locked Time\\n    mapping(address => mapping(uint256 => uint256)) internal _lockedTimestamps;\\n}\\n\"\r\n    },\r\n    \"contracts/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"MagicLampWalletClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc1155Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"erc1155TokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MagicLampWalletERC1155Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outTokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MagicLampWalletERC1155Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc1155Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"erc1155TokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toHost\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toId\",\"type\":\"uint256\"}],\"name\":\"MagicLampWalletERC1155Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc1155Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"erc1155TokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MagicLampWalletERC1155Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MagicLampWalletERC20Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MagicLampWalletERC20Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toHost\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toId\",\"type\":\"uint256\"}],\"name\":\"MagicLampWalletERC20Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MagicLampWalletERC20Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc721Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"erc721TokenId\",\"type\":\"uint256\"}],\"name\":\"MagicLampWalletERC721Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MagicLampWalletERC721Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc721Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"erc721TokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toHost\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toId\",\"type\":\"uint256\"}],\"name\":\"MagicLampWalletERC721Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc721Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"erc721TokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MagicLampWalletERC721Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MagicLampWalletETHDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toHost\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toId\",\"type\":\"uint256\"}],\"name\":\"MagicLampWalletETHTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MagicLampWalletETHWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"MagicLampWalletLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"MagicLampWalletOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"name\":\"MagicLampWalletSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousMagicLampSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMagicLampSwap\",\"type\":\"address\"}],\"name\":\"MagicLampWalletSwapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"name\":\"MagicLampWalletUnsupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizedAddress\",\"type\":\"address\"}],\"name\":\"OwnershipTransferAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"assumeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizedAddress\",\"type\":\"address\"}],\"name\":\"authorizeOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authorizedNewOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"depositERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"depositERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"existsERC721ERC1155\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getERC1155TokenBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenBalances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getERC1155Tokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getERC20Tokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenBalances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getERC721ERC1155IDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getERC721Tokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenBalances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"tokenTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc20Count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc721Count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc1155Count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"name\":\"isSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeInSeconds\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"magicLampSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"confirmAddress\",\"type\":\"address\"}],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setMagicLampSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"name\":\"support\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTypeERC1155\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTypeERC20\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTypeERC721\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromHost\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toHost\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toId\",\"type\":\"uint256\"}],\"name\":\"transferAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromHost\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"toHost\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toId\",\"type\":\"uint256\"}],\"name\":\"transferERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromHost\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toHost\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toId\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromHost\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"toHost\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toId\",\"type\":\"uint256\"}],\"name\":\"transferERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromHost\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toHost\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toId\",\"type\":\"uint256\"}],\"name\":\"transferETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"name\":\"unsupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletFeatureHosted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"walletFeatureHosts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"MagicLampWallet","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}