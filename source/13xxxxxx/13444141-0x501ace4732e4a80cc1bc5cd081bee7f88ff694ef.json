{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Deployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// code borrowed from EIP-2470\\n// https://etherscan.io/address/0xce0042B868300000d44A59004Da54A005ffdcf9f#code\\npragma solidity 0.8.6;\\n\\nimport \\\"./interface/IDeployer.sol\\\";\\n\\n\\n/**\\n * @title Deployer\\n * @notice Exposes `CREATE2` (EIP-1014) to deploy bytecode on deterministic addresses based on initialization code and salt.\\n * @author solace.fi\\n */\\ncontract Deployer is IDeployer {\\n\\n    /**\\n     * @notice Deploys `initcode` using `salt` for defining the deterministic address.\\n     * @param initcode Initialization code.\\n     * @param salt Arbitrary value to modify resulting address.\\n     * @return createdContract Created contract address.\\n     */\\n    function deploy(bytes memory initcode, bytes32 salt) external override returns (address payable createdContract) {\\n        return _deploy(initcode, salt);\\n    }\\n\\n    /**\\n     * @notice Deploys `initcodes` using `salts` for defining the deterministic address.\\n     * @param initcodes Initialization codes.\\n     * @param salts Arbitrary values to modify resulting addresses.\\n     * @return createdContracts Created contract addresses.\\n     */\\n    function deployMultiple(bytes[] memory initcodes, bytes32[] memory salts) external override returns (address payable[] memory createdContracts) {\\n        uint256 length = initcodes.length;\\n        require(length == salts.length, \\\"length mismatch\\\");\\n        createdContracts = new address payable[](length);\\n        for(uint256 i = 0; i < length; i++) {\\n            createdContracts[i] = _deploy(initcodes[i], salts[i]);\\n        }\\n        return createdContracts;\\n    }\\n\\n    /**\\n     * @notice Deploys `initcode` using `salt` for defining the deterministic address.\\n     * @param initcode Initialization code.\\n     * @param salt Arbitrary value to modify resulting address.\\n     * @return createdContract Created contract address.\\n     */\\n    function _deploy(bytes memory initcode, bytes32 salt) internal returns (address payable createdContract) {\\n        assembly {\\n            createdContract := create2(0, add(initcode, 0x20), mload(initcode), salt)\\n        }\\n        require(createdContract != address(0x0), \\\"invalid initcode\\\");\\n        emit ContractDeployed(createdContract);\\n        return createdContract;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// code borrowed from EIP-2470\\n// https://etherscan.io/address/0xce0042B868300000d44A59004Da54A005ffdcf9f#code\\npragma solidity 0.8.6;\\n\\n/**\\n * @title IDeployer\\n * @notice Exposes `CREATE2` (EIP-1014) to deploy bytecode on deterministic addresses based on initialization code and salt.\\n * @author solace.fi\\n */\\ninterface IDeployer {\\n\\n    /// @notice Emitted when a contract is deployed.\\n    event ContractDeployed(address createdContract);\\n\\n    /**\\n     * @notice Deploys `initcode` using `salt` for defining the deterministic address.\\n     * @param initcode Initialization code.\\n     * @param salt Arbitrary value to modify resulting address.\\n     * @return createdContract Created contract address.\\n     */\\n    function deploy(bytes memory initcode, bytes32 salt) external returns (address payable createdContract);\\n\\n    /**\\n     * @notice Deploys multiple contracts.\\n     * @param initcodes Initialization codes.\\n     * @param salts Arbitrary values to modify resulting addresses.\\n     * @return createdContracts Created contract addresses.\\n     */\\n    function deployMultiple(bytes[] memory initcodes, bytes32[] memory salts) external returns (address payable[] memory createdContracts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"createdContract\",\"type\":\"address\"}],\"name\":\"ContractDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initcode\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"createdContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"initcodes\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"salts\",\"type\":\"bytes32[]\"}],\"name\":\"deployMultiple\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"createdContracts\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Deployer","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}