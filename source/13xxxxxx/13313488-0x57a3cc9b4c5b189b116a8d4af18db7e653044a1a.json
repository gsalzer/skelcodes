{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"FeeDistributionHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.6;\\nimport \\\"./interfaces/IFeeDistribution.sol\\\";\\nimport \\\"./interfaces/IFoundation.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract FeeDistributionHelper {\\n\\n  IFeeDistribution public constant feeDistribution = IFeeDistribution(0x3f93dE882dA8150Dc98a3a1F4626E80E3282df46);\\n  IFoundation public constant foundation = IFoundation(0x492530fc97522d142bc57710bE57fA57A43Dc911);\\n  IERC20 public constant usdp = IERC20(0x1456688345527bE1f37E9e627DA0837D6f08C925);\\n\\n  modifier s() {\\n    require(feeDistribution.canSwap(msg.sender), \\\"FeeDistributionHelper: can't claim, swap and distribute\\\");\\n    _;\\n  }\\n\\n  /**\\n    @notice minDuckAmount must be set to prevent sandwich attack\\n    @param usdpAmount The amount of USDP being swapped and distributed\\n    @param minDuckAmount The minimum amount of DUCK being distributed\\n  **/\\n  function claimSwapAndDistribute(uint usdpAmount, uint minDuckAmount) public s returns(uint) {\\n    foundation.distribute();\\n    return feeDistribution.swapAndDistribute(usdpAmount, minDuckAmount);\\n  }\\n\\n  // @dev This function should be manually changed to \\\"view\\\" in the ABI\\n  function viewDistribution() external s returns(uint usdp_, uint duck_) {\\n    foundation.distribute();\\n    return feeDistribution.viewDistribution();\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"interfaces/IFoundation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\npragma solidity ^0.8.6;\\n\\ninterface IFoundation {\\n\\n  function submitLiquidationFee(uint fee) external;\\n\\n  function distribute() external;\\n}\\n\"\r\n    },\r\n    \"interfaces/IFeeDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.6;\\n\\ninterface IFeeDistribution {\\n\\n  function canSwap(address who) external returns(bool);\\n\\n  function swapAndDistribute(uint usdpAmount, uint minDuckAmount) external returns(uint);\\n\\n  // @dev This function should be manually changed to \\\"view\\\" in the ABI\\n  function viewDistribution() external returns(uint usdp_, uint duck_);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDuckAmount\",\"type\":\"uint256\"}],\"name\":\"claimSwapAndDistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistribution\",\"outputs\":[{\"internalType\":\"contract IFeeDistribution\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundation\",\"outputs\":[{\"internalType\":\"contract IFoundation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdp\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdp_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duck_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FeeDistributionHelper","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}