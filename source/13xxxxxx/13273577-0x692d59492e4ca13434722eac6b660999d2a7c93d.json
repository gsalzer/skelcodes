{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SMCSymbolData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\nimport \\\"./ISMCSymbol.sol\\\";\\n\\ncontract SMCSymbolData is ISMCSymbolData {\\n    string[] public japaneseZodiacs = [\\n        \\\"NE (Rat)\\\",\\n        \\\"USHI (Ox)\\\",\\n        \\\"TORA (Tiger)\\\",\\n        \\\"U (Rabbit)\\\",\\n        \\\"TATSU (Dragon)\\\",\\n        \\\"MI (Snake)\\\",\\n        \\\"UMA (Horse)\\\",\\n        \\\"HITSUJI (Sheep)\\\",\\n        \\\"SARU (Monkey)\\\",\\n        \\\"YORI (Rooster)\\\",\\n        \\\"INU (Dog)\\\",\\n        \\\"I (Boar)\\\"\\n    ];\\n\\n    function JapaneseZodiacs()\\n        external\\n        view\\n        override\\n        returns (string[] memory)\\n    {\\n        return japaneseZodiacs;\\n    }\\n\\n    string[] public CodesOfArts = [\\n        \\\"Seditious\\\",\\n        \\\"Fastidious\\\",\\n        \\\"Malicious\\\",\\n        \\\"Audacious\\\",\\n        \\\"Pernicious\\\",\\n        \\\"Viscous\\\",\\n        \\\"Capricious\\\",\\n        \\\"Stratify\\\",\\n        \\\"Dignify\\\",\\n        \\\"Defy\\\",\\n        \\\"Satisfy\\\",\\n        \\\"Pacify\\\",\\n        \\\"Nullify\\\"\\n    ];\\n\\n    string[] public rarities = [\\n        \\\"\\\",\\n        \\\"\\\",\\n        \\\"Stardust\\\",\\n        \\\"Soldier\\\",\\n        \\\"Ninja\\\",\\n        \\\"Shogun\\\",\\n        \\\"\\\",\\n        \\\"\\\",\\n        \\\"\\\",\\n        \\\"\\\"\\n    ];\\n\\n    function Rarities() external view override returns (string[] memory) {\\n        return rarities;\\n    }\\n\\n    string[] public initials = [\\n        \\\"A\\\",\\n        \\\"B\\\",\\n        \\\"C\\\",\\n        \\\"D\\\",\\n        \\\"E\\\",\\n        \\\"F\\\",\\n        \\\"G\\\",\\n        \\\"H\\\",\\n        \\\"I\\\",\\n        \\\"J\\\",\\n        \\\"K\\\",\\n        \\\"L\\\",\\n        \\\"M\\\",\\n        \\\"N\\\",\\n        \\\"O\\\",\\n        \\\"P\\\",\\n        \\\"Q\\\",\\n        \\\"R\\\",\\n        \\\"S\\\",\\n        \\\"T\\\",\\n        \\\"U\\\",\\n        \\\"V\\\",\\n        \\\"W\\\",\\n        \\\"X\\\",\\n        \\\"Y\\\",\\n        \\\"Z\\\"\\n    ];\\n\\n    function Initials() external view override returns (string[] memory) {\\n        return initials;\\n    }\\n\\n    string[] public firstNames = [\\n        \\\"Oichi\\\",\\n        \\\"Naka\\\",\\n        \\\"Nene\\\",\\n        \\\"Francisco\\\",\\n        \\\"Matsu\\\",\\n        \\\"Luis\\\",\\n        \\\"Shigezane\\\",\\n        \\\"Masamune\\\",\\n        \\\"Mancio\\\",\\n        \\\"Naotora\\\",\\n        \\\"Naomasa\\\",\\n        \\\"Ittetsu\\\",\\n        \\\"Naoie\\\",\\n        \\\"Hirotsuna\\\",\\n        \\\"Hidekatsu\\\",\\n        \\\"Eihime\\\",\\n        \\\"Oman\\\",\\n        \\\"Motonobu\\\",\\n        \\\"Kiyomasa\\\",\\n        \\\"Saizo\\\",\\n        \\\"Harunobu\\\",\\n        \\\"Ujisato\\\",\\n        \\\"Tsunamoto\\\",\\n        \\\"Akimasa\\\",\\n        \\\"Musashi\\\",\\n        \\\"Maria\\\",\\n        \\\"Yoshitaka\\\",\\n        \\\"Oribe\\\",\\n        \\\"Matabei\\\",\\n        \\\"Teruhime\\\",\\n        \\\"Go\\\",\\n        \\\"Kaihime\\\",\\n        \\\"Murashige\\\",\\n        \\\"Ukon\\\",\\n        \\\"Kanbei\\\",\\n        \\\"Mototaka\\\",\\n        \\\"Munehisa\\\",\\n        \\\"Yoshimoto\\\",\\n        \\\"Narimasa\\\",\\n        \\\"Kojiro\\\",\\n        \\\"Yoshimutsu\\\",\\n        \\\"Yoshitatsu\\\",\\n        \\\"Dosan\\\",\\n        \\\"Toshimitsu\\\",\\n        \\\"Tatsuoki\\\",\\n        \\\"Garasha\\\",\\n        \\\"Tadaoki\\\",\\n        \\\"Yusai\\\",\\n        \\\"Yasumasa\\\",\\n        \\\"Magoichi\\\",\\n        \\\"Nagayoshi\\\",\\n        \\\"Tokitsugu\\\",\\n        \\\"Masakage\\\",\\n        \\\"Kazutoyo\\\",\\n        \\\"Kansuke\\\",\\n        \\\"Yoritsuna\\\",\\n        \\\"Tsunenaga\\\",\\n        \\\"Bokuzen\\\",\\n        \\\"Katsuie\\\",\\n        \\\"Eitoku\\\",\\n        \\\"Okuni\\\",\\n        \\\"Hatsu\\\",\\n        \\\"Yukinaga\\\",\\n        \\\"Hideaki\\\",\\n        \\\"Takakage\\\",\\n        \\\"Enshu\\\",\\n        \\\"Hisahide\\\",\\n        \\\"Tadateru\\\",\\n        \\\"Tadanao\\\",\\n        \\\"Kagetora\\\",\\n        \\\"Kagekatsu\\\",\\n        \\\"Kenshin\\\",\\n        \\\"Nobutaka\\\",\\n        \\\"Nobuhide\\\",\\n        \\\"Nobutada\\\",\\n        \\\"Nobunaga\\\",\\n        \\\"Ranmaru\\\",\\n        \\\"Yukimura\\\",\\n        \\\"Masayuki\\\",\\n        \\\"Goemon\\\",\\n        \\\"Mitsunari\\\",\\n        \\\"Hidehisa\\\",\\n        \\\"Chiyo\\\",\\n        \\\"Rikyu\\\",\\n        \\\"Nagamasa\\\",\\n        \\\"Keiji\\\",\\n        \\\"Toshie\\\",\\n        \\\"Nagamori\\\",\\n        \\\"Yoshihide\\\",\\n        \\\"Yoshiteru\\\",\\n        \\\"Yoshiaki\\\",\\n        \\\"Toshikiyo\\\",\\n        \\\"Sessai\\\",\\n        \\\"Gyuichi\\\",\\n        \\\"Dokan\\\",\\n        \\\"Tadachika\\\",\\n        \\\"Masashige\\\",\\n        \\\"Yoshioki\\\",\\n        \\\"Yoshimune\\\",\\n        \\\"Sorin\\\",\\n        \\\"Kazumasu\\\",\\n        \\\"Terumasa\\\",\\n        \\\"Tsuneoki\\\",\\n        \\\"Hanbei\\\",\\n        \\\"Chacha\\\",\\n        \\\"Shirojiro\\\",\\n        \\\"Yoshikage\\\",\\n        \\\"Asahihime\\\",\\n        \\\"Motochika\\\",\\n        \\\"Tohaku\\\",\\n        \\\"Kanetsugu\\\",\\n        \\\"Sokyu\\\",\\n        \\\"Tsuruhime\\\",\\n        \\\"Sakon\\\",\\n        \\\"Yoshihiro\\\",\\n        \\\"Takatora\\\",\\n        \\\"Ieyasu\\\",\\n        \\\"Hidetada\\\",\\n        \\\"Tenkai\\\",\\n        \\\"Yoshihisa\\\",\\n        \\\"Katsuhisa\\\",\\n        \\\"Haruhisa\\\",\\n        \\\"Nohime\\\",\\n        \\\"Toramasa\\\",\\n        \\\"Sotatsu\\\",\\n        \\\"Yoshinobu\\\",\\n        \\\"Katsuyori\\\",\\n        \\\"Shingen\\\",\\n        \\\"Nobutora\\\",\\n        \\\"Kotaro\\\",\\n        \\\"Hanzo\\\",\\n        \\\"Masanori\\\",\\n        \\\"Kojuro\\\",\\n        \\\"Tomonobu\\\",\\n        \\\"Koroku\\\",\\n        \\\"Hideyoshi\\\",\\n        \\\"Hidenaga\\\",\\n        \\\"Hideyori\\\",\\n        \\\"Tsurumatsu\\\",\\n        \\\"Ujiyasu\\\",\\n        \\\"Ujimasa\\\",\\n        \\\"Soun\\\",\\n        \\\"Masanobu\\\",\\n        \\\"Tadakatsu\\\",\\n        \\\"Mitsuhide\\\",\\n        \\\"Terumoto\\\",\\n        \\\"Motonari\\\",\\n        \\\"Munenori\\\",\\n        \\\"Ginchiyo\\\",\\n        \\\"Yasuke\\\"\\n    ];\\n\\n    function FirstNames() external view override returns (string[] memory) {\\n        return firstNames;\\n    }\\n\\n    string[] public nativePlaces = [\\n        \\\"Omi\\\",\\n        \\\"Mino\\\",\\n        \\\"Hida\\\",\\n        \\\"Shinano\\\",\\n        \\\"Kozuke\\\",\\n        \\\"Shimotsuke\\\",\\n        \\\"Mutsu\\\",\\n        \\\"Wakasa\\\",\\n        \\\"Echizen\\\",\\n        \\\"Kaga\\\",\\n        \\\"Noto\\\",\\n        \\\"Etchu\\\",\\n        \\\"Echigo\\\",\\n        \\\"Sado\\\",\\n        \\\"Iga\\\",\\n        \\\"Ise\\\",\\n        \\\"Shima\\\",\\n        \\\"Owari\\\",\\n        \\\"Mikawa\\\",\\n        \\\"Totomi\\\",\\n        \\\"Suruga\\\",\\n        \\\"Izu\\\",\\n        \\\"Kai\\\",\\n        \\\"Sagami\\\",\\n        \\\"Musashi\\\",\\n        \\\"Awa\\\",\\n        \\\"Kazusa\\\",\\n        \\\"Shimousa\\\",\\n        \\\"Hitachi\\\",\\n        \\\"Yamato\\\",\\n        \\\"Yamashiro\\\",\\n        \\\"Settsu\\\",\\n        \\\"Kawachi\\\",\\n        \\\"Izumi\\\",\\n        \\\"Tanba\\\",\\n        \\\"Tango\\\",\\n        \\\"Tajima\\\",\\n        \\\"Inaba\\\",\\n        \\\"Hoki\\\",\\n        \\\"Izumo\\\",\\n        \\\"Iwami\\\",\\n        \\\"Oki\\\",\\n        \\\"Harima\\\",\\n        \\\"Mimasaka\\\",\\n        \\\"Bizen\\\",\\n        \\\"Bitchu\\\",\\n        \\\"Bingo\\\",\\n        \\\"Aki\\\",\\n        \\\"Suo\\\",\\n        \\\"Nagato\\\",\\n        \\\"Kii\\\",\\n        \\\"Awaji\\\",\\n        \\\"Sanuki\\\",\\n        \\\"Iyo\\\",\\n        \\\"Tosa\\\",\\n        \\\"Chikuzen\\\",\\n        \\\"Chikugo\\\",\\n        \\\"Buzen\\\",\\n        \\\"Bungo\\\",\\n        \\\"Hizen\\\",\\n        \\\"Higo\\\",\\n        \\\"Hyuga\\\",\\n        \\\"Osumi\\\",\\n        \\\"Satsuma\\\",\\n        \\\"Iki\\\",\\n        \\\"Tsushima\\\",\\n        \\\"Ezo\\\",\\n        \\\"Ryukyu\\\",\\n        \\\"Portugal\\\",\\n        \\\"Mozambique\\\",\\n        \\\"Joseon\\\",\\n        \\\"Netherlands\\\",\\n        \\\"England\\\",\\n        \\\"Ming\\\",\\n        \\\"Moon\\\",\\n        \\\"Underworld\\\",\\n        \\\"Unknown\\\"\\n    ];\\n\\n    function NativePlaces() external view override returns (string[] memory) {\\n        return nativePlaces;\\n    }\\n\\n    string[] public colors = [\\n        \\\"\\\",\\n        \\\"Red\\\",\\n        \\\"Green\\\",\\n        \\\"Blue\\\",\\n        \\\"Purple\\\",\\n        \\\"White\\\",\\n        \\\"Sakura\\\",\\n        \\\"Navy\\\"\\n    ];\\n\\n    function Colors() external view override returns (string[] memory) {\\n        return colors;\\n    }\\n\\n    string[] public patterns = [\\n        \\\"Ichimatsu\\\",\\n        \\\"Asanoha\\\",\\n        \\\"Seigaiha\\\",\\n        \\\"Uroko\\\",\\n        \\\"Yagasuri\\\",\\n        \\\"Shichiyoumon\\\",\\n        \\\"Mitsudomoe\\\",\\n        \\\"Sankuzushi\\\",\\n        \\\"Chidori\\\",\\n        \\\"Kikkou\\\",\\n        \\\"Plain\\\"\\n    ];\\n\\n    function Patterns() external view override returns (string[] memory) {\\n        return patterns;\\n    }\\n\\n    constructor() {}\\n}\\n\"\r\n    },\r\n    \"contracts/ISMCSymbol.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface ISMCSymbolDescriptor {\\n    function tokenURI(ISMCManager manager, uint256 tokenId)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\\ninterface ISMCSymbolData {\\n    function JapaneseZodiacs() external view returns (string[] memory);\\n\\n    function Initials() external view returns (string[] memory);\\n\\n    function Rarities() external view returns (string[] memory);\\n\\n    function FirstNames() external view returns (string[] memory);\\n\\n    function NativePlaces() external view returns (string[] memory);\\n\\n    function Colors() external view returns (string[] memory);\\n\\n    function Patterns() external view returns (string[] memory);\\n}\\n\\ninterface ISMCManager is IERC721 {\\n    function getRespect() external view returns (string memory);\\n\\n    function getRespectColorCode() external view returns (uint256);\\n\\n    function getCodesOfArt(uint256 tokenId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    function getRarity(uint256 tokenId) external view returns (string memory);\\n\\n    function getRarityDigit(uint256 tokenId) external view returns (uint256);\\n\\n    function getSamurights(uint256 tokenId) external view returns (uint256);\\n\\n    function getName(uint256 tokenId) external view returns (string memory);\\n\\n    function getNativePlace(uint256 tokenId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    function getJapaneseZodiac(uint256 tokenId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    function getColorLCode(uint256 tokenId) external view returns (uint256);\\n\\n    function getColorL(uint256 tokenId) external view returns (string memory);\\n\\n    function getColorRCode(uint256 tokenId) external view returns (uint256);\\n\\n    function getColorR(uint256 tokenId) external view returns (string memory);\\n\\n    function getPatternLCode(uint256 tokenId) external view returns (uint256);\\n\\n    function getPatternL(uint256 tokenId) external view returns (string memory);\\n\\n    function getPatternRCode(uint256 tokenId) external view returns (uint256);\\n\\n    function getPatternR(uint256 tokenId) external view returns (string memory);\\n\\n    function getActivatedKatana(uint256 tokenId)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CodesOfArts\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Colors\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FirstNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Initials\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"JapaneseZodiacs\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NativePlaces\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Patterns\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Rarities\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"firstNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"initials\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"japaneseZodiacs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nativePlaces\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"patterns\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rarities\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SMCSymbolData","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}