{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/Controlled.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"../interfaces/IKernel.sol\\\";\\n\\nabstract contract Controlled is Initializable, ModuleMapConsumer {\\n    // controller address => is a controller\\n    mapping(address => bool) internal _controllers;\\n    address[] public controllers;\\n\\n    function __Controlled_init(\\n        address[] memory controllers_,\\n        address moduleMap_\\n    ) public initializer {\\n        for (uint256 i; i < controllers_.length; i++) {\\n            _controllers[controllers_[i]] = true;\\n        }\\n        controllers = controllers_;\\n        __ModuleMapConsumer_init(moduleMap_);\\n    }\\n\\n    function addController(address controller) external onlyOwner {\\n        _controllers[controller] = true;\\n        bool added;\\n        for (uint256 i; i < controllers.length; i++) {\\n            if (controller == controllers[i]) {\\n                added = true;\\n            }\\n        }\\n        if (!added) {\\n            controllers.push(controller);\\n        }\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isOwner(\\n                msg.sender\\n            ),\\n            \\\"Controlled::onlyOwner: Caller is not owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(\\n            IKernel(moduleMap.getModuleAddress(Modules.Kernel)).isManager(\\n                msg.sender\\n            ),\\n            \\\"Controlled::onlyManager: Caller is not manager\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender],\\n            \\\"Controlled::onlyController: Caller is not controller\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/ModuleMapConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IModuleMap.sol\\\";\\n\\nabstract contract ModuleMapConsumer is Initializable {\\n    IModuleMap public moduleMap;\\n\\n    function __ModuleMapConsumer_init(address moduleMap_) internal initializer {\\n        moduleMap = IModuleMap(moduleMap_);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/StrategyMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ModuleMapConsumer.sol\\\";\\nimport \\\"./Controlled.sol\\\";\\nimport \\\"../interfaces/IStrategyMap.sol\\\";\\nimport \\\"../interfaces/IIntegrationMap.sol\\\";\\nimport \\\"../interfaces/IUserPositions.sol\\\";\\nimport \\\"../interfaces/IYieldManager.sol\\\";\\n\\ncontract StrategyMap is\\n  Initializable,\\n  ModuleMapConsumer,\\n  Controlled,\\n  IStrategyMap\\n{\\n  // #### Constants\\n  uint32 public constant TOKEN_WEIGHT = 100000;\\n\\n  // #### Global State\\n\\n  // Strategy id => Strategy\\n  mapping(uint256 => Strategy) internal strategies;\\n\\n  // User => Strategy => Token => Balance\\n  mapping(address => mapping(uint256 => mapping(address => uint256)))\\n    internal userStrategyBalances;\\n\\n  // User => Token => Amount\\n  mapping(address => mapping(address => uint256)) internal userTokenBalances;\\n\\n  // Token => total amount in all strategies\\n  mapping(address => uint256) internal tokenBalances;\\n\\n  // Strategy => token => balance\\n  mapping(uint256 => mapping(address => uint256))\\n    internal strategyTokenBalances;\\n\\n  // Integration => pool id => token => amount to deploy\\n  mapping(address => mapping(uint32 => mapping(address => int256)))\\n    internal deployAmount;\\n\\n  // integration => token => poolID[]\\n  mapping(address => mapping(address => uint32[])) internal pools;\\n\\n  // user => abi.encode(integration, token, poolID) => withdraw amount\\n  mapping(address => mapping(bytes => uint256)) internal withdrawalVectors;\\n\\n  uint256 public override idCounter;\\n\\n  // Used for strategy verification. Contents are always deleted at the end of a tx to reduce gas hit.\\n  mapping(address => uint256) internal tokenWeights;\\n\\n  // Users => StrategyRecord - Used to correlate multiple strategies with a user\\n  mapping(address => StrategyRecord[]) internal userStrategies;\\n\\n  // #### Functions\\n\\n  function initialize(address[] memory controllers_, address moduleMap_)\\n    public\\n    initializer\\n  {\\n    __Controlled_init(controllers_, moduleMap_);\\n    __ModuleMapConsumer_init(moduleMap_);\\n  }\\n\\n  function _insertPoolID(\\n    address integration,\\n    uint32 poolID,\\n    address token\\n  ) internal {\\n    uint32[] memory poolIDs = pools[integration][token];\\n    bool found = false;\\n    for (uint256 i = 0; i < poolIDs.length; i++) {\\n      if (poolIDs[i] == poolID) {\\n        found = true;\\n        break;\\n      }\\n    }\\n    if (!found) {\\n      pools[integration][token].push(poolID);\\n    }\\n  }\\n\\n  function addStrategy(\\n    string calldata name,\\n    Integration[] calldata integrations,\\n    Token[] calldata tokens\\n  ) external override onlyController {\\n    require(integrations.length > 0, \\\"integrations missing\\\");\\n    require(tokens.length > 0, \\\"tokens missing\\\");\\n    require(bytes(name).length > 0, \\\"must have a name\\\");\\n\\n    idCounter++;\\n    uint256 strategyID = idCounter;\\n    _verifyAndSetStrategy(strategyID, name, integrations, tokens);\\n\\n    // Emit event\\n    emit NewStrategy(strategyID, integrations, tokens, name);\\n  }\\n\\n  function _verifyAndSetStrategy(\\n    uint256 strategyID,\\n    string memory name,\\n    Integration[] memory integrations,\\n    Token[] memory tokens\\n  ) internal {\\n    for (uint256 i = 0; i < integrations.length; i++) {\\n      require(integrations[i].integration != address(0), \\\"bad integration\\\");\\n    }\\n\\n    address[] memory uniqueTokens = new address[](tokens.length);\\n    uint256 idx = 0;\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      require(\\n        tokens[i].integrationPairIdx < integrations.length,\\n        \\\"integration idx out of bounds\\\"\\n      );\\n      require(tokens[i].token != address(0), \\\"bad token\\\");\\n\\n      if (tokenWeights[tokens[i].token] == 0) {\\n        uniqueTokens[idx] = tokens[i].token;\\n        idx++;\\n      }\\n      tokenWeights[tokens[i].token] += tokens[i].weight;\\n      _insertPoolID(\\n        integrations[tokens[i].integrationPairIdx].integration,\\n        integrations[tokens[i].integrationPairIdx].ammPoolID,\\n        tokens[i].token\\n      );\\n    }\\n\\n    // Verify weights\\n    for (uint256 i = 0; i < idx; i++) {\\n      require(\\n        tokenWeights[uniqueTokens[i]] == TOKEN_WEIGHT,\\n        \\\"invalid token weight\\\"\\n      );\\n      strategies[strategyID].availableTokens[uniqueTokens[i]] = true;\\n      delete tokenWeights[uniqueTokens[i]];\\n    }\\n\\n    strategies[strategyID].name = name;\\n\\n    // Can't copy a memory array directly to storage yet, so we build it manually.\\n    for (uint256 i = 0; i < integrations.length; i++) {\\n      strategies[strategyID].integrations.push(integrations[i]);\\n    }\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      strategies[strategyID].tokens.push(tokens[i]);\\n    }\\n  }\\n\\n  function updateName(uint256 id, string calldata name)\\n    external\\n    override\\n    onlyController\\n  {\\n    require(bytes(strategies[id].name).length > 0, \\\"strategy must exist\\\");\\n    require(bytes(name).length > 0, \\\"invalid name\\\");\\n    strategies[id].name = name;\\n    emit UpdateName(id, name);\\n  }\\n\\n  function updateStrategy(\\n    uint256 id,\\n    Integration[] calldata integrations,\\n    Token[] calldata tokens\\n  ) external override onlyController {\\n    require(integrations.length > 0, \\\"integrations missing\\\");\\n    require(tokens.length > 0, \\\"tokens missing\\\");\\n    require(bytes(strategies[id].name).length > 0, \\\"strategy must exist\\\");\\n\\n    StrategySummary memory currentStrategy = getStrategy(id);\\n\\n    delete strategies[id].tokens;\\n    delete strategies[id].integrations;\\n\\n    // Reduce deploy amount for each current token by: strat token balance * weight / TOKEN_WEIGHT\\n\\n    for (uint256 i = 0; i < currentStrategy.tokens.length; i++) {\\n      deployAmount[\\n        currentStrategy\\n          .integrations[currentStrategy.tokens[i].integrationPairIdx]\\n          .integration\\n      ][\\n        currentStrategy\\n          .integrations[currentStrategy.tokens[i].integrationPairIdx]\\n          .ammPoolID\\n      ][currentStrategy.tokens[i].token] -= int256(\\n        (strategyTokenBalances[id][currentStrategy.tokens[i].token] *\\n          currentStrategy.tokens[i].weight) / TOKEN_WEIGHT\\n      );\\n\\n      delete strategies[id].availableTokens[currentStrategy.tokens[i].token];\\n    }\\n\\n    // Increase deploy amount for each new token by: strat token balance * weight / TOKEN_WEIGHT\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      if (strategyTokenBalances[id][tokens[i].token] > 0) {\\n        deployAmount[integrations[tokens[i].integrationPairIdx].integration][\\n          integrations[tokens[i].integrationPairIdx].ammPoolID\\n        ][tokens[i].token] += int256(\\n          (strategyTokenBalances[id][tokens[i].token] * tokens[i].weight) /\\n            TOKEN_WEIGHT\\n        );\\n      }\\n    }\\n\\n    _verifyAndSetStrategy(id, currentStrategy.name, integrations, tokens);\\n\\n    emit UpdateStrategy(id, integrations, tokens);\\n  }\\n\\n  function deleteStrategy(uint256 id) external override onlyController {\\n    StrategySummary memory strategy = getStrategy(id);\\n    for (uint256 i = 0; i < strategy.tokens.length; i++) {\\n      require(\\n        strategyTokenBalances[id][strategy.tokens[i].token] == 0,\\n        \\\"strategy in use\\\"\\n      );\\n      delete strategies[id].availableTokens[strategy.tokens[i].token];\\n    }\\n    delete strategies[id];\\n    emit DeleteStrategy(id);\\n  }\\n\\n  function enterStrategy(\\n    uint256 id,\\n    address user,\\n    TokenMovement[] calldata tokens\\n  ) external override onlyController {\\n    StrategySummary memory strategy = getStrategy(id);\\n\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      require(strategies[id].availableTokens[tokens[i].token], \\\"invalid token\\\");\\n      // Check for virtual funds\\n      _processVirtualFunds(user, tokens[i].token, tokens[i].amount);\\n\\n      // Update state\\n      tokenWeights[tokens[i].token] = tokens[i].amount;\\n      userStrategyBalances[user][id][tokens[i].token] += tokens[i].amount;\\n      userTokenBalances[user][tokens[i].token] += tokens[i].amount;\\n      tokenBalances[tokens[i].token] += tokens[i].amount;\\n      strategyTokenBalances[id][tokens[i].token] += tokens[i].amount;\\n    }\\n\\n    for (uint256 i = 0; i < strategy.tokens.length; i++) {\\n      // Increase deploy amounts\\n      Token memory token = strategy.tokens[i];\\n      deployAmount[strategy.integrations[token.integrationPairIdx].integration][\\n        strategy.integrations[token.integrationPairIdx].ammPoolID\\n      ][token.token] += int256(\\n        (tokenWeights[token.token] * token.weight) / TOKEN_WEIGHT\\n      );\\n    }\\n\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      delete tokenWeights[tokens[i].token];\\n    }\\n\\n    userStrategies[user].push(StrategyRecord({strategyId: id, timestamp: block.timestamp}));\\n\\n    emit EnterStrategy(id, user, tokens);\\n  }\\n\\n  function _processVirtualFunds(\\n    address user,\\n    address token,\\n    uint256 tokenAmountRequired\\n  ) private {\\n    IIntegrationMap integrationMap = IIntegrationMap(\\n      moduleMap.getModuleAddress(Modules.IntegrationMap)\\n    );\\n    uint256 integrationCount = integrationMap.getIntegrationAddressesLength();\\n    IUserPositions userPositions = IUserPositions(\\n      moduleMap.getModuleAddress(Modules.UserPositions)\\n    );\\n    uint256 virtualBalance = userPositions.getUserVirtualBalance(user, token);\\n    if (virtualBalance > 0) {\\n      uint256 currentAmount = tokenAmountRequired;\\n      for (uint256 i = 0; i < integrationCount; i++) {\\n        uint32[] memory tokenPools = pools[\\n          integrationMap.getIntegrationAddress(i)\\n        ][token];\\n        if (tokenPools.length > 0) {\\n          for (uint256 j = 0; j < tokenPools.length; j++) {\\n            bytes memory key = abi.encode(\\n              integrationMap.getIntegrationAddress(i),\\n              token,\\n              tokenPools[j]\\n            );\\n            uint256 withdrawalBalance = withdrawalVectors[user][key];\\n            if (withdrawalBalance > 0 && currentAmount > 0) {\\n              if (withdrawalBalance >= currentAmount) {\\n                withdrawalVectors[user][key] -= currentAmount;\\n                currentAmount = 0;\\n                deployAmount[integrationMap.getIntegrationAddress(i)][\\n                  tokenPools[j]\\n                ][token] -= int256(currentAmount);\\n              } else {\\n                withdrawalVectors[user][key] = 0;\\n                currentAmount -= withdrawalBalance;\\n                deployAmount[integrationMap.getIntegrationAddress(i)][\\n                  tokenPools[j]\\n                ][token] -= int256(withdrawalBalance);\\n              }\\n            }\\n            if (currentAmount == 0) {\\n              break;\\n            }\\n          }\\n        }\\n        if (currentAmount == 0) {\\n          break;\\n        }\\n      }\\n    }\\n  }\\n\\n  function exitStrategy(\\n    uint256 id,\\n    address user,\\n    TokenMovement[] calldata tokens\\n  ) external override onlyController {\\n    // IMPORTANT: Should allow a user to withdraw orphaned funds\\n    StrategySummary memory strategy = getStrategy(id);\\n\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      // Check user has balance and that user is invested in strategy\\n      require(\\n        userTokenBalances[user][tokens[i].token] >= tokens[i].amount,\\n        \\\"insufficient funds\\\"\\n      );\\n      require(\\n        userStrategyBalances[user][id][tokens[i].token] >= tokens[i].amount,\\n        \\\"invalid strategy\\\"\\n      );\\n\\n      // Update strategy balances\\n      strategyTokenBalances[id][tokens[i].token] -= tokens[i].amount;\\n\\n      // Update user balances\\n      userStrategyBalances[user][id][tokens[i].token] -= tokens[i].amount;\\n      userTokenBalances[user][tokens[i].token] -= tokens[i].amount;\\n\\n      // Update global balances\\n      tokenBalances[tokens[i].token] -= tokens[i].amount;\\n      tokenWeights[tokens[i].token] = tokens[i].amount;\\n    }\\n    if (strategy.tokens.length > 0) {\\n      // If the strategy hasn't been deleted, we need to unwind the positions\\n      for (uint256 i = 0; i < strategy.tokens.length; i++) {\\n        // Set the user withdrawal amounts (-tokens[i].amount)\\n        Token memory token = strategy.tokens[i];\\n        if (tokenWeights[token.token] > 0) {\\n          withdrawalVectors[user][\\n            abi.encode(\\n              strategy.integrations[token.integrationPairIdx].integration,\\n              token.token,\\n              strategy.integrations[token.integrationPairIdx].ammPoolID\\n            )\\n          ] += (tokenWeights[token.token] * token.weight) / TOKEN_WEIGHT;\\n        }\\n      }\\n    }\\n\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      delete tokenWeights[tokens[i].token];\\n    }\\n    emit ExitStrategy(id, user, tokens);\\n  }\\n\\n  function decreaseDeployAmountChange(\\n    address integration,\\n    uint32 poolID,\\n    address token,\\n    uint256 amount\\n  ) external override {\\n    int256 currentAmount = deployAmount[integration][poolID][token];\\n\\n    if (currentAmount >= 0) {\\n      deployAmount[integration][poolID][token] -= int256(amount);\\n    } else {\\n      deployAmount[integration][poolID][token] += int256(amount);\\n    }\\n  }\\n\\n  function getStrategy(uint256 id)\\n    public\\n    view\\n    override\\n    returns (StrategySummary memory)\\n  {\\n    StrategySummary memory result;\\n    result.name = strategies[id].name;\\n    result.integrations = strategies[id].integrations;\\n    result.tokens = strategies[id].tokens;\\n    return result;\\n  }\\n\\n  function getMultipleStrategies(uint256[] calldata ids)\\n    external\\n    view\\n    override\\n    returns (StrategySummary[] memory)\\n  {\\n    StrategySummary[] memory strategies = new StrategySummary[](ids.length);\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      strategies[i] = getStrategy(ids[i]);\\n    }\\n    return strategies;\\n  }\\n\\n  function getStrategyTokenBalance(uint256 id, address token)\\n    public\\n    view\\n    override\\n    returns (uint256 amount)\\n  {\\n    amount = strategyTokenBalances[id][token];\\n  }\\n\\n  function getUserStrategyBalanceByToken(\\n    uint256 id,\\n    address token,\\n    address user\\n  ) public view override returns (uint256 amount) {\\n    amount = userStrategyBalances[user][id][token];\\n  }\\n\\n  function getUserInvestedAmountByToken(address token, address user)\\n    public\\n    view\\n    override\\n    returns (uint256 amount)\\n  {\\n    amount = userTokenBalances[user][token];\\n  }\\n\\n  function getTokenTotalBalance(address token)\\n    public\\n    view\\n    override\\n    returns (uint256 amount)\\n  {\\n    amount = tokenBalances[token];\\n  }\\n\\n  function getDeployAmount(\\n    address integration,\\n    uint32 poolID,\\n    address token\\n  ) external view override returns (int256) {\\n    return deployAmount[integration][poolID][token];\\n  }\\n\\n  function getPools(address integration, address token)\\n    external\\n    view\\n    override\\n    returns (uint32[] memory)\\n  {\\n    return pools[integration][token];\\n  }\\n\\n  function getUserWithdrawalVector(\\n    address user,\\n    address token,\\n    address integration,\\n    uint32 poolID\\n  ) external view override returns (uint256) {\\n    return withdrawalVectors[user][abi.encode(integration, token, poolID)];\\n  }\\n\\n  function getAllStrategyRecords(address user) \\n    public\\n    view\\n    returns(StrategyRecord[] memory) {\\n      return userStrategies[user];\\n  }\\n\\n  function updateUserWithdrawalVector(\\n    address user,\\n    address token,\\n    address integration,\\n    uint32 poolID,\\n    uint256 amount\\n  ) external override onlyController {\\n    bytes memory key = abi.encode(integration, token, poolID);\\n    if (withdrawalVectors[user][key] >= amount) {\\n      withdrawalVectors[user][key] -= amount;\\n    }\\n  }\\n\\n  function getUserBalances(\\n    address user,\\n    uint256[] calldata _strategies,\\n    address[] calldata _tokens\\n  )\\n    external\\n    view\\n    override\\n    returns (\\n      StrategyBalance[] memory strategyBalance,\\n      GeneralBalance[] memory userBalance\\n    )\\n  {\\n    strategyBalance = new StrategyBalance[](_strategies.length);\\n    userBalance = new GeneralBalance[](_tokens.length);\\n\\n    for (uint256 i = 0; i < _tokens.length; i++) {\\n      userBalance[i].token = _tokens[i];\\n      userBalance[i].balance = userTokenBalances[user][_tokens[i]];\\n    }\\n\\n    for (uint256 i = 0; i < _strategies.length; i++) {\\n      Token[] memory strategyTokens = strategies[_strategies[i]].tokens;\\n      strategyBalance[i].tokens = new GeneralBalance[](strategyTokens.length);\\n      strategyBalance[i].strategyID = _strategies[i];\\n      for (uint256 j = 0; j < strategyTokens.length; j++) {\\n        strategyBalance[i].tokens[j].token = strategyTokens[j].token;\\n        strategyBalance[i].tokens[j].balance = userStrategyBalances[user][\\n          _strategies[i]\\n        ][strategyTokens[j].token];\\n      }\\n    }\\n  }\\n\\n  function getStrategyBalances(\\n    uint256[] calldata _strategies,\\n    address[] calldata _tokens\\n  )\\n    external\\n    view\\n    override\\n    returns (\\n      StrategyBalance[] memory strategyBalances,\\n      GeneralBalance[] memory generalBalances\\n    )\\n  {\\n    strategyBalances = new StrategyBalance[](_strategies.length);\\n    generalBalances = new GeneralBalance[](_tokens.length);\\n\\n    for (uint256 i = 0; i < _tokens.length; i++) {\\n      generalBalances[i].token = _tokens[i];\\n      generalBalances[i].balance = tokenBalances[_tokens[i]];\\n    }\\n\\n    for (uint256 i = 0; i < _strategies.length; i++) {\\n      Token[] memory strategyTokens = strategies[_strategies[i]].tokens;\\n      strategyBalances[i].tokens = new GeneralBalance[](strategyTokens.length);\\n      strategyBalances[i].strategyID = _strategies[i];\\n      for (uint256 j = 0; j < strategyTokens.length; j++) {\\n        strategyBalances[i].tokens[j].token = strategyTokens[j].token;\\n        strategyBalances[i].tokens[j].balance = strategyTokenBalances[\\n          _strategies[i]\\n        ][strategyTokens[j].token];\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIntegration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IIntegration {\\n\\n    /// @param tokenAddress The address of the deposited token\\n    /// @param amount The amount of the token being deposited\\n    function deposit(address tokenAddress, uint256 amount) external;\\n\\n    /// @param tokenAddress The address of the withdrawal token\\n    /// @param amount The amount of the token to withdraw\\n    function withdraw(address tokenAddress, uint256 amount) external;\\n\\n    /// @dev Deploys all tokens held in the integration contract to the integrated protocol\\n    function deploy() external;\\n\\n    /// @dev Harvests token yield from the integration\\n    function harvestYield() external;\\n\\n    /// @dev This returns the total amount of the underlying token that\\n    /// @dev has been deposited to the integration contract\\n    /// @param tokenAddress The address of the deployed token\\n    /// @return The amount of the underlying token that can be withdrawn\\n    function getBalance(address tokenAddress) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIntegrationMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IIntegrationMap {\\n    struct Integration {\\n        bool added;\\n        string name;\\n    }\\n\\n    struct Token {\\n        uint256 id;\\n        bool added;\\n        bool acceptingDeposits;\\n        bool acceptingWithdrawals;\\n        uint256 biosRewardWeight;\\n        uint256 reserveRatioNumerator;\\n    }\\n\\n    /// @param contractAddress The address of the integration contract\\n    /// @param name The name of the protocol being integrated to\\n    function addIntegration(address contractAddress, string memory name)\\n        external;\\n\\n    /// @param tokenAddress The address of the ERC20 token contract\\n    /// @param acceptingDeposits Whether token deposits are enabled\\n    /// @param acceptingWithdrawals Whether token withdrawals are enabled\\n    /// @param biosRewardWeight Token weight for BIOS rewards\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    function addToken(\\n        address tokenAddress,\\n        bool acceptingDeposits,\\n        bool acceptingWithdrawals,\\n        uint256 biosRewardWeight,\\n        uint256 reserveRatioNumerator\\n    ) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenDeposits(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function enableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    function disableTokenWithdrawals(address tokenAddress) external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @param rewardWeight The updated token BIOS reward weight\\n    function updateTokenRewardWeight(address tokenAddress, uint256 rewardWeight)\\n        external;\\n\\n    /// @param tokenAddress the address of the token ERC20 contract\\n    /// @param reserveRatioNumerator Number that gets divided by reserve ratio denominator to get reserve ratio\\n    function updateTokenReserveRatioNumerator(\\n        address tokenAddress,\\n        uint256 reserveRatioNumerator\\n    ) external;\\n\\n    /// @param integrationId The ID of the integration\\n    /// @return The address of the integration contract\\n    function getIntegrationAddress(uint256 integrationId)\\n        external\\n        view\\n        returns (address);\\n\\n    /// @param integrationAddress The address of the integration contract\\n    /// @return The name of the of the protocol being integrated to\\n    function getIntegrationName(address integrationAddress)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /// @return The address of the WETH token\\n    function getWethTokenAddress() external view returns (address);\\n\\n    /// @return The address of the BIOS token\\n    function getBiosTokenAddress() external view returns (address);\\n\\n    /// @param tokenId The ID of the token\\n    /// @return The address of the token ERC20 contract\\n    function getTokenAddress(uint256 tokenId) external view returns (address);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The index of the token in the tokens array\\n    function getTokenId(address tokenAddress) external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The token BIOS reward weight\\n    function getTokenBiosRewardWeight(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return rewardWeightSum reward weight of depositable tokens\\n    function getBiosRewardWeightSum()\\n        external\\n        view\\n        returns (uint256 rewardWeightSum);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether depositing this token is currently enabled\\n    function getTokenAcceptingDeposits(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return bool indicating whether withdrawing this token is currently enabled\\n    function getTokenAcceptingWithdrawals(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    // @param tokenAddress The address of the token ERC20 contract\\n    // @return bool indicating whether the token has been added\\n    function getIsTokenAdded(address tokenAddress) external view returns (bool);\\n\\n    // @param integrationAddress The address of the integration contract\\n    // @return bool indicating whether the integration has been added\\n    function getIsIntegrationAdded(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice get the length of supported tokens\\n    /// @return The quantity of tokens added\\n    function getTokenAddressesLength() external view returns (uint256);\\n\\n    /// @notice get the length of supported integrations\\n    /// @return The quantity of integrations added\\n    function getIntegrationAddressesLength() external view returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The value that gets divided by the reserve ratio denominator\\n    function getTokenReserveRatioNumerator(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return The token reserve ratio denominator\\n    function getReserveRatioDenominator() external view returns (uint32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKernel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IKernel {\\n    /// @param account The address of the account to check if they are a manager\\n    /// @return Bool indicating whether the account is a manger\\n    function isManager(address account) external view returns (bool);\\n\\n    /// @param account The address of the account to check if they are an owner\\n    /// @return Bool indicating whether the account is an owner\\n    function isOwner(address account) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IModuleMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\nenum Modules {\\n    Kernel, // 0\\n    UserPositions, // 1\\n    YieldManager, // 2\\n    IntegrationMap, // 3\\n    BiosRewards, // 4\\n    EtherRewards, // 5\\n    SushiSwapTrader, // 6\\n    UniswapTrader, // 7\\n    StrategyMap, // 8\\n    StrategyManager // 9\\n}\\n\\ninterface IModuleMap {\\n    function getModuleAddress(Modules key) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrategyMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\nimport \\\"../interfaces/IIntegration.sol\\\";\\n\\ninterface IStrategyMap {\\n  // #### Structs\\n  struct Integration {\\n    address integration;\\n    uint32 ammPoolID;\\n  }\\n  struct Token {\\n    uint256 integrationPairIdx;\\n    address token;\\n    uint32 weight;\\n  }\\n\\n  struct Strategy {\\n    string name;\\n    Integration[] integrations;\\n    Token[] tokens;\\n    mapping(address => bool) availableTokens;\\n  }\\n\\n  struct StrategyRecord {\\n    uint256 strategyId;\\n    uint256 timestamp;\\n  }\\n\\n  struct StrategySummary {\\n    string name;\\n    Integration[] integrations;\\n    Token[] tokens;\\n  }\\n\\n  struct TokenMovement {\\n    address token;\\n    uint256 amount;\\n  }\\n\\n  struct StrategyBalance {\\n    uint256 strategyID;\\n    GeneralBalance[] tokens;\\n  }\\n\\n  struct GeneralBalance {\\n    address token;\\n    uint256 balance;\\n  }\\n\\n  // #### Events\\n  // NewStrategy, UpdateName, UpdateStrategy, DeleteStrategy, EnterStrategy, ExitStrategy\\n  event NewStrategy(\\n    uint256 indexed id,\\n    Integration[] integrations,\\n    Token[] tokens,\\n    string name\\n  );\\n  event UpdateName(uint256 indexed id, string name);\\n  event UpdateStrategy(\\n    uint256 indexed id,\\n    Integration[] integrations,\\n    Token[] tokens\\n  );\\n  event DeleteStrategy(uint256 indexed id);\\n  event EnterStrategy(\\n    uint256 indexed id,\\n    address indexed user,\\n    TokenMovement[] tokens\\n  );\\n  event ExitStrategy(\\n    uint256 indexed id,\\n    address indexed user,\\n    TokenMovement[] tokens\\n  );\\n\\n  // #### Functions\\n  /**\\n     @notice Adds a new strategy to the list of available strategies\\n     @param name  the name of the new strategy\\n     @param integrations  the integrations and weights that form the strategy\\n     */\\n  function addStrategy(\\n    string calldata name,\\n    Integration[] calldata integrations,\\n    Token[] calldata tokens\\n  ) external;\\n\\n  /**\\n    @notice Updates the strategy name\\n    @param name  the new name\\n     */\\n  function updateName(uint256 id, string calldata name) external;\\n\\n  /**\\n    @notice Updates a strategy's integrations and tokens\\n    @param id  the strategy to update\\n    @param integrations  the new integrations that will be used\\n    @param tokens  the tokens accepted for new entries\\n    */\\n  function updateStrategy(\\n    uint256 id,\\n    Integration[] calldata integrations,\\n    Token[] calldata tokens\\n  ) external;\\n\\n  /**\\n    @notice Deletes a strategy\\n    @dev This can only be called successfully if the strategy being deleted doesn't have any assets invested in it.\\n    @dev To delete a strategy with funds deployed in it, first update the strategy so that the existing tokens are no longer available in the strategy, then delete the strategy. This will unwind the users positions, and they will be able to withdraw their funds.\\n    @param id  the strategy to delete\\n     */\\n  function deleteStrategy(uint256 id) external;\\n\\n  /**\\n    @notice Increases the amount of a set of tokens in a strategy\\n    @param id  the strategy to deposit into\\n    @param tokens  the tokens to deposit\\n    @param user  the user making the deposit\\n     */\\n  function enterStrategy(\\n    uint256 id,\\n    address user,\\n    TokenMovement[] calldata tokens\\n  ) external;\\n\\n  /**\\n    @notice Decreases the amount of a set of tokens invested in a strategy\\n    @param id  the strategy to withdraw assets from\\n    @param tokens  details of the tokens being deposited\\n    @param user  the user making the withdrawal\\n     */\\n  function exitStrategy(\\n    uint256 id,\\n    address user,\\n    TokenMovement[] calldata tokens\\n  ) external;\\n\\n  /**\\n    @notice Getter function to return the nested arrays as well as the name\\n    @param id  the strategy to return\\n     */\\n  function getStrategy(uint256 id)\\n    external\\n    view\\n    returns (StrategySummary memory);\\n\\n  /**\\n    @notice Decreases the deployable amount after a deployment/withdrawal\\n    @param integration  the integration that was changed\\n    @param poolID  the pool within the integration that handled the tokens\\n    @param token  the token to decrease for\\n    @param amount  the amount to reduce the vector by\\n     */\\n  function decreaseDeployAmountChange(\\n    address integration,\\n    uint32 poolID,\\n    address token,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n    @notice Returns the amount of a given token currently invested in a strategy\\n    @param id  the strategy id to check\\n    @param token  The token to retrieve the balance for\\n    @return amount  the amount of token that is invested in the strategy\\n     */\\n  function getStrategyTokenBalance(uint256 id, address token)\\n    external\\n    view\\n    returns (uint256 amount);\\n\\n  /**\\n    @notice returns the amount of a given token a user has invested in a given strategy\\n    @param id  the strategy id\\n    @param token  the token address\\n    @param user  the user who holds the funds\\n    @return amount  the amount of token that the user has invested in the strategy \\n     */\\n  function getUserStrategyBalanceByToken(\\n    uint256 id,\\n    address token,\\n    address user\\n  ) external view returns (uint256 amount);\\n\\n  /**\\n    @notice Returns the amount of a given token that a user has invested across all strategies\\n    @param token  the token address\\n    @param user  the user holding the funds\\n    @return amount  the amount of tokens the user has invested across all strategies\\n     */\\n  function getUserInvestedAmountByToken(address token, address user)\\n    external\\n    view\\n    returns (uint256 amount);\\n\\n  /**\\n    @notice Returns the total amount of a token invested across all strategies\\n    @param token  the token to fetch the balance for\\n    @return amount  the amount of the token currently invested\\n    */\\n  function getTokenTotalBalance(address token)\\n    external\\n    view\\n    returns (uint256 amount);\\n\\n  /**\\n    @notice Returns the current amount awaiting deployment\\n    @param integration  the integration to deploy to\\n    @param poolID  the pool within the integration that should receive the tokens\\n    @param token  the token to be deployed\\n    @return the pending deploy amount\\n     */\\n  function getDeployAmount(\\n    address integration,\\n    uint32 poolID,\\n    address token\\n  ) external view returns (int256);\\n\\n  /**\\n    @notice Returns a list of pool IDs for a given integration and token\\n    @param integration  the integration that contains the pool\\n    @param token  the token the pool takes\\n    @return an array of pool ids\\n     */\\n  function getPools(address integration, address token)\\n    external\\n    view\\n    returns (uint32[] memory);\\n\\n  /**\\n    @notice Returns the amount a user has requested for withdrawal\\n    @dev To be used when withdrawing funds to a user's wallet in UserPositions contract\\n    @param user  the user requesting withdrawal\\n    @param token  the token the user is withdrawing\\n    @return the amount the user is requesting\\n     */\\n  function getUserWithdrawalVector(\\n    address user,\\n    address token,\\n    address integration,\\n    uint32 poolID\\n  ) external view returns (uint256);\\n\\n  /**\\n    @notice Updates a user's withdrawal vector\\n    @dev This will decrease the user's withdrawal amount by the requested amount or 0 if the withdrawal amount is < amount. \\n    @param user  the user who has withdrawn funds\\n    @param token  the token the user withdrew\\n    @param amount  the amount the user withdrew\\n     */\\n  function updateUserWithdrawalVector(\\n    address user,\\n    address token,\\n    address integration,\\n    uint32 poolID,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n    @notice Returns a user's balances for requested strategies, and the users total invested amounts for each token requested\\n    @param user  the user to request for\\n    @param _strategies  the strategies to get balances for\\n    @param _tokens  the tokens to get balances for\\n    @return userStrategyBalances  The user's invested funds in the strategies\\n    @return userBalance  User total token balances\\n     */\\n  function getUserBalances(\\n    address user,\\n    uint256[] calldata _strategies,\\n    address[] calldata _tokens\\n  )\\n    external\\n    view\\n    returns (\\n      StrategyBalance[] memory userStrategyBalances,\\n      GeneralBalance[] memory userBalance\\n    );\\n\\n  /**\\n    @notice Returns balances per strategy, and total invested balances\\n    @param _strategies  The strategies to retrieve balances for\\n    @param _tokens  The tokens to retrieve\\n     */\\n  function getStrategyBalances(\\n    uint256[] calldata _strategies,\\n    address[] calldata _tokens\\n  )\\n    external\\n    view\\n    returns (\\n      StrategyBalance[] memory strategyBalances,\\n      GeneralBalance[] memory generalBalances\\n    );\\n\\n  /**\\n  @notice Returns 1 or more strategies in a single call.\\n  @param ids  The ids of the strategies to return.\\n   */\\n  function getMultipleStrategies(uint256[] calldata ids)\\n    external\\n    view\\n    returns (StrategySummary[] memory);\\n\\n  /// @notice autogenerated getter definition\\n  function idCounter() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUserPositions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\nimport \\\"./IStrategyMap.sol\\\";\\n\\ninterface IUserPositions {\\n    // ##### Structs\\n\\n    // Virtual balance == total balance - realBalance\\n    struct TokenBalance {\\n        uint256 totalBalance;\\n        uint256 realBalance;\\n    }\\n\\n    // ##### Functions\\n\\n    /// @param biosRewardsDuration_ The duration in seconds for a BIOS rewards period to last\\n    function setBiosRewardsDuration(uint32 biosRewardsDuration_) external;\\n\\n    /// @param sender The account seeding BIOS rewards\\n    /// @param biosAmount The amount of BIOS to add to rewards\\n    function seedBiosRewards(address sender, uint256 biosAmount) external;\\n\\n    /// @notice Sends all BIOS available in the Kernel to each token BIOS rewards pool based up configured weights\\n    function increaseBiosRewards() external;\\n\\n    /// @notice User is allowed to deposit whitelisted tokens\\n    /// @param depositor Address of the account depositing\\n    /// @param tokens Array of token the token addresses\\n    /// @param amounts Array of token amounts\\n    /// @param ethAmount The amount of ETH sent with the deposit\\n    function deposit(\\n        address depositor,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256 ethAmount\\n    ) external;\\n\\n    /// @notice User is allowed to withdraw tokens\\n    /// @param recipient The address of the user withdrawing\\n    /// @param tokens Array of token the token addresses\\n    /// @param amounts Array of token amounts\\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n    function withdraw(\\n        address recipient,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        bool withdrawWethAsEth\\n    ) external returns (uint256 ethWithdrawn);\\n\\n    /// @notice Allows a user to withdraw entire balances of the specified tokens and claim rewards\\n    /// @param recipient The address of the user withdrawing tokens\\n    /// @param tokens Array of token address that user is exiting positions from\\n    /// @param withdrawWethAsEth Boolean indicating whether should receive WETH balance as ETH\\n    /// @return tokenAmounts The amounts of each token being withdrawn\\n    /// @return ethWithdrawn The amount of ETH being withdrawn\\n    /// @return ethClaimed The amount of ETH being claimed from rewards\\n    /// @return biosClaimed The amount of BIOS being claimed from rewards\\n    function withdrawAllAndClaim(\\n        address recipient,\\n        address[] memory tokens,\\n        bool withdrawWethAsEth\\n    )\\n        external\\n        returns (\\n            uint256[] memory tokenAmounts,\\n            uint256 ethWithdrawn,\\n            uint256 ethClaimed,\\n            uint256 biosClaimed\\n        );\\n\\n    /// @param user The address of the user claiming ETH rewards\\n    function claimEthRewards(address user)\\n        external\\n        returns (uint256 ethClaimed);\\n\\n    /// @notice Allows users to claim their BIOS rewards for each token\\n    /// @param recipient The address of the usuer claiming BIOS rewards\\n    function claimBiosRewards(address recipient)\\n        external\\n        returns (uint256 biosClaimed);\\n\\n    /// @param asset Address of the ERC20 token contract\\n    /// @return The total balance of the asset deposited in the system\\n    function totalTokenBalance(address asset) external view returns (uint256);\\n\\n    /// @param asset Address of the ERC20 token contract\\n    /// @param account Address of the user account\\n    function userTokenBalance(address asset, address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return The Bios Rewards Duration\\n    function getBiosRewardsDuration() external view returns (uint32);\\n\\n    /// @notice Transfers tokens to the StrategyMap\\n    /// @dev This is a ledger adjustment. The tokens remain in the kernel.\\n    /// @param recipient  The user to transfer funds for\\n    /// @param tokens  the tokens and amounts to be moved\\n    function transferToStrategy(\\n        address recipient,\\n        IStrategyMap.TokenMovement[] calldata tokens\\n    ) external;\\n\\n    /// @notice Transfers tokens from the StrategyMap\\n    /// @dev This is a ledger adjustment. The tokens remain in the kernel.\\n    /// @param recipient  The user to transfer funds for\\n    /// @param tokens  the tokens and amounts to be moved\\n    function transferFromStrategy(\\n        address recipient,\\n        IStrategyMap.TokenMovement[] calldata tokens\\n    ) external;\\n\\n    /**\\n    @notice Returns the amount of tokens a user is owed, but that haven't yet been withdrawn from the integrations\\n    @param user  The user to retrieve the balance for\\n    @param token  The token to retrieve the balance for\\n     */\\n    function getUserVirtualBalance(address user, address token)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IYieldManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.4;\\n\\ninterface IYieldManager {\\n    // #### Structs\\n\\n    struct DeployRequest {\\n        address integration;\\n        address[] tokens; // If ammPoolID > 0, this should contain exactly two addresses\\n        uint32 ammPoolID; // The pool to deposit into. This is 0 for non-AMM integrations\\n    }\\n\\n    // #### Functions\\n    /// @param gasAccountTargetEthBalance_ The target ETH balance of the gas account\\n    function updateGasAccountTargetEthBalance(\\n        uint256 gasAccountTargetEthBalance_\\n    ) external;\\n\\n    /// @param biosBuyBackEthWeight_ The relative weight of ETH to send to BIOS buy back\\n    /// @param treasuryEthWeight_ The relative weight of ETH to send to the treasury\\n    /// @param protocolFeeEthWeight_ The relative weight of ETH to send to protocol fee accrual\\n    /// @param rewardsEthWeight_ The relative weight of ETH to send to user rewards\\n    function updateEthDistributionWeights(\\n        uint32 biosBuyBackEthWeight_,\\n        uint32 treasuryEthWeight_,\\n        uint32 protocolFeeEthWeight_,\\n        uint32 rewardsEthWeight_\\n    ) external;\\n\\n    /// @param gasAccount_ The address of the account to send ETH to gas for executing bulk system functions\\n    function updateGasAccount(address payable gasAccount_) external;\\n\\n    /// @param treasuryAccount_ The address of the system treasury account\\n    function updateTreasuryAccount(address payable treasuryAccount_) external;\\n\\n    /// @notice Deploys all tokens to all integrations according to configured weights\\n    function deploy(DeployRequest[] calldata deployments) external;\\n\\n    /// @notice Harvests available yield from all tokens and integrations\\n    function harvestYield() external;\\n\\n    /// @notice Swaps harvested yield for all tokens for ETH\\n    function processYield() external;\\n\\n    /// @notice Distributes ETH to the gas account, BIOS buy back, treasury, protocol fee accrual, and user rewards\\n    function distributeEth() external;\\n\\n    /// @notice Uses WETH to buy back BIOS which is sent to the Kernel\\n    function biosBuyBack() external;\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return harvestedTokenBalance The amount of the token yield harvested held in the Kernel\\n    function getHarvestedTokenBalance(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The amount of the token held in the Kernel as reserves\\n    function getReserveTokenBalance(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The desired amount of the token to hold in the Kernel as reserves\\n    function getDesiredReserveTokenBalance(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return ethWeightSum The sum of ETH distribution weights\\n    function getEthWeightSum() external view returns (uint32 ethWeightSum);\\n\\n    /// @return processedWethSum The sum of yields processed into WETH\\n    function getProcessedWethSum()\\n        external\\n        view\\n        returns (uint256 processedWethSum);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return The amount of WETH received from token yield processing\\n    function getProcessedWethByToken(address tokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @return processedWethByTokenSum The sum of processed WETH\\n    function getProcessedWethByTokenSum()\\n        external\\n        view\\n        returns (uint256 processedWethByTokenSum);\\n\\n    /// @param tokenAddress The address of the token ERC20 contract\\n    /// @return tokenTotalIntegrationBalance The total amount of the token that can be withdrawn from integrations\\n    function getTokenTotalIntegrationBalance(address tokenAddress)\\n        external\\n        view\\n        returns (uint256 tokenTotalIntegrationBalance);\\n\\n    /// @return The address of the gas account\\n    function getGasAccount() external view returns (address);\\n\\n    /// @return The address of the treasury account\\n    function getTreasuryAccount() external view returns (address);\\n\\n    /// @return The last amount of ETH distributed to rewards\\n    function getLastEthRewardsAmount() external view returns (uint256);\\n\\n    /// @return The target ETH balance of the gas account\\n    function getGasAccountTargetEthBalance() external view returns (uint256);\\n\\n    /// @return The BIOS buyback ETH weight\\n    /// @return The Treasury ETH weight\\n    /// @return The Protocol fee ETH weight\\n    /// @return The rewards ETH weight\\n    function getEthDistributionWeights()\\n        external\\n        view\\n        returns (\\n            uint32,\\n            uint32,\\n            uint32,\\n            uint32\\n        );\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"DeleteStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IStrategyMap.TokenMovement[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"EnterStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IStrategyMap.TokenMovement[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"ExitStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ammPoolID\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IStrategyMap.Integration[]\",\"name\":\"integrations\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"integrationPairIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IStrategyMap.Token[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NewStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"UpdateName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ammPoolID\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IStrategyMap.Integration[]\",\"name\":\"integrations\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"integrationPairIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IStrategyMap.Token[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"UpdateStrategy\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN_WEIGHT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"}],\"name\":\"__Controlled_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ammPoolID\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Integration[]\",\"name\":\"integrations\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"integrationPairIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Token[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseDeployAmountChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"deleteStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IStrategyMap.TokenMovement[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"enterStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IStrategyMap.TokenMovement[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"exitStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllStrategyRecords\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IStrategyMap.StrategyRecord[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDeployAmount\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getMultipleStrategies\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ammPoolID\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Integration[]\",\"name\":\"integrations\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"integrationPairIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Token[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IStrategyMap.StrategySummary[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getStrategy\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ammPoolID\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Integration[]\",\"name\":\"integrations\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"integrationPairIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Token[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IStrategyMap.StrategySummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_strategies\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getStrategyBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"strategyID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IStrategyMap.GeneralBalance[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IStrategyMap.StrategyBalance[]\",\"name\":\"strategyBalances\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IStrategyMap.GeneralBalance[]\",\"name\":\"generalBalances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getStrategyTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_strategies\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getUserBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"strategyID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IStrategyMap.GeneralBalance[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IStrategyMap.StrategyBalance[]\",\"name\":\"strategyBalance\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IStrategyMap.GeneralBalance[]\",\"name\":\"userBalance\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserInvestedAmountByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStrategyBalanceByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"}],\"name\":\"getUserWithdrawalVector\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllers_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moduleMap_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleMap\",\"outputs\":[{\"internalType\":\"contract IModuleMap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"updateName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ammPoolID\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Integration[]\",\"name\":\"integrations\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"integrationPairIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"internalType\":\"struct IStrategyMap.Token[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"updateStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateUserWithdrawalVector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StrategyMap","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":""}]}