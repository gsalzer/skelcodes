{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Users/kdmcg/Documents/Grumpy_Pawth_Swap/src/contracts/GrumpyPawthSwap.sol\": {\r\n      \"content\": \"/**\\r\\n *Submitted for verification at Etherscan.io on 2021-09-11\\r\\n */\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256('')`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            codehash := extcodehash(account)\\r\\n        }\\r\\n        return (codehash != accountHash && codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data)\\r\\n        internal\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 weiValue,\\r\\n        string memory errorMessage\\r\\n    ) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\\r\\n            data\\r\\n        );\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    function sync() external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n}\\r\\n\\r\\ncontract Grumpy is Context, IERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    mapping(address => uint256) private _rOwned;\\r\\n    mapping(address => uint256) private _tOwned;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    mapping(address => bool) private _isExcluded;\\r\\n    address[] private _excluded;\\r\\n\\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n    uint256 private constant _tTotal = 100000000 * 10**6 * 10**9;\\r\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\r\\n    uint256 private _tFeeTotal;\\r\\n\\r\\n    string private _name = \\\"Grumpy Cat\\\";\\r\\n    string private _symbol = \\\"GRUMPY\\\";\\r\\n    uint8 private _decimals = 9;\\r\\n\\r\\n    constructor() public {\\r\\n        _rOwned[_msgSender()] = _rTotal;\\r\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        if (_isExcluded[account]) return _tOwned[account];\\r\\n        return tokenFromReflection(_rOwned[account]);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(\\r\\n            sender,\\r\\n            _msgSender(),\\r\\n            _allowances[sender][_msgSender()].sub(\\r\\n                amount,\\r\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].add(addedValue)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].sub(\\r\\n                subtractedValue,\\r\\n                \\\"ERC20: decreased allowance below zero\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function isExcluded(address account) public view returns (bool) {\\r\\n        return _isExcluded[account];\\r\\n    }\\r\\n\\r\\n    function totalFees() public view returns (uint256) {\\r\\n        return _tFeeTotal;\\r\\n    }\\r\\n\\r\\n    function reflect(uint256 tAmount) public {\\r\\n        address sender = _msgSender();\\r\\n        require(\\r\\n            !_isExcluded[sender],\\r\\n            \\\"Excluded addresses cannot call this function\\\"\\r\\n        );\\r\\n        (uint256 rAmount, , , , ) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rTotal = _rTotal.sub(rAmount);\\r\\n        _tFeeTotal = _tFeeTotal.add(tAmount);\\r\\n    }\\r\\n\\r\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\r\\n        if (!deductTransferFee) {\\r\\n            (uint256 rAmount, , , , ) = _getValues(tAmount);\\r\\n            return rAmount;\\r\\n        } else {\\r\\n            (, uint256 rTransferAmount, , , ) = _getValues(tAmount);\\r\\n            return rTransferAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(uint256 rAmount)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            rAmount <= _rTotal,\\r\\n            \\\"Amount must be less than total reflections\\\"\\r\\n        );\\r\\n        uint256 currentRate = _getRate();\\r\\n        return rAmount.div(currentRate);\\r\\n    }\\r\\n\\r\\n    function excludeAccount(address account) external onlyOwner {\\r\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n        if (_rOwned[account] > 0) {\\r\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\r\\n        }\\r\\n        _isExcluded[account] = true;\\r\\n        _excluded.push(account);\\r\\n    }\\r\\n\\r\\n    function includeAccount(address account) external onlyOwner {\\r\\n        require(_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (_excluded[i] == account) {\\r\\n                _excluded[i] = _excluded[_excluded.length - 1];\\r\\n                _tOwned[account] = 0;\\r\\n                _isExcluded[account] = false;\\r\\n                _excluded.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\\r\\n            _transferFromExcluded(sender, recipient, amount);\\r\\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\r\\n            _transferToExcluded(sender, recipient, amount);\\r\\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\\r\\n            _transferStandard(sender, recipient, amount);\\r\\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\r\\n            _transferBothExcluded(sender, recipient, amount);\\r\\n        } else {\\r\\n            _transferStandard(sender, recipient, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transferStandard(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee\\r\\n        ) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferToExcluded(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee\\r\\n        ) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferFromExcluded(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee\\r\\n        ) = _getValues(tAmount);\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferBothExcluded(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee\\r\\n        ) = _getValues(tAmount);\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\r\\n        _rTotal = _rTotal.sub(rFee);\\r\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\r\\n    }\\r\\n\\r\\n    function _getValues(uint256 tAmount)\\r\\n        private\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);\\r\\n        uint256 currentRate = _getRate();\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\r\\n            tAmount,\\r\\n            tFee,\\r\\n            currentRate\\r\\n        );\\r\\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);\\r\\n    }\\r\\n\\r\\n    function _getTValues(uint256 tAmount)\\r\\n        private\\r\\n        pure\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        uint256 tFee = tAmount.div(100);\\r\\n        uint256 tTransferAmount = tAmount.sub(tFee);\\r\\n        return (tTransferAmount, tFee);\\r\\n    }\\r\\n\\r\\n    function _getRValues(\\r\\n        uint256 tAmount,\\r\\n        uint256 tFee,\\r\\n        uint256 currentRate\\r\\n    )\\r\\n        private\\r\\n        pure\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 rAmount = tAmount.mul(currentRate);\\r\\n        uint256 rFee = tFee.mul(currentRate);\\r\\n        uint256 rTransferAmount = rAmount.sub(rFee);\\r\\n        return (rAmount, rTransferAmount, rFee);\\r\\n    }\\r\\n\\r\\n    function _getRate() private view returns (uint256) {\\r\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n        return rSupply.div(tSupply);\\r\\n    }\\r\\n\\r\\n    function _getCurrentSupply() private view returns (uint256, uint256) {\\r\\n        uint256 rSupply = _rTotal;\\r\\n        uint256 tSupply = _tTotal;\\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (\\r\\n                _rOwned[_excluded[i]] > rSupply ||\\r\\n                _tOwned[_excluded[i]] > tSupply\\r\\n            ) return (_rTotal, _tTotal);\\r\\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\r\\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\r\\n        }\\r\\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\r\\n        return (rSupply, tSupply);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Pawthereum is Context, IERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    //change \\\"name1\\\" and \\\"symbol\\\"\\r\\n    string private _name = \\\"Pawthereum\\\";\\r\\n    string private _symbol = \\\"PAWTH\\\";\\r\\n\\r\\n    uint8 private _decimals = 9;\\r\\n\\r\\n    mapping(address => uint256) internal _reflectionBalance;\\r\\n    mapping(address => uint256) internal _tokenBalance;\\r\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\r\\n\\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n\\r\\n    // change this for total supply (100e8 = 100) (100000000e8 = 100000000) (dont forget the e8 it has to be there)\\r\\n    uint256 internal _tokenTotal = 1000000000e9;\\r\\n    // change this for total supply ^^^^^^^^^^^^^^^^^^^^^\\r\\n    uint256 internal _reflectionTotal = (MAX - (MAX % _tokenTotal));\\r\\n\\r\\n    mapping(address => bool) isTaxless;\\r\\n    mapping(address => bool) internal _isExcluded;\\r\\n    address[] internal _excluded;\\r\\n\\r\\n    uint256 public _feeDecimal = 2;\\r\\n    // thats the distribution to holders (400 = 4%)\\r\\n    uint256 public _taxFee = 200;\\r\\n    // thats the amount for liquidity pool\\r\\n    uint256 public _liquidityFee = 100;\\r\\n    // this amount gets burned by every transaction\\r\\n    uint256 public _burnFee = 0;\\r\\n    // this goes to the marketing wallet (line 403)\\r\\n    uint256 public _marketingFee = 100;\\r\\n    // this goes to the charity wallet\\r\\n    uint256 public _charityFee = 200;\\r\\n\\r\\n    uint256 public _taxFeeTotal;\\r\\n    uint256 public _burnFeeTotal;\\r\\n    uint256 public _liquidityFeeTotal;\\r\\n    uint256 public _marketingFeeTotal;\\r\\n    uint256 public _charityFeeTotal;\\r\\n\\r\\n    address public marketingWallet;\\r\\n    address public charityWallet;\\r\\n\\r\\n    bool public isTaxActive = true;\\r\\n    bool private inSwapAndLiquify;\\r\\n    bool public swapAndLiquifyEnabled = true;\\r\\n\\r\\n    uint256 public maxTxAmount = _tokenTotal;\\r\\n    uint256 public minTokensBeforeSwap = 10_000e9;\\r\\n\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n    address public uniswapV2Pair;\\r\\n\\r\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived,\\r\\n        uint256 tokensIntoLiqudity\\r\\n    );\\r\\n\\r\\n    modifier lockTheSwap() {\\r\\n        inSwapAndLiquify = true;\\r\\n        _;\\r\\n        inSwapAndLiquify = false;\\r\\n    }\\r\\n\\r\\n    constructor() public {\\r\\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); // for BSC\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\r\\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\r\\n        ); // for Ethereum\\r\\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506); // for Sushi testnet\\r\\n\\r\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\r\\n            .createPair(address(this), _uniswapV2Router.WETH());\\r\\n\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        //paste the wallet adress, that earns the marketingFee here\\r\\n        marketingWallet = 0x971dB08176bba44e7D5D0733D9f1127684033E47;\\r\\n        //paste the wallet address that earns the charityFee here\\r\\n        charityWallet = 0xaf284EfD8C649522120a05bfeeB36F2b6e7c970C;\\r\\n        //paste the wallet ^^^^^^^^^^^^^^^^^^^^^ adress, that earns the marketingFee here\\r\\n\\r\\n        isTaxless[_msgSender()] = true;\\r\\n        isTaxless[address(this)] = true;\\r\\n\\r\\n        _reflectionBalance[_msgSender()] = _reflectionTotal;\\r\\n        emit Transfer(address(0), _msgSender(), _tokenTotal);\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tokenTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        if (_isExcluded[account]) return _tokenBalance[account];\\r\\n        return tokenFromReflection(_reflectionBalance[account]);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        _approve(\\r\\n            sender,\\r\\n            _msgSender(),\\r\\n            _allowances[sender][_msgSender()].sub(\\r\\n                amount,\\r\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].add(addedValue)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].sub(\\r\\n                subtractedValue,\\r\\n                \\\"ERC20: decreased allowance below zero\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function isExcluded(address account) public view returns (bool) {\\r\\n        return _isExcluded[account];\\r\\n    }\\r\\n\\r\\n    function reflectionFromToken(uint256 tokenAmount, bool deductTransferFee)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(tokenAmount <= _tokenTotal, \\\"Amount must be less than supply\\\");\\r\\n        if (!deductTransferFee) {\\r\\n            return tokenAmount.mul(_getReflectionRate());\\r\\n        } else {\\r\\n            return\\r\\n                tokenAmount\\r\\n                    .sub(tokenAmount.mul(_taxFee).div(10**_feeDecimal + 2))\\r\\n                    .mul(_getReflectionRate());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(uint256 reflectionAmount)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            reflectionAmount <= _reflectionTotal,\\r\\n            \\\"Amount must be less than total reflections\\\"\\r\\n        );\\r\\n        uint256 currentRate = _getReflectionRate();\\r\\n        return reflectionAmount.div(currentRate);\\r\\n    }\\r\\n\\r\\n    function excludeAccount(address account) external onlyOwner {\\r\\n        require(\\r\\n            account != address(uniswapV2Router),\\r\\n            \\\"ERC20: We can not exclude Uniswap router.\\\"\\r\\n        );\\r\\n        require(!_isExcluded[account], \\\"ERC20: Account is already excluded\\\");\\r\\n        if (_reflectionBalance[account] > 0) {\\r\\n            _tokenBalance[account] = tokenFromReflection(\\r\\n                _reflectionBalance[account]\\r\\n            );\\r\\n        }\\r\\n        _isExcluded[account] = true;\\r\\n        _excluded.push(account);\\r\\n    }\\r\\n\\r\\n    function includeAccount(address account) external onlyOwner {\\r\\n        require(_isExcluded[account], \\\"ERC20: Account is already included\\\");\\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (_excluded[i] == account) {\\r\\n                _excluded[i] = _excluded[_excluded.length - 1];\\r\\n                _tokenBalance[account] = 0;\\r\\n                _isExcluded[account] = false;\\r\\n                _excluded.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n\\r\\n        require(amount <= maxTxAmount, \\\"Transfer Limit exceeded!\\\");\\r\\n\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n        bool overMinTokenBalance = contractTokenBalance >= minTokensBeforeSwap;\\r\\n        if (\\r\\n            !inSwapAndLiquify &&\\r\\n            overMinTokenBalance &&\\r\\n            sender != uniswapV2Pair &&\\r\\n            swapAndLiquifyEnabled\\r\\n        ) {\\r\\n            swapAndLiquify(contractTokenBalance);\\r\\n        }\\r\\n\\r\\n        uint256 transferAmount = amount;\\r\\n        uint256 rate = _getReflectionRate();\\r\\n\\r\\n        if (\\r\\n            isTaxActive &&\\r\\n            !isTaxless[_msgSender()] &&\\r\\n            !isTaxless[recipient] &&\\r\\n            !inSwapAndLiquify\\r\\n        ) {\\r\\n            transferAmount = collectFee(sender, amount, rate);\\r\\n        }\\r\\n\\r\\n        _reflectionBalance[sender] = _reflectionBalance[sender].sub(\\r\\n            amount.mul(rate)\\r\\n        );\\r\\n        _reflectionBalance[recipient] = _reflectionBalance[recipient].add(\\r\\n            transferAmount.mul(rate)\\r\\n        );\\r\\n\\r\\n        if (_isExcluded[sender]) {\\r\\n            _tokenBalance[sender] = _tokenBalance[sender].sub(amount);\\r\\n        }\\r\\n        if (_isExcluded[recipient]) {\\r\\n            _tokenBalance[recipient] = _tokenBalance[recipient].add(\\r\\n                transferAmount\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit Transfer(sender, recipient, transferAmount);\\r\\n    }\\r\\n\\r\\n    function collectFee(\\r\\n        address account,\\r\\n        uint256 amount,\\r\\n        uint256 rate\\r\\n    ) private returns (uint256) {\\r\\n        uint256 transferAmount = amount;\\r\\n\\r\\n        //@dev tax fee\\r\\n        if (_taxFee != 0) {\\r\\n            uint256 taxFee = amount.mul(_taxFee).div(10**(_feeDecimal + 2));\\r\\n            transferAmount = transferAmount.sub(taxFee);\\r\\n            _reflectionTotal = _reflectionTotal.sub(taxFee.mul(rate));\\r\\n            _taxFeeTotal = _taxFeeTotal.add(taxFee);\\r\\n        }\\r\\n\\r\\n        //@dev liquidity fee\\r\\n        if (_liquidityFee != 0) {\\r\\n            uint256 liquidityFee = amount.mul(_liquidityFee).div(\\r\\n                10**(_feeDecimal + 2)\\r\\n            );\\r\\n            transferAmount = transferAmount.sub(liquidityFee);\\r\\n            _reflectionBalance[address(this)] = _reflectionBalance[\\r\\n                address(this)\\r\\n            ].add(liquidityFee.mul(rate));\\r\\n            if (_isExcluded[address(this)]) {\\r\\n                _tokenBalance[address(this)] = _tokenBalance[address(this)].add(\\r\\n                    liquidityFee\\r\\n                );\\r\\n            }\\r\\n            _liquidityFeeTotal = _liquidityFeeTotal.add(liquidityFee);\\r\\n            emit Transfer(account, address(this), liquidityFee);\\r\\n        }\\r\\n\\r\\n        //@dev burn fee\\r\\n        if (_burnFee != 0) {\\r\\n            uint256 burnFee = amount.mul(_burnFee).div(10**(_feeDecimal + 2));\\r\\n            transferAmount = transferAmount.sub(burnFee);\\r\\n            _tokenTotal = _tokenTotal.sub(burnFee);\\r\\n            _reflectionTotal = _reflectionTotal.sub(burnFee.mul(rate));\\r\\n            _burnFeeTotal = _burnFeeTotal.add(burnFee);\\r\\n            emit Transfer(account, address(0), burnFee);\\r\\n        }\\r\\n\\r\\n        //@dev Marketing fee\\r\\n        if (_marketingFee != 0) {\\r\\n            uint256 marketingFee = amount.mul(_marketingFee).div(\\r\\n                10**(_feeDecimal + 2)\\r\\n            );\\r\\n            transferAmount = transferAmount.sub(marketingFee);\\r\\n            _reflectionBalance[marketingWallet] = _reflectionBalance[\\r\\n                marketingWallet\\r\\n            ].add(marketingFee.mul(rate));\\r\\n            if (_isExcluded[marketingWallet]) {\\r\\n                _tokenBalance[marketingWallet] = _tokenBalance[marketingWallet]\\r\\n                    .add(marketingFee);\\r\\n            }\\r\\n            _marketingFeeTotal = _marketingFeeTotal.add(marketingFee);\\r\\n            emit Transfer(account, marketingWallet, marketingFee);\\r\\n        }\\r\\n\\r\\n        //@dev Charity fee\\r\\n        if (_charityFee != 0) {\\r\\n            uint256 charityFee = amount.mul(_charityFee).div(\\r\\n                10**(_feeDecimal + 2)\\r\\n            );\\r\\n            transferAmount = transferAmount.sub(charityFee);\\r\\n            _reflectionBalance[charityWallet] = _reflectionBalance[\\r\\n                charityWallet\\r\\n            ].add(charityFee.mul(rate));\\r\\n            if (_isExcluded[charityWallet]) {\\r\\n                _tokenBalance[charityWallet] = _tokenBalance[charityWallet].add(\\r\\n                    charityFee\\r\\n                );\\r\\n            }\\r\\n            _charityFeeTotal = _charityFeeTotal.add(charityFee);\\r\\n            emit Transfer(account, charityWallet, charityFee);\\r\\n        }\\r\\n\\r\\n        return transferAmount;\\r\\n    }\\r\\n\\r\\n    function _getReflectionRate() private view returns (uint256) {\\r\\n        uint256 reflectionSupply = _reflectionTotal;\\r\\n        uint256 tokenSupply = _tokenTotal;\\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (\\r\\n                _reflectionBalance[_excluded[i]] > reflectionSupply ||\\r\\n                _tokenBalance[_excluded[i]] > tokenSupply\\r\\n            ) return _reflectionTotal.div(_tokenTotal);\\r\\n            reflectionSupply = reflectionSupply.sub(\\r\\n                _reflectionBalance[_excluded[i]]\\r\\n            );\\r\\n            tokenSupply = tokenSupply.sub(_tokenBalance[_excluded[i]]);\\r\\n        }\\r\\n        if (reflectionSupply < _reflectionTotal.div(_tokenTotal))\\r\\n            return _reflectionTotal.div(_tokenTotal);\\r\\n        return reflectionSupply.div(tokenSupply);\\r\\n    }\\r\\n\\r\\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\\r\\n        if (contractTokenBalance > maxTxAmount)\\r\\n            contractTokenBalance = maxTxAmount;\\r\\n        uint256 half = contractTokenBalance.div(2);\\r\\n        uint256 otherHalf = contractTokenBalance.sub(half);\\r\\n\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n\\r\\n        swapTokensForEth(half);\\r\\n\\r\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\r\\n\\r\\n        addLiquidity(otherHalf, newBalance);\\r\\n\\r\\n        emit SwapAndLiquify(half, newBalance, otherHalf);\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            0,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setPair(address pair) external onlyOwner {\\r\\n        uniswapV2Pair = pair;\\r\\n    }\\r\\n\\r\\n    function setMarketingWallet(address account) external onlyOwner {\\r\\n        marketingWallet = account;\\r\\n    }\\r\\n\\r\\n    function setCharityWallet(address account) external onlyOwner {\\r\\n        charityWallet = account;\\r\\n    }\\r\\n\\r\\n    function setTaxless(address account, bool value) external onlyOwner {\\r\\n        isTaxless[account] = value;\\r\\n    }\\r\\n\\r\\n    function setSwapAndLiquifyEnabled(bool enabled) external onlyOwner {\\r\\n        swapAndLiquifyEnabled = enabled;\\r\\n        SwapAndLiquifyEnabledUpdated(enabled);\\r\\n    }\\r\\n\\r\\n    function setTaxActive(bool value) external onlyOwner {\\r\\n        isTaxActive = value;\\r\\n    }\\r\\n\\r\\n    function setTaxFee(uint256 fee) external onlyOwner {\\r\\n        require(fee <= 200, \\\"You can't set reflections fee above 2 percent.\\\");\\r\\n        _taxFee = fee;\\r\\n    }\\r\\n\\r\\n    function setBurnFee(uint256 fee) external onlyOwner {\\r\\n        require(fee <= 200, \\\"You can't set burn fees above 2 percent.\\\");\\r\\n        _burnFee = fee;\\r\\n    }\\r\\n\\r\\n    function setLiquidityFee(uint256 fee) external onlyOwner {\\r\\n        require(fee <= 200, \\\"You can't set this fee above 2 percent.\\\");\\r\\n        _liquidityFee = fee;\\r\\n    }\\r\\n\\r\\n    function setMarketingFee(uint256 fee) external onlyOwner {\\r\\n        require(fee <= 200, \\\"You can't set the marketing fee above 2 percent.\\\");\\r\\n        _marketingFee = fee;\\r\\n    }\\r\\n\\r\\n    function setCharityFee(uint256 fee) external onlyOwner {\\r\\n        require(fee <= 200, \\\"You can't set the charity fee above 2 percent.\\\");\\r\\n        _charityFee = fee;\\r\\n    }\\r\\n\\r\\n    function setMaxTxAmount(uint256 amount) external onlyOwner {\\r\\n        maxTxAmount = amount;\\r\\n    }\\r\\n\\r\\n    function setMinTokensBeforeSwap(uint256 amount) external onlyOwner {\\r\\n        minTokensBeforeSwap = amount;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\\r\\ncontract GrumpyPawthSwap {\\r\\n    string public name = \\\"Grumpy Pawth Swap\\\";\\r\\n    Grumpy public grumpy;\\r\\n    Pawthereum public pawth;\\r\\n    uint256 public rate = 100000;\\r\\n    address owner1 = 0x9E84fe006Aa1c290F4CbCD78bE32131cBf52CB23;\\r\\n    address owner2 = 0x5ceAc6B3d26E0957C8A809E31d596C16e5780d96;\\r\\n    address owner3 = 0x8EA6cC82148D92F979D34031Bdba60CCD35b0f9e;\\r\\n    address owner4 = 0xEc0359Dc2DF0a3deec0e19DA22fa1071C748BA8F;\\r\\n    address owner5 = 0x06b0A2C6beeA3fd215D47324DD49E1ee3a4a9F25;\\r\\n    address owner6 = 0xcD8fBD45e94c25a81ade464f106DEA578ca5fEf6;\\r\\n    address devWallet = 0x6DFcd4331b0d86bfe0318706C76B832dA4C03C1B;\\r\\n\\r\\n    bool public canSwap = true;\\r\\n\\r\\n    event PawthSwappedForGrumpy(\\r\\n        address account,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint256 rate\\r\\n    );\\r\\n\\r\\n    event GrumpySwappedForPawth(\\r\\n        address account,\\r\\n        address grumpy,\\r\\n        uint256 amount,\\r\\n        uint256 rate\\r\\n    );\\r\\n\\r\\n    constructor(Grumpy _grumpy, Pawthereum _pawth) public {\\r\\n        grumpy = _grumpy;\\r\\n        pawth = _pawth;\\r\\n    }\\r\\n\\r\\n    function toggleSwapStatus(bool _toggle) public {\\r\\n        require(\\r\\n            msg.sender == owner1 ||\\r\\n                msg.sender == owner2 ||\\r\\n                msg.sender == owner3 ||\\r\\n                msg.sender == owner4 ||\\r\\n                msg.sender == owner5 ||\\r\\n                msg.sender == owner6,\\r\\n            \\\"User not permitted to call this function\\\"\\r\\n        );\\r\\n        canSwap = _toggle;\\r\\n    }\\r\\n\\r\\n    function swapPawthForGrumpy(uint256 _amount) public payable {\\r\\n        require(\\r\\n            msg.sender == owner1 ||\\r\\n                msg.sender == owner2 ||\\r\\n                msg.sender == owner3 ||\\r\\n                msg.sender == owner4 ||\\r\\n                msg.sender == owner5 ||\\r\\n                msg.sender == owner6,\\r\\n            \\\"You're not permitted to perform a swap in this direction\\\"\\r\\n        );\\r\\n\\r\\n        require(canSwap == true, \\\"Swap is disabled\\\");\\r\\n        // User can't sell more tokens than they have\\r\\n        require(pawth.balanceOf(msg.sender) >= _amount);\\r\\n\\r\\n        // Send pawth to the swap\\r\\n        pawth.transferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n        // Calculate the amount of grumpy to redeem\\r\\n        uint256 grumpyAmount = _amount * rate;\\r\\n\\r\\n        // Require that GrumpyPawthSwap has enough Grumpy\\r\\n        require(grumpy.balanceOf(address(this)) >= grumpyAmount);\\r\\n\\r\\n        // Perform swap\\r\\n        grumpy.transfer(msg.sender, grumpyAmount);\\r\\n\\r\\n        // Emit an event\\r\\n        emit PawthSwappedForGrumpy(msg.sender, address(pawth), _amount, rate);\\r\\n    }\\r\\n\\r\\n    function swapGrumpyForPawth(uint256 _amount) public {\\r\\n        // User can't sell more tokens than they have\\r\\n        require(grumpy.balanceOf(msg.sender) >= _amount);\\r\\n\\r\\n        require(canSwap == true, \\\"Swap is disabled\\\");\\r\\n\\r\\n        // Calculate the amount of Pawth to redeem\\r\\n        uint256 pawthAmount = _amount / rate;\\r\\n\\r\\n        // Require that GrumpyPawthSwap has enough Pawth\\r\\n        require(pawth.balanceOf(address(this)) >= pawthAmount);\\r\\n\\r\\n        // Perform swap\\r\\n        grumpy.transferFrom(msg.sender, address(this), _amount);\\r\\n        pawth.transfer(msg.sender, pawthAmount);\\r\\n\\r\\n        // Emit an event\\r\\n        emit GrumpySwappedForPawth(msg.sender, address(grumpy), _amount, rate);\\r\\n    }\\r\\n\\r\\n    function reclaim_all_pawth_tokens() public {\\r\\n        require(\\r\\n            msg.sender == owner1 ||\\r\\n                msg.sender == owner2 ||\\r\\n                msg.sender == owner3 ||\\r\\n                msg.sender == owner4 ||\\r\\n                msg.sender == owner5 ||\\r\\n                msg.sender == owner6,\\r\\n            \\\"You are not permitted to send pawth to the development wallet.\\\"\\r\\n        );\\r\\n        uint256 all_pawth_remaining = pawth.balanceOf(address(this));\\r\\n        pawth.transfer(devWallet, all_pawth_remaining);\\r\\n    }\\r\\n\\r\\n    function reclaim_all_grumpy_tokens() public {\\r\\n        require(\\r\\n            msg.sender == owner1 ||\\r\\n                msg.sender == owner2 ||\\r\\n                msg.sender == owner3 ||\\r\\n                msg.sender == owner4 ||\\r\\n                msg.sender == owner5 ||\\r\\n                msg.sender == owner6,\\r\\n            \\\"You are not permitted to send grumpy to the development wallet.\\\"\\r\\n        );\\r\\n        uint256 all_grumpy_remaining = grumpy.balanceOf(address(this));\\r\\n        grumpy.transfer(devWallet, all_grumpy_remaining);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"petersburg\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract Grumpy\",\"name\":\"_grumpy\",\"type\":\"address\"},{\"internalType\":\"contract Pawthereum\",\"name\":\"_pawth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"grumpy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"GrumpySwappedForPawth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"PawthSwappedForGrumpy\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"canSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grumpy\",\"outputs\":[{\"internalType\":\"contract Grumpy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pawth\",\"outputs\":[{\"internalType\":\"contract Pawthereum\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reclaim_all_grumpy_tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reclaim_all_pawth_tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swapGrumpyForPawth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swapPawthForGrumpy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_toggle\",\"type\":\"bool\"}],\"name\":\"toggleSwapStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GrumpyPawthSwap","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000093b2fff814fcaeffb01406e80b4ecd89ca6a021b000000000000000000000000aecc217a749c2405b5ebc9857a16d58bdc1c367f","EVMVersion":"petersburg","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}