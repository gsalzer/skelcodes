{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/SharkGameCR.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"./interfaces/ISharkGame.sol\\\";\\nimport \\\"./interfaces/ICoral.sol\\\";\\nimport \\\"./interfaces/ITraits.sol\\\";\\nimport \\\"./interfaces/IChum.sol\\\";\\nimport \\\"./interfaces/ISharks.sol\\\";\\nimport \\\"./interfaces/IRandomizer.sol\\\";\\n\\n\\ncontract SharkGameCR is ISharkGame, Ownable, ReentrancyGuard, Pausable {\\n  using MerkleProof for bytes32[];\\n\\n  event MintCommitted(address indexed owner, uint256 indexed amount);\\n  event MintRevealed(address indexed owner, uint256 indexed amount);\\n\\n  struct MintCommit {\\n    bool stake;\\n    uint16 amount;\\n  }\\n\\n  uint256 public treasureChestTypeId;\\n  // max $CHUM cost\\n  uint256 private maxChumCost = 80000 ether;\\n  uint256 private ethCost = 0.04 ether;\\n\\n  // address -> commit # -> commits\\n  mapping(address => mapping(uint16 => MintCommit)) private _mintCommits;\\n  // address -> commit num of commit need revealed for account\\n  mapping(address => uint16) private _pendingCommitId;\\n  // commit # -> offchain random\\n  mapping(uint16 => uint256) private _commitRandoms;\\n  uint16 private _commitId = 1;\\n  uint16 private pendingMintAmt;\\n  // 0 - no sale\\n  // 1 - whitelist\\n  // 2 - public sale\\n  uint8 public saleStage = 0;\\n  // counter of how much has been minted\\n  mapping(address => uint16) private _mintedByWallet;\\n  mapping(address => uint16) public freeMints;\\n  bytes32 whitelistMerkelRoot;\\n\\n  // address => can call addCommitRandom\\n  mapping(address => bool) private admins;\\n\\n  // reference to the Tower for choosing random Dragon thieves\\n  ICoral public coral;\\n  // reference to $CHUM for burning on mint\\n  IChum public chumToken;\\n  // reference to Traits\\n  ITraits public traits;\\n  // reference to NFT collection\\n  ISharks public sharksNft;\\n\\n  constructor() {\\n    _pause();\\n  }\\n\\n  /** CRITICAL TO SETUP */\\n\\n  modifier requireContractsSet() {\\n      require(address(chumToken) != address(0) && address(traits) != address(0)\\n        && address(sharksNft) != address(0) && address(coral) != address(0)\\n        , \\\"Contracts not set\\\");\\n      _;\\n  }\\n\\n  function setContracts(address _chum, address _traits, address _sharksNft, address _coral) external onlyOwner {\\n    chumToken = IChum(_chum);\\n    traits = ITraits(_traits);\\n    sharksNft = ISharks(_sharksNft);\\n    coral = ICoral(_coral);\\n  }\\n\\n  function setWhitelistRoot(bytes32 val) public onlyOwner {\\n    whitelistMerkelRoot = val;\\n  }\\n\\n  function addFreeMints(address addr, uint16 qty) public onlyOwner {\\n    freeMints[addr] += qty;\\n  }\\n\\n  function setSaleStage(uint8 val) public onlyOwner {\\n    saleStage = val;\\n  }\\n\\n  /** EXTERNAL */\\n\\n  function getPendingMint(address addr) external view returns (MintCommit memory) {\\n    require(_pendingCommitId[addr] != 0, \\\"no pending commits\\\");\\n    return _mintCommits[addr][_pendingCommitId[addr]];\\n  }\\n\\n  function hasMintPending(address addr) external view returns (bool) {\\n    return _pendingCommitId[addr] != 0;\\n  }\\n\\n  function canMint(address addr) external view returns (bool) {\\n    return _pendingCommitId[addr] != 0 && _commitRandoms[_pendingCommitId[addr]] > 0;\\n  }\\n\\n  // Seed the current commit id so that pending commits can be revealed\\n  function addCommitRandom(uint256 seed) external {\\n    require(owner() == _msgSender() || admins[_msgSender()], \\\"Only admins can call this\\\");\\n    _commitRandoms[_commitId] = seed;\\n    _commitId += 1;\\n  }\\n\\n  function deleteCommit(address addr) external {\\n    require(owner() == _msgSender() || admins[_msgSender()], \\\"Only admins can call this\\\");\\n    uint16 commitIdCur = _pendingCommitId[_msgSender()];\\n    require(commitIdCur > 0, \\\"No pending commit\\\");\\n    delete _mintCommits[addr][commitIdCur];\\n    delete _pendingCommitId[addr];\\n  }\\n\\n  function forceRevealCommit(address addr) external {\\n    require(owner() == _msgSender() || admins[_msgSender()], \\\"Only admins can call this\\\");\\n    reveal(addr);\\n  }\\n\\n  /** Initiate the start of a mint. This action burns $CHUM, as the intent of committing is that you cannot back out once you've started.\\n    * This will add users into the pending queue, to be revealed after a random seed is generated and assigned to the commit id this\\n    * commit was added to. */\\n  function mintCommit(uint16 amount, bool stake, bytes32[] memory proof) external whenNotPaused nonReentrant payable {\\n    require(tx.origin == _msgSender(), \\\"Only EOA\\\");\\n    require(_pendingCommitId[_msgSender()] == 0, \\\"Already have pending mints\\\");\\n    require(saleStage > 0, \\\"Sale not started yet\\\");\\n    uint16 minted = sharksNft.minted();\\n    uint16 maxTokens = sharksNft.getMaxTokens();\\n    uint16 paidTokens = sharksNft.getPaidTokens();\\n    bool isWhitelistOnly = saleStage < 2;\\n    uint16 maxTxMint = isWhitelistOnly ? 4 : 6;\\n    uint16 maxWalletMint = isWhitelistOnly ? 4 : 12;\\n    require(minted + pendingMintAmt + amount <= maxTokens, \\\"All tokens minted\\\");\\n    require(amount > 0 && amount <= maxTxMint, \\\"Invalid mint amount\\\");\\n    require(minted + pendingMintAmt > paidTokens || _mintedByWallet[_msgSender()] + amount <= maxWalletMint, \\\"Invalid mint amount\\\");\\n    if (isWhitelistOnly) {\\n      require(whitelistMerkelRoot != 0, \\\"Whitelist not set\\\");\\n      require(\\n        proof.verify(whitelistMerkelRoot, keccak256(abi.encodePacked(_msgSender()))),\\n        \\\"You aren't whitelisted\\\"\\n      );\\n    }\\n\\n    uint256 totalChumCost = 0;\\n    uint256 totalEthCost = 0;\\n    // Loop through the amount of\\n    for (uint16 i = 1; i <= amount; i++) {\\n      uint16 tokenId = minted + pendingMintAmt + i;\\n      if (tokenId <= paidTokens) {\\n        totalEthCost += ethCost;\\n      }\\n      totalChumCost += mintCostChum(tokenId, maxTokens);\\n    }\\n\\n    if (freeMints[_msgSender()] >= 0) {\\n      if (freeMints[_msgSender()] >= amount) {\\n        totalEthCost = 0;\\n        freeMints[_msgSender()] -= amount;\\n      } else {\\n        totalEthCost -= ethCost * freeMints[_msgSender()];\\n        freeMints[_msgSender()] = 0;\\n      }\\n    }\\n\\n    require(msg.value >= totalEthCost, \\\"Not enough ETH\\\");\\n    if (totalChumCost > 0) {\\n      chumToken.burn(_msgSender(), totalChumCost);\\n      chumToken.updateOriginAccess();\\n    }\\n    uint16 amt = uint16(amount);\\n    _mintCommits[_msgSender()][_commitId] = MintCommit(stake, amt);\\n    _pendingCommitId[_msgSender()] = _commitId;\\n    pendingMintAmt += amt;\\n    _mintedByWallet[_msgSender()] += amount;\\n    emit MintCommitted(_msgSender(), amount);\\n  }\\n\\n  /** Reveal the commits for this user. This will be when the user gets their NFT, and can only be done when the commit id that\\n    * the user is pending for has been assigned a random seed. */\\n  function mintReveal() external whenNotPaused nonReentrant {\\n    require(tx.origin == _msgSender(), \\\"Only EOA1\\\");\\n    reveal(_msgSender());\\n  }\\n\\n  function reveal(address addr) internal {\\n    uint16 commitIdCur = _pendingCommitId[addr];\\n    require(commitIdCur > 0, \\\"No pending commit\\\");\\n    require(_commitRandoms[commitIdCur] > 0, \\\"random seed not set\\\");\\n    uint16 minted = sharksNft.minted();\\n    MintCommit memory commit = _mintCommits[addr][commitIdCur];\\n    pendingMintAmt -= commit.amount;\\n    uint16[] memory tokenIds = new uint16[](commit.amount);\\n    uint256 seed = _commitRandoms[commitIdCur];\\n    for (uint k = 0; k < commit.amount; k++) {\\n      minted++;\\n      // scramble the random so the steal / treasure mechanic are different per mint\\n      seed = uint256(keccak256(abi.encode(seed, addr)));\\n      address recipient = selectRecipient(seed);\\n      tokenIds[k] = minted;\\n      if (!commit.stake || recipient != addr) {\\n        sharksNft.mint(recipient, seed);\\n      } else {\\n        sharksNft.mint(address(coral), seed);\\n      }\\n    }\\n    sharksNft.updateOriginAccess(tokenIds);\\n    if(commit.stake) {\\n      coral.addManyToCoral(addr, tokenIds);\\n    }\\n    delete _mintCommits[addr][commitIdCur];\\n    delete _pendingCommitId[addr];\\n    emit MintCommitted(addr, tokenIds.length);\\n  }\\n\\n  /**\\n   * @param tokenId the ID to check the cost of to mint\\n   * @return the cost of the given token ID\\n   */\\n  function mintCostChum(uint256 tokenId, uint256 maxTokens) public view returns (uint256) {\\n    if (tokenId <= maxTokens / 6) return 0;\\n    if (tokenId <= maxTokens / 3) return maxChumCost / 4;\\n    if (tokenId <= maxTokens * 2 / 3) return maxChumCost / 2;\\n    return maxChumCost;\\n  }\\n\\n  /** INTERNAL */\\n\\n  /**\\n   * the first 25% (ETH purchases) go to the minter\\n   * the remaining 80% have a 10% chance to be given to a random staked dragon\\n   * @param seed a random value to select a recipient from\\n   * @return the address of the recipient (either the minter or the Dragon thief's owner)\\n   */\\n  function selectRecipient(uint256 seed) internal view returns (address) {\\n    if (((seed >> 245) % 10) != 0) return _msgSender(); // top 10 bits haven't been used\\n    address thief = coral.randomTokenOwner(ISharks.SGTokenType.ORCA, seed >> 144); // 144 bits reserved for trait selection\\n    if (thief == address(0x0)) return _msgSender();\\n    return thief;\\n  }\\n\\n  /** ADMIN */\\n\\n  /**\\n   * enables owner to pause / unpause contract\\n   */\\n  function setPaused(bool _paused) external requireContractsSet onlyOwner {\\n    if (_paused) _pause();\\n    else _unpause();\\n  }\\n\\n  function setMaxChumCost(uint256 _amount) external requireContractsSet onlyOwner {\\n    maxChumCost = _amount;\\n  }\\n\\n  /** Allow the contract owner to set the pending mint amount.\\n    * This allows any long-standing pending commits to be overwritten, say for instance if the max supply has been\\n    *  reached but there are many stale pending commits, it could be used to free up those spaces if needed/desired by the community.\\n    * This function should not be called lightly, this will have negative consequences on the game. */\\n  function setPendingMintAmt(uint256 pendingAmt) external onlyOwner {\\n    pendingMintAmt = uint16(pendingAmt);\\n  }\\n\\n  /**\\n  * enables an address to mint / burn\\n  * @param addr the address to enable\\n  */\\n  function addAdmin(address addr) external onlyOwner {\\n      admins[addr] = true;\\n  }\\n\\n  /**\\n  * disables an address from minting / burning\\n  * @param addr the address to disbale\\n  */\\n  function removeAdmin(address addr) external onlyOwner {\\n      admins[addr] = false;\\n  }\\n\\n  /**\\n   * allows owner to withdraw funds from minting\\n   */\\n  function withdraw() external onlyOwner {\\n    payable(owner()).transfer(address(this).balance);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IChum.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface IChum {\\n    function mint(address to, uint256 amount) external;\\n    function burn(address from, uint256 amount) external;\\n    function updateOriginAccess() external;\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICoral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ISharks.sol\\\";\\n\\ninterface ICoral {\\n  function addManyToCoral(address account, uint16[] calldata tokenIds) external;\\n  function randomTokenOwner(ISharks.SGTokenType tokenType, uint256 seed) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRandomizer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRandomizer {\\n    function random() external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISharkGame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISharkGame {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISharks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface ISharks is IERC721Enumerable {\\n    // game data storage\\n    enum SGTokenType {\\n        MINNOW,\\n        SHARK,\\n        ORCA\\n    }\\n\\n    struct SGToken {\\n        SGTokenType tokenType;\\n        uint8 base;\\n        uint8 accessory;\\n    }\\n\\n    function minted() external returns (uint16);\\n    function updateOriginAccess(uint16[] memory tokenIds) external;\\n    function mint(address recipient, uint256 seed) external;\\n    function burn(uint256 tokenId) external;\\n    function getMaxTokens() external view returns (uint16);\\n    function getPaidTokens() external view returns (uint16);\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n    function getTokenTraits(uint256 tokenId) external view returns (SGToken memory);\\n    function getTokenWriteBlock(uint256 tokenId) external view returns(uint64);\\n    function getTokenType(uint256 tokenId) external view returns(SGTokenType);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITraits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE \\n\\npragma solidity ^0.8.0;\\n\\ninterface ITraits {\\n  function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"addCommitRandom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"qty\",\"type\":\"uint16\"}],\"name\":\"addFreeMints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"canMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chumToken\",\"outputs\":[{\"internalType\":\"contract IChum\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coral\",\"outputs\":[{\"internalType\":\"contract ICoral\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"deleteCommit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"forceRevealCommit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeMints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPendingMint\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"stake\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"internalType\":\"struct SharkGameCR.MintCommit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"hasMintPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"stake\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"mintCommit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"}],\"name\":\"mintCostChum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chum\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_traits\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sharksNft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coral\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxChumCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingAmt\",\"type\":\"uint256\"}],\"name\":\"setPendingMintAmt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"val\",\"type\":\"uint8\"}],\"name\":\"setSaleStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"setWhitelistRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharksNft\",\"outputs\":[{\"internalType\":\"contract ISharks\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traits\",\"outputs\":[{\"internalType\":\"contract ITraits\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasureChestTypeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SharkGameCR","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"50","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}