{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControl`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == _msgSender(), \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardsDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IStakingRewards.sol\\\";\\n\\n/// @title IRewardsDistributor\\n/// @author Angle Core Team, inspired from Fei protocol\\n/// (https://github.com/fei-protocol/fei-protocol-core/blob/master/contracts/staking/IRewardsDistributor.sol)\\n/// @notice Rewards Distributor interface\\ninterface IRewardsDistributor {\\n    // ========================= Public Parameter Getter ===========================\\n\\n    function rewardToken() external view returns (IERC20);\\n\\n    // ======================== External User Available Function ===================\\n\\n    function drip(IStakingRewards stakingContract) external returns (uint256);\\n\\n    // ========================= Governor Functions ================================\\n\\n    function governorWithdrawRewardToken(uint256 amount, address governance) external;\\n\\n    function governorRecover(\\n        address tokenAddress,\\n        address to,\\n        uint256 amount,\\n        IStakingRewards stakingContract\\n    ) external;\\n\\n    function setUpdateFrequency(uint256 _frequency, IStakingRewards stakingContract) external;\\n\\n    function setIncentiveAmount(uint256 _incentiveAmount, IStakingRewards stakingContract) external;\\n\\n    function setAmountToDistribute(uint256 _amountToDistribute, IStakingRewards stakingContract) external;\\n\\n    function setDuration(uint256 _duration, IStakingRewards stakingContract) external;\\n\\n    function setStakingContract(\\n        address _stakingContract,\\n        uint256 _duration,\\n        uint256 _incentiveAmount,\\n        uint256 _dripFrequency,\\n        uint256 _amountToDistribute\\n    ) external;\\n\\n    function setNewRewardsDistributor(address newRewardsDistributor) external;\\n\\n    function removeStakingContract(IStakingRewards stakingContract) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakingRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title IStakingRewardsFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the staking rewards contract that interact with the `RewardsDistributor` contract\\ninterface IStakingRewardsFunctions {\\n    function notifyRewardAmount(uint256 reward) external;\\n\\n    function recoverERC20(\\n        address tokenAddress,\\n        address to,\\n        uint256 tokenAmount\\n    ) external;\\n\\n    function setNewRewardsDistribution(address newRewardsDistribution) external;\\n}\\n\\n/// @title IStakingRewards\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables\\ninterface IStakingRewards is IStakingRewardsFunctions {\\n    function rewardToken() external view returns (IERC20);\\n}\\n\"\r\n    },\r\n    \"contracts/staking/RewardsDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./RewardsDistributorEvents.sol\\\";\\n\\n/// @notice Distribution parameters for a given contract\\nstruct StakingParameters {\\n    // Amount of rewards distributed since the beginning\\n    uint256 distributedRewards;\\n    // Last time rewards were distributed to the staking contract\\n    uint256 lastDistributionTime;\\n    // Frequency with which rewards should be given to the underlying contract\\n    uint256 updateFrequency;\\n    // Number of tokens distributed for the person calling the update function\\n    uint256 incentiveAmount;\\n    // Time at which reward distribution started for this reward contract\\n    uint256 timeStarted;\\n    // Amount of time during which rewards will be distributed\\n    uint256 duration;\\n    // Amount of tokens to distribute to the concerned contract\\n    uint256 amountToDistribute;\\n}\\n\\n/// @title RewardsDistributor\\n/// @author Angle Core Team (forked form FEI Protocol)\\n/// @notice Controls and handles the distribution of governance tokens to the different staking contracts of the protocol\\n/// @dev Inspired from FEI contract:\\n/// https://github.com/fei-protocol/fei-protocol-core/blob/master/contracts/staking/FeiRewardsDistributor.sol\\ncontract RewardsDistributor is RewardsDistributorEvents, IRewardsDistributor, AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Role for governors only\\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\\\"GOVERNOR_ROLE\\\");\\n    /// @notice Role for guardians and governors\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n\\n    // ============================ Reference to a contract ========================\\n\\n    /// @notice Token used as a reward\\n    IERC20 public immutable override rewardToken;\\n\\n    // ============================== Parameters ===================================\\n\\n    /// @notice Maps a `StakingContract` to its distribution parameters\\n    mapping(IStakingRewards => StakingParameters) public stakingContractsMap;\\n\\n    /// @notice List of all the staking contracts handled by the rewards distributor\\n    /// Used to be able to change the rewards distributor and propagate a new reference to the underlying\\n    /// staking contract\\n    IStakingRewards[] public stakingContractsList;\\n\\n    // ============================ Constructor ====================================\\n\\n    /// @notice Initializes the distributor contract with a first set of parameters\\n    /// @param governorList List of the governor addresses of the protocol\\n    /// @param guardian The guardian address, optional\\n    /// @param rewardTokenAddress The ERC20 token to distribute\\n    constructor(\\n        address[] memory governorList,\\n        address guardian,\\n        address rewardTokenAddress\\n    ) {\\n        require(rewardTokenAddress != address(0) && guardian != address(0), \\\"0\\\");\\n        require(governorList.length > 0, \\\"47\\\");\\n        rewardToken = IERC20(rewardTokenAddress);\\n        // Since this contract is independent from the rest of the protocol\\n        // When updating the governor list, governors should make sure to still update the roles\\n        // in this contract\\n        _setRoleAdmin(GOVERNOR_ROLE, GOVERNOR_ROLE);\\n        _setRoleAdmin(GUARDIAN_ROLE, GOVERNOR_ROLE);\\n        for (uint256 i = 0; i < governorList.length; i++) {\\n            require(governorList[i] != address(0), \\\"0\\\");\\n            _setupRole(GOVERNOR_ROLE, governorList[i]);\\n            _setupRole(GUARDIAN_ROLE, governorList[i]);\\n        }\\n        _setupRole(GUARDIAN_ROLE, guardian);\\n    }\\n\\n    // ============================ External Functions =============================\\n\\n    /// @notice Sends reward tokens to the staking contract\\n    /// @param stakingContract Reference to the staking contract\\n    /// @dev The way to pause this function is to set `updateFrequency` to infinity,\\n    /// or to completely delete the contract\\n    /// @dev A keeper calling this function could be frontran by a miner seeing the potential profit\\n    /// from calling this function\\n    /// @dev This function automatically computes the amount of reward tokens to send to the staking\\n    /// contract based on the time elapsed since the last drip, on the amount to distribute and on\\n    /// the duration of the distribution\\n    function drip(IStakingRewards stakingContract) external override returns (uint256) {\\n        StakingParameters storage stakingParams = stakingContractsMap[stakingContract];\\n        require(stakingParams.duration > 0, \\\"80\\\");\\n        require(_isDripAvailable(stakingParams), \\\"81\\\");\\n\\n        uint256 dripAmount = _computeDripAmount(stakingParams);\\n        stakingParams.lastDistributionTime = block.timestamp;\\n        require(dripAmount != 0, \\\"82\\\");\\n        stakingParams.distributedRewards += dripAmount;\\n        emit Dripped(msg.sender, dripAmount, address(stakingContract));\\n\\n        rewardToken.safeTransfer(address(stakingContract), dripAmount);\\n        IStakingRewards(stakingContract).notifyRewardAmount(dripAmount);\\n        _incentivize(stakingParams);\\n\\n        return dripAmount;\\n    }\\n\\n    // =========================== Governor Functions ==============================\\n\\n    /// @notice Sends tokens back to governance treasury or another address\\n    /// @param amount Amount of tokens to send back to treasury\\n    /// @param to Address to send the tokens to\\n    /// @dev Only callable by governance and not by the guardian\\n    function governorWithdrawRewardToken(uint256 amount, address to) external override onlyRole(GOVERNOR_ROLE) {\\n        emit RewardTokenWithdrawn(amount);\\n        rewardToken.safeTransfer(to, amount);\\n    }\\n\\n    /// @notice Function to withdraw ERC20 tokens that could accrue on a staking contract\\n    /// @param tokenAddress Address of the ERC20 to recover\\n    /// @param to Address to transfer to\\n    /// @param amount Amount to transfer\\n    /// @param stakingContract Reference to the staking contract\\n    /// @dev A use case would be to claim tokens if the staked tokens accumulate rewards or if tokens were\\n    /// mistakenly sent to staking contracts\\n    function governorRecover(\\n        address tokenAddress,\\n        address to,\\n        uint256 amount,\\n        IStakingRewards stakingContract\\n    ) external override onlyRole(GOVERNOR_ROLE) {\\n        stakingContract.recoverERC20(tokenAddress, to, amount);\\n    }\\n\\n    /// @notice Sets a new rewards distributor contract and automatically makes this contract useless\\n    /// @param newRewardsDistributor Address of the new rewards distributor contract\\n    /// @dev This contract is not upgradeable, setting a new contract could allow for upgrades, which should be\\n    /// propagated across all staking contracts\\n    /// @dev This function transfers all the reward tokens to the new address\\n    /// @dev The new rewards distributor contract should be initialized correctly with all the staking contracts\\n    /// from the staking contract list\\n    function setNewRewardsDistributor(address newRewardsDistributor) external override onlyRole(GOVERNOR_ROLE) {\\n        // Checking the compatibility of the reward tokens. It is checked at the initialization of each staking contract\\n        // in the `setStakingContract` function that reward tokens are compatible with the `rewardsDistributor`. If\\n        // the `newRewardsDistributor` has a compatible rewards token, then all staking contracts will automatically be\\n        // compatible with it\\n        require(address(IRewardsDistributor(newRewardsDistributor).rewardToken()) == address(rewardToken), \\\"83\\\");\\n        require(newRewardsDistributor != address(this), \\\"84\\\");\\n        for (uint256 i = 0; i < stakingContractsList.length; i++) {\\n            stakingContractsList[i].setNewRewardsDistribution(newRewardsDistributor);\\n        }\\n        rewardToken.safeTransfer(newRewardsDistributor, rewardToken.balanceOf(address(this)));\\n        // The functions `setStakingContract` should then be called for each staking contract in the `newRewardsDistributor`\\n        emit NewRewardsDistributor(newRewardsDistributor);\\n    }\\n\\n    /// @notice Deletes a staking contract from the staking contract map and removes it from the\\n    /// `stakingContractsList`\\n    /// @param stakingContract Contract to remove\\n    /// @dev Allows to clean some space and to avoid keeping in memory contracts which became useless\\n    /// @dev It is also a way governance has to completely stop rewards distribution from a contract\\n    function removeStakingContract(IStakingRewards stakingContract) external override onlyRole(GOVERNOR_ROLE) {\\n        uint256 indexMet;\\n        uint256 stakingContractsListLength = stakingContractsList.length;\\n        require(stakingContractsListLength >= 1, \\\"80\\\");\\n        for (uint256 i = 0; i < stakingContractsListLength - 1; i++) {\\n            if (stakingContractsList[i] == stakingContract) {\\n                indexMet = 1;\\n                stakingContractsList[i] = stakingContractsList[stakingContractsListLength - 1];\\n                break;\\n            }\\n        }\\n        require(indexMet == 1 || stakingContractsList[stakingContractsListLength - 1] == stakingContract, \\\"80\\\");\\n\\n        stakingContractsList.pop();\\n\\n        delete stakingContractsMap[stakingContract];\\n        emit DeletedStakingContract(address(stakingContract));\\n    }\\n\\n    // =================== Guardian Functions (for parameters) =====================\\n\\n    /// @notice Notifies and initializes a new staking contract\\n    /// @param _stakingContract Address of the staking contract\\n    /// @param _duration Time frame during which tokens will be distributed\\n    /// @param _incentiveAmount Incentive amount given to keepers calling the update function\\n    /// @param _updateFrequency Frequency when it is possible to call the update function and give tokens to the staking contract\\n    /// @param _amountToDistribute Amount of gov tokens to give to the staking contract across all drips\\n    /// @dev Called by governance to activate a contract\\n    /// @dev After setting a new staking contract, everything is as if the contract had already been set for `_updateFrequency`\\n    /// meaning that it is possible to `drip` the staking contract immediately after that\\n    function setStakingContract(\\n        address _stakingContract,\\n        uint256 _duration,\\n        uint256 _incentiveAmount,\\n        uint256 _updateFrequency,\\n        uint256 _amountToDistribute\\n    ) external override onlyRole(GOVERNOR_ROLE) {\\n        require(_duration > 0, \\\"85\\\");\\n        require(_duration >= _updateFrequency && block.timestamp >= _updateFrequency, \\\"86\\\");\\n\\n        IStakingRewards stakingContract = IStakingRewards(_stakingContract);\\n\\n        require(stakingContract.rewardToken() == rewardToken, \\\"83\\\");\\n\\n        StakingParameters storage stakingParams = stakingContractsMap[stakingContract];\\n\\n        stakingParams.updateFrequency = _updateFrequency;\\n        stakingParams.incentiveAmount = _incentiveAmount;\\n        stakingParams.lastDistributionTime = block.timestamp - _updateFrequency;\\n        // In order to allow a drip whenever a `stakingContract` is set, we consider that staking has already started\\n        // `_updateFrequency` ago\\n        stakingParams.timeStarted = block.timestamp - _updateFrequency;\\n        stakingParams.duration = _duration;\\n        stakingParams.amountToDistribute = _amountToDistribute;\\n        stakingContractsList.push(stakingContract);\\n\\n        emit NewStakingContract(_stakingContract);\\n    }\\n\\n    /// @notice Sets the update frequency\\n    /// @param _updateFrequency New update frequency\\n    /// @param stakingContract Reference to the staking contract\\n    function setUpdateFrequency(uint256 _updateFrequency, IStakingRewards stakingContract)\\n        external\\n        override\\n        onlyRole(GUARDIAN_ROLE)\\n    {\\n        StakingParameters storage stakingParams = stakingContractsMap[stakingContract];\\n        require(stakingParams.duration > 0, \\\"80\\\");\\n        require(stakingParams.duration >= _updateFrequency, \\\"87\\\");\\n        stakingParams.updateFrequency = _updateFrequency;\\n        emit FrequencyUpdated(_updateFrequency, address(stakingContract));\\n    }\\n\\n    /// @notice Sets the incentive amount for calling drip\\n    /// @param _incentiveAmount New incentive amount\\n    /// @param stakingContract Reference to the staking contract\\n    function setIncentiveAmount(uint256 _incentiveAmount, IStakingRewards stakingContract)\\n        external\\n        override\\n        onlyRole(GUARDIAN_ROLE)\\n    {\\n        StakingParameters storage stakingParams = stakingContractsMap[stakingContract];\\n        require(stakingParams.duration > 0, \\\"80\\\");\\n        stakingParams.incentiveAmount = _incentiveAmount;\\n        emit IncentiveUpdated(_incentiveAmount, address(stakingContract));\\n    }\\n\\n    /// @notice Sets the new amount to distribute to a staking contract\\n    /// @param _amountToDistribute New amount to distribute\\n    /// @param stakingContract Reference to the staking contract\\n    function setAmountToDistribute(uint256 _amountToDistribute, IStakingRewards stakingContract)\\n        external\\n        override\\n        onlyRole(GUARDIAN_ROLE)\\n    {\\n        StakingParameters storage stakingParams = stakingContractsMap[stakingContract];\\n        require(stakingParams.duration > 0, \\\"80\\\");\\n        require(stakingParams.distributedRewards < _amountToDistribute, \\\"88\\\");\\n        stakingParams.amountToDistribute = _amountToDistribute;\\n        emit AmountToDistributeUpdated(_amountToDistribute, address(stakingContract));\\n    }\\n\\n    /// @notice Sets the new duration with which tokens will be distributed to the staking contract\\n    /// @param _duration New duration\\n    /// @param stakingContract Reference to the staking contract\\n    function setDuration(uint256 _duration, IStakingRewards stakingContract) external override onlyRole(GUARDIAN_ROLE) {\\n        StakingParameters storage stakingParams = stakingContractsMap[stakingContract];\\n        require(stakingParams.duration > 0, \\\"80\\\");\\n        require(_duration >= stakingParams.updateFrequency, \\\"87\\\");\\n        uint256 timeElapsed = _timeSinceStart(stakingParams);\\n        require(timeElapsed < stakingParams.duration && timeElapsed < _duration, \\\"66\\\");\\n        stakingParams.duration = _duration;\\n        emit DurationUpdated(_duration, address(stakingContract));\\n    }\\n\\n    // =========================== Internal Functions ==============================\\n\\n    /// @notice Gives the next time when `drip` could be called\\n    /// @param stakingParams Parameters of the concerned staking contract\\n    /// @return Block timestamp when `drip` will next be available\\n    function _nextDripAvailable(StakingParameters memory stakingParams) internal pure returns (uint256) {\\n        return stakingParams.lastDistributionTime + stakingParams.updateFrequency;\\n    }\\n\\n    /// @notice Tells if `drip` can currently be called\\n    /// @param stakingParams Parameters of the concerned staking contract\\n    /// @return If the `updateFrequency` has passed since the last drip\\n    function _isDripAvailable(StakingParameters memory stakingParams) internal view returns (bool) {\\n        return block.timestamp >= _nextDripAvailable(stakingParams);\\n    }\\n\\n    /// @notice Computes the amount of tokens to give at the current drip\\n    /// @param stakingParams Parameters of the concerned staking contract\\n    /// @dev Constant drip amount across time\\n    function _computeDripAmount(StakingParameters memory stakingParams) internal view returns (uint256) {\\n        if (stakingParams.distributedRewards >= stakingParams.amountToDistribute) {\\n            return 0;\\n        }\\n        uint256 dripAmount = (stakingParams.amountToDistribute *\\n            (block.timestamp - stakingParams.lastDistributionTime)) / stakingParams.duration;\\n        uint256 timeLeft = stakingParams.duration - _timeSinceStart(stakingParams);\\n        uint256 rewardsLeftToDistribute = stakingParams.amountToDistribute - stakingParams.distributedRewards;\\n        if (timeLeft < stakingParams.updateFrequency || rewardsLeftToDistribute < dripAmount || timeLeft == 0) {\\n            return rewardsLeftToDistribute;\\n        } else {\\n            return dripAmount;\\n        }\\n    }\\n\\n    /// @notice Computes the time since distribution has started for the staking contract\\n    /// @param stakingParams Parameters of the concerned staking contract\\n    /// @return The time since distribution has started for the staking contract\\n    function _timeSinceStart(StakingParameters memory stakingParams) internal view returns (uint256) {\\n        uint256 _duration = stakingParams.duration;\\n        // `block.timestamp` is always greater than `timeStarted`\\n        uint256 timePassed = block.timestamp - stakingParams.timeStarted;\\n        return timePassed > _duration ? _duration : timePassed;\\n    }\\n\\n    /// @notice Incentivizes the person calling the drip function\\n    /// @param stakingParams Parameters of the concerned staking contract\\n    function _incentivize(StakingParameters memory stakingParams) internal {\\n        rewardToken.safeTransfer(msg.sender, stakingParams.incentiveAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/RewardsDistributorEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../external/AccessControl.sol\\\";\\n\\nimport \\\"../interfaces/IRewardsDistributor.sol\\\";\\nimport \\\"../interfaces/IStakingRewards.sol\\\";\\n\\n/// @title RewardsDistributorEvents\\n/// @author Angle Core Team\\n/// @notice All the events used in `RewardsDistributor` contract\\ncontract RewardsDistributorEvents {\\n    event Dripped(address indexed _caller, uint256 _amount, address _stakingContract);\\n\\n    event RewardTokenWithdrawn(uint256 _amount);\\n\\n    event FrequencyUpdated(uint256 _frequency, address indexed _stakingContract);\\n\\n    event IncentiveUpdated(uint256 _incentiveAmount, address indexed _stakingContract);\\n\\n    event AmountToDistributeUpdated(uint256 _amountToDistribute, address indexed _stakingContract);\\n\\n    event DurationUpdated(uint256 _duration, address indexed _stakingContract);\\n\\n    event NewStakingContract(address indexed _stakingContract);\\n\\n    event DeletedStakingContract(address indexed stakingContract);\\n\\n    event NewRewardsDistributor(address indexed newRewardsDistributor);\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"governorList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountToDistribute\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"AmountToDistributeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"DeletedStakingContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"Dripped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"DurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_frequency\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"FrequencyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_incentiveAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"IncentiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRewardsDistributor\",\"type\":\"address\"}],\"name\":\"NewRewardsDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"NewStakingContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStakingRewards\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"drip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IStakingRewards\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"governorRecover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"governorWithdrawRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStakingRewards\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"removeStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToDistribute\",\"type\":\"uint256\"},{\"internalType\":\"contract IStakingRewards\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"setAmountToDistribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"contract IStakingRewards\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_incentiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IStakingRewards\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"setIncentiveAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewardsDistributor\",\"type\":\"address\"}],\"name\":\"setNewRewardsDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_incentiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_updateFrequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToDistribute\",\"type\":\"uint256\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updateFrequency\",\"type\":\"uint256\"},{\"internalType\":\"contract IStakingRewards\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"setUpdateFrequency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingContractsList\",\"outputs\":[{\"internalType\":\"contract IStakingRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStakingRewards\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingContractsMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"distributedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDistributionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateFrequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStarted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToDistribute\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RewardsDistributor","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000c2553e4b9dfa9f83b1a6d3eab96c4baab42d43000000000000000000000000031429d1856ad1377a8a0079410b297e1a9e214c20000000000000000000000000000000000000000000000000000000000000003000000000000000000000000fda462548ce04282f4b6d6619823a7c64fdc0185000000000000000000000000e02f8e39b8cfa7d3b62307e460776690108834590000000000000000000000005183f032bf42109cd370b9559fd22207e432301e","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}