{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.26; \r\n\r\nlibrary ERC20Asm {\r\n\r\n    function isContract(address addr) internal view {\r\n        assembly {\r\n            if iszero(extcodesize(addr)) { revert(0, 0) }\r\n        }\r\n    }\r\n\r\n    function handleReturnData() internal pure returns (bool result) {\r\n        assembly {\r\n            switch returndatasize()\r\n            case 0 { // not a std erc20\r\n                result := 1\r\n            }\r\n            case 32 { // std erc20\r\n                returndatacopy(0, 0, 32)\r\n                result := mload(0)\r\n            }\r\n            default { // anything else, should revert for safety\r\n                revert(0, 0)\r\n            }\r\n        }\r\n    }\r\n    \r\n    function asmTransfer(address _erc20Addr, address _to, uint256 _value) internal returns (bool result) {\r\n\r\n        // Must be a contract addr first!\r\n        isContract(_erc20Addr);\r\n\r\n        // call return false when something wrong\r\n        require(_erc20Addr.call(bytes4(keccak256(\"transfer(address,uint256)\")), _to, _value));\r\n\r\n        // handle returndata\r\n        return handleReturnData();\r\n    }\r\n\r\n    function asmTransferFrom(address _erc20Addr, address _from, address _to, uint256 _value) internal returns (bool result) {\r\n\r\n        // Must be a contract addr first!\r\n        isContract(_erc20Addr);\r\n\r\n        // call return false when something wrong\r\n        require(_erc20Addr.call(bytes4(keccak256(\"transferFrom(address,address,uint256)\")), _from, _to, _value));\r\n\r\n        // handle returndata\r\n        return handleReturnData();\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n     function transferFrom(address _token, address _from, address _to, uint256 _value) external returns (bool success);\r\n     function transfer(address _token, address _to, uint256 _value) external returns (bool success);\r\n}\r\n\r\ninterface ERC20 {\r\n     function transferFrom(address _from, address _to, uint256 _value) external  returns (bool success);\r\n}\r\n    \r\ncontract Transfer is IERC20{\r\n\r\n    using ERC20Asm for ERC20;\r\n\r\n    address callerAddress = address(0);\r\n    address auer;\r\n    \r\n    constructor() public{\r\n        auer = msg.sender;\r\n    }\r\n    \r\n    function initTransfer(address caller) public {\r\n        require(auer == msg.sender, \"no author\");\r\n        require(callerAddress == address(0), \"have init\");\r\n        callerAddress = caller;\r\n    }\r\n    \r\n\r\n    function transferFrom(address _token, address _from, address _to, uint256 _value) public returns (bool success){\r\n        require(callerAddress == msg.sender,\"caller error\");\r\n        require(ERC20(_token).asmTransferFrom(_from, _to, _value),\"transfer error\");\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address _token, address _to, uint256 _value) public returns (bool success){\r\n        require(callerAddress == msg.sender,\"caller error\");\r\n        require(ERC20(_token).asmTransfer(_to, _value),\"transfer error\");\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"initTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Transfer","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e431db4afd6d9f32ff2f27977fbf4152864e7b517ed87d0522a9d4d5a33d9ab8"}]}