{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity >=0.8.0;\r\n\r\n/// @notice Modern and gas-optimized ERC-1155 implementation.\r\n/// @author Modified from Helios (https://github.com/z0r0z/Helios/blob/main/contracts/ERC1155.sol)\r\ncontract ERC1155 {\r\n    /*///////////////////////////////////////////////////////////////\r\n                            EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 amount);\r\n\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] amounts);\r\n\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            ERC1155 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public baseURI;\r\n\r\n    string public name = \"Santa Swap Participation Token\";\r\n\r\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\r\n\r\n    mapping(address => mapping(address => bool)) internal operators;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            ERRORS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    error ArrayParity();\r\n\r\n    error InvalidOperator();\r\n\r\n    error NullAddress();\r\n\r\n    error InvalidReceiver();\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            ERC1155 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /* GETTERS */\r\n\r\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory batchBalances) {\r\n        if (owners.length != ids.length) revert ArrayParity();\r\n\r\n        batchBalances = new uint256[](owners.length);\r\n\r\n        for (uint256 i = 0; i < owners.length; i++) {\r\n            batchBalances[i] = balanceOf[owners[i]][ids[i]];\r\n        }\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool supported) {\r\n        supported = interfaceId == 0xd9b67a26 || interfaceId == 0x0e89341c;\r\n    }\r\n\r\n    function uri(uint256) external view returns (string memory meta) {\r\n        meta = baseURI;\r\n    }\r\n\r\n    /* APPROVALS */\r\n\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool isOperator) {\r\n        isOperator = operators[owner][operator];\r\n    }\r\n    \r\n    function setApprovalForAll(address operator, bool approved) external {\r\n        operators[msg.sender][operator] = approved;\r\n\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    /* TRANSFERS */\r\n\r\n    function safeTransferFrom(\r\n        address from, \r\n        address to, \r\n        uint256 id, \r\n        uint256 amount, \r\n        bytes memory data\r\n    ) external {\r\n        if (msg.sender != from || !isApprovedForAll(from, msg.sender)) revert InvalidOperator();\r\n\r\n        if (to == address(0)) revert NullAddress();\r\n\r\n        balanceOf[from][id] -= amount;\r\n\r\n        balanceOf[to][id] += amount;\r\n\r\n        _callonERC1155Received(from, to, id, amount, gasleft(), data);\r\n\r\n        emit TransferSingle(msg.sender, from, to, id, amount);\r\n    }\r\n\r\n    function safeBatchTransferFrom(\r\n        address from, \r\n        address to, \r\n        uint256[] memory ids,\r\n        uint256[] memory amounts, \r\n        bytes memory data\r\n    ) external {\r\n        if (msg.sender != from || !isApprovedForAll(from, msg.sender)) revert InvalidOperator();\r\n\r\n        if (to == address(0)) revert NullAddress();\r\n\r\n        if (ids.length != amounts.length) revert ArrayParity();\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            balanceOf[from][ids[i]] -= amounts[i];\r\n\r\n            balanceOf[to][ids[i]] += amounts[i];\r\n        }\r\n\r\n        _callonERC1155BatchReceived(from, to, ids, amounts, gasleft(), data);\r\n\r\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\r\n    }\r\n\r\n    function _callonERC1155Received(\r\n        address from, \r\n        address to, \r\n        uint256 id, \r\n        uint256 amount, \r\n        uint256 gasLimit, \r\n        bytes memory data\r\n    ) internal view {\r\n        if (to.code.length != 0) {\r\n            // selector = `bytes4(keccak256('onERC1155Received(address,address,uint256,uint256,bytes)'))`\r\n            (, bytes memory returned) = to.staticcall{gas: gasLimit}(abi.encodeWithSelector(0xf23a6e61,\r\n                msg.sender, from, id, amount, data));\r\n                \r\n            bytes4 selector = abi.decode(returned, (bytes4));\r\n\r\n            if (selector != 0xf23a6e61) revert InvalidReceiver();\r\n        }\r\n    }\r\n\r\n    function _callonERC1155BatchReceived(\r\n        address from, \r\n        address to, \r\n        uint256[] memory ids,\r\n        uint256[] memory amounts, \r\n        uint256 gasLimit, \r\n        bytes memory data\r\n    ) internal view {\r\n        if (to.code.length != 0) {\r\n            // selector = `bytes4(keccak256('onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)'))`\r\n            (, bytes memory returned) = to.staticcall{gas: gasLimit}(abi.encodeWithSelector(0xbc197c81,\r\n                msg.sender, from, ids, amounts, data));\r\n                \r\n            bytes4 selector = abi.decode(returned, (bytes4));\r\n\r\n            if (selector != 0xbc197c81) revert InvalidReceiver();\r\n        }\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            MINT/BURN LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _mint(\r\n        address to, \r\n        uint256 id, \r\n        uint256 amount, \r\n        bytes memory data\r\n    ) internal {\r\n        balanceOf[to][id] += amount;\r\n\r\n        if (to.code.length != 0) _callonERC1155Received(address(0), to, id, amount, gasleft(), data);\r\n\r\n        emit TransferSingle(msg.sender, address(0), to, id, amount);\r\n    }\r\n\r\n    function _batchMint(\r\n        address to, \r\n        uint256[] memory ids, \r\n        uint256[] memory amounts, \r\n        bytes memory data\r\n    ) internal {\r\n        if (ids.length != amounts.length) revert ArrayParity();\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            balanceOf[to][ids[i]] += amounts[i];\r\n        }\r\n\r\n        if (to.code.length != 0) _callonERC1155BatchReceived(address(0x0), to, ids, amounts, gasleft(), data);\r\n\r\n        emit TransferBatch(msg.sender, address(0), to, ids, amounts);\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            URI LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _updateURI(string memory newURI) internal {\r\n        baseURI = newURI;\r\n    }\r\n}\r\n\r\n/// @title SantaSwapNFT\r\n/// @author Anish Agnihotri\r\n/// @notice Participation tickets for 2021 Santa Swap NFT Gift Exchange\r\ncontract SantaSwapNFT is ERC1155 {\r\n\r\n    /// ============ Immutable storage ============\r\n\r\n    /// @notice Maximum number of mintable NFTs (global)\r\n    uint256 immutable MAX_NFTS = 10_000;\r\n    /// @notice Maximum number of mintable NFTs (local, by address)\r\n    uint256 immutable MAX_NFTS_PER_ADDRESS = 10;\r\n\r\n    /// ============ Mutable storage ============\r\n\r\n    /// @notice Contract owner\r\n    address public owner;\r\n    /// @notice Number of NFTs minted\r\n    uint256 public nftsMinted = 0;\r\n\r\n    /// ============ Events ============\r\n\r\n    /// @notice Emitted after an NFT is minted\r\n    /// @param to new NFT owner\r\n    /// @param handleHash custom hashed Twitter handle of owner\r\n    /// @param amount number of NFTs minted\r\n    event NFTMinted(address indexed to, bytes32 handleHash, uint256 amount);\r\n\r\n    /// ============ Errors ============\r\n\r\n    /// @notice Thrown when not enough ETH provided to pay for NFT mint\r\n    error InsufficientPayment();\r\n\r\n    /// @notice Thrown when attempting to call owner functions as non-owner\r\n    error NotOwner();\r\n\r\n    /// @notice Thrown when max number of NFTs have or would be minted (total or by address)\r\n    error MaxMinted();\r\n\r\n    /// @notice Thrown when error in low-level call\r\n    error CallError();\r\n\r\n    /// ============ Constructor ============\r\n\r\n    /// @notice Creates a new SantaSwapNFT contract\r\n    /// @param baseURI of ERC-1155 compatible metadata \r\n    constructor(string memory baseURI) {\r\n        // Update owner to deployer\r\n        owner = msg.sender;\r\n        // Update URI\r\n        _updateURI(baseURI);\r\n    }\r\n\r\n    /// ============ Functions ============\r\n\r\n    /// @notice Mints a single NFT\r\n    /// @param handleHash custom hashed Twitter handle of owner\r\n    function mintSingle(bytes32 handleHash) external payable {\r\n        // Revert if not enough payment provided\r\n        if (msg.value < 0.03 ether) revert InsufficientPayment();\r\n        // Revert if maximum NFTs minted (address) after minting single\r\n        if (balanceOf[msg.sender][0] + 1 > MAX_NFTS_PER_ADDRESS) revert MaxMinted();\r\n        // Revert if maximum NFTs minted (global) after minting single\r\n        if (nftsMinted + 1 > MAX_NFTS) revert MaxMinted();\r\n\r\n        // Mint NFT\r\n        _mint(msg.sender, 0, 1, \"\");\r\n        // Increment number of mints\r\n        nftsMinted++;\r\n\r\n        // Emit NFTMinted event\r\n        emit NFTMinted(msg.sender, handleHash, 1);\r\n    }\r\n\r\n    /// @notice Mints many NFTs\r\n    /// @param handleHash custom hashed Twitter handle of owner\r\n    /// @param numToMint number of NFTs to mint in bulk\r\n    function mintBatch(bytes32 handleHash, uint256 numToMint) external payable {\r\n        // Revert if not enough payment provided\r\n        if (msg.value < (numToMint * 0.03 ether)) revert InsufficientPayment();\r\n        // Revert if maximum NFTs minted (address) after minting bulk\r\n        if (balanceOf[msg.sender][0] + numToMint > MAX_NFTS_PER_ADDRESS) revert MaxMinted();\r\n        // Revert if maximum NFTs minted (global) after minting bulk\r\n        if (nftsMinted + numToMint > MAX_NFTS) revert MaxMinted();\r\n\r\n        // Batch mint NFTs\r\n        uint256[] memory ids = new uint256[](1);\r\n        ids[0] = 0;\r\n        uint256[] memory amounts = new uint256[](1);\r\n        amounts[0] = numToMint;\r\n        _batchMint(msg.sender, ids, amounts, \"\");\r\n        // Increment number of mints\r\n        nftsMinted += numToMint;\r\n\r\n        // Emit NFTMinted event\r\n        emit NFTMinted(msg.sender, handleHash, numToMint);\r\n    }\r\n\r\n    /// @notice Allows owner to withdraw balance of contract\r\n    function withdrawBalance() external {\r\n        // Revert if caller is not owner\r\n        if (msg.sender != owner) revert NotOwner();\r\n        // Drain balance\r\n        (bool sent,) = owner.call{value: address(this).balance}(\"\");\r\n        if (!sent) revert CallError();\r\n    }\r\n\r\n    /// @notice Allows owner to update owner of contract\r\n    function updateOwner(address newOwner) external {\r\n        // Revert if caller is not owner\r\n        if (msg.sender != owner) revert NotOwner();\r\n        // Update new owner\r\n        owner = newOwner;\r\n    }\r\n\r\n    /// @notice Allows owner to update contract URI\r\n    function updateURI(string memory newURI) external {\r\n        // Revert if caller is not owner\r\n        if (msg.sender != owner) revert NotOwner();\r\n        // Update new URI\r\n        _updateURI(newURI);\r\n    }\r\n\r\n    /// @notice Returns total supply of NFTs\r\n    /// @return Total supply\r\n    function totalSupply() public pure returns (uint256) {\r\n        return MAX_NFTS;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArrayParity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"handleHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"batchBalances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"handleHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"numToMint\",\"type\":\"uint256\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"handleHash\",\"type\":\"bytes32\"}],\"name\":\"mintSingle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftsMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"updateURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"meta\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SantaSwapNFT","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000042697066733a2f2f6261667962656965773579627936737935716d3572746d65696c693661767476376a6c7672766f75783375356a6a326d6367736c6c74616468676d000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://85c73a70e6349352c5d96623ca5d265a18064b7b50fc2312d488e8408f041b60"}]}