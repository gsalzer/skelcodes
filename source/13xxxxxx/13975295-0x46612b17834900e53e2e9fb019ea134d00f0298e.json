{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Bridge.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\ncontract Bridge {\\r\\n  address public owner;\\r\\n  address private tokenAddress;\\r\\n  uint private crossFee = 1; // in gwei\\r\\n\\r\\n  mapping(address => mapping(uint => bool)) public sendNonces;\\r\\n  mapping(address => mapping(uint => bool)) public recvNonces;\\r\\n\\r\\n  enum Step { Send, Recv }\\r\\n  event Transfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint amount,\\r\\n    uint date,\\r\\n    uint nonce,\\r\\n    Step indexed step\\r\\n  );\\r\\n\\r\\n  modifier onlyOwner() {\\r\\n    require (msg.sender == owner);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(uint crossFee_, address tokenAddress_) {\\r\\n    owner = msg.sender;\\r\\n    crossFee = crossFee_;\\r\\n    tokenAddress = tokenAddress_;\\r\\n  }\\r\\n\\r\\n  // transfer from msg.sender to contract\\r\\n  function crossSend(\\r\\n    address recipient,\\r\\n    uint tokenAmount,\\r\\n    uint nonce) external payable {\\r\\n    // check fee\\r\\n    require(msg.value >= crossFee, 'Insufficient fee.');\\r\\n    require(sendNonces[msg.sender][nonce] == false, 'transfer already processed');\\r\\n\\r\\n    sendNonces[msg.sender][nonce] = true;\\r\\n\\r\\n    IERC20 token = IERC20(tokenAddress);\\r\\n    token.transferFrom(msg.sender, owner, tokenAmount);\\r\\n\\r\\n    emit Transfer(\\r\\n      msg.sender,\\r\\n      recipient,\\r\\n      tokenAmount,\\r\\n      block.timestamp,\\r\\n      nonce,\\r\\n      Step.Send\\r\\n    );\\r\\n  }\\r\\n\\r\\n  // transfer from contract to recipient\\r\\n  function crossRecv(\\r\\n    address sender,\\r\\n    address recipient, \\r\\n    uint tokenAmount,\\r\\n    uint nonce) external onlyOwner {\\r\\n    require(recvNonces[msg.sender][nonce] == false, 'transfer already processed');\\r\\n    recvNonces[msg.sender][nonce] = true;\\r\\n\\r\\n    IERC20 token = IERC20(tokenAddress);\\r\\n    token.transferFrom(owner, recipient, tokenAmount);\\r\\n\\r\\n    emit Transfer(\\r\\n      sender,\\r\\n      recipient,\\r\\n      tokenAmount,\\r\\n      block.timestamp,\\r\\n      nonce,\\r\\n      Step.Recv\\r\\n    );\\r\\n  }\\r\\n\\r\\n  // withdraw from contract to owner\\r\\n  function withdraw() external onlyOwner {\\r\\n    // get the amount of Ether stored in this contract\\r\\n    uint amount = address(this).balance;\\r\\n\\r\\n    // send all Ether to owner\\r\\n    // Owner can receive Ether since the address of owner is payable\\r\\n    (bool success, ) = payable(owner).call{value: amount}(\\\"\\\");\\r\\n    require(success, \\\"Failed to send balance\\\");\\r\\n  }\\r\\n\\r\\n  // set fee\\r\\n  function setFee(uint fee) external onlyOwner {\\r\\n    crossFee = fee;\\r\\n  }\\r\\n\\r\\n  // get fee\\r\\n  function getFee() external view returns (uint) {\\r\\n    return crossFee;\\r\\n  }\\r\\n\\r\\n  // set owner\\r\\n  function setOwner(address owner_) external onlyOwner {\\r\\n    require(owner_ != address(0), 'Owner can not be null.');\\r\\n    owner = owner_;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"crossFee_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum Bridge.Step\",\"name\":\"step\",\"type\":\"uint8\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"crossRecv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"crossSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recvNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sendNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Bridge","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000e35fa931a0000000000000000000000000005bfd5dd70fcd460a08492a2333182c07251aa641","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}