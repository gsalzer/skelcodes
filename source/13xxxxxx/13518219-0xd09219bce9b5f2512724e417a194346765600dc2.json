{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at polygonscan.com on 2021-06-13\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.7.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) { return 0; }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: contracts\\interfaces\\IUniswapRouter02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract VeroxLimitOrder is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    IUniswapV2Router02 public immutable uniswapRouter02;\r\n    \r\n    enum OrderState {Created, Cancelled, Finished}\r\n    enum OrderType {EthForTokens, TokensForEth, TokensForTokens}\r\n    \r\n    struct Order {\r\n        OrderState orderState;\r\n        OrderType orderType;\r\n        address payable traderAddress;\r\n        address assetIn;\r\n        address assetOut;\r\n        uint assetInOffered;\r\n        uint assetOutExpected;\r\n        uint executorFee;\r\n        uint stake;\r\n        uint id;\r\n        uint ordersI;\r\n        address[] path;\r\n    }\r\n    \r\n    uint public STAKE_FEE = 2;\r\n    uint public EXECUTOR_FEE = 500000000000000;\r\n    uint[] public orders;\r\n    uint public ordersNum = 0;\r\n    address public stakeAddress = address(0xCE306190d879F8FdaeC68ABF0f8eB65151756c99);\r\n    address public owAddress = address(0xCE306190d879F8FdaeC68ABF0f8eB65151756c99);\r\n    \r\n    event logOrderCreated(\r\n        uint id,\r\n        OrderState orderState, \r\n        OrderType orderType, \r\n        address payable traderAddress, \r\n        address assetIn, \r\n        address assetOut,\r\n        uint assetInOffered, \r\n        uint assetOutExpected, \r\n        uint executorFee\r\n    );\r\n    event logOrderCancelled(uint id, address payable traderAddress, address assetIn, address assetOut, uint refundETH, uint refundToken);\r\n    event logOrderExecuted(uint id, address executor, uint[] amounts);\r\n    \r\n    mapping(uint => Order) public orderBook;\r\n    mapping(address => uint[]) private ordersForAddress;\r\n    \r\n    constructor(IUniswapV2Router02 _uniswapRouter02) {\r\n        uniswapRouter02 = _uniswapRouter02;\r\n    }\r\n    \r\n    function setNewStakeFee(uint256 _STAKE_FEE) external onlyOwner {\r\n        STAKE_FEE = _STAKE_FEE;\r\n    }\r\n    \r\n    \r\n    \r\n    function setNewExecutorFee(uint256 _EXECUTOR_FEE) external onlyOwner {\r\n        EXECUTOR_FEE = _EXECUTOR_FEE;\r\n    }\r\n    \r\n    function setNewStakeAddress(address _stakeAddress) external onlyOwner {\r\n        require(_stakeAddress != address(0), 'Do not use 0 address');\r\n        stakeAddress = _stakeAddress;\r\n    }\r\n    \r\n    function setNewOwAddress(address _owAddress) external onlyOwner {\r\n        require(_owAddress != address(0), 'Do not use 0 address');\r\n        owAddress = _owAddress;\r\n    }\r\n    \r\n    \r\n    function updateOrder(Order memory order, OrderState newState) internal {\r\n        if(orders.length > 1) {\r\n            uint openId = order.ordersI;\r\n            uint lastId = orders[orders.length-1];\r\n            Order memory lastOrder = orderBook[lastId];\r\n            lastOrder.ordersI = openId;\r\n            orderBook[lastId] = lastOrder;\r\n            orders[openId] = lastId;\r\n        }\r\n        orders.pop();\r\n        order.orderState = newState;\r\n        orderBook[order.id] = order;        \r\n    }\r\n\r\n    function createOrder(OrderType orderType, address assetIn, address assetOut, uint assetInOffered, uint assetOutExpected,address[] calldata path, uint executorFee) external payable {\r\n        \r\n        uint payment = msg.value;\r\n        uint stakeValue = 0;\r\n        \r\n        require(assetInOffered > 0, \"Asset in amount must be greater than 0\");\r\n        require(assetOutExpected > 0, \"Asset out amount must be greater than 0\");\r\n        require(executorFee >= EXECUTOR_FEE, \"Invalid fee\");\r\n        \r\n        if(orderType == OrderType.EthForTokens) {\r\n            require(assetIn == uniswapRouter02.WETH(), \"Use WETH as the assetIn\");\r\n            stakeValue = assetInOffered.mul(STAKE_FEE).div(1000);\r\n            require(payment == assetInOffered.add(executorFee).add(stakeValue), \"Payment = assetInOffered + executorFee + stakeValue\");\r\n            \r\n        }\r\n        else {\r\n            require(payment == executorFee, \"Transaction value must match executorFee\");\r\n            if (orderType == OrderType.TokensForEth) { require(assetOut == uniswapRouter02.WETH(), \"Use WETH as the assetOut\"); }\r\n            stakeValue = assetInOffered.mul(STAKE_FEE).div(1000);\r\n            TransferHelper.safeTransferFrom(assetIn, msg.sender, address(this), assetInOffered.add(stakeValue));\r\n        }\r\n        \r\n        \r\n        uint orderId = ordersNum;\r\n        ordersNum++;\r\n        \r\n        orderBook[orderId] = Order(OrderState.Created, orderType, msg.sender, assetIn, assetOut, assetInOffered, \r\n        assetOutExpected, executorFee, stakeValue, orderId, orders.length,path);\r\n        \r\n        ordersForAddress[msg.sender].push(orderId);\r\n        orders.push(orderId);\r\n        \r\n        emit logOrderCreated(\r\n            orderId, \r\n            OrderState.Created, \r\n            orderType, \r\n            msg.sender, \r\n            assetIn, \r\n            assetOut,\r\n            assetInOffered, \r\n            assetOutExpected, \r\n            executorFee\r\n        );\r\n    }\r\n    \r\n    function executeOrder(uint orderId) external returns (uint[] memory) {\r\n        Order memory order = orderBook[orderId];  \r\n        require(order.traderAddress != address(0), \"Invalid order\");\r\n        require(order.orderState == OrderState.Created, 'Invalid order state');\r\n        \r\n        updateOrder(order, OrderState.Finished);\r\n    \r\n        uint[] memory swapResult;\r\n        \r\n        if (order.orderType == OrderType.EthForTokens) {\r\n            \r\n            swapResult = uniswapRouter02.swapExactETHForTokens{value:order.assetInOffered}(order.assetOutExpected, order.path, order.traderAddress, block.timestamp);\r\n            TransferHelper.safeTransferETH(stakeAddress, order.stake);\r\n        } \r\n        else if (order.orderType == OrderType.TokensForEth) {\r\n            TransferHelper.safeApprove(order.assetIn, address(uniswapRouter02), order.assetInOffered.sub(order.stake));\r\n            swapResult = uniswapRouter02.swapExactTokensForETH(order.assetInOffered.sub(order.stake), order.assetOutExpected, order.path, order.traderAddress, block.timestamp);\r\n            \r\n            TransferHelper.safeTransfer(order.assetIn, stakeAddress, order.stake);\r\n        }\r\n        else if (order.orderType == OrderType.TokensForTokens) {\r\n            TransferHelper.safeApprove(order.assetIn, address(uniswapRouter02), order.assetInOffered.sub(order.stake));\r\n            swapResult = uniswapRouter02.swapExactTokensForTokens(order.assetInOffered.sub(order.stake), order.assetOutExpected, order.path, order.traderAddress, block.timestamp);\r\n            TransferHelper.safeTransfer(order.assetIn, stakeAddress, order.stake);\r\n        }\r\n        \r\n        TransferHelper.safeTransferETH(msg.sender, order.executorFee);\r\n        emit logOrderExecuted(order.id, msg.sender, swapResult);\r\n        \r\n        return swapResult;\r\n    }\r\n    \r\n    function cancelOrder(uint orderId) external {\r\n        Order memory order = orderBook[orderId];  \r\n        require(order.traderAddress != address(0), \"Invalid order\");\r\n        require(msg.sender == order.traderAddress, 'This order is not yours');\r\n        require(order.orderState == OrderState.Created, 'Invalid order state');\r\n        \r\n        updateOrder(order, OrderState.Cancelled);\r\n        \r\n        uint refundETH = 0;\r\n        uint refundToken = 0;\r\n        \r\n        if (order.orderType != OrderType.EthForTokens) {\r\n            refundETH = order.executorFee;\r\n            refundToken = order.assetInOffered.add(order.stake);\r\n            TransferHelper.safeTransferETH(order.traderAddress, refundETH);\r\n            TransferHelper.safeTransfer(order.assetIn, order.traderAddress, refundToken);\r\n        }\r\n        else {\r\n            refundETH = order.assetInOffered.add(order.executorFee).add(order.stake);\r\n            TransferHelper.safeTransferETH(order.traderAddress, refundETH);  \r\n        }\r\n        \r\n        emit logOrderCancelled(order.id, order.traderAddress, order.assetIn, order.assetOut, refundETH, refundToken);        \r\n    }\r\n    \r\n    function calculatePaymentETH(uint ethValue) external view returns (uint valueEth, uint stake, uint executorFee, uint total) {\r\n        uint pay = ethValue;\r\n        uint stakep = pay.mul(STAKE_FEE).div(1000);\r\n        uint totalp = (pay.add(stakep).add(EXECUTOR_FEE));\r\n        return (pay, stakep, EXECUTOR_FEE, totalp);\r\n    }\r\n    \r\n    function getOrdersLength() external view returns (uint) {\r\n        return orders.length;\r\n    }\r\n    \r\n    function getOrdersForAddressLength(address _address) external view returns (uint)\r\n    {\r\n        return ordersForAddress[_address].length;\r\n    }\r\n\r\n    function getOrderIdForAddress(address _address, uint index) external view returns (uint)\r\n    {\r\n        return ordersForAddress[_address][index];\r\n    }    \r\n    \r\n    receive() external payable {}\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_uniswapRouter02\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"traderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundToken\",\"type\":\"uint256\"}],\"name\":\"logOrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum VeroxLimitOrder.OrderState\",\"name\":\"orderState\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum VeroxLimitOrder.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"traderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetInOffered\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetOutExpected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executorFee\",\"type\":\"uint256\"}],\"name\":\"logOrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"logOrderExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXECUTOR_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethValue\",\"type\":\"uint256\"}],\"name\":\"calculatePaymentETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"valueEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum VeroxLimitOrder.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetInOffered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutExpected\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"executorFee\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"executeOrder\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOrderIdForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getOrdersForAddressLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrdersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderBook\",\"outputs\":[{\"internalType\":\"enum VeroxLimitOrder.OrderState\",\"name\":\"orderState\",\"type\":\"uint8\"},{\"internalType\":\"enum VeroxLimitOrder.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"traderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetInOffered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutExpected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ordersI\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ordersNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_EXECUTOR_FEE\",\"type\":\"uint256\"}],\"name\":\"setNewExecutorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owAddress\",\"type\":\"address\"}],\"name\":\"setNewOwAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeAddress\",\"type\":\"address\"}],\"name\":\"setNewStakeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_STAKE_FEE\",\"type\":\"uint256\"}],\"name\":\"setNewStakeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter02\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"VeroxLimitOrder","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://97c7b93b5c3a09f04389564c062bba4478508ad084b34182bc90f7538c409c0a"}]}