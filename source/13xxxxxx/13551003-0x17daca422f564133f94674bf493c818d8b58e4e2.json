{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\ncontract GebAuth {\r\n    // --- Authorization ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"GebAuth/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n\r\n    constructor () public {\r\n        authorizedAccounts[msg.sender] = 1;\r\n        emit AddAuthorization(msg.sender);\r\n    }\r\n}\r\n\r\nabstract contract SFTreasuryCoreParamAdjusterLike {\r\n    function modifyParameters(bytes32 parameter, uint256 val) external virtual;\r\n    function modifyParameters(address targetContract, bytes4 targetFunction, bytes32 parameter, uint256 val) external virtual;\r\n}\r\n\r\ncontract MinimalSFTreasuryCoreParamAdjusterOverlay is GebAuth {\r\n    // latestExpectedCalls\r\n    // minPullFundsThreshold\r\n    // pullFundsMinThresholdMultiplier\r\n    SFTreasuryCoreParamAdjusterLike public adjuster;\r\n\r\n    constructor(address adjuster_) public GebAuth() {\r\n        require(adjuster_ != address(0), \"MinimalSFTreasuryCoreParamAdjusterOverlay/null-adjuster\");\r\n        adjuster = SFTreasuryCoreParamAdjusterLike(adjuster_);\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n\r\n    // --- Core Logic ---\r\n    /*\r\n    * @notice Modify minPullFundsThreshold or pullFundsMinThresholdMultiplier\r\n    * @param parameter Must be \"minPullFundsThreshold\" or \"pullFundsMinThresholdMultiplier\"\r\n    * @param data The new value\r\n    */\r\n    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\r\n        require(\r\n          either(parameter == \"minPullFundsThreshold\", parameter == \"pullFundsMinThresholdMultiplier\"),\r\n          \"MinimalSFTreasuryCoreParamAdjusterOverlay/invalid-parameter\"\r\n        );\r\n        adjuster.modifyParameters(parameter, data);\r\n    }\r\n\r\n    /*\r\n    * @notify Modify \"latestExpectedCalls\" for a FundedFunction\r\n    * @param targetContract The contract where the funded function resides\r\n    * @param targetFunction The signature of the funded function\r\n    * @param parameter Must be \"latestExpectedCalls\"\r\n    * @param val The new parameter value\r\n    */\r\n    function modifyParameters(address targetContract, bytes4 targetFunction, bytes32 parameter, uint256 val) external isAuthorized {\r\n        require(parameter == \"latestExpectedCalls\", \"MinimalSFTreasuryCoreParamAdjusterOverlay/invalid-parameter\");\r\n        adjuster.modifyParameters(targetContract, targetFunction, parameter, val);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adjuster_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adjuster\",\"outputs\":[{\"internalType\":\"contract SFTreasuryCoreParamAdjusterLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"targetFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MinimalSFTreasuryCoreParamAdjusterOverlay","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000073feb3c2dbb87c8e0d040a7cd708f7497853b787","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://227aa7a671f8561670c222bc56e84fb3a0e3366f62d7556bfb8b6b0fb97210fa"}]}