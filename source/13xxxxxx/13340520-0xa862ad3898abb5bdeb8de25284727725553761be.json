{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.8.0;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface PolvenStakingStructs {\r\n    struct Stake {\r\n        uint256 amount;\r\n        uint256 normalizedAmount;\r\n    }\r\n\r\n    struct StakeTimeframe {\r\n        uint256 amount;\r\n        uint256 normalizedAmount;\r\n        uint256 lastStakeTime;\r\n    }\r\n}\r\n\r\ninterface PolvenStaking is PolvenStakingStructs {\r\n    function userStakes(address) external view returns(Stake memory);\r\n    function userStakesTimeframe(address) external view returns(StakeTimeframe memory);\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ClubDealSwap is Ownable, PolvenStakingStructs {\r\n    using SafeMath for uint256;\r\n    \r\n    event SwappFromPolven (address user, uint256 polvenAmount, uint256 tokenAmount, uint256 discountPercentage, uint256 counter);\r\n    event SwappFromToken (address user, uint256 polvenAmount, uint256 tokenAmount, uint256 discountPercentage, uint256 counter);\r\n    event SetPolvenPrice(uint256 oldPolvenPrice, uint256 newPolvenPrice);\r\n    event SetTokenPrice(uint256 oldTokenPrice, uint256 newTokenPrice);\r\n    event NewTier(string title, uint256 percent, uint256 amount);\r\n    event DeleteTier(uint index, string title, uint256 percent, uint256 amount);\r\n    event UpdateTier(uint index, string oldTitle, uint256 oldPercent, uint256 oldAmount, string newTitle, uint256 newPercent, uint256 newAmount);\r\n    event CreateProposal(uint256 expirationDate, address token, uint256 tokenPrice);\r\n    event TransferStuckERC20(IERC20 _token, address _to, uint256 _amount);\r\n    event CloseProposal(uint256 counter);\r\n    \r\n    uint256 public counter;\r\n    \r\n    enum AdminStatus { CLOSED, OPEN }\r\n    enum ProposalStatus { CLOSED, OPEN }\r\n    \r\n    struct Tier {\r\n        string title;\r\n        uint256 percent;\r\n        uint256 amount;\r\n    }\r\n    \r\n    struct Proposal {\r\n        uint256 expirationDate;\r\n        IERC20 token;\r\n        uint256 tokenPrice;\r\n        AdminStatus adminStatus;\r\n    }\r\n    \r\n    PolvenStaking public staking;\r\n    \r\n    uint256 public polvenPrice;\r\n    IERC20 public polven;\r\n    \r\n    Tier[] tiers;\r\n    mapping(uint256 => Proposal) public proposals;\r\n    \r\n    address burnAddress;\r\n    uint256 oneHundredPercent = 10000;\r\n    \r\n    constructor(address _staking, address _polven, uint256 _polvenPrice) public {\r\n        counter = 0;\r\n        staking = PolvenStaking(_staking);\r\n        polven = IERC20(_polven);\r\n        polvenPrice = _polvenPrice;\r\n        burnAddress = address(0x0000000000000000000000000000000000000000dEaD);\r\n    }\r\n    \r\n    function create(uint256 expirationDate, address token, uint256 tokenPrice) external onlyOwner {\r\n        require(expirationDate > block.timestamp, \"Incorrect expiration date\");\r\n        \r\n        if(counter > 0) {\r\n            require(getProposalStatus(counter) == ProposalStatus.CLOSED, \"The previous proposal is not over yet\");\r\n        }\r\n        \r\n        counter++;\r\n        \r\n        proposals[counter].expirationDate = expirationDate;\r\n        proposals[counter].token = IERC20(token);\r\n        proposals[counter].tokenPrice = tokenPrice;\r\n        proposals[counter].adminStatus = AdminStatus.OPEN;\r\n        \r\n        emit CreateProposal(expirationDate, token, tokenPrice);\r\n    }\r\n    \r\n    function swappFromPolven(uint256 _counter, uint256 polvensAmount) external {\r\n        require(counter > 0, \"Proposal has not been created yet\");\r\n        require(_counter == counter, \"Incorrect counter\");\r\n        require(getProposalStatus(counter) == ProposalStatus.OPEN, \"Proposal closed\");\r\n        require(polvensAmount > 0, \"Incorrect polvens amount\");\r\n        \r\n        uint256 tokensAmount;\r\n        uint256 discountPercentage;\r\n\r\n        (tokensAmount, discountPercentage) = calculateTokensAmount(msg.sender, polvensAmount);\r\n\r\n        require(polven.transferFrom(msg.sender, burnAddress, polvensAmount), \"Polven transfer failed\");\r\n        \r\n        require(proposals[counter].token.transfer(msg.sender, tokensAmount), \"Token transfer failed\");\r\n        \r\n        emit SwappFromPolven(msg.sender, polvensAmount, tokensAmount, discountPercentage, counter);\r\n    }\r\n    \r\n    function swappFromToken(uint256 _counter, uint256 tokensAmount) external {\r\n        require(counter > 0, \"Proposal has not been created yet\");\r\n        require(_counter == counter, \"Incorrect counter\");\r\n        require(getProposalStatus(counter) == ProposalStatus.OPEN, \"Proposal closed\");\r\n        require(tokensAmount > 0, \"Incorrect tokens amount\");\r\n        \r\n        uint256 polvensAmount;\r\n        uint256 discountPercentage;\r\n\r\n        (polvensAmount, discountPercentage) = calculatePolvensAmount(msg.sender, tokensAmount);\r\n        \r\n        require(polvensAmount > 0, \"Incorrect polvens amount\");\r\n        \r\n        require(polven.transferFrom(msg.sender, burnAddress, polvensAmount), \"Polven transfer failed\");\r\n        \r\n        require(proposals[counter].token.transfer(msg.sender, tokensAmount), \"Token transfer failed\");\r\n        \r\n        emit SwappFromToken(msg.sender, polvensAmount, tokensAmount, discountPercentage, counter);\r\n    }\r\n    \r\n    function calculateTokensAmount(address user, uint256 polvensAmount) public view returns(uint256, uint256) {\r\n        require(counter > 0, \"Proposal has not been created yet\");\r\n        int tierIndex = getAvailableTierIndex(user);\r\n        require(tierIndex >= 0, \"Not enough staked Polvens\");\r\n        \r\n        uint256 tokenPrice = proposals[counter].tokenPrice;\r\n        uint256 discountPercentage = tiers[uint256(tierIndex)].percent;\r\n        \r\n        uint256 tokensAmount = polvensAmount.mul(polvenPrice).div(tokenPrice).mul(oneHundredPercent.add(discountPercentage)).div(oneHundredPercent);\r\n\r\n        return (tokensAmount, discountPercentage);\r\n    }\r\n    \r\n    function calculatePolvensAmount(address user, uint256 tokensAmount) public view returns(uint256, uint256) {\r\n        require(counter > 0, \"Proposal has not been created yet\");\r\n        int tierIndex = getAvailableTierIndex(user);\r\n        require(tierIndex >= 0, \"Not enough staked Polvens\");\r\n        \r\n        uint256 tokenPrice = proposals[counter].tokenPrice;\r\n        uint256 discountPercentage = tiers[uint256(tierIndex)].percent;\r\n        \r\n        uint256 polvensAmount = tokensAmount.mul(tokenPrice).div(polvenPrice).mul(oneHundredPercent.sub(discountPercentage)).div(oneHundredPercent);\r\n\r\n        return (polvensAmount, discountPercentage);\r\n    }\r\n\r\n    function getProposalByCounter(uint256 _counter) external view returns(uint256, IERC20, uint256, ProposalStatus) {\r\n        return (proposals[_counter].expirationDate, proposals[_counter].token, proposals[_counter].tokenPrice, getProposalStatus(_counter));\r\n    }\r\n    \r\n    function getLastProposal() external view returns(uint256, IERC20, uint256, ProposalStatus) {\r\n        return (proposals[counter].expirationDate, proposals[counter].token, proposals[counter].tokenPrice, getProposalStatus(counter));\r\n    }\r\n    \r\n    function getAvailableTierIndex(address user) public view returns(int) {\r\n        require(tiers.length > 0, \"No tiers available\");\r\n\r\n        uint256 stakingAmount = getStakingAmount(user);\r\n        for (int i = int(tiers.length) - 1; i >= 0; i--) {\r\n          if (stakingAmount >= tiers[uint(i)].amount) {\r\n            return int(i);\r\n          }\r\n        }\r\n        \r\n        return -1;\r\n    }\r\n    \r\n    function setPolvenPrice(uint256 _polvenPrice) public onlyOwner {\r\n        require(_polvenPrice > 0, \"Incorrect price\");\r\n        uint256 oldPolvenPrice = polvenPrice;\r\n        polvenPrice = _polvenPrice;\r\n        \r\n        emit SetPolvenPrice(oldPolvenPrice, _polvenPrice);\r\n    }\r\n    \r\n    function setTokenPrice(uint256 _tokenPrice) public onlyOwner {\r\n        require(_tokenPrice > 0, \"Incorrect price\");\r\n        require(counter > 0, \"Proposal has not been created yet\");\r\n        uint256 oldTokenPrice = proposals[counter].tokenPrice;\r\n        proposals[counter].tokenPrice = _tokenPrice;\r\n        \r\n        emit SetTokenPrice(oldTokenPrice, _tokenPrice);\r\n    }\r\n    \r\n    function setPrices(uint256 _polvenPrice, uint256 _tokenPrice) external onlyOwner {\r\n        setPolvenPrice(_polvenPrice);\r\n        setTokenPrice(_tokenPrice);\r\n    }\r\n    \r\n    function getTiers() external view returns(Tier[] memory) {\r\n        return tiers;\r\n    }\r\n    \r\n    function getTiersLength() external view returns(uint) {\r\n        return tiers.length;\r\n    }\r\n    \r\n    function getTierByIndex(uint index) external view returns(string memory title, uint percent, uint256 amount) {\r\n        return (tiers[index].title, tiers[index].percent, tiers[index].amount);\r\n    }\r\n    \r\n    function addTier(string memory title, uint256 percent, uint256 amount) public onlyOwner {\r\n        require(percent > 0, \"Percent must be greater than 0\");\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        \r\n        if(tiers.length > 0) {\r\n            require(percent > tiers[tiers.length - 1].percent, \"Percent must be greater than the previous value\");\r\n            require(amount > tiers[tiers.length - 1].amount, \"Amount must be greater than the previous value\");\r\n        }\r\n        \r\n        tiers.push(Tier(title, percent, amount));\r\n        \r\n        emit NewTier(title, percent, amount);\r\n    }\r\n    \r\n    function deleteTier(uint index) public onlyOwner {\r\n        require(index < tiers.length, \"Incorrect index\");\r\n        \r\n        Tier memory deletedTier = tiers[index];\r\n        \r\n        for (uint i = index; i < tiers.length - 1; i++){\r\n            tiers[i] = tiers[i+1];\r\n        }\r\n        tiers.pop();\r\n        \r\n        emit DeleteTier(index, deletedTier.title, deletedTier.percent, deletedTier.amount);\r\n    }\r\n    \r\n    function updateTier(uint index, string memory title, uint256 percent, uint256 amount) public onlyOwner {\r\n        require(tiers.length > 0, \"Array is empty\");\r\n        require(index < tiers.length, \"Incorrect index\");\r\n        \r\n        require(percent > 0, \"Percent must be greater than 0\");\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        \r\n        // if update first element of array\r\n        if(index == 0 && tiers.length > 1) {\r\n            require(percent < tiers[1].percent, \"Percent must be less than the next value\");\r\n            require(amount < tiers[1].amount, \"Amount must be less than the next value\");\r\n        }\r\n        \r\n        // if updated last element of array\r\n        if(index == tiers.length - 1 && tiers.length > 1) {\r\n            require(percent > tiers[tiers.length - 2].percent, \"Percent must be greater than the previous value\");\r\n            require(amount > tiers[tiers.length - 2].amount, \"Amount must be greater than the previous value\");\r\n        }\r\n        \r\n        if(index > 0 && index < tiers.length - 1) {\r\n            require(percent < tiers[index + 1].percent, \"Percent must be less than the next value\");\r\n            require(amount < tiers[index + 1].amount, \"Amount must be less than the next value\");\r\n            require(percent > tiers[index - 1].percent, \"Percent must be greater than the previous value\");\r\n            require(amount > tiers[index - 1].amount, \"Amount must be greater than the previous value\");\r\n        }\r\n        \r\n        Tier memory updatedTier = tiers[index];\r\n        \r\n        tiers[index].title = title;\r\n        tiers[index].percent = percent;\r\n        tiers[index].amount = amount;\r\n        \r\n        emit UpdateTier(index, updatedTier.title, updatedTier.percent, updatedTier.amount, title, percent, amount);\r\n    }\r\n    \r\n    function transferStuckERC20(IERC20 _token, address _to, uint256 _amount) external onlyOwner {\r\n        require(_token.transfer(_to, _amount), \"Token: Transfer failed\");\r\n        \r\n        emit TransferStuckERC20(_token, _to, _amount);\r\n    }\r\n    \r\n    function closeLastProposal() external onlyOwner {\r\n        proposals[counter].adminStatus = AdminStatus.CLOSED;\r\n        \r\n        emit CloseProposal(counter);\r\n    }\r\n    \r\n    function getStakingAmount(address user) private view returns(uint256) {\r\n        Stake memory userStakes = staking.userStakes(user);\r\n        StakeTimeframe memory userStakesTimeframe = staking.userStakesTimeframe(user);\r\n        return userStakes.amount + userStakesTimeframe.amount;\r\n    }\r\n    \r\n    function getProposalStatus(uint256 _counter) private view returns(ProposalStatus) {\r\n        if(proposals[_counter].adminStatus == AdminStatus.CLOSED) {\r\n            return ProposalStatus.CLOSED;\r\n        }\r\n     \r\n        if(proposals[_counter].expirationDate <= block.timestamp) {\r\n            return ProposalStatus.CLOSED;\r\n        }\r\n     \r\n        return ProposalStatus.OPEN;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_polven\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_polvenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"name\":\"CloseProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"name\":\"CreateProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DeleteTier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewTier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPolvenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPolvenPrice\",\"type\":\"uint256\"}],\"name\":\"SetPolvenPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTokenPrice\",\"type\":\"uint256\"}],\"name\":\"SetTokenPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"polvenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discountPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"name\":\"SwappFromPolven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"polvenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discountPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"name\":\"SwappFromToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferStuckERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldTitle\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newTitle\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateTier\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"calculatePolvensAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"polvensAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTokensAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeLastProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"deleteTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAvailableTierIndex\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum ClubDealSwap.ProposalStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_counter\",\"type\":\"uint256\"}],\"name\":\"getProposalByCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum ClubDealSwap.ProposalStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTierByIndex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTiers\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ClubDealSwap.Tier[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTiersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polven\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polvenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"enum ClubDealSwap.AdminStatus\",\"name\":\"adminStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_polvenPrice\",\"type\":\"uint256\"}],\"name\":\"setPolvenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_polvenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract PolvenStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_counter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"polvensAmount\",\"type\":\"uint256\"}],\"name\":\"swappFromPolven\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_counter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"swappFromToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferStuckERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ClubDealSwap","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009b887877f99d7696e0ca1d2da3b7e75fa11fd81e0000000000000000000000004a6ab9792e9f046c3ab22d8602450de5186be9a70000000000000000000000000000000000000000000000000000000000000007","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fa20498f0b2413561a048c8b5d5c4966702c3d30d8b0f8fc9953c606c8d28d4c"}]}