{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interface/ISkvllpvnkz.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ISkvllpvnkz {\r\n    function walletOfOwner(address _owner) external view returns(uint256[] memory);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/SkvllStore.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\nstruct Skvllpvnk{\r\n    bool isUsed;\r\n    address usedBy;\r\n}\r\n\r\nstruct Order{\r\n    bool isCancelled;\r\n    uint256 skvllpvnkId;\r\n}\r\n\r\ncontract SkvllMerchDrop1 is Ownable, ReentrancyGuard {\r\n    \r\n    event PublicSaleStarted();\r\n    event PublicSalePaused();\r\n    \r\n    ISkvllpvnkz private SkvllpvnkzHideout;\r\n\r\n    uint256 private _bundlePrice = 0.035 ether;\r\n    \r\n    bool public _publicSale = false;\r\n    \r\n    mapping(uint256 => Skvllpvnk) private usedSkvllpvnkz;\r\n    mapping(address => Order[]) private orders;\r\n    \r\n    constructor(address skvllpvnkzAddress) { \r\n        SkvllpvnkzHideout = ISkvllpvnkz(skvllpvnkzAddress);\r\n    }\r\n    \r\n    function purchaseBundle(uint256 skvllpvnkId) external payable nonReentrant {\r\n        require( _publicSale, \"Sale paused\" );\r\n        require( !usedSkvllpvnkz[skvllpvnkId].isUsed, \"This Skvllpvnk has already been used\");\r\n        require( msg.sender == SkvllpvnkzHideout.ownerOf( skvllpvnkId ), \"You do not own this Skvllpvnk\");\r\n        require( msg.value >= _bundlePrice, \"Not enough ETH\");\r\n        usedSkvllpvnkz[skvllpvnkId] = Skvllpvnk(true, msg.sender);\r\n        orders[msg.sender].push(Order(false, skvllpvnkId));\r\n    }\r\n\r\n    function publicSale(bool val) external onlyOwner {\r\n        _publicSale = val;\r\n        if (val) {\r\n            emit PublicSaleStarted();\r\n        } else {\r\n            emit PublicSalePaused();\r\n        }\r\n    }\r\n    \r\n    function unclaimedSkvllpvnkzCountIDs(address _owner) external view returns (uint256[] memory){\r\n        uint256[] memory tokenIds = SkvllpvnkzHideout.walletOfOwner( _owner );\r\n        uint256[] memory unusedTokenIds = new uint256[](unclaimedSkvllpvnkzCount(_owner));\r\n        uint256 j = 0;\r\n        for (uint256 i=0; i < tokenIds.length; i++){\r\n            if (!usedSkvllpvnkz[tokenIds[i]].isUsed) {\r\n                unusedTokenIds[j] = tokenIds[i];\r\n                j++;\r\n            }\r\n        }\r\n        return unusedTokenIds;\r\n    }\r\n    \r\n    function unclaimedSkvllpvnkzCount(address _owner) public view returns (uint256){\r\n        uint256[] memory tokenIds = SkvllpvnkzHideout.walletOfOwner( _owner );\r\n        uint256 count = 0;\r\n        for (uint256 i=0; i < tokenIds.length; i++){\r\n            if (!usedSkvllpvnkz[tokenIds[i]].isUsed) count++;\r\n        }\r\n        return count;\r\n    }\r\n    \r\n    function setPrice(uint256 price) external onlyOwner{\r\n        _bundlePrice = price;\r\n    }\r\n    \r\n    function getPrice() external view returns (uint256){\r\n        return _bundlePrice;\r\n    }\r\n    \r\n    function isClaimed(uint256 skvllpvnkId) external view returns(bool){\r\n        return usedSkvllpvnkz[skvllpvnkId].isUsed;\r\n    }\r\n    \r\n    function getUsedSkvllpvnk(uint256 skvllpvnkId) external view returns(Skvllpvnk memory){\r\n        return usedSkvllpvnkz[skvllpvnkId];\r\n    }\r\n    \r\n    function getOrder(address owner) external view returns (Order[] memory){\r\n        return orders[owner];\r\n    }\r\n    \r\n    function cancelOrder(uint256 skvllpvnkId, address owner) external onlyOwner{\r\n        for (uint256 i=0; i < orders[owner].length-1; i++){\r\n            if (orders[owner][i].skvllpvnkId == skvllpvnkId){\r\n                orders[owner][i].isCancelled = true;\r\n            }\r\n        }\r\n        usedSkvllpvnkz[skvllpvnkId].isUsed = false;\r\n    }\r\n    \r\n    function setSkvllpvnkzContractAddress(address _address) external onlyOwner {\r\n        SkvllpvnkzHideout = ISkvllpvnkz(_address);\r\n    }\r\n\r\n    function withdraw(uint256 amount) external payable onlyOwner {\r\n        require(payable(msg.sender).send(amount));\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"skvllpvnkzAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PublicSalePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PublicSaleStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_publicSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"skvllpvnkId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isCancelled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"skvllpvnkId\",\"type\":\"uint256\"}],\"internalType\":\"struct Order[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"skvllpvnkId\",\"type\":\"uint256\"}],\"name\":\"getUsedSkvllpvnk\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isUsed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"usedBy\",\"type\":\"address\"}],\"internalType\":\"struct Skvllpvnk\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"skvllpvnkId\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"publicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"skvllpvnkId\",\"type\":\"uint256\"}],\"name\":\"purchaseBundle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSkvllpvnkzContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"unclaimedSkvllpvnkzCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"unclaimedSkvllpvnkzCountIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"SkvllMerchDrop1","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b28a4fde7b6c3eb0c914d7b4d3ddb4544c3bcbd6","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ba4203bdd23a31ec06fb70aa7351215a31142e6c01e57b48de6e74679af4ecbc"}]}