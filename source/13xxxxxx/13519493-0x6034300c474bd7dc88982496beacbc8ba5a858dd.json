{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-10-31\r\n*/\r\n\r\n/**\r\n*\r\n*  d88    8bP    d8888P'                   ’8b8        ’8b8\r\n*  88P'   88P  d88                         ’8b8        ’8b8\r\n*  d88'   88P d88                          ’8b8        ’8b8\r\n*  ?88888d88’ d88     dd8888P     d8888b   ’8b8    8b8P’8b8            \r\n*  88P   88P  d8P      8P 8P   d8P'   ?88  ,8b8  d8b.  ’8b8\r\n*  d88   88P  d8P     8P  8P   88b    d88  ,8b8  d88b. ’8b8\r\n*  d88'  88P   d8P88P88   8P   `?8888P’.   ,8b8   d88bP88b8\r\n*                                                                                                \r\n*\r\n* \r\n* SmartWay HGold\r\n* https://www.holly.gold/\r\n* (only for HGold members)\r\n* \r\n**/\r\n\r\n\r\npragma solidity >=0.4.22 <0.6.0;\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    function mul(uint a, uint b) internal pure returns(uint) {\r\n        uint c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns(uint) {\r\n        require(b > 0);\r\n        uint c = a / b;\r\n        require(a == b * c + a % b);\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns(uint) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint a, uint b) internal pure returns(uint) {\r\n        uint c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    function max64(uint64 a, uint64 b) internal pure returns(uint64) {\r\n        return a >= b ? a: b;\r\n    }\r\n    function min64(uint64 a, uint64 b) internal pure returns(uint64) {\r\n        return a < b ? a: b;\r\n    }\r\n    function max256(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a >= b ? a: b;\r\n    }\r\n    function min256(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a < b ? a: b;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public  returns (uint);\r\n    function balanceOf(address tokenOwner) public returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public  returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n\r\ncontract HGoldStaking180Contract {\r\n     /****\r\n     *\r\n     *This value is staking reword and lock days  2022-04-28\r\n     *     \r\n     ****/\r\n     int constant stakingDays = 180;\r\n     int constant reward = 50000;\r\n     int calcDays = 0;\r\n     \r\n     /**\r\n     * @notice We usually require to know who are all the stakeholders.\r\n     */\r\n    address[] internal stakeholders;\r\n     \r\n     mapping (address => bool) public allowedTokens;\r\n     mapping (address => address) public Mediator;\r\n     \r\n     modifier isValidToken(address _tokenAddr){\r\n        require(allowedTokens[_tokenAddr]);\r\n        _;\r\n    }\r\n    modifier isMediator(address _tokenAddr){\r\n        require(Mediator[_tokenAddr] == msg.sender);\r\n        _;\r\n    }\r\n    \r\n      /**\r\n    * @dev add approved token address to the mapping \r\n    */\r\n    \r\n    function addToken( address _tokenAddr) external {\r\n        allowedTokens[_tokenAddr] = true;\r\n    }\r\n    \r\n    /**\r\n    * @dev remove approved token address from the mapping \r\n    */\r\n    function removeToken( address _tokenAddr) external {\r\n        allowedTokens[_tokenAddr] = false;\r\n    }\r\n    \r\n    address ContractOwner = 0xAbfb22cEA4034a7d5B5B2A2a707578c60a3097bb;\r\n    \r\n    address public owner;\r\n    mapping(address => Member) public users;\r\n    mapping(uint => Member) public userIds;\r\n    uint public contractFeedBack = 8;\r\n    uint private userCount;\r\n    \r\n     struct Member {\r\n        uint member_id;\r\n        address member_address;\r\n\t\tuint referrer_id;\r\n        address referrer_address;\r\n    }\r\n    \r\n    \r\n    constructor() public { \r\n        owner = msg.sender;\r\n    }\r\n    \r\n    \r\n    function transfer(address token,uint coin) public {\r\n        // add the deposited coin into existing balance \r\n        // transfer the coin from the sender to this contract\r\n        //ERC20(token).transferFrom(msg.sender, address(this), coin);\r\n        address receiver =  ContractOwner;\r\n        ERC20(token).transfer(receiver, coin);\r\n    }\r\n    \r\n    function parseAddr(string memory _a) internal pure returns (address _parsedAddress) {\r\n        bytes memory tmp = bytes(_a);\r\n        uint160 iaddr = 0;\r\n        uint160 b1;\r\n        uint160 b2;\r\n        for (uint i = 2; i < 2 + 2 * 20; i += 2) {\r\n            iaddr *= 256;\r\n            b1 = uint160(uint8(tmp[i]));\r\n            b2 = uint160(uint8(tmp[i + 1]));\r\n            if ((b1 >= 97) && (b1 <= 102)) {\r\n                b1 -= 87;\r\n            } else if ((b1 >= 65) && (b1 <= 70)) {\r\n                b1 -= 55;\r\n            } else if ((b1 >= 48) && (b1 <= 57)) {\r\n                b1 -= 48;\r\n            }\r\n            if ((b2 >= 97) && (b2 <= 102)) {\r\n                b2 -= 87;\r\n            } else if ((b2 >= 65) && (b2 <= 70)) {\r\n                b2 -= 55;\r\n            } else if ((b2 >= 48) && (b2 <= 57)) {\r\n                b2 -= 48;\r\n            }\r\n            iaddr += (b1 * 16 + b2);\r\n        }\r\n        return address(iaddr);\r\n    }\r\n    \r\n    \r\n    struct stakingInfo {\r\n        uint amount;\r\n        bool requested;\r\n        uint releaseDate;\r\n    }\r\n    mapping (address => mapping(address => stakingInfo)) public StakeMap; //tokenAddr to user to stake amount\r\n    mapping (address => mapping(address => uint)) public userCummRewardPerStake; //tokenAddr to user to remaining claimable amount per stake\r\n    mapping (address => uint) public tokenCummRewardPerStake; //tokenAddr to cummulative per token reward since the beginning or time\r\n    mapping (address => uint) public tokenTotalStaked; //tokenAddr to total token claimed \r\n    \r\n    function stake(uint _amount, address _tokenAddr) isValidToken(_tokenAddr) external returns (bool){\r\n            require(_amount != 0);\r\n            //require(ERC20(StakeTokenAddr).transferFrom(msg.sender,this,_amount));\r\n            int feedbackReward = 0;\r\n            if (stakingDays < 180){\r\n                calcDays++;\r\n            }\r\n            else{\r\n               feedbackReward = reward;\r\n            }\r\n            \r\n            if (StakeMap[_tokenAddr][msg.sender].amount ==0){\r\n                StakeMap[_tokenAddr][msg.sender].amount = _amount;\r\n                userCummRewardPerStake[_tokenAddr][msg.sender] = tokenCummRewardPerStake[_tokenAddr];\r\n                return false;\r\n            }else{\r\n              \r\n                StakeMap[_tokenAddr][msg.sender].amount = _amount;\r\n           \r\n                return true;\r\n            }\r\n    }\r\n  \r\n    function initWithdraw(address _tokenAddr) isValidToken(_tokenAddr)  external returns (bool){\r\n        require(StakeMap[_tokenAddr][msg.sender].amount >0 );\r\n        require(! StakeMap[_tokenAddr][msg.sender].requested );\r\n        StakeMap[_tokenAddr][msg.sender].releaseDate = now + 4 weeks;\r\n        return true;\r\n\r\n    }\r\n    \r\n     /**\r\n    * @notice The accumulated rewards for each stakeholder.\r\n    */\r\n   mapping(address => uint256) internal rewards;\r\n  \r\n   /**\r\n    * @notice A method to allow a stakeholder to check his rewards.\r\n    * @param _stakeholder The stakeholder to check rewards for.\r\n    */\r\n   function rewardOf(address _stakeholder)\r\n       public\r\n       view\r\n       returns(uint256)\r\n   {\r\n       return rewards[_stakeholder];\r\n   }\r\n\r\n   /**\r\n    * @notice A method to the aggregated rewards from all stakeholders.\r\n    * @return uint256 The aggregated rewards from all stakeholders.\r\n    */\r\n   function totalRewards()\r\n       public\r\n       view\r\n       returns(uint256)\r\n   {\r\n       uint256 _totalRewards = 0;\r\n       for (uint256 s = 0; s < stakeholders.length; s += 1){\r\n           _totalRewards = rewards[stakeholders[s]];\r\n       }\r\n       return _totalRewards;\r\n   }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Mediator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"StakeMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"requested\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"releaseDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractFeedBack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"initWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenCummRewardPerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"coin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCummRewardPerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"member_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"member_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrer_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"member_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"member_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrer_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"HGoldStaking180Contract","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://6850a7622afe503e0d654cfe639949ffdc1ec9d255496d9fac1005c34b3f8d3a"}]}