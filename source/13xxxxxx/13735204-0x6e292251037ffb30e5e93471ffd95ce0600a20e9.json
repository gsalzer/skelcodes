{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev LEEDO NFT Ownership Proxy\r\n *\r\n *  _              ______      \r\n * | |             |  _  \\     \r\n * | |     ___  ___| | | |___  \r\n * | |    / _ \\/ _ \\ | | / _ \\ \r\n * | |___|  __/  __/ |/ / (_) |\r\n * \\_____/\\___|\\___|___/ \\___/ \r\n * LEEDO Project\r\n */\r\n\r\ninterface INft {\r\n\r\n    function ownerOf(uint tokenId) external view returns (address owner);\r\n    function tokensOf(address account) external view returns (uint[] memory);\r\n    function balanceOf(address account) external view returns (uint256); \r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\r\n    \r\n}\r\n\r\ninterface ILeedoERC20 {\r\n    function claims(uint _season, uint _tokenId) external view returns (bool);\r\n    function claimBlocksRequired() external view returns (uint);\r\n    function season() external view returns (uint);\r\n}\r\n\r\ninterface ILeedoNftVault {\r\n    function ownerOf(uint tokenId) external view returns (address owner);\r\n    function lastBlocks(address addr) external view returns (uint black);\r\n    function tokensOf(address _account) external view returns (uint[] memory);\r\n}\r\n\r\n\r\ncontract NftOwner {\r\n    \r\n    address public nftAddr;\r\n    address public nftVaultAddr;\r\n    address public erc20Addr;\r\n    \r\n\r\n    constructor(address _nftAddr, address _nftVaultAddr, address _erc20Addr) {\r\n        nftAddr = _nftAddr;\r\n        nftVaultAddr = _nftVaultAddr;\r\n        erc20Addr = _erc20Addr;\r\n    }\r\n    \r\n    function ownerOf(uint _tokenId) external view returns (address) {\r\n        INft NFT = INft(nftAddr);\r\n        if (NFT.ownerOf(_tokenId) == nftVaultAddr) {\r\n            INft Vault = INft(nftVaultAddr);\r\n            return Vault.ownerOf(_tokenId);\r\n        } else {\r\n            return NFT.ownerOf(_tokenId);\r\n        }\r\n    }\r\n\r\n    function tokensOf(address _account, bool staked) external view returns (uint[] memory) {\r\n        if(staked) {\r\n            return INft(nftVaultAddr).tokensOf(_account);\r\n        } else {\r\n            INft nft = INft(nftAddr);\r\n            uint count = nft.balanceOf(_account);\r\n            uint[] memory tokenIds = new uint256[] (count);\r\n            for(uint i=0; i < count; i++) {\r\n                tokenIds[i] = nft.tokenOfOwnerByIndex(_account, i);\r\n            }\r\n            return tokenIds;\r\n        }\r\n    }\r\n\r\n    function getUnclaims(address _addr) external view returns (uint[] memory) {\r\n        ILeedoNftVault vault = ILeedoNftVault(nftVaultAddr);\r\n        ILeedoERC20 erc20 = ILeedoERC20(erc20Addr);\r\n        require(vault.lastBlocks(_addr) + erc20.claimBlocksRequired() < block.number, 'ERC20: does not meet claimBlockRequired');\r\n        uint[] memory sTokens = vault.tokensOf(_addr);\r\n        for(uint i=0; i<sTokens.length; i++) {\r\n            if (erc20.claims(erc20.season(), sTokens[i])) {\r\n                delete sTokens[i];\r\n            }\r\n        }\r\n        return sTokens;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftVaultAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc20Addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"erc20Addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUnclaims\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftVaultAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"}],\"name\":\"tokensOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"NftOwner","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000be5c953dd0ddb0ce033a98f36c981f1b74d3b33f0000000000000000000000000866f2af4cf0b601a1a2c4ebd56cbb954a1cf0040000000000000000000000003eede143adb9a80c6a44c63dad76269d33e2c8d1","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4a583dc5bc7e626e79c919e699a3f13580c187b0ddf61dd0888df19182fe5b68"}]}