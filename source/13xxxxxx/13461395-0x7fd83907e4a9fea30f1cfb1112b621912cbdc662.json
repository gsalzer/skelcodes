{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IBaseFee {\r\n    function basefee_global() external view returns (uint256);\r\n}\r\n\r\ncontract BaseFeeTest {\r\n    // Provider to read current block's base fee\r\n    IBaseFee internal constant baseFeeProvider = IBaseFee(0xf8d0Ec04e94296773cE20eFbeeA82e76220cD549);\r\n\r\n    // Max acceptable base fee to take more debt or harvest\r\n    uint256 public maxAcceptableBaseFee;\r\n\r\n    constructor() public {\r\n        maxAcceptableBaseFee = 60 * 1e9;\r\n    }\r\n    \r\n    function setMaxAcceptableBaseFee(uint256 _maxAcceptableBaseFee) external {\r\n        maxAcceptableBaseFee = _maxAcceptableBaseFee;\r\n    }\r\n    \r\n    // Check if current block's base fee is under max allowed base fee\r\n    function isCurrentBaseFeeAcceptable() public view returns (bool) {\r\n        uint256 baseFee;\r\n        try baseFeeProvider.basefee_global() returns (uint256 currentBaseFee) {\r\n            baseFee = currentBaseFee;\r\n        } catch {\r\n            // Useful for testing until ganache supports london fork\r\n            // Hard-code current base fee to 1000 gwei\r\n            // This should also help keepers that run in a fork without\r\n            // baseFee() to avoid reverting and potentially abandoning the job\r\n            baseFee = 1000 * 1e9;\r\n        }\r\n\r\n        return baseFee <= maxAcceptableBaseFee;\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"isCurrentBaseFeeAcceptable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAcceptableBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAcceptableBaseFee\",\"type\":\"uint256\"}],\"name\":\"setMaxAcceptableBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BaseFeeTest","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dc69d827b518b3f9a9bcc15e63ff6f965ef7fd0284c8bf50350daf1b01fce0c1"}]}