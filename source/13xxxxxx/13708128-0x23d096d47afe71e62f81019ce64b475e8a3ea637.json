{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Stats/Stats.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./ITokenPairPriceFeed.sol\\\";\\nimport \\\"./ChainlinkTokenPairPriceFeed/ChainlinkTokenPairPriceFeed.sol\\\";\\nimport \\\"../ITempusPool.sol\\\";\\nimport \\\"../math/Fixed256xVar.sol\\\";\\nimport \\\"../token/PoolShare.sol\\\";\\nimport \\\"../amm/interfaces/ITempusAMM.sol\\\";\\nimport \\\"../utils/AMMBalancesHelper.sol\\\";\\n\\ncontract Stats is ITokenPairPriceFeed, ChainlinkTokenPairPriceFeed {\\n    using Fixed256xVar for uint256;\\n    using AMMBalancesHelper for uint256[];\\n\\n    /// @param pool The TempusPool to fetch its TVL (total value locked)\\n    /// @return total value locked of a TempusPool (denominated in BackingTokens)\\n    function totalValueLockedInBackingTokens(ITempusPool pool) public view returns (uint256) {\\n        PoolShare principalShare = PoolShare(address(pool.principalShare()));\\n        PoolShare yieldShare = PoolShare(address(pool.yieldShare()));\\n\\n        uint256 backingTokenOne = pool.backingTokenONE();\\n\\n        uint256 pricePerPrincipalShare = pool.pricePerPrincipalShareStored();\\n        uint256 pricePerYieldShare = pool.pricePerYieldShareStored();\\n\\n        return\\n            calculateTvlInBackingTokens(\\n                IERC20(address(principalShare)).totalSupply(),\\n                IERC20(address(yieldShare)).totalSupply(),\\n                pricePerPrincipalShare,\\n                pricePerYieldShare,\\n                backingTokenOne\\n            );\\n    }\\n\\n    /// @param pool The TempusPool to fetch its TVL (total value locked)\\n    /// @param rateConversionData ENS nameHash of the ENS name of a Chainlink price aggregator (e.g. - the ENS nameHash of 'eth-usd.data.eth')\\n    /// @return total value locked of a TempusPool (denominated in the rate of the provided token pair)\\n    function totalValueLockedAtGivenRate(ITempusPool pool, bytes32 rateConversionData) external view returns (uint256) {\\n        uint256 tvlInBackingTokens = totalValueLockedInBackingTokens(pool);\\n\\n        (uint256 rate, uint256 rateDenominator) = getRate(rateConversionData);\\n        return (tvlInBackingTokens * rate) / rateDenominator;\\n    }\\n\\n    function calculateTvlInBackingTokens(\\n        uint256 totalSupplyTPS,\\n        uint256 totalSupplyTYS,\\n        uint256 pricePerPrincipalShare,\\n        uint256 pricePerYieldShare,\\n        uint256 backingTokenOne\\n    ) internal pure returns (uint256) {\\n        return\\n            totalSupplyTPS.mulfV(pricePerPrincipalShare, backingTokenOne) +\\n            totalSupplyTYS.mulfV(pricePerYieldShare, backingTokenOne);\\n    }\\n\\n    /// Gets the estimated amount of Principals and Yields after a successful deposit\\n    /// @param pool Which tempus pool\\n    /// @param amount Amount of BackingTokens or YieldBearingTokens that would be deposited\\n    /// @param isBackingToken If true, @param amount is in BackingTokens, otherwise YieldBearingTokens\\n    /// @return Amount of Principals (TPS) and Yields (TYS) in Principal/YieldShare decimal precision.\\n    ///         TPS and TYS are minted in 1:1 ratio, hence a single return value.\\n    function estimatedMintedShares(\\n        ITempusPool pool,\\n        uint256 amount,\\n        bool isBackingToken\\n    ) public view returns (uint256) {\\n        return pool.estimatedMintedShares(amount, isBackingToken);\\n    }\\n\\n    /// Gets the estimated amount of YieldBearingTokens or BackingTokens received when calling `redeemXXX()` functions\\n    /// @param pool Which tempus pool\\n    /// @param principals Amount of Principals (TPS)\\n    /// @param yields Amount of Yields (TYS)\\n    /// @param toBackingToken If true, redeem amount is estimated in BackingTokens instead of YieldBearingTokens\\n    /// @return Amount of YieldBearingTokens or BackingTokens in YBT/BT decimal precision\\n    function estimatedRedeem(\\n        ITempusPool pool,\\n        uint256 principals,\\n        uint256 yields,\\n        bool toBackingToken\\n    ) public view returns (uint256) {\\n        return pool.estimatedRedeem(principals, yields, toBackingToken);\\n    }\\n\\n    /// Gets the estimated amount of Shares and Lp token amounts\\n    /// @param tempusAMM Tempus AMM to use to swap TYS for TPS\\n    /// @param amount Amount of BackingTokens or YieldBearingTokens that would be deposited\\n    /// @param isBackingToken If true, @param amount is in BackingTokens, otherwise YieldBearingTokens\\n    /// @return lpTokens Ampunt of LP tokens that user could receive\\n    /// @return principals Amount of Principals that user could receive in this action\\n    /// @return yields Amount of Yields that user could receive in this action\\n    function estimatedDepositAndProvideLiquidity(\\n        ITempusAMM tempusAMM,\\n        uint256 amount,\\n        bool isBackingToken\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 lpTokens,\\n            uint256 principals,\\n            uint256 yields\\n        )\\n    {\\n        ITempusPool pool = tempusAMM.tempusPool();\\n        uint256 shares = estimatedMintedShares(pool, amount, isBackingToken);\\n\\n        (IERC20[] memory ammTokens, uint256[] memory ammBalances, ) = tempusAMM.getVault().getPoolTokens(\\n            tempusAMM.getPoolId()\\n        );\\n        uint256[] memory ammLiquidityProvisionAmounts = ammBalances.getLiquidityProvisionSharesAmounts(shares);\\n\\n        lpTokens = tempusAMM.getExpectedLPTokensForTokensIn(ammLiquidityProvisionAmounts);\\n        (principals, yields) = (address(pool.principalShare()) == address(ammTokens[0]))\\n            ? (shares - ammLiquidityProvisionAmounts[0], shares - ammLiquidityProvisionAmounts[1])\\n            : (shares - ammLiquidityProvisionAmounts[1], shares - ammLiquidityProvisionAmounts[0]);\\n    }\\n\\n    /// Gets the estimated amount of Shares and Lp token amounts\\n    /// @param tempusAMM Tempus AMM to use to swap TYS for TPS\\n    /// @param amount Amount of BackingTokens or YieldBearingTokens that would be deposited\\n    /// @param isBackingToken If true, @param amount is in BackingTokens, otherwise YieldBearingTokens\\n    /// @return principals Amount of Principals that user could receive in this action\\n    function estimatedDepositAndFix(\\n        ITempusAMM tempusAMM,\\n        uint256 amount,\\n        bool isBackingToken\\n    ) public view returns (uint256 principals) {\\n        principals = estimatedMintedShares(tempusAMM.tempusPool(), amount, isBackingToken);\\n        principals += tempusAMM.getExpectedReturnGivenIn(principals, true);\\n    }\\n\\n    /// @dev Get estimated amount of Backing or Yield bearing tokens for exiting pool and redeeming shares\\n    /// @notice This queries at certain block, actual results can differ as underlying pool state can change\\n    /// @param tempusAMM Tempus AMM to exit LP tokens from\\n    /// @param lpTokens Amount of LP tokens to use to query exit\\n    /// @param principals Amount of principals to query redeem\\n    /// @param yields Amount of yields to query redeem\\n    /// @param threshold Maximum amount of Principals or Yields to be left in case of early exit\\n    /// @param toBackingToken If exit is to backing or yield bearing token\\n    /// @return tokenAmount Amount of yield bearing or backing token user can get\\n    /// @return principalsStaked Amount of Principals that can be redeemed for `lpTokens`\\n    /// @return yieldsStaked Amount of Yields that can be redeemed for `lpTokens`\\n    /// @return principalsRate Rate on which Principals were swapped to end with equal shares\\n    /// @return yieldsRate Rate on which Yields were swapped to end with equal shares\\n    function estimateExitAndRedeem(\\n        ITempusAMM tempusAMM,\\n        uint256 lpTokens,\\n        uint256 principals,\\n        uint256 yields,\\n        uint256 threshold,\\n        bool toBackingToken\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 tokenAmount,\\n            uint256 principalsStaked,\\n            uint256 yieldsStaked,\\n            uint256 principalsRate,\\n            uint256 yieldsRate\\n        )\\n    {\\n        if (lpTokens > 0) {\\n            (principalsStaked, yieldsStaked) = tempusAMM.getExpectedTokensOutGivenBPTIn(lpTokens);\\n            principals += principalsStaked;\\n            yields += yieldsStaked;\\n        }\\n\\n        // before maturity we need to have equal amount of shares to redeem\\n        if (!tempusAMM.tempusPool().matured()) {\\n            bool yieldsIn = yields > principals;\\n            uint256 amountIn = tempusAMM.getSwapAmountToEndWithEqualShares(principals, yields, threshold);\\n            uint256 amountOut = (amountIn != 0) ? tempusAMM.getExpectedReturnGivenIn(amountIn, yieldsIn) : 0;\\n            if (amountIn > 0) {\\n                if (yieldsIn) {\\n                    // we need to swap some yields as we have more yields\\n                    principals += amountOut;\\n                    yields -= amountIn;\\n                    yieldsRate = amountOut.divfV(amountIn, tempusAMM.tempusPool().backingTokenONE());\\n                } else {\\n                    // we need to swap some principals as we have more principals\\n                    principals -= amountIn;\\n                    yields += amountOut;\\n                    principalsRate = amountOut.divfV(amountIn, tempusAMM.tempusPool().backingTokenONE());\\n                }\\n            }\\n\\n            // we need to equal out amounts that are being redeemed as this is early redeem\\n            if (principals > yields) {\\n                principals = yields;\\n            } else {\\n                yields = principals;\\n            }\\n        }\\n\\n        tokenAmount = estimatedRedeem(tempusAMM.tempusPool(), principals, yields, toBackingToken);\\n    }\\n\\n    /// @dev Get estimated amount of Backing or Yield bearing tokens for exiting pool and redeeming shares,\\n    ///      including previously staked Principals and Yields\\n    /// @notice This queries at certain block, actual results can differ as underlying pool state can change\\n    /// @param tempusAMM Tempus AMM to exit LP tokens from\\n    /// @param principals Amount of principals to query redeem\\n    /// @param yields Amount of yields to query redeem\\n    /// @param principalsStaked Amount of staked principals to query redeem\\n    /// @param yieldsStaked Amount of staked yields to query redeem\\n    /// @param toBackingToken If exit is to backing or yield bearing token\\n    /// @return tokenAmount Amount of yield bearing or backing token user can get,\\n    ///                     in Yield Bearing or Backing Token precision, depending on `toBackingToken`\\n    /// @return lpTokensRedeemed Amount of LP tokens that are redeemed to get `principalsStaked` and `yieldsStaked`,\\n    ///                          in AMM decimal precision (1e18)\\n    function estimateExitAndRedeemGivenStakedOut(\\n        ITempusAMM tempusAMM,\\n        uint256 principals,\\n        uint256 yields,\\n        uint256 principalsStaked,\\n        uint256 yieldsStaked,\\n        bool toBackingToken\\n    ) public view returns (uint256 tokenAmount, uint256 lpTokensRedeemed) {\\n        require(!tempusAMM.tempusPool().matured(), \\\"Pool already finalized!\\\");\\n\\n        if (principalsStaked > 0 || yieldsStaked > 0) {\\n            lpTokensRedeemed = tempusAMM.getExpectedBPTInGivenTokensOut(principalsStaked, yieldsStaked);\\n            principals += principalsStaked;\\n            yields += yieldsStaked;\\n        }\\n\\n        tokenAmount = estimatedRedeem(tempusAMM.tempusPool(), principals, yields, toBackingToken);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/Stats/ITokenPairPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\ninterface ITokenPairPriceFeed {\\n    /// Fetches the rate between a given token pair\\n    /// @param rateConversionData Data that specifies the target tokens (each ITokenPairPriceFeed might have different input requirements)\\n    /// @return rate The rate between the provided tokens\\n    /// @return rateDenominator The denominator (scale) for the result\\n    function getRate(bytes32 rateConversionData) external view returns (uint256 rate, uint256 rateDenominator);\\n}\\n\"\r\n    },\r\n    \"contracts/Stats/ChainlinkTokenPairPriceFeed/ChainlinkTokenPairPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"./IChainlinkAggregator.sol\\\";\\nimport \\\"./IENS.sol\\\";\\nimport \\\"../ITokenPairPriceFeed.sol\\\";\\n\\nabstract contract ChainlinkTokenPairPriceFeed is ITokenPairPriceFeed {\\n    // The ENS registry (same for mainnet and all major testnets)\\n    //\\n    // See https://docs.chain.link/docs/ens/. This may need to be updated should Chainlink deploy\\n    // on other networks with a different ENS address.\\n    IENS private constant ENS = IENS(0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e);\\n\\n    function getRate(bytes32 chainlinkAggregatorNodeHash)\\n        public\\n        view\\n        override\\n        returns (uint256 rate, uint256 rateDenominator)\\n    {\\n        IENSResolver ensResolver = ENS.resolver(chainlinkAggregatorNodeHash);\\n        IChainlinkAggregator chainLinkAggregator = IChainlinkAggregator(ensResolver.addr(chainlinkAggregatorNodeHash));\\n\\n        (, int256 latestRate, , , ) = chainLinkAggregator.latestRoundData();\\n\\n        return (SafeCast.toUint256(latestRate), 10**chainLinkAggregator.decimals());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ITempusPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.7.6 <0.9.0;\\npragma abicoder v2;\\n\\nimport \\\"./token/IPoolShare.sol\\\";\\nimport \\\"./utils/IOwnable.sol\\\";\\n\\n/// Setting and transferring of fees are restricted to the owner.\\ninterface ITempusFees is IOwnable {\\n    /// The fees are in terms of yield bearing token (YBT).\\n    struct FeesConfig {\\n        uint256 depositPercent;\\n        uint256 earlyRedeemPercent;\\n        uint256 matureRedeemPercent;\\n    }\\n\\n    /// Returns the current fee configuration.\\n    function getFeesConfig() external view returns (FeesConfig memory);\\n\\n    /// Replace the current fee configuration with a new one.\\n    /// By default all the fees are expected to be set to zero.\\n    /// @notice This function can only be called by the owner.\\n    function setFeesConfig(FeesConfig calldata newFeesConfig) external;\\n\\n    /// @return Maximum possible fee percentage that can be set for deposit\\n    function maxDepositFee() external view returns (uint256);\\n\\n    /// @return Maximum possible fee percentage that can be set for early redeem\\n    function maxEarlyRedeemFee() external view returns (uint256);\\n\\n    /// @return Maximum possible fee percentage that can be set for mature redeem\\n    function maxMatureRedeemFee() external view returns (uint256);\\n\\n    /// Accumulated fees available for withdrawal.\\n    function totalFees() external view returns (uint256);\\n\\n    /// Transfers accumulated Yield Bearing Token (YBT) fees\\n    /// from this pool contract to `recipient`.\\n    /// @param recipient Address which will receive the specified amount of YBT\\n    /// @notice This function can only be called by the owner.\\n    function transferFees(address recipient) external;\\n}\\n\\n/// All state changing operations are restricted to the controller.\\ninterface ITempusPool is ITempusFees {\\n    /// @return The version of the pool.\\n    function version() external view returns (uint);\\n\\n    /// @return The name of underlying protocol, for example \\\"Aave\\\" for Aave protocol\\n    function protocolName() external view returns (bytes32);\\n\\n    /// This token will be used as a token that user can deposit to mint same amounts\\n    /// of principal and interest shares.\\n    /// @return The underlying yield bearing token.\\n    function yieldBearingToken() external view returns (address);\\n\\n    /// This is the address of the actual backing asset token\\n    /// in the case of ETH, this address will be 0\\n    /// @return Address of the Backing Token\\n    function backingToken() external view returns (address);\\n\\n    /// @return uint256 value of one backing token, in case of 18 decimals 1e18\\n    function backingTokenONE() external view returns (uint256);\\n\\n    /// @return This TempusPool's Tempus Principal Share (TPS)\\n    function principalShare() external view returns (IPoolShare);\\n\\n    /// @return This TempusPool's Tempus Yield Share (TYS)\\n    function yieldShare() external view returns (IPoolShare);\\n\\n    /// @return The TempusController address that is authorized to perform restricted actions\\n    function controller() external view returns (address);\\n\\n    /// @return Start time of the pool.\\n    function startTime() external view returns (uint256);\\n\\n    /// @return Maturity time of the pool.\\n    function maturityTime() external view returns (uint256);\\n\\n    /// @return True if maturity has been reached and the pool was finalized.\\n    function matured() external view returns (bool);\\n\\n    /// Finalizes the pool. This can only happen on or after `maturityTime`.\\n    /// Once finalized depositing is not possible anymore, and the behaviour\\n    /// redemption will change.\\n    ///\\n    /// Can be called by anyone and can be called multiple times.\\n    function finalize() external;\\n\\n    /// Yield bearing tokens deposit hook.\\n    /// @notice Deposit will fail if maturity has been reached.\\n    /// @notice This function can only be called by TempusController\\n    /// @notice This function assumes funds were already transferred to the TempusPool from the TempusController\\n    /// @param yieldTokenAmount Amount of yield bearing tokens to deposit in YieldToken decimal precision\\n    /// @param recipient Address which will receive Tempus Principal Shares (TPS) and Tempus Yield Shares (TYS)\\n    /// @return mintedShares Amount of TPS and TYS minted to `recipient`\\n    /// @return depositedBT The YBT value deposited, denominated as Backing Tokens\\n    /// @return fee The fee which was deducted (in terms of YBT)\\n    /// @return rate The interest rate at the time of the deposit\\n    function onDepositYieldBearing(uint256 yieldTokenAmount, address recipient)\\n        external\\n        returns (\\n            uint256 mintedShares,\\n            uint256 depositedBT,\\n            uint256 fee,\\n            uint256 rate\\n        );\\n\\n    /// Backing tokens deposit hook.\\n    /// @notice Deposit will fail if maturity has been reached.\\n    /// @notice This function can only be called by TempusController\\n    /// @notice This function assumes funds were already transferred to the TempusPool from the TempusController\\n    /// @param backingTokenAmount amount of Backing Tokens to be deposited to underlying protocol in BackingToken decimal precision\\n    /// @param recipient Address which will receive Tempus Principal Shares (TPS) and Tempus Yield Shares (TYS)\\n    /// @return mintedShares Amount of TPS and TYS minted to `recipient`\\n    /// @return depositedYBT The BT value deposited, denominated as Yield Bearing Tokens\\n    /// @return fee The fee which was deducted (in terms of YBT)\\n    /// @return rate The interest rate at the time of the deposit\\n    function onDepositBacking(uint256 backingTokenAmount, address recipient)\\n        external\\n        payable\\n        returns (\\n            uint256 mintedShares,\\n            uint256 depositedYBT,\\n            uint256 fee,\\n            uint256 rate\\n        );\\n\\n    /// Redeems yield bearing tokens from this TempusPool\\n    ///      msg.sender will receive the YBT\\n    ///      NOTE #1 Before maturity, principalAmount must equal to yieldAmount.\\n    ///      NOTE #2 This function can only be called by TempusController\\n    /// @param from Address to redeem its Tempus Shares\\n    /// @param principalAmount Amount of Tempus Principal Shares (TPS) to redeem for YBT in PrincipalShare decimal precision\\n    /// @param yieldAmount Amount of Tempus Yield Shares (TYS) to redeem for YBT in YieldShare decimal precision\\n    /// @param recipient Address to which redeemed YBT will be sent\\n    /// @return redeemableYieldTokens Amount of Yield Bearing Tokens redeemed to `recipient`\\n    /// @return fee The fee which was deducted (in terms of YBT)\\n    /// @return rate The interest rate at the time of the redemption\\n    function redeem(\\n        address from,\\n        uint256 principalAmount,\\n        uint256 yieldAmount,\\n        address recipient\\n    )\\n        external\\n        returns (\\n            uint256 redeemableYieldTokens,\\n            uint256 fee,\\n            uint256 rate\\n        );\\n\\n    /// Redeems TPS+TYS held by msg.sender into backing tokens\\n    ///      `msg.sender` must approve TPS and TYS amounts to this TempusPool.\\n    ///      `msg.sender` will receive the backing tokens\\n    ///      NOTE #1 Before maturity, principalAmount must equal to yieldAmount.\\n    ///      NOTE #2 This function can only be called by TempusController\\n    /// @param from Address to redeem its Tempus Shares\\n    /// @param principalAmount Amount of Tempus Principal Shares (TPS) to redeem in PrincipalShare decimal precision\\n    /// @param yieldAmount Amount of Tempus Yield Shares (TYS) to redeem in YieldShare decimal precision\\n    /// @param recipient Address to which redeemed BT will be sent\\n    /// @return redeemableYieldTokens Amount of Backing Tokens redeemed to `recipient`, denominated in YBT\\n    /// @return redeemableBackingTokens Amount of Backing Tokens redeemed to `recipient`\\n    /// @return fee The fee which was deducted (in terms of YBT)\\n    /// @return rate The interest rate at the time of the redemption\\n    function redeemToBacking(\\n        address from,\\n        uint256 principalAmount,\\n        uint256 yieldAmount,\\n        address recipient\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 redeemableYieldTokens,\\n            uint256 redeemableBackingTokens,\\n            uint256 fee,\\n            uint256 rate\\n        );\\n\\n    /// Gets the estimated amount of Principals and Yields after a successful deposit\\n    /// @param amount Amount of BackingTokens or YieldBearingTokens that would be deposited\\n    /// @param isBackingToken If true, @param amount is in BackingTokens, otherwise YieldBearingTokens\\n    /// @return Amount of Principals (TPS) and Yields (TYS) in Principal/YieldShare decimal precision\\n    ///         TPS and TYS are minted in 1:1 ratio, hence a single return value.\\n    function estimatedMintedShares(uint256 amount, bool isBackingToken) external view returns (uint256);\\n\\n    /// Gets the estimated amount of YieldBearingTokens or BackingTokens received when calling `redeemXXX()` functions\\n    /// @param principals Amount of Principals (TPS) in PrincipalShare decimal precision\\n    /// @param yields Amount of Yields (TYS) in YieldShare decimal precision\\n    /// @param toBackingToken If true, redeem amount is estimated in BackingTokens instead of YieldBearingTokens\\n    /// @return Amount of YieldBearingTokens or BackingTokens in YBT/BT decimal precision\\n    function estimatedRedeem(\\n        uint256 principals,\\n        uint256 yields,\\n        bool toBackingToken\\n    ) external view returns (uint256);\\n\\n    /// @dev This returns the stored Interest Rate of the YBT (Yield Bearing Token) pool\\n    ///      it is safe to call this after updateInterestRate() was called\\n    /// @return Stored Interest Rate, decimal precision depends on specific TempusPool implementation\\n    function currentInterestRate() external view returns (uint256);\\n\\n    /// @return Initial interest rate of the underlying pool,\\n    ///         decimal precision depends on specific TempusPool implementation\\n    function initialInterestRate() external view returns (uint256);\\n\\n    /// @return Interest rate at maturity of the underlying pool (or 0 if maturity not reached yet)\\n    ///         decimal precision depends on specific TempusPool implementation\\n    function maturityInterestRate() external view returns (uint256);\\n\\n    /// @return Rate of one Tempus Yield Share expressed in Asset Tokens\\n    function pricePerYieldShare() external returns (uint256);\\n\\n    /// @return Rate of one Tempus Principal Share expressed in Asset Tokens\\n    function pricePerPrincipalShare() external returns (uint256);\\n\\n    /// Calculated with stored interest rates\\n    /// @return Rate of one Tempus Yield Share expressed in Asset Tokens,\\n    function pricePerYieldShareStored() external view returns (uint256);\\n\\n    /// Calculated with stored interest rates\\n    /// @return Rate of one Tempus Principal Share expressed in Asset Tokens\\n    function pricePerPrincipalShareStored() external view returns (uint256);\\n\\n    /// @dev This returns actual Backing Token amount for amount of YBT (Yield Bearing Tokens)\\n    ///      For example, in case of Aave and Lido the result is 1:1,\\n    ///      and for compound is `yieldTokens * currentInterestRate`\\n    /// @param yieldTokens Amount of YBT in YBT decimal precision\\n    /// @param interestRate The current interest rate\\n    /// @return Amount of Backing Tokens for specified @param yieldTokens\\n    function numAssetsPerYieldToken(uint yieldTokens, uint interestRate) external view returns (uint);\\n\\n    /// @dev This returns amount of YBT (Yield Bearing Tokens) that can be converted\\n    ///      from @param backingTokens Backing Tokens\\n    /// @param backingTokens Amount of Backing Tokens in BT decimal precision\\n    /// @param interestRate The current interest rate\\n    /// @return Amount of YBT for specified @param backingTokens\\n    function numYieldTokensPerAsset(uint backingTokens, uint interestRate) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/math/Fixed256xVar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/// @dev Fixed Point decimal math utils for variable decimal point precision\\n///      on 256-bit wide numbers\\nlibrary Fixed256xVar {\\n    /// @dev Multiplies two variable precision fixed point decimal numbers\\n    /// @param one 1.0 expressed in the base precision of `a` and `b`\\n    /// @return result = a * b\\n    function mulfV(\\n        uint256 a,\\n        uint256 b,\\n        uint256 one\\n    ) internal pure returns (uint256) {\\n        // result is always truncated\\n        return (a * b) / one;\\n    }\\n\\n    /// @dev Divides two variable precision fixed point decimal numbers\\n    /// @param one 1.0 expressed in the base precision of `a` and `b`\\n    /// @return result = a / b\\n    function divfV(\\n        uint256 a,\\n        uint256 b,\\n        uint256 one\\n    ) internal pure returns (uint256) {\\n        // result is always truncated\\n        return (a * one) / b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/PoolShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"./ERC20OwnerMintableToken.sol\\\";\\nimport \\\"../ITempusPool.sol\\\";\\n\\n/// Token representing the principal or yield shares of a pool.\\nabstract contract PoolShare is IPoolShare, ERC20OwnerMintableToken {\\n    /// The kind of the share.\\n    ShareKind public immutable override kind;\\n\\n    /// The pool this share is part of.\\n    ITempusPool public immutable override pool;\\n\\n    uint8 internal immutable tokenDecimals;\\n\\n    constructor(\\n        ShareKind _kind,\\n        ITempusPool _pool,\\n        string memory name,\\n        string memory symbol,\\n        uint8 _decimals\\n    ) ERC20OwnerMintableToken(name, symbol) {\\n        kind = _kind;\\n        pool = _pool;\\n        tokenDecimals = _decimals;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return tokenDecimals;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/amm/interfaces/ITempusAMM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./../../ITempusPool.sol\\\";\\n\\ninterface ITempusAMM {\\n    enum JoinKind {\\n        INIT,\\n        EXACT_TOKENS_IN_FOR_BPT_OUT\\n    }\\n    enum ExitKind {\\n        EXACT_BPT_IN_FOR_TOKENS_OUT,\\n        BPT_IN_FOR_EXACT_TOKENS_OUT\\n    }\\n\\n    function getVault() external view returns (IVault);\\n\\n    function getPoolId() external view returns (bytes32);\\n\\n    function tempusPool() external view returns (ITempusPool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /// Calculates the expected returned swap amount\\n    /// @param amount The given input amount of tokens\\n    /// @param yieldShareIn Specifies whether to calculate the swap from TYS to TPS (if true) or from TPS to TYS\\n    /// @return The expected returned amount of outToken\\n    function getExpectedReturnGivenIn(uint256 amount, bool yieldShareIn) external view returns (uint256);\\n\\n    /// @dev Returns amount that user needs to swap to end up with almost the same amounts of Principals and Yields\\n    /// @param principals User's Principals balance\\n    /// @param yields User's Yields balance\\n    /// @param threshold Maximum difference between final balances of Principals and Yields\\n    /// @return amountIn Amount of Principals or Yields that user needs to swap to end with almost equal amounts\\n    function getSwapAmountToEndWithEqualShares(\\n        uint256 principals,\\n        uint256 yields,\\n        uint256 threshold\\n    ) external view returns (uint256 amountIn);\\n\\n    /// @dev queries exiting TempusAMM with exact BPT tokens in\\n    /// @param bptAmountIn amount of LP tokens in\\n    /// @return principals Amount of principals that user would receive back\\n    /// @return yields Amount of yields that user would receive back\\n    function getExpectedTokensOutGivenBPTIn(uint256 bptAmountIn)\\n        external\\n        view\\n        returns (uint256 principals, uint256 yields);\\n\\n    /// @dev queries exiting TempusAMM with exact tokens out\\n    /// @param principalsStaked amount of Principals to withdraw\\n    /// @param yieldsStaked amount of Yields to withdraw\\n    /// @return lpTokens Amount of Lp tokens that user would redeem\\n    function getExpectedBPTInGivenTokensOut(uint256 principalsStaked, uint256 yieldsStaked)\\n        external\\n        view\\n        returns (uint256 lpTokens);\\n\\n    /// @dev queries joining TempusAMM with exact tokens in\\n    /// @param amountsIn amount of tokens to be added to the pool\\n    /// @return amount of LP tokens that could be received\\n    function getExpectedLPTokensForTokensIn(uint256[] memory amountsIn) external view returns (uint256);\\n\\n    /// @dev This function returns the appreciation of one BPT relative to the\\n    /// underlying tokens. This starts at 1 when the pool is created and grows over time\\n    function getRate() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/AMMBalancesHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../math/Fixed256xVar.sol\\\";\\n\\nlibrary AMMBalancesHelper {\\n    using Fixed256xVar for uint256;\\n\\n    uint256 internal constant ONE = 1e18;\\n\\n    function getLiquidityProvisionSharesAmounts(uint256[] memory ammBalances, uint256 shares)\\n        internal\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256[2] memory ammDepositPercentages = getAMMBalancesRatio(ammBalances);\\n        uint256[] memory ammLiquidityProvisionAmounts = new uint256[](2);\\n\\n        (ammLiquidityProvisionAmounts[0], ammLiquidityProvisionAmounts[1]) = (\\n            shares.mulfV(ammDepositPercentages[0], ONE),\\n            shares.mulfV(ammDepositPercentages[1], ONE)\\n        );\\n\\n        return ammLiquidityProvisionAmounts;\\n    }\\n\\n    function getAMMBalancesRatio(uint256[] memory ammBalances) internal pure returns (uint256[2] memory balancesRatio) {\\n        uint256 rate = ammBalances[0].divfV(ammBalances[1], ONE);\\n\\n        (balancesRatio[0], balancesRatio[1]) = rate > ONE ? (ONE, ONE.divfV(rate, ONE)) : (rate, ONE);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Stats/ChainlinkTokenPairPriceFeed/IChainlinkAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n// Based on Chainlink's AggregatorV3Interface.sol\\n// https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\ninterface IChainlinkAggregator {\\n    function decimals() external view returns (uint8);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/Stats/ChainlinkTokenPairPriceFeed/IENS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n// Based on https://github.com/ensdomains/ens/blob/master/contracts/ENS.sol\\ninterface IENS {\\n    function resolver(bytes32 node) external view returns (IENSResolver);\\n}\\n\\n// Based on https://github.com/ensdomains/resolvers/blob/master/contracts/profiles/AddrResolver.sol\\ninterface IENSResolver {\\n    function addr(bytes32 node) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/token/IPoolShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.7.6 <0.9.0;\\n\\nimport \\\"../ITempusPool.sol\\\";\\n\\n/// Interface of Tokens representing the principal or yield shares of a pool.\\ninterface IPoolShare {\\n    enum ShareKind {\\n        Principal,\\n        Yield\\n    }\\n\\n    /// @return The kind of the share.\\n    function kind() external view returns (ShareKind);\\n\\n    /// @return The pool this share is part of.\\n    function pool() external view returns (ITempusPool);\\n\\n    /// @dev Price per single share expressed in Backing Tokens of the underlying pool.\\n    ///      This is for the purpose of TempusAMM api support.\\n    ///      Example: exchanging Tempus Yield Share to DAI\\n    /// @return 1e18 decimal conversion rate per share\\n    function getPricePerFullShare() external returns (uint256);\\n\\n    /// @return 1e18 decimal stored conversion rate per share\\n    function getPricePerFullShareStored() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9.0;\\n\\n/// Implements Ownable with a two step transfer of ownership\\ninterface IOwnable {\\n    /**\\n     * @dev Change of ownership proposed.\\n     * @param currentOwner The current owner.\\n     * @param proposedOwner The proposed owner.\\n     */\\n    event OwnershipProposed(address indexed currentOwner, address indexed proposedOwner);\\n\\n    /**\\n     * @dev Ownership transferred.\\n     * @param previousOwner The previous owner.\\n     * @param newOwner The new owner.\\n     */\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @dev Proposes a transfer of ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external;\\n\\n    /**\\n     * @dev Accepts ownership of the contract by a proposed account.\\n     * Can only be called by the proposed owner.\\n     */\\n    function acceptOwnership() external;\\n}\\n\"\r\n    },\r\n    \"contracts/token/ERC20OwnerMintableToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/// This is a simplified implementation, but compatible with\\n/// OpenZeppelin's ERC20Mintable and ERC20Burnable extensions.\\ncontract ERC20OwnerMintableToken is ERC20 {\\n    /// The manager who is allowed to mint and burn.\\n    address public immutable manager;\\n\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\n        manager = msg.sender;\\n    }\\n\\n    /// Creates `amount` new tokens for `to`.\\n    /// @param account Recipient address to mint tokens to\\n    /// @param amount Number of tokens to mint\\n    function mint(address account, uint256 amount) external {\\n        require(msg.sender == manager, \\\"mint: only manager can mint\\\");\\n        _mint(account, amount);\\n    }\\n\\n    /// Destroys `amount` tokens from the caller.\\n    /// @param amount Number of tokens to burn.\\n    function burn(uint256 amount) external {\\n        require(msg.sender == manager, \\\"burn: only manager can burn\\\");\\n        _burn(manager, amount);\\n    }\\n\\n    /// Destroys `amount` tokens from `account`.\\n    /// @param account Source address to burn tokens from\\n    /// @param amount Number of tokens to burn\\n    function burnFrom(address account, uint256 amount) external {\\n        require(msg.sender == manager, \\\"burn: only manager can burn\\\");\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/amm/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVault {\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IERC20 assetIn;\\n        IERC20 assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    struct JoinPoolRequest {\\n        IERC20[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    struct ExitPoolRequest {\\n        IERC20[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ITempusAMM\",\"name\":\"tempusAMM\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yields\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"toBackingToken\",\"type\":\"bool\"}],\"name\":\"estimateExitAndRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalsStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldsStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalsRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldsRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITempusAMM\",\"name\":\"tempusAMM\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yields\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalsStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldsStaked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"toBackingToken\",\"type\":\"bool\"}],\"name\":\"estimateExitAndRedeemGivenStakedOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokensRedeemed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITempusAMM\",\"name\":\"tempusAMM\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBackingToken\",\"type\":\"bool\"}],\"name\":\"estimatedDepositAndFix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITempusAMM\",\"name\":\"tempusAMM\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBackingToken\",\"type\":\"bool\"}],\"name\":\"estimatedDepositAndProvideLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yields\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITempusPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBackingToken\",\"type\":\"bool\"}],\"name\":\"estimatedMintedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITempusPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yields\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"toBackingToken\",\"type\":\"bool\"}],\"name\":\"estimatedRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"chainlinkAggregatorNodeHash\",\"type\":\"bytes32\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateDenominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITempusPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"rateConversionData\",\"type\":\"bytes32\"}],\"name\":\"totalValueLockedAtGivenRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITempusPool\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"totalValueLockedInBackingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Stats","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"100000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}