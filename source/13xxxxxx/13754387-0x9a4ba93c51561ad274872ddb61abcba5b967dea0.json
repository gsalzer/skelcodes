{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/src/contracts/MetadataManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./MetadataStruct.sol\\\";\\r\\nimport \\\"./VRFConsumer.sol\\\";\\r\\n\\r\\ncontract metadataAddonContract  {\\r\\n\\r\\n    function getImage(uint _collectionId, uint _tokenId) external view returns (string memory) {}\\r\\n\\r\\n    function getMetadata(uint _collectionId, uint _tokenId) external view returns (string memory) {}\\r\\n\\r\\n}\\r\\n\\r\\ncontract MetadataManager is Ownable, VRFConsumerBase {\\r\\n\\r\\n    /**\\r\\n     @notice Credits goes out to Ether Orcs\\r\\n    */\\r\\n\\r\\n    struct Phoenix {\\r\\n        uint128 hash;\\r\\n        uint8 level;\\r\\n        string name;\\r\\n    }\\r\\n\\r\\n    struct TraitRarity {\\r\\n        uint16 rarityRange;\\r\\n        uint16 index;\\r\\n    }\\r\\n\\r\\n    struct MythicInfo {\\r\\n        string image;\\r\\n        string name;\\r\\n    }\\r\\n\\r\\n    mapping(uint => mapping(uint => address)) propertyAddresses;\\r\\n\\r\\n    mapping(uint => mapping (uint => uint)) mythicTokens;\\r\\n\\r\\n    mapping(uint => mapping(uint => uint16[])) PropertyRarityRanges;\\r\\n\\r\\n    mapping(uint => mapping(uint => TraitRarity[])) PropertyRarities;\\r\\n\\r\\n    mapping(uint => bool) collectionRevealed;\\r\\n\\r\\n    mapping(uint => mapping(uint => MythicInfo)) mythicInfoMap;\\r\\n\\r\\n    mapping(uint => uint) mythicsAdded;\\r\\n\\r\\n    mapping(uint => uint) totalMythics;\\r\\n\\r\\n    address[] addonAddresses;\\r\\n\\r\\n    mapping(address => bool) acceptedAddresses;\\r\\n\\r\\n    mapping(uint => uint[]) mythicRewardPool;\\r\\n\\r\\n    string public constant header = '<svg id=\\\"phoenix\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 48 48\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">';\\r\\n    string public constant footer = '<style>#phoenix{image-rendering: pixelated;}</style></svg>';\\r\\n\\r\\n    //Chainlink verifiable random number variables\\r\\n    bytes32 internal keyHash;\\r\\n    uint256 internal fee;\\r\\n    uint256 public randomResult;\\r\\n\\r\\n    uint numPhoenixToReveal;\\r\\n    uint supplyPoolToGiveaway;\\r\\n    uint revealingCollectionId;\\r\\n    bool rewardFromPool;\\r\\n    uint verifiablyRandomNumber;\\r\\n\\r\\n\\r\\n    event randomNumberRecieved(uint randomness);\\r\\n\\r\\n\\r\\n\\r\\n    constructor()  VRFConsumerBase(\\r\\n                    0xf0d54349aDdcf704F77AE15b96510dEA15cb7952, // VRF Coordinator\\r\\n                    0x514910771AF9Ca656af840dff83E8264EcF986CA  // LINK Token\\r\\n                    ) {\\r\\n\\r\\n\\r\\n\\r\\n        keyHash = 0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445;\\r\\n        fee = 2 * 10 ** 18; // 0.1 LINK (Varies by network)\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n\\r\\n         __    __     ______     ______   ______     _____     ______     ______   ______    \\r\\n        /\\\\ \\\"-./  \\\\   /\\\\  ___\\\\   /\\\\__  _\\\\ /\\\\  __ \\\\   /\\\\  __-.  /\\\\  __ \\\\   /\\\\__  _\\\\ /\\\\  __ \\\\   \\r\\n        \\\\ \\\\ \\\\-./\\\\ \\\\  \\\\ \\\\  __\\\\   \\\\/_/\\\\ \\\\/ \\\\ \\\\  __ \\\\  \\\\ \\\\ \\\\/\\\\ \\\\ \\\\ \\\\  __ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\  __ \\\\  \\r\\n         \\\\ \\\\_\\\\ \\\\ \\\\_\\\\  \\\\ \\\\_____\\\\    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\____-  \\\\ \\\\_\\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\ \\r\\n          \\\\/_/  \\\\/_/   \\\\/_____/     \\\\/_/   \\\\/_/\\\\/_/   \\\\/____/   \\\\/_/\\\\/_/     \\\\/_/   \\\\/_/\\\\/_/ \\r\\n                                                                                             \\r\\n\\r\\n    */\\r\\n\\r\\n    function generateImage(uint[] memory _traits, uint _tokenId, uint _collectionId, uint _numTraits) internal view returns(string memory) {\\r\\n\\r\\n        uint mythicId = mythicTokens[_collectionId][_tokenId];\\r\\n        string memory image;\\r\\n\\r\\n        if (mythicId > 0) {\\r\\n\\r\\n            MythicInfo memory mythicInfo = mythicInfoMap[_collectionId][mythicId];\\r\\n            \\r\\n\\r\\n            if(bytes(mythicInfo.name).length > 0) {\\r\\n                image = wrapTag(mythicInfo.image);\\r\\n            } else {\\r\\n                image = getImage(_numTraits, mythicId - 1, _collectionId);\\r\\n            }\\r\\n\\r\\n            return string(abi.encodePacked(header, image, getAdditionalImage(_collectionId, _tokenId), footer));\\r\\n\\r\\n        } \\r\\n\\r\\n        image = header;\\r\\n\\r\\n        for(uint i = 0; i < _numTraits; i++) {\\r\\n            image = string(abi.encodePacked(image, getImage(i, _traits[i], _collectionId)));\\r\\n        }\\r\\n\\r\\n\\r\\n        return string(abi.encodePacked(image, getAdditionalImage(_collectionId, _tokenId), footer));\\r\\n    }\\r\\n\\r\\n\\r\\n    function tokenURI(Phoenix memory _phoenix, MetadataStruct memory _metadataStruct) public view returns (string memory) {\\r\\n\\r\\n        if(bytes(_phoenix.name).length == 0) {\\r\\n            _phoenix.name = string(abi.encodePacked('Phoenix #', ImageHelper.toString(_metadataStruct.tokenId)));\\r\\n        }\\r\\n\\r\\n        if(collectionRevealed[_metadataStruct.collectionId] == false) {\\r\\n            //Collection is yet to be revealed\\r\\n            return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    'data:application/json;base64,',\\r\\n                    ImageHelper.encode(\\r\\n                        bytes(\\r\\n                            abi.encodePacked(\\r\\n                                '{\\\"name\\\": \\\"', _phoenix.name,'\\\", \\\"description\\\": \\\"', _metadataStruct.description, '\\\", \\\"image\\\": \\\"',\\r\\n                                'data:image/svg+xml;base64,',\\r\\n                                ImageHelper.encode((abi.encodePacked(header, wrapTag(_metadataStruct.unRevealedImage), footer))),\\r\\n                                '\\\",\\\"attributes\\\": [{\\\"trait_type\\\": \\\"Level\\\", \\\"value\\\": \\\"', ImageHelper.toString(_phoenix.level), '\\\"}]}'\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint[] memory traits = getTraitsFromHash(_phoenix.hash, _metadataStruct.collectionId, _metadataStruct.numTraits);\\r\\n\\r\\n        string memory image = ImageHelper.encode(bytes(generateImage(traits, _metadataStruct.tokenId, _metadataStruct.collectionId, _metadataStruct.numTraits)));\\r\\n\\r\\n        return\\r\\n\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    'data:application/json;base64,',\\r\\n                    ImageHelper.encode(\\r\\n                        bytes(\\r\\n                            abi.encodePacked(\\r\\n                                '{\\\"name\\\": \\\"', _phoenix.name,'\\\", \\\"description\\\": \\\"', _metadataStruct.description, '\\\", \\\"image\\\": \\\"',\\r\\n                                'data:image/svg+xml;base64,',\\r\\n                                image,\\r\\n                                '\\\",',\\r\\n\\r\\n                                getAttributes(traits, _metadataStruct.collectionId, _metadataStruct.numTraits, _phoenix.level, _metadataStruct.tokenId),\\r\\n                                getAdditionalMetadata(_metadataStruct.collectionId, _metadataStruct.tokenId),\\r\\n                                \\r\\n                                ']',\\r\\n                                '}'\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n    \\r\\n    function call(address _source, bytes memory _sig) internal view returns (string memory) {\\r\\n        (bool succ, bytes memory ret)  = _source.staticcall(_sig);\\r\\n        require(succ, \\\"failed to get data\\\");\\r\\n        return abi.decode(ret, (string));\\r\\n    }\\r\\n\\r\\n    function getImage(uint _propertyIndex, uint _id, uint _collectionId) internal view returns (string memory) {\\r\\n        address source = propertyAddresses[_collectionId][uint(_propertyIndex)];\\r\\n\\r\\n        string memory image = call(source, abi.encodeWithSignature(string(abi.encodePacked(\\\"trait\\\", ImageHelper.toString(_id), \\\"()\\\")), \\\"\\\"));\\r\\n\\r\\n        if(bytes(image).length > 0) {\\r\\n             return wrapTag(image);\\r\\n        } else {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n\\r\\n       \\r\\n    }\\r\\n\\r\\n    function getTraitName(uint _propertyIndex, uint _id, uint _collectionId) internal view returns (string memory) {\\r\\n        address source = propertyAddresses[_collectionId][uint(_propertyIndex)];\\r\\n\\r\\n        return call(source, abi.encodeWithSignature(string(abi.encodePacked(\\\"name\\\", ImageHelper.toString(_id), \\\"()\\\")), \\\"\\\"));\\r\\n    }\\r\\n\\r\\n    function getPropertyName(uint _propertyIndex,  uint _collectionId) internal view returns (string memory) {\\r\\n        address source = propertyAddresses[_collectionId][_propertyIndex];\\r\\n\\r\\n        return call(source, abi.encodeWithSignature(\\\"propertyName()\\\", \\\"\\\"));\\r\\n    }\\r\\n    \\r\\n    function wrapTag(string memory uri) internal pure returns (string memory) {\\r\\n    \\r\\n        return string(abi.encodePacked('<image x=\\\"0\\\" y=\\\"0\\\" width=\\\"48\\\" height=\\\"48\\\" xlink:href=\\\"data:image/png;base64,', uri, '\\\"/>'));\\r\\n    \\r\\n    }\\r\\n\\r\\n    function getAttributes(uint[] memory _traits, uint _collectionId, uint _numTraits, uint8 _level, uint _tokenId) internal view returns (string memory) {\\r\\n       \\r\\n        string memory attributeString;\\r\\n\\r\\n        uint mythicId = mythicTokens[_collectionId][_tokenId];\\r\\n\\r\\n        if (mythicId > 0) {\\r\\n\\r\\n            MythicInfo memory mythicInfo = mythicInfoMap[_collectionId][mythicId];\\r\\n            \\r\\n\\r\\n            if(bytes(mythicInfo.name).length > 0) {\\r\\n                attributeString = string(abi.encodePacked('{\\\"trait_type\\\": \\\"', getPropertyName(_numTraits, _collectionId), '\\\",\\\"value\\\": \\\"', mythicInfo.name,'\\\"}', \\\",\\\")) ;\\r\\n            } else {\\r\\n                attributeString = string(abi.encodePacked(getTraitAttributes(mythicId - 1, _numTraits, _collectionId)));\\r\\n            }\\r\\n\\r\\n        } else {\\r\\n            for(uint i = 0; i < _numTraits; i++) {\\r\\n                attributeString = string(abi.encodePacked(attributeString, getTraitAttributes(_traits[i], i, _collectionId)));\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return string(abi.encodePacked(\\r\\n            '\\\"attributes\\\": [',\\r\\n            attributeString, \\r\\n            '{\\\"trait_type\\\": \\\"Level\\\", \\\"value\\\": \\\"', ImageHelper.toString(_level), '\\\"}'));\\r\\n    }\\r\\n\\r\\n    function getTraitAttributes(uint _traitId, uint _propertyIndex, uint _collectionId) internal view returns(string memory) {\\r\\n\\r\\n        string memory traitName = getTraitName(_propertyIndex, _traitId, _collectionId);\\r\\n        if(bytes(traitName).length == 0) {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n        return string(abi.encodePacked('{\\\"trait_type\\\": \\\"', getPropertyName(_propertyIndex, _collectionId), '\\\",\\\"value\\\": \\\"', traitName,'\\\"}', \\\",\\\"));\\r\\n    }\\r\\n\\r\\n    function traitPicker(uint16 _randinput, TraitRarity[] memory _traitRarities) internal pure returns (uint)\\r\\n    {\\r\\n\\r\\n        uint minIndex = 0;\\r\\n        uint maxIndex = _traitRarities.length -1;\\r\\n        uint midIndex;\\r\\n\\r\\n        //Do a binary search so we can limit the number of attempts to find the proper trait\\r\\n        while(minIndex < maxIndex) {\\r\\n\\r\\n            midIndex = (minIndex + maxIndex) / 2;\\r\\n\\r\\n            if(minIndex == midIndex) {\\r\\n                if(_randinput <= _traitRarities[minIndex].rarityRange) {\\r\\n                    return _traitRarities[minIndex].index;\\r\\n                }\\r\\n\\r\\n                return _traitRarities[maxIndex].index;\\r\\n            }\\r\\n\\r\\n            if(_randinput <= _traitRarities[midIndex].rarityRange) {\\r\\n                maxIndex = midIndex;\\r\\n\\r\\n            } else {\\r\\n                minIndex = midIndex;\\r\\n                \\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        return _traitRarities[midIndex].index;\\r\\n        \\r\\n    }\\r\\n\\r\\n    \\r\\n    function getTraitsFromHash(uint128 _hash, uint _collectionId, uint _numTraits) public view returns(uint[] memory) {\\r\\n\\r\\n        uint[] memory traits = new uint[](_numTraits);\\r\\n        uint16 randomInput;\\r\\n\\r\\n        for(uint i = 0; i < _numTraits; i++) {\\r\\n\\r\\n            randomInput = uint16((_hash / 10000**i % 10000));\\r\\n\\r\\n            traits[i] = traitPicker(randomInput, PropertyRarities[_collectionId][i]);\\r\\n\\r\\n        }\\r\\n\\r\\n        return traits;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function getAdditionalImage(uint _collectionId, uint _tokenId) internal view returns(string memory) {\\r\\n\\r\\n        string memory images;\\r\\n\\r\\n        for(uint i = 0; i < addonAddresses.length; i++) {\\r\\n\\r\\n            abi.encodePacked(images, metadataAddonContract(addonAddresses[i]).getImage(_collectionId, _tokenId));\\r\\n\\r\\n        }\\r\\n\\r\\n        return images;\\r\\n\\r\\n    }\\r\\n\\r\\n    function getAdditionalMetadata(uint _collectionId, uint _tokenId) internal view returns(string memory) {\\r\\n\\r\\n        string memory metaData;\\r\\n\\r\\n        for(uint i = 0; i < addonAddresses.length; i++) {\\r\\n\\r\\n            if(addonAddresses[i] != address(0)) {\\r\\n\\r\\n                metaData = string(abi.encodePacked(metaData, metadataAddonContract(addonAddresses[i]).getMetadata(_collectionId, _tokenId)));\\r\\n\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        if(bytes(metaData).length > 0) {\\r\\n            //metadat isnt empty, so lets add a comma in front\\r\\n            metaData = string(abi.encodePacked(\\\",\\\", metaData));\\r\\n        }\\r\\n\\r\\n        return metaData;\\r\\n    }\\r\\n\\r\\n    function getRarityIndex(uint _collectionId, uint index) external view returns(uint16[] memory) {\\r\\n        return PropertyRarityRanges[_collectionId][index];\\r\\n    }\\r\\n\\r\\n    function getSpecialToken(uint _collectionId, uint _tokenId) public view returns(uint) {\\r\\n        return mythicTokens[_collectionId][_tokenId];\\r\\n    }\\r\\n\\r\\n    function getPropertyRarities(uint _collectionId, uint _propertyIndex) public view returns(TraitRarity[] memory) {\\r\\n\\r\\n        require(PropertyRarities[_collectionId][_propertyIndex].length > 0, \\\"Property index out of range\\\");\\r\\n\\r\\n        return PropertyRarities[_collectionId][_propertyIndex];\\r\\n\\r\\n    }\\r\\n\\r\\n    function getRewardPool(uint _collectionId) public view returns(uint[] memory) {\\r\\n        return mythicRewardPool[_collectionId];\\r\\n    }\\r\\n\\r\\n\\r\\n   /**\\r\\n         ______     __     __     __   __     ______     ______    \\r\\n        /\\\\  __ \\\\   /\\\\ \\\\  _ \\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\  ___\\\\   /\\\\  == \\\\   \\r\\n        \\\\ \\\\ \\\\/\\\\ \\\\  \\\\ \\\\ \\\\/ \\\".\\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\  __\\\\   \\\\ \\\\  __<   \\r\\n         \\\\ \\\\_____\\\\  \\\\ \\\\__/\\\".~\\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\ \\\\_\\\\ \\r\\n          \\\\/_____/   \\\\/_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_____/   \\\\/_/ /_/ \\r\\n                                                                   \\r\\n   */\\r\\n\\r\\n    function setProperty(uint8 _propertyIndex, uint8 _collectionId, address _addr) external onlyOwner {\\r\\n\\r\\n        propertyAddresses[_collectionId][_propertyIndex] = _addr;     \\r\\n    }\\r\\n\\r\\n    function setPropertyRarities(uint16[] calldata rarities, uint collectionId, uint propertyId) external onlyOwner {\\r\\n  \\r\\n        PropertyRarityRanges[collectionId][propertyId] = rarities; \\r\\n    }\\r\\n\\r\\n    \\r\\n    function revealCollection(uint _collectionId, uint _numProperties, uint _totalMythics) external onlyOwner {\\r\\n\\r\\n        require(collectionRevealed[_collectionId] == false, \\\"Collection already revealed\\\");\\r\\n\\r\\n        collectionRevealed[_collectionId] = true;\\r\\n\\r\\n        for(uint i = 0; i < _numProperties; i++) {\\r\\n\\r\\n            mixUpTraits(_collectionId, i);\\r\\n\\r\\n        }\\r\\n\\r\\n        totalMythics[_collectionId] = _totalMythics;\\r\\n\\r\\n    }\\r\\n\\r\\n    function mixUpTraits(uint _collectionId, uint _propertyIndex) internal onlyOwner {\\r\\n\\r\\n        uint hash =  uint256(\\r\\n                    keccak256(\\r\\n                        abi.encodePacked(\\r\\n                            block.timestamp,\\r\\n                            block.difficulty, _collectionId, _propertyIndex)\\r\\n                    )    \\r\\n                );\\r\\n\\r\\n        uint total = 0;\\r\\n\\r\\n        uint16[] memory traitRarities = PropertyRarityRanges[_collectionId][_propertyIndex];\\r\\n\\r\\n        uint tempLength = traitRarities.length;\\r\\n\\r\\n        uint index = 0;\\r\\n\\r\\n        require(tempLength > 0, \\\"temp length should be more than zero\\\");\\r\\n\\r\\n        for(uint j = 0; j < traitRarities.length; j++) {\\r\\n\\r\\n            index = (hash / ((j + 1) * 100000))  % tempLength;\\r\\n\\r\\n            total += traitRarities[index];\\r\\n\\r\\n            PropertyRarities[_collectionId][_propertyIndex].push(TraitRarity(\\r\\n                uint16(total),\\r\\n                uint16(index)\\r\\n            ));\\r\\n\\r\\n            uint16 last = traitRarities[tempLength - 1];\\r\\n\\r\\n            traitRarities[index] = last;\\r\\n\\r\\n            tempLength -= 1;\\r\\n  \\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function setAcceptedAddress(address _acceptedAddress, bool _value) external onlyOwner {\\r\\n\\r\\n        acceptedAddresses[_acceptedAddress] = _value;\\r\\n\\r\\n    }\\r\\n\\r\\n    function setAddonContractAddress(address _addr, uint _index) external onlyOwner {\\r\\n\\r\\n        require(_index <= addonAddresses.length, \\\"index out of range\\\");\\r\\n\\r\\n        if(_index == addonAddresses.length) {\\r\\n            addonAddresses.push(_addr);\\r\\n\\r\\n        } else {\\r\\n            addonAddresses[_index] = _addr;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function resurrect(uint _collectionId, uint _tokenId) external {\\r\\n\\r\\n        require(acceptedAddresses[msg.sender] == true, \\\"Address cannot call this function\\\");\\r\\n\\r\\n        require(mythicTokens[_collectionId][_tokenId] == 0, \\\"Mythic tokens refuse to be resurected\\\");\\r\\n\\r\\n        mythicRewardPool[_collectionId].push(_tokenId);\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    //Mythic 1/1 functions\\r\\n\\r\\n\\r\\n    function addMythicToPool(MythicInfo calldata _mythicInfo, uint _collectionId) external onlyOwner {\\r\\n\\r\\n        uint total =  totalMythics[_collectionId];\\r\\n\\r\\n        mythicInfoMap[_collectionId][total] = _mythicInfo;\\r\\n\\r\\n        totalMythics[_collectionId] += 1;\\r\\n\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n    function rewardMythics(uint _collectionId, uint _numMythics) external {\\r\\n\\r\\n        require(verifiablyRandomNumber != 0, \\\"verifiablyRandomNumber has not been set\\\");\\r\\n\\r\\n        require(acceptedAddresses[msg.sender] == true, \\\"Address cannot call this function\\\");\\r\\n\\r\\n        uint lastMythic = mythicsAdded[_collectionId];\\r\\n\\r\\n        uint numInPool = totalMythics[_collectionId] - lastMythic;\\r\\n\\r\\n        require(numInPool <= _numMythics, \\\"Trying to give away more mythics than exist\\\");\\r\\n\\r\\n        uint[] memory rewardPool = mythicRewardPool[_collectionId];\\r\\n\\r\\n        uint tempLength = rewardPool.length;\\r\\n\\r\\n        require(tempLength >= _numMythics, \\\"More mythics to add than there are tokens in pool to give\\\");\\r\\n\\r\\n        uint totalMythicsGiven = 0;\\r\\n\\r\\n        while(totalMythicsGiven < _numMythics) {\\r\\n\\r\\n            require(tempLength > 0, \\\"Length of reward pool is zero\\\");\\r\\n\\r\\n            uint randindex = (verifiablyRandomNumber / ((totalMythicsGiven + 1) * 5000)) % tempLength;\\r\\n\\r\\n            if(mythicTokens[_collectionId][rewardPool[randindex]] == 0) {\\r\\n                //this token is not already a 1/1, so is chosen to be\\r\\n                mythicTokens[_collectionId][rewardPool[randindex]] = lastMythic;\\r\\n                mythicsAdded[_collectionId] += 1;\\r\\n\\r\\n                lastMythic += 1;\\r\\n                totalMythicsGiven += 1;\\r\\n            }\\r\\n\\r\\n            rewardPool[randindex] = rewardPool[tempLength - 1];\\r\\n\\r\\n            tempLength -= 1;\\r\\n\\r\\n        }\\r\\n\\r\\n        uint[] memory clearedPool;\\r\\n\\r\\n        //Clear the mythic reward pool\\r\\n        mythicRewardPool[_collectionId] = clearedPool;\\r\\n\\r\\n\\r\\n        //Reset this random number so we cant call this function before a new one is generated\\r\\n        verifiablyRandomNumber = 0;\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    function revealMythics(uint _numMythic, uint _collectionId, uint _totalSupply, uint _verifiablyRandomNumber) internal {\\r\\n\\r\\n        uint i = 0;\\r\\n        uint uniqueChosen = 0;\\r\\n\\r\\n        uint total = mythicsAdded[_collectionId];\\r\\n    \\r\\n        while(uniqueChosen < _numMythic) {\\r\\n\\r\\n            uint randomInput = (_verifiablyRandomNumber / (_totalSupply**i) % _totalSupply);\\r\\n            \\r\\n            if(mythicTokens[_collectionId][randomInput] == 0) {\\r\\n                uniqueChosen += 1;\\r\\n                mythicTokens[_collectionId][randomInput] = total;\\r\\n                total++; \\r\\n            }\\r\\n\\r\\n            i++; \\r\\n\\r\\n        }\\r\\n\\r\\n        mythicsAdded[_collectionId] = total;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function initiateCallToGiveawayMythics(uint _numMythics, uint _numberInSupply, uint _collectionId, bool _rewardFromResurrection) external onlyOwner {\\r\\n\\r\\n        require(mythicsAdded[_collectionId] + _numMythics <= totalMythics[_collectionId], \\\"Trying to give away too many mythics than exist\\\");\\r\\n\\r\\n        numPhoenixToReveal = _numMythics;\\r\\n        supplyPoolToGiveaway = _numberInSupply;\\r\\n        revealingCollectionId = _collectionId;\\r\\n        rewardFromPool = _rewardFromResurrection;\\r\\n        getRandomNumber();\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    /* Chainlink random functions\\r\\n    /** \\r\\n     * Requests randomness \\r\\n     */\\r\\n    function getRandomNumber() internal returns (bytes32 requestId) {\\r\\n        require(LINK.balanceOf(address(this)) >= fee, \\\"Not enough LINK - fill contract with faucet\\\");\\r\\n        return requestRandomness(keyHash, fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Callback function used by VRF Coordinator\\r\\n     */\\r\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\r\\n\\r\\n        emit randomNumberRecieved(randomness);\\r\\n\\r\\n        if(rewardFromPool) {\\r\\n            //Set this so it can be used when the immortalPhoenix contract calls the function to destribute the reward\\r\\n            //will have to make sure we toggle off resurrection before we call for this number to prevent manipulation\\r\\n            verifiablyRandomNumber = randomness;\\r\\n        } else {\\r\\n\\r\\n            //We are giving randomly to the current supply of minted phoenixs\\r\\n            revealMythics(numPhoenixToReveal, revealingCollectionId, supplyPoolToGiveaway, randomness);\\r\\n\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n    \\r\\n\\r\\n\\r\\nlibrary ImageHelper {\\r\\n\\r\\n    \\r\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\r\\n\\r\\n    /// @notice developed by Brecht Devos - <brecht@loopring.org>\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return '';\\r\\n        \\r\\n        // load the table into memory\\r\\n        string memory table = TABLE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n            \\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n            \\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n            \\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n            \\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {} lt(dataPtr, endPtr) {}\\r\\n            {\\r\\n               dataPtr := add(dataPtr, 3)\\r\\n               \\r\\n               // read 3 bytes\\r\\n               let input := mload(dataPtr)\\r\\n               \\r\\n               // write 4 characters\\r\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\r\\n               resultPtr := add(resultPtr, 1)\\r\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\r\\n               resultPtr := add(resultPtr, 1)\\r\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\r\\n               resultPtr := add(resultPtr, 1)\\r\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\r\\n               resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n            \\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\r\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\r\\n        }\\r\\n        \\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/src/contracts/VRFRequestIDBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract VRFRequestIDBase {\\r\\n\\r\\n  /**\\r\\n   * @notice returns the seed which is actually input to the VRF coordinator\\r\\n   *\\r\\n   * @dev To prevent repetition of VRF output due to repetition of the\\r\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\r\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\r\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\r\\n   * @dev the final seed, but the nonce does protect against repetition in\\r\\n   * @dev requests which are included in a single block.\\r\\n   *\\r\\n   * @param _userSeed VRF seed input provided by user\\r\\n   * @param _requester Address of the requesting contract\\r\\n   * @param _nonce User-specific nonce at the time of the request\\r\\n   */\\r\\n  function makeVRFInputSeed(\\r\\n    bytes32 _keyHash,\\r\\n    uint256 _userSeed,\\r\\n    address _requester,\\r\\n    uint256 _nonce\\r\\n  )\\r\\n    internal\\r\\n    pure\\r\\n    returns (\\r\\n      uint256\\r\\n    )\\r\\n  {\\r\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the id for this request\\r\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\r\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\r\\n   * @return The id for this request\\r\\n   *\\r\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\r\\n   * @dev contract, but the one generated by makeVRFInputSeed\\r\\n   */\\r\\n  function makeRequestId(\\r\\n    bytes32 _keyHash,\\r\\n    uint256 _vRFInputSeed\\r\\n  )\\r\\n    internal\\r\\n    pure\\r\\n    returns (\\r\\n      bytes32\\r\\n    )\\r\\n  {\\r\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"/src/contracts/VRFConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./LinkTokenInterface.sol\\\";\\r\\n\\r\\nimport \\\"./VRFRequestIDBase.sol\\\";\\r\\n\\r\\n/** ****************************************************************************\\r\\n * @notice Interface for contracts using VRF randomness\\r\\n * *****************************************************************************\\r\\n * @dev PURPOSE\\r\\n *\\r\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\r\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\r\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\r\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\r\\n * @dev Reggie, he gives back a value which is computed completely\\r\\n * @dev deterministically from the seed and the secret key.\\r\\n *\\r\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\r\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\r\\n * @dev the output is indistinguishable to her from a uniform random sample\\r\\n * @dev from the output space.\\r\\n *\\r\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\r\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\r\\n * @dev simple access to a verifiable source of randomness.\\r\\n * *****************************************************************************\\r\\n * @dev USAGE\\r\\n *\\r\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\r\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\r\\n * @dev shown:\\r\\n *\\r\\n * @dev   contract VRFConsumer {\\r\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\r\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\r\\n * @dev         <initialization with other arguments goes here>\\r\\n * @dev       }\\r\\n * @dev   }\\r\\n *\\r\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\r\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\r\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\r\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\r\\n * @dev want to generate randomness from.\\r\\n *\\r\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\r\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\r\\n *\\r\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\r\\n * @dev generated from your seed.\\r\\n *\\r\\n * @dev The requestId argument is generated from the keyHash and the seed by\\r\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\r\\n * @dev requests open, you can use the requestId to track which seed is\\r\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\r\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\r\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\r\\n *\\r\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\r\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\r\\n * @dev next section.)\\r\\n *\\r\\n * *****************************************************************************\\r\\n * @dev SECURITY CONSIDERATIONS\\r\\n *\\r\\n * @dev A method with the ability to call your fulfillRandomness method directly\\r\\n * @dev could spoof a VRF response with any random value, so it's critical that\\r\\n * @dev it cannot be directly called by anything other than this base contract\\r\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\r\\n *\\r\\n * @dev For your users to trust that your contract's random behavior is free\\r\\n * @dev from malicious interference, it's best if you can write it so that all\\r\\n * @dev behaviors implied by a VRF response are executed *during* your\\r\\n * @dev fulfillRandomness method. If your contract must store the response (or\\r\\n * @dev anything derived from it) and use it later, you must ensure that any\\r\\n * @dev user-significant behavior which depends on that stored value cannot be\\r\\n * @dev manipulated by a subsequent VRF request.\\r\\n *\\r\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\r\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\r\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\r\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\r\\n * @dev be used to manipulate your contract's user-significant behavior.\\r\\n *\\r\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\r\\n * @dev block in which the request is made, user-provided seeds have no impact\\r\\n * @dev on its economic security properties. They are only included for API\\r\\n * @dev compatability with previous versions of this contract.\\r\\n *\\r\\n * @dev Since the block hash of the block which contains the requestRandomness\\r\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\r\\n * @dev miner could, in principle, fork the blockchain to evict the block\\r\\n * @dev containing the request, forcing the request to be included in a\\r\\n * @dev different block with a different hash, and therefore a different input\\r\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\r\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\r\\n * @dev until it calls responds to a request.\\r\\n */\\r\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\r\\n\\r\\n  /**\\r\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\r\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\r\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\r\\n   * @notice method.\\r\\n   *\\r\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\r\\n   * @dev signature, and will call it once it has verified the proof\\r\\n   * @dev associated with the randomness. (It is triggered via a call to\\r\\n   * @dev rawFulfillRandomness, below.)\\r\\n   *\\r\\n   * @param requestId The Id initially returned by requestRandomness\\r\\n   * @param randomness the VRF output\\r\\n   */\\r\\n  function fulfillRandomness(\\r\\n    bytes32 requestId,\\r\\n    uint256 randomness\\r\\n  )\\r\\n    internal\\r\\n    virtual;\\r\\n\\r\\n  /**\\r\\n   * @dev In order to keep backwards compatibility we have kept the user\\r\\n   * seed field around. We remove the use of it because given that the blockhash\\r\\n   * enters later, it overrides whatever randomness the used seed provides.\\r\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\r\\n   * we have removed it from usage and can now provide a simpler API.\\r\\n   */\\r\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\r\\n\\r\\n  /**\\r\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\r\\n   *\\r\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\r\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\r\\n   *\\r\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\r\\n   * @dev the _fee must exceed the fee specified during registration of the\\r\\n   * @dev _keyHash.\\r\\n   *\\r\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\r\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\r\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\r\\n   * @dev oracle will mix the hash of the block containing your request into the\\r\\n   * @dev VRF seed it ultimately uses.\\r\\n   *\\r\\n   * @param _keyHash ID of public key against which randomness is generated\\r\\n   * @param _fee The amount of LINK to send with the request\\r\\n   *\\r\\n   * @return requestId unique ID for this request\\r\\n   *\\r\\n   * @dev The returned requestId can be used to distinguish responses to\\r\\n   * @dev concurrent requests. It is passed as the first argument to\\r\\n   * @dev fulfillRandomness.\\r\\n   */\\r\\n  function requestRandomness(\\r\\n    bytes32 _keyHash,\\r\\n    uint256 _fee\\r\\n  )\\r\\n    internal\\r\\n    returns (\\r\\n      bytes32 requestId\\r\\n    )\\r\\n  {\\r\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\r\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\r\\n    // the hash of the block containing this request to obtain the seed/input\\r\\n    // which is finally passed to the VRF cryptographic machinery.\\r\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\r\\n    // nonces[_keyHash] must stay in sync with\\r\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\r\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\r\\n    // This provides protection against the user repeating their input seed,\\r\\n    // which would result in a predictable/duplicate output, if multiple such\\r\\n    // requests appeared in the same block.\\r\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\r\\n    return makeRequestId(_keyHash, vRFSeed);\\r\\n  }\\r\\n\\r\\n  LinkTokenInterface immutable internal LINK;\\r\\n  address immutable private vrfCoordinator;\\r\\n\\r\\n  // Nonces for each VRF key from which randomness has been requested.\\r\\n  //\\r\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\r\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\r\\n\\r\\n  /**\\r\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\r\\n   * @param _link address of LINK token contract\\r\\n   *\\r\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\r\\n   */\\r\\n  constructor(\\r\\n    address _vrfCoordinator,\\r\\n    address _link\\r\\n  ) {\\r\\n    vrfCoordinator = _vrfCoordinator;\\r\\n    LINK = LinkTokenInterface(_link);\\r\\n  }\\r\\n\\r\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\r\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\r\\n  // the origin of the call\\r\\n  function rawFulfillRandomness(\\r\\n    bytes32 requestId,\\r\\n    uint256 randomness\\r\\n  )\\r\\n    external\\r\\n  {\\r\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\r\\n    fulfillRandomness(requestId, randomness);\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"/src/contracts/MetadataStruct.sol\": {\r\n      \"content\": \"struct MetadataStruct {\\r\\n\\r\\n\\tuint tokenId;\\r\\n\\tuint collectionId;\\r\\n\\tuint numTraits;\\r\\n\\tstring description;\\r\\n\\tstring unRevealedImage;\\r\\n\\r\\n}\"\r\n    },\r\n    \"/src/contracts/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface LinkTokenInterface {\\r\\n\\r\\n  function allowance(\\r\\n    address owner,\\r\\n    address spender\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256 remaining\\r\\n    );\\r\\n\\r\\n  function approve(\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  )\\r\\n    external\\r\\n    returns (\\r\\n      bool success\\r\\n    );\\r\\n\\r\\n  function balanceOf(\\r\\n    address owner\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256 balance\\r\\n    );\\r\\n\\r\\n  function decimals()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint8 decimalPlaces\\r\\n    );\\r\\n\\r\\n  function decreaseApproval(\\r\\n    address spender,\\r\\n    uint256 addedValue\\r\\n  )\\r\\n    external\\r\\n    returns (\\r\\n      bool success\\r\\n    );\\r\\n\\r\\n  function increaseApproval(\\r\\n    address spender,\\r\\n    uint256 subtractedValue\\r\\n  ) external;\\r\\n\\r\\n  function name()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      string memory tokenName\\r\\n    );\\r\\n\\r\\n  function symbol()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      string memory tokenSymbol\\r\\n    );\\r\\n\\r\\n  function totalSupply()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256 totalTokensIssued\\r\\n    );\\r\\n\\r\\n  function transfer(\\r\\n    address to,\\r\\n    uint256 value\\r\\n  )\\r\\n    external\\r\\n    returns (\\r\\n      bool success\\r\\n    );\\r\\n\\r\\n  function transferAndCall(\\r\\n    address to,\\r\\n    uint256 value,\\r\\n    bytes calldata data\\r\\n  )\\r\\n    external\\r\\n    returns (\\r\\n      bool success\\r\\n    );\\r\\n\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  )\\r\\n    external\\r\\n    returns (\\r\\n      bool success\\r\\n    );\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"randomNumberRecieved\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct MetadataManager.MythicInfo\",\"name\":\"_mythicInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"name\":\"addMythicToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"footer\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_propertyIndex\",\"type\":\"uint256\"}],\"name\":\"getPropertyRarities\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rarityRange\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"}],\"internalType\":\"struct MetadataManager.TraitRarity[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRarityIndex\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"name\":\"getRewardPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getSpecialToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_hash\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numTraits\",\"type\":\"uint256\"}],\"name\":\"getTraitsFromHash\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"header\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numMythics\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberInSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_rewardFromResurrection\",\"type\":\"bool\"}],\"name\":\"initiateCallToGiveawayMythics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"resurrect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numProperties\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalMythics\",\"type\":\"uint256\"}],\"name\":\"revealCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numMythics\",\"type\":\"uint256\"}],\"name\":\"rewardMythics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_acceptedAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setAcceptedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"setAddonContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_propertyIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_collectionId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setProperty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"rarities\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"propertyId\",\"type\":\"uint256\"}],\"name\":\"setPropertyRarities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"hash\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct MetadataManager.Phoenix\",\"name\":\"_phoenix\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTraits\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"unRevealedImage\",\"type\":\"string\"}],\"internalType\":\"struct MetadataStruct\",\"name\":\"_metadataStruct\",\"type\":\"tuple\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MetadataManager","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}