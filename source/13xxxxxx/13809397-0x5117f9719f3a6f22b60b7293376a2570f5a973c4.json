{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n\tstruct Role {\r\n\t\tmapping (address => bool) bearer;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Give an account access to this role.\r\n\t */\r\n\tfunction add(Role storage role, address account) internal {\r\n\t\trequire(!has(role, account), \"Roles: account already has role\");\r\n\t\trole.bearer[account] = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Remove an account's access to this role.\r\n\t */\r\n\tfunction remove(Role storage role, address account) internal {\r\n\t\trequire(has(role, account), \"Roles: account does not have role\");\r\n\t\trole.bearer[account] = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check if an account has this role.\r\n\t * @return bool\r\n\t */\r\n\tfunction has(Role storage role, address account) internal view returns (bool) {\r\n\t\trequire(account != address(0), \"Roles: account is the zero address\");\r\n\t\treturn role.bearer[account];\r\n\t}\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.1/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n\tbool private _notEntered;\r\n\r\n\tconstructor () internal {\r\n\t\t// Storing an initial non-zero value makes deployment a bit more\r\n\t\t// expensive, but in exchange the refund on every call to nonReentrant\r\n\t\t// will be lower in amount. Since refunds are capped to a percetange of\r\n\t\t// the total transaction's gas, it is best to keep them low in cases\r\n\t\t// like this one, to increase the likelihood of the full refund coming\r\n\t\t// into effect.\r\n\t\t_notEntered = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Prevents a contract from calling itself, directly or indirectly.\r\n\t * Calling a `nonReentrant` function from another `nonReentrant`\r\n\t * function is not supported. It is possible to prevent this from happening\r\n\t * by making the `nonReentrant` function external, and make it call a\r\n\t * `private` function that does the actual work.\r\n\t */\r\n\tmodifier nonReentrant() {\r\n\t\t// On the first call to nonReentrant, _notEntered will be true\r\n\t\trequire(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n\t\t// Any calls to nonReentrant after this point will fail\r\n\t\t_notEntered = false;\r\n\r\n\t\t_;\r\n\r\n\t\t// By storing the original value once again, a refund is triggered (see\r\n\t\t// https://eips.ethereum.org/EIPS/eip-2200)\r\n\t\t_notEntered = true;\r\n\t}\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.1/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\t/**\r\n\t * @dev Returns true if `account` is a contract.\r\n\t *\r\n\t * [IMPORTANT]\r\n\t * ====\r\n\t * It is unsafe to assume that an address for which this function returns\r\n\t * false is an externally-owned account (EOA) and not a contract.\r\n\t *\r\n\t * Among others, `isContract` will return false for the following \r\n\t * types of addresses:\r\n\t *\r\n\t *  - an externally-owned account\r\n\t *  - a contract in construction\r\n\t *  - an address where a contract will be created\r\n\t *  - an address where a contract lived, but was destroyed\r\n\t * ====\r\n\t */\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\t// According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n\t\t// and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n\t\t// for accounts without code, i.e. `keccak256('')`\r\n\t\tbytes32 codehash;\r\n\t\tbytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n\t\t// solhint-disable-next-line no-inline-assembly\r\n\t\tassembly { codehash := extcodehash(account) }\r\n\t\treturn (codehash != accountHash && codehash != 0x0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Converts an `address` into `address payable`. Note that this is\r\n\t * simply a type cast: the actual underlying value is not changed.\r\n\t *\r\n\t * _Available since v2.4.0._\r\n\t */\r\n\tfunction toPayable(address account) internal pure returns (address payable) {\r\n\t\treturn address(uint160(account));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n\t * `recipient`, forwarding all available gas and reverting on errors.\r\n\t *\r\n\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n\t * imposed by `transfer`, making them unable to receive funds via\r\n\t * `transfer`. {sendValue} removes this limitation.\r\n\t *\r\n\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n\t *\r\n\t * IMPORTANT: because control is transferred to `recipient`, care must be\r\n\t * taken to not create reentrancy vulnerabilities. Consider using\r\n\t * {ReentrancyGuard} or the\r\n\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n\t *\r\n\t * _Available since v2.4.0._\r\n\t */\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n\t\t// solhint-disable-next-line avoid-call-value\r\n\t\t(bool success, ) = recipient.call.value(amount)(\"\");\r\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.1/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n\t/**\r\n\t * @dev Returns the amount of tokens in existence.\r\n\t */\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens owned by `account`.\r\n\t */\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Returns the remaining number of tokens that `spender` will be\r\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\t * zero by default.\r\n\t *\r\n\t * This value changes when {approve} or {transferFrom} are called.\r\n\t */\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\t * that someone may use both the old and the new allowance by unfortunate\r\n\t * transaction ordering. One possible solution to mitigate this race\r\n\t * condition is to first reduce the spender's allowance to 0 and set the\r\n\t * desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\t * allowance mechanism. `amount` is then deducted from the caller's\r\n\t * allowance.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\t * another (`to`).\r\n\t *\r\n\t * Note that `value` may be zero.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\t * a call to {approve}. `value` is the new allowance.\r\n\t */\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.1/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n\t// Empty internal constructor, to prevent people from mistakenly deploying\r\n\t// an instance of this contract, which should be used via inheritance.\r\n\tconstructor () internal { }\r\n\t// solhint-disable-previous-line no-empty-blocks\r\n\r\n\tfunction _msgSender() internal view returns (address payable) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view returns (bytes memory) {\r\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.1/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor () internal {\r\n\t\taddress msgSender = _msgSender();\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(isOwner(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the caller is the current owner.\r\n\t */\r\n\tfunction isOwner() public view returns (bool) {\r\n\t\treturn _msgSender() == _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\t_transferOwnership(newOwner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t */\r\n\tfunction _transferOwnership(address newOwner) internal {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.1/contracts/access/roles/PauserRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract PauserRole is Context {\r\n\tusing Roles for Roles.Role;\r\n\r\n\tevent PauserAdded(address indexed account);\r\n\tevent PauserRemoved(address indexed account);\r\n\r\n\tRoles.Role private _pausers;\r\n\r\n\tconstructor () internal {\r\n\t\t_addPauser(_msgSender());\r\n\t}\r\n\r\n\tmodifier onlyPauser() {\r\n\t\trequire(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction isPauser(address account) public view returns (bool) {\r\n\t\treturn _pausers.has(account);\r\n\t}\r\n\r\n\tfunction addPauser(address account) public onlyPauser {\r\n\t\t_addPauser(account);\r\n\t}\r\n\r\n\tfunction renouncePauser() public {\r\n\t\t_removePauser(_msgSender());\r\n\t}\r\n\r\n\tfunction _addPauser(address account) internal {\r\n\t\t_pausers.add(account);\r\n\t\temit PauserAdded(account);\r\n\t}\r\n\r\n\tfunction _removePauser(address account) internal {\r\n\t\t_pausers.remove(account);\r\n\t\temit PauserRemoved(account);\r\n\t}\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.1/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context, PauserRole {\r\n\t/**\r\n\t * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n\t */\r\n\tevent Paused(address account);\r\n\r\n\t/**\r\n\t * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n\t */\r\n\tevent Unpaused(address account);\r\n\r\n\tbool private _paused;\r\n\r\n\t/**\r\n\t * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n\t * to the deployer.\r\n\t */\r\n\tconstructor () internal {\r\n\t\t_paused = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the contract is paused, and false otherwise.\r\n\t */\r\n\tfunction paused() public view returns (bool) {\r\n\t\treturn _paused;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Modifier to make a function callable only when the contract is not paused.\r\n\t */\r\n\tmodifier whenNotPaused() {\r\n\t\trequire(!_paused, \"Pausable: paused\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Modifier to make a function callable only when the contract is paused.\r\n\t */\r\n\tmodifier whenPaused() {\r\n\t\trequire(_paused, \"Pausable: not paused\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Called by a pauser to pause, triggers stopped state.\r\n\t */\r\n\tfunction pause() public onlyPauser whenNotPaused {\r\n\t\t_paused = true;\r\n\t\temit Paused(_msgSender());\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Called by a pauser to unpause, returns to normal state.\r\n\t */\r\n\tfunction unpause() public onlyPauser whenPaused {\r\n\t\t_paused = false;\r\n\t\temit Unpaused(_msgSender());\r\n\t}\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.1/contracts/ownership/Secondary.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev A Secondary contract can only be used by its primary account (the one that created it).\r\n */\r\ncontract Secondary is Context {\r\n\taddress private _primary;\r\n\r\n\t/**\r\n\t * @dev Emitted when the primary contract changes.\r\n\t */\r\n\tevent PrimaryTransferred(\r\n\t\t\taddress recipient\r\n\t\t\t);\r\n\r\n\t/**\r\n\t * @dev Sets the primary account to the one that is creating the Secondary contract.\r\n\t */\r\n\tconstructor () internal {\r\n\t\taddress msgSender = _msgSender();\r\n\t\t_primary = msgSender;\r\n\t\temit PrimaryTransferred(msgSender);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Reverts if called from any account other than the primary.\r\n\t */\r\n\tmodifier onlyPrimary() {\r\n\t\trequire(_msgSender() == _primary, \"Secondary: caller is not the primary account\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @return the address of the primary.\r\n\t */\r\n\tfunction primary() public view returns (address) {\r\n\t\treturn _primary;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers contract to a new primary.\r\n\t * @param recipient The address of new primary.\r\n\t */\r\n\tfunction transferPrimary(address recipient) public onlyPrimary {\r\n\t\trequire(recipient != address(0), \"Secondary: new primary is the zero address\");\r\n\t\t_primary = recipient;\r\n\t\temit PrimaryTransferred(recipient);\r\n\t}\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.1/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `+` operator.\r\n\t *\r\n\t * Requirements:\r\n\t * - Addition cannot overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t * - Subtraction cannot overflow.\r\n\t *\r\n\t * _Available since v2.4.0._\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `*` operator.\r\n\t *\r\n\t * Requirements:\r\n\t * - Multiplication cannot overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t * - The divisor cannot be zero.\r\n\t *\r\n\t * _Available since v2.4.0._\r\n\t */\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\t// Solidity only automatically asserts when dividing by 0\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * Reverts when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * Reverts with custom message when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t * - The divisor cannot be zero.\r\n\t *\r\n\t * _Available since v2.4.0._\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.1/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n\tusing SafeMath for uint256;\r\n\tusing Address for address;\r\n\r\n\tfunction safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n\t}\r\n\r\n\tfunction safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n\t}\r\n\r\n\tfunction safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n\t\t// safeApprove should only be called when setting an initial allowance,\r\n\t\t// or when resetting it to zero. To increase and decrease it, use\r\n\t\t// 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n\t\t// solhint-disable-next-line max-line-length\r\n\t\trequire((value == 0) || (token.allowance(address(this), spender) == 0),\r\n\t\t\t\t\"SafeERC20: approve from non-zero to non-zero allowance\"\r\n\t\t       );\r\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n\t}\r\n\r\n\tfunction safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n\t\tuint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n\t}\r\n\r\n\tfunction safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n\t\tuint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n\t * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n\t * @param token The token targeted by the call.\r\n\t * @param data The call data (encoded using abi.encode or one of its variants).\r\n\t */\r\n\tfunction callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\t\t// We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n\t\t// we're implementing it ourselves.\r\n\r\n\t\t// A Solidity high level call has three parts:\r\n\t\t//  1. The target address is checked to verify it contains contract code\r\n\t\t//  2. The call itself is made, and success asserted\r\n\t\t//  3. The return value is decoded, which in turn checks the size of the returned data.\r\n\t\t// solhint-disable-next-line max-line-length\r\n\t\trequire(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n\t\t// solhint-disable-next-line avoid-low-level-calls\r\n\t\t(bool success, bytes memory returndata) = address(token).call(data);\r\n\t\trequire(success, \"SafeERC20: low-level call failed\");\r\n\r\n\t\tif (returndata.length > 0) { // Return data is optional\r\n\t\t\t// solhint-disable-next-line max-line-length\r\n\t\t\trequire(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.1/contracts/crowdsale/Crowdsale.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conforms\r\n * the base architecture for crowdsales. It is *not* intended to be modified / overridden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\r\n * behavior.\r\n */\r\ncontract Crowdsale is Context, ReentrancyGuard {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t// The token being sold\r\n\tIERC20 private _token;\r\n\r\n\t// Address where funds are collected\r\n\taddress payable private _wallet;\r\n\r\n\t// How many token units a buyer gets per wei.\r\n\t// The rate is the conversion between wei and the smallest and indivisible token unit.\r\n\t// So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\r\n\t// 1 wei will give you 1 unit, or 0.001 TOK.\r\n\tuint256 private _rate;\r\n\r\n\t// Amount of wei raised\r\n\tuint256 private _weiRaised;\r\n\r\n\t/**\r\n\t * Event for token purchase logging\r\n\t * @param purchaser who paid for the tokens\r\n\t * @param beneficiary who got the tokens\r\n\t * @param value weis paid for purchase\r\n\t * @param amount amount of tokens purchased\r\n\t */\r\n\tevent TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\t/**\r\n\t * @param rate Number of token units a buyer gets per wei\r\n\t * @dev The rate is the conversion between wei and the smallest and indivisible\r\n\t * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\r\n\t * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\r\n\t * @param wallet Address where collected funds will be forwarded to\r\n\t * @param token Address of the token being sold\r\n\t */\r\n\tconstructor (uint256 rate, address payable wallet, IERC20 token) public {\r\n\t\trequire(rate > 0, \"Crowdsale: rate is 0\");\r\n\t\trequire(wallet != address(0), \"Crowdsale: wallet is the zero address\");\r\n\t\trequire(address(token) != address(0), \"Crowdsale: token is the zero address\");\r\n\r\n\t\t_rate = rate;\r\n\t\t_wallet = wallet;\r\n\t\t_token = token;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev fallback function ***DO NOT OVERRIDE***\r\n\t * Note that other contracts will transfer funds with a base gas stipend\r\n\t * of 2300, which is not enough to call buyTokens. Consider calling\r\n\t * buyTokens directly when purchasing tokens from a contract.\r\n\t */\r\n\tfunction () external payable {\r\n\t\tbuyTokens(_msgSender());\r\n\t}\r\n\r\n\t/**\r\n\t * @return the token being sold.\r\n\t */\r\n\tfunction token() public view returns (IERC20) {\r\n\t\treturn _token;\r\n\t}\r\n\r\n\t/**\r\n\t * @return the address where funds are collected.\r\n\t */\r\n\tfunction wallet() public view returns (address payable) {\r\n\t\treturn _wallet;\r\n\t}\r\n\r\n\t/**\r\n\t * @return the number of token units a buyer gets per wei.\r\n\t */\r\n\tfunction rate() public view returns (uint256) {\r\n\t\treturn _rate;\r\n\t}\r\n\r\n\t/**\r\n\t * @return the amount of wei raised.\r\n\t */\r\n\tfunction weiRaised() public view returns (uint256) {\r\n\t\treturn _weiRaised;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev low level token purchase ***DO NOT OVERRIDE***\r\n\t * This function has a non-reentrancy guard, so it shouldn't be called by\r\n\t * another `nonReentrant` function.\r\n\t * @param beneficiary Recipient of the token purchase\r\n\t */\r\n\tfunction buyTokens(address beneficiary) public nonReentrant payable {\r\n\t\tuint256 weiAmount = msg.value;\r\n\t\t_preValidatePurchase(beneficiary, weiAmount);\r\n\r\n\t\t// calculate token amount to be created\r\n\t\tuint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n\t\t// update state\r\n\t\t_weiRaised = _weiRaised.add(weiAmount);\r\n\r\n\t\t_processPurchase(beneficiary, tokens);\r\n\t\temit TokensPurchased(_msgSender(), beneficiary, weiAmount, tokens);\r\n\r\n\t\t_updatePurchasingState(beneficiary, weiAmount);\r\n\r\n\t\t_forwardFunds();\r\n\t\t_postValidatePurchase(beneficiary, weiAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\r\n\t * Use `super` in contracts that inherit from Crowdsale to extend their validations.\r\n\t * Example from CappedCrowdsale.sol's _preValidatePurchase method:\r\n\t *     super._preValidatePurchase(beneficiary, weiAmount);\r\n\t *     require(weiRaised().add(weiAmount) <= cap);\r\n\t * @param beneficiary Address performing the token purchase\r\n\t * @param weiAmount Value in wei involved in the purchase\r\n\t */\r\n\tfunction _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n\t\trequire(beneficiary != address(0), \"Crowdsale: beneficiary is the zero address\");\r\n\t\trequire(weiAmount != 0, \"Crowdsale: weiAmount is 0\");\r\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\r\n\t * conditions are not met.\r\n\t * @param beneficiary Address performing the token purchase\r\n\t * @param weiAmount Value in wei involved in the purchase\r\n\t */\r\n\tfunction _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n\t\t// solhint-disable-previous-line no-empty-blocks\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\r\n\t * its tokens.\r\n\t * @param beneficiary Address performing the token purchase\r\n\t * @param tokenAmount Number of tokens to be emitted\r\n\t */\r\n\tfunction _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\r\n\t\t_token.safeTransfer(beneficiary, tokenAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\r\n\t * tokens.\r\n\t * @param beneficiary Address receiving the tokens\r\n\t * @param tokenAmount Number of tokens to be purchased\r\n\t */\r\n\tfunction _processPurchase(address beneficiary, uint256 tokenAmount) internal {\r\n\t\t_deliverTokens(beneficiary, tokenAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Override for extensions that require an internal state to check for validity (current user contributions,\r\n\t * etc.)\r\n\t * @param beneficiary Address receiving the tokens\r\n\t * @param weiAmount Value in wei involved in the purchase\r\n\t */\r\n\tfunction _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\r\n\t\t// solhint-disable-previous-line no-empty-blocks\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Override to extend the way in which ether is converted to tokens.\r\n\t * @param weiAmount Value in wei to be converted into tokens\r\n\t * @return Number of tokens that can be purchased with the specified _weiAmount\r\n\t */\r\n\tfunction _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\r\n\t\treturn weiAmount.mul(_rate);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Determines how ETH is stored/forwarded on purchases.\r\n\t */\r\n\tfunction _forwardFunds() internal {\r\n\t\t_wallet.transfer(msg.value);\r\n\t}\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.1/contracts/crowdsale/validation/CappedCrowdsale.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Crowdsale with a limit for total contributions.\r\n */\r\ncontract CappedCrowdsale is Crowdsale {\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 private _cap;\r\n\r\n\t/**\r\n\t * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\r\n\t * @param cap Max amount of wei to be contributed\r\n\t */\r\n\tconstructor (uint256 cap) public {\r\n\t\trequire(cap > 0, \"CappedCrowdsale: cap is 0\");\r\n\t\t_cap = cap;\r\n\t}\r\n\r\n\t/**\r\n\t * @return the cap of the crowdsale.\r\n\t */\r\n\tfunction cap() public view returns (uint256) {\r\n\t\treturn _cap;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks whether the cap has been reached.\r\n\t * @return Whether the cap was reached\r\n\t */\r\n\tfunction capReached() public view returns (bool) {\r\n\t\treturn weiRaised() >= _cap;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Extend parent behavior requiring purchase to respect the funding cap.\r\n\t * @param beneficiary Token purchaser\r\n\t * @param weiAmount Amount of wei contributed\r\n\t */\r\n\tfunction _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n\t\tsuper._preValidatePurchase(beneficiary, weiAmount);\r\n\t\trequire(weiRaised().add(weiAmount) <= _cap, \"CappedCrowdsale: cap exceeded\");\r\n\t}\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.1/contracts/crowdsale/validation/PausableCrowdsale.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title PausableCrowdsale\r\n * @dev Extension of Crowdsale contract where purchases can be paused and unpaused by the pauser role.\r\n */\r\ncontract PausableCrowdsale is Crowdsale, Pausable {\r\n\t/**\r\n\t * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\r\n\t * Use super to concatenate validations.\r\n\t * Adds the validation that the crowdsale must not be paused.\r\n\t * @param _beneficiary Address performing the token purchase\r\n\t * @param _weiAmount Value in wei involved in the purchase\r\n\t */\r\n\tfunction _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view whenNotPaused {\r\n\t\treturn super._preValidatePurchase(_beneficiary, _weiAmount);\r\n\t}\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.1/contracts/crowdsale/validation/TimedCrowdsale.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title TimedCrowdsale\r\n * @dev Crowdsale accepting contributions only within a time frame.\r\n */\r\ncontract TimedCrowdsale is Crowdsale {\r\n\tusing SafeMath for uint256;\r\n\r\n\t// EDIT: changed from private to internal\r\n\tuint256 internal _openingTime;\r\n\tuint256 internal _closingTime;\r\n\r\n\t/**\r\n\t * Event for crowdsale extending\r\n\t * @param newClosingTime new closing time\r\n\t * @param prevClosingTime old closing time\r\n\t */\r\n\tevent TimedCrowdsaleExtended(uint256 prevClosingTime, uint256 newClosingTime);\r\n\r\n\t/**\r\n\t * @dev Reverts if not in crowdsale time range.\r\n\t */\r\n\tmodifier onlyWhileOpen {\r\n\t\trequire(isOpen(), \"TimedCrowdsale: not open\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Constructor, takes crowdsale opening and closing times.\r\n\t * @param openingTime Crowdsale opening time\r\n\t * @param closingTime Crowdsale closing time\r\n\t */\r\n\tconstructor (uint256 openingTime, uint256 closingTime) public {\r\n\t\t// EDIT: removed requirement to open in future\r\n\t\t// solhint-disable-next-line not-rely-on-time\r\n\t\t// require(openingTime >= block.timestamp, \"TimedCrowdsale: opening time is before current time\");\r\n\t\t// solhint-disable-next-line max-line-length\r\n\t\trequire(closingTime > openingTime, \"TimedCrowdsale: opening time is not before closing time\");\r\n\r\n\t\t_openingTime = openingTime;\r\n\t\t_closingTime = closingTime;\r\n\t}\r\n\r\n\t/**\r\n\t * @return the crowdsale opening time.\r\n\t */\r\n\tfunction openingTime() public view returns (uint256) {\r\n\t\treturn _openingTime;\r\n\t}\r\n\r\n\t/**\r\n\t * @return the crowdsale closing time.\r\n\t */\r\n\tfunction closingTime() public view returns (uint256) {\r\n\t\treturn _closingTime;\r\n\t}\r\n\r\n\t/**\r\n\t * @return true if the crowdsale is open, false otherwise.\r\n\t */\r\n\tfunction isOpen() public view returns (bool) {\r\n\t\t// solhint-disable-next-line not-rely-on-time\r\n\t\treturn block.timestamp >= _openingTime && block.timestamp <= _closingTime;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n\t * @return Whether crowdsale period has elapsed\r\n\t */\r\n\tfunction hasClosed() public view returns (bool) {\r\n\t\t// solhint-disable-next-line not-rely-on-time\r\n\t\treturn block.timestamp > _closingTime;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Extend parent behavior requiring to be within contributing period.\r\n\t * @param beneficiary Token purchaser\r\n\t * @param weiAmount Amount of wei contributed\r\n\t */\r\n\tfunction _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {\r\n\t\tsuper._preValidatePurchase(beneficiary, weiAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Extend crowdsale.\r\n\t * @param newClosingTime Crowdsale closing time\r\n\t */\r\n\tfunction _extendTime(uint256 newClosingTime) internal {\r\n\t\trequire(!hasClosed(), \"TimedCrowdsale: already closed\");\r\n\t\t// solhint-disable-next-line max-line-length\r\n\t\trequire(newClosingTime > _closingTime, \"TimedCrowdsale: new closing time is before current closing time\");\r\n\r\n\t\temit TimedCrowdsaleExtended(_closingTime, newClosingTime);\r\n\t\t_closingTime = newClosingTime;\r\n\t}\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.1/contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title PostDeliveryCrowdsale\r\n * @dev Crowdsale that locks tokens from withdrawal until it ends.\r\n */\r\ncontract PostDeliveryCrowdsale is TimedCrowdsale {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping(address => uint256) private _balances;\r\n\t__unstable__TokenVault private _vault;\r\n\r\n\tconstructor() public {\r\n\t\t_vault = new __unstable__TokenVault();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Withdraw tokens only after crowdsale ends.\r\n\t * @param beneficiary Whose tokens will be withdrawn.\r\n\t */\r\n\tfunction withdrawTokens(address beneficiary) public {\r\n\t\trequire(hasClosed(), \"PostDeliveryCrowdsale: not closed\");\r\n\t\tuint256 amount = _balances[beneficiary];\r\n\t\trequire(amount > 0, \"PostDeliveryCrowdsale: beneficiary is not due any tokens\");\r\n\r\n\t\t_balances[beneficiary] = 0;\r\n\t\t_vault.transfer(token(), beneficiary, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @return the balance of an account.\r\n\t */\r\n\tfunction balanceOf(address account) public view returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Overrides parent by storing due balances, and delivering tokens to the vault instead of the end user. This\r\n\t * ensures that the tokens will be available by the time they are withdrawn (which may not be the case if\r\n\t * `_deliverTokens` was called later).\r\n\t * @param beneficiary Token purchaser\r\n\t * @param tokenAmount Amount of tokens purchased\r\n\t */\r\n\tfunction _processPurchase(address beneficiary, uint256 tokenAmount) internal {\r\n\t\t_balances[beneficiary] = _balances[beneficiary].add(tokenAmount);\r\n\t\t_deliverTokens(address(_vault), tokenAmount);\r\n\t}\r\n}\r\n\r\n/**\r\n * @title __unstable__TokenVault\r\n * @dev Similar to an Escrow for tokens, this contract allows its primary account to spend its tokens as it sees fit.\r\n * This contract is an internal helper for PostDeliveryCrowdsale, and should not be used outside of this context.\r\n */\r\n// solhint-disable-next-line contract-name-camelcase\r\ncontract __unstable__TokenVault is Secondary {\r\n\tfunction transfer(IERC20 token, address to, uint256 amount) public onlyPrimary {\r\n\t\ttoken.transfer(to, amount);\r\n\t}\r\n}\r\n\r\n// File: contracts/CapPurchases.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract CapPurchases is Crowdsale {\r\n\tuint256 public contributionCap;\r\n\tmapping(address => uint256) private _contributions;\r\n\r\n\tconstructor(uint256 cap) public {\r\n\t\tcontributionCap = cap;\r\n\t}\r\n\r\n\t// override this to add a personal cap\r\n\tfunction _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n\t\tsuper._preValidatePurchase(beneficiary, weiAmount);\r\n\t\t// solhint-disable-next-line max-line-length\r\n\t\trequire(_contributions[beneficiary].add(weiAmount) <= contributionCap, \"personal cap exceeded\");\r\n\t}\r\n\r\n\t// override this to track contributions\r\n\tfunction _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\r\n\t\tsuper._updatePurchasingState(beneficiary, weiAmount);\r\n\t\t_contributions[beneficiary] = _contributions[beneficiary].add(weiAmount);\r\n\t}\r\n}\r\n\r\n\r\n// File: contracts/presale.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract Presale is Crowdsale, TimedCrowdsale, PostDeliveryCrowdsale, Ownable, PausableCrowdsale, CapPurchases  {\r\n\r\n\r\n\tconstructor(\r\n\t\t\tuint256 rate,            // rate, in TKNbits\r\n\t\t\taddress payable wallet,  // wallet to send Ether\r\n\t\t\tIERC20 token,            // the token\r\n\t\t\tuint256 openingTime,     // opening time in unix epoch seconds\r\n\t\t\tuint256 closingTime      // closing time in unix epoch seconds\r\n\t\t   )\r\n\t\tpublic\r\n\t\tPostDeliveryCrowdsale()\r\n\t\tTimedCrowdsale(openingTime, closingTime)\r\n\t\tCapPurchases(100 * 1e18)\r\n\t\tCrowdsale(rate, wallet, token)   \r\n\t\t{\r\n\t\t\t// nice! this Crowdsale will keep all of the tokens until the end of the crowdsale\r\n\t\t\t// and then users can `withdrawTokens()` to get the tokens they're owed\r\n\t\t}\r\n\r\n\tfunction extend(uint256 _closing) public onlyOwner() {\r\n\t\t_extendTime(_closing);\r\n\t}\r\n\r\n\tfunction updateTimers(uint256 _opening, uint256 _closing) public onlyOwner() {\r\n\t\trequire(_closing > _opening, \"closeing time must be greater than closing time\");\r\n\t\t_openingTime = _opening;\r\n\t\t_closingTime = _closing;\r\n\t}\r\n\r\n\tfunction openPresale() public onlyOwner() {\r\n\t\t_openingTime = block.timestamp;\r\n\t}\r\n\r\n\tfunction closePresale() public onlyOwner() {\r\n\t\t_closingTime = block.timestamp;\r\n\t}\r\n\r\n\tfunction freeTrappedEther(uint256 _withdraw) public onlyOwner() {\r\n\t\tmsg.sender.transfer(_withdraw);\r\n\t}\r\n\r\n\tfunction reclaimUnsoldTokens(uint256 amount) public onlyOwner() {\r\n\t\t// sold coins are held int the token vault. and cannot be withdrawn\r\n\t\ttoken().transfer(msg.sender, amount);\r\n\t}\r\n\r\n\r\n\t/*********************/\r\n\t/*** for promotion ***/\r\n\t/*********************/\r\n\r\n\tmapping(address => uint256) promotion_map;\r\n\taddress[] promoter_list;\r\n\r\n\tfunction getPromoterList() external view returns (address[] memory) {\r\n\r\n\t\taddress[] memory r = new address[](promoter_list.length);\r\n\t\tfor (uint256 i = 0; i < promoter_list.length; i++) {\r\n\t\t\tr[i] = promoter_list[i];\r\n\t\t}\r\n\r\n\t\treturn r;\r\n\t}\r\n\r\n\tfunction getPromoterCounter(address promoter_address) public view returns(uint256) {\r\n\t\treturn promotion_map[promoter_address];\r\n\t}\r\n\r\n\tfunction buTokenByRecommendation(address promoter_address) payable public {\r\n\r\n\t\tif (promotion_map[promoter_address] == 0) { // new promoter\r\n\t\t\t// add to promoter list\r\n\t\t\tpromoter_list.push(promoter_address);\r\n\t\t}\r\n\r\n\t\t// calculate token amount to be created\r\n                uint256 tokens = _getTokenAmount(msg.value);\r\n\r\n\t\tpromotion_map[promoter_address] += tokens;\r\n\r\n\t\tbuyTokens(msg.sender);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closePresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"promoter_address\",\"type\":\"address\"}],\"name\":\"getPromoterCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_withdraw\",\"type\":\"uint256\"}],\"name\":\"freeTrappedEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributionCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_closing\",\"type\":\"uint256\"}],\"name\":\"extend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reclaimUnsoldTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"promoter_address\",\"type\":\"address\"}],\"name\":\"buTokenByRecommendation\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_opening\",\"type\":\"uint256\"},{\"name\":\"_closing\",\"type\":\"uint256\"}],\"name\":\"updateTimers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPromoterList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"openingTime\",\"type\":\"uint256\"},{\"name\":\"closingTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"prevClosingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newClosingTime\",\"type\":\"uint256\"}],\"name\":\"TimedCrowdsaleExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"}]","ContractName":"Presale","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000186a00000000000000000000000008dca1ff832ff86db5d892023fbc1408254f063550000000000000000000000003a429b1ea13015c904efd7cc0f4c4f404d4e4b520000000000000000000000000000000000000000000000000000000061bf8f400000000000000000000000000000000000000000000000000000000061e86dc0","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://df4a7706fcf77e3665d08d317712a33e7ec98eaa0ec893fbec28d0b760f8bc34"}]}