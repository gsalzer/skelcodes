{"status":"1","message":"OK","result":[{"SourceCode":"/*\n    ___            _       ___  _                          \n    | .\\ ___  _ _ <_> ___ | __><_>._ _  ___ ._ _  ___  ___ \n    |  _// ._>| '_>| ||___|| _> | || ' |<_> || ' |/ | '/ ._>\n    |_|  \\___.|_|  |_|     |_|  |_||_|_|<___||_|_|\\_|_.\\___.\n    \n* PeriFinance: Issuer.sol\n*\n* Latest source (may be newer): https://github.com/perifinance/peri-finance/blob/master/contracts/Issuer.sol\n* Docs: Will be added in the future. \n* https://docs.peri.finance/contracts/source/contracts/Issuer\n*\n* Contract Dependencies: \n*\t- IAddressResolver\n*\t- IIssuer\n*\t- MixinResolver\n*\t- MixinSystemSettings\n*\t- Owned\n* Libraries: \n*\t- SafeDecimalMath\n*\t- SafeMath\n*\n* MIT License\n* ===========\n*\n* Copyright (c) 2021 PeriFinance\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n*/\n\n\n\npragma solidity 0.5.16;\n\n// https://docs.peri.finance/contracts/source/contracts/owned\ncontract Owned {\n    address public owner;\n    address public nominatedOwner;\n\n    constructor(address _owner) public {\n        require(_owner != address(0), \"Owner address cannot be 0\");\n        owner = _owner;\n        emit OwnerChanged(address(0), _owner);\n    }\n\n    function nominateNewOwner(address _owner) external onlyOwner {\n        nominatedOwner = _owner;\n        emit OwnerNominated(_owner);\n    }\n\n    function acceptOwnership() external {\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n        emit OwnerChanged(owner, nominatedOwner);\n        owner = nominatedOwner;\n        nominatedOwner = address(0);\n    }\n\n    modifier onlyOwner {\n        _onlyOwner();\n        _;\n    }\n\n    function _onlyOwner() private view {\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n    }\n\n    event OwnerNominated(address newOwner);\n    event OwnerChanged(address oldOwner, address newOwner);\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/iaddressresolver\ninterface IAddressResolver {\n    function getAddress(bytes32 name) external view returns (address);\n\n    function getPynth(bytes32 key) external view returns (address);\n\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/ipynth\ninterface IPynth {\n    // Views\n    function currencyKey() external view returns (bytes32);\n\n    function transferablePynths(address account) external view returns (uint);\n\n    // Mutative functions\n    function transferAndSettle(address to, uint value) external returns (bool);\n\n    function transferFromAndSettle(\n        address from,\n        address to,\n        uint value\n    ) external returns (bool);\n\n    // Restricted: used internally to PeriFinance\n    function burn(address account, uint amount) external;\n\n    function issue(address account, uint amount) external;\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/iissuer\ninterface IIssuer {\n    // Views\n    function anyPynthOrPERIRateIsInvalid() external view returns (bool anyRateInvalid);\n\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\n\n    function availablePynthCount() external view returns (uint);\n\n    function availablePynths(uint index) external view returns (IPynth);\n\n    function canBurnPynths(address account) external view returns (bool);\n\n    function collateral(address account) external view returns (uint);\n\n    function collateralisationRatio(address issuer) external view returns (uint);\n\n    function collateralisationRatioAndAnyRatesInvalid(address _issuer)\n        external\n        view\n        returns (uint cratio, bool anyRateIsInvalid);\n\n    function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns (uint debtBalance);\n\n    function issuanceRatio() external view returns (uint);\n\n    function externalTokenLimit() external view returns (uint);\n\n    function lastIssueEvent(address account) external view returns (uint);\n\n    function maxIssuablePynths(address issuer) external view returns (uint maxIssuable);\n\n    function externalTokenQuota(\n        address _account,\n        uint _addtionalpUSD,\n        uint _addtionalExToken,\n        bool _isIssue\n    ) external view returns (uint);\n\n    function maxExternalTokenStakeAmount(address _account, bytes32 _currencyKey)\n        external\n        view\n        returns (uint issueAmountToQuota, uint stakeAmountToQuota);\n\n    function minimumStakeTime() external view returns (uint);\n\n    function remainingIssuablePynths(address issuer)\n        external\n        view\n        returns (\n            uint maxIssuable,\n            uint alreadyIssued,\n            uint totalSystemDebt\n        );\n\n    function pynths(bytes32 currencyKey) external view returns (IPynth);\n\n    function getPynths(bytes32[] calldata currencyKeys) external view returns (IPynth[] memory);\n\n    function pynthsByAddress(address pynthAddress) external view returns (bytes32);\n\n    function totalIssuedPynths(bytes32 currencyKey, bool excludeEtherCollateral) external view returns (uint);\n\n    function transferablePeriFinanceAndAnyRateIsInvalid(address account, uint balance)\n        external\n        view\n        returns (uint transferable, bool anyRateIsInvalid);\n\n    // Restricted: used internally to PeriFinance\n    function issuePynths(\n        address _issuer,\n        bytes32 _currencyKey,\n        uint _issueAmount\n    ) external;\n\n    function issueMaxPynths(address _issuer) external;\n\n    function issuePynthsToMaxQuota(address _issuer, bytes32 _currencyKey) external;\n\n    function burnPynths(\n        address _from,\n        bytes32 _currencyKey,\n        uint _burnAmount\n    ) external;\n\n    function fitToClaimable(address _from) external;\n\n    function exit(address _from) external;\n\n    function liquidateDelinquentAccount(\n        address account,\n        uint pusdAmount,\n        address liquidator\n    ) external returns (uint totalRedeemed, uint amountToLiquidate);\n}\n\n\n// Inheritance\n\n\n// Internal references\n\n\n// https://docs.peri.finance/contracts/source/contracts/addressresolver\ncontract AddressResolver is Owned, IAddressResolver {\n    mapping(bytes32 => address) public repository;\n\n    constructor(address _owner) public Owned(_owner) {}\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function importAddresses(bytes32[] calldata names, address[] calldata destinations) external onlyOwner {\n        require(names.length == destinations.length, \"Input lengths must match\");\n\n        for (uint i = 0; i < names.length; i++) {\n            bytes32 name = names[i];\n            address destination = destinations[i];\n            repository[name] = destination;\n            emit AddressImported(name, destination);\n        }\n    }\n\n    /* ========= PUBLIC FUNCTIONS ========== */\n\n    function rebuildCaches(MixinResolver[] calldata destinations) external {\n        for (uint i = 0; i < destinations.length; i++) {\n            destinations[i].rebuildCache();\n        }\n    }\n\n    /* ========== VIEWS ========== */\n\n    function areAddressesImported(bytes32[] calldata names, address[] calldata destinations) external view returns (bool) {\n        for (uint i = 0; i < names.length; i++) {\n            if (repository[names[i]] != destinations[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function getAddress(bytes32 name) external view returns (address) {\n        return repository[name];\n    }\n\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address) {\n        address _foundAddress = repository[name];\n        require(_foundAddress != address(0), reason);\n        return _foundAddress;\n    }\n\n    function getPynth(bytes32 key) external view returns (address) {\n        IIssuer issuer = IIssuer(repository[\"Issuer\"]);\n        require(address(issuer) != address(0), \"Cannot find Issuer address\");\n        return address(issuer.pynths(key));\n    }\n\n    /* ========== EVENTS ========== */\n\n    event AddressImported(bytes32 name, address destination);\n}\n\n\n// solhint-disable payable-fallback\n\n// https://docs.peri.finance/contracts/source/contracts/readproxy\ncontract ReadProxy is Owned {\n    address public target;\n\n    constructor(address _owner) public Owned(_owner) {}\n\n    function setTarget(address _target) external onlyOwner {\n        target = _target;\n        emit TargetUpdated(target);\n    }\n\n    function() external {\n        // The basics of a proxy read call\n        // Note that msg.sender in the underlying will always be the address of this contract.\n        assembly {\n            calldatacopy(0, 0, calldatasize)\n\n            // Use of staticcall - this will revert if the underlying function mutates state\n            let result := staticcall(gas, sload(target_slot), 0, calldatasize, 0, 0)\n            returndatacopy(0, 0, returndatasize)\n\n            if iszero(result) {\n                revert(0, returndatasize)\n            }\n            return(0, returndatasize)\n        }\n    }\n\n    event TargetUpdated(address newTarget);\n}\n\n\n// Inheritance\n\n\n// Internal references\n\n\n// https://docs.peri.finance/contracts/source/contracts/mixinresolver\ncontract MixinResolver {\n    AddressResolver public resolver;\n\n    mapping(bytes32 => address) private addressCache;\n\n    constructor(address _resolver) internal {\n        resolver = AddressResolver(_resolver);\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function combineArrays(bytes32[] memory first, bytes32[] memory second)\n        internal\n        pure\n        returns (bytes32[] memory combination)\n    {\n        combination = new bytes32[](first.length + second.length);\n\n        for (uint i = 0; i < first.length; i++) {\n            combination[i] = first[i];\n        }\n\n        for (uint j = 0; j < second.length; j++) {\n            combination[first.length + j] = second[j];\n        }\n    }\n\n    /* ========== PUBLIC FUNCTIONS ========== */\n\n    // Note: this function is public not external in order for it to be overridden and invoked via super in subclasses\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {}\n\n    function rebuildCache() public {\n        bytes32[] memory requiredAddresses = resolverAddressesRequired();\n        // The resolver must call this function whenver it updates its state\n        for (uint i = 0; i < requiredAddresses.length; i++) {\n            bytes32 name = requiredAddresses[i];\n            // Note: can only be invoked once the resolver has all the targets needed added\n            address destination =\n                resolver.requireAndGetAddress(name, string(abi.encodePacked(\"Resolver missing target: \", name)));\n            addressCache[name] = destination;\n            emit CacheUpdated(name, destination);\n        }\n    }\n\n    /* ========== VIEWS ========== */\n\n    function isResolverCached() external view returns (bool) {\n        bytes32[] memory requiredAddresses = resolverAddressesRequired();\n        for (uint i = 0; i < requiredAddresses.length; i++) {\n            bytes32 name = requiredAddresses[i];\n            // false if our cache is invalid or if the resolver doesn't have the required address\n            if (resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function requireAndGetAddress(bytes32 name) internal view returns (address) {\n        address _foundAddress = addressCache[name];\n        require(_foundAddress != address(0), string(abi.encodePacked(\"Missing address: \", name)));\n        return _foundAddress;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event CacheUpdated(bytes32 name, address destination);\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/iflexiblestorage\ninterface IFlexibleStorage {\n    // Views\n    function getUIntValue(bytes32 contractName, bytes32 record) external view returns (uint);\n\n    function getUIntValues(bytes32 contractName, bytes32[] calldata records) external view returns (uint[] memory);\n\n    function getIntValue(bytes32 contractName, bytes32 record) external view returns (int);\n\n    function getIntValues(bytes32 contractName, bytes32[] calldata records) external view returns (int[] memory);\n\n    function getAddressValue(bytes32 contractName, bytes32 record) external view returns (address);\n\n    function getAddressValues(bytes32 contractName, bytes32[] calldata records) external view returns (address[] memory);\n\n    function getBoolValue(bytes32 contractName, bytes32 record) external view returns (bool);\n\n    function getBoolValues(bytes32 contractName, bytes32[] calldata records) external view returns (bool[] memory);\n\n    function getBytes32Value(bytes32 contractName, bytes32 record) external view returns (bytes32);\n\n    function getBytes32Values(bytes32 contractName, bytes32[] calldata records) external view returns (bytes32[] memory);\n\n    // Mutative functions\n    function deleteUIntValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteIntValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteAddressValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteBoolValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteBytes32Value(bytes32 contractName, bytes32 record) external;\n\n    function setUIntValue(\n        bytes32 contractName,\n        bytes32 record,\n        uint value\n    ) external;\n\n    function setUIntValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        uint[] calldata values\n    ) external;\n\n    function setIntValue(\n        bytes32 contractName,\n        bytes32 record,\n        int value\n    ) external;\n\n    function setIntValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        int[] calldata values\n    ) external;\n\n    function setAddressValue(\n        bytes32 contractName,\n        bytes32 record,\n        address value\n    ) external;\n\n    function setAddressValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        address[] calldata values\n    ) external;\n\n    function setBoolValue(\n        bytes32 contractName,\n        bytes32 record,\n        bool value\n    ) external;\n\n    function setBoolValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        bool[] calldata values\n    ) external;\n\n    function setBytes32Value(\n        bytes32 contractName,\n        bytes32 record,\n        bytes32 value\n    ) external;\n\n    function setBytes32Values(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        bytes32[] calldata values\n    ) external;\n}\n\n\n// Internal references\n\n\n// https://docs.peri.finance/contracts/source/contracts/mixinsystemsettings\ncontract MixinSystemSettings is MixinResolver {\n    bytes32 internal constant SETTING_CONTRACT_NAME = \"SystemSettings\";\n\n    bytes32 internal constant SETTING_WAITING_PERIOD_SECS = \"waitingPeriodSecs\";\n    bytes32 internal constant SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR = \"priceDeviationThresholdFactor\";\n    bytes32 internal constant SETTING_ISSUANCE_RATIO = \"issuanceRatio\";\n    bytes32 internal constant SETTING_FEE_PERIOD_DURATION = \"feePeriodDuration\";\n    bytes32 internal constant SETTING_TARGET_THRESHOLD = \"targetThreshold\";\n    bytes32 internal constant SETTING_LIQUIDATION_DELAY = \"liquidationDelay\";\n    bytes32 internal constant SETTING_LIQUIDATION_RATIO = \"liquidationRatio\";\n    bytes32 internal constant SETTING_LIQUIDATION_PENALTY = \"liquidationPenalty\";\n    bytes32 internal constant SETTING_RATE_STALE_PERIOD = \"rateStalePeriod\";\n    bytes32 internal constant SETTING_EXCHANGE_FEE_RATE = \"exchangeFeeRate\";\n    bytes32 internal constant SETTING_MINIMUM_STAKE_TIME = \"minimumStakeTime\";\n    bytes32 internal constant SETTING_AGGREGATOR_WARNING_FLAGS = \"aggregatorWarningFlags\";\n    bytes32 internal constant SETTING_TRADING_REWARDS_ENABLED = \"tradingRewardsEnabled\";\n    bytes32 internal constant SETTING_DEBT_SNAPSHOT_STALE_TIME = \"debtSnapshotStaleTime\";\n    bytes32 internal constant SETTING_CROSS_DOMAIN_DEPOSIT_GAS_LIMIT = \"crossDomainDepositGasLimit\";\n    bytes32 internal constant SETTING_CROSS_DOMAIN_ESCROW_GAS_LIMIT = \"crossDomainEscrowGasLimit\";\n    bytes32 internal constant SETTING_CROSS_DOMAIN_REWARD_GAS_LIMIT = \"crossDomainRewardGasLimit\";\n    bytes32 internal constant SETTING_CROSS_DOMAIN_WITHDRAWAL_GAS_LIMIT = \"crossDomainWithdrawalGasLimit\";\n    bytes32 internal constant SETTING_EXTERNAL_TOKEN_QUOTA = \"externalTokenQuota\";\n\n    bytes32 internal constant CONTRACT_FLEXIBLESTORAGE = \"FlexibleStorage\";\n\n    enum CrossDomainMessageGasLimits {Deposit, Escrow, Reward, Withdrawal}\n\n    constructor(address _resolver) internal MixinResolver(_resolver) {}\n\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {\n        addresses = new bytes32[](1);\n        addresses[0] = CONTRACT_FLEXIBLESTORAGE;\n    }\n\n    function flexibleStorage() internal view returns (IFlexibleStorage) {\n        return IFlexibleStorage(requireAndGetAddress(CONTRACT_FLEXIBLESTORAGE));\n    }\n\n    function _getGasLimitSetting(CrossDomainMessageGasLimits gasLimitType) internal pure returns (bytes32) {\n        if (gasLimitType == CrossDomainMessageGasLimits.Deposit) {\n            return SETTING_CROSS_DOMAIN_DEPOSIT_GAS_LIMIT;\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Escrow) {\n            return SETTING_CROSS_DOMAIN_ESCROW_GAS_LIMIT;\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Reward) {\n            return SETTING_CROSS_DOMAIN_REWARD_GAS_LIMIT;\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Withdrawal) {\n            return SETTING_CROSS_DOMAIN_WITHDRAWAL_GAS_LIMIT;\n        } else {\n            revert(\"Unknown gas limit type\");\n        }\n    }\n\n    function getCrossDomainMessageGasLimit(CrossDomainMessageGasLimits gasLimitType) internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, _getGasLimitSetting(gasLimitType));\n    }\n\n    function getTradingRewardsEnabled() internal view returns (bool) {\n        return flexibleStorage().getBoolValue(SETTING_CONTRACT_NAME, SETTING_TRADING_REWARDS_ENABLED);\n    }\n\n    function getWaitingPeriodSecs() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_WAITING_PERIOD_SECS);\n    }\n\n    function getPriceDeviationThresholdFactor() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR);\n    }\n\n    function getIssuanceRatio() internal view returns (uint) {\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ISSUANCE_RATIO);\n    }\n\n    function getFeePeriodDuration() internal view returns (uint) {\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_FEE_PERIOD_DURATION);\n    }\n\n    function getTargetThreshold() internal view returns (uint) {\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_TARGET_THRESHOLD);\n    }\n\n    function getLiquidationDelay() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_DELAY);\n    }\n\n    function getLiquidationRatio() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_RATIO);\n    }\n\n    function getLiquidationPenalty() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_PENALTY);\n    }\n\n    function getRateStalePeriod() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_RATE_STALE_PERIOD);\n    }\n\n    function getExchangeFeeRate(bytes32 currencyKey) internal view returns (uint) {\n        return\n            flexibleStorage().getUIntValue(\n                SETTING_CONTRACT_NAME,\n                keccak256(abi.encodePacked(SETTING_EXCHANGE_FEE_RATE, currencyKey))\n            );\n    }\n\n    function getMinimumStakeTime() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_MINIMUM_STAKE_TIME);\n    }\n\n    function getAggregatorWarningFlags() internal view returns (address) {\n        return flexibleStorage().getAddressValue(SETTING_CONTRACT_NAME, SETTING_AGGREGATOR_WARNING_FLAGS);\n    }\n\n    function getDebtSnapshotStaleTime() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_DEBT_SNAPSHOT_STALE_TIME);\n    }\n\n    function getExternalTokenQuota() internal view returns (uint) {\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_EXTERNAL_TOKEN_QUOTA);\n    }\n}\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n\n// Libraries\n\n\n// https://docs.peri.finance/contracts/source/libraries/safedecimalmath\nlibrary SafeDecimalMath {\n    using SafeMath for uint;\n\n    /* Number of decimal places in the representations. */\n    uint8 public constant decimals = 18;\n    uint8 public constant highPrecisionDecimals = 27;\n\n    /* The number representing 1.0. */\n    uint public constant UNIT = 10**uint(decimals);\n\n    /* The number representing 1.0 for higher fidelity numbers. */\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\n\n    /**\n     * @return Provides an interface to UNIT.\n     */\n    function unit() external pure returns (uint) {\n        return UNIT;\n    }\n\n    /**\n     * @return Provides an interface to PRECISE_UNIT.\n     */\n    function preciseUnit() external pure returns (uint) {\n        return PRECISE_UNIT;\n    }\n\n    /**\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n     * decimals.\n     *\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\n     * so that product must be less than 2**256. As this is an integer division,\n     * the internal division always rounds down. This helps save on gas. Rounding\n     * is more expensive on gas.\n     */\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        return x.mul(y) / UNIT;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of the specified precision unit.\n     *\n     * @dev The operands should be in the form of a the specified unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function _multiplyDecimalRound(\n        uint x,\n        uint y,\n        uint precisionUnit\n    ) private pure returns (uint) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a precise unit.\n     *\n     * @dev The operands should be in the precise unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a standard unit.\n     *\n     * @dev The operands should be in the standard unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\n        return _multiplyDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is a high\n     * precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n     * this is an integer division, the result is always rounded down.\n     * This helps save on gas. Rounding is more expensive on gas.\n     */\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\n        /* Reintroduce the UNIT factor that will be divided out by y. */\n        return x.mul(UNIT).div(y);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * decimal in the precision unit specified in the parameter.\n     *\n     * @dev y is divided after the product of x and the specified precision unit\n     * is evaluated, so the product of x and the specified precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function _divideDecimalRound(\n        uint x,\n        uint y,\n        uint precisionUnit\n    ) private pure returns (uint) {\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\n\n        if (resultTimesTen % 10 >= 5) {\n            resultTimesTen += 10;\n        }\n\n        return resultTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * standard precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and the standard precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\n        return _divideDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * high precision decimal.\n     *\n     * @dev y is divided after the product of x and the high precision unit\n     * is evaluated, so the product of x and the high precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @dev Convert a standard decimal representation to a high precision one.\n     */\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\n    }\n\n    /**\n     * @dev Convert a high precision decimal to a standard decimal representation.\n     */\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    /**\n     * @dev Round down the value with given number\n     */\n    function roundDownDecimal(uint x, uint d) internal pure returns (uint) {\n        return x.div(10**d).mul(10**d);\n    }\n\n    /**\n     * @dev Round up the value with given number\n     */\n    function roundUpDecimal(uint x, uint d) internal pure returns (uint) {\n        uint _decimal = 10**d;\n\n        if (x % _decimal > 0) {\n            x = x.add(10**d);\n        }\n\n        return x.div(_decimal).mul(_decimal);\n    }\n}\n\n\ninterface IVirtualPynth {\n    // Views\n    function balanceOfUnderlying(address account) external view returns (uint);\n\n    function rate() external view returns (uint);\n\n    function readyToSettle() external view returns (bool);\n\n    function secsLeftInWaitingPeriod() external view returns (uint);\n\n    function settled() external view returns (bool);\n\n    function pynth() external view returns (IPynth);\n\n    // Mutative functions\n    function settle(address account) external;\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/iperiFinance\ninterface IPeriFinance {\n    // Views\n    function getRequiredAddress(bytes32 contractName) external view returns (address);\n\n    function anyPynthOrPERIRateIsInvalid() external view returns (bool anyRateInvalid);\n\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\n\n    function availablePynthCount() external view returns (uint);\n\n    function availablePynths(uint index) external view returns (IPynth);\n\n    function collateral(address account) external view returns (uint);\n\n    function collateralisationRatio(address issuer) external view returns (uint);\n\n    function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns (uint);\n\n    function isWaitingPeriod(bytes32 currencyKey) external view returns (bool);\n\n    function maxIssuablePynths(address issuer) external view returns (uint maxIssuable);\n\n    function externalTokenQuota(\n        address _account,\n        uint _additionalpUSD,\n        uint _additionalExToken,\n        bool _isIssue\n    ) external view returns (uint);\n\n    function remainingIssuablePynths(address issuer)\n        external\n        view\n        returns (\n            uint maxIssuable,\n            uint alreadyIssued,\n            uint totalSystemDebt\n        );\n\n    function maxExternalTokenStakeAmount(address _account, bytes32 _currencyKey)\n        external\n        view\n        returns (uint issueAmountToQuota, uint stakeAmountToQuota);\n\n    function pynths(bytes32 currencyKey) external view returns (IPynth);\n\n    function pynthsByAddress(address pynthAddress) external view returns (bytes32);\n\n    function totalIssuedPynths(bytes32 currencyKey) external view returns (uint);\n\n    function totalIssuedPynthsExcludeEtherCollateral(bytes32 currencyKey) external view returns (uint);\n\n    function transferablePeriFinance(address account) external view returns (uint transferable);\n\n    // Mutative Functions\n    function issuePynths(bytes32 _currencyKey, uint _issueAmount) external;\n\n    function issueMaxPynths() external;\n\n    function issuePynthsToMaxQuota(bytes32 _currencyKey) external;\n\n    function burnPynths(bytes32 _currencyKey, uint _burnAmount) external;\n\n    function fitToClaimable() external;\n\n    function exit() external;\n\n    function exchange(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external returns (uint amountReceived);\n\n    function exchangeOnBehalf(\n        address exchangeForAddress,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external returns (uint amountReceived);\n\n    function exchangeWithTracking(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address originator,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived);\n\n    function exchangeOnBehalfWithTracking(\n        address exchangeForAddress,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address originator,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived);\n\n    function exchangeWithVirtual(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived, IVirtualPynth vPynth);\n\n    function mint(address _user, uint _amount) external returns (bool);\n\n    function inflationalMint(uint _networkDebtShare) external returns (bool);\n\n    function settle(bytes32 currencyKey)\n        external\n        returns (\n            uint reclaimed,\n            uint refunded,\n            uint numEntries\n        );\n\n    // Liquidations\n    function liquidateDelinquentAccount(address account, uint pusdAmount) external returns (bool);\n\n    // Restricted Functions\n\n    function mintSecondary(address account, uint amount) external;\n\n    function mintSecondaryRewards(uint amount) external;\n\n    function burnSecondary(address account, uint amount) external;\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/ifeepool\ninterface IFeePool {\n    // Views\n\n    // solhint-disable-next-line func-name-mixedcase\n    function FEE_ADDRESS() external view returns (address);\n\n    function feesAvailable(address account) external view returns (uint, uint);\n\n    function feePeriodDuration() external view returns (uint);\n\n    function isFeesClaimable(address account) external view returns (bool);\n\n    function targetThreshold() external view returns (uint);\n\n    function totalFeesAvailable() external view returns (uint);\n\n    function totalRewardsAvailable() external view returns (uint);\n\n    // Mutative Functions\n    function claimFees() external returns (bool);\n\n    function claimOnBehalf(address claimingForAddress) external returns (bool);\n\n    function closeCurrentFeePeriod() external;\n\n    // Restricted: used internally to PeriFinance\n    function appendAccountIssuanceRecord(\n        address account,\n        uint lockedAmount,\n        uint debtEntryIndex\n    ) external;\n\n    function recordFeePaid(uint pUSDAmount) external;\n\n    function setRewardsToDistribute(uint amount) external;\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/iperiFinancestate\ninterface IPeriFinanceState {\n    // Views\n    function debtLedger(uint index) external view returns (uint);\n\n    function issuanceData(address account) external view returns (uint initialDebtOwnership, uint debtEntryIndex);\n\n    function debtLedgerLength() external view returns (uint);\n\n    function hasIssued(address account) external view returns (bool);\n\n    function lastDebtLedgerEntry() external view returns (uint);\n\n    // Mutative functions\n    function incrementTotalIssuerCount() external;\n\n    function decrementTotalIssuerCount() external;\n\n    function setCurrentIssuanceData(address account, uint initialDebtOwnership) external;\n\n    function appendDebtLedgerValue(uint value) external;\n\n    function clearIssuanceData(address account) external;\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/iexchanger\ninterface IExchanger {\n    // Views\n    function calculateAmountAfterSettlement(\n        address from,\n        bytes32 currencyKey,\n        uint amount,\n        uint refunded\n    ) external view returns (uint amountAfterSettlement);\n\n    function isPynthRateInvalid(bytes32 currencyKey) external view returns (bool);\n\n    function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey) external view returns (uint);\n\n    function settlementOwing(address account, bytes32 currencyKey)\n        external\n        view\n        returns (\n            uint reclaimAmount,\n            uint rebateAmount,\n            uint numEntries\n        );\n\n    function hasWaitingPeriodOrSettlementOwing(address account, bytes32 currencyKey) external view returns (bool);\n\n    function feeRateForExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey)\n        external\n        view\n        returns (uint exchangeFeeRate);\n\n    function getAmountsForExchange(\n        uint sourceAmount,\n        bytes32 sourceCurrencyKey,\n        bytes32 destinationCurrencyKey\n    )\n        external\n        view\n        returns (\n            uint amountReceived,\n            uint fee,\n            uint exchangeFeeRate\n        );\n\n    function priceDeviationThresholdFactor() external view returns (uint);\n\n    function waitingPeriodSecs() external view returns (uint);\n\n    // Mutative functions\n    function exchange(\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address destinationAddress\n    ) external returns (uint amountReceived);\n\n    function exchangeOnBehalf(\n        address exchangeForAddress,\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external returns (uint amountReceived);\n\n    function exchangeWithTracking(\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address destinationAddress,\n        address originator,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived);\n\n    function exchangeOnBehalfWithTracking(\n        address exchangeForAddress,\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address originator,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived);\n\n    function exchangeWithVirtual(\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address destinationAddress,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived, IVirtualPynth vPynth);\n\n    function settle(address from, bytes32 currencyKey)\n        external\n        returns (\n            uint reclaimed,\n            uint refunded,\n            uint numEntries\n        );\n\n    function setLastExchangeRateForPynth(bytes32 currencyKey, uint rate) external;\n\n    function suspendPynthWithInvalidRate(bytes32 currencyKey) external;\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/idelegateapprovals\ninterface IDelegateApprovals {\n    // Views\n    function canBurnFor(address authoriser, address delegate) external view returns (bool);\n\n    function canIssueFor(address authoriser, address delegate) external view returns (bool);\n\n    function canClaimFor(address authoriser, address delegate) external view returns (bool);\n\n    function canExchangeFor(address authoriser, address delegate) external view returns (bool);\n\n    // Mutative\n    function approveAllDelegatePowers(address delegate) external;\n\n    function removeAllDelegatePowers(address delegate) external;\n\n    function approveBurnOnBehalf(address delegate) external;\n\n    function removeBurnOnBehalf(address delegate) external;\n\n    function approveIssueOnBehalf(address delegate) external;\n\n    function removeIssueOnBehalf(address delegate) external;\n\n    function approveClaimOnBehalf(address delegate) external;\n\n    function removeClaimOnBehalf(address delegate) external;\n\n    function approveExchangeOnBehalf(address delegate) external;\n\n    function removeExchangeOnBehalf(address delegate) external;\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/iexchangerates\ninterface IExchangeRates {\n    // Structs\n    struct RateAndUpdatedTime {\n        uint216 rate;\n        uint40 time;\n    }\n\n    struct InversePricing {\n        uint entryPoint;\n        uint upperLimit;\n        uint lowerLimit;\n        bool frozenAtUpperLimit;\n        bool frozenAtLowerLimit;\n    }\n\n    // Views\n    function aggregators(bytes32 currencyKey) external view returns (address);\n\n    function aggregatorWarningFlags() external view returns (address);\n\n    function anyRateIsInvalid(bytes32[] calldata currencyKeys) external view returns (bool);\n\n    function canFreezeRate(bytes32 currencyKey) external view returns (bool);\n\n    function currentRoundForRate(bytes32 currencyKey) external view returns (uint);\n\n    function currenciesUsingAggregator(address aggregator) external view returns (bytes32[] memory);\n\n    function effectiveValue(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external view returns (uint value);\n\n    function effectiveValueAndRates(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    )\n        external\n        view\n        returns (\n            uint value,\n            uint sourceRate,\n            uint destinationRate\n        );\n\n    function effectiveValueAtRound(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        uint roundIdForSrc,\n        uint roundIdForDest\n    ) external view returns (uint value);\n\n    function getCurrentRoundId(bytes32 currencyKey) external view returns (uint);\n\n    function getLastRoundIdBeforeElapsedSecs(\n        bytes32 currencyKey,\n        uint startingRoundId,\n        uint startingTimestamp,\n        uint timediff\n    ) external view returns (uint);\n\n    function inversePricing(bytes32 currencyKey)\n        external\n        view\n        returns (\n            uint entryPoint,\n            uint upperLimit,\n            uint lowerLimit,\n            bool frozenAtUpperLimit,\n            bool frozenAtLowerLimit\n        );\n\n    function lastRateUpdateTimes(bytes32 currencyKey) external view returns (uint256);\n\n    function oracle() external view returns (address);\n\n    function rateAndTimestampAtRound(bytes32 currencyKey, uint roundId) external view returns (uint rate, uint time);\n\n    function rateAndUpdatedTime(bytes32 currencyKey) external view returns (uint rate, uint time);\n\n    function rateAndInvalid(bytes32 currencyKey) external view returns (uint rate, bool isInvalid);\n\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint);\n\n    function rateIsFlagged(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsFrozen(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsInvalid(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsStale(bytes32 currencyKey) external view returns (bool);\n\n    function rateStalePeriod() external view returns (uint);\n\n    function ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32 currencyKey, uint numRounds)\n        external\n        view\n        returns (uint[] memory rates, uint[] memory times);\n\n    function ratesAndInvalidForCurrencies(bytes32[] calldata currencyKeys)\n        external\n        view\n        returns (uint[] memory rates, bool anyRateInvalid);\n\n    function ratesForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory);\n\n    // Mutative functions\n    function freezeRate(bytes32 currencyKey) external;\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/iethercollateral\ninterface IEtherCollateral {\n    // Views\n    function totalIssuedPynths() external view returns (uint256);\n\n    function totalLoansCreated() external view returns (uint256);\n\n    function totalOpenLoanCount() external view returns (uint256);\n\n    // Mutative functions\n    function openLoan() external payable returns (uint256 loanID);\n\n    function closeLoan(uint256 loanID) external;\n\n    function liquidateUnclosedLoan(address _loanCreatorsAddress, uint256 _loanID) external;\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/iethercollateralsusd\ninterface IEtherCollateralpUSD {\n    // Views\n    function totalIssuedPynths() external view returns (uint256);\n\n    function totalLoansCreated() external view returns (uint256);\n\n    function totalOpenLoanCount() external view returns (uint256);\n\n    // Mutative functions\n    function openLoan(uint256 _loanAmount) external payable returns (uint256 loanID);\n\n    function closeLoan(uint256 loanID) external;\n\n    function liquidateUnclosedLoan(address _loanCreatorsAddress, uint256 _loanID) external;\n\n    function depositCollateral(address account, uint256 loanID) external payable;\n\n    function withdrawCollateral(uint256 loanID, uint256 withdrawAmount) external;\n\n    function repayLoan(\n        address _loanCreatorsAddress,\n        uint256 _loanID,\n        uint256 _repayAmount\n    ) external;\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/ihasbalance\ninterface IHasBalance {\n    // Views\n    function balanceOf(address account) external view returns (uint);\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/ierc20\ninterface IERC20 {\n    // ERC20 Optional Views\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    // Views\n    function totalSupply() external view returns (uint);\n\n    function balanceOf(address owner) external view returns (uint);\n\n    function allowance(address owner, address spender) external view returns (uint);\n\n    // Mutative functions\n    function transfer(address to, uint value) external returns (bool);\n\n    function approve(address spender, uint value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint value\n    ) external returns (bool);\n\n    // Events\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/iliquidations\ninterface ILiquidations {\n    // Views\n    function isOpenForLiquidation(address account) external view returns (bool);\n\n    function getLiquidationDeadlineForAccount(address account) external view returns (uint);\n\n    function isLiquidationDeadlinePassed(address account) external view returns (bool);\n\n    function liquidationDelay() external view returns (uint);\n\n    function liquidationRatio() external view returns (uint);\n\n    function liquidationPenalty() external view returns (uint);\n\n    function calculateAmountToFixCollateral(uint debtBalance, uint collateral) external view returns (uint);\n\n    // Mutative Functions\n    function flagAccountForLiquidation(address account) external;\n\n    // Restricted: used internally to PeriFinance\n    function removeAccountInLiquidation(address account) external;\n\n    function checkAndRemoveAccountInLiquidation(address account) external;\n}\n\n\ninterface ICollateralManager {\n    // Manager information\n    function hasCollateral(address collateral) external view returns (bool);\n\n    function isPynthManaged(bytes32 currencyKey) external view returns (bool);\n\n    // State information\n    function long(bytes32 pynth) external view returns (uint amount);\n\n    function short(bytes32 pynth) external view returns (uint amount);\n\n    function totalLong() external view returns (uint pusdValue, bool anyRateIsInvalid);\n\n    function totalShort() external view returns (uint pusdValue, bool anyRateIsInvalid);\n\n    function getBorrowRate() external view returns (uint borrowRate, bool anyRateIsInvalid);\n\n    function getShortRate(bytes32 pynth) external view returns (uint shortRate, bool rateIsInvalid);\n\n    function getRatesAndTime(uint index)\n        external\n        view\n        returns (\n            uint entryRate,\n            uint lastRate,\n            uint lastUpdated,\n            uint newIndex\n        );\n\n    function getShortRatesAndTime(bytes32 currency, uint index)\n        external\n        view\n        returns (\n            uint entryRate,\n            uint lastRate,\n            uint lastUpdated,\n            uint newIndex\n        );\n\n    function exceedsDebtLimit(uint amount, bytes32 currency) external view returns (bool canIssue, bool anyRateIsInvalid);\n\n    function arePynthsAndCurrenciesSet(bytes32[] calldata requiredPynthNamesInResolver, bytes32[] calldata pynthKeys)\n        external\n        view\n        returns (bool);\n\n    function areShortablePynthsSet(bytes32[] calldata requiredPynthNamesInResolver, bytes32[] calldata pynthKeys)\n        external\n        view\n        returns (bool);\n\n    // Loans\n    function getNewLoanId() external returns (uint id);\n\n    // Manager mutative\n    function addCollaterals(address[] calldata collaterals) external;\n\n    function removeCollaterals(address[] calldata collaterals) external;\n\n    function addPynths(bytes32[] calldata pynthNamesInResolver, bytes32[] calldata pynthKeys) external;\n\n    function removePynths(bytes32[] calldata pynths, bytes32[] calldata pynthKeys) external;\n\n    function addShortablePynths(bytes32[2][] calldata requiredPynthAndInverseNamesInResolver, bytes32[] calldata pynthKeys)\n        external;\n\n    function removeShortablePynths(bytes32[] calldata pynths) external;\n\n    // State mutative\n    function updateBorrowRates(uint rate) external;\n\n    function updateShortRates(bytes32 currency, uint rate) external;\n\n    function incrementLongs(bytes32 pynth, uint amount) external;\n\n    function decrementLongs(bytes32 pynth, uint amount) external;\n\n    function incrementShorts(bytes32 pynth, uint amount) external;\n\n    function decrementShorts(bytes32 pynth, uint amount) external;\n}\n\n\ncontract IExternalTokenStakeManager {\n    function stake(\n        address _staker,\n        uint _amount,\n        bytes32 _targetCurrency,\n        bytes32 _inputCurrency\n    ) external;\n\n    function unstake(\n        address _unstaker,\n        uint _amount,\n        bytes32 _targetCurrency,\n        bytes32 _inputCurrency\n    ) external;\n\n    function unstakeMultipleTokens(\n        address _unstaker,\n        uint _amount,\n        bytes32 _inputCurrency\n    ) external;\n\n    function getTokenList() external view returns (bytes32[] memory);\n\n    function getTokenAddress(bytes32 _currencyKey) external view returns (address);\n\n    function getTokenDecimals(bytes32 _currencyKey) external view returns (uint8);\n\n    function getTokenActivation(bytes32 _currencyKey) external view returns (bool);\n\n    function getCurrencyKeyOrder() external view returns (bytes32[] memory);\n\n    function combinedStakedAmountOf(address _user, bytes32 _unitCurrency) external view returns (uint);\n\n    function stakedAmountOf(\n        address _user,\n        bytes32 _currencyKey,\n        bytes32 _unitCurrency\n    ) external view returns (uint);\n}\n\n\n// Inheritance\n\n\n// Libraries\n\n\n// Internal references\n\n\ninterface IRewardEscrowV2 {\n    // Views\n    function balanceOf(address account) external view returns (uint);\n}\n\ninterface IIssuerInternalDebtCache {\n    function updateCachedPynthDebtWithRate(bytes32 currencyKey, uint currencyRate) external;\n\n    function updateCachedPynthDebtsWithRates(bytes32[] calldata currencyKeys, uint[] calldata currencyRates) external;\n\n    function updateDebtCacheValidity(bool currentlyInvalid) external;\n\n    function cacheInfo()\n        external\n        view\n        returns (\n            uint cachedDebt,\n            uint timestamp,\n            bool isInvalid,\n            bool isStale\n        );\n}\n\n// https://docs.peri.finance/contracts/source/contracts/issuer\ncontract Issuer is Owned, MixinSystemSettings, IIssuer {\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n\n    // Available Pynths which can be used with the system\n    IPynth[] public availablePynths;\n    mapping(bytes32 => IPynth) public pynths;\n    mapping(address => bytes32) public pynthsByAddress;\n\n    /* ========== ENCODED NAMES ========== */\n\n    bytes32 internal constant pUSD = \"pUSD\";\n    bytes32 internal constant pETH = \"pETH\";\n    bytes32 internal constant PERI = \"PERI\";\n    bytes32 internal constant USDC = \"USDC\";\n\n    // Flexible storage names\n\n    bytes32 public constant CONTRACT_NAME = \"Issuer\";\n    bytes32 internal constant LAST_ISSUE_EVENT = \"lastIssueEvent\";\n\n    /* ========== ADDRESS RESOLVER CONFIGURATION ========== */\n\n    bytes32 private constant CONTRACT_PERIFINANCE = \"PeriFinance\";\n    bytes32 private constant CONTRACT_EXCHANGER = \"Exchanger\";\n    bytes32 private constant CONTRACT_EXRATES = \"ExchangeRates\";\n    bytes32 private constant CONTRACT_PERIFINANCESTATE = \"PeriFinanceState\";\n    bytes32 private constant CONTRACT_FEEPOOL = \"FeePool\";\n    bytes32 private constant CONTRACT_DELEGATEAPPROVALS = \"DelegateApprovals\";\n    bytes32 private constant CONTRACT_ETHERCOLLATERAL = \"EtherCollateral\";\n    bytes32 private constant CONTRACT_ETHERCOLLATERAL_PUSD = \"EtherCollateralpUSD\";\n    bytes32 private constant CONTRACT_COLLATERALMANAGER = \"CollateralManager\";\n    bytes32 private constant CONTRACT_REWARDESCROW_V2 = \"RewardEscrowV2\";\n    bytes32 private constant CONTRACT_PERIFINANCEESCROW = \"PeriFinanceEscrow\";\n    bytes32 private constant CONTRACT_LIQUIDATIONS = \"Liquidations\";\n    bytes32 private constant CONTRACT_DEBTCACHE = \"DebtCache\";\n    bytes32 private constant CONTRACT_EXTOKENSTAKEMANAGER = \"ExternalTokenStakeManager\";\n\n    constructor(address _owner, address _resolver) public Owned(_owner) MixinSystemSettings(_resolver) {}\n\n    /* ========== VIEWS ========== */\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {\n        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();\n        bytes32[] memory newAddresses = new bytes32[](14);\n        newAddresses[0] = CONTRACT_PERIFINANCE;\n        newAddresses[1] = CONTRACT_EXCHANGER;\n        newAddresses[2] = CONTRACT_EXRATES;\n        newAddresses[3] = CONTRACT_PERIFINANCESTATE;\n        newAddresses[4] = CONTRACT_FEEPOOL;\n        newAddresses[5] = CONTRACT_DELEGATEAPPROVALS;\n        newAddresses[6] = CONTRACT_ETHERCOLLATERAL;\n        newAddresses[7] = CONTRACT_ETHERCOLLATERAL_PUSD;\n        newAddresses[8] = CONTRACT_REWARDESCROW_V2;\n        newAddresses[9] = CONTRACT_PERIFINANCEESCROW;\n        newAddresses[10] = CONTRACT_LIQUIDATIONS;\n        newAddresses[11] = CONTRACT_DEBTCACHE;\n        newAddresses[12] = CONTRACT_COLLATERALMANAGER;\n        newAddresses[13] = CONTRACT_EXTOKENSTAKEMANAGER;\n        return combineArrays(existingAddresses, newAddresses);\n    }\n\n    function periFinance() internal view returns (IPeriFinance) {\n        return IPeriFinance(requireAndGetAddress(CONTRACT_PERIFINANCE));\n    }\n\n    function exTokenStakeManager() internal view returns (IExternalTokenStakeManager) {\n        return IExternalTokenStakeManager(requireAndGetAddress(CONTRACT_EXTOKENSTAKEMANAGER));\n    }\n\n    function exchanger() internal view returns (IExchanger) {\n        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));\n    }\n\n    function exchangeRates() internal view returns (IExchangeRates) {\n        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));\n    }\n\n    function periFinanceState() internal view returns (IPeriFinanceState) {\n        return IPeriFinanceState(requireAndGetAddress(CONTRACT_PERIFINANCESTATE));\n    }\n\n    function feePool() internal view returns (IFeePool) {\n        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL));\n    }\n\n    function liquidations() internal view returns (ILiquidations) {\n        return ILiquidations(requireAndGetAddress(CONTRACT_LIQUIDATIONS));\n    }\n\n    function delegateApprovals() internal view returns (IDelegateApprovals) {\n        return IDelegateApprovals(requireAndGetAddress(CONTRACT_DELEGATEAPPROVALS));\n    }\n\n    function etherCollateral() internal view returns (IEtherCollateral) {\n        return IEtherCollateral(requireAndGetAddress(CONTRACT_ETHERCOLLATERAL));\n    }\n\n    function etherCollateralpUSD() internal view returns (IEtherCollateralpUSD) {\n        return IEtherCollateralpUSD(requireAndGetAddress(CONTRACT_ETHERCOLLATERAL_PUSD));\n    }\n\n    function collateralManager() internal view returns (ICollateralManager) {\n        return ICollateralManager(requireAndGetAddress(CONTRACT_COLLATERALMANAGER));\n    }\n\n    function rewardEscrowV2() internal view returns (IRewardEscrowV2) {\n        return IRewardEscrowV2(requireAndGetAddress(CONTRACT_REWARDESCROW_V2));\n    }\n\n    function periFinanceEscrow() internal view returns (IHasBalance) {\n        return IHasBalance(requireAndGetAddress(CONTRACT_PERIFINANCEESCROW));\n    }\n\n    function debtCache() internal view returns (IIssuerInternalDebtCache) {\n        return IIssuerInternalDebtCache(requireAndGetAddress(CONTRACT_DEBTCACHE));\n    }\n\n    function issuanceRatio() external view returns (uint) {\n        return getIssuanceRatio();\n    }\n\n    function externalTokenLimit() external view returns (uint) {\n        return getExternalTokenQuota();\n    }\n\n    function _availableCurrencyKeysWithOptionalPERI(bool withPERI) internal view returns (bytes32[] memory) {\n        bytes32[] memory currencyKeys = new bytes32[](availablePynths.length + (withPERI ? 1 : 0));\n\n        for (uint i = 0; i < availablePynths.length; i++) {\n            currencyKeys[i] = pynthsByAddress[address(availablePynths[i])];\n        }\n\n        if (withPERI) {\n            currencyKeys[availablePynths.length] = PERI;\n        }\n\n        return currencyKeys;\n    }\n\n    function _totalIssuedPynths(bytes32 currencyKey, bool excludeCollateral)\n        internal\n        view\n        returns (uint totalIssued, bool anyRateIsInvalid)\n    {\n        (uint debt, , bool cacheIsInvalid, bool cacheIsStale) = debtCache().cacheInfo();\n        anyRateIsInvalid = cacheIsInvalid || cacheIsStale;\n\n        IExchangeRates exRates = exchangeRates();\n\n        // Add total issued pynths from non peri collateral back into the total if not excluded\n        if (!excludeCollateral) {\n            // Get the pUSD equivalent amount of all the MC issued pynths.\n            (uint nonPeriDebt, bool invalid) = collateralManager().totalLong();\n            debt = debt.add(nonPeriDebt);\n            anyRateIsInvalid = anyRateIsInvalid || invalid;\n\n            // Now add the ether collateral stuff as we are still supporting it.\n            debt = debt.add(etherCollateralpUSD().totalIssuedPynths());\n\n            // Add ether collateral pETH\n            (uint ethRate, bool ethRateInvalid) = exRates.rateAndInvalid(pETH);\n            uint ethIssuedDebt = etherCollateral().totalIssuedPynths().multiplyDecimalRound(ethRate);\n            debt = debt.add(ethIssuedDebt);\n            anyRateIsInvalid = anyRateIsInvalid || ethRateInvalid;\n        }\n\n        if (currencyKey == pUSD) {\n            return (debt, anyRateIsInvalid);\n        }\n\n        (uint currencyRate, bool currencyRateInvalid) = exRates.rateAndInvalid(currencyKey);\n        return (debt.divideDecimalRound(currencyRate), anyRateIsInvalid || currencyRateInvalid);\n    }\n\n    function _debtBalanceOfAndTotalDebt(address _issuer, bytes32 currencyKey)\n        internal\n        view\n        returns (\n            uint debtBalance,\n            uint totalSystemValue,\n            bool anyRateIsInvalid\n        )\n    {\n        IPeriFinanceState state = periFinanceState();\n\n        // What was their initial debt ownership?\n        (uint initialDebtOwnership, uint debtEntryIndex) = state.issuanceData(_issuer);\n\n        // What's the total value of the system excluding ETH backed pynths in their requested currency?\n        (totalSystemValue, anyRateIsInvalid) = _totalIssuedPynths(currencyKey, true);\n\n        // If it's zero, they haven't issued, and they have no debt.\n        // Note: it's more gas intensive to put this check here rather than before _totalIssuedPynths\n        // if they have 0 PERI, but it's a necessary trade-off\n        if (initialDebtOwnership == 0) return (0, totalSystemValue, anyRateIsInvalid);\n\n        // Figure out the global debt percentage delta from when they entered the system.\n        // This is a high precision integer of 27 (1e27) decimals.\n        uint _debtLedgerLength = state.debtLedgerLength();\n        uint systemDebt = state.debtLedger(debtEntryIndex);\n        uint currentDebtOwnership;\n        if (_debtLedgerLength == 0 || systemDebt == 0) {\n            currentDebtOwnership = 0;\n        } else {\n            currentDebtOwnership = state\n                .lastDebtLedgerEntry()\n                .divideDecimalRoundPrecise(systemDebt)\n                .multiplyDecimalRoundPrecise(initialDebtOwnership);\n        }\n\n        // Their debt balance is their portion of the total system value.\n        uint highPrecisionBalance =\n            totalSystemValue.decimalToPreciseDecimal().multiplyDecimalRoundPrecise(currentDebtOwnership);\n\n        // Convert back into 18 decimals (1e18)\n        debtBalance = highPrecisionBalance.preciseDecimalToDecimal();\n    }\n\n    function _canBurnPynths(address account) internal view returns (bool) {\n        return now >= _lastIssueEvent(account).add(getMinimumStakeTime());\n    }\n\n    function _lastIssueEvent(address account) internal view returns (uint) {\n        //  Get the timestamp of the last issue this account made\n        return flexibleStorage().getUIntValue(CONTRACT_NAME, keccak256(abi.encodePacked(LAST_ISSUE_EVENT, account)));\n    }\n\n    function _remainingIssuablePynths(address _issuer)\n        internal\n        view\n        returns (\n            uint maxIssuable,\n            uint alreadyIssued,\n            uint totalSystemDebt,\n            bool anyRateIsInvalid\n        )\n    {\n        (alreadyIssued, totalSystemDebt, anyRateIsInvalid) = _debtBalanceOfAndTotalDebt(_issuer, pUSD);\n        (uint issuable, bool isInvalid) = _maxIssuablePynths(_issuer);\n        maxIssuable = issuable;\n        anyRateIsInvalid = anyRateIsInvalid || isInvalid;\n\n        if (alreadyIssued >= maxIssuable) {\n            maxIssuable = 0;\n        } else {\n            maxIssuable = maxIssuable.sub(alreadyIssued);\n        }\n    }\n\n    function _periToUSD(uint amount, uint periRate) internal pure returns (uint) {\n        return amount.multiplyDecimalRound(periRate);\n    }\n\n    function _usdToPeri(uint amount, uint periRate) internal pure returns (uint) {\n        return amount.divideDecimalRound(periRate);\n    }\n\n    function _maxIssuablePynths(address _issuer) internal view returns (uint, bool) {\n        // What is the value of their PERI balance in pUSD\n        (uint periRate, bool periRateIsInvalid) = exchangeRates().rateAndInvalid(PERI);\n        uint periCollateral = _periToUSD(_collateral(_issuer), periRate);\n\n        uint externalTokenStaked = exTokenStakeManager().combinedStakedAmountOf(_issuer, pUSD);\n\n        uint destinationValue = periCollateral.add(externalTokenStaked);\n\n        // They're allowed to issue up to issuanceRatio of that value\n        return (destinationValue.multiplyDecimal(getIssuanceRatio()), periRateIsInvalid);\n    }\n\n    function _collateralisationRatio(address _issuer) internal view returns (uint, bool) {\n        uint totalOwnedPeriFinance = _collateral(_issuer);\n        uint externalTokenStaked = exTokenStakeManager().combinedStakedAmountOf(_issuer, PERI);\n\n        (uint debtBalance, , bool anyRateIsInvalid) = _debtBalanceOfAndTotalDebt(_issuer, PERI);\n\n        // it's more gas intensive to put this check here if they have 0 PERI, but it complies with the interface\n        if (totalOwnedPeriFinance == 0 && externalTokenStaked == 0) return (0, anyRateIsInvalid);\n\n        uint totalOwned = totalOwnedPeriFinance.add(externalTokenStaked);\n\n        return (debtBalance.divideDecimal(totalOwned), anyRateIsInvalid);\n    }\n\n    function _collateral(address account) internal view returns (uint) {\n        uint balance = IERC20(address(periFinance())).balanceOf(account);\n\n        if (address(periFinanceEscrow()) != address(0)) {\n            balance = balance.add(periFinanceEscrow().balanceOf(account));\n        }\n\n        if (address(rewardEscrowV2()) != address(0)) {\n            balance = balance.add(rewardEscrowV2().balanceOf(account));\n        }\n\n        return balance;\n    }\n\n    /**\n     * @notice It calculates the quota of user's staked amount to the debt.\n     *         If parameters are not 0, it estimates the quota assuming those value is applied to current status.\n     *\n     * @param _account account\n     * @param _debtBalance Debt balance to estimate [USD]\n     * @param _additionalpUSD The pUSD value to be applied for estimation [USD]\n     * @param _additionalExToken The external token stake amount to be applied for estimation [USD]\n     * @param _isIssue If true, it is considered issueing/staking estimation.\n     */\n    function _externalTokenQuota(\n        address _account,\n        uint _debtBalance,\n        uint _additionalpUSD,\n        uint _additionalExToken,\n        bool _isIssue\n    ) internal view returns (uint) {\n        uint combinedStakedAmount = exTokenStakeManager().combinedStakedAmountOf(_account, pUSD);\n\n        if (_debtBalance == 0 || combinedStakedAmount == 0) {\n            return 0;\n        }\n\n        if (_isIssue) {\n            _debtBalance = _debtBalance.add(_additionalpUSD);\n            combinedStakedAmount = combinedStakedAmount.add(_additionalExToken);\n        } else {\n            _debtBalance = _debtBalance.sub(_additionalpUSD);\n            combinedStakedAmount = combinedStakedAmount.sub(_additionalExToken);\n        }\n\n        return combinedStakedAmount.divideDecimalRound(_debtBalance.divideDecimalRound(getIssuanceRatio()));\n    }\n\n    function _amountsToFitClaimable(\n        uint _currentDebt,\n        uint _stakedExTokenAmount,\n        uint _periCollateral\n    ) internal view returns (uint burnAmount, uint exTokenAmountToUnstake) {\n        uint targetRatio = getIssuanceRatio();\n        uint exTokenQuota = getExternalTokenQuota();\n\n        uint initialCRatio = _currentDebt.divideDecimal(_stakedExTokenAmount.add(_periCollateral));\n        // it doesn't satisfy target c-ratio\n        if (initialCRatio > targetRatio) {\n            uint maxAllowedExTokenStakeAmountByPeriCollateral =\n                _periCollateral.multiplyDecimal(exTokenQuota.divideDecimal(SafeDecimalMath.unit().sub(exTokenQuota)));\n            exTokenAmountToUnstake = _stakedExTokenAmount > maxAllowedExTokenStakeAmountByPeriCollateral\n                ? _stakedExTokenAmount.sub(maxAllowedExTokenStakeAmountByPeriCollateral)\n                : 0;\n            burnAmount = _currentDebt.sub(\n                _periCollateral.add(_stakedExTokenAmount).sub(exTokenAmountToUnstake).multiplyDecimal(targetRatio)\n            );\n\n            // it satisfies target c-ratio but violates external token quota\n        } else {\n            uint currentExTokenQuota = _stakedExTokenAmount.multiplyDecimal(targetRatio).divideDecimal(_currentDebt);\n            require(currentExTokenQuota > exTokenQuota, \"Account is already claimable\");\n\n            burnAmount = (_stakedExTokenAmount.multiplyDecimal(targetRatio).sub(_currentDebt.multiplyDecimal(exTokenQuota)))\n                .divideDecimal(SafeDecimalMath.unit().sub(exTokenQuota));\n            exTokenAmountToUnstake = burnAmount.divideDecimal(targetRatio);\n        }\n    }\n\n    /**\n     * @notice It calculates maximum issue/stake(external token) amount to meet external token quota limit.\n     *\n     * @param _from target address\n     * @param _debtBalance current debt balance[pUSD]\n     * @param _stakedAmount currently target address's external token staked amount[pUSD]\n     * @param _currencyKey currency key of external token to stake\n     */\n    function _maxExternalTokenStakeAmount(\n        address _from,\n        uint _debtBalance,\n        uint _stakedAmount,\n        bytes32 _currencyKey\n    ) internal view returns (uint issueAmount, uint stakeAmount) {\n        uint targetRatio = getIssuanceRatio();\n        uint quotaLimit = getExternalTokenQuota();\n\n        uint maxAllowedStakingAmount = _debtBalance.multiplyDecimal(quotaLimit).divideDecimal(targetRatio);\n        if (_stakedAmount >= maxAllowedStakingAmount) {\n            return (0, 0);\n        }\n\n        stakeAmount = ((maxAllowedStakingAmount).sub(_stakedAmount)).divideDecimal(SafeDecimalMath.unit().sub(quotaLimit));\n\n        uint balance = IERC20(exTokenStakeManager().getTokenAddress(_currencyKey)).balanceOf(_from);\n        stakeAmount = balance < stakeAmount ? balance : stakeAmount;\n        issueAmount = stakeAmount.multiplyDecimal(targetRatio);\n    }\n\n    function minimumStakeTime() external view returns (uint) {\n        return getMinimumStakeTime();\n    }\n\n    function canBurnPynths(address account) external view returns (bool) {\n        return _canBurnPynths(account);\n    }\n\n    function availableCurrencyKeys() external view returns (bytes32[] memory) {\n        return _availableCurrencyKeysWithOptionalPERI(false);\n    }\n\n    function availablePynthCount() external view returns (uint) {\n        return availablePynths.length;\n    }\n\n    function anyPynthOrPERIRateIsInvalid() external view returns (bool anyRateInvalid) {\n        (, anyRateInvalid) = exchangeRates().ratesAndInvalidForCurrencies(_availableCurrencyKeysWithOptionalPERI(true));\n    }\n\n    function totalIssuedPynths(bytes32 currencyKey, bool excludeEtherCollateral) external view returns (uint totalIssued) {\n        (totalIssued, ) = _totalIssuedPynths(currencyKey, excludeEtherCollateral);\n    }\n\n    function lastIssueEvent(address account) external view returns (uint) {\n        return _lastIssueEvent(account);\n    }\n\n    function collateralisationRatio(address _issuer) external view returns (uint cratio) {\n        (cratio, ) = _collateralisationRatio(_issuer);\n    }\n\n    function collateralisationRatioAndAnyRatesInvalid(address _issuer)\n        external\n        view\n        returns (uint cratio, bool anyRateIsInvalid)\n    {\n        return _collateralisationRatio(_issuer);\n    }\n\n    function collateral(address account) external view returns (uint) {\n        return _collateral(account);\n    }\n\n    function debtBalanceOf(address _issuer, bytes32 currencyKey) external view returns (uint debtBalance) {\n        IPeriFinanceState state = periFinanceState();\n\n        // What was their initial debt ownership?\n        (uint initialDebtOwnership, ) = state.issuanceData(_issuer);\n\n        // If it's zero, they haven't issued, and they have no debt.\n        if (initialDebtOwnership == 0) return 0;\n\n        (debtBalance, , ) = _debtBalanceOfAndTotalDebt(_issuer, currencyKey);\n    }\n\n    function remainingIssuablePynths(address _issuer)\n        external\n        view\n        returns (\n            uint maxIssuable,\n            uint alreadyIssued,\n            uint totalSystemDebt\n        )\n    {\n        (maxIssuable, alreadyIssued, totalSystemDebt, ) = _remainingIssuablePynths(_issuer);\n    }\n\n    function maxIssuablePynths(address _issuer) external view returns (uint) {\n        (uint maxIssuable, ) = _maxIssuablePynths(_issuer);\n        return maxIssuable;\n    }\n\n    function externalTokenQuota(\n        address _account,\n        uint _additionalpUSD,\n        uint _additionalExToken,\n        bool _isIssue\n    ) external view returns (uint) {\n        (uint debtBalance, , bool anyRateIsInvalid) = _debtBalanceOfAndTotalDebt(_account, pUSD);\n\n        _requireRatesNotInvalid(anyRateIsInvalid);\n\n        uint estimatedQuota = _externalTokenQuota(_account, debtBalance, _additionalpUSD, _additionalExToken, _isIssue);\n\n        return estimatedQuota;\n    }\n\n    function maxExternalTokenStakeAmount(address _account, bytes32 _currencyKey)\n        external\n        view\n        returns (uint issueAmountToQuota, uint stakeAmountToQuota)\n    {\n        (uint debtBalance, , ) = _debtBalanceOfAndTotalDebt(_account, pUSD);\n\n        uint combinedStakedAmount = exTokenStakeManager().combinedStakedAmountOf(_account, pUSD);\n\n        (issueAmountToQuota, stakeAmountToQuota) = _maxExternalTokenStakeAmount(\n            _account,\n            debtBalance,\n            combinedStakedAmount,\n            _currencyKey\n        );\n    }\n\n    function transferablePeriFinanceAndAnyRateIsInvalid(address account, uint balance)\n        external\n        view\n        returns (uint transferable, bool anyRateIsInvalid)\n    {\n        // How many PERI do they have, excluding escrow?\n        // Note: We're excluding escrow here because we're interested in their transferable amount\n        // and escrowed PERI are not transferable.\n\n        // How many of those will be locked by the amount they've issued?\n        // Assuming issuance ratio is 20%, then issuing 20 PERI of value would require\n        // 100 PERI to be locked in their wallet to maintain their collateralisation ratio\n        // The locked periFinance value can exceed their balance.\n        (uint debtBalance, , bool rateIsInvalid) = _debtBalanceOfAndTotalDebt(account, PERI);\n\n        uint debtAppliedIssuanceRatio = debtBalance.divideDecimalRound(getIssuanceRatio());\n\n        uint externalTokenStaked = exTokenStakeManager().combinedStakedAmountOf(account, PERI);\n\n        // If external token staked balance is larger than required collateral amount for current debt,\n        // no PERI would be locked. (But it violates external token staking quota rule)\n        uint lockedPeriFinanceValue =\n            debtAppliedIssuanceRatio > externalTokenStaked ? debtAppliedIssuanceRatio.sub(externalTokenStaked) : 0;\n\n        // If we exceed the balance, no PERI are transferable, otherwise the difference is.\n        if (lockedPeriFinanceValue >= balance) {\n            transferable = 0;\n        } else {\n            transferable = balance.sub(lockedPeriFinanceValue);\n        }\n\n        anyRateIsInvalid = rateIsInvalid;\n    }\n\n    function getPynths(bytes32[] calldata currencyKeys) external view returns (IPynth[] memory) {\n        uint numKeys = currencyKeys.length;\n        IPynth[] memory addresses = new IPynth[](numKeys);\n\n        for (uint i = 0; i < numKeys; i++) {\n            addresses[i] = pynths[currencyKeys[i]];\n        }\n\n        return addresses;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function _addPynth(IPynth pynth) internal {\n        bytes32 currencyKey = pynth.currencyKey();\n        require(pynths[currencyKey] == IPynth(0), \"Pynth exists\");\n        require(pynthsByAddress[address(pynth)] == bytes32(0), \"Pynth address already exists\");\n\n        availablePynths.push(pynth);\n        pynths[currencyKey] = pynth;\n        pynthsByAddress[address(pynth)] = currencyKey;\n\n        emit PynthAdded(currencyKey, address(pynth));\n    }\n\n    function addPynth(IPynth pynth) external onlyOwner {\n        _addPynth(pynth);\n        // Invalidate the cache to force a snapshot to be recomputed. If a pynth were to be added\n        // back to the system and it still somehow had cached debt, this would force the value to be\n        // updated.\n        debtCache().updateDebtCacheValidity(true);\n    }\n\n    function addPynths(IPynth[] calldata pynthsToAdd) external onlyOwner {\n        uint numPynths = pynthsToAdd.length;\n        for (uint i = 0; i < numPynths; i++) {\n            _addPynth(pynthsToAdd[i]);\n        }\n\n        // Invalidate the cache to force a snapshot to be recomputed.\n        debtCache().updateDebtCacheValidity(true);\n    }\n\n    function _removePynth(bytes32 currencyKey) internal {\n        address pynthToRemove = address(pynths[currencyKey]);\n        require(pynthToRemove != address(0), \"Pynth does not exist\");\n        require(IERC20(pynthToRemove).totalSupply() == 0, \"Pynth supply exists\");\n        require(currencyKey != pUSD, \"Cannot remove pynth\");\n\n        // Remove the pynth from the availablePynths array.\n        for (uint i = 0; i < availablePynths.length; i++) {\n            if (address(availablePynths[i]) == pynthToRemove) {\n                delete availablePynths[i];\n\n                // Copy the last pynth into the place of the one we just deleted\n                // If there's only one pynth, this is pynths[0] = pynths[0].\n                // If we're deleting the last one, it's also a NOOP in the same way.\n                availablePynths[i] = availablePynths[availablePynths.length - 1];\n\n                // Decrease the size of the array by one.\n                availablePynths.length--;\n\n                break;\n            }\n        }\n\n        // And remove it from the pynths mapping\n        delete pynthsByAddress[pynthToRemove];\n        delete pynths[currencyKey];\n\n        emit PynthRemoved(currencyKey, pynthToRemove);\n    }\n\n    function removePynth(bytes32 currencyKey) external onlyOwner {\n        // Remove its contribution from the debt pool snapshot, and\n        // invalidate the cache to force a new snapshot.\n        IIssuerInternalDebtCache cache = debtCache();\n        cache.updateCachedPynthDebtWithRate(currencyKey, 0);\n        cache.updateDebtCacheValidity(true);\n\n        _removePynth(currencyKey);\n    }\n\n    function removePynths(bytes32[] calldata currencyKeys) external onlyOwner {\n        uint numKeys = currencyKeys.length;\n\n        // Remove their contributions from the debt pool snapshot, and\n        // invalidate the cache to force a new snapshot.\n        IIssuerInternalDebtCache cache = debtCache();\n        uint[] memory zeroRates = new uint[](numKeys);\n        cache.updateCachedPynthDebtsWithRates(currencyKeys, zeroRates);\n        cache.updateDebtCacheValidity(true);\n\n        for (uint i = 0; i < numKeys; i++) {\n            _removePynth(currencyKeys[i]);\n        }\n    }\n\n    function issuePynths(\n        address _issuer,\n        bytes32 _currencyKey,\n        uint _issueAmount\n    ) external onlyPeriFinance {\n        _requireCurrencyKeyIsNotpUSD(_currencyKey);\n\n        if (_currencyKey != PERI) {\n            uint amountToStake = _issueAmount.divideDecimalRound(getIssuanceRatio());\n\n            (uint initialDebtOwnership, ) = periFinanceState().issuanceData(_issuer);\n            // Condition of policy, user must have any amount of PERI locked before staking external token.\n            require(initialDebtOwnership > 0, \"User does not have any debt yet\");\n\n            exTokenStakeManager().stake(_issuer, amountToStake, _currencyKey, pUSD);\n        }\n\n        (uint maxIssuable, uint existingDebt, uint totalSystemDebt, bool anyRateIsInvalid) =\n            _remainingIssuablePynths(_issuer);\n        _requireRatesNotInvalid(anyRateIsInvalid);\n\n        uint afterDebtBalance = _issuePynths(_issuer, _issueAmount, maxIssuable, existingDebt, totalSystemDebt, false);\n\n        // For preventing additional gas consumption by calculating debt twice, the quota checker is placed here.\n        _requireNotExceedsQuotaLimit(_issuer, afterDebtBalance, 0, 0, true);\n    }\n\n    function issueMaxPynths(address _issuer) external onlyPeriFinance {\n        (uint maxIssuable, uint existingDebt, uint totalSystemDebt, bool anyRateIsInvalid) =\n            _remainingIssuablePynths(_issuer);\n        _requireRatesNotInvalid(anyRateIsInvalid);\n\n        _issuePynths(_issuer, 0, maxIssuable, existingDebt, totalSystemDebt, true);\n    }\n\n    function issuePynthsToMaxQuota(address _issuer, bytes32 _currencyKey) external onlyPeriFinance {\n        _requireCurrencyKeyIsNotpUSD(_currencyKey);\n        require(_currencyKey != PERI, \"Only external token allowed to stake\");\n\n        (uint maxIssuable, uint existingDebt, uint totalSystemDebt, bool anyRateIsInvalid) =\n            _remainingIssuablePynths(_issuer);\n        _requireRatesNotInvalid(anyRateIsInvalid);\n        require(existingDebt > 0, \"User does not have any debt yet\");\n\n        uint combinedStakedAmount = exTokenStakeManager().combinedStakedAmountOf(_issuer, pUSD);\n        (uint issueAmountToQuota, uint stakeAmountToQuota) =\n            _maxExternalTokenStakeAmount(_issuer, existingDebt, combinedStakedAmount, _currencyKey);\n\n        require(issueAmountToQuota > 0 && stakeAmountToQuota > 0, \"No available external token staking amount\");\n\n        exTokenStakeManager().stake(_issuer, stakeAmountToQuota, _currencyKey, pUSD);\n\n        // maxIssuable should be increased for increased collateral\n        maxIssuable = maxIssuable.add(issueAmountToQuota);\n\n        uint afterDebtBalance = _issuePynths(_issuer, issueAmountToQuota, maxIssuable, existingDebt, totalSystemDebt, false);\n\n        // For preventing additional gas consumption by calculating debt twice, the quota checker is placed here.\n        _requireNotExceedsQuotaLimit(_issuer, afterDebtBalance, 0, 0, true);\n    }\n\n    function burnPynths(\n        address _from,\n        bytes32 _currencyKey,\n        uint _burnAmount\n    ) external onlyPeriFinance {\n        _requireCurrencyKeyIsNotpUSD(_currencyKey);\n\n        uint remainingDebt = _voluntaryBurnPynths(_from, _burnAmount, false, false);\n\n        if (_currencyKey == PERI) {\n            _requireNotExceedsQuotaLimit(_from, remainingDebt, 0, 0, false);\n        }\n\n        if (_currencyKey != PERI) {\n            exTokenStakeManager().unstake(_from, _burnAmount.divideDecimalRound(getIssuanceRatio()), _currencyKey, pUSD);\n        }\n    }\n\n    function fitToClaimable(address _from) external onlyPeriFinance {\n        (uint debtBalance, , bool anyRateIsInvalid) = _debtBalanceOfAndTotalDebt(_from, pUSD);\n        uint combinedStakedAmount = exTokenStakeManager().combinedStakedAmountOf(_from, pUSD);\n\n        (uint periRate, bool isPeriInvalid) = exchangeRates().rateAndInvalid(PERI);\n        uint periCollateralToUSD = _periToUSD(_collateral(_from), periRate);\n\n        _requireRatesNotInvalid(anyRateIsInvalid || isPeriInvalid);\n\n        (uint burnAmount, uint amountToUnstake) =\n            _amountsToFitClaimable(debtBalance, combinedStakedAmount, periCollateralToUSD);\n\n        _voluntaryBurnPynths(_from, burnAmount, true, false);\n\n        exTokenStakeManager().unstakeMultipleTokens(_from, amountToUnstake, pUSD);\n    }\n\n    function exit(address _from) external onlyPeriFinance {\n        _voluntaryBurnPynths(_from, 0, true, true);\n\n        bytes32[] memory tokenList = exTokenStakeManager().getTokenList();\n        for (uint i = 0; i < tokenList.length; i++) {\n            uint stakedAmount = exTokenStakeManager().stakedAmountOf(_from, tokenList[i], tokenList[i]);\n\n            if (stakedAmount == 0) {\n                continue;\n            }\n\n            exTokenStakeManager().unstake(_from, stakedAmount, tokenList[i], tokenList[i]);\n        }\n    }\n\n    function liquidateDelinquentAccount(\n        address account,\n        uint pusdAmount,\n        address liquidator\n    ) external onlyPeriFinance returns (uint totalRedeemed, uint amountToLiquidate) {\n        // Ensure waitingPeriod and pUSD balance is settled as burning impacts the size of debt pool\n        require(!exchanger().hasWaitingPeriodOrSettlementOwing(liquidator, pUSD), \"pUSD needs to be settled\");\n\n        // Check account is liquidation open\n        require(liquidations().isOpenForLiquidation(account), \"Account not open for liquidation\");\n\n        // require liquidator has enough pUSD\n        require(IERC20(address(pynths[pUSD])).balanceOf(liquidator) >= pusdAmount, \"Not enough pUSD\");\n\n        uint liquidationPenalty = liquidations().liquidationPenalty();\n\n        // What is their debt in pUSD?\n        (uint debtBalance, uint totalDebtIssued, bool anyRateIsInvalid) = _debtBalanceOfAndTotalDebt(account, pUSD);\n        (uint periRate, bool periRateInvalid) = exchangeRates().rateAndInvalid(PERI);\n        _requireRatesNotInvalid(anyRateIsInvalid || periRateInvalid);\n\n        uint collateralForAccount = _collateral(account);\n        uint amountToFixRatio =\n            liquidations().calculateAmountToFixCollateral(debtBalance, _periToUSD(collateralForAccount, periRate));\n\n        // Cap amount to liquidate to repair collateral ratio based on issuance ratio\n        amountToLiquidate = amountToFixRatio < pusdAmount ? amountToFixRatio : pusdAmount;\n\n        // what's the equivalent amount of peri for the amountToLiquidate?\n        uint periRedeemed = _usdToPeri(amountToLiquidate, periRate);\n\n        // Add penalty\n        totalRedeemed = periRedeemed.multiplyDecimal(SafeDecimalMath.unit().add(liquidationPenalty));\n\n        // if total PERI to redeem is greater than account's collateral\n        // account is under collateralised, liquidate all collateral and reduce pUSD to burn\n        if (totalRedeemed > collateralForAccount) {\n            // set totalRedeemed to all transferable collateral\n            totalRedeemed = collateralForAccount;\n\n            // whats the equivalent pUSD to burn for all collateral less penalty\n            amountToLiquidate = _periToUSD(\n                collateralForAccount.divideDecimal(SafeDecimalMath.unit().add(liquidationPenalty)),\n                periRate\n            );\n        }\n\n        // burn pUSD from messageSender (liquidator) and reduce account's debt\n        _burnPynths(account, liquidator, amountToLiquidate, debtBalance, totalDebtIssued);\n\n        // Remove liquidation flag if amount liquidated fixes ratio\n        if (amountToLiquidate == amountToFixRatio) {\n            // Remove liquidation\n            liquidations().removeAccountInLiquidation(account);\n        }\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function _requireRatesNotInvalid(bool anyRateIsInvalid) internal pure {\n        require(!anyRateIsInvalid, \"A pynth or PERI rate is invalid\");\n    }\n\n    function _requireCanIssueOnBehalf(address issueForAddress, address from) internal view {\n        require(delegateApprovals().canIssueFor(issueForAddress, from), \"Not approved to act on behalf\");\n    }\n\n    function _requireCanBurnOnBehalf(address burnForAddress, address from) internal view {\n        require(delegateApprovals().canBurnFor(burnForAddress, from), \"Not approved to act on behalf\");\n    }\n\n    function _requireCurrencyKeyIsNotpUSD(bytes32 _currencyKey) internal pure {\n        require(_currencyKey != pUSD, \"pUSD is not staking coin\");\n    }\n\n    function _requireNotExceedsQuotaLimit(\n        address _account,\n        uint _debtBalance,\n        uint _additionalpUSD,\n        uint _additionalExToken,\n        bool _isIssue\n    ) internal view {\n        uint estimatedExternalTokenQuota =\n            _externalTokenQuota(_account, _debtBalance, _additionalpUSD, _additionalExToken, _isIssue);\n\n        bytes32[] memory tokenList = exTokenStakeManager().getTokenList();\n        uint minDecimals = 18;\n        for (uint i = 0; i < tokenList.length; i++) {\n            uint decimals = exTokenStakeManager().getTokenDecimals(tokenList[i]);\n\n            minDecimals = decimals < minDecimals ? decimals : minDecimals;\n        }\n\n        require(\n            // due to the error caused by decimal difference, round down it upto minimum decimals among staking token list.\n            estimatedExternalTokenQuota.roundDownDecimal(uint(18).sub(minDecimals)) <= getExternalTokenQuota(),\n            \"External token staking amount exceeds quota limit\"\n        );\n    }\n\n    function _issuePynths(\n        address from,\n        uint amount,\n        uint maxIssuable,\n        uint existingDebt,\n        uint totalSystemDebt,\n        bool issueMax\n    ) internal returns (uint afterDebt) {\n        if (!issueMax) {\n            require(amount <= maxIssuable, \"Amount too large\");\n        } else {\n            amount = maxIssuable;\n        }\n\n        // Keep track of the debt they're about to create\n        _addToDebtRegister(from, amount, existingDebt, totalSystemDebt);\n\n        // record issue timestamp\n        _setLastIssueEvent(from);\n\n        // Create their pynths\n        pynths[pUSD].issue(from, amount);\n\n        // Account for the issued debt in the cache\n        debtCache().updateCachedPynthDebtWithRate(pUSD, SafeDecimalMath.unit());\n\n        // Store their locked PERI amount to determine their fee % for the period\n        _appendAccountIssuanceRecord(from);\n\n        afterDebt = existingDebt.add(amount);\n    }\n\n    function _burnPynths(\n        address debtAccount,\n        address burnAccount,\n        uint amountBurnt,\n        uint existingDebt,\n        uint totalDebtIssued\n    ) internal returns (uint) {\n        // liquidation requires pUSD to be already settled / not in waiting period\n\n        require(amountBurnt <= existingDebt, \"Trying to burn more than debt\");\n\n        // Remove liquidated debt from the ledger\n        _removeFromDebtRegister(debtAccount, amountBurnt, existingDebt, totalDebtIssued);\n\n        // pynth.burn does a safe subtraction on balance (so it will revert if there are not enough pynths).\n        pynths[pUSD].burn(burnAccount, amountBurnt);\n\n        // Account for the burnt debt in the cache.\n        debtCache().updateCachedPynthDebtWithRate(pUSD, SafeDecimalMath.unit());\n\n        // Store their debtRatio against a fee period to determine their fee/rewards % for the period\n        _appendAccountIssuanceRecord(debtAccount);\n\n        return amountBurnt;\n    }\n\n    // If burning to target, `amount` is ignored, and the correct quantity of pUSD is burnt to reach the target\n    // c-ratio, allowing fees to be claimed. In this case, pending settlements will be skipped as the user\n    // will still have debt remaining after reaching their target.\n    function _voluntaryBurnPynths(\n        address from,\n        uint amount,\n        bool burnToTarget,\n        bool burnMax\n    ) internal returns (uint remainingDebt) {\n        if (!burnToTarget) {\n            // If not burning to target, then burning requires that the minimum stake time has elapsed.\n            require(_canBurnPynths(from), \"Minimum stake time not reached\");\n            // First settle anything pending into pUSD as burning or issuing impacts the size of the debt pool\n            (, uint refunded, uint numEntriesSettled) = exchanger().settle(from, pUSD);\n            if (numEntriesSettled > 0) {\n                amount = exchanger().calculateAmountAfterSettlement(from, pUSD, amount, refunded);\n            }\n        }\n\n        (uint existingDebt, uint totalSystemValue, bool anyRateIsInvalid) = _debtBalanceOfAndTotalDebt(from, pUSD);\n        (uint maxIssuablePynthsForAccount, bool periRateInvalid) = _maxIssuablePynths(from);\n        _requireRatesNotInvalid(anyRateIsInvalid || periRateInvalid);\n        require(existingDebt > 0, \"No debt to forgive\");\n\n        if (burnMax) {\n            amount = existingDebt;\n        }\n\n        uint amountBurnt = _burnPynths(from, from, amount, existingDebt, totalSystemValue);\n        remainingDebt = existingDebt.sub(amountBurnt);\n\n        // Check and remove liquidation if existingDebt after burning is <= maxIssuablePynths\n        // Issuance ratio is fixed so should remove any liquidations\n        if (existingDebt >= amountBurnt && remainingDebt <= maxIssuablePynthsForAccount) {\n            liquidations().removeAccountInLiquidation(from);\n        }\n    }\n\n    function _setLastIssueEvent(address account) internal {\n        // Set the timestamp of the last issuePynths\n        flexibleStorage().setUIntValue(\n            CONTRACT_NAME,\n            keccak256(abi.encodePacked(LAST_ISSUE_EVENT, account)),\n            block.timestamp\n        );\n    }\n\n    function _appendAccountIssuanceRecord(address from) internal {\n        uint initialDebtOwnership;\n        uint debtEntryIndex;\n        (initialDebtOwnership, debtEntryIndex) = periFinanceState().issuanceData(from);\n        feePool().appendAccountIssuanceRecord(from, initialDebtOwnership, debtEntryIndex);\n    }\n\n    function _addToDebtRegister(\n        address from,\n        uint amount,\n        uint existingDebt,\n        uint totalDebtIssued\n    ) internal {\n        IPeriFinanceState state = periFinanceState();\n\n        // What will the new total be including the new value?\n        uint newTotalDebtIssued = amount.add(totalDebtIssued);\n\n        // What is their percentage (as a high precision int) of the total debt?\n        uint debtPercentage = amount.divideDecimalRoundPrecise(newTotalDebtIssued);\n\n        // And what effect does this percentage change have on the global debt holding of other issuers?\n        // The delta specifically needs to not take into account any existing debt as it's already\n        // accounted for in the delta from when they issued previously.\n        // The delta is a high precision integer.\n        uint delta = SafeDecimalMath.preciseUnit().sub(debtPercentage);\n\n        // And what does their debt ownership look like including this previous stake?\n        if (existingDebt > 0) {\n            debtPercentage = amount.add(existingDebt).divideDecimalRoundPrecise(newTotalDebtIssued);\n        } else {\n            // If they have no debt, they're a new issuer; record this.\n            state.incrementTotalIssuerCount();\n        }\n\n        // Save the debt entry parameters\n        state.setCurrentIssuanceData(from, debtPercentage);\n\n        // And if we're the first, push 1 as there was no effect to any other holders, otherwise push\n        // the change for the rest of the debt holders. The debt ledger holds high precision integers.\n        if (state.debtLedgerLength() > 0 && state.lastDebtLedgerEntry() != 0) {\n            state.appendDebtLedgerValue(state.lastDebtLedgerEntry().multiplyDecimalRoundPrecise(delta));\n        } else {\n            state.appendDebtLedgerValue(SafeDecimalMath.preciseUnit());\n        }\n    }\n\n    function _removeFromDebtRegister(\n        address from,\n        uint debtToRemove,\n        uint existingDebt,\n        uint totalDebtIssued\n    ) internal {\n        IPeriFinanceState state = periFinanceState();\n\n        // What will the new total after taking out the withdrawn amount\n        uint newTotalDebtIssued = totalDebtIssued.sub(debtToRemove);\n\n        uint delta = 0;\n\n        // What will the debt delta be if there is any debt left?\n        // Set delta to 0 if no more debt left in system after user\n        if (newTotalDebtIssued > 0) {\n            // What is the percentage of the withdrawn debt (as a high precision int) of the total debt after?\n            uint debtPercentage = debtToRemove.divideDecimalRoundPrecise(newTotalDebtIssued);\n\n            // And what effect does this percentage change have on the global debt holding of other issuers?\n            // The delta specifically needs to not take into account any existing debt as it's already\n            // accounted for in the delta from when they issued previously.\n            delta = SafeDecimalMath.preciseUnit().add(debtPercentage);\n        }\n\n        // Are they exiting the system, or are they just decreasing their debt position?\n        if (debtToRemove == existingDebt) {\n            state.setCurrentIssuanceData(from, 0);\n            state.decrementTotalIssuerCount();\n        } else {\n            // What percentage of the debt will they be left with?\n            uint newDebt = existingDebt.sub(debtToRemove);\n            uint newDebtPercentage = newDebt.divideDecimalRoundPrecise(newTotalDebtIssued);\n\n            // Store the debt percentage and debt ledger as high precision integers\n            state.setCurrentIssuanceData(from, newDebtPercentage);\n        }\n\n        // Update our cumulative ledger. This is also a high precision integer.\n        state.appendDebtLedgerValue(state.lastDebtLedgerEntry().multiplyDecimalRoundPrecise(delta));\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    function _onlyPeriFinance() internal view {\n        require(msg.sender == address(periFinance()), \"Issuer: Only the periFinance contract can perform this action\");\n    }\n\n    modifier onlyPeriFinance() {\n        _onlyPeriFinance(); // Use an internal function to save code size.\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event PynthAdded(bytes32 currencyKey, address pynth);\n    event PynthRemoved(bytes32 currencyKey, address pynth);\n}\n\n    ","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pynth\",\"type\":\"address\"}],\"name\":\"PynthAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pynth\",\"type\":\"address\"}],\"name\":\"PynthRemoved\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IPynth\",\"name\":\"pynth\",\"type\":\"address\"}],\"name\":\"addPynth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IPynth[]\",\"name\":\"pynthsToAdd\",\"type\":\"address[]\"}],\"name\":\"addPynths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"anyPynthOrPERIRateIsInvalid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"anyRateInvalid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableCurrencyKeys\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availablePynthCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"availablePynths\",\"outputs\":[{\"internalType\":\"contract IPynth\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_currencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_burnAmount\",\"type\":\"uint256\"}],\"name\":\"burnPynths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canBurnPynths\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"collateralisationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cratio\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"collateralisationRatioAndAnyRatesInvalid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cratio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"anyRateIsInvalid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"debtBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"externalTokenLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_additionalpUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_additionalExToken\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isIssue\",\"type\":\"bool\"}],\"name\":\"externalTokenQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"fitToClaimable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"currencyKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getPynths\",\"outputs\":[{\"internalType\":\"contract IPynth[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuanceRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"issueMaxPynths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_currencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_issueAmount\",\"type\":\"uint256\"}],\"name\":\"issuePynths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_currencyKey\",\"type\":\"bytes32\"}],\"name\":\"issuePynthsToMaxQuota\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lastIssueEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pusdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"liquidateDelinquentAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToLiquidate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_currencyKey\",\"type\":\"bytes32\"}],\"name\":\"maxExternalTokenStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"issueAmountToQuota\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmountToQuota\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"maxIssuablePynths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pynths\",\"outputs\":[{\"internalType\":\"contract IPynth\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pynthsByAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rebuildCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"remainingIssuablePynths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxIssuable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alreadyIssued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSystemDebt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"removePynth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"currencyKeys\",\"type\":\"bytes32[]\"}],\"name\":\"removePynths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract AddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolverAddressesRequired\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"addresses\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"excludeEtherCollateral\",\"type\":\"bool\"}],\"name\":\"totalIssuedPynths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalIssued\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"transferablePeriFinanceAndAnyRateIsInvalid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transferable\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"anyRateIsInvalid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Issuer","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000918153d6e806df9d4d33664d1cc580416171f7200000000000000000000000007015cd1e78ba1428d103b0c2513077b2826b64fc","EVMVersion":"Default","Library":"SafeDecimalMath:6e0bff12512a94f3b1ecebe08203fe7f8f8fae64","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}