{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/access/MarketAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './interfaces/IManagedMarketAccessController.sol';\\nimport './AccessController.sol';\\nimport './AccessFlags.sol';\\n\\n/// @dev Main registry of addresses part of or connected to the protocol, including permissioned roles. Also acts a proxy factory.\\ncontract MarketAccessController is AccessController, IManagedMarketAccessController {\\n  string private _marketId;\\n\\n  constructor(string memory marketId) AccessController(AccessFlags.SINGLETONS, AccessFlags.ROLES, AccessFlags.PROXIES) {\\n    _marketId = marketId;\\n  }\\n\\n  function getMarketId() external view override returns (string memory) {\\n    return _marketId;\\n  }\\n\\n  function setMarketId(string memory marketId) external override onlyAdmin {\\n    _marketId = marketId;\\n    emit MarketIdSet(marketId);\\n  }\\n\\n  function getLendingPool() external view override returns (address) {\\n    return getAddress(AccessFlags.LENDING_POOL);\\n  }\\n\\n  function getPriceOracle() external view override returns (address) {\\n    return getAddress(AccessFlags.PRICE_ORACLE);\\n  }\\n\\n  function getLendingRateOracle() external view override returns (address) {\\n    return getAddress(AccessFlags.LENDING_RATE_ORACLE);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IManagedMarketAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IMarketAccessController.sol';\\n\\ninterface IManagedMarketAccessController is IMarketAccessController {\\n  event MarketIdSet(string newMarketId);\\n\\n  function setMarketId(string memory marketId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/access/AccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../dependencies/openzeppelin/contracts/Address.sol';\\nimport '../tools/SafeOwnable.sol';\\nimport '../tools/Errors.sol';\\nimport '../tools/math/BitUtils.sol';\\nimport '../tools/upgradeability/TransparentProxy.sol';\\nimport '../tools/upgradeability/IProxy.sol';\\nimport './interfaces/IAccessController.sol';\\nimport './interfaces/IManagedAccessController.sol';\\nimport './AccessCallHelper.sol';\\n\\ncontract AccessController is SafeOwnable, IManagedAccessController {\\n  using BitUtils for uint256;\\n\\n  AccessCallHelper private _callHelper;\\n\\n  mapping(uint256 => address) private _addresses;\\n  mapping(address => uint256) private _masks;\\n  mapping(uint256 => address[]) private _grantees;\\n  uint256 private _nonSingletons;\\n  uint256 private _singletons;\\n  uint256 private _proxies;\\n\\n  address private _tempAdmin;\\n  uint256 private _expiresAt;\\n\\n  uint8 private constant anyRoleBlocked = 1;\\n  uint8 private constant anyRoleEnabled = 2;\\n  uint8 private _anyRoleMode;\\n\\n  constructor(\\n    uint256 singletons,\\n    uint256 nonSingletons,\\n    uint256 proxies\\n  ) {\\n    require(singletons & nonSingletons == 0, 'mixed types');\\n    require(singletons & proxies == proxies, 'all proxies must be singletons');\\n    _singletons = singletons;\\n    _nonSingletons = nonSingletons;\\n    _proxies = proxies;\\n    _callHelper = new AccessCallHelper(address(this));\\n  }\\n\\n  function _onlyAdmin() private view {\\n    require(\\n      msg.sender == owner() || (msg.sender == _tempAdmin && _expiresAt > block.number),\\n      Errors.TXT_OWNABLE_CALLER_NOT_OWNER\\n    );\\n  }\\n\\n  modifier onlyAdmin() {\\n    _onlyAdmin();\\n    _;\\n  }\\n\\n  function queryAccessControlMask(address addr, uint256 filter) external view override returns (uint256 flags) {\\n    flags = _masks[addr];\\n    if (filter == 0) {\\n      return flags;\\n    }\\n    return flags & filter;\\n  }\\n\\n  function setTemporaryAdmin(address admin, uint32 expiryBlocks) external override onlyOwner {\\n    if (_tempAdmin != address(0)) {\\n      _revokeAllRoles(_tempAdmin);\\n    }\\n    if (admin != address(0)) {\\n      _expiresAt = block.number + expiryBlocks;\\n    }\\n    _tempAdmin = admin;\\n    emit TemporaryAdminAssigned(_tempAdmin, _expiresAt);\\n  }\\n\\n  function getTemporaryAdmin() external view override returns (address admin, uint256 expiresAtBlock) {\\n    if (admin != address(0)) {\\n      return (_tempAdmin, _expiresAt);\\n    }\\n    return (address(0), 0);\\n  }\\n\\n  /// @dev Renouncement has no time limit and can be done either by the temporary admin at any time, or by anyone after the expiry.\\n  function renounceTemporaryAdmin() external override {\\n    if (_tempAdmin == address(0)) {\\n      return;\\n    }\\n    if (msg.sender != _tempAdmin && _expiresAt > block.number) {\\n      return;\\n    }\\n    _revokeAllRoles(_tempAdmin);\\n    _tempAdmin = address(0);\\n    emit TemporaryAdminAssigned(address(0), 0);\\n  }\\n\\n  function setAnyRoleMode(bool blockOrEnable) external onlyAdmin {\\n    require(_anyRoleMode != anyRoleBlocked);\\n    if (blockOrEnable) {\\n      _anyRoleMode = anyRoleEnabled;\\n      emit AnyRoleModeEnabled();\\n    } else {\\n      _anyRoleMode = anyRoleBlocked;\\n      emit AnyRoleModeBlocked();\\n    }\\n  }\\n\\n  function grantRoles(address addr, uint256 flags) external onlyAdmin returns (uint256) {\\n    require(_singletons & flags == 0, 'singleton should use setAddress');\\n    return _grantRoles(addr, flags);\\n  }\\n\\n  function grantAnyRoles(address addr, uint256 flags) external onlyAdmin returns (uint256) {\\n    require(_anyRoleMode == anyRoleEnabled);\\n    return _grantRoles(addr, flags);\\n  }\\n\\n  function _grantRoles(address addr, uint256 flags) private returns (uint256) {\\n    uint256 m = _masks[addr];\\n    flags &= ~m;\\n    if (flags == 0) {\\n      return m;\\n    }\\n\\n    _nonSingletons |= flags & ~_singletons;\\n\\n    m |= flags;\\n    _masks[addr] = m;\\n\\n    for (uint8 i = 0; i <= 255; i++) {\\n      uint256 mask = uint256(1) << i;\\n      if (mask & flags == 0) {\\n        if (mask > flags) {\\n          break;\\n        }\\n        continue;\\n      }\\n      address[] storage grantees = _grantees[mask];\\n      if (grantees.length == 0 || grantees[grantees.length - 1] != addr) {\\n        grantees.push(addr);\\n      }\\n    }\\n\\n    emit RolesUpdated(addr, m);\\n    return m;\\n  }\\n\\n  function revokeRoles(address addr, uint256 flags) external onlyAdmin returns (uint256) {\\n    require(_singletons & flags == 0, 'singleton should use setAddress');\\n\\n    return _revokeRoles(addr, flags);\\n  }\\n\\n  function revokeAllRoles(address addr) external onlyAdmin returns (uint256) {\\n    return _revokeAllRoles(addr);\\n  }\\n\\n  function _revokeAllRoles(address addr) private returns (uint256) {\\n    uint256 m = _masks[addr];\\n    if (m == 0) {\\n      return 0;\\n    }\\n    delete (_masks[addr]);\\n    emit RolesUpdated(addr, 0);\\n\\n    uint256 flags = m & _singletons;\\n    if (flags == 0) {\\n      return m;\\n    }\\n\\n    for (uint8 i = 0; i <= 255; i++) {\\n      uint256 mask = uint256(1) << i;\\n      if (mask & flags == 0) {\\n        if (mask > flags) {\\n          break;\\n        }\\n        continue;\\n      }\\n      if (_addresses[mask] == addr) {\\n        delete (_addresses[mask]);\\n      }\\n    }\\n    return m;\\n  }\\n\\n  function _revokeRoles(address addr, uint256 flags) private returns (uint256) {\\n    uint256 m = _masks[addr];\\n    if (m & flags != 0) {\\n      m &= ~flags;\\n      _masks[addr] = m;\\n      emit RolesUpdated(addr, m);\\n    }\\n    return m;\\n  }\\n\\n  function revokeRolesFromAll(uint256 flags, uint256 limit) external onlyAdmin returns (bool all) {\\n    all = true;\\n\\n    for (uint8 i = 0; i <= 255; i++) {\\n      uint256 mask = uint256(1) << i;\\n      if (mask & flags == 0) {\\n        if (mask > flags) {\\n          break;\\n        }\\n        continue;\\n      }\\n      if (mask & _singletons != 0 && _addresses[mask] != address(0)) {\\n        delete (_addresses[mask]);\\n        emit AddressSet(mask, address(0), _proxies & mask != 0);\\n      }\\n\\n      if (!all) {\\n        continue;\\n      }\\n\\n      address[] storage grantees = _grantees[mask];\\n      for (uint256 j = grantees.length; j > 0; ) {\\n        j--;\\n        if (limit == 0) {\\n          all = false;\\n          break;\\n        }\\n        limit--;\\n        _revokeRoles(grantees[j], mask);\\n        grantees.pop();\\n      }\\n    }\\n    return all;\\n  }\\n\\n  function roleGrantees(uint256 id) external view returns (address[] memory addrList) {\\n    require(id.isPowerOf2nz(), 'only one role is allowed');\\n\\n    if (_singletons & id == 0) {\\n      return _grantees[id];\\n    }\\n\\n    address singleton = _addresses[id];\\n    if (singleton == address(0)) {\\n      return _grantees[id];\\n    }\\n\\n    address[] storage grantees = _grantees[id];\\n\\n    addrList = new address[](1 + grantees.length);\\n    addrList[0] = singleton;\\n    for (uint256 i = 1; i < addrList.length; i++) {\\n      addrList[i] = grantees[i - 1];\\n    }\\n    return addrList;\\n  }\\n\\n  function roleActiveGrantees(uint256 id) external view returns (address[] memory addrList, uint256 count) {\\n    require(id.isPowerOf2nz(), 'only one role is allowed');\\n\\n    address addr;\\n    if (_singletons & id != 0) {\\n      addr = _addresses[id];\\n    }\\n\\n    address[] storage grantees = _grantees[id];\\n\\n    if (addr == address(0)) {\\n      addrList = new address[](grantees.length);\\n    } else {\\n      addrList = new address[](1 + grantees.length);\\n      addrList[0] = addr;\\n      count++;\\n    }\\n\\n    for (uint256 i = 0; i < grantees.length; i++) {\\n      addr = grantees[i];\\n      if (_masks[addr] & id != 0) {\\n        addrList[count] = addr;\\n        count++;\\n      }\\n    }\\n    return (addrList, count);\\n  }\\n\\n  /**\\n   * @dev Sets a sigleton address, replaces previous value\\n   * IMPORTANT Use this function carefully, as it does a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(uint256 id, address newAddress) public override onlyAdmin {\\n    require(_proxies & id == 0, 'setAddressAsProxy is required');\\n    _internalSetAddress(id, newAddress);\\n    emit AddressSet(id, newAddress, false);\\n  }\\n\\n  function _internalSetAddress(uint256 id, address newAddress) private {\\n    require(id.isPowerOf2nz(), 'invalid singleton id');\\n    if (_singletons & id == 0) {\\n      require(_nonSingletons & id == 0, 'id is not a singleton');\\n      _singletons |= id;\\n    }\\n\\n    address prev = _addresses[id];\\n    if (prev != address(0)) {\\n      _masks[prev] = _masks[prev] & ~id;\\n    }\\n    if (newAddress != address(0)) {\\n      require(Address.isContract(newAddress), 'must be contract');\\n      _masks[newAddress] = _masks[newAddress] | id;\\n    }\\n    _addresses[id] = newAddress;\\n  }\\n\\n  /**\\n   * @dev Returns a singleton address by id\\n   * @return addr The address\\n   */\\n  function getAddress(uint256 id) public view override returns (address addr) {\\n    addr = _addresses[id];\\n\\n    if (addr == address(0)) {\\n      require(id.isPowerOf2nz(), 'invalid singleton id');\\n      require((_singletons & id != 0) || (_nonSingletons & id == 0), 'id is not a singleton');\\n    }\\n    return addr;\\n  }\\n\\n  function isAddress(uint256 id, address addr) public view returns (bool) {\\n    // require(id.isPowerOf2nz(), 'only singleton id is accepted');\\n    return _masks[addr] & id != 0;\\n  }\\n\\n  function markProxies(uint256 id) external onlyAdmin {\\n    _proxies |= id;\\n  }\\n\\n  function unmarkProxies(uint256 id) external onlyAdmin {\\n    _proxies &= ~id;\\n  }\\n\\n  /**\\n   * @dev General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `implAddress`\\n   * @param id The id\\n   * @param implAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(uint256 id, address implAddress) public override onlyAdmin {\\n    _updateImpl(id, implAddress, abi.encodeWithSignature('initialize(address)', address(this)));\\n    emit AddressSet(id, implAddress, true);\\n  }\\n\\n  function setAddressAsProxyWithInit(\\n    uint256 id,\\n    address implAddress,\\n    bytes calldata params\\n  ) public override onlyAdmin {\\n    _updateImpl(id, implAddress, params);\\n    emit AddressSet(id, implAddress, true);\\n  }\\n\\n  /**\\n   * @dev Internal function to update the implementation of a specific proxied component of the protocol\\n   * - If there is no proxy registered in the given `id`, it creates the proxy setting `newAdress`\\n   *   as implementation and calls a function on the proxy.\\n   * - If there is already a proxy registered, it updates the implementation to `newAddress` by\\n   *   the upgradeToAndCall() of the proxy.\\n   * @param id The id of the proxy to be updated\\n   * @param newAddress The address of the new implementation\\n   * @param params The address of the new implementation\\n   **/\\n  function _updateImpl(\\n    uint256 id,\\n    address newAddress,\\n    bytes memory params\\n  ) private {\\n    require(id.isPowerOf2nz(), 'invalid singleton id');\\n    address payable proxyAddress = payable(getAddress(id));\\n\\n    if (proxyAddress != address(0)) {\\n      require(_proxies & id != 0, 'use of setAddress is required');\\n      TransparentProxy(proxyAddress).upgradeToAndCall(newAddress, params);\\n      return;\\n    }\\n\\n    proxyAddress = payable(address(_createProxy(address(this), newAddress, params)));\\n    _internalSetAddress(id, proxyAddress);\\n    _proxies |= id;\\n    emit ProxyCreated(id, proxyAddress);\\n  }\\n\\n  function _createProxy(\\n    address adminAddress,\\n    address implAddress,\\n    bytes memory params\\n  ) private returns (TransparentProxy) {\\n    TransparentProxy proxy = new TransparentProxy(adminAddress, implAddress, params);\\n    return proxy;\\n  }\\n\\n  function createProxy(\\n    address adminAddress,\\n    address implAddress,\\n    bytes calldata params\\n  ) public override returns (IProxy) {\\n    return _createProxy(adminAddress, implAddress, params);\\n  }\\n\\n  function directCallWithRoles(\\n    uint256 flags,\\n    address addr,\\n    bytes calldata data\\n  ) external override onlyAdmin returns (bytes memory result) {\\n    require(addr != address(this) && Address.isContract(addr), 'must be another contract');\\n\\n    (bool restoreMask, uint256 oldMask) = _beforeDirectCallWithRoles(flags, addr);\\n\\n    result = Address.functionCall(addr, data);\\n\\n    if (restoreMask) {\\n      _afterDirectCallWithRoles(addr, oldMask);\\n    }\\n    return result;\\n  }\\n\\n  function _beforeDirectCallWithRoles(uint256 flags, address addr) private returns (bool restoreMask, uint256 oldMask) {\\n    if (_singletons & flags != 0) {\\n      require(_anyRoleMode == anyRoleEnabled, 'singleton should use setAddress');\\n      _nonSingletons |= flags & ~_singletons;\\n    } else {\\n      _nonSingletons |= flags;\\n    }\\n\\n    oldMask = _masks[addr];\\n    if (flags & ~oldMask != 0) {\\n      _masks[addr] = oldMask | flags;\\n      emit RolesUpdated(addr, oldMask | flags);\\n      return (true, oldMask);\\n    }\\n    return (false, oldMask);\\n  }\\n\\n  function _afterDirectCallWithRoles(address addr, uint256 oldMask) private {\\n    _masks[addr] = oldMask;\\n    emit RolesUpdated(addr, oldMask);\\n  }\\n\\n  function callWithRoles(CallParams[] calldata params) external override onlyAdmin returns (bytes[] memory results) {\\n    address callHelper = address(_callHelper);\\n\\n    results = new bytes[](params.length);\\n\\n    for (uint256 i = 0; i < params.length; i++) {\\n      (bool restoreMask, ) = _beforeDirectCallWithRoles(params[i].accessFlags, callHelper);\\n\\n      address callAddr = params[i].callAddr == address(0) ? getAddress(params[i].callFlag) : params[i].callAddr;\\n      results[i] = AccessCallHelper(callHelper).doCall(callAddr, params[i].callData);\\n\\n      if (restoreMask) {\\n        _afterDirectCallWithRoles(callHelper, 0); // call helper can't have any default roles\\n      }\\n    }\\n    return results;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/access/AccessFlags.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nlibrary AccessFlags {\\n  // roles that can be assigned to multiple addresses - use range [0..15]\\n  uint256 public constant EMERGENCY_ADMIN = 1 << 0;\\n  uint256 public constant POOL_ADMIN = 1 << 1;\\n  uint256 public constant TREASURY_ADMIN = 1 << 2;\\n  uint256 public constant REWARD_CONFIG_ADMIN = 1 << 3;\\n  uint256 public constant REWARD_RATE_ADMIN = 1 << 4;\\n  uint256 public constant STAKE_ADMIN = 1 << 5;\\n  uint256 public constant REFERRAL_ADMIN = 1 << 6;\\n  uint256 public constant LENDING_RATE_ADMIN = 1 << 7;\\n  uint256 public constant SWEEP_ADMIN = 1 << 8;\\n  uint256 public constant ORACLE_ADMIN = 1 << 9;\\n\\n  uint256 public constant ROLES = (uint256(1) << 16) - 1;\\n\\n  // singletons - use range [16..64] - can ONLY be assigned to a single address\\n  uint256 public constant SINGLETONS = ((uint256(1) << 64) - 1) & ~ROLES;\\n\\n  // proxied singletons\\n  uint256 public constant LENDING_POOL = 1 << 16;\\n  uint256 public constant LENDING_POOL_CONFIGURATOR = 1 << 17;\\n  uint256 public constant LIQUIDITY_CONTROLLER = 1 << 18;\\n  uint256 public constant TREASURY = 1 << 19;\\n  uint256 public constant REWARD_TOKEN = 1 << 20;\\n  uint256 public constant REWARD_STAKE_TOKEN = 1 << 21;\\n  uint256 public constant REWARD_CONTROLLER = 1 << 22;\\n  uint256 public constant REWARD_CONFIGURATOR = 1 << 23;\\n  uint256 public constant STAKE_CONFIGURATOR = 1 << 24;\\n  uint256 public constant REFERRAL_REGISTRY = 1 << 25;\\n\\n  uint256 public constant PROXIES = ((uint256(1) << 26) - 1) & ~ROLES;\\n\\n  // non-proxied singletons, numbered down from 31 (as JS has problems with bitmasks over 31 bits)\\n  uint256 public constant WETH_GATEWAY = 1 << 27;\\n  uint256 public constant DATA_HELPER = 1 << 28;\\n  uint256 public constant PRICE_ORACLE = 1 << 29;\\n  uint256 public constant LENDING_RATE_ORACLE = 1 << 30;\\n\\n  // any other roles - use range [64..]\\n  // these roles can be assigned to multiple addresses\\n\\n  uint256 public constant TRUSTED_FLASHLOAN = 1 << 66;\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IMarketAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IAccessController.sol';\\n\\n/// @dev Main registry of addresses part of or connected to the protocol, including permissioned roles. Also acts a proxy factory.\\ninterface IMarketAccessController is IAccessController {\\n  function getMarketId() external view returns (string memory);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function getLendingRateOracle() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IRemoteAccessBitmask.sol';\\nimport '../../tools/upgradeability/IProxy.sol';\\n\\n/// @dev Main registry of permissions and addresses\\ninterface IAccessController is IRemoteAccessBitmask {\\n  function getAddress(uint256 id) external view returns (address);\\n\\n  function createProxy(\\n    address admin,\\n    address impl,\\n    bytes calldata params\\n  ) external returns (IProxy);\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IRemoteAccessBitmask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IRemoteAccessBitmask {\\n  /**\\n   * @dev Returns access flags granted to the given address and limited by the filterMask. filterMask == 0 has a special meaning.\\n   * @param addr an to get access perfmissions for\\n   * @param filterMask limits a subset of flags to be checked.\\n   * NB! When filterMask == 0 then zero is returned no flags granted, or an unspecified non-zero value otherwise.\\n   * @return Access flags currently granted\\n   */\\n  function queryAccessControlMask(address addr, uint256 filterMask) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/tools/upgradeability/IProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IProxy {\\n  function upgradeToAndCall(address newImplementation, bytes calldata data) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// solhint-disable no-inline-assembly, avoid-low-level-calls\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize, which returns 0 for contracts in\\n    // construction, since the code is only stored at the end of the\\n    // constructor execution.\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(account)\\n    }\\n    return size > 0;\\n  }\\n\\n  bytes32 private constant accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  function isExternallyOwned(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    uint256 size;\\n    assembly {\\n      codehash := extcodehash(account)\\n      size := extcodesize(account)\\n    }\\n    return codehash == accountHash && size == 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using {ReentrancyGuard}.\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data.\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, 'Address: low-level call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, 'Address: insufficient balance for call');\\n    require(isContract(target), 'Address: call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, 'Address: low-level static call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), 'Address: static call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, 'Address: low-level delegate call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), 'Address: delegate call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/SafeOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * Ownership is transferred in 2 phases: current owner calls {transferOwnership}\\n * then the new owner calls {acceptOwnership}.\\n * The last owner can recover ownership with {recoverOwnership} before {acceptOwnership} is called by the new owner.\\n *\\n * When ownership transfer was initiated, this module behaves like there is no owner, until\\n * either acceptOwnership() or recoverOwnership() is called.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract SafeOwnable {\\n  address private _lastOwner;\\n  address private _activeOwner;\\n  address private _pendingOwner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n  event OwnershipTransferring(address indexed previousOwner, address indexed pendingOwner);\\n\\n  /// @dev Initializes the contract setting the deployer as the initial owner.\\n  constructor() {\\n    _activeOwner = msg.sender;\\n    _pendingOwner = msg.sender;\\n    emit OwnershipTransferred(address(0), msg.sender);\\n  }\\n\\n  /// @dev Returns active owner\\n  function owner() public view returns (address) {\\n    return _activeOwner;\\n  }\\n\\n  function owners()\\n    public\\n    view\\n    returns (\\n      address lastOwner,\\n      address activeOwner,\\n      address pendingOwner\\n    )\\n  {\\n    return (_lastOwner, _activeOwner, _pendingOwner);\\n  }\\n\\n  /// @dev Reverts if called by any account other than the owner.\\n  /// Will also revert after transferOwnership() when neither acceptOwnership() nor recoverOwnership() was called.\\n  modifier onlyOwner() {\\n    require(\\n      _activeOwner == msg.sender,\\n      _pendingOwner == msg.sender ? 'Ownable: caller is not the owner (pending)' : 'Ownable: caller is not the owner'\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() external onlyOwner {\\n    emit OwnershipTransferred(_activeOwner, address(0));\\n    _activeOwner = address(0);\\n    _pendingOwner = address(0);\\n    _lastOwner = address(0);\\n  }\\n\\n  /// @dev Initiates ownership transfer of the contract to a new account `newOwner`.\\n  /// Can only be called by the current owner. The new owner must call acceptOwnership() to get the ownership.\\n  function transferOwnership(address newOwner) external onlyOwner {\\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n    emit OwnershipTransferring(msg.sender, newOwner);\\n    _pendingOwner = newOwner;\\n    _lastOwner = _activeOwner;\\n    _activeOwner = address(0);\\n  }\\n\\n  /// @dev Accepts ownership of this contract. Can only be called by the new owner set with transferOwnership().\\n  function acceptOwnership() external {\\n    require(_activeOwner == address(0) && _pendingOwner == msg.sender, 'SafeOwnable: caller is not the pending owner');\\n\\n    emit OwnershipTransferred(_lastOwner, msg.sender);\\n    _lastOwner = address(0);\\n    _activeOwner = msg.sender;\\n  }\\n\\n  /// @dev Recovers ownership of this contract to the last owner after transferOwnership(),\\n  /// unless acceptOwnership() was already called by the new owner.\\n  function recoverOwnership() external {\\n    require(_activeOwner == address(0) && _lastOwner == msg.sender, 'SafeOwnable: caller can not recover ownership');\\n    emit OwnershipTransferring(msg.sender, address(0));\\n    emit OwnershipTransferred(msg.sender, msg.sender);\\n    _pendingOwner = msg.sender;\\n    _lastOwner = address(0);\\n    _activeOwner = msg.sender;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Errors library\\n * @notice Defines the error messages emitted by the different contracts\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (DepositToken, VariableDebtToken and StableDebtToken)\\n *  - AT = DepositToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = AddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolExtension\\n *  - ST = Stake\\n */\\nlibrary Errors {\\n  //contract specific errors\\n  string public constant VL_INVALID_AMOUNT = '1'; // Amount must be greater than 0\\n  string public constant VL_NO_ACTIVE_RESERVE = '2'; // Action requires an active reserve\\n  string public constant VL_RESERVE_FROZEN = '3'; // Action cannot be performed because the reserve is frozen\\n  string public constant VL_UNKNOWN_RESERVE = '4'; // Action requires an active reserve\\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '5'; // User cannot withdraw more than the available balance (above min limit)\\n  string public constant VL_TRANSFER_NOT_ALLOWED = '6'; // Transfer cannot be allowed.\\n  string public constant VL_BORROWING_NOT_ENABLED = '7'; // Borrowing is not enabled\\n  string public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = '8'; // Invalid interest rate mode selected\\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = '9'; // The collateral balance is 0\\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '10'; // Health factor is lesser than the liquidation threshold\\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = '11'; // There is not enough collateral to cover a new borrow\\n  string public constant VL_STABLE_BORROWING_NOT_ENABLED = '12'; // stable borrowing not enabled\\n  string public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = '13'; // collateral is (mostly) the same currency that is being borrowed\\n  string public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '14'; // The requested amount is exceeds max size of a stable loan\\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = '15'; // to repay a debt, user needs to specify a correct debt type (variable or stable)\\n  string public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '16'; // To repay on behalf of an user an explicit amount to repay is needed\\n  string public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = '17'; // User does not have a stable rate loan in progress on this reserve\\n  string public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = '18'; // User does not have a variable rate loan in progress on this reserve\\n  string public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = '19'; // The collateral balance needs to be greater than 0\\n  string public constant VL_DEPOSIT_ALREADY_IN_USE = '20'; // User deposit is already being used as collateral\\n  string public constant VL_RESERVE_MUST_BE_COLLATERAL = '21'; // This reserve must be enabled as collateral\\n  string public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '22'; // Interest rate rebalance conditions were not met\\n  string public constant AT_OVERDRAFT_DISABLED = '23'; // User doesn't accept allocation of overdraft\\n  string public constant VL_INVALID_SUB_BALANCE_ARGS = '24';\\n  string public constant AT_INVALID_SLASH_DESTINATION = '25';\\n\\n  string public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = '27'; // The caller of the function is not the lending pool configurator\\n\\n  string public constant LENDING_POOL_REQUIRED = '28'; // The caller of this function must be a lending pool\\n  string public constant CALLER_NOT_LENDING_POOL = '29'; // The caller of this function must be a lending pool\\n  string public constant AT_SUB_BALANCE_RESTIRCTED_FUNCTION = '30'; // The caller of this function must be a lending pool or a sub-balance operator\\n\\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = '32'; // Reserve has already been initialized\\n  string public constant CALLER_NOT_POOL_ADMIN = '33'; // The caller must be the pool admin\\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = '34'; // The liquidity of the reserve needs to be 0\\n\\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = '41'; // Provider is not registered\\n  string public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '42'; // Health factor is not below the threshold\\n  string public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = '43'; // The collateral chosen cannot be liquidated\\n  string public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '44'; // User did not borrow the specified currency\\n  string public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = '45'; // There isn't enough liquidity available to liquidate\\n\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = '48';\\n  string public constant MATH_ADDITION_OVERFLOW = '49';\\n  string public constant MATH_DIVISION_BY_ZERO = '50';\\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = '51'; //  Liquidity index overflows uint128\\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '52'; //  Variable borrow index overflows uint128\\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = '53'; //  Liquidity rate overflows uint128\\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '54'; //  Variable borrow rate overflows uint128\\n  string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '55'; //  Stable borrow rate overflows uint128\\n  string public constant CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\\n  string public constant CALLER_NOT_STAKE_ADMIN = '57';\\n  string public constant CT_INVALID_BURN_AMOUNT = '58'; //invalid amount to burn\\n  string public constant BORROW_ALLOWANCE_NOT_ENOUGH = '59'; // User borrows on behalf, but allowance are too small\\n  string public constant CALLER_NOT_LIQUIDITY_CONTROLLER = '60';\\n  string public constant CALLER_NOT_REF_ADMIN = '61';\\n  string public constant VL_INSUFFICIENT_REWARD_AVAILABLE = '62';\\n  string public constant LP_CALLER_MUST_BE_DEPOSIT_TOKEN = '63';\\n  string public constant LP_IS_PAUSED = '64'; // Pool is paused\\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = '65';\\n  string public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = '66';\\n  string public constant RC_INVALID_LTV = '67';\\n  string public constant RC_INVALID_LIQ_THRESHOLD = '68';\\n  string public constant RC_INVALID_LIQ_BONUS = '69';\\n  string public constant RC_INVALID_DECIMALS = '70';\\n  string public constant RC_INVALID_RESERVE_FACTOR = '71';\\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = '72';\\n  string public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = '73';\\n  string public constant VL_TREASURY_REQUIRED = '74';\\n  string public constant LPC_INVALID_CONFIGURATION = '75'; // Invalid risk parameters for the reserve\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '76'; // The caller must be the emergency admin\\n  string public constant UL_INVALID_INDEX = '77';\\n  string public constant VL_CONTRACT_REQUIRED = '78';\\n  string public constant SDT_STABLE_DEBT_OVERFLOW = '79';\\n  string public constant SDT_BURN_EXCEEDS_BALANCE = '80';\\n  string public constant CALLER_NOT_REWARD_CONFIG_ADMIN = '81'; // The caller of this function must be a reward admin\\n  string public constant LP_INVALID_PERCENTAGE = '82'; // Percentage can't be more than 100%\\n  string public constant LP_IS_NOT_TRUSTED_FLASHLOAN = '83';\\n  string public constant CALLER_NOT_SWEEP_ADMIN = '84';\\n  string public constant LP_TOO_MANY_NESTED_CALLS = '85';\\n  string public constant LP_RESTRICTED_FEATURE = '86';\\n  string public constant LP_TOO_MANY_FLASHLOAN_CALLS = '87';\\n  string public constant RW_BASELINE_EXCEEDED = '88';\\n  string public constant CALLER_NOT_REWARD_RATE_ADMIN = '89';\\n  string public constant CALLER_NOT_REWARD_CONTROLLER = '90';\\n  string public constant RW_REWARD_PAUSED = '91';\\n  string public constant CALLER_NOT_TEAM_MANAGER = '92';\\n  string public constant STK_REDEEM_PAUSED = '93';\\n  string public constant STK_INSUFFICIENT_COOLDOWN = '94';\\n  string public constant STK_UNSTAKE_WINDOW_FINISHED = '95';\\n  string public constant STK_INVALID_BALANCE_ON_COOLDOWN = '96';\\n  string public constant STK_EXCESSIVE_SLASH_PCT = '97';\\n  string public constant STK_WRONG_COOLDOWN_OR_UNSTAKE = '98';\\n  string public constant STK_PAUSED = '99';\\n\\n  string public constant TXT_OWNABLE_CALLER_NOT_OWNER = 'Ownable: caller is not the owner';\\n  string public constant TXT_CALLER_NOT_PROXY_OWNER = 'ProxyOwner: caller is not the owner';\\n  string public constant TXT_ACCESS_RESTRICTED = 'RESTRICTED';\\n}\\n\"\r\n    },\r\n    \"contracts/tools/math/BitUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nlibrary BitUtils {\\n  function isBit(uint256 v, uint8 index) internal pure returns (bool) {\\n    return (v >> index) & 1 != 0;\\n  }\\n\\n  function nextPowerOf2(uint256 v) internal pure returns (uint256) {\\n    if (v == 0) {\\n      return 1;\\n    }\\n    v--;\\n    v |= v >> 1;\\n    v |= v >> 2;\\n    v |= v >> 4;\\n    v |= v >> 8;\\n    v |= v >> 16;\\n    v |= v >> 32;\\n    v |= v >> 64;\\n    v |= v >> 128;\\n    return v + 1;\\n  }\\n\\n  function isPowerOf2(uint256 v) internal pure returns (bool) {\\n    return (v & (v - 1)) == 0;\\n  }\\n\\n  function isPowerOf2nz(uint256 v) internal pure returns (bool) {\\n    return (v != 0) && (v & (v - 1) == 0);\\n  }\\n\\n  function bitLength(uint256 v) internal pure returns (uint256 len) {\\n    if (v == 0) {\\n      return 0;\\n    }\\n    if (v > type(uint128).max) {\\n      v >>= 128;\\n      len += 128;\\n    }\\n    if (v > type(uint64).max) {\\n      v >>= 64;\\n      len += 64;\\n    }\\n    if (v > type(uint32).max) {\\n      v >>= 32;\\n      len += 32;\\n    }\\n    if (v > type(uint16).max) {\\n      v >>= 16;\\n      len += 16;\\n    }\\n    if (v > type(uint8).max) {\\n      v >>= 8;\\n      len += 8;\\n    }\\n    if (v > 15) {\\n      v >>= 4;\\n      len += 4;\\n    }\\n    if (v > 3) {\\n      v >>= 2;\\n      len += 2;\\n    }\\n    if (v > 1) {\\n      len += 1;\\n    }\\n    return len + 1;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/upgradeability/TransparentProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../dependencies/openzeppelin/contracts/Address.sol';\\nimport '../../dependencies/openzeppelin/upgradeability/BaseUpgradeabilityProxy.sol';\\nimport './TransparentProxyBase.sol';\\n\\n/// @dev This contract is a transparent upgradeability proxy with admin. The admin role is immutable.\\ncontract TransparentProxy is TransparentProxyBase {\\n  constructor(\\n    address admin,\\n    address logic,\\n    bytes memory data\\n  ) TransparentProxyBase(admin) {\\n    _setImplementation(logic);\\n    if (data.length > 0) {\\n      Address.functionDelegateCall(logic, data);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IManagedAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IRemoteAccessBitmask.sol';\\nimport './IAccessController.sol';\\n\\ninterface IManagedAccessController is IAccessController {\\n  function setTemporaryAdmin(address admin, uint32 expiryBlocks) external;\\n\\n  function getTemporaryAdmin() external view returns (address admin, uint256 expiresAtBlock);\\n\\n  function renounceTemporaryAdmin() external;\\n\\n  function setAddress(uint256 id, address newAddress) external;\\n\\n  function setAddressAsProxy(uint256 id, address impl) external;\\n\\n  function setAddressAsProxyWithInit(\\n    uint256 id,\\n    address impl,\\n    bytes calldata initCall\\n  ) external;\\n\\n  function directCallWithRoles(\\n    uint256 flags,\\n    address addr,\\n    bytes calldata data\\n  ) external returns (bytes memory result);\\n\\n  struct CallParams {\\n    uint256 accessFlags;\\n    uint256 callFlag;\\n    address callAddr;\\n    bytes callData;\\n  }\\n\\n  function callWithRoles(CallParams[] calldata params) external returns (bytes[] memory result);\\n\\n  event ProxyCreated(uint256 indexed id, address indexed newAddress);\\n  event AddressSet(uint256 indexed id, address indexed newAddress, bool hasProxy);\\n  event RolesUpdated(address indexed addr, uint256 flags);\\n  event TemporaryAdminAssigned(address indexed admin, uint256 expiresAt);\\n  event AnyRoleModeEnabled();\\n  event AnyRoleModeBlocked();\\n}\\n\"\r\n    },\r\n    \"contracts/access/AccessCallHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../dependencies/openzeppelin/contracts/Address.sol';\\nimport '../tools/Errors.sol';\\n\\ncontract AccessCallHelper {\\n  address private _owner;\\n\\n  constructor(address owner) {\\n    require(owner != address(0));\\n    _owner = owner;\\n  }\\n\\n  function doCall(address callAddr, bytes calldata callData) external returns (bytes memory result) {\\n    require(msg.sender == _owner, Errors.TXT_OWNABLE_CALLER_NOT_OWNER);\\n    return Address.functionCall(callAddr, callData);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/upgradeability/BaseUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './Proxy.sol';\\nimport '../contracts/Address.sol';\\n\\n/**\\n * @title BaseUpgradeabilityProxy\\n * @dev This contract implements a proxy that allows to change the\\n * implementation address to which it will delegate.\\n * Such a change is called an implementation upgrade.\\n */\\ncontract BaseUpgradeabilityProxy is Proxy {\\n  /**\\n   * @dev Emitted when the implementation is upgraded.\\n   * @param implementation Address of the new implementation.\\n   */\\n  event Upgraded(address indexed implementation);\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev Returns the current implementation.\\n   * @return impl Address of the current implementation\\n   */\\n  function _implementation() internal view override returns (address impl) {\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      impl := sload(slot)\\n    }\\n  }\\n\\n  /**\\n   * @dev Upgrades the proxy to a new implementation.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function _upgradeTo(address newImplementation) internal {\\n    _setImplementation(newImplementation);\\n    emit Upgraded(newImplementation);\\n  }\\n\\n  /**\\n   * @dev Sets the implementation address of the proxy.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function _setImplementation(address newImplementation) internal {\\n    require(Address.isContract(newImplementation), 'Cannot set a proxy implementation to a non-contract address');\\n\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      sstore(slot, newImplementation)\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/upgradeability/TransparentProxyBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../dependencies/openzeppelin/contracts/Address.sol';\\nimport '../../dependencies/openzeppelin/upgradeability/BaseUpgradeabilityProxy.sol';\\nimport './IProxy.sol';\\n\\n/// @dev This contract is a transparent upgradeability proxy with admin. The admin role is immutable.\\nabstract contract TransparentProxyBase is BaseUpgradeabilityProxy, IProxy {\\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  constructor(address admin) {\\n    require(admin != address(0));\\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\\n\\n    bytes32 slot = ADMIN_SLOT;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      sstore(slot, admin)\\n    }\\n  }\\n\\n  modifier ifAdmin() {\\n    if (msg.sender == _admin()) {\\n      _;\\n    } else {\\n      _fallback();\\n    }\\n  }\\n\\n  function _admin() internal view returns (address impl) {\\n    bytes32 slot = ADMIN_SLOT;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      impl := sload(slot)\\n    }\\n  }\\n\\n  /// @return impl The address of the implementation.\\n  function implementation() external ifAdmin returns (address impl) {\\n    return _implementation();\\n  }\\n\\n  /// @dev Upgrade the backing implementation of the proxy and call a function on it.\\n  function upgradeToAndCall(address logic, bytes calldata data) external payable override ifAdmin {\\n    _upgradeTo(logic);\\n    Address.functionDelegateCall(logic, data);\\n  }\\n\\n  /// @dev Only fall back when the sender is not the admin.\\n  function _willFallback() internal virtual override {\\n    require(msg.sender != _admin(), 'Cannot call fallback function from the proxy admin');\\n    super._willFallback();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/upgradeability/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Proxy\\n * @dev Implements delegation of calls to other contracts, with proper\\n * forwarding of return values and bubbling of failures.\\n * It defines a fallback function that delegates all calls to the address\\n * returned by the abstract _implementation() internal function.\\n */\\nabstract contract Proxy {\\n  /**\\n   * @dev Fallback function.\\n   * Implemented entirely in `_fallback`.\\n   */\\n  fallback() external payable {\\n    _fallback();\\n  }\\n\\n  receive() external payable {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @return The Address of the implementation.\\n   */\\n  function _implementation() internal view virtual returns (address);\\n\\n  /**\\n   * @dev Delegates execution to an implementation contract.\\n   * This is a low level function that doesn't return to its internal call site.\\n   * It will return to the external caller whatever the implementation returns.\\n   * @param implementation Address to delegate.\\n   */\\n  function _delegate(address implementation) internal {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n\\n      switch result\\n      // delegatecall returns 0 on error.\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Function that is run as the first thing in the fallback function.\\n   * Can be redefined in derived contracts to add functionality.\\n   * Redefinitions must call super._willFallback().\\n   */\\n  function _willFallback() internal virtual {}\\n\\n  /**\\n   * @dev fallback implementation.\\n   * Extracted to enable manual triggering.\\n   */\\n  function _fallback() internal {\\n    _willFallback();\\n    _delegate(_implementation());\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"marketId\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasProxy\",\"type\":\"bool\"}],\"name\":\"AddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AnyRoleModeBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AnyRoleModeEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newMarketId\",\"type\":\"string\"}],\"name\":\"MarketIdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferring\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ProxyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"name\":\"RolesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"TemporaryAdminAssigned\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accessFlags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callFlag\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"callAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct IManagedAccessController.CallParams[]\",\"name\":\"params\",\"type\":\"tuple[]\"}],\"name\":\"callWithRoles\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"createProxy\",\"outputs\":[{\"internalType\":\"contract IProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"directCallWithRoles\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendingRateOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTemporaryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiresAtBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"name\":\"grantAnyRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"name\":\"grantRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"markProxies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lastOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"activeOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"filter\",\"type\":\"uint256\"}],\"name\":\"queryAccessControlMask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceTemporaryAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"revokeAllRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"name\":\"revokeRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"revokeRolesFromAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"all\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"roleActiveGrantees\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addrList\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"roleGrantees\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addrList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"implAddress\",\"type\":\"address\"}],\"name\":\"setAddressAsProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"implAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"setAddressAsProxyWithInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"blockOrEnable\",\"type\":\"bool\"}],\"name\":\"setAnyRoleMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"marketId\",\"type\":\"string\"}],\"name\":\"setMarketId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"expiryBlocks\",\"type\":\"uint32\"}],\"name\":\"setTemporaryAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"unmarkProxies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MarketAccessController","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000184175676d656e7465642067656e65736973206d61726b65740000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}