{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-09-15\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n//polygon plasma bridge\r\ninterface IPlasmaBridge {\r\n  event DepositERC20(address indexed depositor, address indexed depositReceiver, address indexed rootToken, uint256 amount);\r\n  //matic deposits\r\n  function depositERC20ForUser(address _token, address _user, uint256 _amount) external;\r\n}\r\n\r\n//polygon PoS bridge\r\ninterface IPOSBridge {\r\n  event DepositERC20(address indexed depositor, address indexed depositReceiver, address indexed rootToken, bytes amount);\r\n  event DepositETH(address indexed depositor, address indexed depositReceiver, uint256 amount);\r\n  //eth deposits\r\n  function depositEtherFor(address user) external payable;\r\n  //erc20 deposits\r\n  function depositFor(address user, address rootToken, bytes calldata depositData) external;\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Telcoin, LLC.\r\n * @dev Implements Openzeppelin Audited Contracts\r\n *\r\n * @notice this contract is meant for forwarding ERC20 and ETH accross the polygon bridge system.\r\n * This contract is meant to be a logic contract to work in conjunction with a proxy network.\r\n */\r\ncontract RootBridgeRelay is Initializable {\r\n  event Relay(address indexed destination, address indexed currency, uint256 amount);\r\n\r\n  // mainnet plasma bridge\r\n  IPlasmaBridge constant public PLASMA_BRIDGE = IPlasmaBridge(0x401F6c983eA34274ec46f84D70b31C151321188b);\r\n  // mainnet PoS bridge\r\n  IPOSBridge constant public POS_BRIDGE = IPOSBridge(0xA0c68C638235ee32657e8f720a23ceC1bFc77C77);\r\n  // mainnet predicate\r\n  address constant public PREDICATE_ADDRESS = 0x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf;\r\n  //ETHER address\r\n  address constant public ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n  //MATIC address\r\n  address constant public MATIC_ADDRESS = 0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0;\r\n  //max integer value\r\n  uint256 constant public MAX_INT = 2**256 - 1;\r\n  //polygon network receiving address\r\n  address payable public recipient;\r\n\r\n  /**\r\n   * @notice initializes the contract its own address\r\n   * @dev the recipient receives the same address as there will be a corresponding address on the adjoining network\r\n   * @dev the reason for the use of the initialize function belonging to the initializable class\r\n   * is to allow this contract to behave as the logic contract behind proxies.\r\n   * @dev this function is called with proxy deployment to update state data\r\n   * @dev uses initializer modifier to only allow one initialization per proxy\r\n   */\r\n  function initialize() public initializer() {\r\n    recipient = payable(address(this));\r\n  }\r\n\r\n  /**\r\n  * @notice pushes token transfers through to the appropriate bridge\r\n  * @dev the contract is designed in a way where anyone can call the function without risking funds\r\n  * @param token is address of the token that is desired to be pushed accross the bridge\r\n  * @param amount is integer value of the quantity of the token\r\n  * @return a boolean value indicating whether the operation succeeded.\r\n  */\r\n  function bridgeTransfer(IERC20 token, uint256 amount) external payable returns (bool) {\r\n    if (address(token) == ETHER_ADDRESS) {\r\n      transferETHToBridge(amount);\r\n    } else if (address(token) == MATIC_ADDRESS) {\r\n      transferERCToPlasmaBridge(amount);\r\n    } else {\r\n      transferERCToBridge(token, amount);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @notice pushes token transfers through to the PoS bridge\r\n  * @dev this is for ERC20 tokens that are not the matic token\r\n  * @dev only tokens that are already mapped on the bridge will succeed\r\n  * @param token is address of the token that is desired to be pushed accross the bridge\r\n  * @param amount is integer value of the quantity of the token\r\n  */\r\n  function transferERCToBridge(IERC20 token, uint256 amount) internal {\r\n    if (amount > token.allowance(recipient, PREDICATE_ADDRESS)) {approveERC20(token, PREDICATE_ADDRESS);}\r\n    POS_BRIDGE.depositFor(recipient, address(token), abi.encodePacked(amount));\r\n    emit Relay(recipient, address(token), amount);\r\n  }\r\n\r\n  /**\r\n  * @notice pushes matic token transfers through to the plasma bridge\r\n  * @dev this is for the matic token\r\n  * @param amount is integer value of the quantity of the matic token\r\n  */\r\n  function transferERCToPlasmaBridge(uint256 amount) internal {\r\n    if (amount > IERC20(MATIC_ADDRESS).allowance(recipient, address(PLASMA_BRIDGE))) {approveERC20(IERC20(MATIC_ADDRESS), address(PLASMA_BRIDGE));}\r\n    PLASMA_BRIDGE.depositERC20ForUser(MATIC_ADDRESS, recipient, amount);\r\n    emit Relay(recipient, MATIC_ADDRESS, amount);\r\n  }\r\n\r\n  /**\r\n  * @notice pushes ETHER transfers through to the PoS bridge\r\n  * @dev WETH will be minted to the recipient\r\n  * @param amount is integer value of the quantity of ETH\r\n  */\r\n  function transferETHToBridge(uint256 amount) internal {\r\n    require(amount <= recipient.balance, \"RootBridgeRelay: insufficient balance\");\r\n    POS_BRIDGE.depositEtherFor{value: amount}(recipient);\r\n    emit Relay(recipient, ETHER_ADDRESS, amount);\r\n  }\r\n\r\n  /**\r\n  * @notice this approves any tokens for use by the bridge\r\n  * @dev this function is called automatically when the allowance is not high enough for a particular token\r\n  * @param token is address of the token needed to be approved\r\n  * @param bridge is address of the token spender\r\n  */\r\n  function approveERC20(IERC20 token, address bridge) internal {\r\n    require(token.approve(bridge, MAX_INT), \"RootBridgeRelay: Failed to approve tokens\");\r\n  }\r\n\r\n  /**\r\n  * @notice receives ETHER\r\n  */\r\n  receive() external payable {}\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Relay\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETHER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MATIC_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_INT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLASMA_BRIDGE\",\"outputs\":[{\"internalType\":\"contract IPlasmaBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POS_BRIDGE\",\"outputs\":[{\"internalType\":\"contract IPOSBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREDICATE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bridgeTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"RootBridgeRelay","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://211fcce33f52dc9f9e3e2306d01a95a35240b47613d6e53a771e44e0e0dcff89"}]}