{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BLASC.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-or-later\\n\\n//  __________       ___.           .____       _____    __________________\\n//  \\\\______   \\\\_____ \\\\_ |__ ___.__. |    |     /  _  \\\\  /   _____/\\\\_   ___ \\\\\\n//  |    |  _/\\\\__  \\\\ | __ <   |  | |    |    /  /_\\\\  \\\\ \\\\_____  \\\\ /    \\\\  \\\\/\\n//  |    |   \\\\ / __ \\\\| \\\\_\\\\ \\\\___  | |    |___/    |    \\\\/        \\\\\\\\     \\\\____\\n//  |______  /(____  /___  / ____| |_______ \\\\____|__  /_______  / \\\\______  /\\n//  \\\\/      \\\\/    \\\\/\\\\/              \\\\/       \\\\/        \\\\/         \\\\/\\n\\npragma solidity ^0.6.12;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\ninterface IERC20 {\\n    /**\\n    * @dev Returns the amount of tokens in existence.\\n    */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n    * @dev Returns the amount of tokens owned by `account`.\\n    */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n    * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n    *\\n    * Returns a boolean value indicating whether the operation succeeded.\\n    *\\n    * Emits a {Transfer} event.\\n    */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n    * @dev Returns the remaining number of tokens that `spender` will be\\n    * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n    * zero by default.\\n    *\\n    * This value changes when {approve} or {transferFrom} are called.\\n    */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n    * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n    *\\n    * Returns a boolean value indicating whether the operation succeeded.\\n    *\\n    * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n    * that someone may use both the old and the new allowance by unfortunate\\n    * transaction ordering. One possible solution to mitigate this race\\n    * condition is to first reduce the spender's allowance to 0 and set the\\n    * desired value afterwards:\\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    *\\n    * Emits an {Approval} event.\\n    */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n    * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n    * allowance mechanism. `amount` is then deducted from the caller's\\n    * allowance.\\n    *\\n    * Returns a boolean value indicating whether the operation succeeded.\\n    *\\n    * Emits a {Transfer} event.\\n    */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n    * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n    * another (`to`).\\n    *\\n    * Note that `value` may be zero.\\n    */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n    * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n    * a call to {approve}. `value` is the new allowance.\\n    */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary SafeMath {\\n    /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    *\\n    * - Addition cannot overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    *\\n    * - Subtraction cannot overflow.\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    *\\n    * - Subtraction cannot overflow.\\n    */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    *\\n    * - Multiplication cannot overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    *\\n    * - The divisor cannot be zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    *\\n    * - The divisor cannot be zero.\\n    */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    *\\n    * - The divisor cannot be zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts with custom message when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    *\\n    * - The divisor cannot be zero.\\n    */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\nlibrary Address {\\n    /**\\n    * @dev Returns true if `account` is a contract.\\n    *\\n    * [IMPORTANT]\\n    * ====\\n    * It is unsafe to assume that an address for which this function returns\\n    * false is an externally-owned account (EOA) and not a contract.\\n    *\\n    * Among others, `isContract` will return false for the following\\n    * types of addresses:\\n    *\\n    *  - an externally-owned account\\n    *  - a contract in construction\\n    *  - an address where a contract will be created\\n    *  - an address where a contract lived, but was destroyed\\n    * ====\\n    */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n    * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n    * `recipient`, forwarding all available gas and reverting on errors.\\n    *\\n    * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n    * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n    * imposed by `transfer`, making them unable to receive funds via\\n    * `transfer`. {sendValue} removes this limitation.\\n    *\\n    * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n    *\\n    * IMPORTANT: because control is transferred to `recipient`, care must be\\n    * taken to not create reentrancy vulnerabilities. Consider using\\n    * {ReentrancyGuard} or the\\n    * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n    */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n    * @dev Performs a Solidity function call using a low level `call`. A\\n    * plain`call` is an unsafe replacement for a function call: use this\\n    * function instead.\\n    *\\n    * If `target` reverts with a revert reason, it is bubbled up by this\\n    * function (like regular Solidity function calls).\\n    *\\n    * Returns the raw returned data. To convert to the expected return value,\\n    * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n    *\\n    * Requirements:\\n    *\\n    * - `target` must be a contract.\\n    * - calling `target` with `data` must not revert.\\n    *\\n    * _Available since v3.1._\\n    */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n    * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n    * `errorMessage` as a fallback revert reason when `target` reverts.\\n    *\\n    * _Available since v3.1._\\n    */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n    * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n    * but also transferring `value` wei to `target`.\\n    *\\n    * Requirements:\\n    *\\n    * - the calling contract must have an ETH balance of at least `value`.\\n    * - the called Solidity function must be `payable`.\\n    *\\n    * _Available since v3.1._\\n    */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n    * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n    * with `errorMessage` as a fallback revert reason when `target` reverts.\\n    *\\n    * _Available since v3.1._\\n    */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n    address private _previousOwner;\\n    uint256 private _lockTime;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n    * @dev Initializes the contract setting the deployer as the initial owner.\\n    */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n    * @dev Returns the address of the current owner.\\n    */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any account other than the owner.\\n    */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Leaves the contract without owner. It will not be possible to call\\n    * `onlyOwner` functions anymore. Can only be called by the current owner.\\n    *\\n    * NOTE: Renouncing ownership will leave the contract without an owner,\\n    * thereby removing any functionality that is only available to the owner.\\n    */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n    * Can only be called by the current owner.\\n    */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    function geUnlockTime() public view returns (uint256) {\\n        return _lockTime;\\n    }\\n\\n    //Locks the contract for owner for the amount of time provided\\n    function lock(uint256 time) public virtual onlyOwner {\\n        _previousOwner = _owner;\\n        _owner = address(0);\\n        _lockTime = now + time;\\n        emit OwnershipTransferred(_owner, address(0));\\n    }\\n\\n    //Unlocks the contract for owner when _lockTime is exceeds\\n    function unlock() public virtual {\\n        require(_previousOwner == msg.sender, \\\"You don't have permission to unlock\\\");\\n        require(now > _lockTime , \\\"Contract is locked until 7 days\\\");\\n        emit OwnershipTransferred(_owner, _previousOwner);\\n        _owner = _previousOwner;\\n    }\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n}\\n// Contract implementation\\ncontract BLASC is Context, IERC20, Ownable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _rOwned;\\n    mapping (address => uint256) private _tOwned;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    mapping (address => bool) private _isExcludedFromFee;\\n\\n    mapping (address => bool) private _isExcluded; // excluded from reward\\n    address[] private _excluded;\\n    mapping (address => bool) private _isBlackListedBot;\\n    address[] private _blackListedBots;\\n\\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 private _tTotal = 10_000 * 10**18;\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\n    uint256 private _tFeeTotal;\\n\\n    string private _name = 'Baby Lonely Alien Space Club';\\n    string private _symbol = 'BLASC';\\n    uint8 private _decimals = 18;\\n\\n    uint256 private _taxFee = 10;\\n    uint256 private _nftFee = 55;\\n    uint256 private _marketingFee = 20;\\n\\n    uint256 private _swapImpact = 10;\\n\\n    uint256 private _previousTaxFee = _taxFee;\\n    uint256 private _previousNftFee = _nftFee;\\n    uint256 private _previousMarketingFee = _marketingFee;\\n\\n    address payable public _nftWalletAddress = payable(0xAe89a842F77546f22357a7290E49566F93A3f9C3);\\n    address payable public _marketingWalletAddress = payable(0x13ff7906c023FeAeEC81343A75243633aEdE2704);\\n\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\n    address public immutable uniswapV2Pair;\\n\\n    bool inSwapAndLiquify = false;\\n    bool public swapAndLiquifyEnabled = true;\\n    bool public tradingOpen = false;\\n\\n    uint256 private _maxTxAmount = _tTotal.div(200);\\n\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 ethReceived,\\n        uint256 tokensIntoLiqudity\\n    );\\n\\n    event SwapTokensForETH(\\n        uint256 amountIn,\\n        address[] path\\n    );\\n\\n    modifier lockTheSwap {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n\\n    constructor () public {\\n        _rOwned[_msgSender()] = _rTotal;\\n\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // UniswapV2 for Ethereum network\\n        // Create a uniswap pair for this new token\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n        .createPair(address(this), _uniswapV2Router.WETH());\\n\\n        // set the rest of the contract variables\\n        uniswapV2Router = _uniswapV2Router;\\n\\n        // Exclude owner and this contract from fee\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[_nftWalletAddress] = true;\\n        _isExcludedFromFee[_marketingWalletAddress] = true;\\n\\n        _isBlackListedBot[address(0xa1ceC245c456dD1bd9F2815a6955fEf44Eb4191b)] = true;\\n        _blackListedBots.push(address(0xa1ceC245c456dD1bd9F2815a6955fEf44Eb4191b));\\n\\n        _isBlackListedBot[address(0x27F9Adb26D532a41D97e00206114e429ad58c679)] = true;\\n        _blackListedBots.push(address(0x27F9Adb26D532a41D97e00206114e429ad58c679));\\n\\n        _isBlackListedBot[address(0x9282dc5c422FA91Ff2F6fF3a0b45B7BF97CF78E7)] = true;\\n        _blackListedBots.push(address(0x9282dc5c422FA91Ff2F6fF3a0b45B7BF97CF78E7));\\n\\n        _isBlackListedBot[address(0xfad95B6089c53A0D1d861eabFaadd8901b0F8533)] = true;\\n        _blackListedBots.push(address(0xfad95B6089c53A0D1d861eabFaadd8901b0F8533));\\n\\n        _isBlackListedBot[address(0xfe9d99ef02E905127239E85A611c29ad32c31c2F)] = true;\\n        _blackListedBots.push(address(0xfe9d99ef02E905127239E85A611c29ad32c31c2F));\\n\\n        _isBlackListedBot[address(0x59341Bc6b4f3Ace878574b05914f43309dd678c7)] = true;\\n        _blackListedBots.push(address(0x59341Bc6b4f3Ace878574b05914f43309dd678c7));\\n\\n        _isBlackListedBot[address(0x136F4B5b6A306091b280E3F251fa0E21b1280Cd5)] = true;\\n        _blackListedBots.push(address(0x136F4B5b6A306091b280E3F251fa0E21b1280Cd5));\\n\\n        _isBlackListedBot[address(0xf1CA09CE745bfa38258b26cd839ef0E8DE062A40)] = true;\\n        _blackListedBots.push(address(0xf1CA09CE745bfa38258b26cd839ef0E8DE062A40));\\n\\n        _isBlackListedBot[address(0x8719c2829944150F59E3428CA24f6Fc018E43890)] = true;\\n        _blackListedBots.push(address(0x8719c2829944150F59E3428CA24f6Fc018E43890));\\n\\n        _isBlackListedBot[address(0xa8E0771582EA33A9d8e6d2Ccb65A8D10Bd0Ea517)] = true;\\n        _blackListedBots.push(address(0xa8E0771582EA33A9d8e6d2Ccb65A8D10Bd0Ea517));\\n\\n        _isBlackListedBot[address(0xF3DaA7465273587aec8b2d2706335e06068ccce4)] = true;\\n        _blackListedBots.push(address(0xF3DaA7465273587aec8b2d2706335e06068ccce4));\\n\\n        _isBlackListedBot[address(0x9272A2c7083Da2B1C2F0739d9655D1A09764DEAD)] = true;\\n        _blackListedBots.push(address(0x9272A2c7083Da2B1C2F0739d9655D1A09764DEAD));\\n\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_isExcluded[account]) return _tOwned[account];\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function isExcludedFromReward(address account) public view returns (bool) {\\n        return _isExcluded[account];\\n    }\\n\\n    function setExcludeFromFee(address account, bool excluded) external onlyOwner() {\\n        _isExcludedFromFee[account] = excluded;\\n    }\\n\\n    function totalFees() public view returns (uint256) {\\n        return _tFeeTotal;\\n    }\\n\\n    function deliver(uint256 tAmount) public {\\n        address sender = _msgSender();\\n        require(!_isExcluded[sender], \\\"Excluded addresses cannot call this function\\\");\\n        (uint256 rAmount,,,,,) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rTotal = _rTotal.sub(rAmount);\\n        _tFeeTotal = _tFeeTotal.add(tAmount);\\n    }\\n\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\\n        require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\n        if (!deductTransferFee) {\\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\\n            return rAmount;\\n        } else {\\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\\n            return rTransferAmount;\\n        }\\n    }\\n\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\n        require(rAmount <= _rTotal, \\\"Amount must be less than total reflections\\\");\\n        uint256 currentRate =  _getRate();\\n        return rAmount.div(currentRate);\\n    }\\n\\n    function excludeFromReward(address account) external onlyOwner() {\\n        require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\n        if(_rOwned[account] > 0) {\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n        }\\n        _isExcluded[account] = true;\\n        _excluded.push(account);\\n    }\\n\\n    function includeInReward(address account) external onlyOwner() {\\n        require(_isExcluded[account], \\\"Account is already excluded\\\");\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _tOwned[account] = 0;\\n                _isExcluded[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n        function addBotToBlackList(address account) external onlyOwner() {\\n            require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not blacklist Uniswap router.');\\n            require(!_isBlackListedBot[account], \\\"Account is already blacklisted\\\");\\n            _isBlackListedBot[account] = true;\\n            _blackListedBots.push(account);\\n        }\\n\\n        function removeBotFromBlackList(address account) external onlyOwner() {\\n            require(_isBlackListedBot[account], \\\"Account is not blacklisted\\\");\\n            for (uint256 i = 0; i < _blackListedBots.length; i++) {\\n                if (_blackListedBots[i] == account) {\\n                    _blackListedBots[i] = _blackListedBots[_blackListedBots.length - 1];\\n                    _isBlackListedBot[account] = false;\\n                    _blackListedBots.pop();\\n                    break;\\n                }\\n            }\\n        }\\n\\n    function removeAllFee() private {\\n        if(_taxFee == 0 && _nftFee == 0 && _marketingFee == 0) return;\\n\\n        _previousTaxFee = _taxFee;\\n        _previousNftFee = _nftFee;\\n        _previousMarketingFee = _marketingFee;\\n\\n        _taxFee = 0;\\n        _nftFee = 0;\\n        _marketingFee = 0;\\n    }\\n\\n    function restoreAllFee() private {\\n        _taxFee = _previousTaxFee;\\n        _marketingFee = _previousMarketingFee;\\n        _nftFee = _previousMarketingFee;\\n    }\\n\\n    function isExcludedFromFee(address account) public view returns(bool) {\\n        return _isExcludedFromFee[account];\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) private {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        require(!_isBlackListedBot[sender], \\\"You have no power here!\\\");\\n        require(!_isBlackListedBot[recipient], \\\"You have no power here!\\\");\\n        require(!_isBlackListedBot[tx.origin], \\\"You have no power here!\\\");\\n\\n        if(sender != owner() && recipient != owner()) {\\n            require(amount <= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount.\\\");\\n            // sorry about that, but sniper bots nowadays are buying multiple times, hope I have something more robust to prevent them to nuke the launch :-(\\n            if (sender == uniswapV2Pair) {\\n                require(tradingOpen, \\\"Wait for opened trading\\\");\\n                require(balanceOf(recipient) <= _maxTxAmount, \\\"Already bought maxTxAmount, wait till check off\\\");\\n                require(balanceOf(tx.origin) <= _maxTxAmount, \\\"Already bought maxTxAmount, wait till check off\\\");\\n            }\\n\\n            // is the token balance of this contract address over the min number of\\n            // tokens that we need to initiate a swap + liquidity lock?\\n            // also, don't get caught in a circular liquidity event.\\n            // also, don't swap & liquify if sender is uniswap pair.\\n\\n            if (!inSwapAndLiquify && swapAndLiquifyEnabled && sender != uniswapV2Pair) {\\n                swapTokens(amount, recipient == uniswapV2Pair);\\n            }\\n        }\\n\\n        //indicates if fee should be deducted from transfer\\n        bool takeFee = true;\\n\\n        //if any account belongs to _isExcludedFromFee account then remove the fee\\n        if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){\\n            takeFee = false;\\n        }\\n\\n        //transfer amount, it will take tax and eth fee\\n        _tokenTransfer(sender,recipient,amount,takeFee);\\n    }\\n\\n    event SwapAndLiquifyFailed(bytes failErr);\\n\\n    function swapTokens(uint256 amount, bool isSell) private lockTheSwap {\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n\\n        uint256 maxAddedToSlipPage = amount.mul(_swapImpact).div(100);\\n        if (isSell && contractTokenBalance > maxAddedToSlipPage) {\\n            contractTokenBalance = maxAddedToSlipPage;\\n        }\\n        swapTokensForEth(contractTokenBalance);\\n        sendETHToWallets(address(this).balance);\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private {\\n        // generate the uniswap pair path of token -> weth\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        // make the swap\\n        try uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        ) {\\n            emit SwapTokensForETH(tokenAmount, path);\\n        } catch (bytes memory e) {\\n            emit SwapAndLiquifyFailed(e);\\n        }\\n    }\\n\\n    function sendETHToWallets(uint256 amount) private {\\n        uint256 fees = _marketingFee.add(_nftFee);\\n        uint256 marketing = amount.mul(_marketingFee).div(fees);\\n        _marketingWalletAddress.transfer(marketing);\\n        _nftWalletAddress.transfer(amount.sub(marketing));\\n    }\\n\\n    function openTrading() public onlyOwner {\\n        tradingOpen = true;\\n    }\\n\\n    // We are exposing these functions to be able to manual swap and send\\n    // in case the token is highly valued and 5M becomes too much\\n    function manualSwap() external onlyOwner() {\\n        uint256 contractBalance = balanceOf(address(this));\\n        swapTokensForEth(contractBalance);\\n    }\\n\\n    function manualSwapAmount(uint256 amount) public onlyOwner() {\\n        uint256 contractBalance = balanceOf(address(this));\\n        require(contractBalance >= amount , 'contract balance should be greater then amount');\\n\\n        swapTokensForEth(amount);\\n    }\\n\\n    function manualSend() public onlyOwner() {\\n        uint256 contractETHBalance = address(this).balance;\\n        sendETHToWallets(contractETHBalance);\\n    }\\n\\n    function manualSwapAndSend(uint256 amount) external onlyOwner() {\\n        manualSwapAmount(amount);\\n        manualSend();\\n    }\\n\\n    function setSwapAndLiquifyEnabled(bool _swapAndLiquifyEnabled) external onlyOwner(){\\n        swapAndLiquifyEnabled = _swapAndLiquifyEnabled;\\n    }\\n\\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\\n        if(!takeFee)\\n            removeAllFee();\\n\\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\\n            _transferFromExcluded(sender, recipient, amount);\\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferToExcluded(sender, recipient, amount);\\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\\n            _transferStandard(sender, recipient, amount);\\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferBothExcluded(sender, recipient, amount);\\n        } else {\\n            _transferStandard(sender, recipient, amount);\\n        }\\n\\n        if(!takeFee)\\n            restoreAllFee();\\n    }\\n\\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tNftMarketing) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n        _takeAllEthFees(tNftMarketing);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tNftMarketing) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n        _takeAllEthFees(tNftMarketing);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tNftMarketing) = _getValues(tAmount);\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n        _takeAllEthFees(tNftMarketing);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tNftMarketing) = _getValues(tAmount);\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n        _takeAllEthFees(tNftMarketing);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _takeAllEthFees(uint256 tNftMarketing) private {\\n        uint256 currentRate =  _getRate();\\n        uint256 rNftMarketing = tNftMarketing.mul(currentRate);\\n        _rOwned[address(this)] = _rOwned[address(this)].add(rNftMarketing);\\n        if(_isExcluded[address(this)])\\n            _tOwned[address(this)] = _tOwned[address(this)].add(tNftMarketing);\\n    }\\n\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\n        _rTotal = _rTotal.sub(rFee);\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\n    }\\n\\n    //to recieve ETH from uniswapV2Router when swapping\\n    receive() external payable {}\\n\\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\\n        (uint256 tTransferAmount, uint256 tFee, uint256 tNftMarketing) = _getTValues(tAmount);\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tNftMarketing);\\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tNftMarketing);\\n    }\\n\\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\\n        uint256 tFee = tAmount.mul(_taxFee).div(1000);\\n        uint256 tNftMarketing = tAmount.mul(_marketingFee.add(_nftFee)).div(1000);\\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tNftMarketing);\\n        return (tTransferAmount, tFee, tNftMarketing);\\n    }\\n\\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tNftMarketing) private view returns (uint256, uint256, uint256) {\\n        uint256 currentRate = _getRate();\\n        uint256 rAmount = tAmount.mul(currentRate);\\n        uint256 rFee = tFee.mul(currentRate);\\n        // thanks myobu for finding bug here, now everybody need to deploy new contracts lmao..\\n        uint256 rNftMarketing = tNftMarketing.mul(currentRate);\\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rNftMarketing);\\n        return (rAmount, rTransferAmount, rFee);\\n    }\\n\\n    function _getRate() private view returns(uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply.div(tSupply);\\n    }\\n\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\n        }\\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    function _getTaxFee() private view returns(uint256) {\\n        return _taxFee;\\n    }\\n\\n    function _getMaxTxAmount() private view returns(uint256) {\\n        return _maxTxAmount;\\n    }\\n\\n    function _getETHBalance() public view returns(uint256 balance) {\\n        return address(this).balance;\\n    }\\n\\n    function _setTaxFee(uint256 taxFee) external onlyOwner() {\\n        require(taxFee >= 0 && taxFee <= 490, 'taxFee should be in 0 - 490');\\n        _taxFee = taxFee;\\n    }\\n\\n    function _setMarketingFee(uint256 marketingFee) external onlyOwner() {\\n        require(marketingFee >= 0 && marketingFee <= 490, 'marketingFee should be in 0 - 490');\\n        _marketingFee = marketingFee;\\n    }\\n\\n    function _setNftFee(uint256 nftFee) external onlyOwner() {\\n        require(nftFee >= 0 && nftFee <= 490, 'nftFee should be in 0 - 490');\\n        _nftFee = nftFee;\\n    }\\n\\n    function _setMarketingWallet(address payable marketingWalletAddress) external onlyOwner() {\\n        _marketingWalletAddress = marketingWalletAddress;\\n    }\\n\\n    function _setSwapImpact(uint256 swapImpact) external onlyOwner() {\\n        _swapImpact = swapImpact;\\n    }\\n\\n    function _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\\n        require(maxTxAmount >= 10**9 , 'maxTxAmount should be greater than total 1e9');\\n        _maxTxAmount = maxTxAmount;\\n    }\\n\\n    function recoverTokens(uint256 tokenAmount) public virtual onlyOwner() {\\n        _approve(address(this), owner(), tokenAmount);\\n        _transfer(address(this), owner(), tokenAmount);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"failErr\",\"type\":\"bytes\"}],\"name\":\"SwapAndLiquifyFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_getETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"}],\"name\":\"_setMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingWalletAddress\",\"type\":\"address\"}],\"name\":\"_setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"_setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftFee\",\"type\":\"uint256\"}],\"name\":\"_setNftFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapImpact\",\"type\":\"uint256\"}],\"name\":\"_setSwapImpact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"_setTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBotToBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualSwapAndSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBotFromBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapAndLiquifyEnabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BLASC","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}