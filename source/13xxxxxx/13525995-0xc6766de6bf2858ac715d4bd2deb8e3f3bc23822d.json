{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL\r\n// File: contracts/interfaces/IITR.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IITR {\r\n\tfunction claim(address to) external;\r\n}\r\n// File: contracts/interfaces/ISRC20.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ISRC20 {\r\n\r\n\tevent RestrictionsAndRulesUpdated(address restrictions, address rules);\r\n\r\n\tfunction transferToken(address to, uint256 value, uint256 nonce, uint256 expirationTime,\r\n\t\tbytes32 msgHash, bytes calldata signature) external returns (bool);\r\n\tfunction transferTokenFrom(address from, address to, uint256 value, uint256 nonce,\r\n\t\tuint256 expirationTime, bytes32 hash, bytes calldata signature) external returns (bool);\r\n\tfunction getTransferNonce() external view returns (uint256);\r\n\tfunction getTransferNonce(address account) external view returns (uint256);\r\n\tfunction executeTransfer(address from, address to, uint256 value) external returns (bool);\r\n\tfunction updateRestrictionsAndRules(address restrictions, address rules) external returns (bool);\r\n\r\n\t// ERC20 part-like interface\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address who) external view returns (uint256);\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 value) external returns (bool);\r\n\tfunction transfer(address to, uint256 value) external returns (bool);\r\n\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n\tfunction increaseAllowance(address spender, uint256 value) external returns (bool);\r\n\tfunction decreaseAllowance(address spender, uint256 value) external returns (bool);\r\n}\r\n// File: contracts/interfaces/ITransferRules.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ITransferRules {\r\n\tfunction setSRC(address src20) external returns (bool);\r\n\t\r\n\tfunction doTransfer(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\n// File: contracts/interfaces/IChain.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IChain {\r\n\tfunction doValidate(address from, address to, uint256 value) external returns (address, address, uint256, bool, string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor() {\r\n\t\t_setOwner(_msgSender());\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view virtual returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\t_setOwner(address(0));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\t_setOwner(newOwner);\r\n\t}\r\n\r\n\tfunction _setOwner(address newOwner) private {\r\n\t\taddress oldOwner = _owner;\r\n\t\t_owner = newOwner;\r\n\t\temit OwnershipTransferred(oldOwner, newOwner);\r\n\t}\r\n}\r\n\r\n// File: contracts/restrictions/ChainRuleBase.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\nabstract contract ChainRuleBase is Ownable {\r\n\taddress public _chainRuleAddr;\r\n\t\r\n\tfunction clearChain() public onlyOwner() {\r\n\t\t_setChain(address(0));\r\n\t}\r\n\t\r\n\tfunction setChain(address chainAddr) public onlyOwner() {\r\n\t\t_setChain(chainAddr);\r\n\t}\r\n\t\r\n\t//---------------------------------------------------------------------------------\r\n\t// internal  section\r\n\t//---------------------------------------------------------------------------------\r\n\r\n\tfunction _doValidate(\r\n\t\taddress from, \r\n\t\taddress to, \r\n\t\tuint256 value\r\n\t) \r\n\t\tinternal\r\n\t\treturns (\r\n\t\t\taddress _from, \r\n\t\t\taddress _to, \r\n\t\t\tuint256 _value,\r\n\t\t\tbool _success,\r\n\t\t\tstring memory _msg\r\n\t\t) \r\n\t{\r\n\t\t(_from, _to, _value, _success, _msg) = _validate(from, to, value);\r\n\t\tif (isChainExists() && _success) {\r\n\t\t\t(_from, _to, _value, _success, _msg) = IChain(_chainRuleAddr).doValidate(msg.sender, to, value);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\tfunction isChainExists() internal view returns(bool) {\r\n\t\treturn (_chainRuleAddr != address(0) ? true : false);\r\n\t}\r\n\t\r\n\tfunction _setChain(address chainAddr) internal {\r\n\t\t_chainRuleAddr = chainAddr;\r\n\t}\r\n\t\r\n\tfunction _validate(address from, address to, uint256 value) internal virtual returns (address, address, uint256, bool, string memory);\r\n\r\n}\r\n\t\r\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *\t // Add the library methods\r\n *\t using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *\t // Declare a set state variable\r\n *\t EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n\t// To implement this library for multiple types with as little code\r\n\t// repetition as possible, we write it in terms of a generic Set type with\r\n\t// bytes32 values.\r\n\t// The Set implementation uses private functions, and user-facing\r\n\t// implementations (such as AddressSet) are just wrappers around the\r\n\t// underlying Set.\r\n\t// This means that we can only create new EnumerableSets for types that fit\r\n\t// in bytes32.\r\n\r\n\tstruct Set {\r\n\t\t// Storage of set values\r\n\t\tbytes32[] _values;\r\n\t\t// Position of the value in the `values` array, plus 1 because index 0\r\n\t\t// means a value is not in the set.\r\n\t\tmapping(bytes32 => uint256) _indexes;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Add a value to a set. O(1).\r\n\t *\r\n\t * Returns true if the value was added to the set, that is if it was not\r\n\t * already present.\r\n\t */\r\n\tfunction _add(Set storage set, bytes32 value) private returns (bool) {\r\n\t\tif (!_contains(set, value)) {\r\n\t\t\tset._values.push(value);\r\n\t\t\t// The value is stored at length-1, but we add 1 to all indexes\r\n\t\t\t// and use 0 as a sentinel value\r\n\t\t\tset._indexes[value] = set._values.length;\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes a value from a set. O(1).\r\n\t *\r\n\t * Returns true if the value was removed from the set, that is if it was\r\n\t * present.\r\n\t */\r\n\tfunction _remove(Set storage set, bytes32 value) private returns (bool) {\r\n\t\t// We read and store the value's index to prevent multiple reads from the same storage slot\r\n\t\tuint256 valueIndex = set._indexes[value];\r\n\r\n\t\tif (valueIndex != 0) {\r\n\t\t\t// Equivalent to contains(set, value)\r\n\t\t\t// To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n\t\t\t// the array, and then remove the last element (sometimes called as 'swap and pop').\r\n\t\t\t// This modifies the order of the array, as noted in {at}.\r\n\r\n\t\t\tuint256 toDeleteIndex = valueIndex - 1;\r\n\t\t\tuint256 lastIndex = set._values.length - 1;\r\n\r\n\t\t\tif (lastIndex != toDeleteIndex) {\r\n\t\t\t\tbytes32 lastvalue = set._values[lastIndex];\r\n\r\n\t\t\t\t// Move the last value to the index where the value to delete is\r\n\t\t\t\tset._values[toDeleteIndex] = lastvalue;\r\n\t\t\t\t// Update the index for the moved value\r\n\t\t\t\tset._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n\t\t\t}\r\n\r\n\t\t\t// Delete the slot where the moved value was stored\r\n\t\t\tset._values.pop();\r\n\r\n\t\t\t// Delete the index for the deleted slot\r\n\t\t\tdelete set._indexes[value];\r\n\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the value is in the set. O(1).\r\n\t */\r\n\tfunction _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n\t\treturn set._indexes[value] != 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of values on the set. O(1).\r\n\t */\r\n\tfunction _length(Set storage set) private view returns (uint256) {\r\n\t\treturn set._values.length;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the value stored at position `index` in the set. O(1).\r\n\t *\r\n\t * Note that there are no guarantees on the ordering of values inside the\r\n\t * array, and it may change when more values are added or removed.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `index` must be strictly less than {length}.\r\n\t */\r\n\tfunction _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n\t\treturn set._values[index];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the entire set in an array\r\n\t *\r\n\t * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n\t * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n\t * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n\t * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n\t */\r\n\tfunction _values(Set storage set) private view returns (bytes32[] memory) {\r\n\t\treturn set._values;\r\n\t}\r\n\r\n\t// Bytes32Set\r\n\r\n\tstruct Bytes32Set {\r\n\t\tSet _inner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Add a value to a set. O(1).\r\n\t *\r\n\t * Returns true if the value was added to the set, that is if it was not\r\n\t * already present.\r\n\t */\r\n\tfunction add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n\t\treturn _add(set._inner, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes a value from a set. O(1).\r\n\t *\r\n\t * Returns true if the value was removed from the set, that is if it was\r\n\t * present.\r\n\t */\r\n\tfunction remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n\t\treturn _remove(set._inner, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the value is in the set. O(1).\r\n\t */\r\n\tfunction contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n\t\treturn _contains(set._inner, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of values in the set. O(1).\r\n\t */\r\n\tfunction length(Bytes32Set storage set) internal view returns (uint256) {\r\n\t\treturn _length(set._inner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the value stored at position `index` in the set. O(1).\r\n\t *\r\n\t * Note that there are no guarantees on the ordering of values inside the\r\n\t * array, and it may change when more values are added or removed.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `index` must be strictly less than {length}.\r\n\t */\r\n\tfunction at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n\t\treturn _at(set._inner, index);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the entire set in an array\r\n\t *\r\n\t * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n\t * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n\t * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n\t * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n\t */\r\n\tfunction values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n\t\treturn _values(set._inner);\r\n\t}\r\n\r\n\t// AddressSet\r\n\r\n\tstruct AddressSet {\r\n\t\tSet _inner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Add a value to a set. O(1).\r\n\t *\r\n\t * Returns true if the value was added to the set, that is if it was not\r\n\t * already present.\r\n\t */\r\n\tfunction add(AddressSet storage set, address value) internal returns (bool) {\r\n\t\treturn _add(set._inner, bytes32(uint256(uint160(value))));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes a value from a set. O(1).\r\n\t *\r\n\t * Returns true if the value was removed from the set, that is if it was\r\n\t * present.\r\n\t */\r\n\tfunction remove(AddressSet storage set, address value) internal returns (bool) {\r\n\t\treturn _remove(set._inner, bytes32(uint256(uint160(value))));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the value is in the set. O(1).\r\n\t */\r\n\tfunction contains(AddressSet storage set, address value) internal view returns (bool) {\r\n\t\treturn _contains(set._inner, bytes32(uint256(uint160(value))));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of values in the set. O(1).\r\n\t */\r\n\tfunction length(AddressSet storage set) internal view returns (uint256) {\r\n\t\treturn _length(set._inner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the value stored at position `index` in the set. O(1).\r\n\t *\r\n\t * Note that there are no guarantees on the ordering of values inside the\r\n\t * array, and it may change when more values are added or removed.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `index` must be strictly less than {length}.\r\n\t */\r\n\tfunction at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n\t\treturn address(uint160(uint256(_at(set._inner, index))));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the entire set in an array\r\n\t *\r\n\t * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n\t * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n\t * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n\t * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n\t */\r\n\tfunction values(AddressSet storage set) internal view returns (address[] memory) {\r\n\t\tbytes32[] memory store = _values(set._inner);\r\n\t\taddress[] memory result;\r\n\r\n\t\tassembly {\r\n\t\t\tresult := store\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// UintSet\r\n\r\n\tstruct UintSet {\r\n\t\tSet _inner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Add a value to a set. O(1).\r\n\t *\r\n\t * Returns true if the value was added to the set, that is if it was not\r\n\t * already present.\r\n\t */\r\n\tfunction add(UintSet storage set, uint256 value) internal returns (bool) {\r\n\t\treturn _add(set._inner, bytes32(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes a value from a set. O(1).\r\n\t *\r\n\t * Returns true if the value was removed from the set, that is if it was\r\n\t * present.\r\n\t */\r\n\tfunction remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n\t\treturn _remove(set._inner, bytes32(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the value is in the set. O(1).\r\n\t */\r\n\tfunction contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n\t\treturn _contains(set._inner, bytes32(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of values on the set. O(1).\r\n\t */\r\n\tfunction length(UintSet storage set) internal view returns (uint256) {\r\n\t\treturn _length(set._inner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the value stored at position `index` in the set. O(1).\r\n\t *\r\n\t * Note that there are no guarantees on the ordering of values inside the\r\n\t * array, and it may change when more values are added or removed.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `index` must be strictly less than {length}.\r\n\t */\r\n\tfunction at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n\t\treturn uint256(_at(set._inner, index));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the entire set in an array\r\n\t *\r\n\t * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n\t * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n\t * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n\t * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n\t */\r\n\tfunction values(UintSet storage set) internal view returns (uint256[] memory) {\r\n\t\tbytes32[] memory store = _values(set._inner);\r\n\t\tuint256[] memory result;\r\n\r\n\t\tassembly {\r\n\t\t\tresult := store\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tuint256 c = a + b;\r\n\t\t\tif (c < a) return (false, 0);\r\n\t\t\treturn (true, c);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tif (b > a) return (false, 0);\r\n\t\t\treturn (true, a - b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t\t// benefit is lost if 'b' is also tested.\r\n\t\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\t\tif (a == 0) return (true, 0);\r\n\t\t\tuint256 c = a * b;\r\n\t\t\tif (c / a != b) return (false, 0);\r\n\t\t\treturn (true, c);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tif (b == 0) return (false, 0);\r\n\t\t\treturn (true, a / b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tif (b == 0) return (false, 0);\r\n\t\t\treturn (true, a % b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `+` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Addition cannot overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a + b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `*` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Multiplication cannot overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a * b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers, reverting on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * reverting when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a % b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n\t * message unnecessarily. For custom revert reasons use {trySub}.\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (uint256) {\r\n\t\tunchecked {\r\n\t\t\trequire(b <= a, errorMessage);\r\n\t\t\treturn a - b;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (uint256) {\r\n\t\tunchecked {\r\n\t\t\trequire(b > 0, errorMessage);\r\n\t\t\treturn a / b;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * reverting with custom message when dividing by zero.\r\n\t *\r\n\t * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n\t * message unnecessarily. For custom revert reasons use {tryMod}.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (uint256) {\r\n\t\tunchecked {\r\n\t\t\trequire(b > 0, errorMessage);\r\n\t\t\treturn a % b;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// File: contracts/restrictions/TransferRule.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract TransferRule is Ownable, ITransferRules, ChainRuleBase {\r\n\tusing SafeMath for uint256;\r\n\tusing EnumerableSet for EnumerableSet.AddressSet;\r\n\t\r\n\taddress public _src20;\r\n\taddress public _doTransferCaller;\r\n\r\n\tuint256 internal constant MULTIPLIER = 100000;\r\n\t\r\n\taddress public _tradedToken;\r\n\tuint256 public _lockupDuration;\r\n\tuint256 public _lockupFraction;\r\n\t\r\n\tstruct Item {\r\n\t\tuint256 untilTime;\r\n\t\tuint256 lockedAmount;\r\n\t\t\r\n\t}\r\n\tmapping(address => Item) restrictions;\r\n\t\r\n\tEnumerableSet.AddressSet _exchangeDepositAddresses;\r\n\t\r\n\tmodifier onlyDoTransferCaller {\r\n\t\trequire(msg.sender == address(_doTransferCaller));\r\n\t\t_;\r\n\t}\r\n\t\r\n\t//---------------------------------------------------------------------------------\r\n\t// public  section\r\n\t//---------------------------------------------------------------------------------\r\n\t/**\r\n\t * @param tradedToken tradedToken\r\n\t * @param lockupDuration duration in sec \r\n\t * @param lockupFraction fraction in percent to lock. multiplied by MULTIPLIER\r\n\t */\r\n\tconstructor(\r\n\t\taddress tradedToken,\r\n\t\tuint256 lockupDuration,\r\n\t\tuint256 lockupFraction\r\n\t) \r\n\t{\r\n\t\t_tradedToken = tradedToken;\r\n\t\t_lockupDuration = lockupDuration;\r\n\t\t_lockupFraction = lockupFraction;\r\n\t\t\r\n\t}\r\n\t\r\n\tfunction cleanSRC() public onlyOwner() {\r\n\t\t_src20 = address(0);\r\n\t\t_doTransferCaller = address(0);\r\n\t\t//_setChain(address(0));\r\n\t}\r\n\t\r\n\t\r\n\tfunction addExchangeAddress(address addr) public onlyOwner() {\r\n\t\t_exchangeDepositAddresses.add(addr);\r\n\t}\r\n\t\r\n\tfunction removeExchangeAddress(address addr) public onlyOwner() {\r\n\t\t_exchangeDepositAddresses.remove(addr);\r\n\t}\r\n\t\r\n\tfunction viewExchangeAddresses() public view returns(address[] memory) {\r\n\t\tuint256 len = _exchangeDepositAddresses.length();\r\n\t\t\r\n\t\taddress[] memory ret = new address[](len);\r\n\t\tfor (uint256 i =0; i < len; i++) {\r\n\t\t\tret[i] = _exchangeDepositAddresses.at(i);\r\n\t\t}\r\n\t\treturn ret;\r\n\t\t\r\n\t}\r\n\t\r\n\tfunction addRestrictions(\r\n\t\taddress[] memory addressArray, \r\n\t\tuint256[] memory amountArray, \r\n\t\tuint256[] memory untilArray\r\n\t) public onlyOwner {\r\n\t\tuint l=addressArray.length;\r\n\t\tfor (uint i=0; i<l; i++) {\r\n\t\t\trestrictions[ addressArray[i] ] = Item({\r\n\t\t\t\tlockedAmount: amountArray[i],\r\n\t\t\t\tuntilTime: untilArray[i]\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\t\r\n\t//---------------------------------------------------------------------------------\r\n\t// external  section\r\n\t//---------------------------------------------------------------------------------\r\n\t/**\r\n\t* @dev Set for what contract this rules are.\r\n\t*\r\n\t* @param src20 - Address of src20 contract.\r\n\t*/\r\n\tfunction setSRC(address src20) override external returns (bool) {\r\n\t\trequire(_doTransferCaller == address(0), \"external contract already set\");\r\n\t\trequire(address(_src20) == address(0), \"external contract already set\");\r\n\t\trequire(src20 != address(0), \"src20 can not be zero\");\r\n\t\t_doTransferCaller = _msgSender();\r\n\t\t_src20 = src20;\r\n\t\treturn true;\r\n\t}\r\n\t /**\r\n\t* @dev Do transfer and checks where funds should go.\r\n\t* before executeTransfer contract will call chainValidate on chain if exists\r\n\t*\r\n\t* @param from The address to transfer from.\r\n\t* @param to The address to send tokens to.\r\n\t* @param value The amount of tokens to send.\r\n\t*/\r\n\tfunction doTransfer(address from, address to, uint256 value) override external onlyDoTransferCaller returns (bool) {\r\n\t\tbool success;\r\n\t\tstring memory errmsg;\r\n\t\t\r\n\t\t(from, to, value, success, errmsg) = _doValidate(from, to, value);\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\trequire(success, (bytes(errmsg).length == 0) ? \"chain validation failed\" : errmsg);\r\n\t\t\r\n\t\t// todo: need to check params after chains validation??\r\n\t\t\r\n\t\trequire(ISRC20(_src20).executeTransfer(from, to, value), \"SRC20 transfer failed\");\r\n\t\t\r\n\t\t\r\n\t\tif (\r\n\t\t\tsuccess && (to == _tradedToken)\r\n\t\t) {\r\n\t\t\t\r\n\t\t\tIITR(_tradedToken).claim(from);\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t//---------------------------------------------------------------------------------\r\n\t// internal  section\r\n\t//---------------------------------------------------------------------------------\r\n\tfunction _validate(address from, address to, uint256 value) internal virtual override returns (address _from, address _to, uint256 _value, bool _success, string memory _errmsg) {\r\n\t\t\r\n\t\t(_from, _to, _value, _success, _errmsg) = (from, to, value, true, \"\");\r\n\r\n\t\trequire(\r\n\t\t\t_exchangeDepositAddresses.contains(to) == false, \r\n\t\t\tstring(abi.encodePacked(\"Don't deposit directly to this exchange. Send to the address ITR.ETH first, to obtain the correct token in your wallet.\"))\r\n\t\t);\r\n\t\t\r\n\t\tuint256 balanceFrom = ISRC20(_src20).balanceOf(from);\r\n\t\t\r\n\t\tif (restrictions[from].untilTime > block.timestamp) {\r\n\t\t\tif (to == _tradedToken) {\r\n\t\t\t\t_success = false;\r\n\t\t\t\t_errmsg = \"you recently claimed new tokens, please wait until duration has elapsed to claim again\";\r\n\t\t\t} else if ((restrictions[from].lockedAmount).add(value) > balanceFrom) {\r\n\t\t\t\t_success = false;\r\n\t\t\t\t_errmsg = \"you recently claimed new tokens, please wait until duration has elapsed to transfer this many tokens\";\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (\r\n\t\t\t_success && \r\n\t\t\t(to == _tradedToken) &&\r\n\t\t\t(restrictions[from].untilTime > block.timestamp)\r\n\t\t) {\r\n\t\t\t\r\n\t\t\trestrictions[from].untilTime = (block.timestamp).add(_lockupDuration);\r\n\t\t\trestrictions[from].lockedAmount = (balanceFrom.sub(value)).mul(_lockupFraction).div(MULTIPLIER);\r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t//---------------------------------------------------------------------------------\r\n\t// private  section\r\n\t//---------------------------------------------------------------------------------\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupFraction\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_chainRuleAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_doTransferCaller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lockupDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lockupFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_src20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tradedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addExchangeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addressArray\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountArray\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"untilArray\",\"type\":\"uint256[]\"}],\"name\":\"addRestrictions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cleanSRC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"doTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeExchangeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"chainAddr\",\"type\":\"address\"}],\"name\":\"setChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src20\",\"type\":\"address\"}],\"name\":\"setSRC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewExchangeAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TransferRule","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001111158f88410da5f92c7e34c01e7b8649bc01550000000000000000000000000000000000000000000000000000000000278d000000000000000000000000000000000000000000000000000000000000015f90","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c03f3bc2ed6af7d4163b2c81e0a43da29b05195dbfa675bc1e0e4ea4ce5ea972"}]}