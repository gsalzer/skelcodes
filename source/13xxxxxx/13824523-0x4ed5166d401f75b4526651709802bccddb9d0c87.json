{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity =0.8.10;\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface WETH9 {\r\n    function withdraw(uint256) external;\r\n}\r\n\r\ninterface SwapRouter02 {\r\n    function checkOracleSlippage(bytes memory path, uint24 maximumTickDivergence, uint32 secondsAgo) external view;\r\n\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24  fee;\r\n        address recipient;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\r\n}\r\n\r\ncontract TransmogrifierTake2 {\r\n    SwapRouter02 constant public swapRouter            = SwapRouter02(0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45);\r\n    ERC20        constant public DAI                   = ERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    WETH9        constant public WETH                  = WETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    uint24       constant public fee                   = 500; // .05%\r\n    bytes        constant public path                  = abi.encodePacked(DAI, fee, WETH);\r\n    uint24       constant public maximumTickDivergence = 10; // represents a ~.1% price movement\r\n    uint32       constant public secondsAgo            = 1 minutes;\r\n\r\n    address immutable public recipient;\r\n\r\n    constructor() {\r\n        recipient = msg.sender;\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.sender == address(WETH));\r\n    }\r\n\r\n    function getDAIBalance() public view returns (uint256) {\r\n        return DAI.balanceOf(address(this));\r\n    }\r\n\r\n    function canConvertSafely(uint24 maximumTickDivergence_, uint32 secondsAgo_) public view returns (bool) {\r\n        try swapRouter.checkOracleSlippage(path, maximumTickDivergence_, secondsAgo_) {\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function convert(uint256 amountIn) external {\r\n        if (amountIn == 0) amountIn = getDAIBalance();\r\n        require(canConvertSafely(maximumTickDivergence, secondsAgo));\r\n        DAI.transfer(address(swapRouter), amountIn); // DAI.transfer never returns false\r\n        uint256 amountOut = swapRouter.exactInputSingle(SwapRouter02.ExactInputSingleParams({\r\n            tokenIn:           address(DAI),\r\n            tokenOut:          address(WETH),\r\n            fee:               fee,\r\n            recipient:         address(this), // so the WETH can be unwrapped\r\n            amountIn:          0, // magic constant indicating that tokens have been paid already\r\n            amountOutMinimum:  0, // safe because of the oracle check\r\n            sqrtPriceLimitX96: 0\r\n        }));\r\n        WETH.withdraw(amountOut);\r\n        (bool sent, ) = recipient.call{value: amountOut}(\"\");\r\n        require(sent);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract WETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"maximumTickDivergence_\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"secondsAgo_\",\"type\":\"uint32\"}],\"name\":\"canConvertSafely\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDAIBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumTickDivergence\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"path\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsAgo\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract SwapRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TransmogrifierTake2","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c4c09e5568ed853112470690ed9784e2b085831f02751e91a00c46549b2a983a"}]}