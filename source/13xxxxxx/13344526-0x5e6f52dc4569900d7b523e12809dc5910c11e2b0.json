{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StonksVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"../libs/BaseRelayRecipient.sol\\\";\\r\\n\\r\\ninterface IRouter {\\r\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface ICurve {\\r\\n    function exchange(int128 i, int128 j, uint dx, uint min_dy) external;\\r\\n    function exchange_underlying(int128 i, int128 j, uint dx, uint min_dy) external returns (uint);\\r\\n}\\r\\n\\r\\ninterface IStrategy {\\r\\n    function invest(uint amount) external;\\r\\n    function withdraw(uint sharePerc, uint[] calldata tokenPrice) external;\\r\\n    function collectProfitAndUpdateWatermark() external returns (uint);\\r\\n    function adjustWatermark(uint amount, bool signs) external; \\r\\n    function reimburse(uint farmIndex, uint sharePerc) external returns (uint);\\r\\n    function emergencyWithdraw() external;\\r\\n    function profitFeePerc() external view returns (uint);\\r\\n    function setProfitFeePerc(uint profitFeePerc) external;\\r\\n    function watermark() external view returns (uint);\\r\\n    function getAllPoolInETH() external view returns (uint);\\r\\n    function getAllPoolInUSD() external view returns (uint);\\r\\n}\\r\\n\\r\\ncontract StonksVault is Initializable, ERC20Upgradeable, OwnableUpgradeable, \\r\\n        ReentrancyGuardUpgradeable, PausableUpgradeable, BaseRelayRecipient {\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n    IERC20Upgradeable constant USDT = IERC20Upgradeable(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\r\\n    IERC20Upgradeable constant USDC = IERC20Upgradeable(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\r\\n    IERC20Upgradeable constant DAI = IERC20Upgradeable(0x6B175474E89094C44Da98b954EedeAC495271d0F);\\r\\n    IERC20Upgradeable constant UST = IERC20Upgradeable(0xa47c8bf37f92aBed4A126BDA807A7b7498661acD);\\r\\n    mapping(address => int128) private curveId;\\r\\n    IERC20Upgradeable constant WETH = IERC20Upgradeable(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\r\\n\\r\\n    IRouter constant uniRouter = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // For calculate Stablecoin keep in vault in ETH only\\r\\n    ICurve constant curve = ICurve(0x890f4e345B1dAED0367A877a1612f86A1f86985f); // UST pool\\r\\n    ICurve constant curve3p = ICurve(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7); // 3pool\\r\\n    IStrategy public strategy;\\r\\n    uint[] public percKeepInVault;\\r\\n    uint public fees;\\r\\n\\r\\n    uint[] public networkFeeTier2;\\r\\n    uint public customNetworkFeeTier;\\r\\n    uint[] public networkFeePerc;\\r\\n    uint public customNetworkFeePerc;\\r\\n\\r\\n    // Temporarily variable for LP token distribution only\\r\\n    address[] addresses;\\r\\n    mapping(address => uint) public depositAmt; // Amount in USD (18 decimals)\\r\\n    uint totalDepositAmt;\\r\\n\\r\\n    address public treasuryWallet;\\r\\n    address public communityWallet;\\r\\n    address public strategist;\\r\\n    address public admin;\\r\\n\\r\\n    event Deposit(address caller, uint amtDeposit, address tokenDeposit);\\r\\n    event Withdraw(address caller, uint amtWithdraw, address tokenWithdraw, uint shareBurned);\\r\\n    event Invest(uint amtInUST);\\r\\n    event DistributeLPToken(address receiver, uint shareMinted);\\r\\n    event TransferredOutFees(uint fees, address token);\\r\\n    event Reimburse(uint farmIndex, address token, uint amount);\\r\\n    event Reinvest(uint amtInUST);\\r\\n    event SetNetworkFeeTier2(uint[] oldNetworkFeeTier2, uint[] newNetworkFeeTier2);\\r\\n    event SetCustomNetworkFeeTier(uint oldCustomNetworkFeeTier, uint newCustomNetworkFeeTier);\\r\\n    event SetNetworkFeePerc(uint[] oldNetworkFeePerc, uint[] newNetworkFeePerc);\\r\\n    event SetCustomNetworkFeePerc(uint oldCustomNetworkFeePerc, uint newCustomNetworkFeePerc);\\r\\n    event SetProfitFeePerc(uint oldProfitFeePerc, uint profitFeePerc);\\r\\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\\r\\n    event SetCommunityWallet(address oldCommunityWallet, address newCommunityWallet);\\r\\n    event SetStrategistWallet(address oldStrategistWallet, address newStrategistWallet);\\r\\n    event SetAdminWallet(address oldAdmin, address newAdmin);\\r\\n    event SetBiconomy(address oldBiconomy, address newBiconomy);\\r\\n    \\r\\n    modifier onlyOwnerOrAdmin {\\r\\n        require(msg.sender == owner() || msg.sender == address(admin), \\\"Only owner or admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        string calldata name, string calldata ticker,\\r\\n        address _treasuryWallet, address _communityWallet, address _strategist, address _admin,\\r\\n        address _biconomy, address _strategy\\r\\n    ) external initializer {\\r\\n        __ERC20_init(name, ticker);\\r\\n        __Ownable_init();\\r\\n\\r\\n        strategy = IStrategy(_strategy);\\r\\n\\r\\n        treasuryWallet = _treasuryWallet;\\r\\n        communityWallet = _communityWallet;\\r\\n        strategist = _strategist;\\r\\n        admin = _admin;\\r\\n        trustedForwarder = _biconomy;\\r\\n\\r\\n        networkFeeTier2 = [50000*1e18+1, 100000*1e18];\\r\\n        customNetworkFeeTier = 1000000*1e18;\\r\\n        networkFeePerc = [100, 75, 50];\\r\\n        customNetworkFeePerc = 25;\\r\\n\\r\\n        percKeepInVault = [300, 300, 300]; // USDT, USDC, DAI\\r\\n\\r\\n        curveId[address(USDT)] = 3;\\r\\n        curveId[address(USDC)] = 2;\\r\\n        curveId[address(DAI)] = 1;\\r\\n        curveId[address(UST)] = 0;\\r\\n\\r\\n        USDT.safeApprove(address(curve), type(uint).max);\\r\\n        USDT.safeApprove(address(curve3p), type(uint).max);\\r\\n        USDC.safeApprove(address(curve), type(uint).max);\\r\\n        USDC.safeApprove(address(curve3p), type(uint).max);\\r\\n        DAI.safeApprove(address(curve), type(uint).max);\\r\\n        DAI.safeApprove(address(curve3p), type(uint).max);\\r\\n        UST.safeApprove(address(curve), type(uint).max);\\r\\n        UST.safeApprove(address(strategy), type(uint).max);\\r\\n    }\\r\\n\\r\\n    function deposit(uint amount, IERC20Upgradeable token) external nonReentrant whenNotPaused {\\r\\n        require(msg.sender == tx.origin || isTrustedForwarder(msg.sender), \\\"Only EOA or Biconomy\\\");\\r\\n        require(amount > 0, \\\"Amount must > 0\\\");\\r\\n        require(token == USDT || token == USDC || token == DAI, \\\"Invalid token deposit\\\");\\r\\n\\r\\n        address msgSender = _msgSender();\\r\\n        token.safeTransferFrom(msgSender, address(this), amount);\\r\\n        if (token != DAI) amount *= 1e12;\\r\\n        uint amtDeposit = amount;\\r\\n\\r\\n        uint _networkFeePerc;\\r\\n        if (amount < networkFeeTier2[0]) _networkFeePerc = networkFeePerc[0]; // Tier 1\\r\\n        else if (amount <= networkFeeTier2[1]) _networkFeePerc = networkFeePerc[1]; // Tier 2\\r\\n        else if (amount < customNetworkFeeTier) _networkFeePerc = networkFeePerc[2]; // Tier 3\\r\\n        else _networkFeePerc = customNetworkFeePerc; // Custom Tier\\r\\n        uint fee = amount * _networkFeePerc / 10000;\\r\\n        fees += fee;\\r\\n        amount -= fee;\\r\\n\\r\\n        if (depositAmt[msgSender] == 0) {\\r\\n            addresses.push(msgSender);\\r\\n            depositAmt[msgSender] = amount;\\r\\n        } else depositAmt[msgSender] += amount;\\r\\n        totalDepositAmt += amount;\\r\\n\\r\\n        emit Deposit(msgSender, amtDeposit, address(token));\\r\\n    }\\r\\n\\r\\n    function withdraw(uint share, IERC20Upgradeable token, uint[] calldata tokenPrice) external nonReentrant {\\r\\n        require(msg.sender == tx.origin, \\\"Only EOA\\\");\\r\\n        require(share > 0 || share <= balanceOf(msg.sender), \\\"Invalid share amount\\\");\\r\\n        require(token == USDT || token == USDC || token == DAI, \\\"Invalid token withdraw\\\");\\r\\n\\r\\n        uint _totalSupply = totalSupply();\\r\\n        uint withdrawAmt = (getAllPoolInUSD() - totalDepositAmt) * share / _totalSupply;\\r\\n        _burn(msg.sender, share);\\r\\n\\r\\n        uint tokenAmtInVault = token.balanceOf(address(this));\\r\\n        if (token != DAI) tokenAmtInVault *= 1e12;\\r\\n        if (withdrawAmt < tokenAmtInVault) {\\r\\n            // Enough token in vault to withdraw\\r\\n            if (token != DAI) withdrawAmt /= 1e12;\\r\\n            token.safeTransfer(msg.sender, withdrawAmt);\\r\\n        } else {\\r\\n            // Not enough token in vault to withdraw, try if enough if swap from other token in vault\\r\\n            (address token1, uint token1AmtInVault, address token2, uint token2AmtInVault) = getOtherTokenAndBal(token);\\r\\n            if (withdrawAmt < tokenAmtInVault + token1AmtInVault) {\\r\\n                // Enough if swap from token1 in vault\\r\\n                withdrawAmt = swapFrom1Token(withdrawAmt, token, tokenAmtInVault, token1);\\r\\n            } else if (withdrawAmt < tokenAmtInVault + token1AmtInVault + token2AmtInVault) {\\r\\n                // Not enough if swap from token1 in vault but enough if swap from token1 + token2 in vault\\r\\n                withdrawAmt = swapFrom2Token(withdrawAmt, token, tokenAmtInVault, token1, token1AmtInVault, token2, token2AmtInVault);\\r\\n            } else {\\r\\n                // Not enough if swap from token1 + token2 in vault, need to withdraw from strategy\\r\\n                if (!paused()) {\\r\\n                    withdrawAmt = withdrawFromStrategy(token, withdrawAmt, tokenAmtInVault, tokenPrice);\\r\\n                } else {\\r\\n                    withdrawAmt = withdrawWhenPaused(token, share, _totalSupply);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Withdraw(msg.sender, withdrawAmt, address(token), share);\\r\\n    }\\r\\n\\r\\n    function swapFrom1Token(\\r\\n        uint withdrawAmt, IERC20Upgradeable token, uint tokenAmtInVault, address token1\\r\\n    ) private returns (uint) {\\r\\n        uint amtSwapFromToken1 = withdrawAmt - tokenAmtInVault;\\r\\n        if (token1 != address(DAI)) amtSwapFromToken1 /= 1e12;\\r\\n        curve3p.exchange(getCurveId(token1), getCurveId(address(token)), amtSwapFromToken1, amtSwapFromToken1 * 99 / 100);\\r\\n        withdrawAmt = token.balanceOf(address(this));\\r\\n        token.safeTransfer(msg.sender, withdrawAmt);\\r\\n        return withdrawAmt;\\r\\n    }\\r\\n\\r\\n    function swapFrom2Token(\\r\\n        uint withdrawAmt,\\r\\n        IERC20Upgradeable token, uint tokenAmtInVault,\\r\\n        address token1, uint token1AmtInVault,\\r\\n        address token2, uint token2AmtInVault\\r\\n    ) private returns (uint) {\\r\\n        uint amtSwapFromToken2 = withdrawAmt - tokenAmtInVault - token1AmtInVault;\\r\\n        if (token1AmtInVault > 0) {\\r\\n            if (token1 != address(DAI)) token1AmtInVault /= 1e12;\\r\\n            curve3p.exchange(getCurveId(token1), getCurveId(address(token)), token1AmtInVault, token1AmtInVault * 99 / 100);\\r\\n        }\\r\\n        if (token2AmtInVault > 0) {\\r\\n            uint minAmtOutToken2 = amtSwapFromToken2 * 99 / 100;\\r\\n            if (token2 != address(DAI)) amtSwapFromToken2 /= 1e12;\\r\\n            if (token != DAI) minAmtOutToken2 /= 1e12;\\r\\n            curve3p.exchange(getCurveId(token2), getCurveId(address(token)), amtSwapFromToken2, minAmtOutToken2);\\r\\n        }\\r\\n        withdrawAmt = token.balanceOf(address(this));\\r\\n        token.safeTransfer(msg.sender, withdrawAmt);\\r\\n        return withdrawAmt;\\r\\n    }\\r\\n\\r\\n    function withdrawFromStrategy(\\r\\n        IERC20Upgradeable token, uint withdrawAmt, uint tokenAmtInVault, uint[] calldata tokenPrice\\r\\n    ) private returns (uint) {\\r\\n        strategy.withdraw(withdrawAmt - tokenAmtInVault, tokenPrice);\\r\\n        strategy.adjustWatermark(withdrawAmt - tokenAmtInVault, false);\\r\\n        if (token != DAI) tokenAmtInVault /= 1e12;\\r\\n        uint USTAmt = UST.balanceOf(address(this));\\r\\n        uint amountOutMin = USTAmt * 99 / 100;\\r\\n        if (token != DAI) amountOutMin /= 1e12;\\r\\n        withdrawAmt = curve.exchange_underlying(\\r\\n            curveId[address(UST)], curveId[address(token)], USTAmt, amountOutMin\\r\\n        ) + tokenAmtInVault;\\r\\n        token.safeTransfer(msg.sender, withdrawAmt);\\r\\n        return withdrawAmt;\\r\\n    }\\r\\n\\r\\n    function withdrawWhenPaused(IERC20Upgradeable token, uint share, uint _totalSupply) private returns (uint withdrawAmt) {\\r\\n        uint USTAmt = UST.balanceOf(address(this));\\r\\n        withdrawAmt = curve.exchange_underlying(\\r\\n            curveId[address(UST)], curveId[address(token)], USTAmt * share / _totalSupply, USTAmt * 99 / 100\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function invest() public whenNotPaused {\\r\\n        require(\\r\\n            msg.sender == admin ||\\r\\n            msg.sender == owner() ||\\r\\n            msg.sender == address(this), \\\"Only authorized caller\\\"\\r\\n        );\\r\\n\\r\\n        if (strategy.watermark() > 0) collectProfitAndUpdateWatermark();\\r\\n        (uint USDTAmt, uint USDCAmt, uint DAIAmt) = transferOutFees();\\r\\n\\r\\n        (uint USTAmt, uint tokenAmtToInvest, uint pool) = swapTokenToUST(USDTAmt, USDCAmt, DAIAmt);\\r\\n        strategy.invest(USTAmt);\\r\\n        strategy.adjustWatermark(tokenAmtToInvest, true);\\r\\n        distributeLPToken(pool);\\r\\n\\r\\n        emit Invest(USTAmt);\\r\\n    }\\r\\n\\r\\n    function collectProfitAndUpdateWatermark() public whenNotPaused {\\r\\n        require(\\r\\n            msg.sender == address(this) ||\\r\\n            msg.sender == admin ||\\r\\n            msg.sender == owner(), \\\"Only authorized caller\\\"\\r\\n        );\\r\\n        uint fee = strategy.collectProfitAndUpdateWatermark();\\r\\n        if (fee > 0) fees = fees + fee;\\r\\n    }\\r\\n\\r\\n    function distributeLPToken(uint pool) private {\\r\\n        if (totalSupply() != 0) pool -= totalDepositAmt;\\r\\n        address[] memory _addresses = addresses;\\r\\n        for (uint i; i < _addresses.length; i ++) {\\r\\n            address depositAcc = _addresses[i];\\r\\n            uint _depositAmt = depositAmt[depositAcc];\\r\\n            uint _totalSupply = totalSupply();\\r\\n            uint share = _totalSupply == 0 ? _depositAmt : _depositAmt * _totalSupply / pool;\\r\\n            _mint(depositAcc, share);\\r\\n            pool = pool + _depositAmt;\\r\\n            depositAmt[depositAcc] = 0;\\r\\n            emit DistributeLPToken(depositAcc, share);\\r\\n        }\\r\\n        delete addresses;\\r\\n        totalDepositAmt = 0;\\r\\n    }\\r\\n\\r\\n    function transferOutFees() public returns (uint USDTAmt, uint USDCAmt, uint DAIAmt) {\\r\\n        require(\\r\\n            msg.sender == address(this) ||\\r\\n            msg.sender == admin ||\\r\\n            msg.sender == owner(), \\\"Only authorized caller\\\"\\r\\n        );\\r\\n\\r\\n        USDTAmt = USDT.balanceOf(address(this));\\r\\n        USDCAmt = USDC.balanceOf(address(this));\\r\\n        DAIAmt = DAI.balanceOf(address(this));\\r\\n\\r\\n        uint _fees = fees;\\r\\n        if (_fees != 0) {\\r\\n            IERC20Upgradeable token;\\r\\n            if (USDTAmt * 1e12 > _fees) {\\r\\n                token = USDT;\\r\\n                _fees = _fees / 1e12;\\r\\n                USDTAmt = USDTAmt - _fees;\\r\\n            } else if (USDCAmt * 1e12 > _fees) {\\r\\n                token = USDC;\\r\\n                _fees = _fees / 1e12;\\r\\n                USDCAmt = USDCAmt - _fees;\\r\\n            } else if (DAIAmt > _fees) {\\r\\n                token = DAI;\\r\\n                DAIAmt = DAIAmt - _fees;\\r\\n            } else return (USDTAmt, USDCAmt, DAIAmt);\\r\\n\\r\\n            uint _fee = _fees * 2 / 5; // 40%\\r\\n            token.safeTransfer(treasuryWallet, _fee); // 40%\\r\\n            token.safeTransfer(communityWallet, _fee); // 40%\\r\\n            token.safeTransfer(strategist, _fees - _fee - _fee); // 20%\\r\\n\\r\\n            fees = 0;\\r\\n            emit TransferredOutFees(_fees, address(token)); // Decimal follow _token\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapTokenToUST(uint USDTAmt, uint USDCAmt, uint DAIAmt) private returns (uint USTAmt, uint tokenAmtToInvest, uint pool) {\\r\\n        uint[] memory _percKeepInVault = percKeepInVault;\\r\\n        pool = getAllPoolInUSD();\\r\\n\\r\\n        uint USDTAmtKeepInVault = calcTokenKeepInVault(_percKeepInVault[0], pool) / 1e12;\\r\\n        if (USDTAmt > USDTAmtKeepInVault + 1e6) {\\r\\n            USDTAmt = USDTAmt - USDTAmtKeepInVault;\\r\\n            USTAmt = curve.exchange_underlying(curveId[address(USDT)], curveId[address(UST)], USDTAmt, 0);\\r\\n            tokenAmtToInvest = USDTAmt * 1e12;\\r\\n        }\\r\\n\\r\\n        uint USDCAmtKeepInVault = calcTokenKeepInVault(_percKeepInVault[1], pool) / 1e12;\\r\\n        if (USDCAmt > USDCAmtKeepInVault + 1e6) {\\r\\n            USDCAmt = USDCAmt - USDCAmtKeepInVault;\\r\\n            uint _USTAmt = curve.exchange_underlying(curveId[address(USDC)], curveId[address(UST)], USDCAmt, 0);\\r\\n            USTAmt = USTAmt + _USTAmt;\\r\\n            tokenAmtToInvest = tokenAmtToInvest + USDCAmt * 1e12;\\r\\n        }\\r\\n\\r\\n        uint DAIAmtKeepInVault = calcTokenKeepInVault(_percKeepInVault[2], pool);\\r\\n        if (DAIAmt > DAIAmtKeepInVault + 1e18) {\\r\\n            DAIAmt = DAIAmt - DAIAmtKeepInVault;\\r\\n            uint _USTAmt = curve.exchange_underlying(curveId[address(DAI)], curveId[address(UST)], DAIAmt, 0);\\r\\n            USTAmt = USTAmt + _USTAmt;\\r\\n            tokenAmtToInvest = tokenAmtToInvest + DAIAmt;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calcTokenKeepInVault(uint _percKeepInVault, uint pool) private pure returns (uint) {\\r\\n        return pool * _percKeepInVault / 10000;\\r\\n    }\\r\\n\\r\\n    /// @param amount Amount to reimburse (decimal follow token)\\r\\n    function reimburse(uint farmIndex, address token, uint amount) external onlyOwnerOrAdmin {\\r\\n        if (token != address(DAI)) amount *= 1e12;\\r\\n        uint USTAmt = strategy.reimburse(farmIndex, amount);\\r\\n        curve.exchange_underlying(curveId[address(UST)], curveId[token], USTAmt, 0);\\r\\n        strategy.adjustWatermark(amount, false);\\r\\n\\r\\n        emit Reimburse(farmIndex, token, amount);\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused {\\r\\n        _pause();\\r\\n        strategy.emergencyWithdraw();\\r\\n    }\\r\\n\\r\\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\\r\\n        _unpause();\\r\\n\\r\\n        uint USTAmt = UST.balanceOf(address(this));\\r\\n        strategy.invest(USTAmt);\\r\\n        strategy.adjustWatermark(USTAmt, true);\\r\\n\\r\\n        emit Reinvest(USTAmt);\\r\\n    }\\r\\n\\r\\n    function setNetworkFeeTier2(uint[] calldata _networkFeeTier2) external onlyOwner {\\r\\n        require(_networkFeeTier2[0] != 0, \\\"Minimun amount cannot be 0\\\");\\r\\n        require(_networkFeeTier2[1] > _networkFeeTier2[0], \\\"Maximun amount must > minimun amount\\\");\\r\\n        /**\\r\\n         * Network fee has three tier, but it is sufficient to have minimun and maximun amount of tier 2\\r\\n         * Tier 1: deposit amount < minimun amount of tier 2\\r\\n         * Tier 2: minimun amount of tier 2 <= deposit amount <= maximun amount of tier 2\\r\\n         * Tier 3: amount > maximun amount of tier 2\\r\\n         */\\r\\n        uint[] memory oldNetworkFeeTier2 = networkFeeTier2;\\r\\n        networkFeeTier2 = _networkFeeTier2;\\r\\n        emit SetNetworkFeeTier2(oldNetworkFeeTier2, _networkFeeTier2);\\r\\n    }\\r\\n\\r\\n    function setCustomNetworkFeeTier(uint _customNetworkFeeTier) external onlyOwner {\\r\\n        require(_customNetworkFeeTier > networkFeeTier2[1], \\\"Must > tier 2\\\");\\r\\n        uint oldCustomNetworkFeeTier = customNetworkFeeTier;\\r\\n        customNetworkFeeTier = _customNetworkFeeTier;\\r\\n        emit SetCustomNetworkFeeTier(oldCustomNetworkFeeTier, _customNetworkFeeTier);\\r\\n    }\\r\\n\\r\\n    function setNetworkFeePerc(uint[] calldata _networkFeePerc) external onlyOwner {\\r\\n        require(_networkFeePerc[0] < 3001 && _networkFeePerc[1] < 3001 && _networkFeePerc[2] < 3001,\\r\\n            \\\"Not allow > 30%\\\");\\r\\n        /**\\r\\n         * _networkFeePerc contains an array of 3 elements, representing network fee of tier 1, tier 2 and tier 3\\r\\n         * For example networkFeePerc is [100, 75, 50],\\r\\n         * which mean network fee for Tier 1 = 1%, Tier 2 = 0.75% and Tier 3 = 0.5% (Denominator = 10000)\\r\\n         */\\r\\n        uint[] memory oldNetworkFeePerc = networkFeePerc;\\r\\n        networkFeePerc = _networkFeePerc;\\r\\n        emit SetNetworkFeePerc(oldNetworkFeePerc, _networkFeePerc);\\r\\n    }\\r\\n\\r\\n    function setCustomNetworkFeePerc(uint _customNetworkFeePerc) external onlyOwner {\\r\\n        require(_customNetworkFeePerc < networkFeePerc[2], \\\"Not allow > tier 2\\\");\\r\\n        uint oldCustomNetworkFeePerc = customNetworkFeePerc;\\r\\n        customNetworkFeePerc = _customNetworkFeePerc;\\r\\n        emit SetCustomNetworkFeePerc(oldCustomNetworkFeePerc, _customNetworkFeePerc);\\r\\n    }\\r\\n\\r\\n    function setProfitFeePerc(uint profitFeePerc) external onlyOwner {\\r\\n        require(profitFeePerc < 3001, \\\"Profit fee cannot > 30%\\\");\\r\\n        uint oldProfitFeePerc = strategy.profitFeePerc();\\r\\n        strategy.setProfitFeePerc(profitFeePerc);\\r\\n        emit SetProfitFeePerc(oldProfitFeePerc, profitFeePerc);\\r\\n    }\\r\\n\\r\\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\\r\\n        address oldTreasuryWallet = treasuryWallet;\\r\\n        treasuryWallet = _treasuryWallet;\\r\\n        emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);\\r\\n    }\\r\\n\\r\\n    function setCommunityWallet(address _communityWallet) external onlyOwner {\\r\\n        address oldCommunityWallet = communityWallet;\\r\\n        communityWallet = _communityWallet;\\r\\n        emit SetCommunityWallet(oldCommunityWallet, _communityWallet);\\r\\n    }\\r\\n\\r\\n    function setStrategist(address _strategist) external {\\r\\n        require(msg.sender == strategist || msg.sender == owner(), \\\"Only owner or strategist\\\");\\r\\n        address oldStrategist = strategist;\\r\\n        strategist = _strategist;\\r\\n        emit SetStrategistWallet(oldStrategist, _strategist);\\r\\n    }\\r\\n\\r\\n    function setAdmin(address _admin) external onlyOwner {\\r\\n        address oldAdmin = admin;\\r\\n        admin = _admin;\\r\\n        emit SetAdminWallet(oldAdmin, _admin);\\r\\n    }\\r\\n\\r\\n    function setBiconomy(address _biconomy) external onlyOwner {\\r\\n        address oldBiconomy = trustedForwarder;\\r\\n        trustedForwarder = _biconomy;\\r\\n        emit SetBiconomy(oldBiconomy, _biconomy);\\r\\n    }\\r\\n\\r\\n    function _msgSender() internal override(ContextUpgradeable, BaseRelayRecipient) view returns (address) {\\r\\n        return BaseRelayRecipient._msgSender();\\r\\n    }\\r\\n    \\r\\n    function versionRecipient() external pure override returns (string memory) {\\r\\n        return \\\"1\\\";\\r\\n    }\\r\\n\\r\\n    function getOtherTokenAndBal(IERC20Upgradeable token) private view returns (address token1, uint token1AmtInVault, address token2, uint token2AmtInVault) {\\r\\n        if (token == USDT) {\\r\\n            token1 = address(USDC);\\r\\n            token1AmtInVault = USDC.balanceOf(address(this)) * 1e12;\\r\\n            token2 = address(DAI);\\r\\n            token2AmtInVault = DAI.balanceOf(address(this));\\r\\n        } else if (token == USDC) {\\r\\n            token1 = address(USDT);\\r\\n            token1AmtInVault = USDT.balanceOf(address(this)) * 1e12;\\r\\n            token2 = address(DAI);\\r\\n            token2AmtInVault = DAI.balanceOf(address(this));\\r\\n        } else {\\r\\n            token1 = address(USDT);\\r\\n            token1AmtInVault = USDT.balanceOf(address(this)) * 1e12;\\r\\n            token2 = address(USDC);\\r\\n            token2AmtInVault = USDC.balanceOf(address(this)) * 1e12;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getCurveId(address token) private pure returns (int128) {\\r\\n        if (token == address(USDT)) return 2;\\r\\n        else if (token == address(USDC)) return 1;\\r\\n        else return 0; // DAI\\r\\n    }\\r\\n\\r\\n    function getPath(address tokenA, address tokenB) private pure returns (address[] memory path) {\\r\\n        path = new address[](2);\\r\\n        path[0] = tokenA;\\r\\n        path[1] = tokenB;\\r\\n    }\\r\\n\\r\\n    function getTotalPendingDeposits() external view returns (uint) {\\r\\n        return addresses.length;\\r\\n    }\\r\\n\\r\\n    function getAllPoolInUSD() public view returns (uint) {\\r\\n        if (paused()) return UST.balanceOf(address(this)) - fees;\\r\\n\\r\\n        uint tokenKeepInVault = USDT.balanceOf(address(this)) * 1e12 +\\r\\n            USDC.balanceOf(address(this)) * 1e12 + DAI.balanceOf(address(this));\\r\\n        \\r\\n        return strategy.getAllPoolInUSD() + tokenKeepInVault - fees;\\r\\n    }\\r\\n\\r\\n    /// @notice Can be use for calculate both user shares & APR    \\r\\n    function getPricePerFullShare() external view returns (uint) {\\r\\n        return getAllPoolInUSD() * 1e18 / totalSupply();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"libs/BaseRelayRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address public trustedForwarder;\\n\\n    /*\\n     * require a function to be called through GSN only\\n     */\\n    modifier trustedForwarderOnly() {\\n        require(msg.sender == address(trustedForwarder), \\\"Function can only be called through the trusted Forwarder\\\");\\n        _;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public override view returns(bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/IRelayRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.7;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenDeposit\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareMinted\",\"type\":\"uint256\"}],\"name\":\"DistributeLPToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtInUST\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"farmIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reimburse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtInUST\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"SetAdminWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBiconomy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBiconomy\",\"type\":\"address\"}],\"name\":\"SetBiconomy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCommunityWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCommunityWallet\",\"type\":\"address\"}],\"name\":\"SetCommunityWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCustomNetworkFeePerc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCustomNetworkFeePerc\",\"type\":\"uint256\"}],\"name\":\"SetCustomNetworkFeePerc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCustomNetworkFeeTier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCustomNetworkFeeTier\",\"type\":\"uint256\"}],\"name\":\"SetCustomNetworkFeeTier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"oldNetworkFeePerc\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"newNetworkFeePerc\",\"type\":\"uint256[]\"}],\"name\":\"SetNetworkFeePerc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"oldNetworkFeeTier2\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"newNetworkFeeTier2\",\"type\":\"uint256[]\"}],\"name\":\"SetNetworkFeeTier2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProfitFeePerc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitFeePerc\",\"type\":\"uint256\"}],\"name\":\"SetProfitFeePerc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldStrategistWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStrategistWallet\",\"type\":\"address\"}],\"name\":\"SetStrategistWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasuryWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasuryWallet\",\"type\":\"address\"}],\"name\":\"SetTreasuryWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TransferredOutFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtWithdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenWithdraw\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareBurned\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectProfitAndUpdateWatermark\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customNetworkFeePerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customNetworkFeeTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPendingDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ticker\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_communityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_biconomy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"networkFeePerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"networkFeeTier2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"percKeepInVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"farmIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reimburse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_biconomy\",\"type\":\"address\"}],\"name\":\"setBiconomy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityWallet\",\"type\":\"address\"}],\"name\":\"setCommunityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_customNetworkFeePerc\",\"type\":\"uint256\"}],\"name\":\"setCustomNetworkFeePerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_customNetworkFeeTier\",\"type\":\"uint256\"}],\"name\":\"setCustomNetworkFeeTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_networkFeePerc\",\"type\":\"uint256[]\"}],\"name\":\"setNetworkFeePerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_networkFeeTier2\",\"type\":\"uint256[]\"}],\"name\":\"setNetworkFeeTier2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profitFeePerc\",\"type\":\"uint256\"}],\"name\":\"setProfitFeePerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferOutFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"USDCAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DAIAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenPrice\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StonksVault","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}