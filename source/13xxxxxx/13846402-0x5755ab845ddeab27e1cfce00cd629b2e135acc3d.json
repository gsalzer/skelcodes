{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC165 {\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\nlibrary Strings {\r\n\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        _status = _ENTERED; _; _status = _NOT_ENTERED;\r\n\r\n    }\r\n\r\n}\r\n\r\ninterface IERC721Receiver {\r\n\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    mapping(uint256 => address) private _owners;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n\r\n}\r\n\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    uint256[] private _allTokens;\r\n\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId;\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex;\r\n        }\r\n\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId;\r\n        _allTokensIndex[lastTokenId] = tokenIndex;\r\n\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n\r\n//██///////█████//██████//██////██//█████//////██///////█████//██████//███████//\r\n//██//////██///██/██///██/██////██/██///██/////██//////██///██/██///██/██///////\r\n//██//////███████/██████//██////██/███████/////██//////███████/██///██/███████//\r\n//██//////██///██/██///██//██//██//██///██/////██//////██///██/██///██//////██//\r\n//███████/██///██/██///██///████///██///██/////███████/██///██/██████//███████//\r\n\r\n\r\ncontract LarvaLads is ERC721Enumerable, ReentrancyGuard, Ownable {\r\n\r\n    uint256 public maxSupply = 5000;\r\n    uint256 public price = 0.05 ether;\r\n    uint256 public maxMint = 10;\r\n    uint256 public numTokensMinted;\r\n\r\n    string[8] private baseColors = ['#AE8B61','#DBB181','#E8AA96','#FFC2C2','#EECFA0','#C9CDAF','#D5C6E1','#EAD9D9'];\r\n    string[7] private thirdNames = ['Smile', 'Frown', 'Handlebars', 'Zombie', 'Alien', 'Ape', 'Normal'];\r\n    string[7] private thirdLayers = [\r\n        '<path fill=\"#000\" d=\"M16 17h1v1h-1z\"/>',\r\n        '<path fill=\"#000\" d=\"M16 19h1v1h-1z\"/>',\r\n        '<path stroke=\"#A66E2C\" d=\"M16.5 20v-2m3.5-.5h-3m3.5.5v2\"/><path stroke=\"#C28946\" d=\"M16 17.5h1m3 0h1\"/>',\r\n        '<path fill=\"#7DA269\" d=\"M22 10v12h-2v2h-1v1H5v-1h1v-1h1v-1h1v-1h1v-1h2v-1h2v-9h1V9h2V8h-1V7h3v1h1v1h2v1h1z\"/><path fill=\"#000\" fill-opacity=\".4\" d=\"M17 12h-2v1h2v-1zM20 12v1h2v-1h-2zM22 21h-9v1h1v1h6v-1h2v-1zM12 19h-1v6h2v-1h-1v-5zM10 25v-5H9v5h1zM8 25v-3H7v3h1zM6 24H5v1h1v-1zM16 14h-1v1h1v-1zM21 14h-1v1h1v-1zM18 19h-1v1h1v-1z\"/><path fill=\"red\" d=\"M15 13h1v1h-1v-1zM20 13h1v1h-1v-1z\"/><path fill=\"#000\" d=\"M17 13h-1v1h1v-1zM22 13h-1v1h1v-1zM20 16v-1h-2v1h2zM17 18v1h3v-1h-3z\"/>',\r\n        '<path fill=\"#C8FBFB\" d=\"M22 10v12h-2v2h-1v1H5v-1h1v-1h1v-1h1v-1h1v-1h2v-1h2v-9h1V9h2V8h-1V7h3v1h1v1h2v1h1z\"/><path stroke=\"#75BDBD\" d=\"M15.5 12v1m5-1v1\"/><path fill=\"#000\" d=\"M21 19v-1h-5v1h5zM15 13h1v-1h1v1h-1v1h-1v-1zM21 12h1v1h-1v1h-1v-1h1v-1z\"/><path fill=\"#9BE0E0\" d=\"M22 21h-9v1h1v1h6v-1h2v-1zM12 19h-1v6h2v-1h-1v-5zM10 25v-5H9v5h1zM8 25v-3H7v3h1zM6 24H5v1h1v-1zM17 13h-1v1h1v-1zM22 13h-1v1h1v-1zM19 14h-1v3h1v-3z\"/>',\r\n        '<path fill=\"#61503D\" d=\"M22 10v12h-2v2h-1v1H5v-1h1v-1h1v-1h1v-1h1v-1h2v-1h2v-9h1V9h2V8h-1V7h3v1h1v1h2v1h1z\"/><path fill=\"#958A7D\" stroke=\"#958A7D\" d=\"M16.5 19.5v-1h-1v-1h1v-2h-1v-1h-1v-3h2v-1h3v1h2v4h-1v2h1v1h-1v1h-4z\"/><path fill=\"#000\" fill-opacity=\".4\" d=\"M17 12h-2v1h2v-1zM20 12v1h2v-1h-2zM22 21h-9v1h1v1h6v-1h2v-1zM12 19h-1v6h2v-1h-1v-5zM10 25v-5H9v5h1zM8 25v-3H7v3h1zM6 24H5v1h1v-1z\"/><path fill=\"#000\" d=\"M16 13h-1v1h1v-1zM21 13h-1v1h1v-1zM18 16v-1h-1v1h1zM17 18v1h3v-1h-3zM19.724 16v-1h-1v1h1z\"/><path fill=\"#AAA197\" d=\"M17 14h-1v-1h1v1zM22 14h-1v-1h1v1z\"/>',\r\n        ''];\r\n    string[8] private fourthNames = ['3D Glasses','VR','Small Shades','Eye Patch','Classic Shades','Regular Shades','Horned Rim Glasses','None'];\r\n    string[8] private fourthLayers = [\r\n        '<path fill=\"#F0F0F0\" d=\"M12 11h11v4h-9v-3h-2v-1z\"/><path fill=\"#FD3232\" d=\"M19 12h3v2h-3z\"/><path fill=\"#328DFD\" d=\"M15 12h3v2h-3z\"/>',\r\n        '<path fill=\"#B4B4B4\" d=\"M14 11h9v4h-9z\"/><path stroke=\"#000\" d=\"M14 15.5h8m-8-5h8M13.5 14v1m10-4v4m-10-4v1m2 .5v1h6v-1h-6z\"/><path stroke=\"#8D8D8D\" d=\"M13.5 12v2m1 0v1m0-4v1m8-1v1m0 2v1\"/>',\r\n        '<path fill=\"#000\" d=\"M13 13v-1h9v3h-2v-2h-3v2h-2v-2h-2z\"/>',\r\n        '<path fill=\"#000\" d=\"M13 11h9v1h-4v2h-1v1h-2v-1h-1v-2h-1v-1z\"/>',\r\n        '<path stroke=\"#000\" d=\"M13 11.5h9m-7 3h2m.5-.5v-2m2 0v2m.5.5h2m-7.5-.5v-2\"/><path stroke=\"#5C390F\" d=\"M15 12.5h2m3 0h2\"/><path stroke=\"#C77514\" d=\"M15 13.5h2m3 0h2\"/>',\r\n        '<path fill=\"#000\" d=\"M13 12h11v2h-1v1h-2v-1h-1v-1h-2v1h-1v1h-2v-1h-1v-1h-1v-1z\"/>',\r\n        '<path fill=\"#fff\" fill-opacity=\".5\" d=\"M14 12h3v3h-3zM19 12h3v3h-3z\"/><path fill=\"#000\" d=\"M13 11h11v2h-1v-1h-4v1h-2v-1h-3v1h-1v-2z\"/>',\r\n        ''];\r\n    string[14] private fifthNames = ['Beanie','Cowboy Hat','Fedora','Police Cap','Do-rag','Knitted Cap','Bandana','Peak Spike','Wild Hair','Messy Hair','Cap Forward','Cap','Top Hat','None'];\r\n    string[14] private fifthLayers = [\r\n        '<path fill=\"#3CC300\" d=\"M14 10h7v1h-7z\"/><path fill=\"#0060C3\" d=\"M16 6v4h-4V8h1V7h1V6h2z\"/><path fill=\"#D60404\" d=\"M19 6v4h4V8h-1V7h-1V6h-2z\"/><path fill=\"#E4EB17\" d=\"M14 9h1V8h1V6h3v2h1v1h1v1h-7V9z\"/><path fill=\"#000\" d=\"M17 5h1v1h-1z\"/><path fill=\"#0060C3\" d=\"M15 4h5v1h-5z\"/>',\r\n        '<path fill=\"#794B11\" d=\"M8 7h1v1h4V4h1V3h2v1h3V3h2v1h1v4h4V7h1v2h-1v1H9V9H8V7z\"/><path fill=\"#502F05\" d=\"M12 7h11v1H12z\"/>',\r\n        '<path fill=\"#3D2F1E\" d=\"M9 9h1V8h3V6h1V4h1V3h5v1h1v2h1v2h3v1h1v1H9V9z\"/><path fill=\"#000\" d=\"M12 7h11v1H12z\"/>',\r\n        '<path fill=\"#26314A\" d=\"M12 5h11v5H12z\"/><path stroke=\"#fff\" d=\"M13 8.5h1m1 0h1m1 0h1m1 0h1m1 0h1\"/><path stroke=\"#FFD800\" d=\"M17 6.5h1\"/><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M23 6V5h-4V4h-3v1h-4v1h-1v2h1v2h3v1h9V9h-1V8h1V6h-1zm0 0h-4V5h-3v1h-4v2h1v1h1V8h1v2h8V9h-1V8h1V6zm-7 3h1V8h-1v1zm2 0h1V8h-1v1zm2 0h1V8h-1v1z\" clip-rule=\"evenodd\"/>',\r\n        '<path fill=\"#4C4C4C\" d=\"M13 7h9v4h-9z\"/><path fill=\"#000\" d=\"M13 10h-1V8h1V7h1V6h7v1h2v2h-1V8h-1V7h-7v1h-1v2z\"/><path stroke=\"#636363\" d=\"M14 9.5h1m0-1h1\"/>',\r\n        '<path fill=\"#CA4E11\" d=\"M14 7h-1v3h9V7h-1V6h-7v1z\"/><path fill=\"#933709\" d=\"M12 8h11v2h-1V9h-1v1h-1V9h-1v1h-1V9h-1v1h-1V9h-1v1h-1V9h-1v1h-1V8z\"/><path stroke=\"#000\" d=\"M11.5 10V8m1 0V7m1 0V6m.5-.5h7m.5.5v1m1 0v1m1 0v2\"/>',\r\n        '<path fill=\"#1A43C8\" d=\"M13 7h9v3H10v3H9v-3H8V9h5V7z\"/><path stroke=\"#1637A4\" d=\"M22 9.5h-1m0 1h-3m0-1h-4m8.5-.5V7m-.5-.5h-8m0 1h-1m0 1h-1m0 1h-1m0 1h-1m0-1H9\"/><path stroke=\"#142C7C\" d=\"M11 11.5h-1m2-1h-1m2-1h-1\"/>',\r\n        '<path fill=\"#000\" d=\"M14 7V5h1V4h1v1h1V4h1v1h1V4h1v1h1v2h1v2h-3v1h-1v1h-1v-1h-1V9h-3V7h1zM12 9v1h1V9h-1z\"/>',\r\n        '<path stroke=\"#000\" d=\"M12 4.5h2m4 0h5m-14 1h1m2 0h10m2 0h2m-17 1h16m-16 1h17m-16 1h15m-16 1h9m2 0h5m-17 1h7m2 0h2m2 0h3m-14 1h4m9 0h2m-16 1h5m9 0h2m-16 1h1m1 0h3m9.5-.5v2M10 14.5h4m-4 1h2\"/>',\r\n        '<path fill=\"#000\" d=\"M14 11h1v1h-1zM15 10h1v1h-1zM18 9h1v3h-1zM12 9h6v1h-6zM13 10h1v1h-1zM11 10h1v1h-1zM11 8h3v1h-3zM12 7h2v1h-2zM13 6h2v1h-2zM14 5h6v1h-6zM21 5h1v2h-1zM21 7h3v1h-3zM21 10h3v1h-3zM20 8h3v2h-3zM15 7h4v2h-4z\"/><path fill=\"#000\" d=\"M17 6h4v2h-4z\"/><path fill=\"#000\" d=\"M14 6h4v3h-4z\"/><path stroke=\"#000\" d=\"M14 5.5h6m1 0h1m-9 1h9m-10 1h12m-13 1h8m1 0h3m-11 1h7m1 0h3m-12 1h1m1 0h1m1 0h1m-2 1h1m3.5-1.5v2m2.5-1.5h3\"/>',\r\n        '<path fill=\"#515151\" d=\"M13 6h9v4h-9V6z\"/><path stroke=\"#000\" d=\"M12 10.5h12.5V9m-.5-.5h-8m0 1h-1m8-2h-1m0-1h-1m0-1h-7m0 1h-1m-.5.5v3\"/><path stroke=\"#353535\" d=\"M24 9.5h-8m-1-3h-1m0 1h-1\"/>',\r\n        '<path fill=\"#8119B7\" d=\"M12 7h1V6h1V5h7v1h1v2h3v1h1v1H12V7z\"/><path stroke=\"#B261DC\" d=\"M21 7.5h-1m0-1h-1\"/>',\r\n        '<path fill=\"#000\" d=\"M13 2h9v1h1v5h1v1h1v1H10V9h1V8h1V3h1V2z\"/><path fill=\"#DC1D1D\" d=\"M12 7h11v1H12z\"/>',\r\n        ''];\r\n    string[5] private sixthNames = ['Earring','Vape','Cigarette','Pipe','None'];\r\n    string[5] private sixthLayers = [\r\n        '<path fill=\"#FFD926\" d=\"M12 14h1v1h-1z\"/>',\r\n        '<path stroke=\"#000\" d=\"M20 17.5h7m1 1h-1m0 1h-7\"/><path stroke=\"#595959\" d=\"M20 18.5h6\"/><path stroke=\"#0040FF\" d=\"M26 18.5h1\"/>',\r\n        '<path stroke=\"#000\" d=\"M20 17.5h7m1 1h-1m0 1h-7\"/><path stroke=\"#D7D1D1\" d=\"M20 18.5h6\"/><path stroke=\"#E7A600\" d=\"M26 18.5h1\"/><path fill=\"#fff\" fill-opacity=\".4\" d=\"M26 11h1v5h-1z\"/>',\r\n        '<path stroke=\"#000\" d=\"M20 18.5h1m0 1h1m0 1h1m0 1h1.5v-2h4V22m-1 0v1m-.5.5h-4m0-1h-1m0-1h-1m0-1h-1m0-1h-1\"/><path stroke=\"#855114\" d=\"M20 19.5h1m0 1h1m0 1h1m0 1h3m-1-2h3m-2 1h1\"/><path stroke=\"#683C08\" d=\"M25 21.5h1m0 1h1m0-1h1\"/><path stroke=\"#fff\" stroke-opacity=\".4\" d=\"M26.5 12v1.5m0 0H25m1.5 0H28M26.5 15v1m0 1v1\"/>',\r\n        ''];\r\n\r\n    struct LarvaObject {\r\n        uint256 baseColor;\r\n        uint256 layerThree;\r\n        uint256 layerFour;\r\n        uint256 layerFive;\r\n        uint256 layerSix;\r\n    }\r\n\r\n    function randomLarvaLad(uint256 tokenId) internal view returns (LarvaObject memory) {\r\n        \r\n        LarvaObject memory larvaLad;\r\n\r\n        larvaLad.baseColor = getBaseColor(tokenId);\r\n        larvaLad.layerThree = getLayerThree(tokenId);\r\n        larvaLad.layerFour = getLayerFour(tokenId);\r\n        larvaLad.layerFive = getLayerFive(tokenId);\r\n        larvaLad.layerSix = getLayerSix(tokenId);\r\n\r\n        return larvaLad;\r\n    }\r\n    \r\n    function getTraits(LarvaObject memory larvaLad) internal view returns (string memory) {\r\n        \r\n        string[20] memory parts;\r\n        \r\n        parts[0] = ', \"attributes\": [{\"trait_type\": \"Type\",\"value\": \"';\r\n        if (larvaLad.layerThree == 3) {\r\n            parts[1] = 'Zombie\"}, {\"trait_type\": \"Mouth\",\"value\": \"Zombie\"},'; \r\n        }\r\n        if (larvaLad.layerThree == 4) {\r\n            parts[2] = 'Alien\"}, {\"trait_type\": \"Mouth\",\"value\": \"Alien\"},'; \r\n        }\r\n        if (larvaLad.layerThree == 5) {\r\n            parts[3] = 'Ape\"}, {\"trait_type\": \"Mouth\",\"value\": \"Ape\"},'; \r\n        }\r\n        if (larvaLad.layerThree < 3 || larvaLad.layerThree > 5) {\r\n            parts[4] = 'Normal\"}, {\"trait_type\": \"Mouth\",\"value\": \"';\r\n            parts[5] = thirdNames[larvaLad.layerThree];\r\n            parts[6] = '\"},';\r\n        }\r\n        parts[7] = ' {\"trait_type\": \"Eyewear\",\"value\": \"';\r\n        parts[8] = fourthNames[larvaLad.layerFour];\r\n        parts[9] = '\"}, {\"trait_type\": \"Headwear\",\"value\": \"';\r\n        parts[10] = fifthNames[larvaLad.layerFive];\r\n        parts[11] = '\"}, {\"trait_type\": \"Accessory\",\"value\": \"';\r\n        parts[12] = sixthNames[larvaLad.layerSix];\r\n        parts[13] = '\"}], ';\r\n        \r\n        string memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7]));\r\n                      output = string(abi.encodePacked(output, parts[8], parts[9], parts[10], parts[11], parts[12], parts[13]));\r\n        return output;\r\n    }\r\n\r\n    function random(string memory input) internal pure returns (uint256) {\r\n        return uint256(keccak256(abi.encodePacked(input)));\r\n    }\r\n\r\n    function getBaseColor(uint256 tokenId) internal pure returns (uint256) {\r\n        uint256 rand = random(string(abi.encodePacked(\"BASE COLOR\", toString(tokenId))));\r\n\r\n        uint256 rn1 = rand % 79;\r\n        uint256 bc = 0;\r\n\r\n        if (rn1 >= 10 && rn1 < 20) { bc = 1; }\r\n        if (rn1 >= 20 && rn1 < 30) { bc = 2; }\r\n        if (rn1 >= 30 && rn1 < 40) { bc = 3; }\r\n        if (rn1 >= 40 && rn1 < 50) { bc = 4; }\r\n        if (rn1 >= 50 && rn1 < 60) { bc = 5; }\r\n        if (rn1 >= 60 && rn1 < 70) { bc = 6; }\r\n        if (rn1 >= 70) { bc = 7; }\r\n\r\n        return bc;\r\n    }\r\n\r\n    function getLayerThree(uint256 tokenId) internal pure returns (uint256) {\r\n        uint256 rand = random(string(abi.encodePacked(\"LAYER THREE\", toString(tokenId))));\r\n\r\n        uint256 rn3 = rand % 170;\r\n        uint256 l3 = 0;\r\n\r\n        if (rn3 >= 46 && rn3 < 64) { l3 = 1; }\r\n        if (rn3 >= 64 && rn3 < 81) { l3 = 2; }\r\n        if (rn3 >= 81 && rn3 < 85) { l3 = 3; }\r\n        if (rn3 == 85) { l3 = 4; }\r\n        if (rn3 >= 86 && rn3 < 88) { l3 = 5; }\r\n        if (rn3 >= 88) { l3 = 6; }\r\n        \r\n        return l3;\r\n    }\r\n\r\n    function getLayerFour(uint256 tokenId) internal pure returns (uint256) {\r\n        uint256 rand = random(string(abi.encodePacked(\"LAYER FOUR\", toString(tokenId))));\r\n\r\n        uint256 rn4 = rand % 500;\r\n        uint256 l4 = 0;\r\n\r\n        if (rn4 >= 41 && rn4 < 81) { l4 = 1; }\r\n        if (rn4 >= 81 && rn4 < 121) { l4 = 2; }\r\n        if (rn4 >= 121 && rn4 < 161) { l4 = 3; }\r\n        if (rn4 >= 161 && rn4 < 201) { l4 = 4; }\r\n        if (rn4 >= 201 && rn4 < 261) { l4 = 5; }\r\n        if (rn4 >= 261 && rn4 < 281) { l4 = 6; }\r\n        if (rn4 >= 281) { l4 = 7; }\r\n        \r\n        return l4;\r\n    }\r\n\r\n    function getLayerFive(uint256 tokenId) internal pure returns (uint256) {\r\n        uint256 rand = random(string(abi.encodePacked(\"LAYER FIVE\", toString(tokenId))));\r\n\r\n        uint256 rn5 = rand % 240;\r\n        uint256 l5 = 0;\r\n\r\n        if (rn5 >= 10 && rn5 < 20) { l5 = 1; }\r\n        if (rn5 >= 20 && rn5 < 30) { l5 = 2; }\r\n        if (rn5 >= 30 && rn5 < 40) { l5 = 3; }\r\n        if (rn5 >= 40 && rn5 < 50) { l5 = 4; }\r\n        if (rn5 >= 50 && rn5 < 60) { l5 = 5; }\r\n        if (rn5 >= 60 && rn5 < 70) { l5 = 6; }\r\n        if (rn5 >= 70 && rn5 < 80) { l5 = 7; }\r\n        if (rn5 >= 80 && rn5 < 90) { l5 = 8; }\r\n        if (rn5 >= 90 && rn5 < 100) { l5 = 9; }\r\n        if (rn5 >= 100 && rn5 < 110) { l5 = 10; }\r\n        if (rn5 >= 110 && rn5 < 120) { l5 = 11; }\r\n        if (rn5 >= 120 && rn5 < 130) { l5 = 12; }\r\n        if (rn5 >= 130) { l5 = 13; }\r\n        \r\n        return l5;\r\n    }\r\n\r\n    function getLayerSix(uint256 tokenId) internal pure returns (uint256) {\r\n        uint256 rand = random(string(abi.encodePacked(\"LAYER SIX\", toString(tokenId))));\r\n\r\n        uint256 rn6 = rand % 120;\r\n        uint256 l6 = 0;\r\n\r\n        if (rn6 >= 10 && rn6 < 20) { l6 = 1; }\r\n        if (rn6 >= 20 && rn6 < 30) { l6 = 2; }\r\n        if (rn6 >= 30 && rn6 < 40) { l6 = 3; }\r\n        if (rn6 >= 40) { l6 = 4; }\r\n        \r\n        return l6;\r\n    }\r\n\r\n    function getSVG(LarvaObject memory larvaLad) internal view returns (string memory) {\r\n        string[9] memory parts;\r\n\r\n        parts[0] = '<svg id=\"x\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 30 30\"><path fill=\"#638596\" d=\"M0 0h30v30H0z\"/>';\r\n        parts[1] = '<path fill=\"';\r\n        parts[2] = baseColors[larvaLad.baseColor];\r\n        parts[3] = '\" d=\"M22 10v12h-2v2h-1v1H5v-1h1v-1h1v-1h1v-1h1v-1h2v-1h2v-9h1V9h2V8h-1V7h3v1h1v1h2v1h1z\"/><path fill=\"#000\" d=\"M4 24v2h16v-2h-1v1H5v-1H4zM6 23H5v1h1v-1zM7 22H6v1h1v-1zM8 21H7v1h1v-1zM9 20H8v1h1v-1zM11 19H9v1h2v-1zM12 10v8h-1v1h2v-9h-1zM14 10V9h-1v1h1zM15 8V7h-1v2h2V8h-1zM18 6h-3v1h3V6zM19 7h-1v1h1V7zM21 8h-2v1h2V8zM23 22V9h-2v1h1v12h1zM21 24v-1h1v-1h-2v2h1zM15 13h1v1h-1v-1zM20 13h1v1h-1v-1zM18 15h2v1h-2v-1zM17 18h3v1h-3v-1z\"/><path fill=\"#000\" fill-opacity=\".2\" d=\"M17 13h-1v1h1v-1zM22 13h-1v1h1v-1z\"/><path fill=\"#000\" fill-opacity=\".4\" d=\"M17 12h-2v1h2v-1zM20 12v1h2v-1h-2zM22 21h-9v1h1v1h6v-1h2v-1zM12 19h-1v6h2v-1h-1v-5zM10 25v-5H9v5h1zM8 25v-3H7v3h1zM6 24H5v1h1v-1z\"/>';\r\n        parts[4] = thirdLayers[larvaLad.layerThree];\r\n        parts[5] = fourthLayers[larvaLad.layerFour];\r\n        parts[6] = fifthLayers[larvaLad.layerFive];\r\n        parts[7] = sixthLayers[larvaLad.layerSix];\r\n        parts[8] = '<style>#x{shape-rendering: crispedges;}</style></svg>';\r\n\r\n        string memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8]));\r\n\r\n        return output;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) override public view returns (string memory) {\r\n        LarvaObject memory larvaLad = randomLarvaLad(tokenId);\r\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\"name\": \"Larva Lad #', toString(tokenId), '\", \"description\": \"Larva Lads are a play on the CryptoPunks and their creators, Larva Labs. The artwork and metadata are fully on-chain and were randomly generated at mint.\"', getTraits(larvaLad), '\"image\": \"data:image/svg+xml;base64,', Base64.encode(bytes(getSVG(larvaLad))), '\"}'))));\r\n        json = string(abi.encodePacked('data:application/json;base64,', json));\r\n        return json;\r\n    }\r\n\r\n    function mint(address destination, uint256 amountOfTokens) private {\r\n        require(totalSupply() < maxSupply, \"All tokens have been minted\");\r\n        require(totalSupply() + amountOfTokens <= maxSupply, \"Minting would exceed max supply\");\r\n        require(amountOfTokens <= maxMint, \"Cannot purchase this many tokens in a transaction\");\r\n        require(amountOfTokens > 0, \"Must mint at least one token\");\r\n        require(price * amountOfTokens == msg.value, \"ETH amount is incorrect\");\r\n\r\n        for (uint256 i = 0; i < amountOfTokens; i++) {\r\n            uint256 tokenId = numTokensMinted + 1;\r\n            _safeMint(destination, tokenId);\r\n            numTokensMinted += 1;\r\n        }\r\n    }\r\n\r\n    function mintForSelf(uint256 amountOfTokens) public payable virtual {\r\n        mint(_msgSender(),amountOfTokens);\r\n    }\r\n\r\n    function mintForFriend(address walletAddress, uint256 amountOfTokens) public payable virtual {\r\n        mint(walletAddress,amountOfTokens);\r\n    }\r\n\r\n    function setPrice(uint256 newPrice) public onlyOwner {\r\n        price = newPrice;\r\n    }\r\n\r\n    function setMaxMint(uint256 newMaxMint) public onlyOwner {\r\n        maxMint = newMaxMint;\r\n    }\r\n\r\n    function withdrawAll() public payable onlyOwner {\r\n        require(payable(_msgSender()).send(address(this).balance));\r\n    }\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n    \r\n    constructor() ERC721(\"Larva Lads\", \"LARVA\") Ownable() {}\r\n}\r\n\r\nlibrary Base64 {\r\n    bytes internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        uint256 len = data.length;\r\n        if (len == 0) return \"\";\r\n\r\n        uint256 encodedLen = 4 * ((len + 2) / 3);\r\n\r\n        bytes memory result = new bytes(encodedLen + 32);\r\n\r\n        bytes memory table = TABLE;\r\n\r\n        assembly {\r\n            let tablePtr := add(table, 1)\r\n            let resultPtr := add(result, 32)\r\n\r\n            for {\r\n                let i := 0\r\n            } lt(i, len) {\r\n\r\n            } {\r\n                i := add(i, 3)\r\n                let input := and(mload(add(data, i)), 0xffffff)\r\n\r\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\r\n                out := shl(224, out)\r\n\r\n                mstore(resultPtr, out)\r\n\r\n                resultPtr := add(resultPtr, 4)\r\n            }\r\n\r\n            switch mod(len, 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n\r\n            mstore(result, encodedLen)\r\n        }\r\n\r\n        return string(result);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"mintForFriend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"mintForSelf\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxMint\",\"type\":\"uint256\"}],\"name\":\"setMaxMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"LarvaLads","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://751e2223928166e6c366430224c4872b56fb8ef9463b06e19669c5f205a48ef1"}]}