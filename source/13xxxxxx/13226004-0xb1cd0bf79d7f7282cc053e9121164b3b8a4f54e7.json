{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() internal {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    uint256 c = a + b;\r\n    if (c < a) return (false, 0);\r\n    return (true, c);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    if (b > a) return (false, 0);\r\n    return (true, a - b);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) return (true, 0);\r\n    uint256 c = a * b;\r\n    if (c / a != b) return (false, 0);\r\n    return (true, c);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    if (b == 0) return (false, 0);\r\n    return (true, a / b);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    if (b == 0) return (false, 0);\r\n    return (true, a % b);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath: subtraction overflow\");\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) return 0;\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers, reverting on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0, \"SafeMath: division by zero\");\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * reverting when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0, \"SafeMath: modulo by zero\");\r\n    return a % b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n   * message unnecessarily. For custom revert reasons use {trySub}.\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n   * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * reverting with custom message when dividing by zero.\r\n   *\r\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n   * message unnecessarily. For custom revert reasons use {tryMod}.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/Interfaces/TokenVestingInterface.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\nabstract contract TokenVestingInterface {\r\n  event VestingScheduleCreated(\r\n    address indexed vestingLocation,\r\n    uint32 cliffDuration,\r\n    uint32 duration,\r\n    uint32 interval,\r\n    bool isRevocable\r\n  );\r\n\r\n  event VestingTokensGranted(\r\n    address indexed beneficiary,\r\n    uint256 vestingAmount,\r\n    uint32 startDay,\r\n    address vestingLocation\r\n  );\r\n\r\n  event VestingTokensClaimed(address indexed beneficiary, uint256 amount);\r\n\r\n  event GrantRevoked(address indexed grantHolder);\r\n\r\n  struct vestingSchedule {\r\n    bool isRevocable; /* true if the vesting option is revocable (a gift), false if irrevocable (purchased) */\r\n    uint32 cliffDuration; /* Duration of the cliff, with respect to the grant start day, in days. */\r\n    uint32 duration; /* Duration of the vesting schedule, with respect to the grant start day, in days. */\r\n    uint32 interval; /* Duration in days of the vesting interval. */\r\n  }\r\n\r\n  struct tokenGrant {\r\n    bool isActive; /* true if this vesting entry is active and in-effect entry. */\r\n    bool wasRevoked; /* true if this vesting schedule was revoked. */\r\n    uint32 startDay; /* Start day of the grant, in days since the UNIX epoch (start of day). */\r\n    uint256 amount; /* Total number of tokens that vest. */\r\n    address vestingLocation; /* Address of wallet that is holding the vesting schedule. */\r\n    uint256 claimedAmount; /* Out of vested amount, the amount that has been already transferred to beneficiary */\r\n  }\r\n\r\n  function token() public view virtual returns (IERC20);\r\n\r\n  function kill(address payable beneficiary) external virtual;\r\n\r\n  function withdrawTokens(address beneficiary, uint256 amount) external virtual;\r\n\r\n  // =========================================================================\r\n  // === Methods for claiming tokens.\r\n  // =========================================================================\r\n\r\n  function claimVestingTokens(address beneficiary) external virtual;\r\n\r\n  function claimVestingTokensForAll() external virtual;\r\n\r\n  // =========================================================================\r\n  // === Methods for administratively creating a vesting schedule for an account.\r\n  // =========================================================================\r\n\r\n  function setVestingSchedule(\r\n    address vestingLocation,\r\n    uint32 cliffDuration,\r\n    uint32 duration,\r\n    uint32 interval,\r\n    bool isRevocable\r\n  ) external virtual;\r\n\r\n  // =========================================================================\r\n  // === Token grants (general-purpose)\r\n  // === Methods to be used for administratively creating one-off token grants with vesting schedules.\r\n  // =========================================================================\r\n\r\n  function addGrant(\r\n    address beneficiary,\r\n    uint256 vestingAmount,\r\n    uint32 startDay,\r\n    uint32 duration,\r\n    uint32 cliffDuration,\r\n    uint32 interval,\r\n    bool isRevocable\r\n  ) public virtual;\r\n\r\n  function addGrantWithScheduleAt(\r\n    address beneficiary,\r\n    uint256 vestingAmount,\r\n    uint32 startDay,\r\n    address vestingLocation\r\n  ) external virtual;\r\n\r\n  function addGrantFromToday(\r\n    address beneficiary,\r\n    uint256 vestingAmount,\r\n    uint32 duration,\r\n    uint32 cliffDuration,\r\n    uint32 interval,\r\n    bool isRevocable\r\n  ) external virtual;\r\n\r\n  // =========================================================================\r\n  // === Check vesting.\r\n  // =========================================================================\r\n\r\n  function today() public view virtual returns (uint32 dayNumber);\r\n\r\n  function getGrantInfo(address grantHolder, uint32 onDayOrToday)\r\n    external\r\n    view\r\n    virtual\r\n    returns (\r\n      uint256 amountVested,\r\n      uint256 amountNotVested,\r\n      uint256 amountOfGrant,\r\n      uint256 amountAvailable,\r\n      uint256 amountClaimed,\r\n      uint32 vestStartDay,\r\n      bool isActive,\r\n      bool wasRevoked\r\n    );\r\n\r\n  function getScheduleAtInfo(address vestingLocation)\r\n    public\r\n    view\r\n    virtual\r\n    returns (\r\n      bool isRevocable,\r\n      uint32 vestDuration,\r\n      uint32 cliffDuration,\r\n      uint32 vestIntervalDays\r\n    );\r\n\r\n  function getScheduleInfo(address grantHolder)\r\n    external\r\n    view\r\n    virtual\r\n    returns (\r\n      bool isRevocable,\r\n      uint32 vestDuration,\r\n      uint32 cliffDuration,\r\n      uint32 vestIntervalDays\r\n    );\r\n\r\n  // =========================================================================\r\n  // === Grant revocation\r\n  // =========================================================================\r\n\r\n  function revokeGrant(address grantHolder) external virtual;\r\n}\r\n\r\n// File: contracts/Vesting/TokenVesting.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title Contract for token vesting schedules\r\n *\r\n * @dev Contract which gives the ability to act as a pool of funds for allocating\r\n *   tokens to any number of other addresses. Token grants support the ability to vest over time in\r\n *   accordance a predefined vesting schedule. A given wallet can receive no more than one token grant.\r\n */\r\ncontract TokenVesting is TokenVestingInterface, Context, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // Date-related constants for sanity-checking dates to reject obvious erroneous inputs\r\n  // and conversions from seconds to days and years that are more or less leap year-aware.\r\n  uint32 private constant _THOUSAND_YEARS_DAYS = 365243; /* See https://www.timeanddate.com/date/durationresult.html?m1=1&d1=1&y1=2000&m2=1&d2=1&y2=3000 */\r\n  uint32 private constant _TEN_YEARS_DAYS = _THOUSAND_YEARS_DAYS / 100; /* Includes leap years (though it doesn't really matter) */\r\n  uint32 private constant _SECONDS_PER_DAY = 24 * 60 * 60; /* 86400 seconds in a day */\r\n  uint32 private constant _JAN_1_2000_SECONDS = 946684800; /* Saturday, January 1, 2000 0:00:00 (GMT) (see https://www.epochconverter.com/) */\r\n  uint32 private constant _JAN_1_2000_DAYS =\r\n    _JAN_1_2000_SECONDS / _SECONDS_PER_DAY;\r\n  uint32 private constant _JAN_1_3000_DAYS =\r\n    _JAN_1_2000_DAYS + _THOUSAND_YEARS_DAYS;\r\n\r\n  modifier onlyOwnerOrSelf(address account) {\r\n    require(\r\n      _msgSender() == owner() || _msgSender() == account,\r\n      \"onlyOwnerOrSelf\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  mapping(address => vestingSchedule) private _vestingSchedules;\r\n  mapping(address => tokenGrant) private _tokenGrants;\r\n  address[] private _allBeneficiaries;\r\n  IERC20 private _token;\r\n\r\n  constructor(IERC20 token_) public {\r\n    require(address(token_) != address(0), \"token must be non-zero address\");\r\n    _token = token_;\r\n  }\r\n\r\n  function token() public view override returns (IERC20) {\r\n    return _token;\r\n  }\r\n\r\n  function kill(address payable beneficiary) external override onlyOwner {\r\n    _withdrawTokens(beneficiary, token().balanceOf(address(this)));\r\n    selfdestruct(beneficiary);\r\n  }\r\n\r\n  function withdrawTokens(address beneficiary, uint256 amount)\r\n    external\r\n    override\r\n    onlyOwner\r\n  {\r\n    _withdrawTokens(beneficiary, amount);\r\n  }\r\n\r\n  function _withdrawTokens(address beneficiary, uint256 amount) internal {\r\n    require(amount > 0, \"amount must be > 0\");\r\n    require(\r\n      amount <= token().balanceOf(address(this)),\r\n      \"amount must be <= current balance\"\r\n    );\r\n\r\n    require(token().transfer(beneficiary, amount));\r\n  }\r\n\r\n  // =========================================================================\r\n  // === Methods for claiming tokens.\r\n  // =========================================================================\r\n\r\n  function claimVestingTokens(address beneficiary)\r\n    external\r\n    override\r\n    onlyOwnerOrSelf(beneficiary)\r\n  {\r\n    _claimVestingTokens(beneficiary);\r\n  }\r\n\r\n  function claimVestingTokensForAll() external override onlyOwner {\r\n    for (uint256 i = 0; i < _allBeneficiaries.length; i++) {\r\n      _claimVestingTokens(_allBeneficiaries[i]);\r\n    }\r\n  }\r\n\r\n  function _claimVestingTokens(address beneficiary) internal {\r\n    uint256 amount = _getAvailableAmount(beneficiary, 0);\r\n    if (amount > 0) {\r\n      _deliverTokens(beneficiary, amount);\r\n      _tokenGrants[beneficiary].claimedAmount = _tokenGrants[beneficiary]\r\n        .claimedAmount\r\n        .add(amount);\r\n      emit VestingTokensClaimed(beneficiary, amount);\r\n    }\r\n  }\r\n\r\n  function _deliverTokens(address beneficiary, uint256 amount) internal {\r\n    require(amount > 0, \"amount must be > 0\");\r\n    require(\r\n      amount <= token().balanceOf(address(this)),\r\n      \"amount must be <= current balance\"\r\n    );\r\n    require(\r\n      _tokenGrants[beneficiary].claimedAmount.add(amount) <=\r\n        _tokenGrants[beneficiary].amount,\r\n      \"new claimed amount must be <= total grant amount\"\r\n    );\r\n\r\n    require(token().transfer(beneficiary, amount));\r\n  }\r\n\r\n  // =========================================================================\r\n  // === Methods for administratively creating a vesting schedule for an account.\r\n  // =========================================================================\r\n\r\n  /**\r\n   * @dev This one-time operation permanently establishes a vesting schedule in the given account.\r\n   *\r\n   * @param cliffDuration = Duration of the cliff, with respect to the grant start day, in days.\r\n   * @param duration = Duration of the vesting schedule, with respect to the grant start day, in days.\r\n   * @param interval = Number of days between vesting increases.\r\n   * @param isRevocable = True if the grant can be revoked (i.e. was a gift) or false if it cannot\r\n   *   be revoked (i.e. tokens were purchased).\r\n   */\r\n  function setVestingSchedule(\r\n    address vestingLocation,\r\n    uint32 cliffDuration,\r\n    uint32 duration,\r\n    uint32 interval,\r\n    bool isRevocable\r\n  ) external override onlyOwner {\r\n    _setVestingSchedule(\r\n      vestingLocation,\r\n      cliffDuration,\r\n      duration,\r\n      interval,\r\n      isRevocable\r\n    );\r\n  }\r\n\r\n  function _setVestingSchedule(\r\n    address vestingLocation,\r\n    uint32 cliffDuration,\r\n    uint32 duration,\r\n    uint32 interval,\r\n    bool isRevocable\r\n  ) internal {\r\n    // Check for a valid vesting schedule given (disallow absurd values to reject likely bad input).\r\n    require(\r\n      duration > 0 &&\r\n        duration <= _TEN_YEARS_DAYS &&\r\n        cliffDuration < duration &&\r\n        interval >= 1,\r\n      \"invalid vesting schedule\"\r\n    );\r\n\r\n    // Make sure the duration values are in harmony with interval (both should be an exact multiple of interval).\r\n    require(\r\n      duration % interval == 0 && cliffDuration % interval == 0,\r\n      \"invalid cliff/duration for interval\"\r\n    );\r\n\r\n    // Create and populate a vesting schedule.\r\n    _vestingSchedules[vestingLocation] = vestingSchedule(\r\n      isRevocable,\r\n      cliffDuration,\r\n      duration,\r\n      interval\r\n    );\r\n\r\n    // Emit the event.\r\n    emit VestingScheduleCreated(\r\n      vestingLocation,\r\n      cliffDuration,\r\n      duration,\r\n      interval,\r\n      isRevocable\r\n    );\r\n  }\r\n\r\n  // =========================================================================\r\n  // === Token grants (general-purpose)\r\n  // === Methods to be used for administratively creating one-off token grants with vesting schedules.\r\n  // =========================================================================\r\n\r\n  /**\r\n   * @dev Grants tokens to an account.\r\n   *\r\n   * @param beneficiary = Address to which tokens will be granted.\r\n   * @param vestingAmount = The number of tokens subject to vesting.\r\n   * @param startDay = Start day of the grant's vesting schedule, in days since the UNIX epoch\r\n   *   (start of day). The startDay may be given as a date in the future or in the past, going as far\r\n   *   back as year 2000.\r\n   * @param vestingLocation = Account where the vesting schedule is held (must already exist).\r\n   */\r\n  function _addGrant(\r\n    address beneficiary,\r\n    uint256 vestingAmount,\r\n    uint32 startDay,\r\n    address vestingLocation\r\n  ) internal {\r\n    // Make sure no prior grant is in effect.\r\n    require(!_tokenGrants[beneficiary].isActive, \"grant already exists\");\r\n\r\n    // Check for valid vestingAmount\r\n    require(\r\n      vestingAmount > 0 &&\r\n        startDay >= _JAN_1_2000_DAYS &&\r\n        startDay < _JAN_1_3000_DAYS,\r\n      \"invalid vesting params\"\r\n    );\r\n\r\n    // Create and populate a token grant, referencing vesting schedule.\r\n    _tokenGrants[beneficiary] = tokenGrant(\r\n      true, // isActive\r\n      false, // wasRevoked\r\n      startDay,\r\n      vestingAmount,\r\n      vestingLocation, // The wallet address where the vesting schedule is kept.\r\n      0 // claimedAmount\r\n    );\r\n    _allBeneficiaries.push(beneficiary);\r\n\r\n    // Emit the event.\r\n    emit VestingTokensGranted(\r\n      beneficiary,\r\n      vestingAmount,\r\n      startDay,\r\n      vestingLocation\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Grants tokens to an address, including a portion that will vest over time\r\n   * according to a set vesting schedule. The overall duration and cliff duration of the grant must\r\n   * be an even multiple of the vesting interval.\r\n   *\r\n   * @param beneficiary = Address to which tokens will be granted.\r\n   * @param vestingAmount = The number of tokens subject to vesting.\r\n   * @param startDay = Start day of the grant's vesting schedule, in days since the UNIX epoch\r\n   *   (start of day). The startDay may be given as a date in the future or in the past, going as far\r\n   *   back as year 2000.\r\n   * @param duration = Duration of the vesting schedule, with respect to the grant start day, in days.\r\n   * @param cliffDuration = Duration of the cliff, with respect to the grant start day, in days.\r\n   * @param interval = Number of days between vesting increases.\r\n   * @param isRevocable = True if the grant can be revoked (i.e. was a gift) or false if it cannot\r\n   *   be revoked (i.e. tokens were purchased).\r\n   */\r\n  function addGrant(\r\n    address beneficiary,\r\n    uint256 vestingAmount,\r\n    uint32 startDay,\r\n    uint32 duration,\r\n    uint32 cliffDuration,\r\n    uint32 interval,\r\n    bool isRevocable\r\n  ) public override onlyOwner {\r\n    // Make sure no prior vesting schedule has been set.\r\n    require(!_tokenGrants[beneficiary].isActive, \"grant already exists\");\r\n\r\n    // The vesting schedule is unique to this wallet and so will be stored here,\r\n    _setVestingSchedule(\r\n      beneficiary,\r\n      cliffDuration,\r\n      duration,\r\n      interval,\r\n      isRevocable\r\n    );\r\n\r\n    // Issue tokens to the beneficiary, using beneficiary's own vesting schedule.\r\n    _addGrant(beneficiary, vestingAmount, startDay, beneficiary);\r\n  }\r\n\r\n  function addGrantWithScheduleAt(\r\n    address beneficiary,\r\n    uint256 vestingAmount,\r\n    uint32 startDay,\r\n    address vestingLocation\r\n  ) external override onlyOwner {\r\n    // Issue tokens to the beneficiary, using custom vestingLocation.\r\n    _addGrant(beneficiary, vestingAmount, startDay, vestingLocation);\r\n  }\r\n\r\n  function addGrantFromToday(\r\n    address beneficiary,\r\n    uint256 vestingAmount,\r\n    uint32 duration,\r\n    uint32 cliffDuration,\r\n    uint32 interval,\r\n    bool isRevocable\r\n  ) external override onlyOwner {\r\n    addGrant(\r\n      beneficiary,\r\n      vestingAmount,\r\n      today(),\r\n      duration,\r\n      cliffDuration,\r\n      interval,\r\n      isRevocable\r\n    );\r\n  }\r\n\r\n  // =========================================================================\r\n  // === Check vesting.\r\n  // =========================================================================\r\n  function today() public view virtual override returns (uint32 dayNumber) {\r\n    return uint32(block.timestamp / _SECONDS_PER_DAY);\r\n  }\r\n\r\n  function _effectiveDay(uint32 onDayOrToday)\r\n    internal\r\n    view\r\n    returns (uint32 dayNumber)\r\n  {\r\n    return onDayOrToday == 0 ? today() : onDayOrToday;\r\n  }\r\n\r\n  /**\r\n   * @dev Determines the amount of tokens that have not vested in the given account.\r\n   *\r\n   * The math is: not vested amount = vesting amount * (end date - on date)/(end date - start date)\r\n   *\r\n   * @param grantHolder = The account to check.\r\n   * @param onDayOrToday = The day to check for, in days since the UNIX epoch. Can pass\r\n   *   the special value 0 to indicate today.\r\n   */\r\n  function _getNotVestedAmount(address grantHolder, uint32 onDayOrToday)\r\n    internal\r\n    view\r\n    returns (uint256 amountNotVested)\r\n  {\r\n    tokenGrant storage grant = _tokenGrants[grantHolder];\r\n    vestingSchedule storage vesting = _vestingSchedules[grant.vestingLocation];\r\n    uint32 onDay = _effectiveDay(onDayOrToday);\r\n\r\n    // If there's no schedule, or before the vesting cliff, then the full amount is not vested.\r\n    if (!grant.isActive || onDay < grant.startDay + vesting.cliffDuration) {\r\n      // None are vested (all are not vested)\r\n      return grant.amount;\r\n    }\r\n    // If after end of vesting, then the not vested amount is zero (all are vested).\r\n    else if (onDay >= grant.startDay + vesting.duration) {\r\n      // All are vested (none are not vested)\r\n      return uint256(0);\r\n    }\r\n    // Otherwise a fractional amount is vested.\r\n    else {\r\n      // Compute the exact number of days vested.\r\n      uint32 daysVested = onDay - grant.startDay;\r\n      // Adjust result rounding down to take into consideration the interval.\r\n      uint32 effectiveDaysVested = (daysVested / vesting.interval) *\r\n        vesting.interval;\r\n\r\n      // Compute the fraction vested from schedule using 224.32 fixed point math for date range ratio.\r\n      // Note: This is safe in 256-bit math because max value of X billion tokens = X*10^27 wei, and\r\n      // typical token amounts can fit into 90 bits. Scaling using a 32 bits value results in only 125\r\n      // bits before reducing back to 90 bits by dividing. There is plenty of room left, even for token\r\n      // amounts many orders of magnitude greater than mere billions.\r\n      uint256 vested = grant.amount.mul(effectiveDaysVested).div(\r\n        vesting.duration\r\n      );\r\n      uint256 result = grant.amount.sub(vested);\r\n      require(result <= grant.amount && vested <= grant.amount);\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Computes the amount of funds in the given account which are available for use as of\r\n   * the given day, i.e. the claimable amount.\r\n   *\r\n   * The math is: available amount = totalGrantAmount - notVestedAmount - claimedAmount.\r\n   *\r\n   * @param grantHolder = The account to check.\r\n   * @param onDay = The day to check for, in days since the UNIX epoch.\r\n   */\r\n  function _getAvailableAmount(address grantHolder, uint32 onDay)\r\n    internal\r\n    view\r\n    returns (uint256 amountAvailable)\r\n  {\r\n    tokenGrant storage grant = _tokenGrants[grantHolder];\r\n    return\r\n      _getAvailableAmountImpl(grant, _getNotVestedAmount(grantHolder, onDay));\r\n  }\r\n\r\n  function _getAvailableAmountImpl(\r\n    tokenGrant storage grant,\r\n    uint256 notVastedOnDay\r\n  ) internal view returns (uint256 amountAvailable) {\r\n    uint256 vested = grant.amount.sub(notVastedOnDay);\r\n    if (vested < grant.claimedAmount) {\r\n      // .sub below will fail, only possible when grant revoked\r\n      require(vested == 0 && grant.wasRevoked);\r\n      return 0;\r\n    }\r\n\r\n    uint256 result = vested.sub(grant.claimedAmount);\r\n    require(\r\n      result <= grant.amount &&\r\n        grant.claimedAmount.add(result) <= grant.amount &&\r\n        result <= vested &&\r\n        vested <= grant.amount\r\n    );\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @dev returns all information about the grant's vesting as of the given day\r\n   * for the given account. Only callable by the account holder or a contract owner.\r\n   *\r\n   * @param grantHolder = The address to do this for.\r\n   * @param onDayOrToday = The day to check for, in days since the UNIX epoch. Can pass\r\n   *   the special value 0 to indicate today.\r\n   * return = A tuple with the following values:\r\n   *   amountVested = the amount that is already vested\r\n   *   amountNotVested = the amount that is not yet vested (equal to vestingAmount - vestedAmount)\r\n   *   amountOfGrant = the total amount of tokens subject to vesting.\r\n   *   amountAvailable = the amount of funds in the given account which are available for use as of the given day\r\n   *   amountClaimed = out of amountVested, the amount that has been already transferred to beneficiary\r\n   *   vestStartDay = starting day of the grant (in days since the UNIX epoch).\r\n   *   isActive = true if the vesting schedule is currently active.\r\n   *   wasRevoked = true if the vesting schedule was revoked.\r\n   */\r\n  function getGrantInfo(address grantHolder, uint32 onDayOrToday)\r\n    external\r\n    view\r\n    override\r\n    returns (\r\n      uint256 amountVested,\r\n      uint256 amountNotVested,\r\n      uint256 amountOfGrant,\r\n      uint256 amountAvailable,\r\n      uint256 amountClaimed,\r\n      uint32 vestStartDay,\r\n      bool isActive,\r\n      bool wasRevoked\r\n    )\r\n  {\r\n    tokenGrant storage grant = _tokenGrants[grantHolder];\r\n    uint256 notVestedAmount = _getNotVestedAmount(grantHolder, onDayOrToday);\r\n\r\n    return (\r\n      grant.amount.sub(notVestedAmount),\r\n      notVestedAmount,\r\n      grant.amount,\r\n      _getAvailableAmountImpl(grant, notVestedAmount),\r\n      grant.claimedAmount,\r\n      grant.startDay,\r\n      grant.isActive,\r\n      grant.wasRevoked\r\n    );\r\n  }\r\n\r\n  function getScheduleAtInfo(address vestingLocation)\r\n    public\r\n    view\r\n    override\r\n    returns (\r\n      bool isRevocable,\r\n      uint32 vestDuration,\r\n      uint32 cliffDuration,\r\n      uint32 vestIntervalDays\r\n    )\r\n  {\r\n    vestingSchedule storage vesting = _vestingSchedules[vestingLocation];\r\n\r\n    return (\r\n      vesting.isRevocable,\r\n      vesting.duration,\r\n      vesting.cliffDuration,\r\n      vesting.interval\r\n    );\r\n  }\r\n\r\n  function getScheduleInfo(address grantHolder)\r\n    external\r\n    view\r\n    override\r\n    returns (\r\n      bool isRevocable,\r\n      uint32 vestDuration,\r\n      uint32 cliffDuration,\r\n      uint32 vestIntervalDays\r\n    )\r\n  {\r\n    tokenGrant storage grant = _tokenGrants[grantHolder];\r\n    return getScheduleAtInfo(grant.vestingLocation);\r\n  }\r\n\r\n  // =========================================================================\r\n  // === Grant revocation\r\n  // =========================================================================\r\n\r\n  /**\r\n   * @dev If the account has a revocable grant, this forces the grant to end immediately.\r\n   * After this function is called, getGrantInfo will return incomplete data\r\n   * and there will be no possibility to claim non-claimed tokens\r\n   *\r\n   * @param grantHolder = Address to which tokens will be granted.\r\n   */\r\n  function revokeGrant(address grantHolder) external override onlyOwner {\r\n    tokenGrant storage grant = _tokenGrants[grantHolder];\r\n    vestingSchedule storage vesting = _vestingSchedules[grant.vestingLocation];\r\n\r\n    // Make sure a vesting schedule has previously been set.\r\n    require(grant.isActive, \"no active grant\");\r\n    // Make sure it's revocable.\r\n    require(vesting.isRevocable, \"irrevocable\");\r\n\r\n    // Kill the grant by updating wasRevoked and isActive.\r\n    _tokenGrants[grantHolder].wasRevoked = true;\r\n    _tokenGrants[grantHolder].isActive = false;\r\n\r\n    // Emits the GrantRevoked event.\r\n    emit GrantRevoked(grantHolder);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"grantHolder\",\"type\":\"address\"}],\"name\":\"GrantRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vestingLocation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"interval\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRevocable\",\"type\":\"bool\"}],\"name\":\"VestingScheduleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VestingTokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"startDay\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vestingLocation\",\"type\":\"address\"}],\"name\":\"VestingTokensGranted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startDay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"interval\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isRevocable\",\"type\":\"bool\"}],\"name\":\"addGrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"interval\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isRevocable\",\"type\":\"bool\"}],\"name\":\"addGrantFromToday\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startDay\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"vestingLocation\",\"type\":\"address\"}],\"name\":\"addGrantWithScheduleAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"claimVestingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimVestingTokensForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"grantHolder\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"onDayOrToday\",\"type\":\"uint32\"}],\"name\":\"getGrantInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountVested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountNotVested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfGrant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"vestStartDay\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"wasRevoked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vestingLocation\",\"type\":\"address\"}],\"name\":\"getScheduleAtInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRevocable\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"vestDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vestIntervalDays\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"grantHolder\",\"type\":\"address\"}],\"name\":\"getScheduleInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRevocable\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"vestDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vestIntervalDays\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"grantHolder\",\"type\":\"address\"}],\"name\":\"revokeGrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vestingLocation\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"interval\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isRevocable\",\"type\":\"bool\"}],\"name\":\"setVestingSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"today\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"dayNumber\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenVesting","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d528cf2e081f72908e086f8800977df826b5a483","EVMVersion":"byzantium","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c03975bcf66602b0851a5d505de8b5094bd9c09c2e30e653c82d7f499935e9f7"}]}