{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BridgeBank/BridgeBank.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./CosmosBank.sol\\\";\\nimport \\\"./EthereumBank.sol\\\";\\nimport \\\"./EthereumWhitelist.sol\\\";\\nimport \\\"./CosmosWhiteList.sol\\\";\\nimport \\\"../Oracle.sol\\\";\\nimport \\\"../CosmosBridge.sol\\\";\\nimport \\\"./BankStorage.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\n\\n/*\\n * @title BridgeBank\\n * @dev Bank contract which coordinates asset-related functionality.\\n *      CosmosBank manages the minting and burning of tokens which\\n *      represent Cosmos based assets, while EthereumBank manages\\n *      the locking and unlocking of Ethereum and ERC20 token assets\\n *      based on Ethereum. WhiteList records the ERC20 token address \\n *      list that can be locked.\\n **/\\n\\ncontract BridgeBank is BankStorage,\\n    CosmosBank,\\n    EthereumBank,\\n    EthereumWhiteList,\\n    CosmosWhiteList,\\n    Pausable {\\n\\n    bool private _initialized;\\n\\n    using SafeMath for uint256;\\n\\n    /*\\n     * @dev: Initializer, sets operator\\n     */\\n    function initialize(\\n        address _operatorAddress,\\n        address _cosmosBridgeAddress,\\n        address _owner,\\n        address _pauser\\n    ) public {\\n        require(!_initialized, \\\"Init\\\");\\n\\n        EthereumWhiteList.initialize();\\n        CosmosWhiteList.initialize();\\n        Pausable.initialize(_pauser);\\n\\n        operator = _operatorAddress;\\n        cosmosBridge = _cosmosBridgeAddress;\\n        owner = _owner;\\n        _initialized = true;\\n\\n        // hardcode since this is the first token\\n        lowerToUpperTokens[\\\"erowan\\\"] = \\\"erowan\\\";\\n        lowerToUpperTokens[\\\"eth\\\"] = \\\"eth\\\";\\n    }\\n\\n    /*\\n     * @dev: Modifier to restrict access to operator\\n     */\\n    modifier onlyOperator() {\\n        require(msg.sender == operator, \\\"!operator\\\");\\n        _;\\n    }\\n\\n    /*\\n     * @dev: Modifier to restrict access to operator\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"!owner\\\");\\n        _;\\n    }\\n\\n    /*\\n     * @dev: Modifier to restrict access to the cosmos bridge\\n     */\\n    modifier onlyCosmosBridge() {\\n        require(\\n            msg.sender == cosmosBridge,\\n            \\\"!cosmosbridge\\\"\\n        );\\n        _;\\n    }\\n\\n    /*\\n     * @dev: Modifier to only allow valid sif addresses\\n     */\\n    modifier validSifAddress(bytes memory _sifAddress) {\\n        require(_sifAddress.length == 42, \\\"Invalid len\\\");\\n        require(verifySifPrefix(_sifAddress) == true, \\\"Invalid sif address\\\");\\n        _;\\n    }\\n\\n    function changeOwner(address _newOwner) public onlyOwner {\\n        require(_newOwner != address(0), \\\"invalid address\\\");\\n        owner = _newOwner;\\n    }\\n\\n    function changeOperator(address _newOperator) public onlyOperator {\\n        require(_newOperator != address(0), \\\"invalid address\\\");\\n        operator = _newOperator;\\n    }\\n\\n    /*\\n     * @dev: function to validate if a sif address has a correct prefix\\n     */\\n    function verifySifPrefix(bytes memory _sifAddress) public pure returns (bool) {\\n        bytes3 sifInHex = 0x736966;\\n\\n        for (uint256 i = 0; i < sifInHex.length; i++) {\\n            if (sifInHex[i] != _sifAddress[i]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /*\\n     * @dev: Creates a new BridgeToken\\n     *\\n     * @param _symbol: The new BridgeToken's symbol\\n     * @return: The new BridgeToken contract's address\\n     */\\n    function createNewBridgeToken(string memory _symbol)\\n        public\\n        onlyCosmosBridge\\n        returns (address)\\n    {\\n        address newTokenAddress = deployNewBridgeToken(_symbol);\\n        setTokenInCosmosWhiteList(newTokenAddress, true);\\n        return newTokenAddress;\\n    }\\n\\n    /*\\n     * @dev: Creates a new BridgeToken\\n     *\\n     * @param _symbol: The new BridgeToken's symbol\\n     * @return: The new BridgeToken contract's address\\n     */\\n    function addExistingBridgeToken(\\n        address _contractAddress\\n    ) public onlyOwner returns (address) {\\n        setTokenInCosmosWhiteList(_contractAddress, true);\\n\\n        return useExistingBridgeToken(_contractAddress);\\n    }\\n\\n    /*\\n     * @dev: Set the token address in whitelist\\n     *\\n     * @param _token: ERC 20's address\\n     * @param _inList: set the _token in list or not\\n     * @return: new value of if _token in whitelist\\n     */\\n    function updateEthWhiteList(address _token, bool _inList)\\n        public\\n        onlyOperator\\n        returns (bool)\\n    {\\n        string memory symbol = BridgeToken(_token).symbol();\\n        address listAddress = lockedTokenList[symbol];\\n        \\n        // Do not allow a token with the same symbol to be whitelisted\\n        if (_inList) {\\n            // if we want to add it to the whitelist, make sure that the address\\n            // is 0, meaning we have not seen that symbol in the whitelist before\\n            require(listAddress == address(0), \\\"whitelisted\\\");\\n        } else {\\n            // if we want to de-whitelist it, make sure that the symbol is \\n            // in fact stored in our locked token list before we set to false\\n            require(uint256(listAddress) > 0, \\\"!whitelisted\\\");\\n        }\\n        lowerToUpperTokens[toLower(symbol)] = symbol;\\n        return setTokenInEthWhiteList(_token, _inList);\\n    }\\n\\n    function bulkWhitelistUpdateLimits(address[] calldata tokenAddresses)\\n        external\\n        onlyOperator\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\n            setTokenInEthWhiteList(tokenAddresses[i], true);\\n            string memory symbol = BridgeToken(tokenAddresses[i]).symbol();\\n            lowerToUpperTokens[toLower(symbol)] = symbol;\\n        }\\n        return true;\\n    }\\n\\n    /*\\n     * @dev: Mints new BankTokens\\n     *\\n     * @param _cosmosSender: The sender's Cosmos address in bytes.\\n     * @param _ethereumRecipient: The intended recipient's Ethereum address.\\n     * @param _cosmosTokenAddress: The currency type\\n     * @param _symbol: comsos token symbol\\n     * @param _amount: number of comsos tokens to be minted\\n     */\\n    function mintBridgeTokens(\\n        address payable _intendedRecipient,\\n        string memory _symbol,\\n        uint256 _amount\\n    ) public onlyCosmosBridge whenNotPaused {\\n        string memory symbol = safeLowerToUpperTokens(_symbol);\\n        address tokenAddress = controlledBridgeTokens[symbol];\\n        return\\n            mintNewBridgeTokens(\\n                _intendedRecipient,\\n                tokenAddress,\\n                symbol,\\n                _amount\\n            );\\n    }\\n\\n    /*\\n     * @dev: Burns BridgeTokens representing native Cosmos assets.\\n     *\\n     * @param _recipient: bytes representation of destination address.\\n     * @param _token: token address in origin chain (0x0 if ethereum)\\n     * @param _amount: value of deposit\\n     */\\n    function burn(\\n        bytes memory _recipient,\\n        address _token,\\n        uint256 _amount\\n    ) public validSifAddress(_recipient) onlyCosmosTokenWhiteList(_token) whenNotPaused {\\n        string memory symbol = BridgeToken(_token).symbol();\\n\\n        BridgeToken(_token).burnFrom(msg.sender, _amount);\\n        burnFunds(msg.sender, _recipient, _token, symbol, _amount);\\n    }\\n\\n    /*\\n     * @dev: Locks received Ethereum/ERC20 funds.\\n     *\\n     * @param _recipient: bytes representation of destination address.\\n     * @param _token: token address in origin chain (0x0 if ethereum)\\n     * @param _amount: value of deposit\\n     */\\n    function lock(\\n        bytes memory _recipient,\\n        address _token,\\n        uint256 _amount\\n    ) public payable onlyEthTokenWhiteList(_token) validSifAddress(_recipient) whenNotPaused {\\n        string memory symbol;\\n\\n        // Ethereum deposit\\n        if (msg.value > 0) {\\n            require(\\n                _token == address(0),\\n                \\\"!address(0)\\\"\\n            );\\n            require(\\n                msg.value == _amount,\\n                \\\"incorrect eth amount\\\"\\n            );\\n            symbol = \\\"eth\\\";\\n            // ERC20 deposit\\n        } else {\\n            IERC20 tokenToTransfer = IERC20(_token);\\n            tokenToTransfer.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _amount\\n            );\\n            symbol = BridgeToken(_token).symbol();\\n        }\\n\\n        lockFunds(msg.sender, _recipient, _token, symbol, _amount);\\n    }\\n\\n    /*\\n     * @dev: Unlocks Ethereum and ERC20 tokens held on the contract.\\n     *\\n     * @param _recipient: recipient's Ethereum address\\n     * @param _token: token contract address\\n     * @param _symbol: token symbol\\n     * @param _amount: wei amount or ERC20 token count\\n     */\\n    function unlock(\\n        address payable _recipient,\\n        string memory _symbol,\\n        uint256 _amount\\n    ) public onlyCosmosBridge whenNotPaused {\\n        string memory symbol = safeLowerToUpperTokens(_symbol);\\n\\n        // Confirm that the bank holds sufficient balances to complete the unlock\\n        address tokenAddress = lockedTokenList[symbol];\\n        unlockFunds(_recipient, tokenAddress, symbol, _amount);\\n    }\\n\\n    /*\\n    * @dev fallback function for ERC223 tokens so that we can receive these tokens in our contract\\n    * Don't need to do anything to handle these tokens\\n    */\\n    function tokenFallback(address _from, uint _value, bytes memory _data) public {}\\n}\\n\"\r\n    },\r\n    \"contracts/BridgeBank/CosmosBank.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"./BridgeToken.sol\\\";\\nimport \\\"./CosmosBankStorage.sol\\\";\\nimport \\\"./ToLower.sol\\\";\\n\\n/**\\n * @title CosmosBank\\n * @dev Manages the deployment and minting of ERC20 compatible BridgeTokens\\n *      which represent assets based on the Cosmos blockchain.\\n **/\\n\\ncontract CosmosBank is CosmosBankStorage, ToLower {\\n    using SafeMath for uint256;\\n\\n    /*\\n     * @dev: Event declarations\\n     */\\n    event LogNewBridgeToken(address _token, string _symbol);\\n\\n    event LogBridgeTokenMint(\\n        address _token,\\n        string _symbol,\\n        uint256 _amount,\\n        address _beneficiary\\n    );\\n\\n    /*\\n     * @dev: Get a token symbol's corresponding bridge token address.\\n     *\\n     * @param _symbol: The token's symbol/denom without 'e' prefix.\\n     * @return: Address associated with the given symbol. Returns address(0) if none is found.\\n     */\\n    function getBridgeToken(string memory _symbol)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return (controlledBridgeTokens[_symbol]);\\n    }\\n\\n    function safeLowerToUpperTokens(string memory _symbol)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        string memory retrievedSymbol = lowerToUpperTokens[_symbol];\\n        return keccak256(abi.encodePacked(retrievedSymbol)) == keccak256(\\\"\\\") ? _symbol : retrievedSymbol;\\n    }\\n\\n    /*\\n     * @dev: Deploys a new BridgeToken contract\\n     *\\n     * @param _symbol: The BridgeToken's symbol\\n     */\\n    function deployNewBridgeToken(string memory _symbol)\\n        internal\\n        returns (address)\\n    {\\n        bridgeTokenCount = bridgeTokenCount.add(1);\\n\\n        // Deploy new bridge token contract\\n        BridgeToken newBridgeToken = (new BridgeToken)(_symbol);\\n\\n        // Set address in tokens mapping\\n        address newBridgeTokenAddress = address(newBridgeToken);\\n        controlledBridgeTokens[_symbol] = newBridgeTokenAddress;\\n        lowerToUpperTokens[toLower(_symbol)] = _symbol;\\n\\n        emit LogNewBridgeToken(newBridgeTokenAddress, _symbol);\\n        return newBridgeTokenAddress;\\n    }\\n\\n    /*\\n     * @dev: Deploys a new BridgeToken contract\\n     *\\n     * @param _symbol: The BridgeToken's symbol\\n     *\\n     * @note the Rowan token symbol needs to be \\\"Rowan\\\" so that it integrates correctly with the cosmos bridge \\n     */\\n    function useExistingBridgeToken(address _contractAddress)\\n        internal\\n        returns (address)\\n    {\\n        bridgeTokenCount = bridgeTokenCount.add(1);\\n\\n        string memory _symbol = BridgeToken(_contractAddress).symbol();\\n        // Set address in tokens mapping\\n        address newBridgeTokenAddress = _contractAddress;\\n        controlledBridgeTokens[_symbol] = newBridgeTokenAddress;\\n        lowerToUpperTokens[toLower(_symbol)] = _symbol;\\n\\n        emit LogNewBridgeToken(newBridgeTokenAddress, _symbol);\\n        return newBridgeTokenAddress;\\n    }\\n\\n    /*\\n     * @dev: Mints new cosmos tokens\\n     *\\n     * @param _cosmosSender: The sender's Cosmos address in bytes.\\n     * @param _ethereumRecipient: The intended recipient's Ethereum address.\\n     * @param _cosmosTokenAddress: The currency type\\n     * @param _symbol: comsos token symbol\\n     * @param _amount: number of comsos tokens to be minted\\n     */\\n    function mintNewBridgeTokens(\\n        address payable _intendedRecipient,\\n        address _bridgeTokenAddress,\\n        string memory _symbol,\\n        uint256 _amount\\n    ) internal {\\n        require(\\n            controlledBridgeTokens[_symbol] == _bridgeTokenAddress,\\n            \\\"Token must be a controlled bridge token\\\"\\n        );\\n\\n        // Mint bridge tokens\\n        require(\\n            BridgeToken(_bridgeTokenAddress).mint(_intendedRecipient, _amount),\\n            \\\"Attempted mint of bridge tokens failed\\\"\\n        );\\n\\n        emit LogBridgeTokenMint(\\n            _bridgeTokenAddress,\\n            _symbol,\\n            _amount,\\n            _intendedRecipient\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BridgeBank/EthereumBank.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./BridgeToken.sol\\\";\\nimport \\\"./EthereumBankStorage.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\n/*\\n *  @title: EthereumBank\\n *  @dev: Ethereum bank which locks Ethereum/ERC20 token deposits, and unlocks\\n *        Ethereum/ERC20 tokens once the prophecy has been successfully processed.\\n */\\ncontract EthereumBank is EthereumBankStorage {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /*\\n     * @dev: Event declarations\\n     */\\n    event LogBurn(\\n        address _from,\\n        bytes _to,\\n        address _token,\\n        string _symbol,\\n        uint256 _value,\\n        uint256 _nonce\\n    );\\n\\n    event LogLock(\\n        address _from,\\n        bytes _to,\\n        address _token,\\n        string _symbol,\\n        uint256 _value,\\n        uint256 _nonce\\n    );\\n\\n    event LogUnlock(\\n        address _to,\\n        address _token,\\n        string _symbol,\\n        uint256 _value\\n    );\\n\\n    /*\\n     * @dev: Gets the contract address of locked tokens by symbol.\\n     *\\n     * @param _symbol: The asset's symbol.\\n     */\\n    function getLockedTokenAddress(string memory _symbol)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return lockedTokenList[_symbol];\\n    }\\n\\n    /*\\n     * @dev: Gets the amount of locked tokens by symbol.\\n     *\\n     * @param _symbol: The asset's symbol.\\n     */\\n    function getLockedFunds(string memory _symbol)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return lockedFunds[lockedTokenList[_symbol]];\\n    }\\n\\n    /*\\n     * @dev: Creates a new Ethereum deposit with a unique id.\\n     *\\n     * @param _sender: The sender's ethereum address.\\n     * @param _recipient: The intended recipient's cosmos address.\\n     * @param _token: The currency type, either erc20 or ethereum.\\n     * @param _amount: The amount of erc20 tokens/ ethereum (in wei) to be itemized.\\n     */\\n    function burnFunds(\\n        address payable _sender,\\n        bytes memory _recipient,\\n        address _token,\\n        string memory _symbol,\\n        uint256 _amount\\n    ) internal {\\n        lockBurnNonce = lockBurnNonce.add(1);\\n        emit LogBurn(_sender, _recipient, _token, _symbol, _amount, lockBurnNonce);\\n    }\\n\\n    /*\\n     * @dev: Creates a new Ethereum deposit with a unique id.\\n     *\\n     * @param _sender: The sender's ethereum address.\\n     * @param _recipient: The intended recipient's cosmos address.\\n     * @param _token: The currency type, either erc20 or ethereum.\\n     * @param _amount: The amount of erc20 tokens/ ethereum (in wei) to be itemized.\\n     */\\n    function lockFunds(\\n        address payable _sender,\\n        bytes memory _recipient,\\n        address _token,\\n        string memory _symbol,\\n        uint256 _amount\\n    ) internal {\\n        lockBurnNonce = lockBurnNonce.add(1);\\n\\n        // Increment locked funds by the amount of tokens to be locked\\n        lockedTokenList[_symbol] = _token;\\n\\n        emit LogLock(_sender, _recipient, _token, _symbol, _amount, lockBurnNonce);\\n    }\\n\\n    /*\\n     * @dev: Unlocks funds held on contract and sends them to the\\n     *       intended recipient\\n     *\\n     * @param _recipient: recipient's Ethereum address\\n     * @param _token: token contract address\\n     * @param _symbol: token symbol\\n     * @param _amount: wei amount or ERC20 token count\\n     */\\n    function unlockFunds(\\n        address payable _recipient,\\n        address _token,\\n        string memory _symbol,\\n        uint256 _amount\\n    ) internal {\\n        // Transfer funds to intended recipient\\n        if (_token == address(0)) {\\n            (bool success,) = _recipient.call.value(_amount).gas(60000)(\\\"\\\");\\n            require(success, \\\"error sending ether\\\");\\n        } else {\\n            IERC20 tokenToTransfer = IERC20(_token);\\n            tokenToTransfer.safeTransfer(_recipient, _amount);\\n        }\\n\\n        emit LogUnlock(_recipient, _token, _symbol, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BridgeBank/EthereumWhitelist.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\n/**\\n * @title WhiteList\\n * @dev WhiteList contract records the ERC 20 list that can be locked in BridgeBank.\\n **/\\n\\ncontract EthereumWhiteList {\\n    bool private _initialized;\\n\\n    /**\\n    * @notice mapping to keep track of whitelisted tokens\\n    */\\n    mapping(address => bool) private _ethereumTokenWhiteList;\\n\\n    /**\\n    * @notice gap of storage for future upgrades\\n    */\\n    uint256[100] private ____gap;\\n    /*\\n     * @dev: Event declarations\\n     */\\n    event LogWhiteListUpdate(address _token, bool _value);\\n\\n    function initialize() public {\\n        require(!_initialized, \\\"Initialized\\\");\\n        _ethereumTokenWhiteList[address(0)] = true;\\n        _initialized = true;\\n    }\\n\\n    /*\\n     * @dev: Modifier to restrict erc20 can be locked\\n     */\\n    modifier onlyEthTokenWhiteList(address _token) {\\n        require(\\n            getTokenInEthWhiteList(_token),\\n            \\\"Only token in whitelist can be transferred to cosmos\\\"\\n        );\\n        _;\\n    }\\n\\n    /*\\n     * @dev: Set the token address in whitelist\\n     *\\n     * @param _token: ERC 20's address\\n     * @param _inList: set the _token in list or not\\n     * @return: new value of if _token in whitelist\\n     */\\n    function setTokenInEthWhiteList(address _token, bool _inList)\\n        internal\\n        returns (bool)\\n    {\\n        _ethereumTokenWhiteList[_token] = _inList;\\n        emit LogWhiteListUpdate(_token, _inList);\\n        return _inList;\\n    }\\n\\n    /*\\n     * @dev: Get if the token in whitelist\\n     *\\n     * @param _token: ERC 20's address\\n     * @return: if _token in whitelist\\n     */\\n    function getTokenInEthWhiteList(address _token) public view returns (bool) {\\n        return _ethereumTokenWhiteList[_token];\\n    }\\n}\"\r\n    },\r\n    \"contracts/BridgeBank/CosmosWhiteList.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./CosmosWhiteListStorage.sol\\\";\\n\\n/**\\n * @title WhiteList\\n * @dev WhiteList contract records the ERC 20 list that can be locked in BridgeBank.\\n **/\\n\\ncontract CosmosWhiteList is CosmosWhiteListStorage {\\n    bool private _initialized;\\n\\n    /*\\n     * @dev: Event declarations\\n     */\\n    event LogWhiteListUpdate(address _token, bool _value);\\n\\n    function initialize() public {\\n        require(!_initialized, \\\"Initialized\\\");\\n        _cosmosTokenWhiteList[address(0)] = true;\\n        _initialized = true;\\n    }\\n\\n    /*\\n     * @dev: Modifier to restrict erc20 can be locked\\n     */\\n    modifier onlyCosmosTokenWhiteList(address _token) {\\n        require(\\n            getCosmosTokenInWhiteList(_token),\\n            \\\"Only token in whitelist can be transferred to cosmos\\\"\\n        );\\n        _;\\n    }\\n\\n    /*\\n     * @dev: Set the token address in whitelist\\n     *\\n     * @param _token: ERC 20's address\\n     * @param _inList: set the _token in list or not\\n     * @return: new value of if _token in whitelist\\n     */\\n    function setTokenInCosmosWhiteList(address _token, bool _inList)\\n        internal\\n        returns (bool)\\n    {\\n        _cosmosTokenWhiteList[_token] = _inList;\\n        emit LogWhiteListUpdate(_token, _inList);\\n        return _inList;\\n    }\\n\\n    /*\\n     * @dev: Get if the token in whitelist\\n     *\\n     * @param _token: ERC 20's address\\n     * @return: if _token in whitelist\\n     */\\n    function getCosmosTokenInWhiteList(address _token) public view returns (bool) {\\n        return _cosmosTokenWhiteList[_token];\\n    }\\n}\"\r\n    },\r\n    \"contracts/Oracle.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"./Valset.sol\\\";\\nimport \\\"./OracleStorage.sol\\\";\\nimport \\\"./Valset.sol\\\";\\n\\n\\ncontract Oracle is OracleStorage, Valset {\\n    using SafeMath for uint256;\\n\\n    bool private _initialized;\\n\\n    /*\\n     * @dev: Event declarations\\n     */\\n    event LogNewOracleClaim(\\n        uint256 _prophecyID,\\n        address _validatorAddress\\n    );\\n\\n    event LogProphecyProcessed(\\n        uint256 _prophecyID,\\n        uint256 _prophecyPowerCurrent,\\n        uint256 _prophecyPowerThreshold,\\n        address _submitter\\n    );\\n\\n    /*\\n     * @dev: Modifier to restrict access to the operator.\\n     */\\n    modifier onlyOperator() {\\n        require(msg.sender == operator, \\\"Must be the operator.\\\");\\n        _;\\n    }\\n\\n    /*\\n     * @dev: Initialize Function\\n     */\\n    function _initialize(\\n        address _operator,\\n        uint256 _consensusThreshold,\\n        address[] memory _initValidators,\\n        uint256[] memory _initPowers\\n    ) internal {\\n        require(!_initialized, \\\"Initialized\\\");\\n        require(\\n            _consensusThreshold > 0,\\n            \\\"Consensus threshold must be positive.\\\"\\n        );\\n        require(\\n            _consensusThreshold <= 100,\\n            \\\"Invalid consensus threshold.\\\"\\n        );\\n        operator = _operator;\\n        consensusThreshold = _consensusThreshold;\\n        _initialized = true;\\n\\n        Valset._initialize(_operator, _initValidators, _initPowers);\\n    }\\n\\n    /*\\n     * @dev: newOracleClaim\\n     *       Allows validators to make new OracleClaims on an existing Prophecy\\n     */\\n    function newOracleClaim(\\n        uint256 _prophecyID,\\n        address validatorAddress\\n    ) internal\\n        returns (bool)\\n    {\\n        // Confirm that this address has not already made an oracle claim on this prophecy\\n        require(\\n            !hasMadeClaim[_prophecyID][validatorAddress],\\n            \\\"Cannot make duplicate oracle claims from the same address.\\\"\\n        );\\n\\n        hasMadeClaim[_prophecyID][validatorAddress] = true;\\n        // oracleClaimValidators[_prophecyID].push(validatorAddress);\\n        oracleClaimValidators[_prophecyID] = oracleClaimValidators[_prophecyID].add(\\n            getValidatorPower(validatorAddress)\\n        );\\n        emit LogNewOracleClaim(\\n            _prophecyID,\\n            validatorAddress\\n        );\\n\\n        // Process the prophecy\\n        (bool valid, , ) = getProphecyThreshold(_prophecyID);\\n\\n        return valid;\\n    }\\n\\n    /*\\n     * @dev: processProphecy\\n     *       Calculates the status of a prophecy. The claim is considered valid if the\\n     *       combined active signatory validator powers pass the consensus threshold.\\n     *       The threshold is x% of Total power, where x is the consensusThreshold param.\\n     */\\n    function getProphecyThreshold(uint256 _prophecyID)\\n        public\\n        view\\n        returns (bool, uint256, uint256)\\n    {\\n        uint256 signedPower = 0;\\n        uint256 totalPower = totalPower;\\n\\n        signedPower = oracleClaimValidators[_prophecyID];\\n\\n        // Prophecy must reach total signed power % threshold in order to pass consensus\\n        uint256 prophecyPowerThreshold = totalPower.mul(consensusThreshold);\\n        // consensusThreshold is a decimal multiplied by 100, so signedPower must also be multiplied by 100\\n        uint256 prophecyPowerCurrent = signedPower.mul(100);\\n        bool hasReachedThreshold = prophecyPowerCurrent >=\\n            prophecyPowerThreshold;\\n\\n        return (\\n            hasReachedThreshold,\\n            prophecyPowerCurrent,\\n            prophecyPowerThreshold\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CosmosBridge.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"./Valset.sol\\\";\\nimport \\\"./Oracle.sol\\\";\\nimport \\\"./BridgeBank/BridgeBank.sol\\\";\\nimport \\\"./CosmosBridgeStorage.sol\\\";\\n\\n\\ncontract CosmosBridge is CosmosBridgeStorage, Oracle {\\n    using SafeMath for uint256;\\n    \\n    bool private _initialized;\\n    uint256[100] private ___gap;\\n\\n    /*\\n     * @dev: Event declarations\\n     */\\n\\n    event LogOracleSet(address _oracle);\\n\\n    event LogBridgeBankSet(address _bridgeBank);\\n\\n    event LogNewProphecyClaim(\\n        uint256 _prophecyID,\\n        ClaimType _claimType,\\n        address payable _ethereumReceiver,\\n        string _symbol,\\n        uint256 _amount\\n    );\\n\\n    event LogProphecyCompleted(uint256 _prophecyID, ClaimType _claimType);\\n\\n    /*\\n     * @dev: Modifier to restrict access to the operator.\\n     */\\n    modifier onlyOperator() {\\n        require(msg.sender == operator, \\\"Must be the operator.\\\");\\n        _;\\n    }\\n\\n    /*\\n     * @dev: Modifier to restrict access to current ValSet validators\\n     */\\n    modifier onlyValidator() {\\n        require(\\n            isActiveValidator(msg.sender),\\n            \\\"Must be an active validator\\\"\\n        );\\n        _;\\n    }\\n\\n    /*\\n     * @dev: Constructor\\n     */\\n    function initialize(\\n        address _operator,\\n        uint256 _consensusThreshold,\\n        address[] memory _initValidators,\\n        uint256[] memory _initPowers\\n    ) public {\\n        require(!_initialized, \\\"Initialized\\\");\\n\\n        COSMOS_NATIVE_ASSET_PREFIX = \\\"e\\\";\\n        operator = _operator;\\n        hasBridgeBank = false;\\n        _initialized = true;\\n        Oracle._initialize(\\n            _operator,\\n            _consensusThreshold,\\n            _initValidators,\\n            _initPowers\\n        );\\n    }\\n\\n    function changeOperator(address _newOperator) public onlyOperator {\\n        require(_newOperator != address(0), \\\"invalid address\\\");\\n        operator = _newOperator;\\n    }\\n\\n    /*\\n     * @dev: setBridgeBank\\n     */\\n    function setBridgeBank(address payable _bridgeBank) public onlyOperator {\\n        require(\\n            !hasBridgeBank,\\n            \\\"The Bridge Bank cannot be updated once it has been set\\\"\\n        );\\n\\n        hasBridgeBank = true;\\n        bridgeBank = _bridgeBank;\\n\\n        emit LogBridgeBankSet(bridgeBank);\\n    }\\n\\n    function getProphecyID(\\n        ClaimType _claimType,\\n        bytes calldata _cosmosSender,\\n        uint256 _cosmosSenderSequence,\\n        address payable _ethereumReceiver,\\n        string calldata _symbol,\\n        uint256 _amount\\n    ) external pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(_claimType, _cosmosSender, _cosmosSenderSequence, _ethereumReceiver, _symbol, _amount)));\\n    }\\n\\n    /*\\n     * @dev: newProphecyClaim\\n     *       Creates a new burn or lock prophecy claim, adding it to the prophecyClaims mapping.\\n     *       Burn claims require that there are enough locked Ethereum assets to complete the prophecy.\\n     *       Lock claims have a new token contract deployed or use an existing contract based on symbol.\\n     */\\n    function newProphecyClaim(\\n        ClaimType _claimType,\\n        bytes memory _cosmosSender,\\n        uint256 _cosmosSenderSequence,\\n        address payable _ethereumReceiver,\\n        string memory _symbol,\\n        uint256 _amount\\n    ) public onlyValidator {\\n        uint256 _prophecyID = uint256(keccak256(abi.encodePacked(_claimType, _cosmosSender, _cosmosSenderSequence, _ethereumReceiver, _symbol, _amount)));\\n        (bool prophecyCompleted, , ) = getProphecyThreshold(_prophecyID);\\n        require(!prophecyCompleted, \\\"prophecyCompleted\\\");\\n\\n        if (oracleClaimValidators[_prophecyID] == 0) {\\n            string memory symbol = BridgeBank(bridgeBank).safeLowerToUpperTokens(_symbol);\\n\\n            if (_claimType == ClaimType.Burn) {\\n                address tokenAddress = BridgeBank(bridgeBank).getLockedTokenAddress(symbol);\\n                if (tokenAddress == address(0) && uint256(keccak256(abi.encodePacked(symbol))) != uint256(keccak256(\\\"eth\\\"))) {\\n                    revert(\\\"Invalid token address\\\");\\n                }\\n            } else if (_claimType == ClaimType.Lock) {\\n                address bridgeTokenAddress = BridgeBank(bridgeBank).getBridgeToken(symbol);\\n                if (bridgeTokenAddress == address(0)) {\\n                    // First lock of this asset, deploy new contract and get new symbol/token address\\n                    BridgeBank(bridgeBank).createNewBridgeToken(symbol);\\n                }\\n            } else {\\n                revert(\\\"Invalid claim type, only burn and lock are supported.\\\");\\n            }\\n\\n            emit LogNewProphecyClaim(\\n                _prophecyID,\\n                _claimType,\\n                _ethereumReceiver,\\n                symbol,\\n                _amount\\n            );\\n        }\\n\\n        bool claimComplete = newOracleClaim(_prophecyID, msg.sender);\\n\\n        if (claimComplete) {\\n            completeProphecyClaim(\\n                _prophecyID,\\n                _claimType,\\n                _ethereumReceiver,\\n                _symbol,\\n                _amount\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @dev: completeProphecyClaim\\n     *       Allows for the completion of ProphecyClaims once processed by the Oracle.\\n     *       Burn claims unlock tokens stored by BridgeBank.\\n     *       Lock claims mint BridgeTokens on BridgeBank's token whitelist.\\n     */\\n    function completeProphecyClaim(\\n        uint256 _prophecyID,\\n        ClaimType claimType,\\n        address payable ethereumReceiver,\\n        string memory symbol,\\n        uint256 amount\\n    ) internal {\\n\\n        if (claimType == ClaimType.Burn) {\\n            unlockTokens(ethereumReceiver, symbol, amount);\\n        } else {\\n            issueBridgeTokens(ethereumReceiver, symbol, amount);\\n        }\\n\\n        emit LogProphecyCompleted(_prophecyID, claimType);\\n    }\\n\\n    /*\\n     * @dev: issueBridgeTokens\\n     *       Issues a request for the BridgeBank to mint new BridgeTokens\\n     */\\n    function issueBridgeTokens(\\n        address payable ethereumReceiver,\\n        string memory symbol,\\n        uint256 amount\\n    ) internal {\\n        BridgeBank(bridgeBank).mintBridgeTokens(\\n            ethereumReceiver,\\n            symbol,\\n            amount\\n        );\\n    }\\n\\n    /*\\n     * @dev: unlockTokens\\n     *       Issues a request for the BridgeBank to unlock funds held on contract\\n     */\\n    function unlockTokens(\\n        address payable ethereumReceiver,\\n        string memory symbol,\\n        uint256 amount\\n    ) internal {\\n        BridgeBank(bridgeBank).unlock(\\n            ethereumReceiver,\\n            symbol,\\n            amount\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BridgeBank/BankStorage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./CosmosBankStorage.sol\\\";\\nimport \\\"./EthereumBankStorage.sol\\\";\\nimport \\\"./CosmosWhiteListStorage.sol\\\";\\n\\ncontract BankStorage is \\n    CosmosBankStorage,\\n    EthereumBankStorage,\\n    CosmosWhiteListStorage {\\n\\n    /**\\n    * @notice operator address that can update the smart contract\\n    */\\n    address public operator;\\n\\n    /**\\n    * @notice address of the Oracle smart contract\\n    */\\n    address public oracle;\\n\\n    /**\\n    * @notice address of the Cosmos Bridge smart contract\\n    */\\n    address public cosmosBridge;\\n\\n    /**\\n    * @notice owner address that can use the admin API\\n    */\\n    address public owner;\\n\\n    mapping (string => uint256) public maxTokenAmount;\\n\\n    /**\\n    * @notice gap of storage for future upgrades\\n    */\\n    uint256[100] private ____gap;\\n}\"\r\n    },\r\n    \"contracts/BridgeBank/Pausable.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./PauserRole.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is PauserRole {\\n    /**\\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n\\n    function initialize (address _user) internal {\\n        _addPauser(_user);\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Called by a owner to toggle pause\\n     */\\n    function togglePause() private {\\n        _paused = !_paused;\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to pause contract\\n     */\\n    function pause() external onlyPauser whenNotPaused {\\n        togglePause();\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to unpause contract\\n     */\\n    function unpause() external onlyPauser whenPaused {\\n        togglePause();\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BridgeBank/BridgeToken.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\\\";\\n\\n\\n/**\\n * @title BridgeToken\\n * @dev Mintable, ERC20Burnable, ERC20 compatible BankToken for use by BridgeBank\\n **/\\n\\ncontract BridgeToken is ERC20Mintable, ERC20Burnable, ERC20Detailed {\\n    constructor(string memory _symbol)\\n        public\\n        ERC20Detailed(_symbol, _symbol, 18)\\n    {\\n        // Intentionally left blank\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BridgeBank/CosmosBankStorage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ncontract CosmosBankStorage {\\n\\n    /**\\n    * @notice Cosmos deposit struct\\n    */\\n    struct CosmosDeposit {\\n        bytes cosmosSender;\\n        address payable ethereumRecipient;\\n        address bridgeTokenAddress;\\n        uint256 amount;\\n        bool locked;\\n    }\\n\\n    /**\\n    * @notice number of bridge tokens\\n    */\\n    uint256 public bridgeTokenCount;\\n\\n    /**\\n    * @notice cosmos deposit nonce\\n    */\\n    uint256 public cosmosDepositNonce;\\n    \\n    /**\\n    * @notice mapping of symbols to token addresses\\n    */\\n    mapping(string => address) controlledBridgeTokens;\\n    \\n    /**\\n    * @notice mapping of lowercase symbols to properly capitalized tokens\\n    */\\n    mapping(string => string) public lowerToUpperTokens;\\n\\n    /**\\n    * @notice gap of storage for future upgrades\\n    */\\n    uint256[100] private ____gap;\\n}\"\r\n    },\r\n    \"contracts/BridgeBank/ToLower.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ncontract ToLower {\\n\\n    function toLower(string memory str) public pure returns (string memory) {\\n\\t\\tbytes memory bStr = bytes(str);\\n\\t\\tbytes memory bLower = new bytes(bStr.length);\\n\\t\\tfor (uint i = 0; i < bStr.length; i++) {\\n\\t\\t\\t// Uppercase character...\\n\\t\\t\\tif ((bStr[i] >= bytes1(uint8(65))) && (bStr[i] <= bytes1(uint8(90)))) {\\n\\t\\t\\t\\t// So we add 32 to make it lowercase\\n\\t\\t\\t\\tbLower[i] = bytes1(uint8(bStr[i]) + 32);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbLower[i] = bStr[i];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn string(bLower);\\n\\t}\\n}\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../../access/roles/MinterRole.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\\n * which have permission to mint (create) new tokens as they see fit.\\n *\\n * At construction, the deployer of the contract is the only minter.\\n */\\ncontract ERC20Mintable is ERC20, MinterRole {\\n    /**\\n     * @dev See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the {MinterRole}.\\n     */\\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\\n        _mint(account, amount);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\ncontract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_burnFrom}.\\n     */\\n    function burnFrom(address account, uint256 amount) public {\\n        _burnFrom(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/access/roles/MinterRole.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"../Roles.sol\\\";\\n\\ncontract MinterRole is Context {\\n    using Roles for Roles.Role;\\n\\n    event MinterAdded(address indexed account);\\n    event MinterRemoved(address indexed account);\\n\\n    Roles.Role private _minters;\\n\\n    constructor () internal {\\n        _addMinter(_msgSender());\\n    }\\n\\n    modifier onlyMinter() {\\n        require(isMinter(_msgSender()), \\\"MinterRole: caller does not have the Minter role\\\");\\n        _;\\n    }\\n\\n    function isMinter(address account) public view returns (bool) {\\n        return _minters.has(account);\\n    }\\n\\n    function addMinter(address account) public onlyMinter {\\n        _addMinter(account);\\n    }\\n\\n    function renounceMinter() public {\\n        _removeMinter(_msgSender());\\n    }\\n\\n    function _addMinter(address account) internal {\\n        _minters.add(account);\\n        emit MinterAdded(account);\\n    }\\n\\n    function _removeMinter(address account) internal {\\n        _minters.remove(account);\\n        emit MinterRemoved(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/access/Roles.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping (address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BridgeBank/EthereumBankStorage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ncontract EthereumBankStorage {\\n\\n    /**\\n    * @notice current lock and or burn nonce\\n    */\\n    uint256 public lockBurnNonce;\\n\\n    /**\\n    * @notice how much funds we have stored of a certain token\\n    */\\n    mapping(address => uint256) public lockedFunds;\\n\\n    /**\\n    * @notice map the token symbol to the token address\\n    */\\n    mapping(string => address) public lockedTokenList;\\n\\n    /**\\n    * @notice gap of storage for future upgrades\\n    */\\n    uint256[100] private ____gap;\\n}\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BridgeBank/CosmosWhiteListStorage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ncontract CosmosWhiteListStorage {\\n\\n    /**\\n    * @notice mapping to keep track of whitelisted tokens\\n    */\\n    mapping(address => bool) internal _cosmosTokenWhiteList;\\n\\n    /**\\n    * @notice gap of storage for future upgrades\\n    */\\n    uint256[100] private ____gap;\\n}\"\r\n    },\r\n    \"contracts/Valset.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"./ValsetStorage.sol\\\";\\n\\ncontract Valset is ValsetStorage {\\n    using SafeMath for uint256;\\n\\n    bool private _initialized;\\n\\n    /*\\n     * @dev: Event declarations\\n     */\\n    event LogValidatorAdded(\\n        address _validator,\\n        uint256 _power,\\n        uint256 _currentValsetVersion,\\n        uint256 _validatorCount,\\n        uint256 _totalPower\\n    );\\n\\n    event LogValidatorPowerUpdated(\\n        address _validator,\\n        uint256 _power,\\n        uint256 _currentValsetVersion,\\n        uint256 _validatorCount,\\n        uint256 _totalPower\\n    );\\n\\n    event LogValidatorRemoved(\\n        address _validator,\\n        uint256 _power,\\n        uint256 _currentValsetVersion,\\n        uint256 _validatorCount,\\n        uint256 _totalPower\\n    );\\n\\n    event LogValsetReset(\\n        uint256 _newValsetVersion,\\n        uint256 _validatorCount,\\n        uint256 _totalPower\\n    );\\n\\n    event LogValsetUpdated(\\n        uint256 _newValsetVersion,\\n        uint256 _validatorCount,\\n        uint256 _totalPower\\n    );\\n\\n    /*\\n     * @dev: Modifier which restricts access to the operator.\\n     */\\n    modifier onlyOperator() {\\n        require(msg.sender == operator, \\\"Must be the operator.\\\");\\n        _;\\n    }\\n\\n    /*\\n     * @dev: Constructor\\n     */\\n    function _initialize(\\n        address _operator,\\n        address[] memory _initValidators,\\n        uint256[] memory _initPowers\\n    ) internal {\\n        require(!_initialized, \\\"Initialized\\\");\\n\\n        operator = _operator;\\n        currentValsetVersion = 0;\\n        _initialized = true;\\n\\n        require(\\n            _initValidators.length == _initPowers.length,\\n            \\\"Every validator must have a corresponding power\\\"\\n        );\\n\\n        resetValset();\\n\\n        for (uint256 i = 0; i < _initValidators.length; i++) {\\n            addValidatorInternal(_initValidators[i], _initPowers[i]);\\n        }\\n\\n        emit LogValsetUpdated(currentValsetVersion, validatorCount, totalPower);\\n    }\\n\\n    /*\\n     * @dev: addValidator\\n     */\\n    function addValidator(address _validatorAddress, uint256 _validatorPower)\\n        public\\n        onlyOperator\\n    {\\n        addValidatorInternal(_validatorAddress, _validatorPower);\\n    }\\n\\n    /*\\n     * @dev: updateValidatorPower\\n     */\\n    function updateValidatorPower(\\n        address _validatorAddress,\\n        uint256 _newValidatorPower\\n    ) public onlyOperator {\\n\\n        require(\\n            validators[_validatorAddress][currentValsetVersion],\\n            \\\"Can only update the power of active valdiators\\\"\\n        );\\n\\n        // Adjust total power by new validator power\\n        uint256 priorPower = powers[_validatorAddress][currentValsetVersion];\\n        totalPower = totalPower.sub(priorPower);\\n        totalPower = totalPower.add(_newValidatorPower);\\n\\n        // Set validator's new power\\n        powers[_validatorAddress][currentValsetVersion] = _newValidatorPower;\\n\\n        emit LogValidatorPowerUpdated(\\n            _validatorAddress,\\n            _newValidatorPower,\\n            currentValsetVersion,\\n            validatorCount,\\n            totalPower\\n        );\\n    }\\n\\n    /*\\n     * @dev: removeValidator\\n     */\\n    function removeValidator(address _validatorAddress) public onlyOperator {\\n        require(validators[_validatorAddress][currentValsetVersion], \\\"Can only remove active validators\\\");\\n\\n        // Update validator count and total power\\n        validatorCount = validatorCount.sub(1);\\n        totalPower = totalPower.sub(powers[_validatorAddress][currentValsetVersion]);\\n\\n        // Delete validator and power\\n        delete validators[_validatorAddress][currentValsetVersion];\\n        delete powers[_validatorAddress][currentValsetVersion];\\n\\n        emit LogValidatorRemoved(\\n            _validatorAddress,\\n            0,\\n            currentValsetVersion,\\n            validatorCount,\\n            totalPower\\n        );\\n    }\\n\\n    /*\\n     * @dev: updateValset\\n     */\\n    function updateValset(\\n        address[] memory _validators,\\n        uint256[] memory _powers\\n    ) public onlyOperator {\\n        require(\\n            _validators.length == _powers.length,\\n            \\\"Every validator must have a corresponding power\\\"\\n        );\\n\\n        resetValset();\\n\\n        for (uint256 i = 0; i < _validators.length; i++) {\\n            addValidatorInternal(_validators[i], _powers[i]);\\n        }\\n\\n        emit LogValsetUpdated(currentValsetVersion, validatorCount, totalPower);\\n    }\\n\\n    /*\\n     * @dev: isActiveValidator\\n     */\\n    function isActiveValidator(address _validatorAddress)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        // Return bool indicating if this address is an active validator\\n        return validators[_validatorAddress][currentValsetVersion];\\n    }\\n\\n    /*\\n     * @dev: getValidatorPower\\n     */\\n    function getValidatorPower(address _validatorAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return powers[_validatorAddress][currentValsetVersion];\\n    }\\n\\n    /*\\n     * @dev: recoverGas\\n     */\\n    function recoverGas(uint256 _valsetVersion, address _validatorAddress)\\n        external\\n        onlyOperator\\n    {\\n        require(\\n            _valsetVersion < currentValsetVersion,\\n            \\\"Gas recovery only allowed for previous validator sets\\\"\\n        );\\n        // Delete from mappings and recover gas\\n        delete (validators[_validatorAddress][currentValsetVersion]);\\n        delete (powers[_validatorAddress][currentValsetVersion]);\\n    }\\n\\n    /*\\n     * @dev: addValidatorInternal\\n     */\\n    function addValidatorInternal(\\n        address _validatorAddress,\\n        uint256 _validatorPower\\n    ) internal {\\n        validatorCount = validatorCount.add(1);\\n        totalPower = totalPower.add(_validatorPower);\\n\\n        // Set validator as active and set their power\\n        validators[_validatorAddress][currentValsetVersion] = true;\\n        powers[_validatorAddress][currentValsetVersion] = _validatorPower;\\n\\n        emit LogValidatorAdded(\\n            _validatorAddress,\\n            _validatorPower,\\n            currentValsetVersion,\\n            validatorCount,\\n            totalPower\\n        );\\n    }\\n\\n    /*\\n     * @dev: resetValset\\n     */\\n    function resetValset() internal {\\n        currentValsetVersion = currentValsetVersion.add(1);\\n        validatorCount = 0;\\n        totalPower = 0;\\n\\n        emit LogValsetReset(currentValsetVersion, validatorCount, totalPower);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OracleStorage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ncontract OracleStorage {\\n    /*\\n     * @dev: Public variable declarations\\n     */\\n    address public cosmosBridge;\\n\\n    /**\\n    * @notice Tracks the number of OracleClaims made on an individual BridgeClaim\\n    */\\n    address public operator;\\n\\n    /**\\n    * @notice Tracks the number of OracleClaims made on an individual BridgeClaim\\n    */\\n    uint256 public consensusThreshold; // e.g. 75 = 75%\\n\\n    /**\\n    * @notice Tracks the number of OracleClaims made on an individual BridgeClaim\\n    */\\n    mapping(uint256 => uint256) public oracleClaimValidators;\\n\\n    /**\\n    * @notice mapping of prophecyid to validator address to boolean\\n    */\\n    mapping(uint256 => mapping(address => bool)) public hasMadeClaim;\\n\\n    /**\\n    * @notice gap of storage for future upgrades\\n    */\\n    uint256[100] private ____gap;\\n}\"\r\n    },\r\n    \"contracts/ValsetStorage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ncontract ValsetStorage {\\n\\n    /**\\n     * @dev: Total power of all validators\\n     */\\n    uint256 public totalPower;\\n\\n    /**\\n     * @dev: Current valset version\\n     */\\n    uint256 public currentValsetVersion;\\n\\n    /**\\n     * @dev: validator count\\n     */\\n    uint256 public validatorCount;\\n\\n    /**\\n     * @dev: Keep track of active validator\\n     */\\n    mapping(address => mapping(uint256 => bool)) public validators;\\n\\n    /**\\n     * @dev: operator address\\n     */\\n    address public operator;\\n\\n    /**\\n     * @dev: validator address + uint then hashed equals key mapped to powers\\n     */\\n    mapping(address => mapping(uint256 => uint256)) public powers;\\n\\n    /**\\n    * @notice gap of storage for future upgrades\\n    */\\n    uint256[100] private ____gap;\\n}\"\r\n    },\r\n    \"contracts/CosmosBridgeStorage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./BridgeBank/CosmosBankStorage.sol\\\";\\nimport \\\"./BridgeBank/EthereumBankStorage.sol\\\";\\n\\ncontract CosmosBridgeStorage {\\n    /**\\n    * @notice gap of storage for future upgrades\\n    */\\n    string COSMOS_NATIVE_ASSET_PREFIX;\\n\\n    /*\\n     * @dev: Public variable declarations\\n     */\\n    address public operator;\\n    \\n    /**\\n    * @notice gap of storage for future upgrades\\n    */\\n    address payable public valset;\\n    \\n    /**\\n    * @notice gap of storage for future upgrades\\n    */\\n    address payable public oracle;\\n    \\n    /**\\n    * @notice gap of storage for future upgrades\\n    */\\n    address payable public bridgeBank;\\n    \\n    /**\\n    * @notice gap of storage for future upgrades\\n    */\\n    bool public hasBridgeBank;\\n\\n    /**\\n    * @notice gap of storage for future upgrades\\n    */\\n    mapping(uint256 => ProphecyClaim) public prophecyClaims;\\n\\n    /**\\n    * @notice prophecy status enum\\n    */\\n    enum Status {Null, Pending, Success, Failed}\\n\\n    /**\\n    * @notice claim type enum\\n    */\\n    enum ClaimType {Unsupported, Burn, Lock}\\n\\n    /**\\n    * @notice Prophecy claim struct\\n    */\\n    struct ProphecyClaim {\\n        address payable ethereumReceiver;\\n        string symbol;\\n        uint256 amount;\\n    }\\n\\n    /**\\n    * @notice gap of storage for future upgrades\\n    */\\n    uint256[100] private ____gap;\\n}\"\r\n    },\r\n    \"contracts/BridgeBank/PauserRole.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ncontract PauserRole {\\n\\n    mapping (address => bool) public pausers;\\n\\n    modifier onlyPauser() {\\n        require(pausers[msg.sender], \\\"PauserRole: caller does not have the Pauser role\\\");\\n        _;\\n    }\\n\\n    function addPauser(address account) public onlyPauser {\\n        _addPauser(account);\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(msg.sender);\\n    }\\n\\n    function _addPauser(address account) internal {\\n        pausers[account] = true;\\n    }\\n\\n    function _removePauser(address account) internal {\\n        pausers[account] = false;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"LogBridgeTokenMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"LogLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"LogNewBridgeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogUnlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"LogWhiteListUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"addExistingBridgeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bridgeTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"bulkWhitelistUpdateLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_recipient\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"changeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cosmosBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cosmosDepositNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"createNewBridgeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getBridgeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getCosmosTokenInWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getLockedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getLockedTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenInEthWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cosmosBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pauser\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_recipient\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockBurnNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"lockedTokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"lowerToUpperTokens\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"maxTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_intendedRecipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintBridgeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"safeLowerToUpperTokens\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"toLower\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_inList\",\"type\":\"bool\"}],\"name\":\"updateEthWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_sifAddress\",\"type\":\"bytes\"}],\"name\":\"verifySifPrefix\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"BridgeBank","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}