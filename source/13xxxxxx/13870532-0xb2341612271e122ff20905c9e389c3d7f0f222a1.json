{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NounSettlement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title FOMO Nouns Settlement Contract\\n/// @author forager\\n\\npragma solidity 0.8.9;\\n\\nimport { INounsAuctionHouse } from './interfaces/INounsAuctionHouse.sol';\\n\\n\\ncontract NounSettlement {\\n  address payable public fomoExecutor;\\n  address payable public immutable nounsDaoTreasury;\\n  address public immutable fomoMultisig;\\n  INounsAuctionHouse public immutable auctionHouse;\\n\\n  uint256 public maxPriorityFee = 40 * 10**9; // Prevents malicious actor burning all the ETH on gas\\n  uint256 private immutable OVERHEAD_GAS = 21000; // Handles gas outside gasleft checks, rounded up from ~20,254 in testing\\n\\n\\n  constructor(address _fomoExecutor, address _nounsDaoTreasury, address _nounsAuctionHouseAddress, address _fomoMultisig) {\\n    fomoExecutor = payable(_fomoExecutor);\\n    nounsDaoTreasury = payable(_nounsDaoTreasury);\\n    fomoMultisig = _fomoMultisig;\\n    auctionHouse = INounsAuctionHouse(_nounsAuctionHouseAddress);\\n  }\\n\\n\\n  /**\\n    Events for key actions or parameter updates\\n   */\\n\\n  /// @notice Contract funds withdrawn to the Nouns Treasury\\n  event FundsPulled(address _to, uint256 _amount);\\n\\n  /// @notice FOMO Executor EOA moved to a new address\\n  event ExecutorChanged(address _newExecutor);\\n\\n  /// @notice Maximum priority fee for refunds updated\\n  event MaxPriorityFeeChanged(uint256 _newMaxPriorityFee);\\n\\n\\n  /**\\n    Custom modifiers to handle access and refund\\n   */\\n  modifier onlyMultisig() {\\n    require(msg.sender == fomoMultisig, \\\"Only callable by FOMO Multsig\\\");\\n    _;\\n  }\\n\\n  modifier onlyFOMO() {\\n    require(msg.sender == fomoExecutor, \\\"Only callable by FOMO Nouns executor\\\");\\n    _;\\n  }\\n\\n  modifier refundGas() { // Executor must be EOA\\n    uint256 startGas = gasleft();\\n    require(tx.gasprice <= block.basefee + maxPriorityFee, \\\"Gas price above current reasonable limit\\\");\\n    _;\\n    uint256 endGas = gasleft();\\n\\n    uint256 totalGasCost = tx.gasprice * (startGas - endGas + OVERHEAD_GAS);\\n    fomoExecutor.transfer(totalGasCost);\\n  }\\n\\n\\n  /**\\n    Fund management to allow donations and liquidation\\n   */\\n\\n  /// @notice Donate funds to cover auction settlement gas fees\\n  function donateFunds() external payable { }\\n  receive() external payable { }\\n  fallback() external payable { }\\n\\n  /// @notice Pull all funds from contract into the Nouns DAO Treasury\\n  function pullFunds() external onlyMultisig {\\n    uint256 balance = address(this).balance;\\n    (bool sent, ) = nounsDaoTreasury.call{value: balance}(\\\"\\\");\\n    require(sent, \\\"Funds removal failed.\\\");\\n    emit FundsPulled(nounsDaoTreasury, balance);\\n  }\\n\\n\\n  /**\\n    Change addresses or limits for the contract execution\\n   */\\n  \\n  /// @notice Change address for the FOMO Executor EOA that can request gas refunds\\n  function changeExecutorAddress(address _newFomoExecutor) external onlyMultisig {\\n    fomoExecutor = payable(_newFomoExecutor);\\n    emit ExecutorChanged(fomoExecutor);\\n  }\\n\\n  /// @notice Update the maximum allowed priority fee (in wei) for refunds\\n  function changeMaxPriorityFee(uint256 _newMaxPriorityFee) external onlyMultisig {\\n    maxPriorityFee = _newMaxPriorityFee;\\n    emit MaxPriorityFeeChanged(maxPriorityFee);\\n  }\\n\\n\\n  /**\\n    Settle the Auction & Mint the Desired Nouns\\n   */\\n\\n  /// @notice Settle auction ensuring desired hash is used to generate the new Noun\\n  function settleAuction(bytes32 _desiredHash) public {\\n    bytes32 lastHash = blockhash(block.number - 1); // Only settle if desired Noun would be minted\\n    require(lastHash == _desiredHash, \\\"Prior blockhash did not match intended hash\\\");\\n    \\n    auctionHouse.settleCurrentAndCreateNewAuction();\\n  }\\n\\n  /// @notice Settle auction, as with settleAuction, AND refund gas to caller\\n  function settleAuctionWithRefund(bytes32 _desiredHash) external refundGas onlyFOMO {\\n    settleAuction(_desiredHash);\\n  }\\n}\"\r\n    },\r\n    \"contracts/interfaces/INounsAuctionHouse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for Noun Auction Houses\\n\\n/*********************************\\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\\n * ░░░░░░█████████░░█████████░░░ *\\n * ░░░░░░██░░░████░░██░░░████░░░ *\\n * ░░██████░░░████████░░░████░░░ *\\n * ░░██░░██░░░████░░██░░░████░░░ *\\n * ░░██░░██░░░████░░██░░░████░░░ *\\n * ░░░░░░█████████░░█████████░░░ *\\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\\n * ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ *\\n *********************************/\\n\\npragma solidity ^0.8.6;\\n\\ninterface INounsAuctionHouse {\\n    struct Auction {\\n        // ID for the Noun (ERC721 token ID)\\n        uint256 nounId;\\n        // The current highest bid amount\\n        uint256 amount;\\n        // The time that the auction started\\n        uint256 startTime;\\n        // The time that the auction is scheduled to end\\n        uint256 endTime;\\n        // The address of the current highest bid\\n        address payable bidder;\\n        // Whether or not the auction has been settled\\n        bool settled;\\n    }\\n\\n    event AuctionCreated(uint256 indexed nounId, uint256 startTime, uint256 endTime);\\n\\n    event AuctionBid(uint256 indexed nounId, address sender, uint256 value, bool extended);\\n\\n    event AuctionExtended(uint256 indexed nounId, uint256 endTime);\\n\\n    event AuctionSettled(uint256 indexed nounId, address winner, uint256 amount);\\n\\n    event AuctionTimeBufferUpdated(uint256 timeBuffer);\\n\\n    event AuctionReservePriceUpdated(uint256 reservePrice);\\n\\n    event AuctionMinBidIncrementPercentageUpdated(uint256 minBidIncrementPercentage);\\n\\n    function settleAuction() external;\\n\\n    function settleCurrentAndCreateNewAuction() external;\\n\\n    function createBid(uint256 nounId) external payable;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function setTimeBuffer(uint256 timeBuffer) external;\\n\\n    function setReservePrice(uint256 reservePrice) external;\\n\\n    function setMinBidIncrementPercentage(uint8 minBidIncrementPercentage) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fomoExecutor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nounsDaoTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nounsAuctionHouseAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fomoMultisig\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newExecutor\",\"type\":\"address\"}],\"name\":\"ExecutorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FundsPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMaxPriorityFee\",\"type\":\"uint256\"}],\"name\":\"MaxPriorityFeeChanged\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"auctionHouse\",\"outputs\":[{\"internalType\":\"contract INounsAuctionHouse\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFomoExecutor\",\"type\":\"address\"}],\"name\":\"changeExecutorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxPriorityFee\",\"type\":\"uint256\"}],\"name\":\"changeMaxPriorityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donateFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fomoExecutor\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fomoMultisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPriorityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nounsDaoTreasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_desiredHash\",\"type\":\"bytes32\"}],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_desiredHash\",\"type\":\"bytes32\"}],\"name\":\"settleAuctionWithRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NounSettlement","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000085906cf629ae1da297548769ece3e3e6a4f3288f0000000000000000000000000bc3807ec262cb779b38d65b38158acc3bfede10000000000000000000000000830bd73e4184cef73443c15111a1df14e495c70600000000000000000000000054d84e89b5fcc4d54a2123e050263f29aa176da3","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}