{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/strategies/GenericLender/GenericAave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./GenericLenderBase.sol\\\";\\nimport \\\"../../interfaces/Aave/IAToken.sol\\\";\\nimport \\\"../../interfaces/Aave/IStakedAave.sol\\\";\\nimport \\\"../../interfaces/Aave/ILendingPool.sol\\\";\\nimport \\\"../../interfaces/Aave/IProtocolDataProvider.sol\\\";\\nimport \\\"../../interfaces/Aave/IAaveIncentivesController.sol\\\";\\nimport \\\"../../interfaces/Aave/IReserveInterestRateStrategy.sol\\\";\\nimport \\\"../../libraries/Aave/DataTypes.sol\\\";\\n\\ninterface IUni{\\n    function getAmountsOut(\\n        uint256 amountIn, \\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\\n/********************\\n *   A lender plugin for LenderYieldOptimiser for any erc20 asset on Aave\\n *   Made by SamPriestley.com & jmonteer\\n *   https://github.com/Grandthrax/yearnV2-generic-lender-strat/blob/master/contracts/GenericLender/GenericAave.sol\\n *\\n ********************* */\\n\\ncontract GenericAave is GenericLenderBase {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    IProtocolDataProvider public constant protocolDataProvider = IProtocolDataProvider(address(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d));\\n    IAToken public aToken;\\n    IStakedAave public constant stkAave = IStakedAave(0x4da27a545c0c5B758a6BA100e3a049001de870f5);\\n\\n    address public keep3r;\\n\\n    bool public isIncentivised;\\n\\n    address public constant WETH =\\n        address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    address public constant AAVE =\\n        address(0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9);\\n\\n    IUni public constant router =\\n        IUni(address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D));\\n\\n    uint256 constant internal SECONDS_IN_YEAR = 365 days;\\n\\n    constructor(\\n        address _strategy,\\n        string memory name,\\n        IAToken _aToken,\\n        bool _isIncentivised\\n    ) public GenericLenderBase(_strategy, name) {\\n        _initialize(_aToken, _isIncentivised);\\n    }\\n\\n    function initialize(IAToken _aToken, bool _isIncentivised) external {\\n        _initialize(_aToken, _isIncentivised);\\n    }\\n\\n    function cloneAaveLender(\\n        address _strategy,\\n        string memory _name,\\n        IAToken _aToken,\\n        bool _isIncentivised\\n    ) external returns (address newLender) {\\n        newLender = _clone(_strategy, _name);\\n        GenericAave(newLender).initialize(_aToken, _isIncentivised);\\n    }\\n\\n    // for the management to activate / deactivate incentives functionality\\n    function setIsIncentivised(bool _isIncentivised) external management {\\n        // NOTE: if the aToken is not incentivised, getIncentivesController() might revert (aToken won't implement it)\\n        // to avoid calling it, we use the OR and lazy evaluation\\n        require(!_isIncentivised || address(aToken.getIncentivesController()) != address(0), \\\"!aToken does not have incentives controller set up\\\");\\n        isIncentivised = _isIncentivised;\\n    }\\n\\n    function setKeep3r(address _keep3r) external management {\\n        keep3r = _keep3r;\\n    }\\n\\n    function withdraw(uint256 amount) external override management returns (uint256) {\\n        return _withdraw(amount);\\n    }\\n\\n    //emergency withdraw. sends balance plus amount to governance\\n    function emergencyWithdraw(uint256 amount) external override management {\\n        _lendingPool().withdraw(address(want), amount, address(this));\\n\\n        want.safeTransfer(vault.owner(), want.balanceOf(address(this)));\\n    }\\n\\n    function deposit() external override management {\\n        uint256 balance = want.balanceOf(address(this));\\n        _deposit(balance);\\n    }\\n\\n    function withdrawAll() external override management returns (bool) {\\n        uint256 invested = _nav();\\n        uint256 returned = _withdraw(invested);\\n        return returned >= invested;\\n    }\\n\\n    function startCooldown() external management {\\n        // for emergency cases\\n        IStakedAave(stkAave).cooldown(); // it will revert if balance of stkAave == 0\\n    }\\n\\n    function nav() external view override returns (uint256) {\\n        return _nav();\\n    }\\n\\n    function underlyingBalanceStored() public view returns (uint256 balance) {\\n        balance = aToken.balanceOf(address(this));\\n    }\\n\\n    function apr() external view override returns (uint256) {\\n        return _apr();\\n    }\\n\\n    function weightedApr() external view override returns (uint256) {\\n        uint256 a = _apr();\\n        return a.mul(_nav());\\n    }\\n\\n    // calculates APR from Liquidity Mining Program \\n    function _incentivesRate(uint256 totalLiquidity) public view returns (uint256) {\\n        // only returns != 0 if the incentives are in place at the moment. \\n        // it will fail if the isIncentivised is set to true but there is no incentives\\n        if(isIncentivised && block.timestamp < _incentivesController().getDistributionEnd()) {\\n            uint256 _emissionsPerSecond;\\n            (, _emissionsPerSecond, ) = _incentivesController().getAssetData(address(aToken));\\n            if(_emissionsPerSecond > 0) {\\n                uint256 emissionsInWant = _AAVEtoWant(_emissionsPerSecond); // amount of emissions in want\\n\\n                uint256 incentivesRate = emissionsInWant.mul(SECONDS_IN_YEAR).mul(1e18).div(totalLiquidity); // APRs are in 1e18 \\n\\n                return incentivesRate.mul(9_500).div(10_000); // 95% of estimated APR to avoid overestimations\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function aprAfterDeposit(uint256 extraAmount) external view override returns (uint256) {\\n        // i need to calculate new supplyRate after Deposit (when deposit has not been done yet)\\n        DataTypes.ReserveData memory reserveData = _lendingPool().getReserveData(address(want));\\n\\n        (uint256 availableLiquidity, uint256 totalStableDebt, uint256 totalVariableDebt, , , , uint256 averageStableBorrowRate, , , ) =\\n            protocolDataProvider.getReserveData(address(want));\\n\\n        uint256 newLiquidity = availableLiquidity.add(extraAmount);\\n\\n        (, , , , uint256 reserveFactor, , , , , ) = protocolDataProvider.getReserveConfigurationData(address(want));\\n\\n        (uint256 newLiquidityRate, , ) =\\n            IReserveInterestRateStrategy(reserveData.interestRateStrategyAddress).calculateInterestRates(\\n                address(want),\\n                newLiquidity,\\n                totalStableDebt,\\n                totalVariableDebt,\\n                averageStableBorrowRate,\\n                reserveFactor\\n            );\\n\\n        uint256 incentivesRate = _incentivesRate(newLiquidity.add(totalStableDebt).add(totalVariableDebt)); // total supplied liquidity in Aave v2\\n        return newLiquidityRate.div(1e9).add(incentivesRate); // divided by 1e9 to go from Ray to Wad\\n    }\\n\\n    function hasAssets() external view override returns (bool) {\\n        return aToken.balanceOf(address(this)) > 0;\\n    }\\n\\n    // Only for incentivised aTokens\\n    // this is a manual trigger to claim rewards once each 10 days\\n    // only callable if the token is incentivised by Aave Governance (_checkCooldown returns true)\\n    function harvest() external keepers{\\n        require(_checkCooldown(), \\\"!conditions are not met\\\");\\n        // redeem AAVE from stkAave\\n        uint256 stkAaveBalance = IERC20(address(stkAave)).balanceOf(address(this));\\n        if(stkAaveBalance > 0) {\\n            stkAave.redeem(address(this), stkAaveBalance);\\n        }\\n\\n        // sell AAVE for want\\n        uint256 aaveBalance = IERC20(AAVE).balanceOf(address(this));\\n        _sellAAVEForWant(aaveBalance);\\n        \\n        // deposit want in lending protocol \\n        uint256 balance = want.balanceOf(address(this));\\n        if(balance > 0) {\\n            _deposit(balance);\\n        }\\n\\n        // claim rewards\\n        address[] memory assets = new address[](1);\\n        assets[0] = address(aToken);\\n        uint256 pendingRewards = _incentivesController().getRewardsBalance(assets, address(this));\\n        if(pendingRewards > 0) {\\n            _incentivesController().claimRewards(assets, pendingRewards, address(this));\\n        }\\n\\n        // request start of cooldown period\\n        if(IERC20(address(stkAave)).balanceOf(address(this)) > 0) {\\n            stkAave.cooldown();\\n        }\\n    }\\n\\n    function harvestTrigger(uint256 callcost) external view returns (bool) {\\n        return _checkCooldown();\\n    }\\n\\n    function _initialize(IAToken _aToken, bool _isIncentivised) internal {\\n        require(address(aToken) == address(0), \\\"GenericAave already initialized\\\");\\n\\n        require(!_isIncentivised || address(_aToken.getIncentivesController()) != address(0), \\\"!aToken does not have incentives controller set up\\\");\\n        isIncentivised = _isIncentivised;\\n        aToken = _aToken;\\n        require(_lendingPool().getReserveData(address(want)).aTokenAddress == address(_aToken), \\\"WRONG ATOKEN\\\");\\n        IERC20(address(want)).safeApprove(address(_lendingPool()), type(uint256).max);\\n    }\\n\\n    function _nav() internal view returns (uint256) {\\n        return want.balanceOf(address(this)).add(underlyingBalanceStored());\\n    }\\n\\n    function _apr() internal view returns (uint256) {\\n        uint256 liquidityRate = uint256(_lendingPool().getReserveData(address(want)).currentLiquidityRate).div(1e9);// dividing by 1e9 to pass from ray to wad \\n        (uint256 availableLiquidity, uint256 totalStableDebt, uint256 totalVariableDebt, , , , , , , ) =\\n                    protocolDataProvider.getReserveData(address(want));\\n        uint256 incentivesRate = _incentivesRate(availableLiquidity.add(totalStableDebt).add(totalVariableDebt)); // total supplied liquidity in Aave v2\\n        return liquidityRate.add(incentivesRate);\\n    }\\n\\n    //withdraw an amount including any want balance\\n    function _withdraw(uint256 amount) internal returns (uint256) {\\n        uint256 balanceUnderlying = aToken.balanceOf(address(this));\\n        uint256 looseBalance = want.balanceOf(address(this));\\n        uint256 total = balanceUnderlying.add(looseBalance);\\n\\n        if (amount > total) {\\n            //cant withdraw more than we own\\n            amount = total;\\n        }\\n\\n        if (looseBalance >= amount) {\\n            want.safeTransfer(address(strategy), amount);\\n            return amount;\\n        }\\n\\n        //not state changing but OK because of previous call\\n        uint256 liquidity = want.balanceOf(address(aToken));\\n\\n        if (liquidity > 1) {\\n            uint256 toWithdraw = amount.sub(looseBalance);\\n\\n            if (toWithdraw <= liquidity) {\\n                //we can take all\\n                _lendingPool().withdraw(address(want), toWithdraw, address(this));\\n            } else {\\n                //take all we can\\n                _lendingPool().withdraw(address(want), liquidity, address(this));\\n            }\\n        }\\n        looseBalance = want.balanceOf(address(this));\\n        want.safeTransfer(address(strategy), looseBalance);\\n        return looseBalance;\\n    }\\n\\n    function _deposit(uint256 amount) internal {\\n        ILendingPool lp = _lendingPool();\\n        // NOTE: check if allowance is enough and acts accordingly\\n        // allowance might not be enough if \\n        //     i) initial allowance has been used (should take years)\\n        //     ii) lendingPool contract address has changed (Aave updated the contract address)\\n        if(want.allowance(address(this), address(lp)) < amount){\\n            IERC20(address(want)).safeApprove(address(lp), 0);\\n            IERC20(address(want)).safeApprove(address(lp), type(uint256).max);\\n        }\\n\\n        lp.deposit(address(want), amount, address(this), 0);\\n    }\\n\\n    function _lendingPool() internal view returns (ILendingPool lendingPool) {\\n        lendingPool = ILendingPool(protocolDataProvider.ADDRESSES_PROVIDER().getLendingPool());\\n    }\\n\\n    function _checkCooldown() internal view returns (bool) {\\n        if(!isIncentivised) {\\n            return false;\\n        }\\n\\n        uint256 cooldownStartTimestamp = IStakedAave(stkAave).stakersCooldowns(address(this));\\n        uint256 COOLDOWN_SECONDS = IStakedAave(stkAave).COOLDOWN_SECONDS();\\n        uint256 UNSTAKE_WINDOW = IStakedAave(stkAave).UNSTAKE_WINDOW();\\n        if(block.timestamp >= cooldownStartTimestamp.add(COOLDOWN_SECONDS)) {\\n            return block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW || cooldownStartTimestamp == 0;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _AAVEtoWant(uint256 _amount) internal view returns (uint256) {\\n        if(_amount == 0) {\\n            return 0;\\n        }\\n\\n        address[] memory path;\\n\\n        if(address(want) == address(WETH)) {\\n            path = new address[](2);\\n            path[0] = address(AAVE);\\n            path[1] = address(want);\\n        } else {\\n            path = new address[](3);\\n            path[0] = address(AAVE);\\n            path[1] = address(WETH);\\n            path[2] = address(want);\\n        }\\n\\n        uint256[] memory amounts = router.getAmountsOut(_amount, path);\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    function _sellAAVEForWant(uint256 _amount) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        address[] memory path;\\n\\n        if(address(want) == address(WETH)) {\\n            path = new address[](2);\\n            path[0] = address(AAVE);\\n            path[1] = address(want);\\n        } else {\\n            path = new address[](3);\\n            path[0] = address(AAVE);\\n            path[1] = address(WETH);\\n            path[2] = address(want);\\n        }\\n\\n        if(IERC20(AAVE).allowance(address(this), address(router)) < _amount) {\\n            IERC20(AAVE).safeApprove(address(router), 0);\\n            IERC20(AAVE).safeApprove(address(router), type(uint256).max);\\n        }\\n\\n        router.swapExactTokensForTokens(\\n            _amount,\\n            0,\\n            path,\\n            address(this),\\n            now\\n        );\\n    }\\n\\n    function _incentivesController() internal view returns (IAaveIncentivesController) {\\n        if(isIncentivised) {\\n            return aToken.getIncentivesController();\\n        } else {\\n            return IAaveIncentivesController(0);\\n        }\\n    }\\n\\n    function protectedTokens() internal view override returns (address[] memory) {\\n        address[] memory protected = new address[](2);\\n        protected[0] = address(want);\\n        protected[1] = address(aToken);\\n        return protected;\\n    }\\n\\n    modifier keepers() {\\n        require(\\n            msg.sender == address(keep3r) || msg.sender == address(strategy) || msg.sender == vault.owner() || msg.sender == IBaseStrategy(strategy).strategist(),\\n            \\\"!keepers\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/strategies/GenericLender/GenericLenderBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\nimport {VaultAPI} from \\\"../../BaseStrategy.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"contracts/interfaces/GenericLender/IGenericLender.sol\\\";\\n\\ninterface IBaseStrategy {\\n    function apiVersion() external pure returns (string memory);\\n\\n    function name() external pure returns (string memory);\\n\\n    function vault() external view returns (address);\\n\\n    function keeper() external view returns (address);\\n\\n    function tendTrigger(uint256 callCost) external view returns (bool);\\n\\n    function tend() external;\\n\\n    function harvestTrigger(uint256 callCost) external view returns (bool);\\n\\n    function harvest() external;\\n\\n    function strategist() external view returns (address);\\n}\\n\\nabstract contract GenericLenderBase is IGenericLender {\\n    using SafeERC20 for IERC20;\\n    VaultAPI public vault;\\n    address public override strategy;\\n    IERC20 public want;\\n    string public override lenderName;\\n    uint256 public dust;\\n\\n    event Cloned(address indexed clone);\\n\\n    constructor(address _strategy, string memory _name) public {\\n        _initialize(_strategy, _name);\\n    }\\n\\n    function _initialize(address _strategy, string memory _name) internal {\\n        require(address(strategy) == address(0), \\\"Lender already initialized\\\");\\n\\n        strategy = _strategy;\\n        vault = VaultAPI(IBaseStrategy(strategy).vault());\\n        want = IERC20(vault.token());\\n        lenderName = _name;\\n        dust = 10000;\\n\\n        want.safeApprove(_strategy, uint256(-1));\\n    }\\n\\n    function initialize(address _strategy, string memory _name) external virtual {\\n        _initialize(_strategy, _name);\\n    }\\n\\n    function _clone(address _strategy, string memory _name) internal returns (address newLender) {\\n        // Copied from https://github.com/optionality/clone-factory/blob/master/contracts/CloneFactory.sol\\n        bytes20 addressBytes = bytes20(address(this));\\n\\n        assembly {\\n            // EIP-1167 bytecode\\n            let clone_code := mload(0x40)\\n            mstore(clone_code, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(clone_code, 0x14), addressBytes)\\n            mstore(add(clone_code, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            newLender := create(0, clone_code, 0x37)\\n        }\\n\\n        GenericLenderBase(newLender).initialize(_strategy, _name);\\n        emit Cloned(newLender);\\n    }\\n\\n    function setDust(uint256 _dust) external virtual override management {\\n        dust = _dust;\\n    }\\n\\n    function sweep(address _token) external virtual override management {\\n        address[] memory _protectedTokens = protectedTokens();\\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \\\"!protected\\\");\\n\\n        IERC20(_token).safeTransfer(vault.owner(), IERC20(_token).balanceOf(address(this)));\\n    }\\n\\n    function protectedTokens() internal view virtual returns (address[] memory);\\n\\n    //make sure to use\\n    modifier management() {\\n        require(\\n            msg.sender == address(strategy) || msg.sender == vault.owner() || msg.sender == IBaseStrategy(strategy).strategist(),\\n            \\\"!management\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/BaseStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.6.0 <0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nstruct StrategyParams {\\n    uint256 activation;\\n    uint256 debtRatio;\\n    uint256 minDebtPerHarvest;\\n    uint256 maxDebtPerHarvest;\\n    uint256 lastReport;\\n    uint256 totalDebt;\\n    uint256 totalGain;\\n    uint256 totalLoss;\\n}\\n\\ninterface VaultAPI {\\n    function name() external view returns (string calldata);\\n\\n    function symbol() external view returns (string calldata);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function apiVersion() external pure returns (string memory);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 expiry,\\n        bytes calldata signature\\n    ) external returns (bool);\\n\\n    // NOTE: Vyper produces multiple signatures for a given function with \\\"default\\\" args\\n    function deposit() external returns (uint256);\\n\\n    function deposit(uint256 amount) external returns (uint256);\\n\\n    function deposit(uint256 amount, address recipient) external returns (uint256);\\n\\n    // NOTE: Vyper produces multiple signatures for a given function with \\\"default\\\" args\\n    function withdraw() external returns (uint256);\\n\\n    function withdraw(uint256 maxShares) external returns (uint256);\\n\\n    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\\n\\n    function token() external view returns (address);\\n\\n    function strategies(address _strategy) external view returns (StrategyParams memory);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function depositLimit() external view returns (uint256);\\n\\n    function maxAvailableShares() external view returns (uint256);\\n\\n    /**\\n     * View how much the Vault would increase this Strategy's borrow limit,\\n     * based on its present performance (since its last report). Can be used to\\n     * determine expectedReturn in your Strategy.\\n     */\\n    function creditAvailable() external view returns (uint256);\\n\\n    /**\\n     * View how much the Vault would like to pull back from the Strategy,\\n     * based on its present performance (since its last report). Can be used to\\n     * determine expectedReturn in your Strategy.\\n     */\\n    function debtOutstanding() external view returns (uint256);\\n\\n    /**\\n     * View how much the Vault expect this Strategy to return at the current\\n     * block, based on its present performance (since its last report). Can be\\n     * used to determine expectedReturn in your Strategy.\\n     */\\n    function expectedReturn() external view returns (uint256);\\n\\n    /**\\n     * This is the main contact point where the Strategy interacts with the\\n     * Vault. It is critical that this call is handled as intended by the\\n     * Strategy. Therefore, this function will be called by BaseStrategy to\\n     * make sure the integration is correct.\\n     */\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external returns (uint256);\\n\\n    /**\\n     * This function should only be used in the scenario where the Strategy is\\n     * being retired but no migration of the positions are possible, or in the\\n     * extreme scenario that the Strategy needs to be put into \\\"Emergency Exit\\\"\\n     * mode in order for it to exit as quickly as possible. The latter scenario\\n     * could be for any reason that is considered \\\"critical\\\" that the Strategy\\n     * exits its position as fast as possible, such as a sudden change in\\n     * market conditions leading to losses, or an imminent failure in an\\n     * external dependency.\\n     */\\n    function revokeStrategy() external;\\n\\n    function owner() external view returns (address);\\n}\\n\\n/**\\n * This interface is here for the keeper bot to use.\\n */\\ninterface StrategyAPI {\\n    function name() external view returns (string memory);\\n\\n    function vault() external view returns (address);\\n\\n    function want() external view returns (address);\\n\\n    function apiVersion() external pure returns (string memory);\\n\\n    function keeper() external view returns (address);\\n\\n    function isActive() external view returns (bool);\\n\\n    function delegatedAssets() external view returns (uint256);\\n\\n    function estimatedTotalAssets() external view returns (uint256);\\n\\n    function tendTrigger(uint256 callCost) external view returns (bool);\\n\\n    function tend() external;\\n\\n    function harvestTrigger(uint256 callCost) external view returns (bool);\\n\\n    function harvest() external;\\n\\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\\n}\\n\\n/**\\n * @title Yearn Base Strategy\\n * @author yearn.finance\\n * @notice\\n *  BaseStrategy implements all of the required functionality to interoperate\\n *  closely with the Vault contract. This contract should be inherited and the\\n *  abstract methods implemented to adapt the Strategy to the particular needs\\n *  it has to create a return.\\n *\\n *  Of special interest is the relationship between `harvest()` and\\n *  `vault.report()'. `harvest()` may be called simply because enough time has\\n *  elapsed since the last report, and not because any funds need to be moved\\n *  or positions adjusted. This is critical so that the Vault may maintain an\\n *  accurate picture of the Strategy's performance. See  `vault.report()`,\\n *  `harvest()`, and `harvestTrigger()` for further details.\\n */\\nabstract contract BaseStrategy {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    string public metadataURI;\\n\\n    /**\\n     * @notice\\n     *  Used to track which version of `StrategyAPI` this Strategy\\n     *  implements.\\n     * @dev The Strategy's version must match the Vault's `API_VERSION`.\\n     * @return A string which holds the current API version of this contract.\\n     */\\n    function apiVersion() public pure returns (string memory) {\\n        return \\\"0.3.2\\\";\\n    }\\n\\n    /**\\n     * @notice This Strategy's name.\\n     * @dev\\n     *  You can use this field to manage the \\\"version\\\" of this Strategy, e.g.\\n     *  `StrategySomethingOrOtherV1`. However, \\\"API Version\\\" is managed by\\n     *  `apiVersion()` function above.\\n     * @return This Strategy's name.\\n     */\\n    function name() external view virtual returns (string memory);\\n\\n    /**\\n     * @notice\\n     *  The amount (priced in want) of the total assets managed by this strategy should not count\\n     *  towards Yearn's TVL calculations.\\n     * @dev\\n     *  You can override this field to set it to a non-zero value if some of the assets of this\\n     *  Strategy is somehow delegated inside another part of of Yearn's ecosystem e.g. another Vault.\\n     *  Note that this value must be strictly less than or equal to the amount provided by\\n     *  `estimatedTotalAssets()` below, as the TVL calc will be total assets minus delegated assets.\\n     *  Also note that this value is used to determine the total assets under management by this\\n     *  strategy, for the purposes of computing the management fee in `Vault`\\n     * @return\\n     *  The amount of assets this strategy manages that should not be included in Yearn's Total Value\\n     *  Locked (TVL) calculation across it's ecosystem.\\n     */\\n    function delegatedAssets() external view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    VaultAPI public vault;\\n    address public strategist;\\n    address public rewards;\\n    address public keeper;\\n\\n    IERC20 public want;\\n\\n    // So indexers can keep track of this\\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\\n\\n    event UpdatedStrategist(address newStrategist);\\n\\n    event UpdatedKeeper(address newKeeper);\\n\\n    event UpdatedRewards(address rewards);\\n\\n    event UpdatedMinReportDelay(uint256 delay);\\n\\n    event UpdatedMaxReportDelay(uint256 delay);\\n\\n    event UpdatedProfitFactor(uint256 profitFactor);\\n\\n    event UpdatedDebtThreshold(uint256 debtThreshold);\\n\\n    event EmergencyExitEnabled();\\n\\n    event UpdatedMetadataURI(string metadataURI);\\n\\n    // The minimum number of seconds between harvest calls. See\\n    // `setMinReportDelay()` for more details.\\n    uint256 public minReportDelay;\\n\\n    // The maximum number of seconds between harvest calls. See\\n    // `setMaxReportDelay()` for more details.\\n    uint256 public maxReportDelay;\\n\\n    // The minimum multiple that `callCost` must be above the credit/profit to\\n    // be \\\"justifiable\\\". See `setProfitFactor()` for more details.\\n    uint256 public profitFactor;\\n\\n    // Use this to adjust the threshold at which running a debt causes a\\n    // harvest trigger. See `setDebtThreshold()` for more details.\\n    uint256 public debtThreshold;\\n\\n    // See note on `setEmergencyExit()`.\\n    bool public emergencyExit;\\n\\n    // modifiers\\n    modifier onlyAuthorized() {\\n        require(msg.sender == strategist || msg.sender == owner(), \\\"!authorized\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategist() {\\n        require(msg.sender == strategist, \\\"!strategist\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner(), \\\"!authorized\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeepers() {\\n        require(\\n            msg.sender == keeper ||\\n                msg.sender == strategist ||\\n                msg.sender == owner(),\\n            \\\"!authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _vault) public {\\n        _initialize(_vault, msg.sender, msg.sender, msg.sender);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Initializes the Strategy, this is called only once, when the\\n     *  contract is deployed.\\n     * @dev `_vault` should implement `VaultAPI`.\\n     * @param _vault The address of the Vault responsible for this Strategy.\\n     */\\n    function _initialize(\\n        address _vault,\\n        address _strategist,\\n        address _rewards,\\n        address _keeper\\n    ) internal {\\n        require(address(want) == address(0), \\\"Strategy already initialized\\\");\\n\\n        vault = VaultAPI(_vault);\\n        want = IERC20(vault.token());\\n        want.safeApprove(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\\n        strategist = _strategist;\\n        rewards = _rewards;\\n        keeper = _keeper;\\n\\n        // initialize variables\\n        minReportDelay = 0;\\n        maxReportDelay = 86400;\\n        profitFactor = 100;\\n        debtThreshold = 0;\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to change `strategist`.\\n     *\\n     *  This may only be called by owner or the existing strategist.\\n     * @param _strategist The new address to assign as `strategist`.\\n     */\\n    function setStrategist(address _strategist) external onlyAuthorized {\\n        require(_strategist != address(0));\\n        strategist = _strategist;\\n        emit UpdatedStrategist(_strategist);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to change `keeper`.\\n     *\\n     *  `keeper` is the only address that may call `tend()` or `harvest()`,\\n     *  other than `owner()` or `strategist`. However, unlike\\n     *  `owner()` or `strategist`, `keeper` may *only* call `tend()`\\n     *  and `harvest()`, and no other authorized functions, following the\\n     *  principle of least privilege.\\n     *\\n     *  This may only be called by owner or the strategist.\\n     * @param _keeper The new address to assign as `keeper`.\\n     */\\n    function setKeeper(address _keeper) external onlyAuthorized {\\n        require(_keeper != address(0));\\n        keeper = _keeper;\\n        emit UpdatedKeeper(_keeper);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to change `minReportDelay`. `minReportDelay` is the minimum number\\n     *  of blocks that should pass for `harvest()` to be called.\\n     *\\n     *  For external keepers (such as the Keep3r network), this is the minimum\\n     *  time between jobs to wait. (see `harvestTrigger()`\\n     *  for more details.)\\n     *\\n     *  This may only be called by owner or the strategist.\\n     * @param _delay The minimum number of seconds to wait between harvests.\\n     */\\n    function setMinReportDelay(uint256 _delay) external onlyAuthorized {\\n        minReportDelay = _delay;\\n        emit UpdatedMinReportDelay(_delay);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to change `maxReportDelay`. `maxReportDelay` is the maximum number\\n     *  of blocks that should pass for `harvest()` to be called.\\n     *\\n     *  For external keepers (such as the Keep3r network), this is the maximum\\n     *  time between jobs to wait. (see `harvestTrigger()`\\n     *  for more details.)\\n     *\\n     *  This may only be called by owner or the strategist.\\n     * @param _delay The maximum number of seconds to wait between harvests.\\n     */\\n    function setMaxReportDelay(uint256 _delay) external onlyAuthorized {\\n        maxReportDelay = _delay;\\n        emit UpdatedMaxReportDelay(_delay);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to change `profitFactor`. `profitFactor` is used to determine\\n     *  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`\\n     *  for more details.)\\n     *\\n     *  This may only be called by owner or the strategist.\\n     * @param _profitFactor A ratio to multiply anticipated\\n     * `harvest()` gas cost against.\\n     */\\n    function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {\\n        profitFactor = _profitFactor;\\n        emit UpdatedProfitFactor(_profitFactor);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Sets how far the Strategy can go into loss without a harvest and report\\n     *  being required.\\n     *\\n     *  By default this is 0, meaning any losses would cause a harvest which\\n     *  will subsequently report the loss to the Vault for tracking. (See\\n     *  `harvestTrigger()` for more details.)\\n     *\\n     *  This may only be called by owner or the strategist.\\n     * @param _debtThreshold How big of a loss this Strategy may carry without\\n     * being required to report to the Vault.\\n     */\\n    function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {\\n        debtThreshold = _debtThreshold;\\n        emit UpdatedDebtThreshold(_debtThreshold);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to change `metadataURI`. `metadataURI` is used to store the URI\\n     * of the file describing the strategy.\\n     *\\n     *  This may only be called by owner or the strategist.\\n     * @param _metadataURI The URI that describe the strategy.\\n     */\\n    function setMetadataURI(string calldata _metadataURI) external onlyAuthorized {\\n        metadataURI = _metadataURI;\\n        emit UpdatedMetadataURI(_metadataURI);\\n    }\\n\\n    /**\\n     * Resolve owner address from Vault contract, used to make assertions\\n     * on protected functions in the Strategy.\\n     */\\n    function owner() internal view returns (address) {\\n        return vault.owner();\\n    }\\n\\n    /**\\n     * @notice\\n     *  Provide an accurate estimate for the total amount of assets\\n     *  (principle + return) that this Strategy is currently managing,\\n     *  denominated in terms of `want` tokens.\\n     *\\n     *  This total should be \\\"realizable\\\" e.g. the total value that could\\n     *  *actually* be obtained from this Strategy if it were to divest its\\n     *  entire position based on current on-chain conditions.\\n     * @dev\\n     *  Care must be taken in using this function, since it relies on external\\n     *  systems, which could be manipulated by the attacker to give an inflated\\n     *  (or reduced) value produced by this function, based on current on-chain\\n     *  conditions (e.g. this function is possible to influence through\\n     *  flashloan attacks, oracle manipulations, or other DeFi attack\\n     *  mechanisms).\\n     *\\n     *  It is up to owner to use this function to correctly order this\\n     *  Strategy relative to its peers in the withdrawal queue to minimize\\n     *  losses for the Vault based on sudden withdrawals. This value should be\\n     *  higher than the total debt of the Strategy and higher than its expected\\n     *  value to be \\\"safe\\\".\\n     * @return The estimated total assets in this Strategy.\\n     */\\n    function estimatedTotalAssets() public view virtual returns (uint256);\\n\\n    /*\\n     * @notice\\n     *  Provide an indication of whether this strategy is currently \\\"active\\\"\\n     *  in that it is managing an active position, or will manage a position in\\n     *  the future. This should correlate to `harvest()` activity, so that Harvest\\n     *  events can be tracked externally by indexing agents.\\n     * @return True if the strategy is actively managing a position.\\n     */\\n    function isActive() public view returns (bool) {\\n        return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;\\n    }\\n\\n    /**\\n     * Perform any Strategy unwinding or other calls necessary to capture the\\n     * \\\"free return\\\" this Strategy has generated since the last time its core\\n     * position(s) were adjusted. Examples include unwrapping extra rewards.\\n     * This call is only used during \\\"normal operation\\\" of a Strategy, and\\n     * should be optimized to minimize losses as much as possible.\\n     *\\n     * This method returns any realized profits and/or realized losses\\n     * incurred, and should return the total amounts of profits/losses/debt\\n     * payments (in `want` tokens) for the Vault's accounting (e.g.\\n     * `want.balanceOf(this) >= _debtPayment + _profit - _loss`).\\n     *\\n     * `_debtOutstanding` will be 0 if the Strategy is not past the configured\\n     * debt limit, otherwise its value will be how far past the debt limit\\n     * the Strategy is. The Strategy's debt limit is configured in the Vault.\\n     *\\n     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\\n     *       It is okay for it to be less than `_debtOutstanding`, as that\\n     *       should only used as a guide for how much is left to pay back.\\n     *       Payments should be made to minimize loss from slippage, debt,\\n     *       withdrawal fees, etc.\\n     *\\n     * See `vault.debtOutstanding()`.\\n     */\\n    function prepareReturn(uint256 _debtOutstanding)\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _debtPayment\\n        );\\n\\n    /**\\n     * Perform any adjustments to the core position(s) of this Strategy given\\n     * what change the Vault made in the \\\"investable capital\\\" available to the\\n     * Strategy. Note that all \\\"free capital\\\" in the Strategy after the report\\n     * was made is available for reinvestment. Also note that this number\\n     * could be 0, and you should handle that scenario accordingly.\\n     *\\n     * See comments regarding `_debtOutstanding` on `prepareReturn()`.\\n     */\\n    function adjustPosition(uint256 _debtOutstanding) internal virtual;\\n\\n    /**\\n     * Liquidate up to `_amountNeeded` of `want` of this strategy's positions,\\n     * irregardless of slippage. Any excess will be re-invested with `adjustPosition()`.\\n     * This function should return the amount of `want` tokens made available by the\\n     * liquidation. If there is a difference between them, `_loss` indicates whether the\\n     * difference is due to a realized loss, or if there is some other sitution at play\\n     * (e.g. locked funds) where the amount made available is less than what is needed.\\n     * This function is used during emergency exit instead of `prepareReturn()` to\\n     * liquidate all of the Strategy's positions back to the Vault.\\n     *\\n     * NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\\n     */\\n    function liquidatePosition(uint256 _amountNeeded)\\n        internal\\n        virtual\\n        returns (uint256 _liquidatedAmount, uint256 _loss);\\n\\n    /**\\n     * @notice\\n     *  Provide a signal to the keeper that `tend()` should be called. The\\n     *  keeper will provide the estimated gas cost that they would pay to call\\n     *  `tend()`, and this function should use that estimate to make a\\n     *  determination if calling it is \\\"worth it\\\" for the keeper. This is not\\n     *  the only consideration into issuing this trigger, for example if the\\n     *  position would be negatively affected if `tend()` is not called\\n     *  shortly, then this can return `true` even if the keeper might be\\n     *  \\\"at a loss\\\" (keepers are always reimbursed by Yearn).\\n     * @dev\\n     *  `callCost` must be priced in terms of `want`.\\n     *\\n     *  This call and `harvestTrigger()` should never return `true` at the same\\n     *  time.\\n     * @param callCost The keeper's estimated cast cost to call `tend()`.\\n     * @return `true` if `tend()` should be called, `false` otherwise.\\n     */\\n    function tendTrigger(uint256 callCost) public view virtual returns (bool) {\\n        // We usually don't need tend, but if there are positions that need\\n        // active maintainence, overriding this function is how you would\\n        // signal for that.\\n        return false;\\n    }\\n\\n    /**\\n     * @notice\\n     *  Adjust the Strategy's position. The purpose of tending isn't to\\n     *  realize gains, but to maximize yield by reinvesting any returns.\\n     *\\n     *  See comments on `adjustPosition()`.\\n     *\\n     *  This may only be called by owner, the strategist, or the keeper.\\n     */\\n    function tend() external onlyKeepers {\\n        // Don't take profits with this call, but adjust for better gains\\n        adjustPosition(vault.debtOutstanding());\\n    }\\n\\n    /**\\n     * @notice\\n     *  Provide a signal to the keeper that `harvest()` should be called. The\\n     *  keeper will provide the estimated gas cost that they would pay to call\\n     *  `harvest()`, and this function should use that estimate to make a\\n     *  determination if calling it is \\\"worth it\\\" for the keeper. This is not\\n     *  the only consideration into issuing this trigger, for example if the\\n     *  position would be negatively affected if `harvest()` is not called\\n     *  shortly, then this can return `true` even if the keeper might be \\\"at a\\n     *  loss\\\" (keepers are always reimbursed by Yearn).\\n     * @dev\\n     *  `callCost` must be priced in terms of `want`.\\n     *\\n     *  This call and `tendTrigger` should never return `true` at the\\n     *  same time.\\n     *\\n     *  See `min/maxReportDelay`, `profitFactor`, `debtThreshold` to adjust the\\n     *  strategist-controlled parameters that will influence whether this call\\n     *  returns `true` or not. These parameters will be used in conjunction\\n     *  with the parameters reported to the Vault (see `params`) to determine\\n     *  if calling `harvest()` is merited.\\n     *\\n     *  It is expected that an external system will check `harvestTrigger()`.\\n     *  This could be a script run off a desktop or cloud bot (e.g.\\n     *  https://github.com/iearn-finance/yearn-vaults/blob/master/scripts/keep.py),\\n     *  or via an integration with the Keep3r network (e.g.\\n     *  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).\\n     * @param callCost The keeper's estimated cast cost to call `harvest()`.\\n     * @return `true` if `harvest()` should be called, `false` otherwise.\\n     */\\n    function harvestTrigger(uint256 callCost) public view virtual returns (bool) {\\n        StrategyParams memory params = vault.strategies(address(this));\\n\\n        // Should not trigger if Strategy is not activated\\n        if (params.activation == 0) return false;\\n\\n        // Should not trigger if we haven't waited long enough since previous harvest\\n        if (block.timestamp.sub(params.lastReport) < minReportDelay) return false;\\n\\n        // Should trigger if hasn't been called in a while\\n        if (block.timestamp.sub(params.lastReport) >= maxReportDelay) return true;\\n\\n        // If some amount is owed, pay it back\\n        // NOTE: Since debt is based on deposits, it makes sense to guard against large\\n        //       changes to the value from triggering a harvest directly through user\\n        //       behavior. This should ensure reasonable resistance to manipulation\\n        //       from user-initiated withdrawals as the outstanding debt fluctuates.\\n        uint256 outstanding = vault.debtOutstanding();\\n        if (outstanding > debtThreshold) return true;\\n\\n        // Check for profits and losses\\n        uint256 total = estimatedTotalAssets();\\n        // Trigger if we have a loss to report\\n        if (total.add(debtThreshold) < params.totalDebt) return true;\\n\\n        uint256 profit = 0;\\n        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\\n\\n        // Otherwise, only trigger if it \\\"makes sense\\\" economically (gas cost\\n        // is <N% of value moved)\\n        uint256 credit = vault.creditAvailable();\\n        return (profitFactor.mul(callCost) < credit.add(profit));\\n    }\\n\\n    /**\\n     * @notice\\n     *  Harvests the Strategy, recognizing any profits or losses and adjusting\\n     *  the Strategy's position.\\n     *\\n     *  In the rare case the Strategy is in emergency shutdown, this will exit\\n     *  the Strategy's position.\\n     *\\n     *  This may only be called by owner, the strategist, or the keeper.\\n     * @dev\\n     *  When `harvest()` is called, the Strategy reports to the Vault (via\\n     *  `vault.report()`), so in some cases `harvest()` must be called in order\\n     *  to take in profits, to borrow newly available funds from the Vault, or\\n     *  otherwise adjust its position. In other cases `harvest()` must be\\n     *  called to report to the Vault on the Strategy's position, especially if\\n     *  any losses have occurred.\\n     */\\n    function harvest() external {\\n        require(msg.sender == address(vault), 'harvest: Call from vault');\\n        uint256 profit = 0;\\n        uint256 loss = 0;\\n        uint256 debtOutstanding = vault.debtOutstanding();\\n        uint256 debtPayment = 0;\\n        if (emergencyExit) {\\n            // Free up as much capital as possible\\n            uint256 totalAssets = estimatedTotalAssets();\\n            // NOTE: use the larger of total assets or debt outstanding to book losses properly\\n            (debtPayment, loss) = liquidatePosition(\\n                totalAssets > debtOutstanding ? totalAssets : debtOutstanding\\n            );\\n            // NOTE: take up any remainder here as profit\\n            if (debtPayment > debtOutstanding) {\\n                profit = debtPayment.sub(debtOutstanding);\\n                debtPayment = debtOutstanding;\\n            }\\n        } else {\\n            // Free up returns for Vault to pull\\n            (profit, loss, debtPayment) = prepareReturn(debtOutstanding);\\n        }\\n\\n        // Allow Vault to take up to the \\\"harvested\\\" balance of this contract,\\n        // which is the amount it has earned since the last time it reported to\\n        // the Vault.\\n        debtOutstanding = vault.report(profit, loss, debtPayment);\\n\\n        // Check if free returns are left, and re-invest them\\n        adjustPosition(debtOutstanding);\\n\\n        emit Harvested(profit, loss, debtPayment, debtOutstanding);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Withdraws `_amountNeeded` to `vault`.\\n     *\\n     *  This may only be called by the Vault.\\n     * @param _amountNeeded How much `want` to withdraw.\\n     * @return _loss Any realized losses\\n     */\\n    function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {\\n        require(msg.sender == address(vault), \\\"!vault\\\");\\n        // Liquidate as much as possible to `want`, up to `_amountNeeded`\\n        uint256 amountFreed;\\n        (amountFreed, _loss) = liquidatePosition(_amountNeeded);\\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\\n        want.safeTransfer(msg.sender, amountFreed);\\n        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\\n    }\\n\\n    /**\\n     * Do anything necessary to prepare this Strategy for migration, such as\\n     * transferring any reserve or LP tokens, CDPs, or other tokens or stores of\\n     * value.\\n     */\\n    function prepareMigration(address _newStrategy) internal virtual;\\n\\n    /**\\n     * @notice\\n     *  Transfers all `want` from this Strategy to `_newStrategy`.\\n     *\\n     *  This may only be called by owner or the Vault.\\n     * @dev\\n     *  The new Strategy's Vault must be the same as this Strategy's Vault.\\n     * @param _newStrategy The Strategy to migrate to.\\n     */\\n    function migrate(address _newStrategy) external {\\n        require(msg.sender == address(vault) || msg.sender == owner());\\n        require(BaseStrategy(_newStrategy).vault() == vault);\\n        prepareMigration(_newStrategy);\\n        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice\\n     *  Activates emergency exit. Once activated, the Strategy will exit its\\n     *  position upon the next harvest, depositing all funds into the Vault as\\n     *  quickly as is reasonable given on-chain conditions.\\n     *\\n     *  This may only be called by owner or the strategist.\\n     * @dev\\n     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\\n     */\\n    function setEmergencyExit() external onlyAuthorized {\\n        emergencyExit = true;\\n        vault.revokeStrategy();\\n\\n        emit EmergencyExitEnabled();\\n    }\\n\\n    /**\\n     * Override this to add all tokens/tokenized positions this contract\\n     * manages on a *persistent* basis (e.g. not just for swapping back to\\n     * want ephemerally).\\n     *\\n     * NOTE: Do *not* include `want`, already included in `sweep` below.\\n     *\\n     * Example:\\n     *\\n     *    function protectedTokens() internal override view returns (address[] memory) {\\n     *      address[] memory protected = new address[](3);\\n     *      protected[0] = tokenA;\\n     *      protected[1] = tokenB;\\n     *      protected[2] = tokenC;\\n     *      return protected;\\n     *    }\\n     */\\n    function protectedTokens() internal view virtual returns (address[] memory);\\n\\n    /**\\n     * @notice\\n     *  Removes tokens from this Strategy that are not the type of tokens\\n     *  managed by this Strategy. This may be used in case of accidentally\\n     *  sending the wrong kind of token to this Strategy.\\n     *\\n     *  Tokens will be sent to `owner()`.\\n     *\\n     *  This will fail if an attempt is made to sweep `want`, or any tokens\\n     *  that are protected by this Strategy.\\n     *\\n     *  This may only be called by owner.\\n     * @dev\\n     *  Implement `protectedTokens()` to specify any additional tokens that\\n     *  should be protected from sweeping in addition to `want`.\\n     * @param _token The token to transfer out of this vault.\\n     */\\n    function sweep(address _token) external onlyOwner {\\n        require(_token != address(want), \\\"!want\\\");\\n        require(_token != address(vault), \\\"!shares\\\");\\n\\n        address[] memory _protectedTokens = protectedTokens();\\n        for (uint256 i; i < _protectedTokens.length; i++)\\n            require(_token != _protectedTokens[i], \\\"!protected\\\");\\n\\n        IERC20(_token).safeTransfer(owner(), IERC20(_token).balanceOf(address(this)));\\n    }\\n}\\n\\nabstract contract BaseStrategyInitializable is BaseStrategy {\\n    event Cloned(address indexed clone);\\n\\n    constructor(address _vault) public BaseStrategy(_vault) {}\\n\\n    function initialize(\\n        address _vault,\\n        address _strategist,\\n        address _rewards,\\n        address _keeper\\n    ) external virtual {\\n        _initialize(_vault, _strategist, _rewards, _keeper);\\n    }\\n\\n    function clone(address _vault) external returns (address) {\\n        return this.clone(_vault, msg.sender, msg.sender, msg.sender);\\n    }\\n\\n    function clone(\\n        address _vault,\\n        address _strategist,\\n        address _rewards,\\n        address _keeper\\n    ) external returns (address newStrategy) {\\n        // Copied from https://github.com/optionality/clone-factory/blob/master/contracts/CloneFactory.sol\\n        bytes20 addressBytes = bytes20(address(this));\\n\\n        assembly {\\n            // EIP-1167 bytecode\\n            let clone_code := mload(0x40)\\n            mstore(clone_code, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(clone_code, 0x14), addressBytes)\\n            mstore(\\n                add(clone_code, 0x28),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n            newStrategy := create(0, clone_code, 0x37)\\n        }\\n\\n        BaseStrategyInitializable(newStrategy).initialize(_vault, _strategist, _rewards, _keeper);\\n\\n        emit Cloned(newStrategy);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/interfaces/Aave/IAToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\\nimport {IInitializableAToken} from './IInitializableAToken.sol';\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\n\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param from The address performing the mint\\n   * @param value The amount being\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Mint(address indexed from, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Mints `amount` aTokens to `user`\\n   * @param user The address receiving the minted tokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function mint(\\n    address user,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted after aTokens are burned\\n   * @param from The owner of the aTokens, getting them burned\\n   * @param target The address that will receive the underlying\\n   * @param value The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param from The user whose tokens are being transferred\\n   * @param to The recipient\\n   * @param value The amount being transferred\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n   * @param user The owner of the aTokens, getting them burned\\n   * @param receiverOfUnderlying The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  function burn(\\n    address user,\\n    address receiverOfUnderlying,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @dev Mints aTokens to the reserve treasury\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   */\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n   * @param from The address getting liquidated, current owner of the aTokens\\n   * @param to The recipient\\n   * @param value The amount of tokens getting transferred\\n   **/\\n  function transferOnLiquidation(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external;\\n\\n  /**\\n   * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n   * assets in borrow(), withdraw() and flashLoan()\\n   * @param user The recipient of the underlying\\n   * @param amount The amount getting transferred\\n   * @return The amount transferred\\n   **/\\n  function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n  /**\\n   * @dev Invoked to execute actions on the aToken side after a repayment.\\n   * @param user The user executing the repayment\\n   * @param amount The amount getting repaid\\n   **/\\n  function handleRepayment(address user, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the address of the incentives controller contract\\n   **/\\n  function getIncentivesController() external view returns (IAaveIncentivesController);\\n\\n  /**\\n   * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\"\r\n    },\r\n    \"./contracts/interfaces/Aave/IScaledBalanceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\ninterface IScaledBalanceToken {\\n    /**\\n     * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n     * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n     * @param user The user whose balance is calculated\\n     * @return The scaled balance of the user\\n     **/\\n    function scaledBalanceOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaled balance of the user and the scaled total supply.\\n     * @param user The address of the user\\n     * @return The scaled balance of the user\\n     * @return The scaled balance and the scaled total supply\\n     **/\\n    function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n    /**\\n     * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n     * @return The scaled total supply\\n     **/\\n    function scaledTotalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"./contracts/interfaces/Aave/IInitializableAToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\nimport {ILendingPool} from './ILendingPool.sol';\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\n\\n/**\\n * @title IInitializableAToken\\n * @notice Interface for the initialize function on AToken\\n * @author Aave\\n **/\\ninterface IInitializableAToken {\\n  /**\\n   * @dev Emitted when an aToken is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated lending pool\\n   * @param treasury The address of the treasury\\n   * @param incentivesController The address of the incentives controller for this aToken\\n   * @param aTokenDecimals the decimals of the underlying\\n   * @param aTokenName the name of the aToken\\n   * @param aTokenSymbol the symbol of the aToken\\n   * @param params A set of encoded parameters for additional initialization\\n   **/\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address treasury,\\n    address incentivesController,\\n    uint8 aTokenDecimals,\\n    string aTokenName,\\n    string aTokenSymbol,\\n    bytes params\\n  );\\n\\n  /**\\n   * @dev Initializes the aToken\\n   * @param pool The address of the lending pool where this aToken will be used\\n   * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @param incentivesController The smart contract managing potential incentives distribution\\n   * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n   * @param aTokenName The name of the aToken\\n   * @param aTokenSymbol The symbol of the aToken\\n   */\\n  function initialize(\\n    ILendingPool pool,\\n    address treasury,\\n    address underlyingAsset,\\n    IAaveIncentivesController incentivesController,\\n    uint8 aTokenDecimals,\\n    string calldata aTokenName,\\n    string calldata aTokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\"\r\n    },\r\n    \"./contracts/interfaces/Aave/ILendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../../libraries/Aave/DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n    /**\\n     * @dev Emitted on deposit()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the deposit\\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n     * @param amount The amount deposited\\n     * @param referral The referral code used\\n     **/\\n    event Deposit(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referral);\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlyng asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to Address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     **/\\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed\\n     * @param referral The referral code used\\n     **/\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint256 borrowRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     **/\\n    event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     **/\\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     **/\\n    event FlashLoan(\\n        address indexed target,\\n        address indexed initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        uint256 premium,\\n        uint16 referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when the pause is triggered.\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emitted when the pause is lifted.\\n     */\\n    event Unpaused();\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n     * LendingPoolCollateral manager using a DELEGATECALL\\n     * This allows to have the events in the generated ABI for LendingPool.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n     * gets added to the LendingPool ABI\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The new liquidity rate\\n     * @param stableBorrowRate The new stable borrow rate\\n     * @param variableBorrowRate The new variable borrow rate\\n     * @param liquidityIndex The new liquidity index\\n     * @param variableBorrowIndex The new variable borrow index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to deposit\\n     * @param amount The amount to be deposited\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     **/\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     **/\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n    /**\\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n     *        borrowed at a stable rate and depositors are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     **/\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n     * @param asset The address of the underlying asset deposited\\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n     **/\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n    /**\\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n     * For further details please visit https://developers.aave.com\\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts amounts being flash-borrowed\\n     * @param modes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralETH the total collateral in ETH of the user\\n     * @return totalDebtETH the total debt in ETH of the user\\n     * @return availableBorrowsETH the borrowing power left of the user\\n     * @return currentLiquidationThreshold the liquidation threshold of the user\\n     * @return ltv the loan to value of the user\\n     * @return healthFactor the current health factor of the user\\n     **/\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function initReserve(\\n        address reserve,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n    function setConfiguration(address reserve, uint256 configuration) external;\\n\\n    /**\\n     * @dev Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     **/\\n    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     **/\\n    function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the normalized income normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized variable debt per unit of asset\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromAfter,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    function getReservesList() external view returns (address[] memory);\\n\\n    function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n    function setPause(bool val) external;\\n\\n    function paused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"./contracts/interfaces/Aave/ILendingPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n    event MarketIdSet(string newMarketId);\\n    event LendingPoolUpdated(address indexed newAddress);\\n    event ConfigurationAdminUpdated(address indexed newAddress);\\n    event EmergencyAdminUpdated(address indexed newAddress);\\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n    event PriceOracleUpdated(address indexed newAddress);\\n    event LendingRateOracleUpdated(address indexed newAddress);\\n    event ProxyCreated(bytes32 id, address indexed newAddress);\\n    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n    function getMarketId() external view returns (string memory);\\n\\n    function setMarketId(string calldata marketId) external;\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function getLendingPool() external view returns (address);\\n\\n    function setLendingPoolImpl(address pool) external;\\n\\n    function getLendingPoolConfigurator() external view returns (address);\\n\\n    function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n    function getLendingPoolCollateralManager() external view returns (address);\\n\\n    function setLendingPoolCollateralManager(address manager) external;\\n\\n    function getPoolAdmin() external view returns (address);\\n\\n    function setPoolAdmin(address admin) external;\\n\\n    function getEmergencyAdmin() external view returns (address);\\n\\n    function setEmergencyAdmin(address admin) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address priceOracle) external;\\n\\n    function getLendingRateOracle() external view returns (address);\\n\\n    function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\"\r\n    },\r\n    \"./contracts/libraries/Aave/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\nlibrary DataTypes {\\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        uint40 lastUpdateTimestamp;\\n        //tokens addresses\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint8 id;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: Reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60-63: reserved\\n        //bit 64-79: reserve factor\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        uint256 data;\\n    }\\n\\n    enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\\n\"\r\n    },\r\n    \"./contracts/interfaces/Aave/IAaveIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IAaveIncentivesController {\\n  /**\\n   * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n  function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @return the unclaimed user rewards\\n   */\\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n  /**\\n  * @dev for backward compatibility with previous implementation of the Incentives controller\\n  */\\n  function REWARD_TOKEN() external view returns (address);\\n\\n  function getDistributionEnd() external view returns (uint256);\\n\\n  function getAssetData(address asset) external view returns (uint256, uint256, uint256);\\n}\"\r\n    },\r\n    \"./contracts/interfaces/Aave/IStakedAave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IStakedAave {\\n\\n    function stake(address to, uint256 amount) external;\\n\\n    function redeem(address to, uint256 amount) external;\\n\\n    function cooldown() external;\\n\\n    function claimRewards(address to, uint256 amount) external;\\n\\n    function getTotalRewardsBalance(address) external view returns (uint256);\\n\\n    function COOLDOWN_SECONDS() external view returns (uint256);\\n\\n    function stakersCooldowns(address) external view returns (uint256);\\n\\n    function UNSTAKE_WINDOW() external view returns (uint256);\\n}\"\r\n    },\r\n    \"./contracts/interfaces/Aave/IProtocolDataProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\n\\ninterface IProtocolDataProvider {\\n    struct TokenData {\\n        string symbol;\\n        address tokenAddress;\\n    }\\n\\n    function ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProvider);\\n\\n    function getAllReservesTokens() external view returns (TokenData[] memory);\\n\\n    function getAllATokens() external view returns (TokenData[] memory);\\n\\n    function getReserveConfigurationData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n\\n    function getUserReserveData(address asset, address user)\\n        external\\n        view\\n        returns (\\n            uint256 currentATokenBalance,\\n            uint256 currentStableDebt,\\n            uint256 currentVariableDebt,\\n            uint256 principalStableDebt,\\n            uint256 scaledVariableDebt,\\n            uint256 stableBorrowRate,\\n            uint256 liquidityRate,\\n            uint40 stableRateLastUpdated,\\n            bool usageAsCollateralEnabled\\n        );\\n\\n    function getReserveTokensAddresses(address asset)\\n        external\\n        view\\n        returns (\\n            address aTokenAddress,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        );\\n}\\n\"\r\n    },\r\n    \"./contracts/interfaces/Aave/IReserveInterestRateStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @title IReserveInterestRateStrategyInterface interface\\n * @dev Interface for the calculation of the interest rates\\n * @author Aave\\n */\\ninterface IReserveInterestRateStrategy {\\n    function baseVariableBorrowRate() external view returns (uint256);\\n\\n    function getMaxVariableBorrowRate() external view returns (uint256);\\n\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 utilizationRate,\\n        uint256 totalStableDebt,\\n        uint256 totalVariableDebt,\\n        uint256 averageStableBorrowRate,\\n        uint256 reserveFactor\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liquidityRate,\\n            uint256 stableBorrowRate,\\n            uint256 variableBorrowRate\\n        );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/GenericLender/IGenericLender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPLv3\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\ninterface IGenericLender {\\n    function lenderName() external view returns (string memory);\\n\\n    function nav() external view returns (uint256);\\n\\n    function strategy() external view returns (address);\\n\\n    function apr() external view returns (uint256);\\n\\n    function weightedApr() external view returns (uint256);\\n\\n    function withdraw(uint256 amount) external returns (uint256);\\n\\n    function emergencyWithdraw(uint256 amount) external;\\n\\n    function deposit() external;\\n\\n    function withdrawAll() external returns (bool);\\n\\n    function hasAssets() external view returns (bool);\\n\\n    function aprAfterDeposit(uint256 amount) external view returns (uint256);\\n\\n    function setDust(uint256 _dust) external;\\n\\n    function sweep(address _token) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract IAToken\",\"name\":\"_aToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isIncentivised\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"clone\",\"type\":\"address\"}],\"name\":\"Cloned\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AAVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"}],\"name\":\"_incentivesRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aToken\",\"outputs\":[{\"internalType\":\"contract IAToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extraAmount\",\"type\":\"uint256\"}],\"name\":\"aprAfterDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"contract IAToken\",\"name\":\"_aToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isIncentivised\",\"type\":\"bool\"}],\"name\":\"cloneAaveLender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newLender\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dust\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callcost\",\"type\":\"uint256\"}],\"name\":\"harvestTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAToken\",\"name\":\"_aToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isIncentivised\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isIncentivised\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keep3r\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lenderName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nav\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolDataProvider\",\"outputs\":[{\"internalType\":\"contract IProtocolDataProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUni\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dust\",\"type\":\"uint256\"}],\"name\":\"setDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isIncentivised\",\"type\":\"bool\"}],\"name\":\"setIsIncentivised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keep3r\",\"type\":\"address\"}],\"name\":\"setKeep3r\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stkAave\",\"outputs\":[{\"internalType\":\"contract IStakedAave\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingBalanceStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract VaultAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightedApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GenericAave","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ea5a6c635b19a4c27bdb2bca3d868bc6e2d3208c0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000028171bca77440897b824ca71d1c56cac55b68a3000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000046144414900000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0103746f67599b80acbe6e73ecee22a28d5e7b2b8ce87208bf255d0d11a38562"}]}