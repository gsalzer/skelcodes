{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/contract/RocketBase.sol\": {\r\n      \"content\": \"/**\\n  *       .\\n  *      / \\\\\\n  *     |.'.|\\n  *     |'.'|\\n  *   ,'|   |`.\\n  *  |,-'-|-'-.|\\n  *   __|_| |         _        _      _____           _\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\n  * +---------------------------------------------------+\\n  * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\n  * +---------------------------------------------------+\\n  *\\n  *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\n  *  be community-owned, decentralised, and trustless.\\n  *\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\n  *\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\n  *\\n  */\\n\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"../interface/RocketStorageInterface.sol\\\";\\n\\n/// @title Base settings / modifiers for each contract in Rocket Pool\\n/// @author David Rugendyke\\n\\nabstract contract RocketBase {\\n\\n    // Calculate using this as the base\\n    uint256 constant calcBase = 1 ether;\\n\\n    // Version of the contract\\n    uint8 public version;\\n\\n    // The main storage contract where primary persistant storage is maintained\\n    RocketStorageInterface rocketStorage = RocketStorageInterface(0);\\n\\n\\n    /*** Modifiers **********************************************************/\\n\\n    /**\\n    * @dev Throws if called by any sender that doesn't match a Rocket Pool network contract\\n    */\\n    modifier onlyLatestNetworkContract() {\\n        require(getBool(keccak256(abi.encodePacked(\\\"contract.exists\\\", msg.sender))), \\\"Invalid or outdated network contract\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that doesn't match one of the supplied contract or is the latest version of that contract\\n    */\\n    modifier onlyLatestContract(string memory _contractName, address _contractAddress) {\\n        require(_contractAddress == getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName))), \\\"Invalid or outdated contract\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a registered node\\n    */\\n    modifier onlyRegisteredNode(address _nodeAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"node.exists\\\", _nodeAddress))), \\\"Invalid node\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a trusted node DAO member\\n    */\\n    modifier onlyTrustedNode(address _nodeAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"dao.trustednodes.\\\", \\\"member\\\", _nodeAddress))), \\\"Invalid trusted node\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a registered minipool\\n    */\\n    modifier onlyRegisteredMinipool(address _minipoolAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"minipool.exists\\\", _minipoolAddress))), \\\"Invalid minipool\\\");\\n        _;\\n    }\\n    \\n\\n    /**\\n    * @dev Throws if called by any account other than a guardian account (temporary account allowed access to settings before DAO is fully enabled)\\n    */\\n    modifier onlyGuardian() {\\n        require(msg.sender == rocketStorage.getGuardian(), \\\"Account is not a temporary guardian\\\");\\n        _;\\n    }\\n\\n\\n\\n\\n    /*** Methods **********************************************************/\\n\\n    /// @dev Set the main Rocket Storage address\\n    constructor(RocketStorageInterface _rocketStorageAddress) {\\n        // Update the contract address\\n        rocketStorage = RocketStorageInterface(_rocketStorageAddress);\\n    }\\n\\n\\n    /// @dev Get the address of a network contract by name\\n    function getContractAddress(string memory _contractName) internal view returns (address) {\\n        // Get the current contract address\\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName)));\\n        // Check it\\n        require(contractAddress != address(0x0), \\\"Contract not found\\\");\\n        // Return\\n        return contractAddress;\\n    }\\n\\n\\n    /// @dev Get the address of a network contract by name (returns address(0x0) instead of reverting if contract does not exist)\\n    function getContractAddressUnsafe(string memory _contractName) internal view returns (address) {\\n        // Get the current contract address\\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName)));\\n        // Return\\n        return contractAddress;\\n    }\\n\\n\\n    /// @dev Get the name of a network contract by address\\n    function getContractName(address _contractAddress) internal view returns (string memory) {\\n        // Get the contract name\\n        string memory contractName = getString(keccak256(abi.encodePacked(\\\"contract.name\\\", _contractAddress)));\\n        // Check it\\n        require(bytes(contractName).length > 0, \\\"Contract not found\\\");\\n        // Return\\n        return contractName;\\n    }\\n\\n    /// @dev Get revert error message from a .call method\\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n\\n\\n    /*** Rocket Storage Methods ****************************************/\\n\\n    // Note: Unused helpers have been removed to keep contract sizes down\\n\\n    /// @dev Storage get methods\\n    function getAddress(bytes32 _key) internal view returns (address) { return rocketStorage.getAddress(_key); }\\n    function getUint(bytes32 _key) internal view returns (uint) { return rocketStorage.getUint(_key); }\\n    function getString(bytes32 _key) internal view returns (string memory) { return rocketStorage.getString(_key); }\\n    function getBytes(bytes32 _key) internal view returns (bytes memory) { return rocketStorage.getBytes(_key); }\\n    function getBool(bytes32 _key) internal view returns (bool) { return rocketStorage.getBool(_key); }\\n    function getInt(bytes32 _key) internal view returns (int) { return rocketStorage.getInt(_key); }\\n    function getBytes32(bytes32 _key) internal view returns (bytes32) { return rocketStorage.getBytes32(_key); }\\n\\n    /// @dev Storage set methods\\n    function setAddress(bytes32 _key, address _value) internal { rocketStorage.setAddress(_key, _value); }\\n    function setUint(bytes32 _key, uint _value) internal { rocketStorage.setUint(_key, _value); }\\n    function setString(bytes32 _key, string memory _value) internal { rocketStorage.setString(_key, _value); }\\n    function setBytes(bytes32 _key, bytes memory _value) internal { rocketStorage.setBytes(_key, _value); }\\n    function setBool(bytes32 _key, bool _value) internal { rocketStorage.setBool(_key, _value); }\\n    function setInt(bytes32 _key, int _value) internal { rocketStorage.setInt(_key, _value); }\\n    function setBytes32(bytes32 _key, bytes32 _value) internal { rocketStorage.setBytes32(_key, _value); }\\n\\n    /// @dev Storage delete methods\\n    function deleteAddress(bytes32 _key) internal { rocketStorage.deleteAddress(_key); }\\n    function deleteUint(bytes32 _key) internal { rocketStorage.deleteUint(_key); }\\n    function deleteString(bytes32 _key) internal { rocketStorage.deleteString(_key); }\\n    function deleteBytes(bytes32 _key) internal { rocketStorage.deleteBytes(_key); }\\n    function deleteBool(bytes32 _key) internal { rocketStorage.deleteBool(_key); }\\n    function deleteInt(bytes32 _key) internal { rocketStorage.deleteInt(_key); }\\n    function deleteBytes32(bytes32 _key) internal { rocketStorage.deleteBytes32(_key); }\\n\\n    /// @dev Storage arithmetic methods\\n    function addUint(bytes32 _key, uint256 _amount) internal { rocketStorage.addUint(_key, _amount); }\\n    function subUint(bytes32 _key, uint256 _amount) internal { rocketStorage.subUint(_key, _amount); }\\n}\\n\"\r\n    },\r\n    \"/contracts/contract/dao/node/RocketDAONodeTrustedProposals.sol\": {\r\n      \"content\": \"/**\\n  *       .\\n  *      / \\\\\\n  *     |.'.|\\n  *     |'.'|\\n  *   ,'|   |`.\\n  *  |,-'-|-'-.|\\n  *   __|_| |         _        _      _____           _\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\n  * +---------------------------------------------------+\\n  * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\n  * +---------------------------------------------------+\\n  *\\n  *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\n  *  be community-owned, decentralised, and trustless.\\n  *\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\n  *\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\n  *\\n  */\\n\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"../../RocketBase.sol\\\";\\nimport \\\"../../../interface/dao/node/RocketDAONodeTrustedInterface.sol\\\";\\nimport \\\"../../../interface/dao/node/RocketDAONodeTrustedProposalsInterface.sol\\\";\\nimport \\\"../../../interface/dao/node/RocketDAONodeTrustedActionsInterface.sol\\\";\\nimport \\\"../../../interface/dao/node/RocketDAONodeTrustedUpgradeInterface.sol\\\";\\nimport \\\"../../../interface/dao/node/settings/RocketDAONodeTrustedSettingsInterface.sol\\\";\\nimport \\\"../../../interface/dao/node/settings/RocketDAONodeTrustedSettingsProposalsInterface.sol\\\";\\nimport \\\"../../../interface/dao/RocketDAOProposalInterface.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\n// The Trusted Node DAO Proposals \\ncontract RocketDAONodeTrustedProposals is RocketBase, RocketDAONodeTrustedProposalsInterface {  \\n\\n    using SafeMath for uint;\\n\\n    // The namespace for any data stored in the trusted node DAO (do not change)\\n    string constant daoNameSpace = \\\"dao.trustednodes.\\\";\\n\\n    // Only allow certain contracts to execute methods\\n    modifier onlyExecutingContracts() {\\n        // Methods are either executed by bootstrapping methods in rocketDAONodeTrusted or by people executing passed proposals in rocketDAOProposal\\n        require(msg.sender == getContractAddress(\\\"rocketDAONodeTrusted\\\") || msg.sender == getContractAddress(\\\"rocketDAOProposal\\\"), \\\"Sender is not permitted to access executing methods\\\");\\n        _;\\n    }\\n\\n    // Construct\\n    constructor(RocketStorageInterface _rocketStorageAddress) RocketBase(_rocketStorageAddress) {\\n        // Version\\n        version = 1;\\n    }\\n\\n        \\n    /*** Proposals **********************/\\n\\n    // Create a DAO proposal with calldata, if successful will be added to a queue where it can be executed\\n    // A general message can be passed by the proposer along with the calldata payload that can be executed if the proposal passes\\n    function propose(string memory _proposalMessage, bytes memory _payload) override external onlyTrustedNode(msg.sender) onlyLatestContract(\\\"rocketDAONodeTrustedProposals\\\", address(this)) returns (uint256) {\\n        // Load contracts\\n        RocketDAOProposalInterface daoProposal = RocketDAOProposalInterface(getContractAddress(\\\"rocketDAOProposal\\\"));\\n        RocketDAONodeTrustedInterface daoNodeTrusted = RocketDAONodeTrustedInterface(getContractAddress(\\\"rocketDAONodeTrusted\\\"));\\n        RocketDAONodeTrustedSettingsProposalsInterface rocketDAONodeTrustedSettingsProposals = RocketDAONodeTrustedSettingsProposalsInterface(getContractAddress(\\\"rocketDAONodeTrustedSettingsProposals\\\"));\\n        // Check this user can make a proposal now\\n        require(daoNodeTrusted.getMemberLastProposalTime(msg.sender).add(rocketDAONodeTrustedSettingsProposals.getCooldownTime()) <= block.timestamp, \\\"Member has not waited long enough to make another proposal\\\");\\n        // Require the min amount of members are in to make a proposal\\n        require(daoNodeTrusted.getMemberCount() >= daoNodeTrusted.getMemberMinRequired(), \\\"Min member count not met to allow proposals to be added\\\");\\n        // Record the last time this user made a proposal\\n        setUint(keccak256(abi.encodePacked(daoNameSpace, \\\"member.proposal.lasttime\\\", msg.sender)), block.timestamp);\\n        // Create the proposal\\n        return daoProposal.add(msg.sender, \\\"rocketDAONodeTrustedProposals\\\", _proposalMessage, block.timestamp.add(rocketDAONodeTrustedSettingsProposals.getVoteDelayTime()), rocketDAONodeTrustedSettingsProposals.getVoteTime(), rocketDAONodeTrustedSettingsProposals.getExecuteTime(), daoNodeTrusted.getMemberQuorumVotesRequired(), _payload);\\n    }\\n\\n    // Vote on a proposal\\n    function vote(uint256 _proposalID, bool _support) override external onlyTrustedNode(msg.sender) onlyLatestContract(\\\"rocketDAONodeTrustedProposals\\\", address(this)) {\\n        // Load contracts\\n        RocketDAOProposalInterface daoProposal = RocketDAOProposalInterface(getContractAddress(\\\"rocketDAOProposal\\\"));\\n        RocketDAONodeTrustedInterface daoNodeTrusted = RocketDAONodeTrustedInterface(getContractAddress(\\\"rocketDAONodeTrusted\\\"));\\n        // Did they join after this proposal was created? If so, they can't vote or it'll throw off the set proposalVotesRequired \\n        require(daoNodeTrusted.getMemberJoinedTime(msg.sender) < daoProposal.getCreated(_proposalID), \\\"Member cannot vote on proposal created before they became a member\\\");\\n        // Vote now, one vote per trusted node member\\n        daoProposal.vote(msg.sender, 1 ether, _proposalID, _support);\\n    }\\n    \\n    // Cancel a proposal \\n    function cancel(uint256 _proposalID) override external onlyTrustedNode(msg.sender) onlyLatestContract(\\\"rocketDAONodeTrustedProposals\\\", address(this)) {\\n        // Load contracts\\n        RocketDAOProposalInterface daoProposal = RocketDAOProposalInterface(getContractAddress(\\\"rocketDAOProposal\\\"));\\n        // Cancel now, will succeed if it is the original proposer\\n        daoProposal.cancel(msg.sender, _proposalID);\\n    }\\n\\n    // Execute a proposal \\n    function execute(uint256 _proposalID) override external onlyLatestContract(\\\"rocketDAONodeTrustedProposals\\\", address(this)) {\\n        // Load contracts\\n        RocketDAOProposalInterface daoProposal = RocketDAOProposalInterface(getContractAddress(\\\"rocketDAOProposal\\\"));\\n        // Execute now\\n        daoProposal.execute(_proposalID);\\n    }\\n\\n\\n\\n    /*** Proposal - Members **********************/\\n\\n    // A new DAO member being invited, can only be done via a proposal or in bootstrap mode\\n    // Provide an ID that indicates who is running the trusted node and the address of the registered node that they wish to propose joining the dao\\n    function proposalInvite(string memory _id, string memory _url, address _nodeAddress) override external onlyExecutingContracts onlyRegisteredNode(_nodeAddress) {\\n        // Their proposal executed, record the block\\n        setUint(keccak256(abi.encodePacked(daoNameSpace, \\\"member.executed.time\\\", \\\"invited\\\", _nodeAddress)), block.timestamp);\\n        // Ok all good, lets get their invitation and member data setup\\n        // They are initially only invited to join, so their membership isn't set as true until they accept it in RocketDAONodeTrustedActions\\n        _memberInit(_id, _url, _nodeAddress);\\n    }\\n\\n\\n    // A current member proposes leaving the trusted node DAO, when successful they will be allowed to collect their RPL bond\\n    function proposalLeave(address _nodeAddress) override external onlyExecutingContracts onlyTrustedNode(_nodeAddress) {\\n        // Load contracts\\n        RocketDAONodeTrustedInterface daoNodeTrusted = RocketDAONodeTrustedInterface(getContractAddress(\\\"rocketDAONodeTrusted\\\"));\\n        // Check this wouldn't dip below the min required trusted nodes (also checked when the node has a successful proposal and attempts to exit)\\n        require(daoNodeTrusted.getMemberCount() > daoNodeTrusted.getMemberMinRequired(), \\\"Member count will fall below min required\\\");\\n        // Their proposal to leave has been accepted, record the block\\n        setUint(keccak256(abi.encodePacked(daoNameSpace, \\\"member.executed.time\\\", \\\"leave\\\", _nodeAddress)), block.timestamp);\\n    }\\n\\n\\n    // Propose to kick a current member from the DAO with an optional RPL bond fine\\n    function proposalKick(address _nodeAddress, uint256 _rplFine) override external onlyExecutingContracts onlyTrustedNode(_nodeAddress) {\\n        // Load contracts\\n        RocketDAONodeTrustedInterface daoNodeTrusted = RocketDAONodeTrustedInterface(getContractAddress(\\\"rocketDAONodeTrusted\\\"));\\n        RocketDAONodeTrustedActionsInterface daoActionsContract = RocketDAONodeTrustedActionsInterface(getContractAddress(\\\"rocketDAONodeTrustedActions\\\"));\\n        // How much is their RPL bond?\\n        uint256 rplBondAmount = daoNodeTrusted.getMemberRPLBondAmount(_nodeAddress);\\n        // Check fine amount can be covered\\n        require(_rplFine <= rplBondAmount, \\\"RPL Fine must be lower or equal to the RPL bond amount of the node being kicked\\\");\\n        // Set their bond amount minus the fine\\n        setUint(keccak256(abi.encodePacked(daoNameSpace, \\\"member.bond.rpl\\\", _nodeAddress)), rplBondAmount.sub(_rplFine));\\n        // Kick them now\\n        daoActionsContract.actionKick(_nodeAddress, _rplFine);\\n    }\\n\\n\\n    /*** Proposal - Settings ***************/\\n\\n    // Change one of the current uint256 settings of the DAO\\n    function proposalSettingUint(string memory _settingContractName, string memory _settingPath, uint256 _value) override external onlyExecutingContracts() {\\n        // Load contracts\\n        RocketDAONodeTrustedSettingsInterface rocketDAONodeTrustedSettings = RocketDAONodeTrustedSettingsInterface(getContractAddress(_settingContractName));\\n        // Lets update\\n        rocketDAONodeTrustedSettings.setSettingUint(_settingPath, _value);\\n    }\\n\\n    // Change one of the current bool settings of the DAO\\n    function proposalSettingBool(string memory _settingContractName, string memory _settingPath, bool _value) override external onlyExecutingContracts() {\\n        // Load contracts\\n        RocketDAONodeTrustedSettingsInterface rocketDAONodeTrustedSettings = RocketDAONodeTrustedSettingsInterface(getContractAddress(_settingContractName));\\n        // Lets update\\n        rocketDAONodeTrustedSettings.setSettingBool(_settingPath, _value);\\n    }\\n\\n\\n    /*** Proposal - Upgrades ***************/\\n\\n    // Upgrade contracts or ABI's if the DAO agrees\\n    function proposalUpgrade(string memory _type, string memory _name, string memory _contractAbi, address _contractAddress) override external onlyExecutingContracts() {\\n        // Load contracts\\n        RocketDAONodeTrustedUpgradeInterface rocketDAONodeTrustedUpgradeInterface = RocketDAONodeTrustedUpgradeInterface(getContractAddress(\\\"rocketDAONodeTrustedUpgrade\\\"));\\n        // Lets update\\n        rocketDAONodeTrustedUpgradeInterface.upgrade(_type, _name, _contractAbi, _contractAddress);\\n    }\\n\\n\\n    /*** Internal ***************/\\n\\n    // Add a new potential members data, they are not official members yet, just propsective\\n    function _memberInit(string memory _id, string memory _url, address _nodeAddress) private onlyRegisteredNode(_nodeAddress) {\\n        // Load contracts\\n        RocketDAONodeTrustedInterface daoNodeTrusted = RocketDAONodeTrustedInterface(getContractAddress(\\\"rocketDAONodeTrusted\\\"));\\n        // Check current node status\\n        require(!daoNodeTrusted.getMemberIsValid(_nodeAddress), \\\"This node is already part of the trusted node DAO\\\");\\n        // Verify the ID is min 3 chars\\n        require(bytes(_id).length >= 3, \\\"The ID for this new member must be at least 3 characters\\\");\\n        // Check URL length\\n        require(bytes(_url).length >= 6, \\\"The URL for this new member must be at least 6 characters\\\");\\n        // Member initial data, not official until the bool is flagged as true\\n        setBool(keccak256(abi.encodePacked(daoNameSpace, \\\"member\\\", _nodeAddress)), false);\\n        setAddress(keccak256(abi.encodePacked(daoNameSpace, \\\"member.address\\\", _nodeAddress)), _nodeAddress);\\n        setString(keccak256(abi.encodePacked(daoNameSpace, \\\"member.id\\\", _nodeAddress)), _id);\\n        setString(keccak256(abi.encodePacked(daoNameSpace, \\\"member.url\\\", _nodeAddress)), _url);\\n        setUint(keccak256(abi.encodePacked(daoNameSpace, \\\"member.bond.rpl\\\", _nodeAddress)), 0);\\n        setUint(keccak256(abi.encodePacked(daoNameSpace, \\\"member.joined.time\\\", _nodeAddress)), 0);\\n    }\\n        \\n\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/RocketStorageInterface.sol\": {\r\n      \"content\": \"/**\\n  *       .\\n  *      / \\\\\\n  *     |.'.|\\n  *     |'.'|\\n  *   ,'|   |`.\\n  *  |,-'-|-'-.|\\n  *   __|_| |         _        _      _____           _\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\n  * +---------------------------------------------------+\\n  * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\n  * +---------------------------------------------------+\\n  *\\n  *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\n  *  be community-owned, decentralised, and trustless.\\n  *\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\n  *\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\n  *\\n  */\\n\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketStorageInterface {\\n\\n    // Deploy status\\n    function getDeployedStatus() external view returns (bool);\\n\\n    // Guardian\\n    function getGuardian() external view returns(address);\\n    function setGuardian(address _newAddress) external;\\n    function confirmGuardian() external;\\n\\n    // Getters\\n    function getAddress(bytes32 _key) external view returns (address);\\n    function getUint(bytes32 _key) external view returns (uint);\\n    function getString(bytes32 _key) external view returns (string memory);\\n    function getBytes(bytes32 _key) external view returns (bytes memory);\\n    function getBool(bytes32 _key) external view returns (bool);\\n    function getInt(bytes32 _key) external view returns (int);\\n    function getBytes32(bytes32 _key) external view returns (bytes32);\\n\\n    // Setters\\n    function setAddress(bytes32 _key, address _value) external;\\n    function setUint(bytes32 _key, uint _value) external;\\n    function setString(bytes32 _key, string calldata _value) external;\\n    function setBytes(bytes32 _key, bytes calldata _value) external;\\n    function setBool(bytes32 _key, bool _value) external;\\n    function setInt(bytes32 _key, int _value) external;\\n    function setBytes32(bytes32 _key, bytes32 _value) external;\\n\\n    // Deleters\\n    function deleteAddress(bytes32 _key) external;\\n    function deleteUint(bytes32 _key) external;\\n    function deleteString(bytes32 _key) external;\\n    function deleteBytes(bytes32 _key) external;\\n    function deleteBool(bytes32 _key) external;\\n    function deleteInt(bytes32 _key) external;\\n    function deleteBytes32(bytes32 _key) external;\\n\\n    // Arithmetic\\n    function addUint(bytes32 _key, uint256 _amount) external;\\n    function subUint(bytes32 _key, uint256 _amount) external;\\n\\n    // Protected storage\\n    function getNodeWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function getNodePendingWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function setWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress, bool _confirm) external;\\n    function confirmWithdrawalAddress(address _nodeAddress) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/dao/RocketDAOProposalInterface.sol\": {\r\n      \"content\": \"/**\\n  *       .\\n  *      / \\\\\\n  *     |.'.|\\n  *     |'.'|\\n  *   ,'|   |`.\\n  *  |,-'-|-'-.|\\n  *   __|_| |         _        _      _____           _\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\n  * +---------------------------------------------------+\\n  * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\n  * +---------------------------------------------------+\\n  *\\n  *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\n  *  be community-owned, decentralised, and trustless.\\n  *\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\n  *\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\n  *\\n  */\\n\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketDAOProposalInterface {\\n\\n    // Possible states that a proposal may be in\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Cancelled,\\n        Defeated,\\n        Succeeded,\\n        Expired,\\n        Executed\\n    }\\n\\n    function getTotal() external view returns (uint256);\\n    function getDAO(uint256 _proposalID) external view returns (string memory);\\n    function getProposer(uint256 _proposalID) external view returns (address);\\n    function getMessage(uint256 _proposalID) external view returns (string memory);\\n    function getStart(uint256 _proposalID) external view returns (uint256);\\n    function getEnd(uint256 _proposalID) external view returns (uint256);\\n    function getExpires(uint256 _proposalID) external view returns (uint256);\\n    function getCreated(uint256 _proposalID) external view returns (uint256);\\n    function getVotesFor(uint256 _proposalID) external view returns (uint256);\\n    function getVotesAgainst(uint256 _proposalID) external view returns (uint256);\\n    function getVotesRequired(uint256 _proposalID) external view returns (uint256);\\n    function getCancelled(uint256 _proposalID) external view returns (bool);\\n    function getExecuted(uint256 _proposalID) external view returns (bool);\\n    function getPayload(uint256 _proposalID) external view returns (bytes memory);\\n    function getReceiptHasVoted(uint256 _proposalID, address _nodeAddress) external view returns (bool);\\n    function getReceiptSupported(uint256 _proposalID, address _nodeAddress) external view returns (bool);\\n    function getState(uint256 _proposalID) external view returns (ProposalState);\\n    function add(address _member, string memory _dao, string memory _message, uint256 _startBlock, uint256 _durationBlocks, uint256 _expiresBlocks, uint256 _votesRequired, bytes memory _payload) external returns (uint256);\\n    function vote(address _member, uint256 _votes, uint256 _proposalID, bool _support) external; \\n    function cancel(address _member, uint256 _proposalID) external;\\n    function execute(uint256 _proposalID) external;\\n    \\n}\\n\"\r\n    },\r\n    \"/contracts/interface/dao/node/RocketDAONodeTrustedActionsInterface.sol\": {\r\n      \"content\": \"/**\\n  *       .\\n  *      / \\\\\\n  *     |.'.|\\n  *     |'.'|\\n  *   ,'|   |`.\\n  *  |,-'-|-'-.|\\n  *   __|_| |         _        _      _____           _\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\n  * +---------------------------------------------------+\\n  * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\n  * +---------------------------------------------------+\\n  *\\n  *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\n  *  be community-owned, decentralised, and trustless.\\n  *\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\n  *\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\n  *\\n  */\\n\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketDAONodeTrustedActionsInterface {\\n    function actionJoin() external;\\n    function actionJoinRequired(address _nodeAddress) external;\\n    function actionLeave(address _rplBondRefundAddress) external;\\n    function actionKick(address _nodeAddress, uint256 _rplFine) external;\\n    function actionChallengeMake(address _nodeAddress) external payable;\\n    function actionChallengeDecide(address _nodeAddress) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/dao/node/RocketDAONodeTrustedInterface.sol\": {\r\n      \"content\": \"/**\\n  *       .\\n  *      / \\\\\\n  *     |.'.|\\n  *     |'.'|\\n  *   ,'|   |`.\\n  *  |,-'-|-'-.|\\n  *   __|_| |         _        _      _____           _\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\n  * +---------------------------------------------------+\\n  * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\n  * +---------------------------------------------------+\\n  *\\n  *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\n  *  be community-owned, decentralised, and trustless.\\n  *\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\n  *\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\n  *\\n  */\\n\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketDAONodeTrustedInterface {\\n    function getBootstrapModeDisabled() external view returns (bool);\\n    function getMemberQuorumVotesRequired() external view returns (uint256);\\n    function getMemberAt(uint256 _index) external view returns (address);\\n    function getMemberCount() external view returns (uint256);\\n    function getMemberMinRequired() external view returns (uint256);\\n    function getMemberIsValid(address _nodeAddress) external view returns (bool);\\n    function getMemberLastProposalTime(address _nodeAddress) external view returns (uint256);\\n    function getMemberID(address _nodeAddress) external view returns (string memory);\\n    function getMemberUrl(address _nodeAddress) external view returns (string memory);\\n    function getMemberJoinedTime(address _nodeAddress) external view returns (uint256);\\n    function getMemberProposalExecutedTime(string memory _proposalType, address _nodeAddress) external view returns (uint256);\\n    function getMemberRPLBondAmount(address _nodeAddress) external view returns (uint256);\\n    function getMemberIsChallenged(address _nodeAddress) external view returns (bool);\\n    function getMemberUnbondedValidatorCount(address _nodeAddress) external view returns (uint256);\\n    function incrementMemberUnbondedValidatorCount(address _nodeAddress) external;\\n    function decrementMemberUnbondedValidatorCount(address _nodeAddress) external;\\n    function bootstrapMember(string memory _id, string memory _url, address _nodeAddress) external;\\n    function bootstrapSettingUint(string memory _settingContractName, string memory _settingPath, uint256 _value) external;\\n    function bootstrapSettingBool(string memory _settingContractName, string memory _settingPath, bool _value) external;\\n    function bootstrapUpgrade(string memory _type, string memory _name, string memory _contractAbi, address _contractAddress) external;\\n    function bootstrapDisable(bool _confirmDisableBootstrapMode) external;\\n    function memberJoinRequired(string memory _id, string memory _url) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/dao/node/RocketDAONodeTrustedProposalsInterface.sol\": {\r\n      \"content\": \"/**\\n  *       .\\n  *      / \\\\\\n  *     |.'.|\\n  *     |'.'|\\n  *   ,'|   |`.\\n  *  |,-'-|-'-.|\\n  *   __|_| |         _        _      _____           _\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\n  * +---------------------------------------------------+\\n  * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\n  * +---------------------------------------------------+\\n  *\\n  *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\n  *  be community-owned, decentralised, and trustless.\\n  *\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\n  *\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\n  *\\n  */\\n\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketDAONodeTrustedProposalsInterface {\\n    function propose(string memory _proposalMessage, bytes memory _payload) external returns (uint256);\\n    function vote(uint256 _proposalID, bool _support) external;\\n    function cancel(uint256 _proposalID) external;\\n    function execute(uint256 _proposalID) external;\\n    function proposalInvite(string memory _id, string memory _url, address _nodeAddress) external;\\n    function proposalLeave(address _nodeAddress) external;\\n    function proposalKick(address _nodeAddress, uint256 _rplFine) external;\\n    function proposalSettingUint(string memory _settingContractName, string memory _settingPath, uint256 _value) external;\\n    function proposalSettingBool(string memory _settingContractName, string memory _settingPath, bool _value) external;\\n    function proposalUpgrade(string memory _type, string memory _name, string memory _contractAbi, address _contractAddress) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/dao/node/RocketDAONodeTrustedUpgradeInterface.sol\": {\r\n      \"content\": \"/**\\n  *       .\\n  *      / \\\\\\n  *     |.'.|\\n  *     |'.'|\\n  *   ,'|   |`.\\n  *  |,-'-|-'-.|\\n  *   __|_| |         _        _      _____           _\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\n  * +---------------------------------------------------+\\n  * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\n  * +---------------------------------------------------+\\n  *\\n  *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\n  *  be community-owned, decentralised, and trustless.\\n  *\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\n  *\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\n  *\\n  */\\n\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketDAONodeTrustedUpgradeInterface {\\n    function upgrade(string memory _type, string memory _name, string memory _contractAbi, address _contractAddress) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/dao/node/settings/RocketDAONodeTrustedSettingsInterface.sol\": {\r\n      \"content\": \"/**\\n  *       .\\n  *      / \\\\\\n  *     |.'.|\\n  *     |'.'|\\n  *   ,'|   |`.\\n  *  |,-'-|-'-.|\\n  *   __|_| |         _        _      _____           _\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\n  * +---------------------------------------------------+\\n  * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\n  * +---------------------------------------------------+\\n  *\\n  *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\n  *  be community-owned, decentralised, and trustless.\\n  *\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\n  *\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\n  *\\n  */\\n\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketDAONodeTrustedSettingsInterface {\\n    function getSettingUint(string memory _settingPath) external view returns (uint256);\\n    function setSettingUint(string memory _settingPath, uint256 _value) external;\\n    function getSettingBool(string memory _settingPath) external view returns (bool);\\n    function setSettingBool(string memory _settingPath, bool _value) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/dao/node/settings/RocketDAONodeTrustedSettingsProposalsInterface.sol\": {\r\n      \"content\": \"/**\\n  *       .\\n  *      / \\\\\\n  *     |.'.|\\n  *     |'.'|\\n  *   ,'|   |`.\\n  *  |,-'-|-'-.|\\n  *   __|_| |         _        _      _____           _\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\n  * +---------------------------------------------------+\\n  * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\n  * +---------------------------------------------------+\\n  *\\n  *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\n  *  be community-owned, decentralised, and trustless.\\n  *\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\n  *\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\n  *\\n  */\\n\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketDAONodeTrustedSettingsProposalsInterface {\\n    function getCooldownTime() external view returns(uint256);\\n    function getVoteTime() external view returns(uint256);\\n    function getVoteDelayTime() external view returns(uint256);\\n    function getExecuteTime() external view returns(uint256);\\n    function getActionTime() external view returns(uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 15000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract RocketStorageInterface\",\"name\":\"_rocketStorageAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"}],\"name\":\"proposalInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rplFine\",\"type\":\"uint256\"}],\"name\":\"proposalKick\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"}],\"name\":\"proposalLeave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_settingContractName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_settingPath\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"proposalSettingBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_settingContractName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_settingPath\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"proposalSettingUint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contractAbi\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"proposalUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_proposalMessage\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_support\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RocketDAONodeTrustedProposals","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"15000","ConstructorArguments":"0000000000000000000000001d8f8f00cfa6758d7be78336684788fb0ee0fa46","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}