{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\n  library SafeMath {\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n  \r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n  \r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n  \r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n  }\r\n\r\n\r\n  contract Authorization {\r\n    address public owner;\r\n    bool public paused;\r\n    mapping(address => bool) public blackListedAddresses;\r\n    mapping(address => bool) public minterAddresses;\r\n  \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event Pause();\r\n    event Unpause();\r\n    event Blacklist(address indexed blackListed);\r\n    event Whitelist(address indexed whiteListed);\r\n    event MinterAdded(address indexed minter);\r\n    event MinterRemoved(address indexed minter);\r\n  \r\n    modifier onlyOwner() {\r\n      require(msg.sender == owner, \"Only Owner Can Call This Function\");\r\n      _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n      require(!paused, \"Contract Is Paused\");\r\n      _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n      require(paused, \"Contract Is Not Paused\");\r\n      _;\r\n    }\r\n    \r\n    modifier onlyMinter() {\r\n      require(minterAddresses[msg.sender] == true, \"Only Minter Can Call This Function\");\r\n      _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      require(newOwner != address(0), \"New Address Must Not Be 0x\");\r\n      emit OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n    }\r\n    \r\n    function addMinter(address minter) onlyOwner whenNotPaused public {\r\n        require(minterAddresses[minter] != true, \"Address Is Already Minter\");\r\n        minterAddresses[minter] = true;\r\n        emit MinterAdded(minter);\r\n    }\r\n    \r\n    function removeMinter(address minter) onlyOwner whenNotPaused public {\r\n        require(minterAddresses[minter] != false, \"Address Is Not Minter\");\r\n        minterAddresses[minter] = false;\r\n        emit MinterRemoved(minter);\r\n    }\r\n    \r\n    function isMinter(address minter) public view returns (bool success) {\r\n        return minterAddresses[minter];\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function blackListAddress(address _address) public onlyOwner {\r\n        require(blackListedAddresses[_address] != true, \"Address Is Already BlackListed\");\r\n        blackListedAddresses[_address] = true;\r\n        emit Blacklist(_address);\r\n    }\r\n\r\n    function whiteListAddress(address _address) public onlyOwner {\r\n        require(blackListedAddresses[_address] == true, \"Address Is Not BlackListed\");\r\n        blackListedAddresses[_address] = false;\r\n        emit Whitelist(_address);\r\n    }\r\n  }\r\n\r\n\r\n  contract QYUtility is Authorization {\r\n    using SafeMath for uint;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint public decimals;\r\n    uint public _totalSupply;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n    event IncreaseApproval(address indexed _owner, address indexed _spender, uint _oldvalue, uint _newvalue);\r\n    event DecreaseApproval(address indexed _owner, address indexed _spender, uint _oldvalue, uint _newvalue);\r\n    event Burn(address indexed _owner, uint _oldsupply, uint _newsupply);\r\n    event Mint(address indexed _owner, uint _oldsupply, uint _newsupply);\r\n    \r\n    constructor(){\r\n        name = \"QYUtility\";\r\n        symbol= \"QYU\";\r\n        decimals = 18;\r\n        _totalSupply = _totalSupply.add(200000000000000000000000000);\r\n        balances[msg.sender] = balances[msg.sender].add(_totalSupply);\r\n        \r\n        owner = msg.sender;\r\n        paused = false;\r\n        \r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint totalsupply) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint balance){\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public whenNotPaused returns (bool success){\r\n        require(blackListedAddresses[msg.sender] != true, \"Sender Address Is BlackListed\");\r\n        require(balances[msg.sender] >= _value, \"Sender Balance Is Low\");\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused returns (bool success){\r\n        require(blackListedAddresses[msg.sender] != true, \"Sender Address Is BlackListed\");\r\n        require(blackListedAddresses[_from] != true, \"_from Address Is BlackListed\");\r\n        require(balances[_from]>= _value, \"From Balance Is Low\");\r\n        require(allowed[_from][msg.sender] >= _value, \"Allowed Balance To Transfer Is Low\");\r\n        \r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public whenNotPaused returns (bool success){\r\n        require(blackListedAddresses[msg.sender] != true, \"Sender Address Is BlackListed\");\r\n        require(blackListedAddresses[_spender] != true, \"_spender Address Is BlackListed\");\r\n        \r\n        allowed[msg.sender][_spender] = _value;\r\n        \r\n        emit Approval(msg.sender, _spender, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining){\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function increaseApproval(address _spender, uint _value) public whenNotPaused returns (bool success){\r\n        require(blackListedAddresses[msg.sender] != true, \"Sender Address Is BlackListed\");\r\n        require(blackListedAddresses[_spender] != true, \"_spender Address Is BlackListed\");\r\n        \r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_value);\r\n        \r\n        emit DecreaseApproval(msg.sender, _spender, allowed[msg.sender][_spender].sub(_value), allowed[msg.sender][_spender]);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function decreaseApproval(address _spender, uint _value) public whenNotPaused returns (bool success){\r\n        require(blackListedAddresses[msg.sender] != true, \"Sender Address Is BlackListed\");\r\n        require(blackListedAddresses[_spender] != true, \"_spender Address Is BlackListed\");\r\n        require(allowed[msg.sender][_spender].sub(_value) >= 0, \"Allowed Balance To Transfer Is Low Than _value\");\r\n        \r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].sub(_value);\r\n        \r\n        emit DecreaseApproval(msg.sender, _spender, allowed[msg.sender][_spender].add(_value), allowed[msg.sender][_spender]);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function burn(uint _value) public whenNotPaused returns (bool success){\r\n        require(balances[msg.sender] >= _value, \"Sender Balance Is Low\");\r\n        require(blackListedAddresses[msg.sender] != true, \"Sender Address Is BlackListed\");\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        \r\n        emit Burn(msg.sender, _totalSupply.add(_value), _totalSupply);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function mint(address _to, uint _value) public whenNotPaused onlyMinter returns (bool success){\r\n        balances[_to] = balances[_to].add(_value);\r\n        _totalSupply = _totalSupply.add(_value);\r\n        \r\n        emit Mint(_to, _totalSupply.sub(_value), _totalSupply);\r\n        \r\n        return true;\r\n    }\r\n    \r\n  }","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blackListed\",\"type\":\"address\"}],\"name\":\"Blacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldsupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newsupply\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldvalue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newvalue\",\"type\":\"uint256\"}],\"name\":\"DecreaseApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldvalue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newvalue\",\"type\":\"uint256\"}],\"name\":\"IncreaseApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldsupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newsupply\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whiteListed\",\"type\":\"address\"}],\"name\":\"Whitelist\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"blackListAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackListedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minterAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalsupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"whiteListAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"QYUtility","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2c642c2f0b4d2a5015ff87b92a8f06f2a34e13a00cb573d41cf8c25f28de7015"}]}