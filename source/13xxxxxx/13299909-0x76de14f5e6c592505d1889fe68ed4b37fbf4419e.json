{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/0xerc1155/interfaces/IERC1155TokenReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev ERC-1155 interface for accepting safe transfers.\\n */\\ninterface IERC1155TokenReceiver {\\n  /**\\n   * @notice Handle the receipt of a single ERC1155 token type\\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\\n   * This function MAY throw to revert and reject the transfer\\n   * Return of other amount than the magic value MUST result in the transaction being reverted\\n   * Note: The token contract address is always the message sender\\n   * @param _operator  The address which called the `safeTransferFrom` function\\n   * @param _from      The address which previously owned the token\\n   * @param _id        The id of the token being transferred\\n   * @param _amount    The amount of tokens being transferred\\n   * @param _data      Additional data with no specified format\\n   * @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n   */\\n  function onERC1155Received(\\n    address _operator,\\n    address _from,\\n    uint256 _id,\\n    uint256 _amount,\\n    bytes calldata _data\\n  ) external returns (bytes4);\\n\\n  /**\\n   * @notice Handle the receipt of multiple ERC1155 token types\\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\\n   * This function MAY throw to revert and reject the transfer\\n   * Return of other amount than the magic value WILL result in the transaction being reverted\\n   * Note: The token contract address is always the message sender\\n   * @param _operator  The address which called the `safeBatchTransferFrom` function\\n   * @param _from      The address which previously owned the token\\n   * @param _ids       An array containing ids of each token being transferred\\n   * @param _amounts   An array containing amounts of each token being transferred\\n   * @param _data      Additional data with no specified format\\n   * @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n   */\\n  function onERC1155BatchReceived(\\n    address _operator,\\n    address _from,\\n    uint256[] calldata _ids,\\n    uint256[] calldata _amounts,\\n    bytes calldata _data\\n  ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/tokens/ERC1155/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '../../interfaces/IERC1155TokenReceiver.sol';\\nimport '../../utils/ERC165.sol';\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC165, IERC1155TokenReceiver {\\n  function onERC1155Received(\\n    address,\\n    address,\\n    uint256,\\n    uint256,\\n    bytes memory\\n  ) public virtual override returns (bytes4) {\\n    return this.onERC1155Received.selector;\\n  }\\n\\n  function onERC1155BatchReceived(\\n    address,\\n    address,\\n    uint256[] memory,\\n    uint256[] memory,\\n    bytes memory\\n  ) public virtual override returns (bytes4) {\\n    return this.onERC1155BatchReceived.selector;\\n  }\\n\\n  function supportsInterface(bytes4 _interfaceID)\\n    public\\n    pure\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    if (_interfaceID == type(IERC1155TokenReceiver).interfaceId) {\\n      return true;\\n    }\\n    return super.supportsInterface(_interfaceID);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/utils/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\nabstract contract ERC165 {\\n  /**\\n   * @notice Query if a contract implements an interface\\n   * @param _interfaceID The interface identifier, as specified in ERC-165\\n   * @return `true` if the contract implements `_interfaceID`\\n   */\\n  function supportsInterface(bytes4 _interfaceID)\\n    public\\n    pure\\n    virtual\\n    returns (bool)\\n  {\\n    return _interfaceID == this.supportsInterface.selector;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/WOWSCryptofolio.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2020-2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport '../../0xerc1155/tokens/ERC1155/ERC1155Holder.sol';\\n\\nimport './interfaces/IWOWSCryptofolio.sol';\\n\\ncontract WOWSCryptofolio is IWOWSCryptofolio, ERC1155Holder {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  // The sftHolder contract\\n  address private immutable _sftContract;\\n\\n  // The cfolioItemHandler\\n  address public override handler;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Modifier\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  modifier onlyFromSftContract() {\\n    require(msg.sender == address(_sftContract), 'CF: Only sftContract');\\n    _;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Initialization\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  constructor(address sftContract) {\\n    _sftContract = sftContract;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {IWOWSCryptofolio}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IWOWSCryptofolio-setHandler}.\\n   */\\n  function setHandler(address newHandler)\\n    external\\n    override\\n    onlyFromSftContract\\n  {\\n    handler = newHandler;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {IERC1155TokenReceiver} via {ERC1155Holder}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IERC1155TokenReceiver-onERC1155Received}\\n   */\\n  function onERC1155Received(\\n    address operator,\\n    address from,\\n    uint256 tokenId,\\n    uint256 amount,\\n    bytes calldata data\\n  ) public override onlyFromSftContract returns (bytes4) {\\n    // Call ancestor\\n    return super.onERC1155Received(operator, from, tokenId, amount, data);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155TokenReceiver-onERC1155BatchReceived}\\n   */\\n  function onERC1155BatchReceived(\\n    address operator,\\n    address from,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts,\\n    bytes calldata data\\n  ) public override onlyFromSftContract returns (bytes4) {\\n    // Call ancestor\\n    return\\n      super.onERC1155BatchReceived(operator, from, tokenIds, amounts, data);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/interfaces/IWOWSCryptofolio.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/**\\n * @notice Cryptofolio interface\\n */\\ninterface IWOWSCryptofolio {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Getter\\n  //////////////////////////////////////////////////////////////////////////////\\n  /**\\n   * @dev Return the handler (CFIH) of the underlying NFT\\n   */\\n  function handler() external view returns (address);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State modifiers\\n  //////////////////////////////////////////////////////////////////////////////\\n  /**\\n   * @dev Set the handler of the underlying NFT\\n   *\\n   * This function is called during I-NFT setup\\n   *\\n   * @param newHandler The new handler of the underlying NFT,\\n   */\\n  function setHandler(address newHandler) external;\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sftContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"handler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newHandler\",\"type\":\"address\"}],\"name\":\"setHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"WOWSCryptofolio","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000baa7051c139eec1763a39a0570b7c566e14e92f0","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":""}]}