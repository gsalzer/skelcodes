{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/HighStreetNftPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title HighStreet Nft Pool\\n *\\n */\\ncontract HighStreetNftPool is ReentrancyGuard, ERC721Holder {\\n\\n    /**\\n     * @dev Deposit is a key data structure used in staking,\\n     *      it represents a unit of reward with its amount and time interval\\n     */\\n    struct Deposit {\\n        // @dev reward amount\\n        uint256 rewardAmount;\\n        // @dev locking period - from\\n        uint64 lockedFrom;\\n        // @dev locking period - until\\n        uint64 lockedUntil;\\n    }\\n\\n    /// @dev Data structure representing token holder using a pool\\n    struct User {\\n        // @dev Total staked NFT amount\\n        uint256 tokenAmount;\\n        // @dev Total reward amount\\n        uint256 rewardAmount;\\n        // @dev Auxiliary variable for yield calculation\\n        uint256 subYieldRewards;\\n        // @dev An array of holder's nft\\n        uint16[] list;\\n        // @dev An array of holder's rewards\\n        Deposit[] deposits;\\n    }\\n\\n    /// @dev Link to HIGH STREET ERC20 Token instance\\n    address public immutable HIGH;\\n\\n    /// @dev Token holder storage, maps token holder address to their data record\\n    mapping(address => User) public users;\\n\\n    /// @dev Link to the pool token instance, here is the Duck NFT \\n    address public immutable poolToken;\\n\\n    /// @dev Block number of the last yield distribution event\\n    uint256 public lastYieldDistribution;\\n\\n    /// @dev Used to calculate yield rewards\\n    uint256 public yieldRewardsPerToken;\\n\\n    /// @dev Used to calculate yield rewards, tracking the token amount in the pool\\n    uint256 public usersLockingAmount;\\n\\n    /// @dev HIGH/block determines yield farming reward\\n    uint256 public highPerBlock;\\n\\n    /**\\n     * @dev End block is the last block when yield farming stops\\n     */\\n    uint256 public endBlock;\\n\\n    /**\\n     * @dev Rewards per token are stored multiplied by 1e24, as integers\\n     */\\n    uint256 internal constant REWARD_PER_TOKEN_MULTIPLIER = 1e24;\\n\\n    /**\\n     * @dev Define the size of each batch, see getDepositsBatch()\\n     */\\n    uint256 public constant DEPOSIT_BATCH_SIZE  = 20;\\n\\n    /**\\n     * @dev Define the size of each batch, see getNftsBatch()\\n     */\\n    uint256 public constant NFT_BATCH_SIZE  = 100;\\n\\n    /**\\n     * @dev Handle the nft id equal to zero\\n     */\\n    uint16 internal constant UINT_16_MAX = type(uint16).max;\\n\\n    /**\\n     * @dev Fired in _stake() and stake()\\n     *\\n     * @param _by an address which performed an operation, usually token holder\\n     * @param _from token holder address, the tokens will be returned to that address\\n     * @param amount amount of tokens staked\\n     * @param nfts an array stored the NFT id that holder staked\\n     */\\n    event Staked(address indexed _by, address indexed _from, uint256 amount, uint256[] nfts);\\n\\n    /**\\n     * @dev Fired in _unstake() and unstake()\\n     *\\n     * @param _by an address which performed an operation, usually token holder\\n     * @param _to an address which received the unstaked tokens, usually token holder\\n     * @param amount amount of tokens unstaked\\n     * @param nfts an array which stored the unstaked NFT id \\n     */\\n    event Unstaked(address indexed _by, address indexed _to, uint256 amount, uint256[] nfts);\\n\\n    /**\\n     * @dev Fired in _unstakeReward() and unstakeReward()\\n     *\\n     * @param _by an address which performed an operation, usually token holder\\n     * @param _to an address which received the unstaked tokens, usually token holder\\n     * @param amount amount of rewards unstaked\\n     */\\n    event UnstakedReward(address indexed _by, address indexed _to, uint256 amount);\\n\\n    /**\\n     * @dev Fired in _sync(), sync() and dependent functions (stake, unstake, etc.)\\n     *\\n     * @param _by an address which performed an operation\\n     * @param yieldRewardsPerToken updated yield rewards per token value\\n     * @param lastYieldDistribution usually, current block number\\n     */\\n    event Synchronized(address indexed _by, uint256 yieldRewardsPerToken, uint256 lastYieldDistribution);\\n\\n    /**\\n     * @dev Fired in _processRewards(), processRewards() and dependent functions (stake, unstake, etc.)\\n     *\\n     * @param _by an address which performed an operation\\n     * @param _to an address which claimed the yield reward\\n     * @param amount amount of yield paid\\n     */\\n    event YieldClaimed(address indexed _by, address indexed _to, uint256 amount);\\n\\n    /**\\n     * @dev construct the pool\\n     *\\n     * @param _high HIGH ERC20 Token address\\n     * @param _poolToken token ERC721 the pool operates on, here is the Duck NFT\\n     * @param _initBlock initial block used to calculate the rewards\\n     *      note: _initBlock can be set to the future effectively meaning _sync() calls will do nothing\\n     * @param _endBlock block number when farming stops and rewards cannot be updated anymore\\n     * @param _highPerBlock HIGH/block value for rewards\\n     */\\n    constructor(\\n        address _high,\\n        address _poolToken,\\n        uint256 _initBlock,\\n        uint256 _endBlock,\\n        uint256 _highPerBlock\\n    ) {\\n        // verify the inputs are set\\n        require(_high != address(0), \\\"high token address not set\\\");\\n        require(_poolToken != address(0), \\\"pool token address not set\\\");\\n        require(_initBlock >= blockNumber(), \\\"Invalid init block\\\");\\n\\n        // save the inputs into internal state variables\\n        HIGH = _high;\\n        poolToken = _poolToken;\\n        highPerBlock = _highPerBlock;\\n\\n        // init the dependent internal state variables\\n        lastYieldDistribution = _initBlock;\\n        endBlock = _endBlock;\\n    }\\n\\n    /**\\n     * @notice Calculates current yield rewards value available for address specified\\n     *\\n     * @param _staker an address to calculate yield rewards value for\\n     * @return calculated yield reward value for the given address\\n     */\\n    function pendingYieldRewards(address _staker) external view returns (uint256) {\\n        // `newYieldRewardsPerToken` will store stored or recalculated value for `yieldRewardsPerToken`\\n        uint256 newYieldRewardsPerToken;\\n\\n        // if smart contract state was not updated recently, `yieldRewardsPerToken` value\\n        // is outdated and we need to recalculate it in order to calculate pending rewards correctly\\n        if (blockNumber() > lastYieldDistribution && usersLockingAmount != 0) {\\n            uint256 multiplier =\\n                blockNumber() > endBlock ? endBlock - lastYieldDistribution : blockNumber() - lastYieldDistribution;\\n            uint256 highRewards = multiplier * highPerBlock;\\n\\n            // recalculated value for `yieldRewardsPerToken`\\n            newYieldRewardsPerToken = rewardToToken(highRewards, usersLockingAmount) + yieldRewardsPerToken;\\n        } else {\\n            // if smart contract state is up to date, we don't recalculate\\n            newYieldRewardsPerToken = yieldRewardsPerToken;\\n        }\\n\\n        // based on the rewards per token value, calculate pending rewards;\\n        User memory user = users[_staker];\\n        uint256 pending = tokenToReward(user.tokenAmount, newYieldRewardsPerToken) - user.subYieldRewards;\\n\\n        return pending;\\n    }\\n\\n    /**\\n     * @notice Returns total staked token balance for the given address\\n     *\\n     * @param _user an address to query balance for\\n     * @return total staked token balance\\n     */\\n    function balanceOf(address _user) external view returns (uint256) {\\n        // read specified user token amount and return\\n        return users[_user].tokenAmount;\\n    }\\n\\n    /**\\n     * @notice Returns the NFT id on the given index and address\\n     *\\n     * @dev See getNftListLength\\n     *\\n     * @param _user an address to query deposit for\\n     * @param _index zero-indexed ID for the address specified\\n     * @return nft id sotred\\n     */\\n    function getNftId(address _user, uint256 _index) external view returns (int32) {\\n        // read deposit at specified index and return\\n        uint16 value = users[_user].list[_index];\\n        if(value == 0) {\\n            return -1;\\n        } else if(value == UINT_16_MAX) {\\n            return  0;\\n        } else {\\n            return int32(uint32(value));\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns number of nfts for the given address. Allows iteration over nfts.\\n     *\\n     * @dev See getNftId\\n     *\\n     * @param _user an address to query deposit length for\\n     * @return number of nfts for the given address\\n     */\\n    function getNftsLength(address _user) external view returns (uint256) {\\n        // read deposits array length and return\\n        return users[_user].list.length;\\n    }\\n\\n    /**\\n     * @notice Returns information on the given deposit for the given address\\n     *\\n     * @dev See getDepositsLength\\n     *\\n     * @param _user an address to query deposit for\\n     * @param _depositId zero-indexed deposit ID for the address specified\\n     * @return deposit info as Deposit structure\\n     */\\n    function getDeposit(address _user, uint256 _depositId) external view returns (Deposit memory) {\\n        // read deposit at specified index and return\\n        return users[_user].deposits[_depositId];\\n    }\\n\\n    /**\\n     * @notice Returns number of deposits for the given address. Allows iteration over deposits.\\n     *\\n     * @dev See getDeposit\\n     *\\n     * @param _user an address to query deposit length for\\n     * @return number of deposits for the given address\\n     */\\n    function getDepositsLength(address _user) external view returns (uint256) {\\n        // read deposits array length and return\\n        return users[_user].deposits.length;\\n    }\\n\\n    /**\\n     * @notice Returns a batch of deposits on the given pageId for the given address\\n     *\\n     * @dev We separate deposits into serveral of pages, and each page have DEPOSIT_BATCH_SIZE of item.\\n     *\\n     * @param _user an address to query deposit for\\n     * @param _pageId zero-indexed page ID for the address specified\\n     * @return deposits info as Deposit structure\\n     */\\n    function getDepositsBatch(address _user, uint256 _pageId) external view returns (Deposit[] memory) {\\n        uint256 pageStart = _pageId * DEPOSIT_BATCH_SIZE;\\n        uint256 pageEnd = (_pageId + 1) * DEPOSIT_BATCH_SIZE;\\n        uint256 pageLength = DEPOSIT_BATCH_SIZE;\\n\\n        if(pageEnd > (users[_user].deposits.length - pageStart)) {\\n            pageEnd = users[_user].deposits.length;\\n            pageLength = pageEnd - pageStart;\\n        }\\n\\n        Deposit[] memory deposits = new Deposit[](pageLength);\\n        for(uint256 i = pageStart; i < pageEnd; ++i) {\\n            deposits[i-pageStart] = users[_user].deposits[i];\\n        }\\n        return deposits;\\n    }\\n\\n    /**\\n     * @notice Returns number of pages for the given address. Allows iteration over deposits.\\n     *\\n     * @dev See getDepositsBatch\\n     *\\n     * @param _user an address to query deposit length for\\n     * @return number of pages for the given address\\n     */\\n    function getDepositsBatchLength(address _user) external view returns (uint256) {\\n        if(users[_user].deposits.length == 0) {\\n            return 0;\\n        }\\n        return 1 + (users[_user].deposits.length - 1) / DEPOSIT_BATCH_SIZE;\\n    }\\n\\n\\n    /**\\n     * @notice Returns a batch of NFT id on the given pageId for the given address\\n     *\\n     * @dev We separate NFT id into serveral of pages, and each page have NFT_BATCH_SIZE of ids.\\n     *\\n     * @param _user an address to query deposit for\\n     * @param _pageId zero-indexed page ID for the address specified\\n     * @return nft ids that holder staked\\n     */\\n    function getNftsBatch(address _user, uint256 _pageId) external view returns (int32[] memory) {\\n        uint256 pageStart = _pageId * NFT_BATCH_SIZE;\\n        uint256 pageEnd = (_pageId + 1) * NFT_BATCH_SIZE;\\n        uint256 pageLength = NFT_BATCH_SIZE;\\n\\n        if(pageEnd > (users[_user].list.length - pageStart)) {\\n            pageEnd = users[_user].list.length;\\n            pageLength = pageEnd - pageStart;\\n        }\\n\\n        int32[] memory list = new int32[](pageLength);\\n        uint16 value;\\n        for(uint256 i = pageStart; i < pageEnd; ++i) {\\n            value = users[_user].list[i];\\n            if(value == 0) {\\n                list[i-pageStart] = -1;\\n            } else if(value == UINT_16_MAX) {\\n                list[i-pageStart] = 0;\\n            } else {\\n                list[i-pageStart] = int32(uint32(value));\\n            }\\n        }\\n        return list;\\n    }\\n\\n    /**\\n     * @notice Returns number of pages for the given address. Allows iteration over nfts.\\n     *\\n     * @dev See getNftsBatch\\n     *\\n     * @param _user an address to query NFT id length for\\n     * @return number of pages for the given address\\n     */\\n    function getNftsBatchLength(address _user) external view returns (uint256) {\\n        if(users[_user].list.length == 0) {\\n            return 0;\\n        }\\n        return 1 + (users[_user].list.length - 1) / NFT_BATCH_SIZE;\\n    }\\n\\n    /**\\n     * @notice Stakes specified NFT ids\\n     *\\n     * @dev Requires amount to stake to be greater than zero\\n     *\\n     * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\\n     *\\n     * @param _nftIds array of NFTs to stake\\n     */\\n    function stake(\\n        uint256[] calldata _nftIds\\n    ) external nonReentrant {\\n        require(!isPoolDisabled(), \\\"Pool disable\\\");\\n        // delegate call to an internal function\\n        _stake(msg.sender, _nftIds);\\n    }\\n\\n    /**\\n     * @notice Unstakes specified amount of NFTs, and pays pending yield rewards\\n     *\\n     * @dev Requires amount to unstake to be greater than zero\\n     *\\n     * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\\n     *\\n     * @param _listIds index ID to unstake from, zero-indexed\\n     */\\n    function unstake(\\n        uint256[] calldata _listIds\\n    ) external nonReentrant {\\n        // delegate call to an internal function\\n        _unstake(msg.sender, _listIds);\\n    }\\n\\n    /**\\n     * @notice Unstakes specified amount of rewards\\n     *\\n     * @dev Requires amount to unstake to be greater than zero\\n     *\\n     * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\\n     *\\n     * @param _depositId deposit ID to unstake from, zero-indexed\\n     */\\n    function unstakeReward(\\n        uint256 _depositId\\n    ) external nonReentrant {\\n        // delegate call to an internal function\\n        User storage user = users[msg.sender];\\n        Deposit memory stakeDeposit = user.deposits[_depositId];\\n        require(now256() > stakeDeposit.lockedUntil, \\\"deposit not yet unlocked\\\");\\n        _unstakeReward(msg.sender, _depositId);\\n    }\\n\\n    /**\\n     * @notice Service function to synchronize pool state with current time\\n     *\\n     * @dev Can be executed by anyone at any time, but has an effect only when\\n     *      at least one block passes between synchronizations\\n     * @dev Executed internally when staking, unstaking, processing rewards in order\\n     *      for calculations to be correct and to reflect state progress of the contract\\n     * @dev When timing conditions are not met (executed too frequently, or after end block\\n     *      ), function doesn't throw and exits silently\\n     */\\n    function sync() external {\\n        // delegate call to an internal function\\n        _sync();\\n    }\\n\\n    /**\\n     * @notice Service function to calculate and pay pending yield rewards to the sender\\n     *\\n     * @dev Can be executed by anyone at any time, but has an effect only when\\n     *      executed by deposit holder and when at least one block passes from the\\n     *      previous reward processing\\n     * @dev Executed internally when staking and unstaking, executes sync() under the hood\\n     *      before making further calculations and payouts\\n     * @dev When timing conditions are not met (executed too frequently, or after end block\\n     *      ), function doesn't throw and exits silently\\n     *\\n     * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\\n     *\\n     */\\n    function processRewards() external virtual nonReentrant {\\n        // delegate call to an internal function\\n        _processRewards(msg.sender, true);\\n    }\\n\\n    /**\\n     * @dev Similar to public pendingYieldRewards, but performs calculations based on\\n     *      current smart contract state only, not taking into account any additional\\n     *      time/blocks which might have passed\\n     *\\n     * @param _staker an address to calculate yield rewards value for\\n     * @return pending calculated yield reward value for the given address\\n     */\\n    function _pendingYieldRewards(address _staker) internal view returns (uint256 pending) {\\n        // read user data structure into memory\\n        User memory user = users[_staker];\\n\\n        // and perform the calculation using the values read\\n        return tokenToReward(user.tokenAmount, yieldRewardsPerToken) - user.subYieldRewards;\\n    }\\n\\n    /**\\n     * @dev Used internally, mostly by children implementations, see stake()\\n     *\\n     * @param _staker an address which stakes tokens and which will receive them back\\n     * @param _nftIds array of NFTs staked\\n     */\\n    function _stake(\\n        address _staker,\\n        uint256[] calldata _nftIds\\n    ) internal virtual {\\n        require(_nftIds.length > 0, \\\"zero amount\\\");\\n        // limit the max nft transfer.\\n        require(_nftIds.length <= 40, \\\"length exceeds limitation\\\");\\n\\n        // update smart contract state\\n        _sync();\\n\\n        // get a link to user data struct, we will write to it later\\n        User storage user = users[_staker];\\n        // process current pending rewards if any\\n        if (user.tokenAmount > 0) {\\n            _processRewards(_staker, false);\\n        }\\n\\n        //looping transfer\\n        uint256 addedAmount;\\n        for(uint i; i < _nftIds.length; ++i) {\\n            IERC721(poolToken).safeTransferFrom(_staker, address(this), _nftIds[i]);\\n            if(_nftIds[i] == 0) {\\n                //if nft id ==0, then set it to uint16 max\\n                user.list.push(UINT_16_MAX);\\n            } else {\\n                user.list.push(uint16(_nftIds[i]));\\n            }\\n            addedAmount = addedAmount + 1;\\n        }\\n\\n        user.tokenAmount += addedAmount;\\n        user.subYieldRewards = tokenToReward(user.tokenAmount, yieldRewardsPerToken);\\n        usersLockingAmount += addedAmount;\\n\\n        // emit an event\\n        emit Staked(msg.sender, _staker, addedAmount, _nftIds);\\n    }\\n\\n    /**\\n     * @dev Used internally, mostly by children implementations, see unstake()\\n     *\\n     * @param _staker an address which unstakes NFT (which has staked some NFTs earlier)\\n     * @param _listIds index ID to unstake from, zero-indexed\\n     */\\n    function _unstake(\\n        address _staker,\\n        uint256[] calldata _listIds\\n    ) internal virtual {\\n        require(_listIds.length > 0, \\\"zero amount\\\");\\n        // limit the max nft transfer.\\n        require(_listIds.length <= 40, \\\"length exceeds limitation\\\");\\n\\n        // get a link to user data struct, we will write to it later\\n        User storage user = users[_staker];\\n        uint16[] memory list = user.list;\\n        uint256 amount = _listIds.length;\\n        require(user.tokenAmount >= amount, \\\"amount exceeds stake\\\");\\n\\n        // update smart contract state\\n        _sync();\\n        // and process current pending rewards if any\\n        _processRewards(_staker, false);\\n\\n        // update user record\\n        user.tokenAmount -= amount;\\n        user.subYieldRewards = tokenToReward(user.tokenAmount, yieldRewardsPerToken);\\n        usersLockingAmount = usersLockingAmount - amount;\\n\\n        uint256 index;\\n        uint256[] memory nfts = new uint256[](_listIds.length);\\n        for(uint i; i < _listIds.length; ++i) {\\n            index = _listIds[i];\\n            if(UINT_16_MAX == list[index]) {\\n                nfts[i] = 0;\\n            } else {\\n                nfts[i] = uint256(list[index]);\\n            }\\n            IERC721(poolToken).safeTransferFrom(address(this), _staker, nfts[i]);\\n            if (user.tokenAmount  != 0) {\\n                delete user.list[index];\\n            }\\n        }\\n\\n        if (user.tokenAmount  == 0) {\\n            delete user.list;\\n        }\\n\\n        // emit an event\\n        emit Unstaked(msg.sender, _staker, amount, nfts);\\n    }\\n\\n    /**\\n     * @dev Used internally, mostly by children implementations, see unstakeReward()\\n     *\\n     * @param _staker an address to withraw the yield reward\\n     * @param _depositId deposit ID to unstake from, zero-indexed\\n     */\\n    function _unstakeReward(\\n        address _staker,\\n        uint256 _depositId\\n    ) internal virtual {\\n\\n        // get a link to user data struct, we will write to it later\\n        User storage user = users[_staker];\\n        // get a link to the corresponding deposit, we may write to it later\\n        Deposit storage stakeDeposit = user.deposits[_depositId];\\n\\n        uint256 amount = stakeDeposit.rewardAmount;\\n\\n        // verify available balance\\n        // if staker address ot deposit doesn't exist this check will fail as well\\n        require(amount >= 0, \\\"amount exceeds stake\\\");\\n\\n        // delete deposit if its depleted\\n        delete user.deposits[_depositId];\\n\\n        // update user record\\n        user.rewardAmount -= amount;\\n\\n        // transfer HIGH tokens as required\\n        SafeERC20.safeTransfer(IERC20(HIGH), _staker, amount);\\n\\n        // emit an event\\n        emit UnstakedReward(msg.sender, _staker, amount);\\n    }\\n\\n    /**\\n     * @dev Used internally, mostly by children implementations, see sync()\\n     *\\n     * @dev Updates smart contract state (`yieldRewardsPerToken`, `lastYieldDistribution`)\\n     */\\n    function _sync() internal virtual {\\n\\n        // check bound conditions and if these are not met -\\n        // exit silently, without emitting an event\\n        if (lastYieldDistribution >= endBlock) {\\n            return;\\n        }\\n        if (blockNumber() <= lastYieldDistribution) {\\n            return;\\n        }\\n        // if locking weight is zero - update only `lastYieldDistribution` and exit\\n        if (usersLockingAmount == 0) {\\n            lastYieldDistribution = blockNumber();\\n            return;\\n        }\\n\\n        // to calculate the reward we need to know how many blocks passed, and reward per block\\n        uint256 currentBlock = blockNumber() > endBlock ? endBlock : blockNumber();\\n        uint256 blocksPassed = currentBlock - lastYieldDistribution;\\n\\n        // calculate the reward\\n        uint256 highReward = blocksPassed * highPerBlock;\\n\\n        // update rewards per weight and `lastYieldDistribution`\\n        yieldRewardsPerToken += rewardToToken(highReward, usersLockingAmount);\\n        lastYieldDistribution = currentBlock;\\n\\n        // emit an event\\n        emit Synchronized(msg.sender, yieldRewardsPerToken, lastYieldDistribution);\\n    }\\n\\n    /**\\n     * @dev Used internally, mostly by children implementations, see processRewards()\\n     *\\n     * @param _staker an address which receives the reward (which has staked some tokens earlier)\\n     * @param _withUpdate flag allowing to disable synchronization (see sync()) if set to false\\n     * @return pendingYield the rewards calculated\\n     */\\n    function _processRewards(\\n        address _staker,\\n        bool _withUpdate\\n    ) internal virtual returns (uint256 pendingYield) {\\n        // update smart contract state if required\\n        if (_withUpdate) {\\n            _sync();\\n        }\\n\\n        // calculate pending yield rewards, this value will be returned\\n        pendingYield = _pendingYieldRewards(_staker);\\n\\n        // if pending yield is zero - just return silently\\n        if (pendingYield == 0) return 0;\\n\\n        // get link to a user data structure, we will write into it later\\n        User storage user = users[_staker];\\n\\n        // create new HIGH deposit\\n        // and save it - push it into deposits array\\n        Deposit memory newDeposit =\\n            Deposit({\\n                rewardAmount: pendingYield,\\n                lockedFrom: uint64(now256()),\\n                lockedUntil: uint64(now256() + 365 days) // staking yield for 1 year\\n            });\\n        user.deposits.push(newDeposit);\\n\\n        // update user record\\n        user.rewardAmount += pendingYield;\\n\\n        // update users's record for `subYieldRewards` if requested\\n        if (_withUpdate) {\\n            user.subYieldRewards = tokenToReward(user.tokenAmount, yieldRewardsPerToken);\\n        }\\n\\n        // emit an event\\n        emit YieldClaimed(msg.sender, _staker, pendingYield);\\n    }\\n\\n    /**\\n     * @dev Converts stake token (not to be mixed with the pool token) to\\n     *      HIGH reward value, applying the 10^24 division on token\\n     *\\n     * @param _token stake token\\n     * @param _rewardPerToken HIGH reward per token\\n     * @return reward value normalized to 10^24\\n     */\\n    function tokenToReward(uint256 _token, uint256 _rewardPerToken) public pure returns (uint256) {\\n        // apply the formula and return\\n        return (_token * _rewardPerToken) / REWARD_PER_TOKEN_MULTIPLIER;\\n    }\\n\\n    /**\\n     * @dev Converts reward HIGH value to stake token (not to be mixed with the pool token),\\n     *      applying the 10^24 multiplication on the reward\\n     *\\n     * @param _reward yield reward\\n     * @param _rewardPerToken staked token amount\\n     * @return reward/token\\n     */\\n    function rewardToToken(uint256 _reward, uint256 _rewardPerToken) public pure returns (uint256) {\\n        // apply the reverse formula and return\\n        return (_reward * REWARD_PER_TOKEN_MULTIPLIER) / _rewardPerToken;\\n    }\\n\\n    /**\\n     * @notice The function to check pool state. pool is considered \\\"disabled\\\"\\n     *      once time reaches its \\\"end block\\\"\\n     *\\n     * @return true if pool is disabled (time has reached end block), false otherwise\\n     */\\n    function isPoolDisabled() public view returns (bool) {\\n        // verify the pool expiration condition and return the result\\n        return blockNumber() >= endBlock;\\n    }\\n\\n    /**\\n     * @dev Testing time-dependent functionality is difficult and the best way of\\n     *      doing it is to block number in helper test smart contracts\\n     *\\n     * @return `block.number` in mainnet, custom values in testnets (if overridden)\\n     */\\n    function blockNumber() public view virtual returns (uint256) {\\n        // return current block number\\n        return block.number;\\n    }\\n\\n    /**\\n     * @dev Testing time-dependent functionality is difficult and the best way of\\n     *      doing it is to time in helper test smart contracts\\n     *\\n     * @return `block.timestamp` in mainnet, custom values in testnets (if overridden)\\n     */\\n    function now256() public view virtual returns (uint256) {\\n        // return current block timestamp\\n        return block.timestamp;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_high\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_highPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nfts\",\"type\":\"uint256[]\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldRewardsPerToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastYieldDistribution\",\"type\":\"uint256\"}],\"name\":\"Synchronized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nfts\",\"type\":\"uint256[]\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"YieldClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPOSIT_BATCH_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HIGH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT_BATCH_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockedFrom\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"}],\"internalType\":\"struct HighStreetNftPool.Deposit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pageId\",\"type\":\"uint256\"}],\"name\":\"getDepositsBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockedFrom\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"}],\"internalType\":\"struct HighStreetNftPool.Deposit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDepositsBatchLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDepositsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getNftId\",\"outputs\":[{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pageId\",\"type\":\"uint256\"}],\"name\":\"getNftsBatch\",\"outputs\":[{\"internalType\":\"int32[]\",\"name\":\"\",\"type\":\"int32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getNftsBatchLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getNftsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPoolDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastYieldDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"now256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"pendingYieldRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerToken\",\"type\":\"uint256\"}],\"name\":\"rewardToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerToken\",\"type\":\"uint256\"}],\"name\":\"tokenToReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_listIds\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"unstakeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subYieldRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usersLockingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldRewardsPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"HighStreetNftPool","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"00000000000000000000000071ab77b7dbb4fa7e017bc15090b216322142028200000000000000000000000078f190efe7b9198b76207f14d90ba96fb782680e0000000000000000000000000000000000000000000000000000000000d434520000000000000000000000000000000000000000000000000000000000d6fd3a0000000000000000000000000000000000000000000000001e6a995acd42d10f","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}