{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Payment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport \\\"./PaymentVerifiable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract PunkMunks is PaymentVerifiable, Ownable {\\n    uint256 tokenSold;\\n\\n    /**\\n     * @dev owner fund: Address that revceive payment \\n     * @dev amdin: Address that can sign for the user to make payment\\n     */\\n    address payable public ownerFund;\\n    address public admin;\\n    uint256 public totalSupply;\\n\\n    //mapping store the tokens that are created\\n    mapping(uint256 => bool) tokens;\\n\\n    /**\\n     * @dev Set address whose owner recieve payments from user\\n     */\\n    function setOwnerFund(address newOwnerFundAddress_) public onlyOwner {\\n        require(newOwnerFundAddress_ != address(0), \\\"Invalid owner fund\\\");\\n        ownerFund = payable(newOwnerFundAddress_);\\n    }\\n\\n    /**\\n     * @notice only owner can set new admin\\n     */\\n    function setAdmin(address newAdmin_) public onlyOwner {\\n        admin = newAdmin_;\\n    }\\n\\n    modifier onlyAuthorizer() {\\n        require(msg.sender == owner() || msg.sender == admin);\\n        _;\\n    }\\n\\n  \\n    constructor() {\\n        ownerFund = payable(msg.sender); //initially set ownerfund to the payment contract creator\\n        admin = msg.sender; //initially set admin to the payment contract creator\\n        totalSupply = 10000; //Gallery only sells 10000 items\\n    }\\n\\n    event PaymentSucceeded(\\n        address indexed buyer,\\n        address ownerFund,\\n        address nftAddress,\\n        uint256[] tokenId,\\n        uint256 price\\n    );\\n\\n    /**\\n     * @dev buyer call this function\\n     */\\n    function makePayment(\\n        bytes memory signature_,\\n        address buyer_,\\n        address nftAddress_,\\n        uint256[] memory tokenId_,\\n        uint256 tokenPrice_\\n    ) public payable {\\n        require(msg.sender == buyer_, \\\"Only Buyer can make payment\\\");\\n\\n        require(\\n            tokenSold + tokenId_.length <= totalSupply,\\n            \\\"Token supply exceeded\\\"\\n        );\\n\\n        require(\\n            msg.value == tokenPrice_,\\n            \\\"Msg value and token price are not matched\\\"\\n        );\\n\\n        // if any token id existed, revert\\n        for (uint256 i = 0; i < tokenId_.length; i++) {\\n            require(!isTokenExisted(tokenId_[i]), \\\"TokenId existed\\\");\\n        }\\n\\n        address signer = verify(signature_, buyer_, nftAddress_, tokenId_, tokenPrice_);\\n        require( //accept payment with signing message from either owner or admin\\n            signer ==  owner() || signer == admin,\\n            \\\"Signer is not admin or owner\\\"\\n        );\\n\\n        ownerFund.transfer(tokenPrice_);\\n        for (uint256 i = 0; i < tokenId_.length; i++) {\\n            tokens[tokenId_[i]] = true;\\n        }\\n\\n        tokenSold += tokenId_.length;\\n\\n        emit PaymentSucceeded(\\n            buyer_,\\n            ownerFund,\\n            nftAddress_,\\n            tokenId_,\\n            tokenPrice_\\n        );\\n    }\\n\\n    /**\\n     * @dev unsold a token incase of error - mannualy\\n     */\\n    function unsoldToken(uint256 tokenId_) public onlyAuthorizer {\\n        require(tokens[tokenId_], \\\"token is not sold yet\\\");\\n        tokens[tokenId_] = false;\\n    }\\n\\n    /**\\n     * @dev Give away case: mark token that are giveawayed from polygon\\n     */\\n    function setSoldToken(uint256[] memory tokenId_) public onlyAuthorizer {\\n        for (uint256 i = 0; i < tokenId_.length; i++) {\\n            tokens[tokenId_[i]] = true;\\n        }\\n    }\\n\\n    function isTokenExisted(uint256 tokenId_) public view returns (bool) {\\n        return tokens[tokenId_];\\n    }\\n}\"\r\n    },\r\n    \"contracts/PaymentVerifiable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/* Make contract verifiable when creating new NFT, and when refunding to a specific user */\\r\\ncontract PaymentVerifiable {\\r\\n    function getMessageHash(\\r\\n        address buyer_,\\r\\n        address nftAddress_,\\r\\n        uint256[] memory tokenId_,\\r\\n        uint256 price_\\r\\n    ) public pure returns (bytes32) {\\r\\n        return\\r\\n            keccak256(abi.encodePacked(buyer_, nftAddress_, tokenId_, price_));\\r\\n    }\\r\\n\\r\\n    function getEthSignedMessageHash(bytes32 messageHash_)\\r\\n        private\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\r\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\r\\n                    messageHash_\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function verify(\\r\\n        bytes memory signature_,\\r\\n        address buyer_,\\r\\n        address nftAddress_,\\r\\n        uint256[] memory tokenId_,\\r\\n        uint256 price_\\r\\n    ) public pure returns (address) {\\r\\n        bytes32 messageHash = getMessageHash(\\r\\n            buyer_,\\r\\n            nftAddress_,\\r\\n            tokenId_,\\r\\n            price_\\r\\n        );\\r\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\r\\n\\r\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(signature_);\\r\\n\\r\\n        return ecrecover(ethSignedMessageHash, v, r, s);\\r\\n    }\\r\\n\\r\\n    function splitSignature(bytes memory sig)\\r\\n        private\\r\\n        pure\\r\\n        returns (\\r\\n            bytes32 r,\\r\\n            bytes32 s,\\r\\n            uint8 v\\r\\n        )\\r\\n    {\\r\\n        require(sig.length == 65, \\\"invalid signature length\\\");\\r\\n\\r\\n        assembly {\\r\\n            /*\\r\\n            First 32 bytes stores the length of the signature\\r\\n\\r\\n            add(sig, 32) = pointer of sig + 32\\r\\n            effectively, skips first 32 bytes of signature\\r\\n\\r\\n            mload(p) loads next 32 bytes starting at the memory address p into memory\\r\\n            */\\r\\n\\r\\n            // first 32 bytes, after the length prefix\\r\\n            r := mload(add(sig, 32))\\r\\n            // second 32 bytes\\r\\n            s := mload(add(sig, 64))\\r\\n            // final byte (first byte of the next 32 bytes)\\r\\n            v := byte(0, mload(add(sig, 96)))\\r\\n        }\\r\\n\\r\\n        // implicitly return (r, s, v)\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PaymentSucceeded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"isTokenExisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature_\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"buyer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice_\",\"type\":\"uint256\"}],\"name\":\"makePayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerFund\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwnerFundAddress_\",\"type\":\"address\"}],\"name\":\"setOwnerFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenId_\",\"type\":\"uint256[]\"}],\"name\":\"setSoldToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"unsoldToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature_\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"buyer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"PunkMunks","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}