{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/external/governance/NoteERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"interfaces/notional/NotionalProxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"../../proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/// @title Note ERC20 Token\\n/// Fork of Compound Comp token at commit hash\\n/// https://github.com/compound-finance/compound-protocol/commit/9bcff34a5c9c76d51e51bcb0ca1139588362ef96\\ncontract NoteERC20 is Initializable, UUPSUpgradeable {\\n    /// @notice EIP-20 token name for this token\\n    string public constant name = \\\"Notional\\\";\\n\\n    /// @notice EIP-20 token symbol for this token\\n    string public constant symbol = \\\"NOTE\\\";\\n\\n    /// @notice EIP-20 token decimals for this token\\n    uint8 public constant decimals = 8;\\n\\n    /// @notice Total number of tokens in circulation (100 million NOTE)\\n    uint256 public constant totalSupply = 100000000e8;\\n\\n    /// @notice Notional router address, not currently used but cannot be\\n    /// removed or this will mess up storage.\\n    NotionalProxy public notionalProxy;\\n\\n    // Allowance amounts on behalf of others\\n    mapping(address => mapping(address => uint96)) internal allowances;\\n\\n    // Official record of token balances for each account\\n    mapping(address => uint96) internal balances;\\n\\n    /// @notice A record of each accounts delegate\\n    mapping(address => address) public delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice Owner address which can upgrade the tokens implementation\\n    address public owner;\\n\\n    /// @notice Emitted when the ownership of the contract is transferred\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /// @notice The standard EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice The standard EIP-20 approval event\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    constructor() initializer {\\n        // Making the constructor also an initializer will lock everyone\\n        // from calling initialize on the implementation contract.\\n    }\\n\\n    /// @notice Initialize note token with initial grants\\n    /// @param initialAccounts initial address to grant tokens to\\n    /// @param initialGrantAmount amount to grant address initially\\n    function initialize(\\n        address[] calldata initialAccounts,\\n        uint96[] calldata initialGrantAmount,\\n        address owner_\\n    ) public initializer {\\n        require(initialGrantAmount.length == initialAccounts.length);\\n\\n        uint96 totalGrants = 0;\\n        for (uint256 i = 0; i < initialGrantAmount.length; i++) {\\n            totalGrants = _add96(totalGrants, initialGrantAmount[i], \\\"\\\");\\n            require(balances[initialAccounts[i]] == 0, \\\"Duplicate account\\\");\\n            balances[initialAccounts[i]] = initialGrantAmount[i];\\n\\n            emit Transfer(address(0), initialAccounts[i], initialGrantAmount[i]);\\n        }\\n\\n        require(totalGrants == totalSupply);\\n        owner = owner_;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /// @dev Transfers ownership of the contract to a new account (`newOwner`).\\n    /// Can only be called by the current owner.\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    /// @dev Only the owner may upgrade the contract\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner { }\\n\\n    /// @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n    /// @param account The address of the account holding the funds\\n    /// @param spender The address of the account spending the funds\\n    /// @return The number of tokens approved\\n    function allowance(address account, address spender) external view returns (uint256) {\\n        return allowances[account][spender];\\n    }\\n\\n    /// @notice Approve `spender` to transfer up to `amount` from `src`\\n    /// @dev This will overwrite the approval amount for `spender`\\n    ///  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n    ///  emit:Approval\\n    /// @param spender The address of the account which may transfer tokens\\n    /// @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n    /// @return Whether or not the approval succeeded\\n    function approve(address spender, uint256 rawAmount) external returns (bool) {\\n        uint96 amount;\\n        if (rawAmount >= type(uint96).max) {\\n            amount = type(uint96).max;\\n        } else {\\n            amount = _safe96(rawAmount, \\\"Note::approve: amount exceeds 96 bits\\\");\\n        }\\n\\n        allowances[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /// @notice Get the number of tokens held by the `account`\\n    /// @param account The address of the account to get the balance of\\n    /// @return The number of tokens held\\n    function balanceOf(address account) external view returns (uint256) {\\n        return balances[account];\\n    }\\n\\n    /// @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n    /// @dev emit:Transfer\\n    /// @param dst The address of the destination account\\n    /// @param rawAmount The number of tokens to transfer\\n    /// @return Whether or not the transfer succeeded\\n    function transfer(address dst, uint256 rawAmount) external returns (bool) {\\n        uint96 amount = _safe96(rawAmount, \\\"Note::transfer: amount exceeds 96 bits\\\");\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /// @notice Transfer `amount` tokens from `src` to `dst`\\n    /// @dev emit:Transfer emit:Approval\\n    /// @param src The address of the source account\\n    /// @param dst The address of the destination account\\n    /// @param rawAmount The number of tokens to transfer\\n    /// @return Whether or not the transfer succeeded\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 rawAmount\\n    ) external returns (bool) {\\n        // Short circuit transfer execution and return true. It may be the case that external\\n        // logic tries to execute a zero transfer but don't emit events here.\\n        if (rawAmount == 0) {\\n            // Emit a zero transfer event for ERC20 token compatibility\\n            emit Transfer(src, dst, 0);\\n            return true;\\n        }\\n\\n        address spender = msg.sender;\\n        uint96 spenderAllowance = allowances[src][spender];\\n        uint96 amount = _safe96(rawAmount, \\\"Note::approve: amount exceeds 96 bits\\\");\\n\\n        if (spender != src) {\\n            uint96 newAllowance =\\n                _sub96(\\n                    spenderAllowance,\\n                    amount,\\n                    \\\"Note::transferFrom: transfer amount exceeds spender allowance\\\"\\n                );\\n            allowances[src][spender] = newAllowance;\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /// @notice Delegate votes from `msg.sender` to `delegatee`\\n    /// @param delegatee The address to delegate votes to\\n    /// @dev emit:DelegatesChanged\\n    function delegate(address delegatee) public {\\n        _delegate(msg.sender, delegatee);\\n    }\\n\\n    /// @notice Delegates votes from signatory to `delegatee`\\n    /// @dev emit:DelegatesChanged\\n    /// @param delegatee The address to delegate votes to\\n    /// @param nonce The contract state required to match the signature\\n    /// @param expiry The time at which to expire the signature\\n    /// @param v The recovery byte of the signature\\n    /// @param r Half of the ECDSA signature pair\\n    /// @param s Half of the ECDSA signature pair\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        require(block.timestamp <= expiry, \\\"Note::delegateBySig: signature expired\\\");\\n        bytes32 domainSeparator =\\n            keccak256(\\n                abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), _getChainId(), address(this))\\n            );\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        // ECDSA will check if address is zero inside\\n        address signatory = ECDSA.recover(digest, v, r, s);\\n        require(nonce == nonces[signatory]++, \\\"Note::delegateBySig: invalid nonce\\\");\\n        _delegate(signatory, delegatee);\\n    }\\n\\n    /// @notice Gets the current votes balance for `account`\\n    /// @param account The address to get votes balance\\n    /// @return The number of current votes for `account`\\n    function getCurrentVotes(address account) external view returns (uint96) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        uint96 currentVotes = nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n        return currentVotes;\\n    }\\n\\n    /// @notice Determine the prior number of votes for an account as of a block number\\n    /// @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n    /// @param account The address of the account to check\\n    /// @param blockNumber The block number to get the vote balance at\\n    /// @return The number of votes the account had as of the given block\\n    function getPriorVotes(address account, uint256 blockNumber) public view returns (uint96) {\\n        require(blockNumber < block.number, \\\"Note::getPriorVotes: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    /// @dev Changes delegates from one address to another\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint96 delegatorBalance = balances[delegator];\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    /// @dev Transfers tokens and inherits the delegate from the destination address\\n    function _transferTokens(\\n        address src,\\n        address dst,\\n        uint96 amount\\n    ) internal {\\n        require(src != address(0), \\\"Note::_transferTokens: cannot transfer from the zero address\\\");\\n        require(dst != address(0), \\\"Note::_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[src] = _sub96(\\n            balances[src],\\n            amount,\\n            \\\"Note::_transferTokens: transfer amount exceeds balance\\\"\\n        );\\n        balances[dst] = _add96(\\n            balances[dst],\\n            amount,\\n            \\\"Note::_transferTokens: transfer amount overflows\\\"\\n        );\\n        emit Transfer(src, dst, amount);\\n\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\n    }\\n\\n    /// @dev Transfers delegates and writes a checkpoint for `getPriorVotes` to use\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint96 amount\\n    ) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint96 srcRepNew =\\n                    _sub96(srcRepOld, amount, \\\"Note::_moveVotes: vote amount underflow\\\");\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint96 dstRepNew =\\n                    _add96(dstRepOld, amount, \\\"Note::_moveVotes: vote amount overflows\\\");\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    /// @dev Writes checkpoints for `getPriorVotes`, this is somewhat inefficient as it uses\\n    /// 20000 gas per transfer of delegated tokens. The goal is prevent voters from borrowing\\n    /// a large number of votes for a short period to vote for or against a proposal. It's unclear\\n    /// if there is a better model than this one here. Using only a single checkpoint means that\\n    /// a delegate could be the victim of a denial of service attack where an attacker continually\\n    /// transfers tokens to them to prevent them from voting.\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint96 oldVotes,\\n        uint96 newVotes\\n    ) internal {\\n        uint32 blockNumber =\\n            _safe32(block.number, \\\"Note::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function _safe32(uint256 n, string memory errorMessage) private pure returns (uint32) {\\n        require(n <= type(uint32).max, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function _safe96(uint256 n, string memory errorMessage) private pure returns (uint96) {\\n        require(n <= type(uint96).max, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function _add96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) private pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function _sub96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) private pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function _getChainId() private pure returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/notional/NotionalProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../../contracts/global/Types.sol\\\";\\nimport \\\"./nTokenERC20.sol\\\";\\nimport \\\"./nERC1155Interface.sol\\\";\\nimport \\\"./NotionalGovernance.sol\\\";\\nimport \\\"./NotionalViews.sol\\\";\\n\\ninterface NotionalProxy is nTokenERC20, nERC1155Interface, NotionalGovernance, NotionalViews {\\n    /** User trading events */\\n    event CashBalanceChange(address indexed account, uint16 indexed currencyId, int256 netCashChange);\\n    event nTokenSupplyChange(address indexed account, uint16 indexed currencyId, int256 tokenSupplyChange);\\n    event MarketsInitialized(uint16 currencyId);\\n    event SweepCashIntoMarkets(uint16 currencyId, int256 cashIntoMarkets);\\n    event SettledCashDebt(\\n        address indexed settledAccount,\\n        uint16 indexed currencyId,\\n        int256 amountToSettleAsset,\\n        int256 fCashAmount\\n    );\\n    event nTokenResidualPurchase(\\n        uint16 indexed currencyId,\\n        uint40 indexed maturity,\\n        int256 fCashAmountToPurchase,\\n        int256 netAssetCashNToken\\n    );\\n    event LendBorrowTrade(\\n        address indexed account,\\n        uint16 indexed currencyId,\\n        uint40 maturity,\\n        int256 netAssetCash,\\n        int256 netfCash\\n    );\\n    event AddRemoveLiquidity(\\n        address indexed account,\\n        uint16 indexed currencyId,\\n        uint40 maturity,\\n        int256 netAssetCash,\\n        int256 netfCash,\\n        int256 netLiquidityTokens\\n    );\\n\\n    /// @notice Emitted when reserve fees are accrued\\n    event ReserveFeeAccrued(uint16 indexed currencyId, int256 fee);\\n    /// @notice Emitted whenever an account context has updated\\n    event AccountContextUpdate(address indexed account);\\n    /// @notice Emitted when an account has assets that are settled\\n    event AccountSettled(address indexed account);\\n    /// @notice Emitted when an asset rate is settled\\n    event SetSettlementRate(uint256 indexed currencyId, uint256 indexed maturity, uint128 rate);\\n\\n    /* Liquidation Events */\\n    event LiquidateLocalCurrency(\\n        address indexed liquidated,\\n        address indexed liquidator,\\n        uint16 localCurrencyId,\\n        int256 netLocalFromLiquidator\\n    );\\n\\n    event LiquidateCollateralCurrency(\\n        address indexed liquidated,\\n        address indexed liquidator,\\n        uint16 localCurrencyId,\\n        uint16 collateralCurrencyId,\\n        int256 netLocalFromLiquidator,\\n        int256 netCollateralTransfer,\\n        int256 netNTokenTransfer\\n    );\\n\\n    event LiquidatefCashEvent(\\n        address indexed liquidated,\\n        uint16 localCurrencyId,\\n        uint16 fCashCurrency,\\n        int256 netLocalFromLiquidator,\\n        uint256[] fCashMaturities,\\n        int256[] fCashNotionalTransfer\\n    );\\n\\n    /** UUPS Upgradeable contract calls */\\n    function upgradeTo(address newImplementation) external;\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable;\\n    function getImplementation() external view returns (address);\\n    function owner() external view returns (address);\\n    function pauseRouter() external view returns (address);\\n    function pauseGuardian() external view returns (address);\\n\\n    /** Initialize Markets Action */\\n    function initializeMarkets(uint16 currencyId, bool isFirstInit) external;\\n\\n    function sweepCashIntoMarkets(uint16 currencyId) external;\\n\\n    /** Redeem nToken Action */\\n    function nTokenRedeem(\\n        address redeemer,\\n        uint16 currencyId,\\n        uint96 tokensToRedeem_,\\n        bool sellTokenAssets\\n    ) external returns (int256);\\n\\n    /** Account Action */\\n    function enableBitmapCurrency(uint16 currencyId) external;\\n\\n    function settleAccount(address account) external;\\n\\n    function depositUnderlyingToken(\\n        address account,\\n        uint16 currencyId,\\n        uint256 amountExternalPrecision\\n    ) external payable returns (uint256);\\n\\n    function depositAssetToken(\\n        address account,\\n        uint16 currencyId,\\n        uint256 amountExternalPrecision\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        uint16 currencyId,\\n        uint88 amountInternalPrecision,\\n        bool redeemToUnderlying\\n    ) external returns (uint256);\\n\\n    /** Batch Action */\\n    function batchBalanceAction(address account, BalanceAction[] calldata actions) external payable;\\n\\n    function batchBalanceAndTradeAction(address account, BalanceActionWithTrades[] calldata actions)\\n        external\\n        payable;\\n\\n    function batchBalanceAndTradeActionWithCallback(\\n        address account,\\n        BalanceActionWithTrades[] calldata actions,\\n        bytes calldata callbackData\\n    ) external payable;\\n\\n    /** Liquidation Action */\\n    function calculateLocalCurrencyLiquidation(\\n        address liquidateAccount,\\n        uint16 localCurrency,\\n        uint96 maxNTokenLiquidation\\n    ) external returns (int256, int256);\\n\\n    function liquidateLocalCurrency(\\n        address liquidateAccount,\\n        uint16 localCurrency,\\n        uint96 maxNTokenLiquidation\\n    ) external returns (int256, int256);\\n\\n    function calculateCollateralCurrencyLiquidation(\\n        address liquidateAccount,\\n        uint16 localCurrency,\\n        uint16 collateralCurrency,\\n        uint128 maxCollateralLiquidation,\\n        uint96 maxNTokenLiquidation\\n    )\\n        external\\n        returns (\\n            int256,\\n            int256,\\n            int256\\n        );\\n\\n    function liquidateCollateralCurrency(\\n        address liquidateAccount,\\n        uint16 localCurrency,\\n        uint16 collateralCurrency,\\n        uint128 maxCollateralLiquidation,\\n        uint96 maxNTokenLiquidation,\\n        bool withdrawCollateral,\\n        bool redeemToUnderlying\\n    )\\n        external\\n        returns (\\n            int256,\\n            int256,\\n            int256\\n        );\\n\\n    function calculatefCashLocalLiquidation(\\n        address liquidateAccount,\\n        uint16 localCurrency,\\n        uint256[] calldata fCashMaturities,\\n        uint256[] calldata maxfCashLiquidateAmounts\\n    ) external returns (int256[] memory, int256);\\n\\n    function liquidatefCashLocal(\\n        address liquidateAccount,\\n        uint16 localCurrency,\\n        uint256[] calldata fCashMaturities,\\n        uint256[] calldata maxfCashLiquidateAmounts\\n    ) external returns (int256[] memory, int256);\\n\\n    function calculatefCashCrossCurrencyLiquidation(\\n        address liquidateAccount,\\n        uint16 localCurrency,\\n        uint16 fCashCurrency,\\n        uint256[] calldata fCashMaturities,\\n        uint256[] calldata maxfCashLiquidateAmounts\\n    ) external returns (int256[] memory, int256);\\n\\n    function liquidatefCashCrossCurrency(\\n        address liquidateAccount,\\n        uint16 localCurrency,\\n        uint16 fCashCurrency,\\n        uint256[] calldata fCashMaturities,\\n        uint256[] calldata maxfCashLiquidateAmounts\\n    ) external returns (int256[] memory, int256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/global/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"interfaces/chainlink/AggregatorV2V3Interface.sol\\\";\\nimport \\\"interfaces/notional/AssetRateAdapter.sol\\\";\\n\\n/// @notice Different types of internal tokens\\n///  - UnderlyingToken: underlying asset for a cToken (except for Ether)\\n///  - cToken: Compound interest bearing token\\n///  - cETH: Special handling for cETH tokens\\n///  - Ether: the one and only\\n///  - NonMintable: tokens that do not have an underlying (therefore not cTokens)\\nenum TokenType {UnderlyingToken, cToken, cETH, Ether, NonMintable}\\n\\n/// @notice Specifies the different trade action types in the system. Each trade action type is\\n/// encoded in a tightly packed bytes32 object. Trade action type is the first big endian byte of the\\n/// 32 byte trade action object. The schemas for each trade action type are defined below.\\nenum TradeActionType {\\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 fCashAmount, uint32 minImpliedRate, uint120 unused)\\n    Lend,\\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 fCashAmount, uint32 maxImpliedRate, uint128 unused)\\n    Borrow,\\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 assetCashAmount, uint32 minImpliedRate, uint32 maxImpliedRate, uint88 unused)\\n    AddLiquidity,\\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 tokenAmount, uint32 minImpliedRate, uint32 maxImpliedRate, uint88 unused)\\n    RemoveLiquidity,\\n    // (uint8 TradeActionType, uint32 Maturity, int88 fCashResidualAmount, uint128 unused)\\n    PurchaseNTokenResidual,\\n    // (uint8 TradeActionType, address CounterpartyAddress, int88 fCashAmountToSettle)\\n    SettleCashDebt\\n}\\n\\n/// @notice Specifies different deposit actions that can occur during BalanceAction or BalanceActionWithTrades\\nenum DepositActionType {\\n    // No deposit action\\n    None,\\n    // Deposit asset cash, depositActionAmount is specified in asset cash external precision\\n    DepositAsset,\\n    // Deposit underlying tokens that are mintable to asset cash, depositActionAmount is specified in underlying token\\n    // external precision\\n    DepositUnderlying,\\n    // Deposits specified asset cash external precision amount into an nToken and mints the corresponding amount of\\n    // nTokens into the account\\n    DepositAssetAndMintNToken,\\n    // Deposits specified underlying in external precision, mints asset cash, and uses that asset cash to mint nTokens\\n    DepositUnderlyingAndMintNToken,\\n    // Redeems an nToken balance to asset cash. depositActionAmount is specified in nToken precision. Considered a deposit action\\n    // because it deposits asset cash into an account. If there are fCash residuals that cannot be sold off, will revert.\\n    RedeemNToken,\\n    // Converts specified amount of asset cash balance already in Notional to nTokens. depositActionAmount is specified in\\n    // Notional internal 8 decimal precision.\\n    ConvertCashToNToken\\n}\\n\\n/// @notice Used internally for PortfolioHandler state\\nenum AssetStorageState {NoChange, Update, Delete, RevertIfStored}\\n\\n/****** Calldata objects ******/\\n\\n/// @notice Defines a balance action for batchAction\\nstruct BalanceAction {\\n    // Deposit action to take (if any)\\n    DepositActionType actionType;\\n    uint16 currencyId;\\n    // Deposit action amount must correspond to the depositActionType, see documentation above.\\n    uint256 depositActionAmount;\\n    // Withdraw an amount of asset cash specified in Notional internal 8 decimal precision\\n    uint256 withdrawAmountInternalPrecision;\\n    // If set to true, will withdraw entire cash balance. Useful if there may be an unknown amount of asset cash\\n    // residual left from trading.\\n    bool withdrawEntireCashBalance;\\n    // If set to true, will redeem asset cash to the underlying token on withdraw.\\n    bool redeemToUnderlying;\\n}\\n\\n/// @notice Defines a balance action with a set of trades to do as well\\nstruct BalanceActionWithTrades {\\n    DepositActionType actionType;\\n    uint16 currencyId;\\n    uint256 depositActionAmount;\\n    uint256 withdrawAmountInternalPrecision;\\n    bool withdrawEntireCashBalance;\\n    bool redeemToUnderlying;\\n    // Array of tightly packed 32 byte objects that represent trades. See TradeActionType documentation\\n    bytes32[] trades;\\n}\\n\\n/****** In memory objects ******/\\n/// @notice Internal object that represents settled cash balances\\nstruct SettleAmount {\\n    uint256 currencyId;\\n    int256 netCashChange;\\n}\\n\\n/// @notice Internal object that represents a token\\nstruct Token {\\n    address tokenAddress;\\n    bool hasTransferFee;\\n    int256 decimals;\\n    TokenType tokenType;\\n    uint256 maxCollateralBalance;\\n}\\n\\n/// @notice Internal object that represents an nToken portfolio\\nstruct nTokenPortfolio {\\n    CashGroupParameters cashGroup;\\n    PortfolioState portfolioState;\\n    int256 totalSupply;\\n    int256 cashBalance;\\n    uint256 lastInitializedTime;\\n    bytes6 parameters;\\n    address tokenAddress;\\n}\\n\\n/// @notice Internal object used during liquidation\\nstruct LiquidationFactors {\\n    address account;\\n    // Aggregate free collateral of the account denominated in ETH underlying, 8 decimal precision\\n    int256 netETHValue;\\n    // Amount of net local currency asset cash before haircuts and buffers available\\n    int256 localAssetAvailable;\\n    // Amount of net collateral currency asset cash before haircuts and buffers available\\n    int256 collateralAssetAvailable;\\n    // Haircut value of nToken holdings denominated in asset cash, will be local or collateral nTokens based\\n    // on liquidation type\\n    int256 nTokenHaircutAssetValue;\\n    // nToken parameters for calculating liquidation amount\\n    bytes6 nTokenParameters;\\n    // ETH exchange rate from local currency to ETH\\n    ETHRate localETHRate;\\n    // ETH exchange rate from collateral currency to ETH\\n    ETHRate collateralETHRate;\\n    // Asset rate for the local currency, used in cross currency calculations to calculate local asset cash required\\n    AssetRateParameters localAssetRate;\\n    // Used during currency liquidations if the account has liquidity tokens\\n    CashGroupParameters cashGroup;\\n    // Used during currency liquidations if it is only a calculation, defaults to false\\n    bool isCalculation;\\n}\\n\\n/// @notice Internal asset array portfolio state\\nstruct PortfolioState {\\n    // Array of currently stored assets\\n    PortfolioAsset[] storedAssets;\\n    // Array of new assets to add\\n    PortfolioAsset[] newAssets;\\n    uint256 lastNewAssetIndex;\\n    // Holds the length of stored assets after accounting for deleted assets\\n    uint256 storedAssetLength;\\n}\\n\\n/// @notice In memory ETH exchange rate used during free collateral calculation.\\nstruct ETHRate {\\n    // The decimals (i.e. 10^rateDecimalPlaces) of the exchange rate, defined by the rate oracle\\n    int256 rateDecimals;\\n    // The exchange rate from base to ETH (if rate invert is required it is already done)\\n    int256 rate;\\n    // Amount of buffer as a multiple with a basis of 100 applied to negative balances.\\n    int256 buffer;\\n    // Amount of haircut as a multiple with a basis of 100 applied to positive balances\\n    int256 haircut;\\n    // Liquidation discount as a multiple with a basis of 100 applied to the exchange rate\\n    // as an incentive given to liquidators.\\n    int256 liquidationDiscount;\\n}\\n\\n/// @notice Internal object used to handle balance state during a transaction\\nstruct BalanceState {\\n    uint16 currencyId;\\n    // Cash balance stored in balance state at the beginning of the transaction\\n    int256 storedCashBalance;\\n    // nToken balance stored at the beginning of the transaction\\n    int256 storedNTokenBalance;\\n    // The net cash change as a result of asset settlement or trading\\n    int256 netCashChange;\\n    // Net asset transfers into or out of the account\\n    int256 netAssetTransferInternalPrecision;\\n    // Net token transfers into or out of the account\\n    int256 netNTokenTransfer;\\n    // Net token supply change from minting or redeeming\\n    int256 netNTokenSupplyChange;\\n    // The last time incentives were claimed for this currency\\n    uint256 lastClaimTime;\\n    // The last integral supply amount when tokens were claimed\\n    uint256 lastClaimIntegralSupply;\\n}\\n\\n/// @dev Asset rate used to convert between underlying cash and asset cash\\nstruct AssetRateParameters {\\n    // Address of the asset rate oracle\\n    AssetRateAdapter rateOracle;\\n    // The exchange rate from base to quote (if invert is required it is already done)\\n    int256 rate;\\n    // The decimals of the underlying, the rate converts to the underlying decimals\\n    int256 underlyingDecimals;\\n}\\n\\n/// @dev Cash group when loaded into memory\\nstruct CashGroupParameters {\\n    uint16 currencyId;\\n    uint256 maxMarketIndex;\\n    AssetRateParameters assetRate;\\n    bytes32 data;\\n}\\n\\n/// @dev A portfolio asset when loaded in memory\\nstruct PortfolioAsset {\\n    // Asset currency id\\n    uint256 currencyId;\\n    uint256 maturity;\\n    // Asset type, fCash or liquidity token.\\n    uint256 assetType;\\n    // fCash amount or liquidity token amount\\n    int256 notional;\\n    // Used for managing portfolio asset state\\n    uint256 storageSlot;\\n    // The state of the asset for when it is written to storage\\n    AssetStorageState storageState;\\n}\\n\\n/// @dev Market object as represented in memory\\nstruct MarketParameters {\\n    bytes32 storageSlot;\\n    uint256 maturity;\\n    // Total amount of fCash available for purchase in the market.\\n    int256 totalfCash;\\n    // Total amount of cash available for purchase in the market.\\n    int256 totalAssetCash;\\n    // Total amount of liquidity tokens (representing a claim on liquidity) in the market.\\n    int256 totalLiquidity;\\n    // This is the previous annualized interest rate in RATE_PRECISION that the market traded\\n    // at. This is used to calculate the rate anchor to smooth interest rates over time.\\n    uint256 lastImpliedRate;\\n    // Time lagged version of lastImpliedRate, used to value fCash assets at market rates while\\n    // remaining resistent to flash loan attacks.\\n    uint256 oracleRate;\\n    // This is the timestamp of the previous trade\\n    uint256 previousTradeTime;\\n}\\n\\n/****** Storage objects ******/\\n\\n/// @dev Token object in storage:\\n///  20 bytes for token address\\n///  1 byte for hasTransferFee\\n///  1 byte for tokenType\\n///  1 byte for tokenDecimals\\n///  9 bytes for maxCollateralBalance (may not always be set)\\nstruct TokenStorage {\\n    // Address of the token\\n    address tokenAddress;\\n    // Transfer fees will change token deposit behavior\\n    bool hasTransferFee;\\n    TokenType tokenType;\\n    uint8 decimalPlaces;\\n    // Upper limit on how much of this token the contract can hold at any time\\n    uint72 maxCollateralBalance;\\n}\\n\\n/// @dev Exchange rate object as it is represented in storage, total storage is 25 bytes.\\nstruct ETHRateStorage {\\n    // Address of the rate oracle\\n    AggregatorV2V3Interface rateOracle;\\n    // The decimal places of precision that the rate oracle uses\\n    uint8 rateDecimalPlaces;\\n    // True of the exchange rate must be inverted\\n    bool mustInvert;\\n    // NOTE: both of these governance values are set with BUFFER_DECIMALS precision\\n    // Amount of buffer to apply to the exchange rate for negative balances.\\n    uint8 buffer;\\n    // Amount of haircut to apply to the exchange rate for positive balances\\n    uint8 haircut;\\n    // Liquidation discount in percentage point terms, 106 means a 6% discount\\n    uint8 liquidationDiscount;\\n}\\n\\n/// @dev Asset rate oracle object as it is represented in storage, total storage is 21 bytes.\\nstruct AssetRateStorage {\\n    // Address of the rate oracle\\n    AssetRateAdapter rateOracle;\\n    // The decimal places of the underlying asset\\n    uint8 underlyingDecimalPlaces;\\n}\\n\\n/// @dev Governance parameters for a cash group, total storage is 9 bytes + 7 bytes for liquidity token haircuts\\n/// and 7 bytes for rate scalars, total of 23 bytes. Note that this is stored packed in the storage slot so there\\n/// are no indexes stored for liquidityTokenHaircuts or rateScalars, maxMarketIndex is used instead to determine the\\n/// length.\\nstruct CashGroupSettings {\\n    // Index of the AMMs on chain that will be made available. Idiosyncratic fCash\\n    // that is dated less than the longest AMM will be tradable.\\n    uint8 maxMarketIndex;\\n    // Time window in minutes that the rate oracle will be averaged over\\n    uint8 rateOracleTimeWindowMin;\\n    // Total fees per trade, specified in BPS\\n    uint8 totalFeeBPS;\\n    // Share of the fees given to the protocol, denominated in percentage\\n    uint8 reserveFeeShare;\\n    // Debt buffer specified in 5 BPS increments\\n    uint8 debtBuffer5BPS;\\n    // fCash haircut specified in 5 BPS increments\\n    uint8 fCashHaircut5BPS;\\n    // If an account has a negative cash balance, it can be settled by incurring debt at the 3 month market. This\\n    // is the basis points for the penalty rate that will be added the current 3 month oracle rate.\\n    uint8 settlementPenaltyRate5BPS;\\n    // If an account has fCash that is being liquidated, this is the discount that the liquidator can purchase it for\\n    uint8 liquidationfCashHaircut5BPS;\\n    // If an account has fCash that is being liquidated, this is the discount that the liquidator can purchase it for\\n    uint8 liquidationDebtBuffer5BPS;\\n    // Liquidity token haircut applied to cash claims, specified as a percentage between 0 and 100\\n    uint8[] liquidityTokenHaircuts;\\n    // Rate scalar used to determine the slippage of the market\\n    uint8[] rateScalars;\\n}\\n\\n/// @dev Holds account level context information used to determine settlement and\\n/// free collateral actions. Total storage is 28 bytes\\nstruct AccountContext {\\n    // Used to check when settlement must be triggered on an account\\n    uint40 nextSettleTime;\\n    // For lenders that never incur debt, we use this flag to skip the free collateral check.\\n    bytes1 hasDebt;\\n    // Length of the account's asset array\\n    uint8 assetArrayLength;\\n    // If this account has bitmaps set, this is the corresponding currency id\\n    uint16 bitmapCurrencyId;\\n    // 9 total active currencies possible (2 bytes each)\\n    bytes18 activeCurrencies;\\n}\\n\\n/// @dev Holds nToken context information mapped via the nToken address, total storage is\\n/// 16 bytes\\nstruct nTokenContext {\\n    // Currency id that the nToken represents\\n    uint16 currencyId;\\n    // Annual incentive emission rate denominated in WHOLE TOKENS (multiply by \\n    // INTERNAL_TOKEN_PRECISION to get the actual rate)\\n    uint32 incentiveAnnualEmissionRate;\\n    // The last block time at utc0 that the nToken was initialized at, zero if it\\n    // has never been initialized\\n    uint32 lastInitializedTime;\\n    // Length of the asset array, refers to the number of liquidity tokens an nToken\\n    // currently holds\\n    uint8 assetArrayLength;\\n    // Each byte is a specific nToken parameter\\n    bytes5 nTokenParameters;\\n}\\n\\n/// @dev Holds account balance information, total storage 32 bytes\\nstruct BalanceStorage {\\n    // Number of nTokens held by the account\\n    uint80 nTokenBalance;\\n    // Last time the account claimed their nTokens\\n    uint32 lastClaimTime;\\n    // The total integral supply of the nToken at the last claim time packed into\\n    // 56 bits. There is some loss of precision here but it is acceptable\\n    uint56 packedLastClaimIntegralSupply;\\n    // Cash balance of the account\\n    int88 cashBalance;\\n}\\n\\n/// @dev Holds information about a settlement rate, total storage 25 bytes\\nstruct SettlementRateStorage {\\n    uint40 blockTime;\\n    uint128 settlementRate;\\n    uint8 underlyingDecimalPlaces;\\n}\\n\\n/// @dev Holds information about a market, total storage is 42 bytes so this spans\\n/// two storage words\\nstruct MarketStorage {\\n    // Total fCash in the market\\n    uint80 totalfCash;\\n    // Total asset cash in the market\\n    uint80 totalAssetCash;\\n    // Last annualized interest rate the market traded at\\n    uint32 lastImpliedRate;\\n    // Last recorded oracle rate for the market\\n    uint32 oracleRate;\\n    // Last time a trade was made\\n    uint32 previousTradeTime;\\n    // This is stored in slot + 1\\n    uint80 totalLiquidity;\\n}\\n\\nstruct ifCashStorage {\\n    // Notional amount of fCash at the slot, limited to int128 to allow for\\n    // future expansion\\n    int128 notional;\\n}\\n\\n/// @dev A single portfolio asset in storage, total storage of 19 bytes\\nstruct PortfolioAssetStorage {\\n    // Currency Id for the asset\\n    uint16 currencyId;\\n    // Maturity of the asset\\n    uint40 maturity;\\n    // Asset type (fCash or Liquidity Token marker)\\n    uint8 assetType;\\n    // Notional\\n    int88 notional;\\n}\\n\\n/// @dev nToken total supply factors for the nToken, includes factors related\\n/// to claiming incentives, total storage 32 bytes\\nstruct nTokenTotalSupplyStorage {\\n    // Total supply of the nToken\\n    uint96 totalSupply;\\n    // Integral of the total supply used for calculating the average total supply\\n    uint128 integralTotalSupply;\\n    // Last timestamp the supply value changed, used for calculating the integralTotalSupply\\n    uint32 lastSupplyChangeTime;\\n}\\n\\n/// @dev Used in view methods to return account balances in a developer friendly manner\\nstruct AccountBalance {\\n    uint16 currencyId;\\n    int256 cashBalance;\\n    int256 nTokenBalance;\\n    uint256 lastClaimTime;\\n    uint256 lastClaimIntegralSupply;\\n}\\n\"\r\n    },\r\n    \"interfaces/notional/nTokenERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\ninterface nTokenERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    function nTokenTotalSupply(address nTokenAddress) external view returns (uint256);\\n\\n    function nTokenTransferAllowance(\\n        uint16 currencyId,\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function nTokenBalanceOf(uint16 currencyId, address account) external view returns (uint256);\\n\\n    function nTokenTransferApprove(\\n        uint16 currencyId,\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function nTokenTransfer(\\n        uint16 currencyId,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function nTokenTransferFrom(\\n        uint16 currencyId,\\n        address spender,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function nTokenTransferApproveAll(address spender, uint256 amount) external returns (bool);\\n\\n    function nTokenClaimIncentives() external returns (uint256);\\n\\n    function nTokenPresentValueAssetDenominated(uint16 currencyId) external view returns (int256);\\n\\n    function nTokenPresentValueUnderlyingDenominated(uint16 currencyId)\\n        external\\n        view\\n        returns (int256);\\n}\\n\"\r\n    },\r\n    \"interfaces/notional/nERC1155Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../../contracts/global/Types.sol\\\";\\n\\ninterface nERC1155Interface {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n    event URI(string value, uint256 indexed id);\\n\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function signedBalanceOf(address account, uint256 id) external view returns (int256);\\n\\n    function signedBalanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (int256[] memory);\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external payable;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external payable;\\n\\n    function decodeToAssets(uint256[] calldata ids, uint256[] calldata amounts)\\n        external\\n        view\\n        returns (PortfolioAsset[] memory);\\n\\n    function encodeToId(\\n        uint16 currencyId,\\n        uint40 maturity,\\n        uint8 assetType\\n    ) external pure returns (uint256 id);\\n}\\n\"\r\n    },\r\n    \"interfaces/notional/NotionalGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../../contracts/global/Types.sol\\\";\\nimport \\\"interfaces/chainlink/AggregatorV2V3Interface.sol\\\";\\nimport \\\"interfaces/notional/NotionalGovernance.sol\\\";\\n\\ninterface NotionalGovernance {\\n    event ListCurrency(uint16 newCurrencyId);\\n    event UpdateETHRate(uint16 currencyId);\\n    event UpdateAssetRate(uint16 currencyId);\\n    event UpdateCashGroup(uint16 currencyId);\\n    event DeployNToken(uint16 currencyId, address nTokenAddress);\\n    event UpdateDepositParameters(uint16 currencyId);\\n    event UpdateInitializationParameters(uint16 currencyId);\\n    event UpdateIncentiveEmissionRate(uint16 currencyId, uint32 newEmissionRate);\\n    event UpdateTokenCollateralParameters(uint16 currencyId);\\n    event UpdateGlobalTransferOperator(address operator, bool approved);\\n    event UpdateAuthorizedCallbackContract(address operator, bool approved);\\n    event UpdateMaxCollateralBalance(uint16 currencyId, uint72 maxCollateralBalance);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event PauseRouterAndGuardianUpdated(address indexed pauseRouter, address indexed pauseGuardian);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function setPauseRouterAndGuardian(address pauseRouter_, address pauseGuardian_) external;\\n\\n    function listCurrency(\\n        TokenStorage calldata assetToken,\\n        TokenStorage calldata underlyingToken,\\n        AggregatorV2V3Interface rateOracle,\\n        bool mustInvert,\\n        uint8 buffer,\\n        uint8 haircut,\\n        uint8 liquidationDiscount\\n    ) external returns (uint16 currencyId);\\n\\n    function updateMaxCollateralBalance(\\n        uint16 currencyId,\\n        uint72 maxCollateralBalanceInternalPrecision\\n    ) external;\\n\\n    function enableCashGroup(\\n        uint16 currencyId,\\n        AssetRateAdapter assetRateOracle,\\n        CashGroupSettings calldata cashGroup,\\n        string calldata underlyingName,\\n        string calldata underlyingSymbol\\n    ) external;\\n\\n    function updateDepositParameters(\\n        uint16 currencyId,\\n        uint32[] calldata depositShares,\\n        uint32[] calldata leverageThresholds\\n    ) external;\\n\\n    function updateInitializationParameters(\\n        uint16 currencyId,\\n        uint32[] calldata annualizedAnchorRates,\\n        uint32[] calldata proportions\\n    ) external;\\n\\n    function updateIncentiveEmissionRate(uint16 currencyId, uint32 newEmissionRate) external;\\n\\n    function updateTokenCollateralParameters(\\n        uint16 currencyId,\\n        uint8 residualPurchaseIncentive10BPS,\\n        uint8 pvHaircutPercentage,\\n        uint8 residualPurchaseTimeBufferHours,\\n        uint8 cashWithholdingBuffer10BPS,\\n        uint8 liquidationHaircutPercentage\\n    ) external;\\n\\n    function updateCashGroup(uint16 currencyId, CashGroupSettings calldata cashGroup) external;\\n\\n    function updateAssetRate(uint16 currencyId, AssetRateAdapter rateOracle) external;\\n\\n    function updateETHRate(\\n        uint16 currencyId,\\n        AggregatorV2V3Interface rateOracle,\\n        bool mustInvert,\\n        uint8 buffer,\\n        uint8 haircut,\\n        uint8 liquidationDiscount\\n    ) external;\\n\\n    function updateGlobalTransferOperator(address operator, bool approved) external;\\n\\n    function updateAuthorizedCallbackContract(address operator, bool approved) external;\\n}\\n\"\r\n    },\r\n    \"interfaces/notional/NotionalViews.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../../contracts/global/Types.sol\\\";\\n\\ninterface NotionalViews {\\n    function getMaxCurrencyId() external view returns (uint16);\\n\\n    function getCurrencyId(address tokenAddress) external view returns (uint16 currencyId);\\n\\n    function getCurrency(uint16 currencyId)\\n        external\\n        view\\n        returns (Token memory assetToken, Token memory underlyingToken);\\n\\n    function getRateStorage(uint16 currencyId)\\n        external\\n        view\\n        returns (ETHRateStorage memory ethRate, AssetRateStorage memory assetRate);\\n\\n    function getCurrencyAndRates(uint16 currencyId)\\n        external\\n        view\\n        returns (\\n            Token memory assetToken,\\n            Token memory underlyingToken,\\n            ETHRate memory ethRate,\\n            AssetRateParameters memory assetRate\\n        );\\n\\n    function getCashGroup(uint16 currencyId) external view returns (CashGroupSettings memory);\\n\\n    function getCashGroupAndAssetRate(uint16 currencyId)\\n        external\\n        view\\n        returns (CashGroupSettings memory cashGroup, AssetRateParameters memory assetRate);\\n\\n    function getInitializationParameters(uint16 currencyId)\\n        external\\n        view\\n        returns (int256[] memory annualizedAnchorRates, int256[] memory proportions);\\n\\n    function getDepositParameters(uint16 currencyId)\\n        external\\n        view\\n        returns (int256[] memory depositShares, int256[] memory leverageThresholds);\\n\\n    function nTokenAddress(uint16 currencyId) external view returns (address);\\n\\n    function getNoteToken() external view returns (address);\\n\\n    function getSettlementRate(uint16 currencyId, uint40 maturity)\\n        external\\n        view\\n        returns (AssetRateParameters memory);\\n\\n    function getMarket(uint16 currencyId, uint256 maturity, uint256 settlementDate)\\n        external view returns (MarketParameters memory);\\n\\n    function getActiveMarkets(uint16 currencyId) external view returns (MarketParameters[] memory);\\n\\n    function getActiveMarketsAtBlockTime(uint16 currencyId, uint32 blockTime)\\n        external\\n        view\\n        returns (MarketParameters[] memory);\\n\\n    function getReserveBalance(uint16 currencyId) external view returns (int256 reserveBalance);\\n\\n    function getNTokenPortfolio(address tokenAddress)\\n        external\\n        view\\n        returns (PortfolioAsset[] memory liquidityTokens, PortfolioAsset[] memory netfCashAssets);\\n\\n    function getNTokenAccount(address tokenAddress)\\n        external\\n        view\\n        returns (\\n            uint16 currencyId,\\n            uint256 totalSupply,\\n            uint256 incentiveAnnualEmissionRate,\\n            uint256 lastInitializedTime,\\n            bytes5 nTokenParameters,\\n            int256 cashBalance,\\n            uint256 integralTotalSupply,\\n            uint256 lastSupplyChangeTime\\n        );\\n\\n    function getAccount(address account)\\n        external\\n        view\\n        returns (\\n            AccountContext memory accountContext,\\n            AccountBalance[] memory accountBalances,\\n            PortfolioAsset[] memory portfolio\\n        );\\n\\n    function getAccountContext(address account) external view returns (AccountContext memory);\\n\\n    function getAccountBalance(uint16 currencyId, address account)\\n        external\\n        view\\n        returns (\\n            int256 cashBalance,\\n            int256 nTokenBalance,\\n            uint256 lastClaimTime\\n        );\\n\\n    function getAccountPortfolio(address account) external view returns (PortfolioAsset[] memory);\\n\\n    function getfCashNotional(\\n        address account,\\n        uint16 currencyId,\\n        uint256 maturity\\n    ) external view returns (int256);\\n\\n    function getAssetsBitmap(address account, uint16 currencyId) external view returns (bytes32);\\n\\n    function getFreeCollateral(address account) external view returns (int256, int256[] memory);\\n\\n    function calculateNTokensToMint(uint16 currencyId, uint88 amountToDepositExternalPrecision)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getfCashAmountGivenCashAmount(\\n        uint16 currencyId,\\n        int88 netCashToAccount,\\n        uint256 marketIndex,\\n        uint256 blockTime\\n    ) external view returns (int256);\\n\\n    function getCashAmountGivenfCashAmount(\\n        uint16 currencyId,\\n        int88 fCashAmount,\\n        uint256 marketIndex,\\n        uint256 blockTime\\n    ) external view returns (int256, int256);\\n\\n    function nTokenGetClaimableIncentives(address account, uint256 blockTime)\\n        external\\n        view\\n        returns (uint256);\\n\\n}\\n\"\r\n    },\r\n    \"interfaces/chainlink/AggregatorV2V3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\\n{\\n}\"\r\n    },\r\n    \"interfaces/notional/AssetRateAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-v3\\npragma solidity >=0.7.0;\\n\\n/// @notice Used as a wrapper for tokens that are interest bearing for an\\n/// underlying token. Follows the cToken interface, however, can be adapted\\n/// for other interest bearing tokens.\\ninterface AssetRateAdapter {\\n    function token() external view returns (address);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    function underlying() external view returns (address);\\n\\n    function getExchangeRateStateful() external returns (int256);\\n\\n    function getExchangeRateView() external view returns (int256);\\n\\n    function getAnnualizedSupplyRate() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"interfaces/chainlink/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n  function latestTimestamp() external view returns (uint256);\\n  function latestRound() external view returns (uint256);\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\"\r\n    },\r\n    \"interfaces/chainlink/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/proxy/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"initialAccounts\",\"type\":\"address[]\"},{\"internalType\":\"uint96[]\",\"name\":\"initialGrantAmount\",\"type\":\"uint96[]\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalProxy\",\"outputs\":[{\"internalType\":\"contract NotionalProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"NoteERC20","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}