{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\ninterface erc20 {\r\n    function approve(address, uint) external returns (bool);\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function balanceOf(address) external view returns (uint);\r\n}\r\n\r\ninterface cy20 {\r\n    function redeemUnderlying(uint) external returns (uint);\r\n    function mint(uint) external returns (uint);\r\n    function borrow(uint) external returns (uint);\r\n    function repayBorrow(uint) external returns (uint);\r\n}\r\n\r\ninterface registry {\r\n    function cy(address) external view returns (address);\r\n    function price(address) external view returns (uint);\r\n}\r\n\r\ncontract ibAMM {\r\n    \r\n    registry constant ff = registry(0x5C08bC10F45468F18CbDC65454Cbd1dd2cB1Ac65);\r\n    address constant dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    cy20 constant cyDAI = cy20(0x8e595470Ed749b85C6F7669de83EAe304C2ec68F);\r\n    uint constant fee = 995;\r\n    uint constant base = 1000;\r\n    \r\n    constructor() {\r\n        erc20(dai).approve(address(cyDAI), type(uint).max);\r\n    }\r\n    \r\n    function quote_sell(address from, uint amount) external view returns (uint) {\r\n        return ff.price(from) * (amount * fee / base) / 1e18;\r\n    }\r\n    \r\n    function quote_buy(address to, uint amount) external view returns (uint) {\r\n        return (amount * fee / base) * 1e18 / ff.price(to);\r\n    }\r\n    \r\n    function buy(address to, uint amount, uint minOut) external returns (bool) {\r\n        uint _out = (amount * fee / base) * 1e18 / ff.price(to);\r\n        require(_out >= minOut);\r\n        _safeTransferFrom(dai, msg.sender, address(this), amount);\r\n        require(cyDAI.mint(amount) == 0, \"ib: supply failed\");\r\n        require(cy20(ff.cy(to)).borrow(_out) == 0, 'ib: borrow failed');\r\n        _safeTransfer(to, msg.sender, _out);\r\n        return true;\r\n    }\r\n    \r\n    function sell(address from, uint amount, uint minOut) external returns (bool) {\r\n        uint _out = ff.price(from) * (amount * fee / base) / 1e18;\r\n        require(_out >= minOut);\r\n        _safeTransferFrom(from, msg.sender, address(this), amount);\r\n        require(cyDAI.redeemUnderlying(_out) == 0, \"ib: supply failed\");\r\n        require(cy20(ff.cy(from)).repayBorrow(amount) == 0, 'ib: repay failed');\r\n        _safeTransfer(dai, msg.sender, _out);\r\n        return true;\r\n    }\r\n\r\n    function _safeTransfer(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(erc20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n\r\n    function _safeTransferFrom(address token, address from, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(erc20.transferFrom.selector, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quote_buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quote_sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ibAMM","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d0fa08d097f8baff76413eb6db7a65e0d70b5e79550798576395685c17741dec"}]}