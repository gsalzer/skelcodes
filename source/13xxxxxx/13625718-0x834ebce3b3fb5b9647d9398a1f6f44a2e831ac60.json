{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/v3/controllers/Controller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../interfaces/IConverter.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IHarvester.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IManager.sol\\\";\\n\\n/**\\n * @title Controller\\n * @notice This controller allows multiple strategies to be used\\n * for a single vault supporting multiple tokens.\\n */\\ncontract Controller is IController {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    IManager public immutable override manager;\\n\\n    bool public globalInvestEnabled;\\n    uint256 public maxStrategies;\\n\\n    struct VaultDetail {\\n        address converter;\\n        uint256 balance;\\n        address[] strategies;\\n        mapping(address => uint256) balances;\\n        mapping(address => uint256) index;\\n        mapping(address => uint256) caps;\\n    }\\n\\n    // vault => Vault\\n    mapping(address => VaultDetail) internal _vaultDetails;\\n    // strategy => vault\\n    mapping(address => address) internal _vaultStrategies;\\n\\n    /**\\n     * @notice Logged when harvest is called for a strategy\\n     */\\n    event Harvest(address indexed strategy);\\n\\n    /**\\n     * @notice Logged when a strategy is added for a vault\\n     */\\n    event StrategyAdded(address indexed vault, address indexed strategy, uint256 cap);\\n\\n    /**\\n     * @notice Logged when a strategy is removed for a vault\\n     */\\n    event StrategyRemoved(address indexed vault, address indexed strategy);\\n\\n    /**\\n     * @notice Logged when strategies are reordered for a vault\\n     */\\n    event StrategiesReordered(\\n        address indexed vault,\\n        address indexed strategy1,\\n        address indexed strategy2\\n    );\\n\\n    /**\\n     * @param _manager The address of the manager\\n     */\\n    constructor(\\n        address _manager\\n    )\\n        public\\n    {\\n        manager = IManager(_manager);\\n        globalInvestEnabled = true;\\n        maxStrategies = 10;\\n    }\\n\\n    /**\\n     * STRATEGIST-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Adds a strategy for a given vault\\n     * @param _vault The address of the vault\\n     * @param _strategy The address of the strategy\\n     * @param _cap The cap of the strategy\\n     * @param _timeout The timeout between harvests\\n     */\\n    function addStrategy(\\n        address _vault,\\n        address _strategy,\\n        uint256 _cap,\\n        uint256 _timeout\\n    )\\n        external\\n        notHalted\\n        onlyStrategist\\n        onlyStrategy(_strategy)\\n    {\\n        require(manager.allowedVaults(_vault), \\\"!_vault\\\");\\n        if(IStrategy(_strategy).want() != IVault(_vault).getToken()) {\\n            require(_vaultDetails[_vault].converter != address(0), \\\"!converter\\\");\\n        }\\n        // checking if strategy is already added\\n        require(_vaultStrategies[_strategy] == address(0), \\\"Strategy is already added\\\"); \\n        // get the index of the newly added strategy\\n        uint256 index = _vaultDetails[_vault].strategies.length;\\n        // ensure we haven't added too many strategies already\\n        require(index < maxStrategies, \\\"!maxStrategies\\\");\\n        // push the strategy to the array of strategies\\n        _vaultDetails[_vault].strategies.push(_strategy);\\n        // set the cap\\n        _vaultDetails[_vault].caps[_strategy] = _cap;\\n        // set the index\\n        _vaultDetails[_vault].index[_strategy] = index;\\n        // store the mapping of strategy to the vault\\n        _vaultStrategies[_strategy] = _vault;\\n        if (_timeout > 0) {\\n            // add it to the harvester\\n            IHarvester(manager.harvester()).addStrategy(_vault, _strategy, _timeout);\\n        }\\n        emit StrategyAdded(_vault, _strategy, _cap);\\n    }\\n\\n    /**\\n     * @notice Withdraws token from a strategy to the treasury address as returned by the manager\\n     * @param _strategy The address of the strategy\\n     * @param _token The address of the token\\n     */\\n    function inCaseStrategyGetStuck(\\n        address _strategy,\\n        address _token\\n    )\\n        external\\n        onlyStrategist\\n    {\\n        IStrategy(_strategy).withdraw(_token);\\n        IERC20(_token).safeTransfer(\\n            manager.treasury(),\\n            IERC20(_token).balanceOf(address(this))\\n        );\\n    }\\n\\n    /**\\n     * @notice Withdraws token from the controller to the treasury\\n     * @param _token The address of the token\\n     * @param _amount The amount that will be withdrawn\\n     */\\n    function inCaseTokensGetStuck(\\n        address _token,\\n        uint256 _amount\\n    )\\n        external\\n        onlyStrategist\\n    {\\n        IERC20(_token).safeTransfer(manager.treasury(), _amount);\\n    }\\n\\n    /**\\n     * @notice Removes a strategy for a given token\\n     * @param _vault The address of the vault\\n     * @param _strategy The address of the strategy\\n     * @param _timeout The timeout between harvests\\n     */\\n    function removeStrategy(\\n        address _vault,\\n        address _strategy,\\n        uint256 _timeout\\n    )\\n        external\\n        notHalted\\n        onlyStrategist\\n    {\\n        require(manager.allowedVaults(_vault), \\\"!_vault\\\");\\n        VaultDetail storage vaultDetail = _vaultDetails[_vault];\\n        // get the index of the strategy to remove\\n        uint256 index = vaultDetail.index[_strategy];\\n        // get the index of the last strategy\\n        uint256 tail = vaultDetail.strategies.length.sub(1);\\n        // get the address of the last strategy\\n        address replace = vaultDetail.strategies[tail];\\n        // replace the removed strategy with the tail\\n        vaultDetail.strategies[index] = replace;\\n        // set the new index for the replaced strategy\\n        vaultDetail.index[replace] = index;\\n        // remove the duplicate replaced strategy\\n        vaultDetail.strategies.pop();\\n        // remove the strategy's index\\n        delete vaultDetail.index[_strategy];\\n        // remove the strategy's cap\\n        delete vaultDetail.caps[_strategy];\\n        // remove the strategy's balance\\n        delete vaultDetail.balances[_strategy];\\n        // remove the mapping of strategy to the vault\\n        delete _vaultStrategies[_strategy];\\n        // pull funds from the removed strategy to the vault\\n        IStrategy(_strategy).withdrawAll();\\n        // remove the strategy from the harvester\\n        IHarvester(manager.harvester()).removeStrategy(_vault, _strategy, _timeout);\\n        emit StrategyRemoved(_vault, _strategy);\\n    }\\n\\n    /**\\n     * @notice Reorders two strategies for a given vault\\n     * @param _vault The address of the vault\\n     * @param _strategy1 The address of the first strategy\\n     * @param _strategy2 The address of the second strategy\\n     */\\n    function reorderStrategies(\\n        address _vault,\\n        address _strategy1,\\n        address _strategy2\\n    )\\n        external\\n        notHalted\\n        onlyStrategist\\n    {\\n        require(manager.allowedVaults(_vault), \\\"!_vault\\\");\\n        require(_vaultStrategies[_strategy1] == _vault, \\\"!_strategy1\\\");\\n        require(_vaultStrategies[_strategy2] == _vault, \\\"!_strategy2\\\");\\n        VaultDetail storage vaultDetail = _vaultDetails[_vault];\\n        // get the indexes of the strategies\\n        uint256 index1 = vaultDetail.index[_strategy1];\\n        uint256 index2 = vaultDetail.index[_strategy2];\\n        // set the new addresses at their indexes\\n        vaultDetail.strategies[index1] = _strategy2;\\n        vaultDetail.strategies[index2] = _strategy1;\\n        // update indexes\\n        vaultDetail.index[_strategy1] = index2;\\n        vaultDetail.index[_strategy2] = index1;\\n        emit StrategiesReordered(_vault, _strategy1, _strategy2);\\n    }\\n\\n    /**\\n     * @notice Sets/updates the cap of a strategy for a vault\\n     * @dev If the balance of the strategy is greater than the new cap (except if\\n     * the cap is 0), then withdraw the difference from the strategy to the vault.\\n     * @param _vault The address of the vault\\n     * @param _strategy The address of the strategy\\n     * @param _cap The new cap of the strategy\\n     */\\n    function setCap(\\n        address _vault,\\n        address _strategy,\\n        uint256 _cap,\\n        address _convert\\n    )\\n        external\\n        notHalted\\n        onlyStrategist\\n        onlyStrategy(_strategy)\\n    {\\n        _vaultDetails[_vault].caps[_strategy] = _cap;\\n        uint256 _balance = IStrategy(_strategy).balanceOf();\\n        // send excess funds (over cap) back to the vault\\n        if (_balance > _cap && _cap != 0) {\\n            uint256 _diff = _balance.sub(_cap);\\n            IStrategy(_strategy).withdraw(_diff);\\n            updateBalance(_vault, _strategy);\\n            _balance = IStrategy(_strategy).balanceOf();\\n            _vaultDetails[_vault].balance = _vaultDetails[_vault].balance.sub(_diff);\\n            address _want = IStrategy(_strategy).want();\\n            _balance = IERC20(_want).balanceOf(address(this));\\n            if (_convert != address(0)) {\\n                IConverter _converter = IConverter(_vaultDetails[_vault].converter);\\n                IERC20(_want).safeTransfer(address(_converter), _balance);\\n                _balance = _converter.convert(_want, _convert, _balance, 1);\\n                IERC20(_convert).safeTransfer(_vault, _balance);\\n            } else {\\n                IERC20(_want).safeTransfer(_vault, _balance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets/updates the converter for a given vault\\n     * @param _vault The address of the vault\\n     * @param _converter The address of the converter\\n     */\\n    function setConverter(\\n        address _vault,\\n        address _converter\\n    )\\n        external\\n        notHalted\\n        onlyStrategist\\n    {\\n        require(manager.allowedConverters(_converter), \\\"!allowedConverters\\\");\\n        _vaultDetails[_vault].converter = _converter;\\n    }\\n\\n    /**\\n     * @notice Sets/updates the global invest enabled flag\\n     * @param _investEnabled The new bool of the invest enabled flag\\n     */\\n    function setInvestEnabled(\\n        bool _investEnabled\\n    )\\n        external\\n        notHalted\\n        onlyStrategist\\n    {\\n        globalInvestEnabled = _investEnabled;\\n    }\\n\\n    /**\\n     * @notice Sets/updates the maximum number of strategies for a vault\\n     * @param _maxStrategies The new value of the maximum strategies\\n     */\\n    function setMaxStrategies(\\n        uint256 _maxStrategies\\n    )\\n        external\\n        notHalted\\n        onlyStrategist\\n    {\\n        maxStrategies = _maxStrategies;\\n    }\\n\\n    function skim(\\n        address _strategy\\n    )\\n        external\\n        onlyStrategist\\n        onlyStrategy(_strategy)\\n    {\\n        address _want = IStrategy(_strategy).want();\\n        IStrategy(_strategy).skim();\\n        IERC20(_want).safeTransfer(_vaultStrategies[_strategy], IERC20(_want).balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Withdraws all funds from a strategy\\n     * @param _strategy The address of the strategy\\n     * @param _convert The token address to convert to\\n     */\\n    function withdrawAll(\\n        address _strategy,\\n        address _convert\\n    )\\n        external\\n        override\\n        onlyStrategist\\n        onlyStrategy(_strategy)\\n    {\\n        address _want = IStrategy(_strategy).want();\\n        IStrategy(_strategy).withdrawAll();\\n        uint256 _amount = IERC20(_want).balanceOf(address(this));\\n        address _vault = _vaultStrategies[_strategy];\\n        updateBalance(_vault, _strategy);\\n        if (_convert != address(0)) {\\n            IConverter _converter = IConverter(_vaultDetails[_vault].converter);\\n            IERC20(_want).safeTransfer(address(_converter), _amount);\\n            _amount = _converter.convert(_want, _convert, _amount, 1);\\n            IERC20(_convert).safeTransfer(_vault, _amount);\\n        } else {\\n            IERC20(_want).safeTransfer(_vault, _amount);\\n        }\\n        uint256 _balance = _vaultDetails[_vault].balance;\\n        if (_balance >= _amount) {\\n            _vaultDetails[_vault].balance = _balance.sub(_amount);\\n        } else {\\n            _vaultDetails[_vault].balance = 0;\\n        }\\n    }\\n\\n    /**\\n     * HARVESTER-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Harvests the specified strategy\\n     * @param _strategy The address of the strategy\\n     */\\n    function harvestStrategy(\\n        address _strategy,\\n        uint256[] calldata _estimates\\n    )\\n        external\\n        override\\n        notHalted\\n        onlyHarvester\\n        onlyStrategy(_strategy)\\n    {\\n        uint256 _before = IStrategy(_strategy).balanceOf();\\n        IStrategy(_strategy).harvest(_estimates);\\n        uint256 _after = IStrategy(_strategy).balanceOf();\\n        address _vault = _vaultStrategies[_strategy];\\n        _vaultDetails[_vault].balance = _vaultDetails[_vault].balance.add(_after.sub(_before));\\n        _vaultDetails[_vault].balances[_strategy] = _after;\\n        emit Harvest(_strategy);\\n    }\\n\\n    /**\\n     * VAULT-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Invests funds into a strategy\\n     * @param _strategy The address of the strategy\\n     * @param _token The address of the token\\n     * @param _amount The amount that will be invested\\n     */\\n    function earn(\\n        address _strategy,\\n        address _token,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        notHalted\\n        onlyStrategy(_strategy)\\n        onlyVault()\\n    {\\n        // get the want token of the strategy\\n        address _want = IStrategy(_strategy).want();\\n        if (_want != _token) {\\n            IConverter _converter = IConverter(_vaultDetails[msg.sender].converter);\\n            IERC20(_token).safeTransfer(address(_converter), _amount);\\n            // TODO: do estimation for received\\n            _amount = _converter.convert(_token, _want, _amount, 1);\\n            IERC20(_want).safeTransfer(_strategy, _amount);\\n        } else {\\n            IERC20(_token).safeTransfer(_strategy, _amount);\\n        }\\n        _vaultDetails[msg.sender].balance = _vaultDetails[msg.sender].balance.add(_amount);\\n        // call the strategy deposit function\\n        IStrategy(_strategy).deposit();\\n        updateBalance(msg.sender, _strategy);\\n    }\\n\\n    /**\\n     * @notice Withdraws funds from a strategy\\n     * @dev If the withdraw amount is greater than the first strategy given\\n     * by getBestStrategyWithdraw, this function will loop over strategies\\n     * until the requested amount is met.\\n     * @param _token The address of the token\\n     * @param _amount The amount that will be withdrawn\\n     */\\n    function withdraw(\\n        address _token,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        onlyVault()\\n    {\\n        (\\n            address[] memory _strategies,\\n            uint256[] memory _amounts\\n        ) = getBestStrategyWithdraw(msg.sender, _amount);\\n        for (uint i = 0; i < _strategies.length; i++) {\\n            // getBestStrategyWithdraw will return arrays larger than needed\\n            // if this happens, simply exit the loop\\n            if (_strategies[i] == address(0)) {\\n                break;\\n            }\\n            IStrategy(_strategies[i]).withdraw(_amounts[i]);\\n            updateBalance(msg.sender, _strategies[i]);\\n            address _want = IStrategy(_strategies[i]).want();\\n            if (_want != _token) {\\n                address _converter = _vaultDetails[msg.sender].converter;\\n                IERC20(_want).safeTransfer(_converter, _amounts[i]);\\n                // TODO: do estimation for received\\n                IConverter(_converter).convert(_want, _token, _amounts[i], 1);\\n            }\\n        }\\n        _amount = IERC20(_token).balanceOf(address(this));\\n        _vaultDetails[msg.sender].balance = _vaultDetails[msg.sender].balance.sub(_amount);\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * EXTERNAL VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the rough balance of the sum of all strategies for a given vault\\n     * @dev This function is optimized to prevent looping over all strategy balances,\\n     * and instead the controller tracks the earn, withdraw, and harvest amounts.\\n     */\\n    function balanceOf()\\n        external\\n        view\\n        override\\n        returns (uint256 _balance)\\n    {\\n        return _vaultDetails[msg.sender].balance;\\n    }\\n\\n    /**\\n     * @notice Returns the converter assigned for the given vault\\n     * @param _vault Address of the vault\\n     */\\n    function converter(\\n        address _vault\\n    )\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return _vaultDetails[_vault].converter;\\n    }\\n\\n    /**\\n     * @notice Returns the cap of a strategy for a given vault\\n     * @param _vault The address of the vault\\n     * @param _strategy The address of the strategy\\n     */\\n    function getCap(\\n        address _vault,\\n        address _strategy\\n    )\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _vaultDetails[_vault].caps[_strategy];\\n    }\\n\\n    /**\\n     * @notice Returns whether investing is enabled for the calling vault\\n     * @dev Should be called by the vault\\n     */\\n    function investEnabled()\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        if (globalInvestEnabled) {\\n            return _vaultDetails[msg.sender].strategies.length > 0;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Returns all the strategies for a given vault\\n     * @param _vault The address of the vault\\n     */\\n    function strategies(\\n        address _vault\\n    )\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return _vaultDetails[_vault].strategies;\\n    }\\n\\n    /**\\n     * @notice Returns the length of the strategies of the calling vault\\n     * @dev This function is expected to be called by a vault\\n     */\\n    function strategies()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _vaultDetails[msg.sender].strategies.length;\\n    }\\n\\n    /**\\n     * INTERNAL FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the best (optimistic) strategy for funds to be withdrawn from\\n     * @dev Since Solidity doesn't support dynamic arrays in memory, the returned arrays\\n     * from this function will always be the same length as the amount of strategies for\\n     * a token. Check that _strategies[i] != address(0) when consuming to know when to\\n     * break out of the loop.\\n     * @param _vault The address of the vault\\n     * @param _amount The amount that will be withdrawn\\n     */\\n    function getBestStrategyWithdraw(\\n        address _vault,\\n        uint256 _amount\\n    )\\n        internal\\n        view\\n        returns (\\n            address[] memory _strategies,\\n            uint256[] memory _amounts\\n        )\\n    {\\n        // get the length of strategies for a single token\\n        uint256 k = _vaultDetails[_vault].strategies.length;\\n        // initialize fixed-length memory arrays\\n        _strategies = new address[](k);\\n        _amounts = new uint256[](k);\\n        address _strategy;\\n        uint256 _balance;\\n        // scan forward from the the beginning of strategies\\n        for (uint i = 0; i < k; i++) {\\n            _strategy = _vaultDetails[_vault].strategies[i];\\n            _strategies[i] = _strategy;\\n            // get the balance of the strategy\\n            _balance = _vaultDetails[_vault].balances[_strategy];\\n            // if the strategy doesn't have the balance to cover the withdraw\\n            if (_balance < _amount) {\\n                // withdraw what we can and add to the _amounts\\n                _amounts[i] = _balance;\\n                _amount = _amount.sub(_balance);\\n            } else {\\n                // stop scanning if the balance is more than the withdraw amount\\n                _amounts[i] = _amount;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the stored balance of a given strategy for a vault\\n     * @param _vault The address of the vault\\n     * @param _strategy The address of the strategy\\n     */\\n    function updateBalance(\\n        address _vault,\\n        address _strategy\\n    )\\n        internal\\n    {\\n        _vaultDetails[_vault].balances[_strategy] = IStrategy(_strategy).balanceOf();\\n    }\\n\\n    /**\\n     * MODIFIERS\\n     */\\n\\n    /**\\n     * @notice Reverts if the protocol is halted\\n     */\\n    modifier notHalted() {\\n        require(!manager.halted(), \\\"halted\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if the caller is not governance\\n     */\\n    modifier onlyGovernance() {\\n        require(msg.sender == manager.governance(), \\\"!governance\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if the caller is not the strategist\\n     */\\n    modifier onlyStrategist() {\\n        require(msg.sender == manager.strategist(), \\\"!strategist\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if the strategy is not allowed in the manager\\n     */\\n    modifier onlyStrategy(address _strategy) {\\n        require(manager.allowedStrategies(_strategy), \\\"!allowedStrategy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if the caller is not the harvester\\n     */\\n    modifier onlyHarvester() {\\n        require(msg.sender == manager.harvester(), \\\"!harvester\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if the caller is not the vault for the given token\\n     */\\n    modifier onlyVault() {\\n        require(manager.allowedVaults(msg.sender), \\\"!vault\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v3/interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IController {\\n    function balanceOf() external view returns (uint256);\\n    function converter(address _vault) external view returns (address);\\n    function earn(address _strategy, address _token, uint256 _amount) external;\\n    function investEnabled() external view returns (bool);\\n    function harvestStrategy(address _strategy, uint256[] calldata _estimates) external;\\n    function manager() external view returns (IManager);\\n    function strategies() external view returns (uint256);\\n    function withdraw(address _token, uint256 _amount) external;\\n    function withdrawAll(address _strategy, address _convert) external;\\n}\\n\"\r\n    },\r\n    \"contracts/v3/interfaces/IConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IConverter {\\n    function manager() external view returns (IManager);\\n    function convert(\\n        address _input,\\n        address _output,\\n        uint256 _inputAmount,\\n        uint256 _estimatedOutput\\n    ) external returns (uint256 _outputAmount);\\n    function expected(\\n        address _input,\\n        address _output,\\n        uint256 _inputAmount\\n    ) external view returns (uint256 _outputAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/v3/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IVault {\\n    function available() external view returns (uint256);\\n    function balance() external view returns (uint256);\\n    function deposit(uint256 _amount) external returns (uint256);\\n    function earn(address _strategy) external;\\n    function gauge() external returns (address);\\n    function getLPToken() external view returns (address);\\n    function getPricePerFullShare() external view returns (uint256);\\n    function getToken() external view returns (address);\\n    function manager() external view returns (IManager);\\n    function withdraw(uint256 _amount) external;\\n    function withdrawAll() external;\\n    function withdrawFee(uint256 _amount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/v3/interfaces/IHarvester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IHarvester {\\n    function addStrategy(address, address, uint256) external;\\n    function manager() external view returns (IManager);\\n    function removeStrategy(address, address, uint256) external;\\n    function slippage() external view returns (uint256);\\n}\\n\\n\"\r\n    },\r\n    \"contracts/v3/interfaces/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\nimport \\\"./ISwap.sol\\\";\\n\\ninterface IStrategy {\\n    function balanceOf() external view returns (uint256);\\n    function balanceOfPool() external view returns (uint256);\\n    function balanceOfWant() external view returns (uint256);\\n    function deposit() external;\\n    function harvest(uint256[] calldata) external;\\n    function manager() external view returns (IManager);\\n    function name() external view returns (string memory);\\n    function router() external view returns (ISwap);\\n    function skim() external;\\n    function want() external view returns (address);\\n    function weth() external view returns (address);\\n    function withdraw(address) external;\\n    function withdraw(uint256) external;\\n    function withdrawAll() external;\\n}\\n\\ninterface IStrategyExtended {\\n    function getEstimates() external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/v3/interfaces/IManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IManager {\\n    function addVault(address) external;\\n    function allowedControllers(address) external view returns (bool);\\n    function allowedConverters(address) external view returns (bool);\\n    function allowedStrategies(address) external view returns (bool);\\n    function allowedVaults(address) external view returns (bool);\\n    function controllers(address) external view returns (address);\\n    function getHarvestFeeInfo() external view returns (address, address, uint256);\\n    function getToken(address) external view returns (address);\\n    function governance() external view returns (address);\\n    function halted() external view returns (bool);\\n    function harvester() external view returns (address);\\n    function insuranceFee() external view returns (uint256);\\n    function insurancePool() external view returns (address);\\n    function insurancePoolFee() external view returns (uint256);\\n    function pendingStrategist() external view returns (address);\\n    function removeVault(address) external;\\n    function stakingPool() external view returns (address);\\n    function stakingPoolShareFee() external view returns (uint256);\\n    function strategist() external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasuryFee() external view returns (uint256);\\n    function withdrawalProtectionFee() external view returns (uint256);\\n    function yaxis() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v3/interfaces/ISwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface ISwap {\\n    function swapExactTokensForTokens(uint256, uint256, address[] calldata, address, uint256) external;\\n    function getAmountsOut(uint256, address[] calldata) external view returns (uint256[] memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy2\",\"type\":\"address\"}],\"name\":\"StrategiesReordered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"converter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"getCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalInvestEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_estimates\",\"type\":\"uint256[]\"}],\"name\":\"harvestStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"inCaseStrategyGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract IManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStrategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy2\",\"type\":\"address\"}],\"name\":\"reorderStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_convert\",\"type\":\"address\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_converter\",\"type\":\"address\"}],\"name\":\"setConverter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_investEnabled\",\"type\":\"bool\"}],\"name\":\"setInvestEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxStrategies\",\"type\":\"uint256\"}],\"name\":\"setMaxStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_convert\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Controller","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ab72cc293b63f6477baf9d514da735cf6caadc2d","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}