{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/EPNSCommV1.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n// SPDX-License-Identifier: MIT\\n\\n/**\\n * EPNS Communicator, as the name suggests, is more of a Communictation Layer\\n * between END USERS and EPNS Core Protocol.\\n * The Communicator Protocol is comparatively much simpler & involves basic\\n * details, specifically about the USERS of the Protocols\\n\\n * Some imperative functionalities that the EPNS Communicator Protocol allows\\n * are Subscribing to a particular channel, Unsubscribing a channel, Sending\\n * Notifications to a particular recipient or all subscribers of a Channel etc.\\n**/\\n\\n// Essential Imports\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\ncontract EPNSCommV1 is Initializable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice User Struct that involves imperative details about\\n     * a specific User.\\n     **/\\n    struct User {\\n        // @notice Depicts whether or not a user is ACTIVE\\n        bool userActivated;\\n\\n        // @notice Will be false until public key is emitted\\n        bool publicKeyRegistered;\\n\\n        // @notice Events should not be polled before this block as user doesn't exist\\n        uint256 userStartBlock;\\n\\n        // @notice Keep track of subscribers\\n        uint256 subscribedCount;\\n\\n        /**\\n         * Depicts if User subscribed to a Specific Channel Address\\n         * 1 -> User is Subscribed\\n         * 0 -> User is NOT SUBSCRIBED\\n         **/\\n        mapping(address => uint8) isSubscribed;\\n\\n        // Keeps track of all subscribed channels\\n        mapping(address => uint256) subscribed;\\n        mapping(uint256 => address) mapAddressSubscribed;\\n    }\\n\\n    /** MAPPINGS **/\\n    mapping(address => User) public users;\\n    mapping(address => uint256) public nonces;\\n    mapping(uint256 => address) public mapAddressUsers;\\n    mapping(address => mapping(address => string)) public userToChannelNotifs;\\n    mapping(address => mapping(address => bool)) public delegatedNotificationSenders;\\n\\n    /** STATE VARIABLES **/\\n    address public governance;\\n    address public pushChannelAdmin;\\n    uint256 public chainID;\\n    uint256 public usersCount;\\n    bool public isMigrationComplete;\\n    address public EPNSCoreAddress;\\n    string public chainName;\\n    string public constant name = \\\"EPNS COMM V1\\\";\\n    bytes32 public constant NAME_HASH = keccak256(bytes(name));\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\n        );\\n    bytes32 public constant SUBSCRIBE_TYPEHASH =\\n        keccak256(\\\"Subscribe(address channel,uint256 nonce,uint256 expiry)\\\");\\n    bytes32 public constant UNSUBSCRIBE_TYPEHASH =\\n        keccak256(\\\"Unsubscribe(address channel,uint256 nonce,uint256 expiry)\\\");\\n    bytes32 public constant SEND_NOTIFICATION_TYPEHASH =\\n        keccak256(\\n            \\\"SendNotification(address channel,address delegate,address recipient,bytes identity,uint256 nonce,uint256 expiry)\\\"\\n        );\\n    /** EVENTS **/\\n    event SendNotification(\\n        address indexed channel,\\n        address indexed recipient,\\n        bytes identity\\n    );\\n    event UserNotifcationSettingsAdded(\\n        address _channel,\\n        address _user,\\n        uint256 _notifID,\\n        string _notifSettings\\n    );\\n    event AddDelegate(address channel, address delegate);\\n    event RemoveDelegate(address channel, address delegate);\\n    event Subscribe(address indexed channel, address indexed user);\\n    event Unsubscribe(address indexed channel, address indexed user);\\n    event PublicKeyRegistered(address indexed owner, bytes publickey);\\n    event ChannelAlias(string _chainName, uint256 indexed _chainID, address indexed _channelOwnerAddress, string _ethereumChannelAddress);\\n\\n    /** MODIFIERS **/\\n\\n    modifier onlyPushChannelAdmin() {\\n        require(msg.sender == pushChannelAdmin, \\\"EPNSCommV1::onlyPushChannelAdmin: user not pushChannelAdmin\\\");\\n        _;\\n    }\\n\\n    modifier onlyEPNSCore() {\\n        require(msg.sender == EPNSCoreAddress, \\\"EPNSCommV1::onlyEPNSCore: Caller NOT EPNSCore\\\");\\n        _;\\n    }\\n\\n    modifier sendNotifViaSignReq(\\n        address _channel,\\n        address _recipient,\\n        address signatory\\n    ) {\\n        require(\\n            (_channel == signatory) ||\\n                (delegatedNotificationSenders[_channel][signatory]) ||\\n                (_recipient == signatory),\\n            \\\"EPNSCommV1::sendNotifViaSignReq: Invalid Channel, Delegate Or Subscriber\\\"\\n        );\\n        _;\\n    }\\n\\n    /* ***************\\n\\n        INITIALIZER\\n\\n    *************** */\\n    function initialize(address _pushChannelAdmin, string memory _chainName) public initializer returns (bool) {\\n        pushChannelAdmin = _pushChannelAdmin;\\n        governance = _pushChannelAdmin;\\n        chainName = _chainName;\\n        chainID = getChainId();\\n        return true;\\n    }\\n\\n    /****************\\n\\n    => SETTER FUNCTIONS <=\\n\\n    ****************/\\n    function verifyChannelAlias(string memory _channelAddress) external{\\n      emit ChannelAlias(chainName, chainID, msg.sender, _channelAddress);\\n    }\\n\\n    function completeMigration() external onlyPushChannelAdmin{\\n        isMigrationComplete = true;\\n    }\\n\\n    function setEPNSCoreAddress(address _coreAddress) external onlyPushChannelAdmin {\\n        EPNSCoreAddress = _coreAddress;\\n    }\\n\\n    function setGovernanceAddress(address _governanceAddress) external onlyPushChannelAdmin{\\n      governance = _governanceAddress;\\n    }\\n\\n    function transferPushChannelAdminControl(address _newAdmin) public onlyPushChannelAdmin {\\n        require(_newAdmin != address(0), \\\"EPNSCommV1::transferPushChannelAdminControl: Invalid Address\\\");\\n        require(_newAdmin != pushChannelAdmin, \\\"EPNSCommV1::transferPushChannelAdminControl: Admin address is same\\\");\\n        pushChannelAdmin = _newAdmin;\\n    }\\n\\n    /****************\\n\\n    => SUBSCRIBE FUNCTIOANLTIES <=\\n\\n    ****************/\\n\\n    /**\\n     * @notice Helper function to check if User is Subscribed to a Specific Address\\n     * @param _channel address of the channel that the user is subscribing to\\n     * @param _user address of the Subscriber\\n     * @return isSubscriber True if User is actually a subscriber of a Channel\\n     **/\\n    function isUserSubscribed(address _channel, address _user)\\n        public\\n        view\\n        returns (bool isSubscriber)\\n    {\\n        User storage user = users[_user];\\n        if (user.isSubscribed[_channel] == 1) {\\n            isSubscriber = true;\\n        }\\n    }\\n\\n    /**\\n     * @notice External Subscribe Function that allows users to Diretly interact with the Base Subscribe function\\n     * @dev   Subscribes the caller of the function to a particular Channel\\n     *        Takes into Consideration the \\\"msg.sender\\\"\\n     * @param _channel address of the channel that the user is subscribing to\\n     **/\\n    function subscribe(address _channel) external returns (bool) {\\n        _subscribe(_channel, msg.sender);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Allows users to subscribe a List of Channels at once\\n     *\\n     * @param _channelList array of addresses of the channels that the user wishes to Subscribe\\n     **/\\n    function batchSubscribe(address[] calldata _channelList)\\n        external\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i < _channelList.length; i++) {\\n            _subscribe(_channelList[i], msg.sender);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice This Function helps in migrating the already existing Subscriber's data to the New protocol\\n     *\\n     * @dev     Can only be called by pushChannelAdmin\\n     *          Can only be called if the Migration is not yet complete, i.e., \\\"isMigrationComplete\\\" boolean must be false\\n     *          Subscribes the Users to the respective Channels as per the arguments passed to the function\\n     *\\n     * @param _startIndex  starting Index for the LOOP\\n     * @param _endIndex    Last Index for the LOOP\\n     * @param _channelList array of addresses of the channels\\n     * @param _usersList   array of addresses of the Users or Subscribers of the Channels\\n     **/\\n\\n    function migrateSubscribeData(\\n        uint256 _startIndex,\\n        uint256 _endIndex,\\n        address[] calldata _channelList,\\n        address[] calldata _usersList\\n    ) external onlyPushChannelAdmin returns (bool) {\\n        require(\\n            !isMigrationComplete,\\n            \\\"EPNSCommV1::migrateSubscribeData: Migration of Subscribe Data is Complete Already\\\"\\n        );\\n        require(\\n            _channelList.length == _usersList.length,\\n            \\\"EPNSCommV1::migrateSubscribeData: Unequal Arrays passed as Argument\\\"\\n        );\\n\\n        for (uint256 i = _startIndex; i < _endIndex; i++) {\\n            if(isUserSubscribed(_channelList[i], _usersList[i])){\\n                continue;\\n            }else{\\n                _subscribe(_channelList[i], _usersList[i]);\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Base Subscribe Function that allows users to Subscribe to a Particular Channel\\n     *\\n     * @dev Initializes the User Struct with crucial details about the Channel Subscription\\n     *      Addes the caller as a an Activated User of the protocol. (Only if the user hasn't been added already)\\n     *\\n     * @param _channel address of the channel that the user is subscribing to\\n     * @param _user    address of the Subscriber\\n     **/\\n    function _subscribe(address _channel, address _user) private {\\n        require(\\n            !isUserSubscribed(_channel, _user),\\n            \\\"EPNSCommV1::_subscribe: User already Subscribed\\\"\\n        );\\n\\n        _addUser(_user);\\n\\n        User storage user = users[_user];\\n\\n        user.isSubscribed[_channel] = 1;\\n        // treat the count as index and update user struct\\n        user.subscribed[_channel] = user.subscribedCount;\\n        user.mapAddressSubscribed[user.subscribedCount] = _channel;\\n        user.subscribedCount = user.subscribedCount.add(1); // Finally increment the subscribed count\\n        // Emit it\\n        emit Subscribe(_channel, _user);\\n    }\\n\\n    /**\\n     * @notice Subscribe Function through Meta TX\\n     * @dev Takes into Consideration the Sign of the User\\n     **/\\n    function subscribeBySig(\\n        address channel,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                NAME_HASH,\\n                getChainId(),\\n                address(this)\\n            )\\n        );\\n        bytes32 structHash = keccak256(\\n            abi.encode(SUBSCRIBE_TYPEHASH, channel, nonce, expiry)\\n        );\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n        );\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"EPNSCommV1::subscribeBySig: Invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"EPNSCommV1::subscribeBySig: Invalid nonce\\\");\\n        require(now <= expiry, \\\"EPNSCommV1::subscribeBySig: Signature expired\\\");\\n        _subscribe(channel, signatory);\\n    }\\n\\n    /**\\n     * @notice Allows EPNSCore contract to call the Base Subscribe function whenever a User Creates his/her own Channel.\\n     *         This ensures that the Channel Owner is subscribed to imperative EPNS Channels as well as his/her own Channel.\\n     *\\n     * @dev    Only Callable by the EPNSCore. This is to ensure that Users should only able to Subscribe for their own addresses.\\n     *         The caller of the main Subscribe function should Either Be the USERS themselves(for their own addresses) or the EPNSCore contract\\n     *\\n     * @param _channel address of the channel that the user is subscribing to\\n     * @param _user address of the Subscriber of a Channel\\n     **/\\n    function subscribeViaCore(address _channel, address _user)\\n        external\\n        onlyEPNSCore\\n        returns (bool)\\n    {\\n        _subscribe(_channel, _user);\\n        return true;\\n    }\\n\\n    /****************\\n\\n    => USUBSCRIBE FUNCTIOANLTIES <=\\n\\n    ****************/\\n\\n    /**\\n     * @notice External Unsubcribe Function that allows users to directly unsubscribe from a particular channel\\n     *\\n     * @dev UnSubscribes the caller of the function from the particular Channel.\\n     *      Takes into Consideration the \\\"msg.sender\\\"\\n     *\\n     * @param _channel address of the channel that the user is subscribing to\\n     **/\\n    function unsubscribe(address _channel) external returns (bool){\\n        // Call actual unsubscribe\\n        _unsubscribe(_channel, msg.sender);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Allows users to unsubscribe from a List of Channels at once\\n     *\\n     * @param _channelList array of addresses of the channels that the user wishes to Unsubscribe\\n     **/\\n    function batchUnsubscribe(address[] calldata _channelList)\\n        external\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i < _channelList.length; i++) {\\n            _unsubscribe(_channelList[i], msg.sender);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Base Usubscribe Function that allows users to UNSUBSCRIBE from a Particular Channel\\n     * @dev Modifies the User Struct with crucial details about the Channel Unsubscription\\n     * @param _channel address of the channel that the user is subscribing to\\n     * @param _user address of the Subscriber\\n     **/\\n    function _unsubscribe(address _channel, address _user) private {\\n        require(\\n            isUserSubscribed(_channel, _user),\\n            \\\"EPNSCommV1::_unsubscribe: User not subscribed to channel\\\"\\n        );\\n        // Add the channel to gray list so that it can't subscriber the user again as delegated\\n        User storage user = users[_user];\\n\\n        user.isSubscribed[_channel] = 0;\\n        // Remove the mappings and cleanup\\n        // a bit tricky, swap and delete to maintain mapping\\n        // Remove From Users mapping\\n        // Find the id of the channel and swap it with the last id, use channel.memberCount as index\\n        // Slack too deep fix\\n        // address usrSubToSwapAdrr = user.mapAddressSubscribed[user.subscribedCount];\\n        // uint usrSubSwapID = user.subscribed[_channel];\\n\\n        // // swap to last one and then\\n        // user.subscribed[usrSubToSwapAdrr] = usrSubSwapID;\\n        // user.mapAddressSubscribed[usrSubSwapID] = usrSubToSwapAdrr;\\n\\n        user.subscribed[user.mapAddressSubscribed[user.subscribedCount]] = user\\n            .subscribed[_channel];\\n        user.mapAddressSubscribed[user.subscribed[_channel]] = user\\n            .mapAddressSubscribed[user.subscribedCount];\\n\\n        // delete the last one and substract\\n        delete (user.subscribed[_channel]);\\n        delete (user.mapAddressSubscribed[user.subscribedCount]);\\n        user.subscribedCount = user.subscribedCount.sub(1);\\n\\n        // Emit it\\n        emit Unsubscribe(_channel, _user);\\n    }\\n\\n    /**\\n     * @notice Unsubscribe Function through Meta TX\\n     * @dev Takes into Consideration the Signer of the transactioner\\n     **/\\n    function unsubscribeBySig(\\n        address channel,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                NAME_HASH,\\n                getChainId(),\\n                address(this)\\n            )\\n        );\\n        bytes32 structHash = keccak256(\\n            abi.encode(UNSUBSCRIBE_TYPEHASH, channel, nonce, expiry)\\n        );\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n        );\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"EPNSCommV1::unsubscribeBySig: Invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"EPNSCommV1::unsubscribeBySig: Invalid nonce\\\");\\n        require(now <= expiry, \\\"EPNSCommV1::unsubscribeBySig: Signature expired\\\");\\n        _unsubscribe(channel, signatory);\\n    }\\n\\n    /* **************\\n\\n    => PUBLIC KEY BROADCASTING & USER ADDING FUNCTIONALITIES <=\\n\\n    *************** */\\n\\n    /**\\n     * @notice Activates/Adds a particular User's Address in the Protocol.\\n     *         Keeps track of the Total User Count\\n     * @dev   Executes its main actions only if the User is not activated yet.\\n     *        Does nothing if an address has already been added.\\n     *\\n     * @param _user address of the user\\n     * @return userAlreadyAdded returns whether or not a user is already added.\\n     **/\\n    function _addUser(address _user) private returns (bool userAlreadyAdded) {\\n        if (users[_user].userActivated) {\\n            userAlreadyAdded = true;\\n        } else {\\n            // Activates the user\\n            users[_user].userStartBlock = block.number;\\n            users[_user].userActivated = true;\\n            mapAddressUsers[usersCount] = _user;\\n\\n            usersCount = usersCount.add(1);\\n        }\\n    }\\n\\n    /* @dev Internal system to handle broadcasting of public key,\\n     *     A entry point for subscribe, or create channel but is optional\\n     */\\n    function _broadcastPublicKey(address _userAddr, bytes memory _publicKey)\\n        private\\n    {\\n        // Add the user, will do nothing if added already, but is needed before broadcast\\n        _addUser(_userAddr);\\n\\n        // get address from public key\\n        address userAddr = getWalletFromPublicKey(_publicKey);\\n\\n        if (_userAddr == userAddr) {\\n            // Only change it when verification suceeds, else assume the channel just wants to send group message\\n            users[userAddr].publicKeyRegistered = true;\\n\\n            // Emit the event out\\n            emit PublicKeyRegistered(userAddr, _publicKey);\\n        } else {\\n            revert(\\\"Public Key Validation Failed\\\");\\n        }\\n    }\\n\\n    /// @dev Don't forget to add 0x into it\\n    function getWalletFromPublicKey(bytes memory _publicKey)\\n        public\\n        pure\\n        returns (address wallet)\\n    {\\n        if (_publicKey.length == 64) {\\n            wallet = address(uint160(uint256(keccak256(_publicKey))));\\n        } else {\\n            wallet = 0x0000000000000000000000000000000000000000;\\n        }\\n    }\\n\\n    /// @dev Performs action by the user themself to broadcast their public key\\n    function broadcastUserPublicKey(bytes calldata _publicKey) external {\\n        // Will save gas\\n        if (users[msg.sender].publicKeyRegistered) {\\n            // Nothing to do, user already registered\\n            return;\\n        }\\n\\n        // broadcast it\\n        _broadcastPublicKey(msg.sender, _publicKey);\\n    }\\n\\n    /* **************\\n\\n    => SEND NOTIFICATION FUNCTIONALITIES <=\\n\\n    *************** */\\n\\n    /**\\n     * @notice Allows a Channel Owner to ADD a Delegate for sending Notifications\\n     *         Delegate shall be able to send Notification on the Channel's Behalf\\n     * @dev    This function will be only be callable by the Channel Owner from the EPNSCore contract.\\n     * NOTE:   Verification of whether or not a Channel Address is actually the owner of the Channel, will be done via the PUSH NODES.\\n     *\\n     * @param _delegate address of the delegate who is allowed to Send Notifications\\n     **/\\n    function addDelegate(address _delegate) external {\\n        delegatedNotificationSenders[msg.sender][_delegate] = true;\\n        emit AddDelegate(msg.sender, _delegate);\\n    }\\n\\n    /**\\n     * @notice Allows a Channel Owner to Remove a Delegate's Permission to Send Notification\\n     * @dev    This function will be only be callable by the Channel Owner from the EPNSCore contract.\\n     * NOTE:   Verification of whether or not a Channel Address is actually the owner of the Channel, will be done via the PUSH NODES.\\n     * @param _delegate address of the delegate who is allowed to Send Notifications\\n     **/\\n    function removeDelegate(address _delegate) external {\\n        delegatedNotificationSenders[msg.sender][_delegate] = false;\\n        emit RemoveDelegate(msg.sender, _delegate);\\n    }\\n\\n    /***\\n      THREE main CALLERS for this function-\\n        1. Channel Owner sends Notif to all Subscribers / Subset of Subscribers / Individual Subscriber\\n        2. Delegatee of Channel sends Notif to Recipients\\n        3. User sends Notifs to Themselvs via a Channel\\n           NOTE: A user can only send notification to their own address\\n    <---------------------------------------------------------------------------------------------->\\n     * When a CHANNEL OWNER Calls the Function and sends a Notif:\\n     *    -> We ensure -> \\\"Channel Owner Must be Valid\\\" && \\\"Channel Owner is the Caller\\\"\\n     *    -> NOTE - Validation of wether or not an address is a CHANNEL, is done via PUSH NODES\\n     *\\n     * When a Delegatee wants to send Notif to Recipient:\\n     *   -> We ensure \\\"Delegate is the Caller\\\" && \\\"Delegatee is Approved by Chnnel Owner\\\"\\n     *\\n     * When User wants to Send a Notif to themselves:\\n     *  ->  We ensure \\\"Caller of the Function is the Recipient of the Notification\\\"\\n    **/\\n\\n    function _checkNotifReq\\n    (\\n      address _channel,\\n      address _recipient\\n    ) private view\\n    {\\n      require(\\n          (_channel == 0x0000000000000000000000000000000000000000 &&\\n              msg.sender == pushChannelAdmin) ||\\n              (_channel == msg.sender) ||\\n              (delegatedNotificationSenders[_channel][msg.sender]) ||\\n              (_recipient == msg.sender),\\n          \\\"EPNSCommV1::_checkNotifReq: Invalid Channel, Delegate or Subscriber\\\"\\n      );\\n    }\\n    /**\\n     * @notice Allows a Channel Owners, Delegates as well as Users to send Notifications\\n     * @dev Emits out notification details once all the requirements are passed.\\n     * @param _channel address of the Channel\\n     * @param _recipient address of the reciever of the Notification\\n     * @param _identity Info about the Notification\\n     **/\\n    function sendNotification(\\n        address _channel,\\n        address _recipient,\\n        bytes memory _identity\\n    ) public {\\n        _checkNotifReq(_channel, _recipient);\\n        // Emit the message out\\n        emit SendNotification(_channel, _recipient, _identity);\\n    }\\n\\n\\n    /**\\n     * @notice Base Notification Function that Allows a Channel Owners, Delegates as well as Users to send Notifications\\n     *\\n     * @dev   Specifically designed to be called via the EIP 712 send notif function.\\n     *        Takes into consideration the Signatory address to perform all the imperative checks\\n     *\\n     * @param _channel address of the Channel\\n     * @param _recipient address of the reciever of the Notification\\n     * @param _signatory address of the SIGNER of the Send Notif Function call transaction\\n     * @param _identity Info about the Notification\\n     **/\\n    function _sendNotification(\\n        address _channel,\\n        address _recipient,\\n        address _signatory,\\n        bytes calldata _identity\\n    )\\n        private\\n        sendNotifViaSignReq(\\n            _channel,\\n            _recipient,\\n            _signatory\\n        )\\n    {\\n        // Emit the message out\\n        emit SendNotification(_channel, _recipient, _identity);\\n    }\\n    /**\\n     * @notice Meta transaction function for Sending Notifications\\n     * @dev   Allows the Caller to Simply Sign the transaction to initiate the Send Notif Function\\n     **/\\n\\n    function sendNotifBySig(\\n        address _channel,\\n        address _recipient,\\n        bytes calldata _identity,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                NAME_HASH,\\n                getChainId(),\\n                address(this)\\n            )\\n        );\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                SEND_NOTIFICATION_TYPEHASH,\\n                _channel,\\n                _recipient,\\n                _identity,\\n                nonce,\\n                expiry\\n            )\\n        );\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n        );\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"EPNSCommV1::sendNotifBySig: Invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"EPNSCommV1::sendNotifBySig: Invalid nonce\\\");\\n        require(now <= expiry, \\\"EPNSCommV1::sendNotifBySig: Signature expired\\\");\\n        _sendNotification(\\n            _channel,\\n            _recipient,\\n            signatory,\\n            _identity\\n        );\\n    }\\n\\n    /* **************\\n\\n    => User Notification Settings Function <=\\n    *************** */\\n\\n    /**\\n     * @notice  Allows Users to Create and Subscribe to a Specific Notication Setting for a Channel.\\n     * @dev     Updates the userToChannelNotifs mapping to keep track of a User's Notification Settings for a Specific Channel\\n     *\\n     *          Deliminated Notification Settings string contains -> Decimal Representation Notif Settings + Notification Settings\\n     *          For instance, for a Notif Setting that looks like -> 3+1-0+2-0+3-1+4-98\\n     *          3 -> Decimal Representation of the Notification Options selected by the User\\n     *\\n     *          For Boolean Type Notif Options\\n     *          1-0 -> 1 stands for Option 1 - 0 Means the user didn't choose that Notif Option.\\n     *          3-1 stands for Option 3      - 1 Means the User Selected the 3rd boolean Option\\n     *\\n     *          For SLIDER TYPE Notif Options\\n     *          2-0 -> 2 stands for Option 2 - 0 is user's Choice\\n     *          4-98-> 4 stands for Option 4 - 98is user's Choice\\n     *\\n     * @param   _channel - Address of the Channel for which the user is creating the Notif settings\\n     * @param   _notifID- Decimal Representation of the Options selected by the user\\n     * @param   _notifSettings - Deliminated string that depicts the User's Notifcation Settings\\n     *\\n     **/\\n\\n    function changeUserChannelSettings(\\n        address _channel,\\n        uint256 _notifID,\\n        string calldata _notifSettings\\n    ) external {\\n        require(\\n            isUserSubscribed(_channel, msg.sender),\\n            \\\"EPNSCommV1::changeUserChannelSettings: User not Subscribed to Channel\\\"\\n        );\\n        string memory notifSetting = string(\\n            abi.encodePacked(Strings.toString(_notifID), \\\"+\\\", _notifSettings)\\n        );\\n        userToChannelNotifs[msg.sender][_channel] = notifSetting;\\n        emit UserNotifcationSettingsAdded(\\n            _channel,\\n            msg.sender,\\n            _notifID,\\n            notifSetting\\n        );\\n    }\\n\\n    function getChainId() internal pure returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"AddDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_chainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_channelOwnerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_ethereumChannelAddress\",\"type\":\"string\"}],\"name\":\"ChannelAlias\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publickey\",\"type\":\"bytes\"}],\"name\":\"PublicKeyRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"RemoveDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"identity\",\"type\":\"bytes\"}],\"name\":\"SendNotification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Subscribe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Unsubscribe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_channel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_notifID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_notifSettings\",\"type\":\"string\"}],\"name\":\"UserNotifcationSettingsAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EPNSCoreAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEND_NOTIFICATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUBSCRIBE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSUBSCRIBE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"addDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_channelList\",\"type\":\"address[]\"}],\"name\":\"batchSubscribe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_channelList\",\"type\":\"address[]\"}],\"name\":\"batchUnsubscribe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"broadcastUserPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_channel\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_notifID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_notifSettings\",\"type\":\"string\"}],\"name\":\"changeUserChannelSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatedNotificationSenders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"getWalletFromPublicKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pushChannelAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrationComplete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_channel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isUserSubscribed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSubscriber\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapAddressUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endIndex\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_channelList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_usersList\",\"type\":\"address[]\"}],\"name\":\"migrateSubscribeData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pushChannelAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"removeDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_channel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_identity\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"sendNotifBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_channel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_identity\",\"type\":\"bytes\"}],\"name\":\"sendNotification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coreAddress\",\"type\":\"address\"}],\"name\":\"setEPNSCoreAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"}],\"name\":\"setGovernanceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_channel\",\"type\":\"address\"}],\"name\":\"subscribe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"subscribeBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_channel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"subscribeViaCore\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferPushChannelAdminControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_channel\",\"type\":\"address\"}],\"name\":\"unsubscribe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"unsubscribeBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToChannelNotifs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"userActivated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"publicKeyRegistered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"userStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subscribedCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_channelAddress\",\"type\":\"string\"}],\"name\":\"verifyChannelAlias\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EPNSCommV1","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"9999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}