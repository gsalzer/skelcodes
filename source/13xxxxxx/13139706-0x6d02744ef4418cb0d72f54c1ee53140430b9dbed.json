{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/KetherNFTLoaner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\ninterface IKetherNFT {\\n  function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId\\n  ) external payable;\\n\\n  function publish(\\n    uint256 _idx,\\n    string calldata _link,\\n    string calldata _image,\\n    string calldata _title,\\n    bool _NSFW\\n  ) external;\\n}\\n\\n/**\\n * @title KetherNFTLoaner\\n * @dev Support loaning KetherNFT plots of ad space to others over a period of time\\n */\\ncontract KetherNFTLoaner is Ownable {\\n  using SafeMath for uint256;\\n\\n  uint256 private constant _1ETH = 1 ether;\\n  uint256 public loanServiceCharge = _1ETH.div(100).mul(5);\\n  uint256 public loanChargePerDay = _1ETH.div(1000);\\n  uint16 public maxLoanDurationDays = 30;\\n  uint8 public loanPercentageCharge = 10;\\n  IKetherNFT private _ketherNft;\\n\\n  struct PlotOwner {\\n    address owner;\\n    uint256 overrideLoanChargePerDay;\\n    uint16 overrideMaxLoanDurationDays;\\n    uint256 totalFeesCollected;\\n  }\\n\\n  struct PlotLoan {\\n    address loaner;\\n    uint256 start;\\n    uint256 end;\\n    uint256 totalFee;\\n  }\\n\\n  struct PublishParams {\\n    string link;\\n    string image;\\n    string title;\\n    bool NSFW;\\n  }\\n\\n  mapping(uint256 => PlotOwner) public owners;\\n  mapping(uint256 => PlotLoan) public loans;\\n\\n  event AddPlot(\\n    uint256 indexed idx,\\n    address owner,\\n    uint256 overridePerDayCharge,\\n    uint16 overrideMaxLoanDays\\n  );\\n  event UpdatePlot(\\n    uint256 indexed idx,\\n    uint256 overridePerDayCharge,\\n    uint16 overrideMaxLoanDays\\n  );\\n  event RemovePlot(uint256 indexed idx, address owner);\\n  event LoanPlot(uint256 indexed idx, address loaner);\\n  event Transfer(address to, uint256 idx);\\n\\n  constructor(address _ketherNFTAddress) {\\n    _ketherNft = IKetherNFT(_ketherNFTAddress);\\n  }\\n\\n  function addPlot(\\n    uint256 _idx,\\n    uint256 _overridePerDayCharge,\\n    uint16 _overrideMaxDays\\n  ) external payable {\\n    require(\\n      msg.sender == _ketherNft.ownerOf(_idx),\\n      'You need to be the owner of the plot to loan it out.'\\n    );\\n    require(\\n      msg.value >= loanServiceCharge,\\n      'You must send the appropriate service charge to support loaning your plot.'\\n    );\\n    payable(owner()).call{ value: msg.value }('');\\n    _ketherNft.transferFrom(msg.sender, address(this), _idx);\\n    owners[_idx] = PlotOwner({\\n      owner: msg.sender,\\n      overrideLoanChargePerDay: _overridePerDayCharge,\\n      overrideMaxLoanDurationDays: _overrideMaxDays,\\n      totalFeesCollected: 0\\n    });\\n    emit AddPlot(_idx, msg.sender, _overridePerDayCharge, _overrideMaxDays);\\n  }\\n\\n  function updatePlot(\\n    uint256 _idx,\\n    uint256 _overridePerDayCharge,\\n    uint16 _overrideMaxDays\\n  ) external {\\n    PlotOwner storage _owner = owners[_idx];\\n    require(\\n      msg.sender == _owner.owner,\\n      'You must be the plot owner to update information about it.'\\n    );\\n    _owner.overrideLoanChargePerDay = _overridePerDayCharge;\\n    _owner.overrideMaxLoanDurationDays = _overrideMaxDays;\\n    emit UpdatePlot(_idx, _overridePerDayCharge, _overrideMaxDays);\\n  }\\n\\n  function removePlot(uint256 _idx) external payable {\\n    address _owner = owners[_idx].owner;\\n    require(\\n      msg.sender == _owner,\\n      'You must be the original owner of the plot to remove it from the loan contract.'\\n    );\\n\\n    // If there is an active loan, make sure the owner of the plot who's removing pays the loaner\\n    // back a the full amount of the original loan fee for breaking the loan agreement\\n    if (hasActiveLoan(_idx)) {\\n      PlotLoan memory _loan = loans[_idx];\\n      uint256 _loanFee = _loan.totalFee;\\n      require(\\n        msg.value >= _loanFee,\\n        'You need to reimburse the loaner for breaking the loan agreement early.'\\n      );\\n      payable(_loan.loaner).call{ value: _loanFee }('');\\n    }\\n\\n    _ketherNft.transferFrom(address(this), msg.sender, _idx);\\n    emit RemovePlot(_idx, msg.sender);\\n  }\\n\\n  function loanPlot(\\n    uint256 _idx,\\n    uint16 _numDays,\\n    PublishParams memory _publishParams\\n  ) external payable {\\n    require(_numDays > 0, 'You must loan the plot for at least a day.');\\n\\n    PlotOwner storage _plotOwner = owners[_idx];\\n    PlotLoan memory _loan = loans[_idx];\\n    require(_loan.end < block.timestamp, 'Plot is currently being loaned.');\\n\\n    _ensureValidLoanDays(_plotOwner, _numDays);\\n    _ensureValidLoanCharge(_plotOwner, _numDays);\\n\\n    uint256 _serviceCharge = msg.value.mul(uint256(loanPercentageCharge)).div(\\n      100\\n    );\\n    uint256 _plotOwnerCharge = msg.value.sub(_serviceCharge);\\n\\n    payable(owner()).call{ value: _serviceCharge }('');\\n    payable(_plotOwner.owner).call{ value: _plotOwnerCharge }('');\\n\\n    _plotOwner.totalFeesCollected += _plotOwnerCharge;\\n    loans[_idx] = PlotLoan({\\n      loaner: msg.sender,\\n      start: block.timestamp,\\n      end: block.timestamp.add(_daysToSeconds(_numDays)),\\n      totalFee: msg.value\\n    });\\n    _publish(_idx, _publishParams);\\n    emit LoanPlot(_idx, msg.sender);\\n  }\\n\\n  function publish(uint256 _idx, PublishParams memory _publishParams) external {\\n    PlotOwner memory _owner = owners[_idx];\\n    PlotLoan memory _loan = loans[_idx];\\n\\n    bool _hasActiveLoan = hasActiveLoan(_idx);\\n    if (_hasActiveLoan) {\\n      require(\\n        msg.sender == _loan.loaner,\\n        'Must be the current loaner to update published information.'\\n      );\\n    } else {\\n      require(\\n        msg.sender == _owner.owner,\\n        'Must be the owner to update published information.'\\n      );\\n    }\\n\\n    _publish(_idx, _publishParams);\\n  }\\n\\n  function transfer(address _to, uint256 _idx) external {\\n    PlotOwner storage _owner = owners[_idx];\\n    require(\\n      msg.sender == _owner.owner,\\n      'You must own the current plot to transfer it.'\\n    );\\n    _owner.owner = _to;\\n    emit Transfer(_to, _idx);\\n  }\\n\\n  function hasActiveLoan(uint256 _idx) public view returns (bool) {\\n    PlotLoan memory _loan = loans[_idx];\\n    if (_loan.loaner == address(0)) {\\n      return false;\\n    }\\n    return _loan.end > block.timestamp;\\n  }\\n\\n  function setLoanServiceCharge(uint256 _amountWei) external onlyOwner {\\n    loanServiceCharge = _amountWei;\\n  }\\n\\n  function setLoanChargePerDay(uint256 _amountWei) external onlyOwner {\\n    loanChargePerDay = _amountWei;\\n  }\\n\\n  function setMaxLoanDurationDays(uint16 _numDays) external onlyOwner {\\n    maxLoanDurationDays = _numDays;\\n  }\\n\\n  function setLoanPercentageCharge(uint8 _percentage) external onlyOwner {\\n    require(_percentage <= 100, 'Must be between 0 and 100');\\n    loanPercentageCharge = _percentage;\\n  }\\n\\n  function _daysToSeconds(uint256 _days) private pure returns (uint256) {\\n    return _days.mul(24).mul(60).mul(60);\\n  }\\n\\n  function _ensureValidLoanDays(PlotOwner memory _owner, uint16 _numDays)\\n    private\\n    view\\n  {\\n    uint16 _maxNumDays = _owner.overrideMaxLoanDurationDays > 0\\n      ? _owner.overrideMaxLoanDurationDays\\n      : maxLoanDurationDays;\\n    require(\\n      _numDays <= _maxNumDays,\\n      'You cannot loan this plot for this long.'\\n    );\\n  }\\n\\n  function _ensureValidLoanCharge(PlotOwner memory _owner, uint16 _numDays)\\n    private\\n    view\\n  {\\n    uint256 _perDayCharge = _owner.overrideLoanChargePerDay > 0\\n      ? _owner.overrideLoanChargePerDay\\n      : loanChargePerDay;\\n    uint256 _loanCharge = _perDayCharge.mul(uint256(_numDays));\\n    require(\\n      msg.value >= _loanCharge,\\n      'Make sure you send the appropriate amount of ETH to process your loan.'\\n    );\\n  }\\n\\n  function _publish(uint256 _idx, PublishParams memory _publishParams) private {\\n    _ketherNft.publish(\\n      _idx,\\n      _publishParams.link,\\n      _publishParams.image,\\n      _publishParams.title,\\n      _publishParams.NSFW\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ketherNFTAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"overridePerDayCharge\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"overrideMaxLoanDays\",\"type\":\"uint16\"}],\"name\":\"AddPlot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loaner\",\"type\":\"address\"}],\"name\":\"LoanPlot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemovePlot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"overridePerDayCharge\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"overrideMaxLoanDays\",\"type\":\"uint16\"}],\"name\":\"UpdatePlot\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_overridePerDayCharge\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_overrideMaxDays\",\"type\":\"uint16\"}],\"name\":\"addPlot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"hasActiveLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanChargePerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanPercentageCharge\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_numDays\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"link\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"NSFW\",\"type\":\"bool\"}],\"internalType\":\"struct KetherNFTLoaner.PublishParams\",\"name\":\"_publishParams\",\"type\":\"tuple\"}],\"name\":\"loanPlot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanServiceCharge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"loaner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLoanDurationDays\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"overrideLoanChargePerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"overrideMaxLoanDurationDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"totalFeesCollected\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"link\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"NSFW\",\"type\":\"bool\"}],\"internalType\":\"struct KetherNFTLoaner.PublishParams\",\"name\":\"_publishParams\",\"type\":\"tuple\"}],\"name\":\"publish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"removePlot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountWei\",\"type\":\"uint256\"}],\"name\":\"setLoanChargePerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_percentage\",\"type\":\"uint8\"}],\"name\":\"setLoanPercentageCharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountWei\",\"type\":\"uint256\"}],\"name\":\"setLoanServiceCharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_numDays\",\"type\":\"uint16\"}],\"name\":\"setMaxLoanDurationDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_overridePerDayCharge\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_overrideMaxDays\",\"type\":\"uint16\"}],\"name\":\"updatePlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"KetherNFTLoaner","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007bb952ab78b28a62b1525aca54a71e7aa6177645","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}