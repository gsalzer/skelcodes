{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Users/david/Dropbox/Rari/v1/fuse-contracts/contracts/FusePoolDirectory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./external/compound/Comptroller.sol\\\";\\r\\nimport \\\"./external/compound/Unitroller.sol\\\";\\r\\nimport \\\"./external/compound/PriceOracle.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title FusePoolDirectory\\r\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\r\\n * @notice FusePoolDirectory is a directory for Fuse interest rate pools.\\r\\n */\\r\\ncontract FusePoolDirectory is OwnableUpgradeable {\\r\\n    /**\\r\\n     * @dev Initializes a deployer whitelist if desired.\\r\\n     * @param _enforceDeployerWhitelist Boolean indicating if the deployer whitelist is to be enforced.\\r\\n     * @param _deployerWhitelist Array of Ethereum accounts to be whitelisted.\\r\\n     */\\r\\n    function initialize(bool _enforceDeployerWhitelist, address[] memory _deployerWhitelist) public initializer {\\r\\n        __Ownable_init();\\r\\n        enforceDeployerWhitelist = _enforceDeployerWhitelist;\\r\\n        for (uint256 i = 0; i < _deployerWhitelist.length; i++) deployerWhitelist[_deployerWhitelist[i]] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct for a Fuse interest rate pool.\\r\\n     */\\r\\n    struct FusePool {\\r\\n        string name;\\r\\n        address creator;\\r\\n        address comptroller;\\r\\n        uint256 blockPosted;\\r\\n        uint256 timestampPosted;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Array of Fuse interest rate pools.\\r\\n     */\\r\\n    FusePool[] public pools;\\r\\n\\r\\n    /**\\r\\n     * @dev Maps Ethereum accounts to arrays of Fuse pool indexes.\\r\\n     */\\r\\n    mapping(address => uint256[]) private _poolsByAccount;\\r\\n\\r\\n    /**\\r\\n     * @dev Maps Fuse pool Comptroller addresses to bools indicating if they have been registered via the directory.\\r\\n     */\\r\\n    mapping(address => bool) public poolExists;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a new Fuse pool is added to the directory.\\r\\n     */\\r\\n    event PoolRegistered(uint256 index, FusePool pool);\\r\\n\\r\\n    /**\\r\\n     * @dev Booleans indicating if the deployer whitelist is enforced.\\r\\n     */\\r\\n    bool public enforceDeployerWhitelist;\\r\\n\\r\\n    /**\\r\\n     * @dev Maps Ethereum accounts to booleans indicating if they are allowed to deploy pools.\\r\\n     */\\r\\n    mapping(address => bool) public deployerWhitelist;\\r\\n\\r\\n    /**\\r\\n     * @dev Controls if the deployer whitelist is to be enforced.\\r\\n     * @param enforce Boolean indicating if the deployer whitelist is to be enforced.\\r\\n     */\\r\\n    function _setDeployerWhitelistEnforcement(bool enforce) external onlyOwner {\\r\\n        enforceDeployerWhitelist = enforce;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds/removes Ethereum accounts to the deployer whitelist.\\r\\n     * @param deployers Array of Ethereum accounts to be whitelisted.\\r\\n     * @param status Whether to add or remove the accounts.\\r\\n     */\\r\\n    function _editDeployerWhitelist(address[] calldata deployers, bool status) external onlyOwner {\\r\\n        require(deployers.length > 0, \\\"No deployers supplied.\\\");\\r\\n        for (uint256 i = 0; i < deployers.length; i++) deployerWhitelist[deployers[i]] = status;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a new Fuse pool to the directory (without checking msg.sender).\\r\\n     * @param name The name of the pool.\\r\\n     * @param comptroller The pool's Comptroller proxy contract address.\\r\\n     * @return The index of the registered Fuse pool.\\r\\n     */\\r\\n    function _registerPool(string memory name, address comptroller) internal returns (uint256) {\\r\\n        require(!poolExists[comptroller], \\\"Pool already exists in the directory.\\\");\\r\\n        require(!enforceDeployerWhitelist || deployerWhitelist[msg.sender], \\\"Sender is not on deployer whitelist.\\\");\\r\\n        require(bytes(name).length <= 100, \\\"No pool name supplied.\\\");\\r\\n        FusePool memory pool = FusePool(name, msg.sender, comptroller, block.number, block.timestamp);\\r\\n        pools.push(pool);\\r\\n        _poolsByAccount[msg.sender].push(pools.length - 1);\\r\\n        poolExists[comptroller] = true;\\r\\n        emit PoolRegistered(pools.length - 1, pool);\\r\\n        return pools.length - 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deploys a new Fuse pool and adds to the directory.\\r\\n     * @param name The name of the pool.\\r\\n     * @param implementation The Comptroller implementation contract address.\\r\\n     * @param enforceWhitelist Boolean indicating if the pool's supplier/borrower whitelist is to be enforced.\\r\\n     * @param closeFactor The pool's close factor (scaled by 1e18).\\r\\n     * @param liquidationIncentive The pool's liquidation incentive (scaled by 1e18).\\r\\n     * @param priceOracle The pool's PriceOracle contract address.\\r\\n     * @return The index of the registered Fuse pool and the Unitroller proxy address.\\r\\n     */\\r\\n    function deployPool(string memory name, address implementation, bool enforceWhitelist, uint256 closeFactor, uint256 liquidationIncentive, address priceOracle) external returns (uint256, address) {\\r\\n        // Input validation\\r\\n        require(implementation != address(0), \\\"No Comptroller implementation contract address specified.\\\");\\r\\n        require(priceOracle != address(0), \\\"No PriceOracle contract address specified.\\\");\\r\\n\\r\\n        // Deploy Unitroller using msg.sender, name, and block.number as a salt\\r\\n        bytes memory unitrollerCreationCode = hex\\\"60806040526001805460ff60a81b1960ff60a01b19909116600160a01b1716600160a81b17905534801561003257600080fd5b50600080546001600160a01b03191633179055610ae1806100546000396000f3fe6080604052600436106100a75760003560e01c8063bb82aa5e11610064578063bb82aa5e14610437578063c1e803341461044c578063dcfbc0c714610461578063e992a04114610476578063e9c714f2146104a9578063f851a440146104be576100a7565b80630225ab9d1461032b5780630a755ec21461036957806326782247146103925780632f1069ba146103c35780636f63af0b146103d8578063b71d1a0c14610404575b3330146102a85760408051600481526024810182526020810180516001600160e01b0316633757348b60e21b1781529151815160009360609330939092909182918083835b6020831061010b5780518252601f1990920191602091820191016100ec565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811461016b576040519150601f19603f3d011682016040523d82523d6000602084013e610170565b606091505b5091509150600082156101975781806020019051602081101561019257600080fd5b505190505b80156102a4576002546040805163bbcdd6d360e01b81526001600160a01b0390921660048301525160009173a731585ab05fc9f83555cf9bff8f58ee94e18f859163bbcdd6d391602480820192602092909190829003018186803b1580156101fe57600080fd5b505afa158015610212573d6000803e3d6000fd5b505050506040513d602081101561022857600080fd5b50516002549091506001600160a01b038083169116146102a257600280546001600160a01b038381166001600160a01b0319831617928390556040805192821680845293909116602083015280517fd604de94d45953f9138079ec1b82d533cb2160c906d1076d1f7ed54befbca97a9281900390910190a1505b505b5050505b6002546040516000916001600160a01b031690829036908083838082843760405192019450600093509091505080830381855af49150503d806000811461030b576040519150601f19603f3d011682016040523d82523d6000602084013e610310565b606091505b505090506040513d6000823e818015610327573d82f35b3d82fd5b34801561033757600080fd5b506103576004803603602081101561034e57600080fd5b503515156104d3565b60408051918252519081900360200190f35b34801561037557600080fd5b5061037e61056f565b604080519115158252519081900360200190f35b34801561039e57600080fd5b506103a761057f565b604080516001600160a01b039092168252519081900360200190f35b3480156103cf57600080fd5b5061037e61058e565b3480156103e457600080fd5b50610357600480360360208110156103fb57600080fd5b5035151561059e565b34801561041057600080fd5b506103576004803603602081101561042757600080fd5b50356001600160a01b031661063a565b34801561044357600080fd5b506103a76106bd565b34801561045857600080fd5b506103576106cc565b34801561046d57600080fd5b506103a76107c7565b34801561048257600080fd5b506103576004803603602081101561049957600080fd5b50356001600160a01b03166107d6565b3480156104b557600080fd5b506103576108f6565b3480156104ca57600080fd5b506103a76109dc565b60006104dd6109eb565b6104f4576104ed60016005610a46565b905061056a565b60015460ff600160a81b90910416151582151514156105145760006104ed565b60018054831515600160a81b810260ff60a81b199092169190911790915560408051918252517f10f9a0a95673b0837d1dce21fd3bffcb6d760435e9b5300b75a271182f75f8229181900360200190a160005b90505b919050565b600154600160a81b900460ff1681565b6001546001600160a01b031681565b600154600160a01b900460ff1681565b60006105a86109eb565b6105b8576104ed60016005610a46565b60015460ff600160a01b90910416151582151514156105d85760006104ed565b60018054831515600160a01b90810260ff60a01b199092169190911791829055604080519190920460ff161515815290517fabb56a15fd39488c914b324690b88f30d7daec63d2131ca0ef47e5739068c86e9181900360200190a16000610567565b60006106446109eb565b610654576104ed60016010610a46565b600180546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9929181900390910190a160005b9392505050565b6002546001600160a01b031681565b6003546000906001600160a01b0316331415806106f257506003546001600160a01b0316155b1561070957610702600180610a46565b90506107c4565b60028054600380546001600160a01b038082166001600160a01b031980861682179687905590921690925560408051938316808552949092166020840152815190927fd604de94d45953f9138079ec1b82d533cb2160c906d1076d1f7ed54befbca97a92908290030190a1600354604080516001600160a01b038085168252909216602083015280517fe945ccee5d701fc83f9b8aa8ca94ea4219ec1fcbd4f4cab4f0ea57c5c3e1d8159281900390910190a160005b925050505b90565b6003546001600160a01b031681565b60006107e06109eb565b6107f0576104ed60016012610a46565b60025460408051639d244f9f60e01b81526001600160a01b03928316600482015291841660248301525173a731585ab05fc9f83555cf9bff8f58ee94e18f8591639d244f9f916044808301926020929190829003018186803b15801561085557600080fd5b505afa158015610869573d6000803e3d6000fd5b505050506040513d602081101561087f57600080fd5b5051610891576104ed60016011610a46565b600380546001600160a01b038481166001600160a01b0319831617928390556040805192821680845293909116602083015280517fe945ccee5d701fc83f9b8aa8ca94ea4219ec1fcbd4f4cab4f0ea57c5c3e1d8159281900390910190a160006106b6565b6001546000906001600160a01b031633141580610911575033155b156109225761070260016000610a46565b60008054600180546001600160a01b038082166001600160a01b031980861682179687905590921690925560408051938316808552949092166020840152815190927ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc92908290030190a1600154604080516001600160a01b038085168252909216602083015280517fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a99281900390910190a160006107bf565b6000546001600160a01b031681565b600080546001600160a01b031633148015610a0f5750600154600160a81b900460ff165b80610a4157503373a731585ab05fc9f83555cf9bff8f58ee94e18f85148015610a415750600154600160a01b900460ff165b905090565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0836015811115610a7557fe5b83601b811115610a8157fe5b604080519283526020830191909152600082820152519081900360600190a18260158111156106b657fefea265627a7a72315820a5cf9491a370c17ee98b3c08c728cc0ddad83bd43ca76c92dc106835bfccb25664736f6c63430005110032\\\";\\r\\n        bytes32 salt = keccak256(abi.encodePacked(msg.sender, name, block.number));\\r\\n        address proxy;\\r\\n\\r\\n        assembly {\\r\\n            proxy := create2(0, add(unitrollerCreationCode, 32), mload(unitrollerCreationCode), salt)\\r\\n            if iszero(extcodesize(proxy)) {\\r\\n                revert(0, \\\"Failed to deploy Unitroller.\\\")\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Setup Unitroller\\r\\n        Unitroller unitroller = Unitroller(proxy);\\r\\n        require(unitroller._setPendingImplementation(implementation) == 0, \\\"Failed to set pending implementation on Unitroller.\\\"); // Checks Comptroller implementation whitelist\\r\\n        Comptroller comptrollerImplementation = Comptroller(implementation);\\r\\n        comptrollerImplementation._become(unitroller);\\r\\n        Comptroller comptrollerProxy = Comptroller(proxy);\\r\\n\\r\\n        // Set pool parameters\\r\\n        require(comptrollerProxy._setCloseFactor(closeFactor) == 0, \\\"Failed to set pool close factor.\\\");\\r\\n        require(comptrollerProxy._setLiquidationIncentive(liquidationIncentive) == 0, \\\"Failed to set pool liquidation incentive.\\\");\\r\\n        require(comptrollerProxy._setPriceOracle(PriceOracle(priceOracle)) == 0, \\\"Failed to set pool price oracle.\\\");\\r\\n\\r\\n        // Whitelist\\r\\n        if (enforceWhitelist) require(comptrollerProxy._setWhitelistEnforcement(true) == 0, \\\"Failed to enforce supplier/borrower whitelist.\\\");\\r\\n\\r\\n        // Enable auto-implementation\\r\\n        require(comptrollerProxy._toggleAutoImplementations(true) == 0, \\\"Failed to enable pool auto implementations.\\\");\\r\\n\\r\\n        // Make msg.sender the admin\\r\\n        require(unitroller._setPendingAdmin(msg.sender) == 0, \\\"Failed to set pending admin on Unitroller.\\\");\\r\\n\\r\\n        // Register the pool with this FusePoolDirectory\\r\\n        return (_registerPool(name, proxy), proxy);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns arrays of all Fuse pools' data.\\r\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\r\\n     */\\r\\n    function getAllPools() external view returns (FusePool[] memory) {\\r\\n        return pools;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns arrays of all public Fuse pool indexes and data.\\r\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\r\\n     */\\r\\n    function getPublicPools() external view returns (uint256[] memory, FusePool[] memory) {\\r\\n        uint256 arrayLength = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < pools.length; i++) {\\r\\n            try Comptroller(pools[i].comptroller).enforceWhitelist() returns (bool enforceWhitelist) {\\r\\n                if (enforceWhitelist) continue;\\r\\n            } catch { }\\r\\n\\r\\n            arrayLength++;\\r\\n        }\\r\\n\\r\\n        uint256[] memory indexes = new uint256[](arrayLength);\\r\\n        FusePool[] memory publicPools = new FusePool[](arrayLength);\\r\\n        uint256 index = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < pools.length; i++) {\\r\\n            try Comptroller(pools[i].comptroller).enforceWhitelist() returns (bool enforceWhitelist) {\\r\\n                if (enforceWhitelist) continue;\\r\\n            } catch { }\\r\\n\\r\\n            indexes[index] = i;\\r\\n            publicPools[index] = pools[i];\\r\\n            index++;\\r\\n        }\\r\\n\\r\\n        return (indexes, publicPools);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns arrays of Fuse pool indexes and data created by `account`.\\r\\n     */\\r\\n    function getPoolsByAccount(address account) external view returns (uint256[] memory, FusePool[] memory) {\\r\\n        uint256[] memory indexes = new uint256[](_poolsByAccount[account].length);\\r\\n        FusePool[] memory accountPools = new FusePool[](_poolsByAccount[account].length);\\r\\n\\r\\n        for (uint256 i = 0; i < _poolsByAccount[account].length; i++) {\\r\\n            indexes[i] = _poolsByAccount[account][i];\\r\\n            accountPools[i] = pools[_poolsByAccount[account][i]];\\r\\n        }\\r\\n\\r\\n        return (indexes, accountPools);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Maps Ethereum accounts to arrays of Fuse pool Comptroller proxy contract addresses.\\r\\n     */\\r\\n    mapping(address => address[]) private _bookmarks;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns arrays of Fuse pool Unitroller (Comptroller proxy) contract addresses bookmarked by `account`.\\r\\n     */\\r\\n    function getBookmarks(address account) external view returns (address[] memory) {\\r\\n        return _bookmarks[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Bookmarks a Fuse pool Unitroller (Comptroller proxy) contract addresses.\\r\\n     */\\r\\n    function bookmarkPool(address comptroller) external {\\r\\n        _bookmarks[msg.sender].push(comptroller);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Modify existing Fuse pool name.\\r\\n     */\\r\\n    function setPoolName(uint256 index, string calldata name) external {\\r\\n        Comptroller _comptroller = Comptroller(pools[index].comptroller);\\r\\n        require(msg.sender == _comptroller.admin() && _comptroller.adminHasRights() || msg.sender == owner());\\r\\n        pools[index].name = name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Maps Ethereum accounts to booleans indicating if they are a whitelisted admin.\\r\\n     */\\r\\n    mapping(address => bool) public adminWhitelist;\\r\\n\\r\\n    /**\\r\\n     * @dev Event emitted when the admin whitelist is updated.\\r\\n     */\\r\\n    event AdminWhitelistUpdated(address[] admins, bool status);\\r\\n\\r\\n    /**\\r\\n     * @dev Adds/removes Ethereum accounts to the admin whitelist.\\r\\n     * @param admins Array of Ethereum accounts to be whitelisted.\\r\\n     * @param status Whether to add or remove the accounts.\\r\\n     */\\r\\n    function _editAdminWhitelist(address[] calldata admins, bool status) external onlyOwner {\\r\\n        require(admins.length > 0, \\\"No admins supplied.\\\");\\r\\n        for (uint256 i = 0; i < admins.length; i++) adminWhitelist[admins[i]] = status;\\r\\n        emit AdminWhitelistUpdated(admins, status);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns arrays of all public Fuse pool indexes and data with whitelisted admins.\\r\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\r\\n     */\\r\\n    function getPublicPoolsByVerification(bool whitelistedAdmin) external view returns (uint256[] memory, FusePool[] memory) {\\r\\n        uint256 arrayLength = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < pools.length; i++) {\\r\\n            Comptroller comptroller = Comptroller(pools[i].comptroller);\\r\\n\\r\\n            try comptroller.enforceWhitelist() returns (bool enforceWhitelist) {\\r\\n                if (enforceWhitelist) continue;\\r\\n\\r\\n                try comptroller.admin() returns (address admin) {\\r\\n                    if (whitelistedAdmin != adminWhitelist[admin]) continue;\\r\\n                } catch { }\\r\\n            } catch { }\\r\\n\\r\\n            arrayLength++;\\r\\n        }\\r\\n\\r\\n        uint256[] memory indexes = new uint256[](arrayLength);\\r\\n        FusePool[] memory publicPools = new FusePool[](arrayLength);\\r\\n        uint256 index = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < pools.length; i++) {\\r\\n            Comptroller comptroller = Comptroller(pools[i].comptroller);\\r\\n\\r\\n            try comptroller.enforceWhitelist() returns (bool enforceWhitelist) {\\r\\n                if (enforceWhitelist) continue;\\r\\n\\r\\n                try comptroller.admin() returns (address admin) {\\r\\n                    if (whitelistedAdmin != adminWhitelist[admin]) continue;\\r\\n                } catch { }\\r\\n            } catch { }\\r\\n\\r\\n            indexes[index] = i;\\r\\n            publicPools[index] = pools[i];\\r\\n            index++;\\r\\n        }\\r\\n\\r\\n        return (indexes, publicPools);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"/C/Users/david/Dropbox/Rari/v1/fuse-contracts/contracts/external/compound/Unitroller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @title ComptrollerCore\\r\\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\r\\n * CTokens should reference this contract as their comptroller.\\r\\n */\\r\\ninterface Unitroller {\\r\\n    function _setPendingImplementation(address newPendingImplementation) external returns (uint);\\r\\n    function _setPendingAdmin(address newPendingAdmin) external returns (uint);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/david/Dropbox/Rari/v1/fuse-contracts/contracts/external/compound/RewardsDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./CToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title RewardsDistributor\\r\\n * @author Compound\\r\\n */\\r\\ninterface RewardsDistributor {\\r\\n    /// @dev The token to reward (i.e., COMP)\\r\\n    function rewardToken() external view returns (address);\\r\\n\\r\\n    /// @notice The portion of compRate that each market currently receives\\r\\n    function compSupplySpeeds(address) external view returns (uint);\\r\\n\\r\\n    /// @notice The portion of compRate that each market currently receives\\r\\n    function compBorrowSpeeds(address) external view returns (uint);\\r\\n\\r\\n    /// @notice The COMP accrued but not yet transferred to each user\\r\\n    function compAccrued(address) external view returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @notice Keeps the flywheel moving pre-mint and pre-redeem\\r\\n     * @dev Called by the Comptroller\\r\\n     * @param cToken The relevant market\\r\\n     * @param supplier The minter/redeemer\\r\\n     */\\r\\n    function flywheelPreSupplierAction(address cToken, address supplier) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Keeps the flywheel moving pre-borrow and pre-repay\\r\\n     * @dev Called by the Comptroller\\r\\n     * @param cToken The relevant market\\r\\n     * @param borrower The borrower\\r\\n     */\\r\\n    function flywheelPreBorrowerAction(address cToken, address borrower) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns an array of all markets.\\r\\n     */\\r\\n    function getAllMarkets() external view returns (CToken[] memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/david/Dropbox/Rari/v1/fuse-contracts/contracts/external/compound/PriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./CToken.sol\\\";\\r\\n\\r\\ninterface PriceOracle {\\r\\n    /**\\r\\n      * @notice Get the underlying price of a cToken asset\\r\\n      * @param cToken The cToken to get the underlying price of\\r\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\r\\n      *  Zero means the price is unavailable.\\r\\n      */\\r\\n    function getUnderlyingPrice(CToken cToken) external view returns (uint);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/david/Dropbox/Rari/v1/fuse-contracts/contracts/external/compound/Comptroller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./PriceOracle.sol\\\";\\r\\nimport \\\"./CToken.sol\\\";\\r\\nimport \\\"./Unitroller.sol\\\";\\r\\nimport \\\"./RewardsDistributor.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Compound's Comptroller Contract\\r\\n * @author Compound\\r\\n */\\r\\ninterface Comptroller {\\r\\n    function admin() external view returns (address);\\r\\n    function adminHasRights() external view returns (bool);\\r\\n    function fuseAdminHasRights() external view returns (bool);\\r\\n\\r\\n    function oracle() external view returns (PriceOracle);\\r\\n    function closeFactorMantissa() external view returns (uint);\\r\\n    function liquidationIncentiveMantissa() external view returns (uint);\\r\\n\\r\\n    function markets(address cToken) external view returns (bool, uint);\\r\\n\\r\\n    function getAssetsIn(address account) external view returns (CToken[] memory);\\r\\n    function checkMembership(address account, CToken cToken) external view returns (bool);\\r\\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\\r\\n\\r\\n    function _setPriceOracle(PriceOracle newOracle) external returns (uint);\\r\\n    function _setCloseFactor(uint newCloseFactorMantissa) external returns (uint256);\\r\\n    function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external returns (uint);\\r\\n    function _become(Unitroller unitroller) external;\\r\\n\\r\\n    function borrowGuardianPaused(address cToken) external view returns (bool);\\r\\n\\r\\n    function getRewardsDistributors() external view returns (RewardsDistributor[] memory);\\r\\n    function getAllMarkets() external view returns (CToken[] memory);\\r\\n    function getAllBorrowers() external view returns (address[] memory);\\r\\n    function suppliers(address account) external view returns (bool);\\r\\n    function enforceWhitelist() external view returns (bool);\\r\\n    function whitelist(address account) external view returns (bool);\\r\\n\\r\\n    function _setWhitelistEnforcement(bool enforce) external returns (uint);\\r\\n    function _setWhitelistStatuses(address[] calldata _suppliers, bool[] calldata statuses) external returns (uint);\\r\\n\\r\\n    function _toggleAutoImplementations(bool enabled) external returns (uint);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/david/Dropbox/Rari/v1/fuse-contracts/contracts/external/compound/CToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @title Compound's CToken Contract\\r\\n * @notice Abstract base for CTokens\\r\\n * @author Compound\\r\\n */\\r\\ninterface CToken {\\r\\n    function admin() external view returns (address);\\r\\n    function adminHasRights() external view returns (bool);\\r\\n    function fuseAdminHasRights() external view returns (bool);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function comptroller() external view returns (address);\\r\\n    function adminFeeMantissa() external view returns (uint256);\\r\\n    function fuseFeeMantissa() external view returns (uint256);\\r\\n    function reserveFactorMantissa() external view returns (uint256);\\r\\n    function totalReserves() external view returns (uint);\\r\\n    function totalAdminFees() external view returns (uint);\\r\\n    function totalFuseFees() external view returns (uint);\\r\\n\\r\\n    function isCToken() external view returns (bool);\\r\\n    function isCEther() external view returns (bool);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function balanceOfUnderlying(address owner) external returns (uint);\\r\\n    function borrowRatePerBlock() external view returns (uint);\\r\\n    function supplyRatePerBlock() external view returns (uint);\\r\\n    function totalBorrowsCurrent() external returns (uint);\\r\\n    function borrowBalanceStored(address account) external view returns (uint);\\r\\n    function exchangeRateStored() external view returns (uint);\\r\\n    function getCash() external view returns (uint);\\r\\n\\r\\n    function redeem(uint redeemTokens) external returns (uint);\\r\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AdminWhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct FusePoolDirectory.FusePool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"_editAdminWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"deployers\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"_editDeployerWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enforce\",\"type\":\"bool\"}],\"name\":\"_setDeployerWhitelistEnforcement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"}],\"name\":\"bookmarkPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enforceWhitelist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"closeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationIncentive\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deployerWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enforceDeployerWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPools\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"internalType\":\"struct FusePoolDirectory.FusePool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBookmarks\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPoolsByAccount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"internalType\":\"struct FusePoolDirectory.FusePool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicPools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"internalType\":\"struct FusePoolDirectory.FusePool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"whitelistedAdmin\",\"type\":\"bool\"}],\"name\":\"getPublicPoolsByVerification\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"internalType\":\"struct FusePoolDirectory.FusePool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enforceDeployerWhitelist\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_deployerWhitelist\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setPoolName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FusePoolDirectory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}