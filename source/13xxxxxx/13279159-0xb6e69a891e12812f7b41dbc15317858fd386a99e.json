{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/farm/InitHotFix2.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {AppStorage} from \\\"./AppStorage.sol\\\";\\n\\ncontract InitHotFix2 {\\n    AppStorage internal s;\\n    using SafeMath for uint256;\\n\\n    event BeanDeposit(address indexed account, uint256 season, uint256 beans);\\n    event BeanRemove(address indexed account, uint32[] crates, uint256[] crateBeans, uint256 beans);\\n\\n    function init() external {\\n        fixCrates(address(0xf393fb8C4BbF7e37f583D0593AD1d1b2443E205c), 4294966636, 4294966637);\\n        fixCrates(address(0x9893360c45EF5A51c3B38dcBDfe0039C80fd6f60), 4294966632, 4294966633);\\n        fixCrates(address(0xa69eb732230F041E62640Da3571F414a01413DB3), 4294966902, 4294966903);\\n        fixCrates(address(0xe0B54aa5E28109F6Aa8bEdcff9622D61a75E6B83), 4294966559, 4294966560);\\n        fixCrates(address(0xce66C6A88bD7BEc215Aa04FDa4CF7C81055521D0), 4294964818, 4294964819);\\n        fixCrates(address(0xb80A3488Bd3f1c5A2D6Fce9B095707ec62172Fb5), 4294965127, 4294965128);\\n        fixCrates(address(0x7cd222530d4D10E175c939F55c5dC394d51AaDaA), 4294965826, 4294965827);\\n        fixCrates(address(0x5d12B49c48F756524162BB35FFA61ECEb714280D), 4294936176, 4294936177);\\n        fixCrates(address(0x6343B307C288432BB9AD9003B4230B08B56b3b82), 4294966454, 4294966455);\\n        fixCrates(address(0x5068aed87a97c063729329c2ebE84cfEd3177F83), 4294953598, 4294953599);\\n        fixCrates(address(0x397eADFF98b18a0E8c1c1866b9e83aE887bAc1f1), 4294965442, 4294965443);\\n        fixCrates(address(0x3bD12E6C72B92C43BD1D2ACD65F8De2E0E335133), 4294846387, 4294846388);\\n        fixCrates(address(0x215B5b41E224fc24170dE2b20A3e0F619af96A71), 4294953369, 4294953370);\\n        fixCrates(address(0xFc748762F301229bCeA219B584Fdf8423D8060A1), 4294965079, 4294965080);\\n        fixCrates(address(0x8D84aA16d6852ee8E744a453a20f67eCcF6C019D), 4294966011, 4294966012);\\n        fixCrates(address(0xE0f61822B45bb03cdC581283287941517810D7bA), 4294966192, 4294966193);\\n        fixCrates(address(0x8639AFABa2631C7c09220B161D2b3d0d4764EF85), 4294957800, 4294957801);\\n        fixCrates(address(0xCc71b8a0B9ea458aE7E17fa232a36816F6B27195), 4294964813, 4294964814);\\n    }\\n\\n    function fixCrates(address account, uint32 s1, uint32 s2) internal returns (uint256) {\\n        uint256[] memory bs = new uint256[](2);\\n        bs[0] = removeBeanDeposit(account, s1);\\n        bs[1] = removeBeanDeposit(account, s2);\\n        uint32[] memory ss = new uint32[](2);\\n        ss[0] = s1; ss[1] = s2;\\n        uint256 beansRemoved = bs[0].add(bs[1]);\\n        emit BeanRemove(account, ss, bs, beansRemoved);\\n        addBeanDeposit(account, 1, beansRemoved);\\n\\n    }\\n\\n    function removeBeanDeposit(address account, uint32 id)\\n        private\\n        returns (uint256)\\n    {\\n        uint256 crateAmount = s.a[account].bean.deposits[id];\\n        delete s.a[account].bean.deposits[id];\\n        return crateAmount;\\n    }\\n\\n    function addBeanDeposit(address account, uint32 _s, uint256 amount) internal {\\n        s.a[account].bean.deposits[_s] += amount;\\n        emit BeanDeposit(account, _s, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/farm/AppStorage.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title App Storage defines the state object for Beanstalk.\\n**/\\ncontract Account {\\n\\n    struct Field {\\n        mapping(uint256 => uint256) plots;\\n        mapping(address => uint256) podAllowances;\\n    }\\n\\n    struct AssetSilo {\\n        mapping(uint32 => uint256) withdrawals;\\n        mapping(uint32 => uint256) deposits;\\n        mapping(uint32 => uint256) depositSeeds;\\n    }\\n\\n    struct Silo {\\n        uint256 stalk;\\n        uint256 seeds;\\n    }\\n\\n    struct SeasonOfPlenty {\\n        uint256 base;\\n        uint256 roots;\\n        uint256 basePerRoot;\\n    }\\n\\n    struct State {\\n        Field field;\\n        AssetSilo bean;\\n        AssetSilo lp;\\n        Silo s;\\n        uint32 lockedUntil;\\n        uint32 lastUpdate;\\n        uint32 lastSop;\\n        uint32 lastRain;\\n        SeasonOfPlenty sop;\\n        uint256 roots;\\n    }\\n}\\n\\ncontract Storage {\\n    struct Contracts {\\n        address bean;\\n        address pair;\\n        address pegPair;\\n        address weth;\\n    }\\n\\n    // Field\\n\\n    struct Field {\\n        uint256 soil;\\n        uint256 pods;\\n        uint256 harvested;\\n        uint256 harvestable;\\n    }\\n\\n    // Governance\\n\\n    struct Bip {\\n        address proposer;\\n        uint32 start;\\n        uint32 period;\\n        bool executed;\\n        int pauseOrUnpause;\\n        uint128 timestamp;\\n        uint256 roots;\\n        uint256 endTotalRoots;\\n    }\\n\\n    struct DiamondCut {\\n        IDiamondCut.FacetCut[] diamondCut;\\n        address initAddress;\\n        bytes initData;\\n    }\\n\\n    struct Governance {\\n        uint32[] activeBips;\\n        uint32 bipIndex;\\n        mapping(uint32 => DiamondCut) diamondCuts;\\n        mapping(uint32 => mapping(address => bool)) voted;\\n        mapping(uint32 => Bip) bips;\\n    }\\n\\n    // Silo\\n\\n    struct AssetSilo {\\n        uint256 deposited;\\n        uint256 withdrawn;\\n    }\\n\\n    struct IncreaseSilo {\\n        uint256 beans;\\n        uint256 stalk;\\n    }\\n\\n    struct SeasonOfPlenty {\\n        uint256 weth;\\n        uint256 base;\\n        uint32 last;\\n    }\\n\\n    struct Silo {\\n        uint256 stalk;\\n        uint256 seeds;\\n        uint256 roots;\\n    }\\n\\n    // Season\\n\\n    struct Oracle {\\n        bool initialized;\\n        uint256 cumulative;\\n        uint256 pegCumulative;\\n        uint32 timestamp;\\n        uint32 pegTimestamp;\\n    }\\n\\n    struct Rain {\\n        uint32 start;\\n        bool raining;\\n        uint256 pods;\\n        uint256 roots;\\n    }\\n\\n    struct Season {\\n        uint32 current;\\n        uint256 start;\\n        uint256 period;\\n        uint256 timestamp;\\n    }\\n\\n    struct Weather {\\n        uint256 startSoil;\\n        uint256 lastDSoil;\\n        uint96 lastSoilPercent;\\n        uint32 lastSowTime;\\n        uint32 nextSowTime;\\n        uint32 yield;\\n        bool didSowBelowMin;\\n        bool didSowFaster;\\n    }\\n}\\n\\nstruct AppStorage {\\n    uint8 index;\\n    int8[32] cases;\\n    bool paused;\\n    uint128 pausedAt;\\n    Storage.Season season;\\n    Storage.Contracts c;\\n    Storage.Field f;\\n    Storage.Governance g;\\n    Storage.Oracle o;\\n    Storage.Rain r;\\n    Storage.Silo s;\\n    uint256 depreciated1;\\n    Storage.Weather w;\\n    Storage.AssetSilo bean;\\n    Storage.AssetSilo lp;\\n    Storage.IncreaseSilo si;\\n    Storage.SeasonOfPlenty sop;\\n    uint256 depreciated2;\\n    uint256 depreciated3;\\n    uint256 depreciated4;\\n    uint256 depreciated5;\\n    uint256 depreciated6;\\n    mapping (uint32 => uint256) sops;\\n    mapping (address => Account.State) a;\\n    uint32 bip0Start;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.7.6;\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beans\",\"type\":\"uint256\"}],\"name\":\"BeanDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"crates\",\"type\":\"uint32[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"crateBeans\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beans\",\"type\":\"uint256\"}],\"name\":\"BeanRemove\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"InitHotFix2","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}