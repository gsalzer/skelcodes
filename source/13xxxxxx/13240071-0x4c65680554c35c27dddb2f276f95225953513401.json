{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/aparnakrishnan/Desktop/Opyn/OpynV2/contracts/interfaces/ERC20Interface.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.6.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface ERC20Interface {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/Users/aparnakrishnan/Desktop/Opyn/OpynV2/contracts/interfaces/ICurve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\ninterface ICurve {\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/aparnakrishnan/Desktop/Opyn/OpynV2/contracts/interfaces/IStakeDao.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport {ERC20Interface} from \\\"./ERC20Interface.sol\\\";\\n\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\ninterface IStakeDao {\\n    function getPricePerFullShare() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/aparnakrishnan/Desktop/Opyn/OpynV2/contracts/interfaces/OracleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface OracleInterface {\\n    function isLockingPeriodOver(address _asset, uint256 _expiryTimestamp) external view returns (bool);\\n\\n    function isDisputePeriodOver(address _asset, uint256 _expiryTimestamp) external view returns (bool);\\n\\n    function getExpiryPrice(address _asset, uint256 _expiryTimestamp) external view returns (uint256, bool);\\n\\n    function getDisputer() external view returns (address);\\n\\n    function getPricer(address _asset) external view returns (address);\\n\\n    function getPrice(address _asset) external view returns (uint256);\\n\\n    function getPricerLockingPeriod(address _pricer) external view returns (uint256);\\n\\n    function getPricerDisputePeriod(address _pricer) external view returns (uint256);\\n\\n    function getChainlinkRoundData(address _asset, uint80 _roundId) external view returns (uint256, uint256);\\n\\n    // Non-view function\\n\\n    function setAssetPricer(address _asset, address _pricer) external;\\n\\n    function setLockingPeriod(address _pricer, uint256 _lockingPeriod) external;\\n\\n    function setDisputePeriod(address _pricer, uint256 _disputePeriod) external;\\n\\n    function setExpiryPrice(\\n        address _asset,\\n        uint256 _expiryTimestamp,\\n        uint256 _price\\n    ) external;\\n\\n    function disputeExpiryPrice(\\n        address _asset,\\n        uint256 _expiryTimestamp,\\n        uint256 _price\\n    ) external;\\n\\n    function setDisputer(address _disputer) external;\\n}\\n\"\r\n    },\r\n    \"/Users/aparnakrishnan/Desktop/Opyn/OpynV2/contracts/packages/oz/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// openzeppelin-contracts v3.1.0\\n\\n/* solhint-disable */\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/aparnakrishnan/Desktop/Opyn/OpynV2/contracts/pricers/StakedaoPricer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\nimport {ICurve} from \\\"../interfaces/ICurve.sol\\\";\\nimport {IStakeDao} from \\\"../interfaces/IStakeDao.sol\\\";\\nimport {OracleInterface} from \\\"../interfaces/OracleInterface.sol\\\";\\nimport {SafeMath} from \\\"../packages/oz/SafeMath.sol\\\";\\n\\n/**\\n * Error Codes\\n * P1: cannot deploy pricer, lpToken address cannot be 0\\n * P2: cannot deploy pricer, underlying address cannot be 0\\n * P3: cannot deploy pricer, oracle address cannot be 0\\n * P4: cannot deploy pricer, curve address cannot be 0\\n * P5: cannot retrieve price, underlying price is 0\\n * P6: cannot set expiry price in oracle, underlying price is 0 and has not been set\\n * P7: cannot retrieve historical prices, getHistoricalPrice has been deprecated\\n */\\n\\n/**\\n * @title StakedaoPricer\\n * @author Opyn Team\\n * @notice A Pricer contract for a Stakedao lpToken\\n */\\ncontract StakedaoPricer {\\n    using SafeMath for uint256;\\n\\n    /// @notice curve pool\\n    ICurve public curve;\\n\\n    /// @notice lpToken that this pricer will a get price for\\n    IStakeDao public lpToken;\\n\\n    /// @notice opyn oracle address\\n    OracleInterface public oracle;\\n\\n    /// @notice underlying asset for this lpToken\\n    address public underlying;\\n\\n    /**\\n     * @param _lpToken lpToken asset\\n     * @param _underlying underlying asset for this lpToken\\n     * @param _oracle Opyn Oracle contract address\\n     * @param _curve curve pool contract address\\n     */\\n    constructor(\\n        address _lpToken,\\n        address _underlying,\\n        address _oracle,\\n        address _curve\\n    ) public {\\n        require(_lpToken != address(0), \\\"P1\\\");\\n        require(_underlying != address(0), \\\"P2\\\");\\n        require(_oracle != address(0), \\\"P3\\\");\\n        require(_curve != address(0), \\\"P4\\\");\\n\\n        lpToken = IStakeDao(_lpToken);\\n        underlying = _underlying;\\n        oracle = OracleInterface(_oracle);\\n        curve = ICurve(_curve);\\n    }\\n\\n    /**\\n     * @notice get the live price for the asset\\n     * @dev overrides the getPrice function in OpynPricerInterface\\n     * @return price of 1 lpToken in USD, scaled by 1e8\\n     */\\n    function getPrice() external view returns (uint256) {\\n        uint256 underlyingPrice = oracle.getPrice(address(underlying));\\n        require(underlyingPrice > 0, \\\"P5\\\");\\n        return _underlyingPriceToYtokenPrice(underlyingPrice);\\n    }\\n\\n    /**\\n     * @notice set the expiry price in the oracle\\n     * @dev requires that the underlying price has been set before setting a lpToken price\\n     * @param _expiryTimestamp expiry to set a price for\\n     */\\n    function setExpiryPriceInOracle(uint256 _expiryTimestamp) external {\\n        (uint256 underlyingPriceExpiry, ) = oracle.getExpiryPrice(underlying, _expiryTimestamp);\\n        require(underlyingPriceExpiry > 0, \\\"P6\\\");\\n        uint256 lpTokenPrice = _underlyingPriceToYtokenPrice(underlyingPriceExpiry);\\n        oracle.setExpiryPrice(address(lpToken), _expiryTimestamp, lpTokenPrice);\\n    }\\n\\n    /**\\n     * @dev convert underlying price to lpToken price with the lpToken to underlying exchange rate\\n     * @param _underlyingPrice price of 1 underlying token (hardcoded 1e18 for WETH) in USD, scaled by 1e8\\n     * @return price of 1 lpToken in USD, scaled by 1e8\\n     */\\n    function _underlyingPriceToYtokenPrice(uint256 _underlyingPrice) private view returns (uint256) {\\n        uint256 pricePerShare = lpToken.getPricePerFullShare(); // 18 decimals\\n        uint256 curvePrice = curve.get_virtual_price(); // 18 decimals\\n\\n        // scale by 1e36 to return price of 1 lpToken in USD, scaled by 1e8\\n        // assumes underlyingPrice is 1e8, curve price is 1e18, pricePerShare is 1e18\\n        return pricePerShare.mul(_underlyingPrice).mul(curvePrice).div(1e36);\\n    }\\n\\n    function getHistoricalPrice(uint80) external pure returns (uint256, uint256) {\\n        revert(\\\"P7\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curve\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"contract ICurve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"name\":\"getHistoricalPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IStakeDao\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract OracleInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"setExpiryPriceInOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakedaoPricer","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000024129b935aff071c4f0554882c0d9573f4975fed0000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000789cd7ab3742e23ce0952f6bc3eb3a73a0e088330000000000000000000000007fc77b5c7614e1533320ea6ddc2eb61fa00a9714","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}