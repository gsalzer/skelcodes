{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/stake/LockTOS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\nimport \\\"../interfaces/ILockTOS.sol\\\";\\nimport \\\"../interfaces/ITOS.sol\\\";\\nimport \\\"../libraries/LibLockTOS.sol\\\";\\nimport \\\"../common/AccessibleCommon.sol\\\";\\nimport \\\"./LockTOSStorage.sol\\\";\\n\\n\\ncontract LockTOS is LockTOSStorage, AccessibleCommon, ILockTOS {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using SignedSafeMath for int256;\\n\\n    event LockCreated(\\n        address account,\\n        uint256 lockId,\\n        uint256 value,\\n        uint256 unlockTime\\n    );\\n    event LockAmountIncreased(address account, uint256 lockId, uint256 value);\\n    event LockUnlockTimeIncreased(\\n        address account,\\n        uint256 lockId,\\n        uint256 unlockTime\\n    );\\n    event LockDeposited(address account, uint256 lockId, uint256 value);\\n    event LockWithdrawn(address account, uint256 lockId, uint256 value);\\n\\n    /// @dev Check if a function is used or not\\n    modifier ifFree {\\n        require(free == 1, \\\"LockId is already in use\\\");\\n        free = 0;\\n        _;\\n        free = 1;\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function needCheckpoint() external override view returns (bool need) {\\n        uint256 len = pointHistory.length;\\n        if (len == 0) {\\n            return true;\\n        }\\n        need = (block.timestamp - pointHistory[len - 1].timestamp) > epochUnit; // if the last record was within a week\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function setMaxTime(uint256 _maxTime) external override onlyOwner {\\n        maxTime = _maxTime;\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function increaseAmount(uint256 _lockId, uint256 _value) external override {\\n        depositFor(msg.sender, _lockId, _value);\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function allHolders() external override view returns (address[] memory) {\\n        return uniqueUsers;\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function activeHolders() external override view returns (address[] memory) {\\n        bool[] memory activeCheck = new bool[](uniqueUsers.length);\\n        uint256 activeSize = 0;        \\n        for (uint256 i = 0; i < uniqueUsers.length; ++i) {\\n            uint256[] memory activeLocks = activeLocksOf(uniqueUsers[i]);\\n            if (activeLocks.length > 0) {\\n                activeSize++;\\n                activeCheck[i] = true;\\n            }\\n        }\\n\\n        address[] memory activeUsers = new address[](activeSize);\\n        uint256 j = 0;\\n        for (uint256 i = 0; i < uniqueUsers.length; ++i) {\\n            if (activeCheck[i]) {\\n                activeUsers[j++] = uniqueUsers[i];\\n            }\\n        }\\n        return activeUsers;\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function createLockWithPermit(\\n        uint256 _value,\\n        uint256 _unlockWeeks,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external override returns (uint256 lockId) {\\n        ITOS(tos).permit(\\n            msg.sender,\\n            address(this),\\n            _value,\\n            _deadline,\\n            _v,\\n            _r,\\n            _s\\n        );\\n        lockId = createLock(_value, _unlockWeeks);\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function increaseUnlockTime(uint256 _lockId, uint256 _unlockWeeks)\\n        external\\n        override\\n    {\\n        require(_unlockWeeks > 0, \\\"Unlock period less than a week\\\");\\n        cumulativeEpochUnit = cumulativeEpochUnit.add(_unlockWeeks);\\n\\n        LibLockTOS.LockedBalance memory lock =\\n            lockedBalances[msg.sender][_lockId];\\n        uint256 unlockTime = lock.end.add(_unlockWeeks.mul(epochUnit));\\n        unlockTime = unlockTime.div(epochUnit).mul(epochUnit);\\n        require(\\n            unlockTime - block.timestamp < maxTime,\\n            \\\"Max unlock time is 3 years\\\"\\n        );\\n        require(lock.end > block.timestamp, \\\"Lock time already finished\\\");\\n        require(lock.end < unlockTime, \\\"New lock time must be greater\\\");\\n        require(lock.amount > 0, \\\"No existing locked TOS\\\");\\n        _deposit(msg.sender, _lockId, 0, unlockTime);\\n\\n        emit LockUnlockTimeIncreased(msg.sender, _lockId, unlockTime);\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function withdrawAll() external override ifFree {\\n        uint256[] storage locks = userLocks[msg.sender];\\n        if (locks.length == 0) {\\n            return;\\n        }\\n\\n        for (uint256 i = 0; i < locks.length; i++) {\\n            LibLockTOS.LockedBalance memory lock = allLocks[locks[i]];\\n            if (\\n                lock.withdrawn == false &&\\n                locks[i] > 0 &&\\n                lock.amount > 0 &&\\n                lock.start > 0 &&\\n                lock.end > 0 &&\\n                lock.end < block.timestamp\\n            ) {\\n                _withdraw(locks[i]);\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function globalCheckpoint() external override {\\n        _recordHistoryPoints();\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function withdraw(uint256 _lockId) public override ifFree {\\n        require(_lockId > 0, \\\"_lockId is zero\\\");\\n        _withdraw(_lockId);\\n    }\\n\\n    /// @dev Send staked amount back to user\\n    function _withdraw(uint256 _lockId) internal {\\n        LibLockTOS.LockedBalance memory lockedOld =\\n            lockedBalances[msg.sender][_lockId];\\n        require(lockedOld.withdrawn == false, \\\"Already withdrawn\\\");\\n        require(lockedOld.start > 0, \\\"Lock does not exist\\\");\\n        require(lockedOld.end < block.timestamp, \\\"Lock time not finished\\\");\\n        require(lockedOld.amount > 0, \\\"No amount to withdraw\\\");\\n\\n        LibLockTOS.LockedBalance memory lockedNew =\\n            LibLockTOS.LockedBalance({\\n                amount: 0,\\n                start: 0,\\n                end: 0,\\n                withdrawn: true\\n            });\\n\\n        // Checkpoint\\n        _checkpoint(lockedNew, lockedOld);\\n\\n        // Transfer TOS back\\n        uint256 amount = lockedOld.amount;\\n        lockedBalances[msg.sender][_lockId] = lockedNew;\\n        allLocks[_lockId] = lockedNew;\\n\\n        IERC20(tos).transfer(msg.sender, amount);\\n        emit LockWithdrawn(msg.sender, _lockId, amount);\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function createLock(uint256 _value, uint256 _unlockWeeks)\\n        public\\n        override\\n        returns (uint256 lockId)\\n    {\\n        require(_value > 0, \\\"Value locked should be non-zero\\\");\\n        require(_unlockWeeks > 0, \\\"Unlock period less than a week\\\");\\n\\n        cumulativeEpochUnit = cumulativeEpochUnit.add(_unlockWeeks);\\n        cumulativeTOSAmount = cumulativeTOSAmount.add(_value);\\n        uint256 unlockTime = block.timestamp.add(_unlockWeeks.mul(epochUnit));\\n        unlockTime = unlockTime.div(epochUnit).mul(epochUnit);\\n        require(\\n            unlockTime - block.timestamp <= maxTime,\\n            \\\"Max unlock time is 3 years\\\"\\n        );\\n\\n        if (userLocks[msg.sender].length == 0) { // check if user for the first time\\n            uniqueUsers.push(msg.sender);\\n        }\\n\\n        lockIdCounter = lockIdCounter.add(1);\\n        lockId = lockIdCounter;\\n\\n        _deposit(msg.sender, lockId, _value, unlockTime);\\n        userLocks[msg.sender].push(lockId);\\n\\n        emit LockCreated(msg.sender, lockId, _value, unlockTime);\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function depositFor(\\n        address _addr,\\n        uint256 _lockId,\\n        uint256 _value\\n    ) public override {\\n        require(_value > 0, \\\"Value locked should be non-zero\\\");\\n        LibLockTOS.LockedBalance memory lock = lockedBalances[_addr][_lockId];\\n        require(lock.withdrawn == false, \\\"Lock is withdrawn\\\");\\n        require(lock.start > 0, \\\"Lock does not exist\\\");\\n        require(lock.end > block.timestamp, \\\"Lock time is finished\\\");\\n\\n        cumulativeTOSAmount = cumulativeTOSAmount.add(_value);\\n        _deposit(_addr, _lockId, _value, 0);\\n        emit LockDeposited(msg.sender, _lockId, _value);\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function totalSupplyAt(uint256 _timestamp)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (pointHistory.length == 0) {\\n            return 0;\\n        }\\n\\n        (bool success, LibLockTOS.Point memory point) =\\n            _findClosestPoint(pointHistory, _timestamp);\\n        if (!success) {\\n            return 0;\\n        }\\n        \\n        point = _fillRecordGaps(point, _timestamp);\\n        int256 currentBias =\\n            point.slope * (_timestamp.sub(point.timestamp).toInt256());\\n        return\\n            uint256(point.bias > currentBias ? point.bias - currentBias : 0)\\n                .div(MULTIPLIER);\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function totalLockedAmountOf(address _addr) external view override returns (uint256) {\\n        uint256 len = userLocks[_addr].length;\\n        uint256 stakedAmount = 0;\\n        for (uint256 i = 0; i < len; ++i) {\\n            uint256 lockId = userLocks[_addr][i];\\n            LibLockTOS.LockedBalance memory lock = lockedBalances[_addr][lockId];\\n            stakedAmount = stakedAmount.add(lock.amount);\\n        }\\n        return stakedAmount;\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function withdrawableAmountOf(address _addr) external view override returns (uint256) {\\n        uint256 len = userLocks[_addr].length;\\n        uint256 amount = 0;\\n        for(uint i = 0; i < len; i++){\\n            uint256 lockId = userLocks[_addr][i];\\n            LibLockTOS.LockedBalance memory lock = lockedBalances[_addr][lockId];\\n            if(lock.end <= block.timestamp && lock.amount > 0 && lock.withdrawn == false) {\\n                amount = amount.add(lock.amount);\\n            }\\n        }\\n        return amount;\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function totalSupply() external view override returns (uint256) {\\n        if (pointHistory.length == 0) {\\n            return 0;\\n        }\\n\\n        LibLockTOS.Point memory point = _fillRecordGaps(\\n            pointHistory[pointHistory.length - 1],\\n            block.timestamp\\n        );\\n\\n        int256 currentBias =\\n            point.slope.mul(block.timestamp.sub(point.timestamp).toInt256());\\n        return\\n            uint256(point.bias > currentBias ? point.bias.sub(currentBias) : 0)\\n                .div(MULTIPLIER);\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function balanceOfLockAt(uint256 _lockId, uint256 _timestamp)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        (bool success, LibLockTOS.Point memory point) =\\n            _findClosestPoint(lockPointHistory[_lockId], _timestamp);\\n        if (!success) {\\n            return 0;\\n        }\\n        int256 currentBias =\\n            point.slope.mul(_timestamp.sub(point.timestamp).toInt256());\\n        return\\n            uint256(point.bias > currentBias ? point.bias.sub(currentBias) : 0)\\n                .div(MULTIPLIER);\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function balanceOfLock(uint256 _lockId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 len = lockPointHistory[_lockId].length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n\\n        LibLockTOS.Point memory point = lockPointHistory[_lockId][len - 1];\\n        int256 currentBias =\\n            point.slope.mul(block.timestamp.sub(point.timestamp).toInt256());\\n        return\\n            uint256(point.bias > currentBias ? point.bias.sub(currentBias) : 0)\\n                .div(MULTIPLIER);\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function balanceOfAt(address _addr, uint256 _timestamp)\\n        public\\n        view\\n        override\\n        returns (uint256 balance)\\n    {\\n        uint256[] memory locks = userLocks[_addr];\\n        if (locks.length == 0) return 0;\\n        for (uint256 i = 0; i < locks.length; ++i) {\\n            balance = balance.add(balanceOfLockAt(locks[i], _timestamp));\\n        }\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function balanceOf(address _addr)\\n        public\\n        view\\n        override\\n        returns (uint256 balance)\\n    {\\n        uint256[] memory locks = userLocks[_addr];\\n        if (locks.length == 0) return 0;\\n        for (uint256 i = 0; i < locks.length; ++i) {\\n            balance = balance.add(balanceOfLock(locks[i]));\\n        }\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function locksInfo(uint256 _lockId)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256 start,\\n            uint256 end,\\n            uint256 amount\\n        )\\n    {\\n        return (\\n            allLocks[_lockId].start,\\n            allLocks[_lockId].end,\\n            allLocks[_lockId].amount\\n        );\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function locksOf(address _addr)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return userLocks[_addr];\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function withdrawableLocksOf(address _addr)  external view override returns (uint256[] memory) {\\n        uint256 len = userLocks[_addr].length;\\n        uint256 size = 0;\\n        for(uint i = 0; i < len; i++){\\n            uint256 lockId = userLocks[_addr][i];\\n            LibLockTOS.LockedBalance memory lock = lockedBalances[_addr][lockId];\\n            if(lock.end <= block.timestamp && lock.amount > 0 && lock.withdrawn == false) {\\n                size++;\\n            }\\n        }\\n\\n        uint256[] memory withdrawable = new uint256[](size);\\n        size = 0;\\n        for(uint i = 0; i < len; i++) {\\n            uint256 lockId = userLocks[_addr][i];\\n            LibLockTOS.LockedBalance memory lock = lockedBalances[_addr][lockId];\\n            if(lock.end <= block.timestamp && lock.amount > 0 && lock.withdrawn == false) {\\n                withdrawable[size++] = lockId;\\n            }\\n        }\\n        return withdrawable;\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function activeLocksOf(address _addr)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        uint256 len = userLocks[_addr].length;\\n        uint256 _size = 0;\\n        for(uint i = 0; i < len; i++){\\n            uint256 lockId = userLocks[_addr][i];\\n            LibLockTOS.LockedBalance memory lock = lockedBalances[_addr][lockId];\\n            if(lock.end > block.timestamp) {\\n                _size++;\\n            }\\n        }\\n\\n        uint256[] memory activeLocks = new uint256[](_size);\\n        _size = 0;\\n        for(uint i = 0; i < len; i++) {\\n            uint256 lockId = userLocks[_addr][i];\\n            LibLockTOS.LockedBalance memory lock = lockedBalances[_addr][lockId];\\n            if(lock.end > block.timestamp) {\\n                activeLocks[_size++] = lockId;\\n            }\\n        }\\n        return activeLocks;\\n    }\\n\\n    /// @inheritdoc ILockTOS\\n    function pointHistoryOf(uint256 _lockId)\\n        public\\n        view\\n        override\\n        returns (LibLockTOS.Point[] memory)\\n    {\\n        return lockPointHistory[_lockId];\\n    }\\n\\n    /// @dev Finds closest point\\n    function _findClosestPoint(\\n        LibLockTOS.Point[] storage _history,\\n        uint256 _timestamp\\n    ) internal view returns (bool success, LibLockTOS.Point memory point) {\\n        if (_history.length == 0) {\\n            return (false, point);\\n        }\\n        \\n        uint256 left = 0;\\n        uint256 right = _history.length;\\n        while (left + 1 < right) {\\n            uint256 mid = left.add(right).div(2);\\n            if (_history[mid].timestamp <= _timestamp) {\\n                left = mid;\\n            } else {\\n                right = mid;\\n            }\\n        }\\n\\n        if (_history[left].timestamp <= _timestamp) {\\n            return (true, _history[left]);\\n        }\\n        return (false, point);\\n    }\\n\\n    /// @dev Deposit\\n    function _deposit(\\n        address _addr,\\n        uint256 _lockId,\\n        uint256 _value,\\n        uint256 _unlockTime\\n    ) internal ifFree {\\n        LibLockTOS.LockedBalance memory lockedOld =\\n            lockedBalances[_addr][_lockId];\\n        LibLockTOS.LockedBalance memory lockedNew =\\n            LibLockTOS.LockedBalance({\\n                amount: lockedOld.amount,\\n                start: lockedOld.start,\\n                end: lockedOld.end,\\n                withdrawn: false\\n            });\\n\\n        // Make new lock\\n        lockedNew.amount = lockedNew.amount.add(_value);\\n        if (_unlockTime > 0) {\\n            lockedNew.end = _unlockTime;\\n        }\\n        if (lockedNew.start == 0) {\\n            lockedNew.start = block.timestamp;\\n        }\\n\\n        // Checkpoint\\n        _checkpoint(lockedNew, lockedOld);\\n\\n        // Save new lock\\n        lockedBalances[_addr][_lockId] = lockedNew;\\n        allLocks[_lockId] = lockedNew;\\n\\n        // Save user point,\\n        int256 userSlope =\\n            lockedNew.amount.mul(MULTIPLIER).div(maxTime).toInt256();\\n        int256 userBias =\\n            userSlope.mul(lockedNew.end.sub(block.timestamp).toInt256());\\n        LibLockTOS.Point memory userPoint =\\n            LibLockTOS.Point({\\n                timestamp: block.timestamp,\\n                slope: userSlope,\\n                bias: userBias\\n            });\\n        lockPointHistory[_lockId].push(userPoint);\\n\\n        // Transfer TOS\\n        require(\\n            IERC20(tos).transferFrom(msg.sender, address(this), _value),\\n            \\\"LockTOS: fail transferFrom\\\"\\n        );\\n    }\\n\\n    /// @dev Checkpoint\\n    function _checkpoint(\\n        LibLockTOS.LockedBalance memory lockedNew,\\n        LibLockTOS.LockedBalance memory lockedOld\\n    ) internal {\\n        uint256 timestamp = block.timestamp;\\n        LibLockTOS.SlopeChange memory changeNew =\\n            LibLockTOS.SlopeChange({slope: 0, bias: 0, changeTime: 0});\\n        LibLockTOS.SlopeChange memory changeOld =\\n            LibLockTOS.SlopeChange({slope: 0, bias: 0, changeTime: 0});\\n\\n        // Initialize slope changes\\n        if (lockedNew.end > timestamp && lockedNew.amount > 0) {\\n            changeNew.slope = lockedNew\\n                .amount\\n                .mul(MULTIPLIER)\\n                .div(maxTime)\\n                .toInt256();\\n            changeNew.bias = changeNew.slope\\n                .mul(lockedNew.end.sub(timestamp).toInt256());\\n            changeNew.changeTime = lockedNew.end;\\n        }\\n        if (lockedOld.end > timestamp && lockedOld.amount > 0) {\\n            changeOld.slope = lockedOld\\n                .amount\\n                .mul(MULTIPLIER)\\n                .div(maxTime)\\n                .toInt256();\\n            changeOld.bias = changeOld.slope\\n                .mul(lockedOld.end.sub(timestamp).toInt256());\\n            changeOld.changeTime = lockedOld.end;\\n        }\\n\\n        // Record history gaps\\n        LibLockTOS.Point memory currentWeekPoint = _recordHistoryPoints();\\n        currentWeekPoint.bias = currentWeekPoint.bias.add(\\n            changeNew.bias.sub(changeOld.bias)\\n        );\\n        currentWeekPoint.slope = currentWeekPoint.slope.add(\\n            changeNew.slope.sub(changeOld.slope)\\n        );\\n        currentWeekPoint.bias = currentWeekPoint.bias > 0\\n            ? currentWeekPoint.bias\\n            : 0;\\n        currentWeekPoint.slope = currentWeekPoint.slope > 0\\n            ? currentWeekPoint.slope\\n            : 0;\\n        pointHistory[pointHistory.length - 1] = currentWeekPoint;\\n\\n        // Update slope changes\\n        _updateSlopeChanges(changeNew, changeOld);\\n    }\\n\\n    /// @dev Fill the gaps\\n    function _recordHistoryPoints()\\n        internal\\n        returns (LibLockTOS.Point memory lastWeek)\\n    {\\n        uint256 timestamp = block.timestamp;\\n        if (pointHistory.length > 0) {\\n            lastWeek = pointHistory[pointHistory.length - 1];\\n        } else {\\n            lastWeek = LibLockTOS.Point({\\n                bias: 0,\\n                slope: 0,\\n                timestamp: timestamp\\n            });\\n        }\\n\\n        // Iterate through all past unrecoreded weeks and record\\n        uint256 pointTimestampIterator =\\n            lastWeek.timestamp.div(epochUnit).mul(epochUnit);\\n        while (pointTimestampIterator != timestamp) {\\n            pointTimestampIterator = Math.min(\\n                pointTimestampIterator.add(epochUnit),\\n                timestamp\\n            );\\n            int256 deltaSlope = slopeChanges[pointTimestampIterator];\\n            int256 deltaTime =\\n                Math.min(pointTimestampIterator.sub(lastWeek.timestamp), epochUnit).toInt256();\\n            lastWeek.bias = lastWeek.bias.sub(lastWeek.slope.mul(deltaTime));\\n            lastWeek.slope = lastWeek.slope.add(deltaSlope);\\n            lastWeek.bias = lastWeek.bias > 0 ? lastWeek.bias : 0;\\n            lastWeek.slope = lastWeek.slope > 0 ? lastWeek.slope : 0;\\n            lastWeek.timestamp = pointTimestampIterator;\\n            pointHistory.push(lastWeek);\\n        }\\n        return lastWeek;\\n    }\\n\\n    /// @dev Fills the record gaps\\n    function _fillRecordGaps(LibLockTOS.Point memory week, uint256 timestamp)\\n        internal\\n        view\\n        returns (LibLockTOS.Point memory)\\n    {\\n        // Iterate through all past unrecoreded weeks\\n        uint256 pointTimestampIterator =\\n            week.timestamp.div(epochUnit).mul(epochUnit);\\n        while (pointTimestampIterator != timestamp) {\\n            pointTimestampIterator = Math.min(\\n                pointTimestampIterator.add(epochUnit),\\n                timestamp\\n            );\\n            int256 deltaSlope = slopeChanges[pointTimestampIterator];\\n            int256 deltaTime =\\n                Math.min(pointTimestampIterator.sub(week.timestamp), epochUnit).toInt256();\\n            week.bias = week.bias.sub(week.slope.mul(deltaTime));\\n            week.slope = week.slope.add(deltaSlope);\\n            week.bias = week.bias > 0 ? week.bias : 0;\\n            week.slope = week.slope > 0 ? week.slope : 0;\\n            week.timestamp = pointTimestampIterator;\\n        }\\n        return week;\\n    }\\n\\n    /// @dev Update slope changes\\n    function _updateSlopeChanges(\\n        LibLockTOS.SlopeChange memory changeNew,\\n        LibLockTOS.SlopeChange memory changeOld\\n    ) internal {\\n        int256 deltaSlopeNew = slopeChanges[changeNew.changeTime];\\n        int256 deltaSlopeOld = slopeChanges[changeOld.changeTime];\\n        if (changeOld.changeTime > block.timestamp) {\\n            deltaSlopeOld = deltaSlopeOld.add(changeOld.slope);\\n            if (changeOld.changeTime == changeNew.changeTime) {\\n                deltaSlopeOld = deltaSlopeOld.sub(changeNew.slope);\\n            }\\n            slopeChanges[changeOld.changeTime] = deltaSlopeOld;\\n        }\\n        if (\\n            changeNew.changeTime > block.timestamp &&\\n            changeNew.changeTime > changeOld.changeTime\\n        ) {\\n            deltaSlopeNew = deltaSlopeNew.sub(changeNew.slope);\\n            slopeChanges[changeNew.changeTime] = deltaSlopeNew;\\n        }\\n    }\\n\\n    function getCurrentTime() external view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function currentStakedTotalTOS() external view returns (uint256) {\\n        return IERC20(tos).balanceOf(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SignedSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILockTOS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/LibLockTOS.sol\\\";\\n\\n\\ninterface ILockTOS {\\n    \\n    /// @dev Returns addresses of all holders of LockTOS\\n    function allHolders() external returns (address[] memory);\\n\\n    /// @dev Returns addresses of active holders of LockTOS\\n    function activeHolders() external returns (address[] memory);\\n\\n    /// @dev Returns all withdrawable locks\\n    function withdrawableLocksOf(address user) external view returns (uint256[] memory);\\n\\n    /// @dev Returns all locks of `_addr`\\n    function locksOf(address _addr) external view returns (uint256[] memory);\\n\\n    /// @dev Returns all locks of `_addr`\\n    function activeLocksOf(address _addr) external view returns (uint256[] memory);\\n\\n    /// @dev Total locked amount of `_addr`\\n    function totalLockedAmountOf(address _addr) external view returns (uint256);\\n\\n    /// @dev     jhswuqhdiuwjhdoiehdoijijf   bhabcgfzvg tqafstqfzys amount of `_addr`\\n    function withdrawableAmountOf(address _addr) external view returns (uint256);\\n\\n    /// @dev Returns all locks of `_addr`\\n    function locksInfo(uint256 _lockId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /// @dev Returns all history of `_addr`\\n    function pointHistoryOf(uint256 _lockId)\\n        external\\n        view\\n        returns (LibLockTOS.Point[] memory);\\n\\n    /// @dev Total vote weight\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @dev Total vote weight at `_timestamp`\\n    function totalSupplyAt(uint256 _timestamp) external view returns (uint256);\\n\\n    /// @dev Vote weight of lock at `_timestamp`\\n    function balanceOfLockAt(uint256 _lockId, uint256 _timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Vote weight of lock\\n    function balanceOfLock(uint256 _lockId) external view returns (uint256);\\n\\n    /// @dev Vote weight of a user at `_timestamp`\\n    function balanceOfAt(address _addr, uint256 _timestamp)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    /// @dev Vote weight of a iser\\n    function balanceOf(address _addr) external view returns (uint256 balance);\\n\\n    /// @dev Increase amount\\n    function increaseAmount(uint256 _lockId, uint256 _value) external;\\n\\n    /// @dev Deposits value for '_addr'\\n    function depositFor(\\n        address _addr,\\n        uint256 _lockId,\\n        uint256 _value\\n    ) external;\\n\\n    /// @dev Create lock using permit\\n    function createLockWithPermit(\\n        uint256 _value,\\n        uint256 _unlockTime,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external returns (uint256 lockId);\\n\\n    /// @dev Create lock\\n    function createLock(uint256 _value, uint256 _unlockTime)\\n        external\\n        returns (uint256 lockId);\\n\\n    /// @dev Increase\\n    function increaseUnlockTime(uint256 _lockId, uint256 unlockTime) external;\\n\\n    /// @dev Withdraw all TOS\\n    function withdrawAll() external;\\n\\n    /// @dev Withdraw TOS\\n    function withdraw(uint256 _lockId) external;\\n    \\n    /// @dev needCheckpoint\\n    function needCheckpoint() external view returns (bool need);\\n\\n    /// @dev Global checkpoint\\n    function globalCheckpoint() external;\\n\\n    /// @dev set MaxTime\\n    function setMaxTime(uint256 _maxTime) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITOS.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\ninterface ITOS {\\n    /// @dev Issue a token.\\n    /// @param to  who takes the issue\\n    /// @param amount the amount to issue\\n    function mint(address to, uint256 amount) external returns (bool);\\n\\n    // @dev burn a token.\\n    /// @param from Whose tokens are burned\\n    /// @param amount the amount to burn\\n    function burn(address from, uint256 amount) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /// @dev Authorizes the owner's token to be used by the spender as much as the value.\\n    /// @dev The signature must have the owner's signature.\\n    /// @param owner the token's owner\\n    /// @param spender the account that spend owner's token\\n    /// @param value the amount to be approve to spend\\n    /// @param deadline the deadline that valid the owner's signature\\n    /// @param v the owner's signature - v\\n    /// @param r the owner's signature - r\\n    /// @param s the owner's signature - s\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /// @dev verify the signature\\n    /// @param owner the token's owner\\n    /// @param spender the account that spend owner's token\\n    /// @param value the amount to be approve to spend\\n    /// @param deadline the deadline that valid the owner's signature\\n    /// @param _nounce the _nounce\\n    /// @param sigR the owner's signature - r\\n    /// @param sigS the owner's signature - s\\n    /// @param sigV the owner's signature - v\\n    function verify(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint256 _nounce,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) external view returns (bool);\\n\\n    /// @dev the hash of Permit\\n    /// @param owner the token's owner\\n    /// @param spender the account that spend owner's token\\n    /// @param value the amount to be approve to spend\\n    /// @param deadline the deadline that valid the owner's signature\\n    /// @param _nounce the _nounce\\n    function hashPermit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint256 _nounce\\n    ) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibLockTOS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\nlibrary LibLockTOS {\\n    struct Point {\\n        int256 bias;\\n        int256 slope;\\n        uint256 timestamp;\\n    }\\n\\n    struct LockedBalance {\\n        uint256 start;\\n        uint256 end;\\n        uint256 amount;\\n        bool withdrawn;\\n    }\\n\\n    struct SlopeChange {\\n        int256 bias;\\n        int256 slope;\\n        uint256 changeTime;\\n    }\\n\\n    struct LockedBalanceInfo {\\n        uint256 id;\\n        uint256 start;\\n        uint256 end;\\n        uint256 amount;\\n        uint256 balance;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/AccessibleCommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./AccessRoleCommon.sol\\\";\\n\\ncontract AccessibleCommon is AccessRoleCommon, AccessControl {\\n    modifier onlyOwner() {\\n        require(isAdmin(msg.sender), \\\"Accessible: Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    /// @dev add admin\\n    /// @param account  address to add\\n    function addAdmin(address account) public virtual onlyOwner {\\n        grantRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev remove admin\\n    /// @param account  address to remove\\n    function removeAdmin(address account) public virtual onlyOwner {\\n        renounceRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev transfer admin\\n    /// @param newAdmin new admin address\\n    function transferAdmin(address newAdmin) external virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Accessible: zero address\\\");\\n        require(msg.sender != newAdmin, \\\"Accessible: same admin\\\");\\n\\n        grantRole(ADMIN_ROLE, newAdmin);\\n        renounceRole(ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @dev whether admin\\n    /// @param account  address to check\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(ADMIN_ROLE, account);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/stake/LockTOSStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\nimport \\\"../libraries/LibLockTOS.sol\\\";\\n\\ncontract LockTOSStorage {\\n    /// @dev flag for pause proxy\\n    bool public pauseProxy;\\n\\n    /// @dev registry\\n    address public stakeRegistry;\\n    bool public migratedL2;\\n\\n    uint256 public epochUnit;\\n    uint256 public maxTime;\\n\\n    uint256 public constant MULTIPLIER = 1e18;\\n\\n    address public tos;\\n    uint256 public lockIdCounter;\\n    uint256 public cumulativeEpochUnit;\\n    uint256 public cumulativeTOSAmount;\\n\\n    uint256 internal free = 1;\\n\\n    address[] public uniqueUsers;\\n    LibLockTOS.Point[] public pointHistory;\\n    mapping(uint256 => LibLockTOS.Point[]) public lockPointHistory;\\n    mapping(address => mapping(uint256 => LibLockTOS.LockedBalance))\\n        public lockedBalances;\\n\\n    mapping(uint256 => LibLockTOS.LockedBalance) public allLocks;\\n    mapping(address => uint256[]) public userLocks;\\n    mapping(uint256 => int256) public slopeChanges;\\n    mapping(uint256 => bool) public inUse;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/AccessRoleCommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ncontract AccessRoleCommon {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER\\\");\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LockAmountIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"LockCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LockDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"LockUnlockTimeIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LockWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeHolders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"activeLocksOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allHolders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"}],\"name\":\"balanceOfLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"balanceOfLockAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockWeeks\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockWeeks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"createLockWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativeEpochUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativeTOSAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStakedTotalTOS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalCheckpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inUse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockWeeks\",\"type\":\"uint256\"}],\"name\":\"increaseUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockPointHistory\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"}],\"name\":\"locksInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"locksOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migratedL2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"needCheckpoint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"need\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointHistory\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"}],\"name\":\"pointHistoryOf\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct LibLockTOS.Point[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTime\",\"type\":\"uint256\"}],\"name\":\"setMaxTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slopeChanges\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"totalLockedAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniqueUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"withdrawableAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"withdrawableLocksOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LockTOS","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}