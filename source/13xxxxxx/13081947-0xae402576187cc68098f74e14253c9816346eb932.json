{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2018 Rain <rainbreak@riseup.net>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.7;\r\n\r\nabstract contract SAFEEngineLike {\r\n    function transferInternalCoins(address,address,uint256) virtual external;\r\n    function coinBalance(address) virtual external view returns (uint256);\r\n    function approveSAFEModification(address) virtual external;\r\n    function denySAFEModification(address) virtual external;\r\n}\r\nabstract contract TokenLike {\r\n    function approve(address, uint256) virtual public returns (bool);\r\n    function balanceOf(address) virtual public view returns (uint256);\r\n    function move(address,address,uint256) virtual external;\r\n    function burn(address,uint256) virtual external;\r\n}\r\n\r\ncontract RecyclingSurplusAuctionHouse {\r\n    // --- Auth ---\r\n    mapping (address => uint256) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"RecyclingSurplusAuctionHouse/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Data ---\r\n    struct Bid {\r\n        // Bid size (how many protocol tokens are offered per system coins sold)\r\n        uint256 bidAmount;                                                            // [wad]\r\n        // How many system coins are sold in an auction\r\n        uint256 amountToSell;                                                         // [rad]\r\n        // Who the high bidder is\r\n        address highBidder;\r\n        // When the latest bid expires and the auction can be settled\r\n        uint48  bidExpiry;                                                            // [unix epoch time]\r\n        // Hard deadline for the auction after which no more bids can be placed\r\n        uint48  auctionDeadline;                                                      // [unix epoch time]\r\n    }\r\n\r\n    // Bid data for each separate auction\r\n    mapping (uint256 => Bid) public bids;\r\n\r\n    // SAFE database\r\n    SAFEEngineLike public safeEngine;\r\n    // Protocol token address\r\n    TokenLike      public protocolToken;\r\n    // Receiver of protocol tokens\r\n    address        public protocolTokenBidReceiver;\r\n\r\n    uint256  constant ONE = 1.00E18;                                                  // [wad]\r\n    // Minimum bid increase compared to the last bid in order to take the new one in consideration\r\n    uint256  public   bidIncrease = 1.05E18;                                          // [wad]\r\n    // How long the auction lasts after a new bid is submitted\r\n    uint48   public   bidDuration = 3 hours;                                          // [seconds]\r\n    // Total length of the auction\r\n    uint48   public   totalAuctionLength = 2 days;                                    // [seconds]\r\n    // Number of auctions started up until now\r\n    uint256  public   auctionsStarted = 0;\r\n    // Whether the contract is settled or not\r\n    uint256  public   contractEnabled;\r\n\r\n    bytes32 public constant AUCTION_HOUSE_TYPE = bytes32(\"SURPLUS\");\r\n    bytes32 public constant SURPLUS_AUCTION_TYPE = bytes32(\"RECYCLING\");\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ModifyParameters(bytes32 parameter, uint256 data);\r\n    event ModifyParameters(bytes32 parameter, address addr);\r\n    event RestartAuction(uint256 id, uint256 auctionDeadline);\r\n    event IncreaseBidSize(uint256 id, address highBidder, uint256 amountToBuy, uint256 bid, uint256 bidExpiry);\r\n    event StartAuction(\r\n        uint256 indexed id,\r\n        uint256 auctionsStarted,\r\n        uint256 amountToSell,\r\n        uint256 initialBid,\r\n        uint256 auctionDeadline\r\n    );\r\n    event SettleAuction(uint256 indexed id);\r\n    event DisableContract();\r\n    event TerminateAuctionPrematurely(uint256 indexed id, address sender, address highBidder, uint256 bidAmount);\r\n\r\n    // --- Init ---\r\n    constructor(address safeEngine_, address protocolToken_) public {\r\n        authorizedAccounts[msg.sender] = 1;\r\n        safeEngine = SAFEEngineLike(safeEngine_);\r\n        protocolToken = TokenLike(protocolToken_);\r\n        contractEnabled = 1;\r\n        emit AddAuthorization(msg.sender);\r\n    }\r\n\r\n    // --- Math ---\r\n    function addUint48(uint48 x, uint48 y) internal pure returns (uint48 z) {\r\n        require((z = x + y) >= x, \"RecyclingSurplusAuctionHouse/add-uint48-overflow\");\r\n    }\r\n    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"RecyclingSurplusAuctionHouse/mul-overflow\");\r\n    }\r\n\r\n    // --- Admin ---\r\n    /**\r\n     * @notice Modify uint256 parameters\r\n     * @param parameter The name of the parameter modified\r\n     * @param data New value for the parameter\r\n     */\r\n    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\r\n        if (parameter == \"bidIncrease\") bidIncrease = data;\r\n        else if (parameter == \"bidDuration\") bidDuration = uint48(data);\r\n        else if (parameter == \"totalAuctionLength\") totalAuctionLength = uint48(data);\r\n        else revert(\"RecyclingSurplusAuctionHouse/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, data);\r\n    }\r\n    /**\r\n     * @notice Modify address parameters\r\n     * @param parameter The name of the parameter modified\r\n     * @param addr New address value\r\n     */\r\n    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\r\n        require(addr != address(0), \"RecyclingSurplusAuctionHouse/invalid-address\");\r\n        if (parameter == \"protocolTokenBidReceiver\") protocolTokenBidReceiver = addr;\r\n        else revert(\"RecyclingSurplusAuctionHouse/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, addr);\r\n    }\r\n\r\n    // --- Auction ---\r\n    /**\r\n     * @notice Start a new surplus auction\r\n     * @param amountToSell Total amount of system coins to sell (rad)\r\n     * @param initialBid Initial protocol token bid (wad)\r\n     */\r\n    function startAuction(uint256 amountToSell, uint256 initialBid) external isAuthorized returns (uint256 id) {\r\n        require(contractEnabled == 1, \"RecyclingSurplusAuctionHouse/contract-not-enabled\");\r\n        require(auctionsStarted < uint256(-1), \"RecyclingSurplusAuctionHouse/overflow\");\r\n        require(protocolTokenBidReceiver != address(0), \"RecyclingSurplusAuctionHouse/null-prot-token-receiver\");\r\n        id = ++auctionsStarted;\r\n\r\n        bids[id].bidAmount = initialBid;\r\n        bids[id].amountToSell = amountToSell;\r\n        bids[id].highBidder = msg.sender;\r\n        bids[id].auctionDeadline = addUint48(uint48(now), totalAuctionLength);\r\n\r\n        safeEngine.transferInternalCoins(msg.sender, address(this), amountToSell);\r\n\r\n        emit StartAuction(id, auctionsStarted, amountToSell, initialBid, bids[id].auctionDeadline);\r\n    }\r\n    /**\r\n     * @notice Restart an auction if no bids were submitted for it\r\n     * @param id ID of the auction to restart\r\n     */\r\n    function restartAuction(uint256 id) external {\r\n        require(bids[id].auctionDeadline < now, \"RecyclingSurplusAuctionHouse/not-finished\");\r\n        require(bids[id].bidExpiry == 0, \"RecyclingSurplusAuctionHouse/bid-already-placed\");\r\n        bids[id].auctionDeadline = addUint48(uint48(now), totalAuctionLength);\r\n        emit RestartAuction(id, bids[id].auctionDeadline);\r\n    }\r\n    /**\r\n     * @notice Submit a higher protocol token bid for the same amount of system coins\r\n     * @param id ID of the auction you want to submit the bid for\r\n     * @param amountToBuy Amount of system coins to buy (rad)\r\n     * @param bid New bid submitted (wad)\r\n     */\r\n    function increaseBidSize(uint256 id, uint256 amountToBuy, uint256 bid) external {\r\n        require(contractEnabled == 1, \"RecyclingSurplusAuctionHouse/contract-not-enabled\");\r\n        require(bids[id].highBidder != address(0), \"RecyclingSurplusAuctionHouse/high-bidder-not-set\");\r\n        require(bids[id].bidExpiry > now || bids[id].bidExpiry == 0, \"RecyclingSurplusAuctionHouse/bid-already-expired\");\r\n        require(bids[id].auctionDeadline > now, \"RecyclingSurplusAuctionHouse/auction-already-expired\");\r\n\r\n        require(amountToBuy == bids[id].amountToSell, \"RecyclingSurplusAuctionHouse/amounts-not-matching\");\r\n        require(bid > bids[id].bidAmount, \"RecyclingSurplusAuctionHouse/bid-not-higher\");\r\n        require(multiply(bid, ONE) >= multiply(bidIncrease, bids[id].bidAmount), \"RecyclingSurplusAuctionHouse/insufficient-increase\");\r\n\r\n        if (msg.sender != bids[id].highBidder) {\r\n            protocolToken.move(msg.sender, bids[id].highBidder, bids[id].bidAmount);\r\n            bids[id].highBidder = msg.sender;\r\n        }\r\n        protocolToken.move(msg.sender, address(this), bid - bids[id].bidAmount);\r\n\r\n        bids[id].bidAmount = bid;\r\n        bids[id].bidExpiry = addUint48(uint48(now), bidDuration);\r\n\r\n        emit IncreaseBidSize(id, msg.sender, amountToBuy, bid, bids[id].bidExpiry);\r\n    }\r\n    /**\r\n     * @notice Settle/finish an auction\r\n     * @param id ID of the auction to settle\r\n     */\r\n    function settleAuction(uint256 id) external {\r\n        require(contractEnabled == 1, \"RecyclingSurplusAuctionHouse/contract-not-enabled\");\r\n        require(bids[id].bidExpiry != 0 && (bids[id].bidExpiry < now || bids[id].auctionDeadline < now), \"RecyclingSurplusAuctionHouse/not-finished\");\r\n        safeEngine.transferInternalCoins(address(this), bids[id].highBidder, bids[id].amountToSell);\r\n        protocolToken.move(address(this), protocolTokenBidReceiver, bids[id].bidAmount);\r\n        delete bids[id];\r\n        emit SettleAuction(id);\r\n    }\r\n    /**\r\n    * @notice Disable the auction house (usually called by AccountingEngine)\r\n    **/\r\n    function disableContract() external isAuthorized {\r\n        contractEnabled = 0;\r\n        safeEngine.transferInternalCoins(address(this), msg.sender, safeEngine.coinBalance(address(this)));\r\n        emit DisableContract();\r\n    }\r\n    /**\r\n     * @notice Terminate an auction prematurely.\r\n     * @param id ID of the auction to settle/terminate\r\n     */\r\n    function terminateAuctionPrematurely(uint256 id) external {\r\n        require(contractEnabled == 0, \"RecyclingSurplusAuctionHouse/contract-still-enabled\");\r\n        require(bids[id].highBidder != address(0), \"RecyclingSurplusAuctionHouse/high-bidder-not-set\");\r\n        protocolToken.move(address(this), bids[id].highBidder, bids[id].bidAmount);\r\n        emit TerminateAuctionPrematurely(id, msg.sender, bids[id].highBidder, bids[id].bidAmount);\r\n        delete bids[id];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"highBidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidExpiry\",\"type\":\"uint256\"}],\"name\":\"IncreaseBidSize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"}],\"name\":\"RestartAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"SettleAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionsStarted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"}],\"name\":\"StartAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"highBidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"TerminateAuctionPrematurely\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUCTION_HOUSE_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SURPLUS_AUCTION_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionsStarted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidDuration\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"highBidder\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"bidExpiry\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"auctionDeadline\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"increaseBidSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolToken\",\"outputs\":[{\"internalType\":\"contract TokenLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolTokenBidReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"restartAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract SAFEEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialBid\",\"type\":\"uint256\"}],\"name\":\"startAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"terminateAuctionPrematurely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAuctionLength\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RecyclingSurplusAuctionHouse","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cc88a9d330da1133df3a7bd823b95e52511a69620000000000000000000000006243d8cea23066d098a15582d81a598b4e8391f4","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://406bfa4b4db70f18bf85d830a65b56b8a1dd75e0cc52f04ca0e4730905e45971"}]}