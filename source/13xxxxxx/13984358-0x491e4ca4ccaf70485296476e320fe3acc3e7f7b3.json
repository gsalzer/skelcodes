{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\ncontract Messaging {\r\n    uint256 public threadCount = 1;\r\n\r\n    mapping(uint256 => Thread) public threads;\r\n    mapping(uint256 => Message[]) public messages;\r\n    uint256 public messagesIndex = 0;\r\n    mapping(address => string) private pubEncKeys; // mapping of address to public encryption key https://docs.metamask.io/guide/rpc-api.html#eth-getencryptionpublickey\r\n\r\n\r\n    struct Thread {\r\n        uint256 thread_id;\r\n        address receiver;\r\n        string receiver_key;\r\n        address sender;\r\n        string sender_key;\r\n        bool encrypted;\r\n    }\r\n\r\n    struct Message {\r\n        address receiver;\r\n        string uri;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    event MessageSent (\r\n        address receiver,\r\n        string uri,\r\n        uint256 timestamp,\r\n        address sender,\r\n        uint256 thread_id\r\n    );\r\n\r\n\r\n    event ThreadCreated (\r\n        address receiver,\r\n        address sender,\r\n        uint256 thread_id,\r\n        uint256 timestamp,\r\n        string _sender_key,\r\n        string _receiver_key,\r\n        bool _encrypted\r\n    );\r\n\r\n\r\n    function getPubEncKeys(address receiver) public view returns(string memory sender_key, string memory receiver_key) {\r\n\r\n        // require(msg.sender != receiver, \"Sender can't be receiver\");\r\n        require(bytes(pubEncKeys[msg.sender]).length != 0, \"Sender isn't registered on Dakiya\");\r\n\r\n        if (bytes(pubEncKeys[msg.sender]).length != 0) {\r\n            sender_key = pubEncKeys[msg.sender];\r\n        }\r\n        if (bytes(pubEncKeys[receiver]).length != 0) {\r\n            receiver_key = pubEncKeys[receiver];\r\n        }\r\n        return (sender_key, receiver_key);\r\n    }\r\n\r\n    function checkUserRegistration() public view returns(bool) {\r\n        return bytes(pubEncKeys[msg.sender]).length != 0;\r\n    }\r\n\r\n    function setPubEncKey(string memory encKey) public {\r\n        pubEncKeys[msg.sender] = encKey;\r\n    }\r\n\r\n    function newThread(\r\n        address _receiver,\r\n        string memory _sender_key,\r\n        string memory _receiver_key,\r\n        bool encrypted\r\n    ) internal returns (uint256) {\r\n        threadCount++;\r\n\r\n        threads[threadCount] = Thread(\r\n            threadCount,\r\n            _receiver,\r\n            _receiver_key,\r\n            msg.sender,\r\n            _sender_key,\r\n            encrypted\r\n        );\r\n\r\n        return threadCount;\r\n    }\r\n\r\n    function sendMessage(\r\n        uint256 _thread_id,\r\n        string memory _uri,\r\n        address _receiver,\r\n        string memory _sender_key,\r\n        string memory _receiver_key,\r\n        bool encrypted\r\n    ) public {\r\n        if (_thread_id == 0) {\r\n            uint256 new_thread_id = newThread(\r\n                _receiver,\r\n                _sender_key,\r\n                _receiver_key,\r\n                encrypted\r\n            );\r\n\r\n            messages[new_thread_id].push(\r\n                Message(_receiver, _uri, block.timestamp)\r\n            );\r\n\r\n            emit ThreadCreated(\r\n                _receiver,\r\n                msg.sender,\r\n                new_thread_id,\r\n                block.timestamp,\r\n                _sender_key,\r\n                _receiver_key,\r\n                encrypted\r\n            );\r\n            emit MessageSent(_receiver, _uri, block.timestamp, msg.sender, new_thread_id);\r\n        } else {\r\n            Thread storage thread = threads[_thread_id];\r\n\r\n            require(\r\n                msg.sender == thread.receiver || msg.sender == thread.sender,\r\n                \"Only the receiver & sender can reply to the messages.\"\r\n            );\r\n\r\n            messages[thread.thread_id].push(\r\n                Message(_receiver, _uri, block.timestamp)\r\n            );\r\n\r\n            emit MessageSent(_receiver, _uri, block.timestamp, msg.sender, _thread_id);\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thread_id\",\"type\":\"uint256\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thread_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_sender_key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_receiver_key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_encrypted\",\"type\":\"bool\"}],\"name\":\"ThreadCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"checkUserRegistration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getPubEncKeys\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"sender_key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"receiver_key\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"messages\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messagesIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_thread_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_sender_key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_receiver_key\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"encrypted\",\"type\":\"bool\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"encKey\",\"type\":\"string\"}],\"name\":\"setPubEncKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threadCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"threads\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"thread_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver_key\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"sender_key\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"encrypted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Messaging","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b6d8d98a60239203e231f930a75173da2814a668f061a72f79f024b8e49fece7"}]}