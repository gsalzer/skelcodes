{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BrightIdUserRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"./IUserRegistry.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BrightIdUserRegistry is Ownable, IUserRegistry {\\n    string private constant ERROR_NEWER_VERIFICATION =\\n        \\\"NEWER VERIFICATION REGISTERED BEFORE\\\";\\n    string private constant ERROR_NOT_AUTHORIZED = \\\"NOT AUTHORIZED\\\";\\n    string private constant ERROR_INVALID_VERIFIER = \\\"INVALID VERIFIER\\\";\\n    string private constant ERROR_INVALID_CONTEXT = \\\"INVALID CONTEXT\\\";\\n\\n    bytes32 public context;\\n    address public verifier;\\n\\n    struct Verification {\\n        uint256 time;\\n        bool isVerified;\\n    }\\n    mapping(address => Verification) public verifications;\\n\\n    event SetBrightIdSettings(bytes32 context, address verifier);\\n    event Sponsor(address indexed addr);\\n\\n    /**\\n     * @param _context BrightID context used for verifying users\\n     * @param _verifier BrightID verifier address that signs BrightID verifications\\n     */\\n    constructor(bytes32 _context, address _verifier) public {\\n        // ecrecover returns zero on error\\n        require(_verifier != address(0), ERROR_INVALID_VERIFIER);\\n\\n        context = _context;\\n        verifier = _verifier;\\n    }\\n\\n    /**\\n     * @notice Sponsor a BrightID user by context id\\n     * @param addr BrightID context id\\n     */\\n    function sponsor(address addr) public {\\n        emit Sponsor(addr);\\n    }\\n\\n    /**\\n     * @notice Set BrightID settings\\n     * @param _context BrightID context used for verifying users\\n     * @param _verifier BrightID verifier address that signs BrightID verifications\\n     */\\n    function setSettings(bytes32 _context, address _verifier)\\n        external\\n        onlyOwner\\n    {\\n        // ecrecover returns zero on error\\n        require(_verifier != address(0), ERROR_INVALID_VERIFIER);\\n\\n        context = _context;\\n        verifier = _verifier;\\n        emit SetBrightIdSettings(_context, _verifier);\\n    }\\n\\n    /**\\n     * @notice Check a user is verified or not\\n     * @param _user BrightID context id used for verifying users\\n     */\\n    function isVerifiedUser(address _user)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return verifications[_user].isVerified;\\n    }\\n\\n    /**\\n     * @notice Register a user by BrightID verification\\n     * @param _context The context used in the users verification\\n     * @param _addrs The history of addresses used by this user in this context\\n     * @param _timestamp The BrightID node's verification timestamp\\n     * @param _v Component of signature\\n     * @param _r Component of signature\\n     * @param _s Component of signature\\n     */\\n    function register(\\n        bytes32 _context,\\n        address[] calldata _addrs,\\n        uint256 _timestamp,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external {\\n        require(context == _context, ERROR_INVALID_CONTEXT);\\n        require(\\n            verifications[_addrs[0]].time < _timestamp,\\n            ERROR_NEWER_VERIFICATION\\n        );\\n\\n        bytes32 message = keccak256(\\n            abi.encodePacked(_context, _addrs, _timestamp)\\n        );\\n        address signer = ecrecover(message, _v, _r, _s);\\n        require(verifier == signer, ERROR_NOT_AUTHORIZED);\\n\\n        verifications[_addrs[0]].time = _timestamp;\\n        verifications[_addrs[0]].isVerified = true;\\n        for (uint256 i = 1; i < _addrs.length; i++) {\\n            // update time of all previous context ids to be sure no one can use old verifications again\\n            verifications[_addrs[i]].time = _timestamp;\\n            // set old verifications unverified\\n            verifications[_addrs[i]].isVerified = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IUserRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Interface of the registry of verified users.\\n */\\ninterface IUserRegistry {\\n\\n  function isVerifiedUser(address _user) external view returns (bool);\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_context\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"SetBrightIdSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Sponsor\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"context\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isVerifiedUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_context\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_context\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"name\":\"setSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"sponsor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"verifications\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BrightIdUserRegistry","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"4f6365616e44414f000000000000000000000000000000000000000000000000000000000000000000000000b1d71f62bee34e9fc349234c201090c33bcdf6db","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}