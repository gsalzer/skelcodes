{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IFilChainStatOracle {\r\n    function sectorInitialPledge() external view returns(uint256);\r\n    function minerAdjustedPower(string memory _minerId) external view returns(uint256);\r\n    function minerMiningEfficiency(string memory _minerId) external view returns(uint256);\r\n    function minerSectorInitialPledge(string memory _minerId) external view returns(uint256);\r\n    function minerTotalAdjustedPower() external view returns(uint256);\r\n    function avgMiningEfficiency() external view returns(uint256);\r\n    function latest24hBlockReward() external view returns(uint256);\r\n    function rewardAttenuationFactor() external view returns(uint256);\r\n    function networkStoragePower() external view returns(uint256);\r\n    function dailyStoragePowerIncrease() external view returns(uint256);\r\n    function removeMinerAdjustedPower(string memory _minerId) external;\r\n    \r\n}\r\n\r\n\r\nlibrary StringUtil {\r\n    \r\n    function equal(string memory a, string memory b) internal pure returns(bool){\r\n        return equal(bytes(a),bytes(b));\r\n    }\r\n\r\n    function equal(bytes memory a, bytes memory b) internal pure returns(bool){\r\n        return keccak256(a) == keccak256(b);\r\n    }\r\n    \r\n    function notEmpty(string memory a) internal pure returns(bool){\r\n        return bytes(a).length > 0;\r\n    }\r\n\r\n}\r\n\r\ncontract MinerManage is Ownable{\r\n    using StringUtil for string;\r\n\r\n    struct MinerInfo{\r\n        string minerId;\r\n        string data;\r\n        string signature;\r\n    }\r\n\r\n    IFilChainStatOracle public oracleAddress;\r\n    mapping(address=>MinerInfo) public minerInfoMap;\r\n    mapping(address=>bool) public whiteList;\r\n    mapping(string=>address) public minerIdToWalletMap;\r\n    string[] public minerList;\r\n\r\n    event AddMiner(address walletAddress, string minerId);\r\n    event RemoveMiner(address walletAddress, string minerId);\r\n    event FilChainStatOracleChanged(address filChainStatOracle, address _filChainStatOracle);\r\n\r\n    constructor(IFilChainStatOracle _oracleAddress){\r\n        oracleAddress = _oracleAddress;\r\n    }\r\n\r\n    function setOracleAddress(IFilChainStatOracle _oracleAddress) public onlyOwner{\r\n        require(address(_oracleAddress) != address(0), \"address should not be 0\");\r\n        emit FilChainStatOracleChanged(address(oracleAddress), address(_oracleAddress));\r\n        oracleAddress = _oracleAddress;\r\n    }\r\n\r\n    function addToWhiteList(address walletAddress, string memory minerId, string memory data, string memory signature) public onlyOwner{\r\n        require(walletAddress!=address(0), \"wallet address cannot be 0\");\r\n        \r\n        address prevAddress = minerIdToWalletMap[minerId];\r\n        if(prevAddress != address(0)){\r\n            whiteList[prevAddress] = false;\r\n            delete minerInfoMap[prevAddress];\r\n        }\r\n\r\n        whiteList[walletAddress] = true;\r\n\r\n        if(minerIdToWalletMap[minerId] == address(0)){\r\n            minerList.push(minerId);\r\n        }\r\n\r\n        minerInfoMap[walletAddress] = MinerInfo(minerId, data, signature);\r\n        minerIdToWalletMap[minerId] = walletAddress;\r\n\r\n        emit AddMiner(walletAddress, minerId);\r\n    }\r\n\r\n    function removeFromWhiteList(address walletAddress) public onlyOwner{\r\n        string memory minerId = minerInfoMap[walletAddress].minerId;\r\n        \r\n        if(minerId.notEmpty()){\r\n            whiteList[walletAddress] = false;\r\n            delete minerInfoMap[walletAddress];\r\n            delete minerIdToWalletMap[minerId];\r\n\r\n            for(uint i=0; i<minerList.length; i++){\r\n                if(minerList[i].equal(minerId)){\r\n                    minerList[i] = minerList[minerList.length-1];\r\n                    minerList.pop();\r\n                    emit RemoveMiner(walletAddress,minerId);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            oracleAddress.removeMinerAdjustedPower(minerId);\r\n        }\r\n    }\r\n\r\n    function minerAdjustedStoragePowerInTiB(string memory minerId) external view returns(uint256){\r\n        return oracleAddress.minerAdjustedPower(minerId);\r\n    }\r\n\r\n    function getMinerId(address walletAddress) public view returns(string memory){\r\n        return minerInfoMap[walletAddress].minerId;\r\n    }\r\n\r\n    function getMinerList() external view returns(string[] memory){\r\n        return minerList;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IFilChainStatOracle\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"minerId\",\"type\":\"string\"}],\"name\":\"AddMiner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"filChainStatOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_filChainStatOracle\",\"type\":\"address\"}],\"name\":\"FilChainStatOracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"minerId\",\"type\":\"string\"}],\"name\":\"RemoveMiner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"minerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"}],\"name\":\"addToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"getMinerId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinerList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"minerId\",\"type\":\"string\"}],\"name\":\"minerAdjustedStoragePowerInTiB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"minerIdToWalletMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minerInfoMap\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"minerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minerList\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"contract IFilChainStatOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"removeFromWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFilChainStatOracle\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MinerManage","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ca106916ca1f9c53442435036edf9b137b381c90","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fe683ea4ffa01d2a085d2bdf337a5a78f62004494a97187f5604cca3312d9646"}]}