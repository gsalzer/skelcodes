{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/KeysLockBox.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./ReentrantGuard.sol\\\";\\r\\nimport \\\"./IKeysStaking.sol\\\";\\r\\n\\r\\n/**\\r\\n *\\r\\n * KEYS Token Locking Contract\\r\\n * Contract Developed By DeFi Mark (MoonMark)\\r\\n *\\r\\n */\\r\\ncontract KEYSLockBox is ReentrancyGuard, IERC20, IKeysStaking{\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n    \\r\\n    // KEYS Contract\\r\\n    address constant KEYS = 0xe0a189C975e4928222978A74517442239a0b86ff;\\r\\n\\r\\n    // precision factor\\r\\n    uint256 constant precision = 10**36;\\r\\n    \\r\\n    // Total Dividends Per Farm\\r\\n    uint256 public dividendsPerToken;\\r\\n \\r\\n    // 88 day lock time\\r\\n    uint256 public lockTime = 633600;\\r\\n    \\r\\n    // Locker Structure\\r\\n    struct StakedUser {\\r\\n        uint256 tokensLocked;\\r\\n        uint256 timeLocked;\\r\\n        uint256 lastClaim;\\r\\n        uint256 totalExcluded;\\r\\n    }\\r\\n    \\r\\n    // Users -> StakedUser\\r\\n    mapping ( address => StakedUser ) users;\\r\\n    \\r\\n    // total locked across all lockers\\r\\n    uint256 totalLocked;\\r\\n    \\r\\n    // minimum stake amount\\r\\n    uint256 public minToStake = 100 * 10**9;\\r\\n    \\r\\n    // reduced purchase fee\\r\\n    uint256 public fee = 20;\\r\\n    \\r\\n    // fee for unstaking too early\\r\\n    uint256 public earlyFee = 80;\\r\\n    \\r\\n    // multisignature wallet\\r\\n    address public multisig = 0xfCacEAa7b4cf845f2cfcE6a3dA680dF1BB05015c;\\r\\n    \\r\\n    // Ownership\\r\\n    address public owner;\\r\\n    modifier onlyOwner(){require(owner == msg.sender, 'Only Owner'); _;}\\r\\n    \\r\\n    // Events\\r\\n    event TransferOwnership(address newOwner);\\r\\n    event UpdateFee(uint256 newFee);\\r\\n    event UpdateLockTime(uint256 newTime);\\r\\n    event UpdatedStakingMinimum(uint256 minimumKeys);\\r\\n    event UpdatedFeeReceiver(address feeReceiver);\\r\\n    event UpdatedEarlyFee(uint256 newFee);\\r\\n    \\r\\n    constructor() {\\r\\n        owner = 0xfCacEAa7b4cf845f2cfcE6a3dA680dF1BB05015c;\\r\\n    }\\r\\n    \\r\\n    function totalSupply() external view override returns (uint256) { return totalLocked; }\\r\\n    function balanceOf(address account) public view override returns (uint256) { return users[account].tokensLocked; }\\r\\n    function allowance(address holder, address spender) external view override returns (uint256) { return holder == spender ? balanceOf(holder) : 0; }\\r\\n    function name() public pure override returns (string memory) {\\r\\n        return \\\"Locked Keys\\\";\\r\\n    }\\r\\n    function symbol() public pure override returns (string memory) {\\r\\n        return \\\"LOCKEDKEYS\\\";\\r\\n    }\\r\\n    function decimals() public pure override returns (uint8) {\\r\\n        return 9;\\r\\n    }\\r\\n    function approve(address spender, uint256 amount) public view override returns (bool) {\\r\\n        return users[msg.sender].tokensLocked >= amount && spender != msg.sender;\\r\\n    }\\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        // ensure claim requirements\\r\\n        if (recipient == KEYS) {\\r\\n            _unlock(msg.sender, msg.sender, amount);\\r\\n        } else if (recipient == address(this)){\\r\\n            _reinvestKeys(msg.sender);\\r\\n        } else {\\r\\n            _makeClaim(msg.sender);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        if (recipient == KEYS) {\\r\\n            _unlock(msg.sender, msg.sender, amount);\\r\\n        } else if (recipient == address(this)){\\r\\n            _reinvestKeys(msg.sender);\\r\\n        } else {\\r\\n            _makeClaim(msg.sender);\\r\\n        }\\r\\n        return true && sender == recipient;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    ///////////////////////////////////\\r\\n    //////    OWNER FUNCTIONS   ///////\\r\\n    ///////////////////////////////////\\r\\n\\r\\n    function updateState(address[] calldata oldStakers) external onlyOwner {\\r\\n\\r\\n        address old = 0xF09504B63a199158312807c5f05DaEcA734855D9;\\r\\n        for (uint i = 0; i < oldStakers.length; i++) {\\r\\n            users[oldStakers[i]].tokensLocked = IERC20(old).balanceOf(oldStakers[i]);\\r\\n            users[oldStakers[i]].timeLocked = block.number - 60000;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function transferOwnership(address newOwner) external onlyOwner {\\r\\n        owner = newOwner;\\r\\n        emit TransferOwnership(newOwner);\\r\\n    }\\r\\n    \\r\\n    function updateFee(uint256 newFee) external onlyOwner {\\r\\n        fee = newFee;\\r\\n        emit UpdateFee(newFee);\\r\\n    }\\r\\n    \\r\\n    function updateFeeReceiver(address newReceiver) external onlyOwner {\\r\\n        multisig = newReceiver;\\r\\n        emit UpdatedFeeReceiver(newReceiver);\\r\\n    }\\r\\n    \\r\\n    function setEarlyFee(uint256 newFee) external onlyOwner {\\r\\n        earlyFee = newFee;\\r\\n        emit UpdatedEarlyFee(newFee);\\r\\n    }\\r\\n    \\r\\n    function setMinimumToStake(uint256 minimum) external onlyOwner {\\r\\n        minToStake = minimum;\\r\\n        emit UpdatedStakingMinimum(minimum);\\r\\n    }\\r\\n    \\r\\n    function setLockTime(uint256 newTime) external onlyOwner {\\r\\n        require(newTime <= 10**6, 'Lock Time Too Long');\\r\\n        lockTime = newTime;\\r\\n        emit UpdateLockTime(newTime);\\r\\n    }\\r\\n    \\r\\n    function withdraw(bool eth, address token, uint256 amount, address recipient) external onlyOwner {\\r\\n        if (eth) {\\r\\n            require(address(this).balance >= amount, 'Insufficient Balance');\\r\\n            (bool s,) = payable(recipient).call{value: amount}(\\\"\\\");\\r\\n            require(s, 'Failure on ETH Withdrawal');\\r\\n        } else {\\r\\n            require(token != KEYS, 'Cannot Withdraw Keys');\\r\\n            IERC20(token).transfer(recipient, amount);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    \\r\\n    ///////////////////////////////////\\r\\n    //////   PUBLIC FUNCTIONS   ///////\\r\\n    ///////////////////////////////////\\r\\n\\r\\n    /** Adds KEYS To The Pending Rewards Of KEYS Stakers */\\r\\n    function deposit(uint256 amount) external override {\\r\\n        uint256 received = _transferIn(amount);\\r\\n        dividendsPerToken += received.mul(precision).div(totalLocked);\\r\\n    }\\r\\n\\r\\n    function claimReward() external nonReentrant {\\r\\n        _makeClaim(msg.sender);      \\r\\n    }\\r\\n    \\r\\n    function claimRewardForUser(address user) external nonReentrant {\\r\\n        _makeClaim(user);\\r\\n    }\\r\\n    \\r\\n    function unlock(uint256 amount) external nonReentrant {\\r\\n        _unlock(msg.sender, msg.sender, amount);\\r\\n    }\\r\\n    \\r\\n    function unlockFor(uint256 amount, address keysRecipient) external nonReentrant {\\r\\n        _unlock(msg.sender, keysRecipient, amount);\\r\\n    }\\r\\n    \\r\\n    function unlockAll() external nonReentrant {\\r\\n        _unlock(msg.sender, msg.sender, users[msg.sender].tokensLocked);\\r\\n    }\\r\\n    \\r\\n    function stakeKeys(uint256 numKeys) external nonReentrant {\\r\\n        uint256 received = _transferIn(numKeys);\\r\\n        require(received >= minToStake, 'Minimum To Stake Not Reached');\\r\\n        _lock(msg.sender, received);\\r\\n    }\\r\\n\\r\\n    function reinvestKeys() external nonReentrant {\\r\\n        _reinvestKeys(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _reinvestKeys(address user) internal {\\r\\n\\r\\n        uint256 amount = pendingRewards(user);\\r\\n        require(amount > 0, 'Zero Amount');\\r\\n\\r\\n        // set locker data\\r\\n        users[user].tokensLocked += amount;\\r\\n        users[user].lastClaim = block.number;\\r\\n        users[user].totalExcluded = currentDividends(users[user].tokensLocked);\\r\\n        \\r\\n        // increment total locked\\r\\n        totalLocked += amount;\\r\\n        \\r\\n        // Transfer StakedKeys\\r\\n        emit Transfer(address(0), user, amount);\\r\\n    }\\r\\n    \\r\\n    ///////////////////////////////////\\r\\n    //////  INTERNAL FUNCTIONS  ///////\\r\\n    ///////////////////////////////////\\r\\n    \\r\\n    function _makeClaim(address user) internal {\\r\\n        // ensure claim requirements\\r\\n        require(users[user].tokensLocked > 0, 'Zero Tokens Locked');\\r\\n        require((users[user].lastClaim + 10) < block.number, 'Claim Wait Time Not Reached');\\r\\n        \\r\\n        uint256 amount = pendingRewards(user);\\r\\n        require(amount > 0,'Zero Rewards');\\r\\n        _claimReward(user);\\r\\n    }\\r\\n    \\r\\n    function _claimReward(address user) internal {\\r\\n        \\r\\n        uint256 amount = pendingRewards(user);\\r\\n        if (amount == 0) return;\\r\\n        \\r\\n        // update claim stats \\r\\n        users[user].lastClaim = block.number;\\r\\n        users[user].totalExcluded = currentDividends(users[user].tokensLocked);\\r\\n        // transfer tokens\\r\\n        bool s = IERC20(KEYS).transfer(user, amount);\\r\\n        require(s,'Failure On Token Transfer');\\r\\n    }\\r\\n    \\r\\n    function _transferIn(uint256 amount) internal returns (uint256) {\\r\\n        \\r\\n        uint256 before = IERC20(KEYS).balanceOf(address(this));\\r\\n        bool s = IERC20(KEYS).transferFrom(msg.sender, address(this), amount);\\r\\n        \\r\\n        uint256 difference = IERC20(KEYS).balanceOf(address(this)).sub(before);\\r\\n        require(s && difference <= amount, 'Error On Transfer In');\\r\\n        return difference;\\r\\n    }\\r\\n    \\r\\n    function _buyKeys() internal returns (uint256) {\\r\\n        \\r\\n        uint256 feeAmount = msg.value.mul(fee).div(1000);\\r\\n        uint256 purchaseAmount = msg.value.sub(feeAmount);\\r\\n        \\r\\n        (bool success,) = payable(multisig).call{value: feeAmount}(\\\"\\\");\\r\\n        require(success, 'Failure on Dev Payment');\\r\\n        \\r\\n        uint256 before = IERC20(KEYS).balanceOf(address(this));\\r\\n        (bool s,) = payable(KEYS).call{value: purchaseAmount}(\\\"\\\");\\r\\n        require(s, 'Failure on KEYS Purchase');\\r\\n        return IERC20(KEYS).balanceOf(address(this)).sub(before);\\r\\n    }\\r\\n    \\r\\n    function _lock(address user, uint256 received) private {\\r\\n        \\r\\n        if (users[user].tokensLocked > 0) { // recurring locker\\r\\n            _claimReward(user);\\r\\n        } else { // new user\\r\\n            users[user].lastClaim = block.number;\\r\\n        }\\r\\n        \\r\\n        // add locker data\\r\\n        users[user].tokensLocked += received;\\r\\n        users[user].timeLocked = block.number;\\r\\n        users[user].totalExcluded = currentDividends(users[user].tokensLocked);\\r\\n        \\r\\n        // increment total locked\\r\\n        totalLocked += received;\\r\\n        \\r\\n        emit Transfer(address(0), user, received);\\r\\n    }\\r\\n\\r\\n    function _unlock(address user, address recipient, uint256 nTokens) private {\\r\\n        \\r\\n        // Ensure Lock Requirements\\r\\n        require(users[user].tokensLocked > 0, 'Zero Tokens Locked');\\r\\n        require(users[user].tokensLocked >= nTokens && nTokens > 0, 'Insufficient Tokens');\\r\\n        \\r\\n        // expiration\\r\\n        uint256 lockExpiration = users[user].timeLocked + lockTime;\\r\\n        \\r\\n        // claim reward \\r\\n        _claimReward(user);\\r\\n        \\r\\n        // Update Staked Balances\\r\\n        if (users[user].tokensLocked == nTokens) {\\r\\n            delete users[user]; // Free Storage\\r\\n        } else {\\r\\n            users[user].tokensLocked = users[user].tokensLocked.sub(nTokens, 'Insufficient Lock Amount');\\r\\n            users[user].totalExcluded = currentDividends(users[user].tokensLocked);\\r\\n        }\\r\\n        \\r\\n        // Update Total Locked\\r\\n        totalLocked = totalLocked.sub(nTokens, 'Negative Locked');\\r\\n\\r\\n        // Calculate Tokens To Send Recipient\\r\\n        uint256 tokensToSend = lockExpiration > block.number ? _calculateAndReflect(nTokens) : nTokens;\\r\\n\\r\\n        // Transfer KEYS Tokens To User\\r\\n        bool s = IERC20(KEYS).transfer(recipient, tokensToSend);\\r\\n        require(s, 'Failure on LP Token Transfer');\\r\\n\\r\\n        // tell Blockchain\\r\\n        emit Transfer(user, address(0), nTokens);\\r\\n    }\\r\\n    \\r\\n    function _calculateAndReflect(uint256 nTokens) internal returns (uint256) {\\r\\n        \\r\\n        // apply early leave tax\\r\\n        uint256 tax = nTokens.mul(earlyFee).div(1000);\\r\\n        \\r\\n        // Reflect Tax To KEYS Stakers\\r\\n        dividendsPerToken += tax.mul(precision).div(totalLocked);\\r\\n        \\r\\n        // Return Send Amount\\r\\n        return nTokens.sub(tax);\\r\\n    }\\r\\n    \\r\\n    ///////////////////////////////////\\r\\n    //////    READ FUNCTIONS    ///////\\r\\n    ///////////////////////////////////\\r\\n    \\r\\n    \\r\\n    function getTimeUntilUnlock(address user) external view returns (uint256) {\\r\\n        uint256 endTime = users[user].timeLocked + lockTime;\\r\\n        return endTime > block.number ? endTime.sub(block.number) : 0;\\r\\n    }\\r\\n    \\r\\n    function currentDividends(uint256 share) internal view returns (uint256) {\\r\\n        return share.mul(dividendsPerToken).div(precision);\\r\\n    }\\r\\n    \\r\\n    function pendingRewards(address user) public view returns (uint256) {\\r\\n        uint256 amount = users[user].tokensLocked;\\r\\n        if(amount == 0){ return 0; }\\r\\n\\r\\n        uint256 shareholderTotalDividends = currentDividends(amount);\\r\\n        uint256 shareholderTotalExcluded = users[user].totalExcluded;\\r\\n\\r\\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\\r\\n\\r\\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\\r\\n    }\\r\\n    \\r\\n    function totalPendingRewards() external view returns (uint256) {\\r\\n        return IERC20(KEYS).balanceOf(address(this)).sub(totalLocked);\\r\\n    }\\r\\n    \\r\\n    function calculateKEYSBalance(address user) external view returns (uint256) {\\r\\n        return IERC20(KEYS).balanceOf(user);\\r\\n    }\\r\\n    \\r\\n    function calculateKEYSContractBalance() external view returns (uint256) {\\r\\n        return IERC20(KEYS).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        uint256 received = _buyKeys();\\r\\n        require(received >= minToStake, 'Minimum To Stake Not Reached');\\r\\n        _lock(msg.sender, received);\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/SafeMath.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Address.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IERC20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the number of decimal places\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/ReentrantGuard.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nabstract contract ReentrancyGuard {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    modifier nonReentrant() {\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n        _status = _ENTERED;\\n        _;\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IKeysStaking.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/**\\r\\n * Exempt Surge Interface\\r\\n */\\r\\ninterface IKeysStaking {\\r\\n    function deposit(uint256 amount) external;\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"UpdateFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"UpdateLockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedEarlyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"UpdatedFeeReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumKeys\",\"type\":\"uint256\"}],\"name\":\"UpdatedStakingMinimum\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateKEYSBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateKEYSContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimRewardForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendsPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTimeUntilUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minToStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestKeys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setEarlyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"setMinimumToStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numKeys\",\"type\":\"uint256\"}],\"name\":\"stakeKeys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"keysRecipient\",\"type\":\"address\"}],\"name\":\"unlockFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"updateFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"oldStakers\",\"type\":\"address[]\"}],\"name\":\"updateState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"eth\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"KEYSLockBox","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}