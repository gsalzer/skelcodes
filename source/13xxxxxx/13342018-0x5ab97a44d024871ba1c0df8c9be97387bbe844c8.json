{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.0;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath#mul: OVERFLOW\");\r\n\r\n    return c;\r\n  }\r\n  \r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0, \"SafeMath#div: DIVISION_BY_ZERO\");\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath#sub: UNDERFLOW\");\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath#add: OVERFLOW\");\r\n\r\n    return c; \r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"SafeMath#mod: DIVISION_BY_ZERO\");\r\n    return a % b;\r\n  }\r\n\r\n}\r\n\r\nlibrary Address {\r\n  function isContract(address account) internal view returns (bool) {\r\n    bytes32 codehash;\r\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    assembly { codehash := extcodehash(account) }\r\n    return (codehash != 0x0 && codehash != accountHash);\r\n  }\r\n\r\n}\r\n\r\nlibrary Strings {\r\n\tfunction strConcat(\r\n\t\tstring memory _a,\r\n\t\tstring memory _b,\r\n\t\tstring memory _c,\r\n\t\tstring memory _d,\r\n\t\tstring memory _e\r\n\t) internal pure returns (string memory) {\r\n\t\tbytes memory _ba = bytes(_a);\r\n\t\tbytes memory _bb = bytes(_b);\r\n\t\tbytes memory _bc = bytes(_c);\r\n\t\tbytes memory _bd = bytes(_d);\r\n\t\tbytes memory _be = bytes(_e);\r\n\t\tstring memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n\t\tbytes memory babcde = bytes(abcde);\r\n\t\tuint256 k = 0;\r\n\t\tfor (uint256 i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n\t\tfor (uint256 i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n\t\tfor (uint256 i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n\t\tfor (uint256 i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n\t\tfor (uint256 i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n\t\treturn string(babcde);\r\n\t}\r\n\r\n\tfunction strConcat(\r\n\t\tstring memory _a,\r\n\t\tstring memory _b,\r\n\t\tstring memory _c,\r\n\t\tstring memory _d\r\n\t) internal pure returns (string memory) {\r\n\t\treturn strConcat(_a, _b, _c, _d, \"\");\r\n\t}\r\n\r\n\tfunction strConcat(\r\n\t\tstring memory _a,\r\n\t\tstring memory _b,\r\n\t\tstring memory _c\r\n\t) internal pure returns (string memory) {\r\n\t\treturn strConcat(_a, _b, _c, \"\", \"\");\r\n\t}\r\n\r\n\tfunction strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\r\n\t\treturn strConcat(_a, _b, \"\", \"\", \"\");\r\n\t}\r\n\r\n\tfunction uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\r\n\t\tif (_i == 0) {\r\n\t\t\treturn \"0\";\r\n\t\t}\r\n\t\tuint256 j = _i;\r\n\t\tuint256 len;\r\n\t\twhile (j != 0) {\r\n\t\t\tlen++;\r\n\t\t\tj /= 10;\r\n\t\t}\r\n\t\tbytes memory bstr = new bytes(len);\r\n\t\tuint256 k = len - 1;\r\n\t\twhile (_i != 0) {\r\n\t\t\tbstr[k--] = bytes1(uint8(48 + (_i % 10)));\r\n\t\t\t_i /= 10;\r\n\t\t}\r\n\t\treturn string(bstr);\r\n\t}\r\n}\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == owner;\r\n    }\r\n    \r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n    \r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address payable newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC165 {\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @dev Interface identification is specified in ERC-165. This function\r\n     * uses less than 30,000 gas\r\n     * @param _interfaceId The interface identifier, as specified in ERC-165\r\n     */\r\n    function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\ninterface IERC721 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ninterface IERC721Metadata {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ncontract ERC721 is Context, IERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n\r\n    // Token name\r\n    string public name;\r\n\r\n    // Token symbol\r\n    string public symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    bytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\r\n    bytes4 constant private INTERFACE_SIGNATURE_ERC721 = 0x80ac58cd;\r\n    bytes4 constant private INTERFACE_SIGNATURE_ERC721METADATA = 0x5b5e139f;\r\n    bytes4 constant private INTERFACE_SIGNATURE_ERC721ENUMERABLE = 0x780e9d63;\r\n\r\n    function supportsInterface(bytes4 _interfaceId) external view returns (bool) {\r\n        if (\r\n            _interfaceId == INTERFACE_SIGNATURE_ERC165 ||\r\n            _interfaceId == INTERFACE_SIGNATURE_ERC721 ||\r\n            _interfaceId == INTERFACE_SIGNATURE_ERC721METADATA ||\r\n            _interfaceId == INTERFACE_SIGNATURE_ERC721ENUMERABLE\r\n            ) {\r\n                return true;\r\n            }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view  returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view  returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n    \r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal {\r\n        _transfer(from, to, tokenId);\r\n        _checkOnERC721Received(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal {\r\n        _mint(to, tokenId);\r\n        _checkOnERC721Received(address(0), to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    bytes4 constant internal ERC721_RECEIVED_VALUE = 0xf0b9e5ba; \r\n    \r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private{\r\n        if (to.isContract()) {\r\n            bytes4 retval = IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data);\r\n            require(retval == ERC721_RECEIVED_VALUE, \"ERC721: INVALID_ON_RECEIVE_MESSAGE\");\r\n        }\r\n            \r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal {}\r\n}\r\n\r\ncontract OwnableDelegateProxy {}\r\n\r\ncontract ProxyRegistry {\r\n\tmapping(address => OwnableDelegateProxy) public proxies;\r\n}\r\n\r\n\r\ninterface ERC721Token {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId,  bytes calldata data) external;\r\n\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\ncontract ERC721Tradable is ERC721, Ownable{\r\n    using SafeMath for uint256;\r\n    using Strings for string;\r\n    \r\n    event NFTGenerated(address indexed _owner, uint256 indexed _nftId, uint256 _series);\r\n    event NewNFTPrice(uint256 indexed _newprice);\r\n    \r\n    string internal baseMetadataURI;\r\n\taddress proxyRegistryAddress;\r\n\tuint256 public totalNFTs;\r\n\tuint256 NFTAvaliable;\r\n\tuint256 public currentNFTid = 0;\r\n\tuint256 public NFTprice = 0.05 * 10**18;\r\n\t\r\n\tuint256 totalAirDrop;\r\n\tuint256 totalAuthorize;\r\n\tuint256 totalPerverse;\r\n\tuint256 totalFreeBuy;\r\n\t\r\n    uint256 series = 0;\r\n\t\r\n\tmapping (address => uint256) public MarketingQuota;\r\n\tmapping (address => bool) public PartnerTokenCheck;\r\n\tmapping (address => bool) public IfWhiteList;\r\n\tmapping (address => bool) public Authorized;\r\n\t\r\n\tbytes4 constant InterfaceSignature_ERC721 = 0x80ac58cd;\r\n\tERC721Token public CryptoPunks;\r\n\tERC721Token public LOSTPOETS;\r\n\tERC721Token public PakCube;\r\n\tERC721Token public TheCurrency;\r\n\t\r\n\tbool public canMint = true;\r\n\tmodifier CanMint() {\r\n\t    require(canMint);\r\n\t    _;\r\n\t}\r\n    \r\n\tconstructor(\r\n\t\tstring memory  _name,\r\n\t\tstring memory _symbol,\r\n\t\tuint256 _totalNFTs,\r\n\t\tuint256 _airdrop,\r\n\t\tuint256 _authorize,\r\n\t\tuint256 _perserve,\r\n\t\tuint256 _freebuy,\r\n\t\taddress _proxyRegistryAddress\r\n\t) public {\r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t\ttotalNFTs = _totalNFTs;\r\n\t\ttotalAirDrop = _airdrop;\r\n\t\ttotalAuthorize = _authorize;\r\n\t\ttotalPerverse = _perserve;\r\n\t\ttotalFreeBuy = _freebuy;\r\n\t\tNFTAvaliable = _totalNFTs - _airdrop - _authorize - _perserve;\r\n\t\tproxyRegistryAddress = _proxyRegistryAddress;\r\n\t}\r\n\t\r\n\tfunction mintDisable() public onlyOwner {\r\n\t    canMint = false;\r\n\t}\r\n\t\r\n\tfunction mintEnable() public onlyOwner {\r\n\t    canMint = true;\r\n\t}\r\n\t\r\n\t// Regular Purchase\r\n\tfunction buyNFT(uint256 _amount) public payable CanMint {\r\n\t    require(msg.value >= NFTprice.mul(_amount), \"Insufficient ETH\");\r\n\t    require(totalFreeBuy >= _amount);\r\n\t    require(currentNFTid.add(_amount) <= totalNFTs+1, \"Total Amount Exceed!\");\r\n\t    for(uint i=0; i< _amount; i++) {\r\n\t        _mint(msg.sender, currentNFTid);\r\n\t        currentNFTid = currentNFTid.add(1);\r\n\t        emit NFTGenerated(msg.sender, currentNFTid, series);\r\n\t    }\r\n\t    totalFreeBuy = totalFreeBuy.sub(_amount);\r\n\t}\r\n\t\r\n\tfunction adminGenerator(uint256 _amount, address receiver) public onlyOwner CanMint {\r\n\t    require(currentNFTid.add(_amount) <= totalNFTs+1, \"Total Amount Exceed!\");\r\n\t    require(NFTAvaliable >= _amount, \"NFT not available\");\r\n\t    require(totalPerverse >= _amount, \"Perserve Amount Exceed!\");\r\n\t    for(uint i=0; i< _amount; i++) {\r\n\t        _mint(receiver, currentNFTid);\r\n\t        currentNFTid = currentNFTid.add(1);\r\n\t        emit NFTGenerated(receiver, currentNFTid, series);\r\n\t    }\r\n\t    NFTAvaliable = NFTAvaliable.sub(_amount);\r\n\t    totalPerverse = totalPerverse.sub(_amount);\r\n\t}\r\n\t\r\n\tfunction marketGenerator(uint256 _amount, address receiver) public CanMint {\r\n\t    require(MarketingQuota[msg.sender] >= _amount, \"Marketing Quota is not enough!\");\r\n\t    require(currentNFTid.add(_amount) <= totalNFTs+1, \"Total Amount Exceed!\");\r\n\t    for(uint i=0; i< _amount; i++) {\r\n\t        _mint(receiver, currentNFTid);\r\n\t        currentNFTid = currentNFTid.add(1);\r\n\t        emit NFTGenerated(receiver, currentNFTid, series);\r\n\t    }\r\n\t    MarketingQuota[msg.sender] = MarketingQuota[msg.sender].sub(_amount);\r\n\t}\r\n\t\r\n\tfunction authorizedGenerator(uint256 _amount, address receiver) public CanMint {\r\n\t    require(Authorized[msg.sender]);\r\n\t    require(totalAuthorize >= _amount);\r\n\t    require(currentNFTid.add(_amount) <= totalNFTs+1, \"Total Amount Exceed!\");\r\n\t    for(uint i=0; i< _amount; i++) {\r\n\t        _mint(receiver, currentNFTid);\r\n\t        currentNFTid = currentNFTid.add(1);\r\n\t        emit NFTGenerated(receiver, currentNFTid, series);\r\n\t    }\r\n\t    totalAuthorize = totalAuthorize.sub(_amount);\r\n\t}\r\n\t\r\n\tfunction authorizeAddress(address _vp) public onlyOwner {\r\n\t    Authorized[_vp] = true;\r\n\t}\r\n\t\r\n\tfunction cancelAuthorized(address _vp) public onlyOwner {\r\n\t    Authorized[_vp] = false;\r\n\t}\r\n\t\r\n\tfunction setSeries(uint256 _series) public onlyOwner {\r\n\t    series = _series;\r\n\t}\r\n\t\r\n\tfunction setMarketQuota(address _spender, uint256 _amount) public onlyOwner {\r\n\t    require(_amount >0);\r\n\t    require(NFTAvaliable >= _amount);\r\n\t    MarketingQuota[_spender] = MarketingQuota[_spender] + _amount;\r\n\t    NFTAvaliable = NFTAvaliable.sub(_amount);\r\n\t}\r\n\t\r\n\tfunction airdrop() public CanMint {\r\n\t    require(_canAirdrop(msg.sender) || _ifWhiteListed(msg.sender), \"Unqualified!\");\r\n\t    require(currentNFTid <= totalNFTs, \"Total Amount Exceed!\");\r\n\t    require(totalAirDrop > 0);\r\n\t    _mint(msg.sender, currentNFTid);\r\n\t    currentNFTid = currentNFTid.add(1);\r\n\t    emit NFTGenerated(msg.sender, currentNFTid, series);\r\n\t    if(IfWhiteList[msg.sender]) {\r\n\t        IfWhiteList[msg.sender] = false;\r\n\t    } else {\r\n\t        PartnerTokenCheck[msg.sender] = true;\r\n\t    }\r\n\t    totalAirDrop = totalAirDrop.sub(1);\r\n\t}\r\n\t\r\n\tfunction setWhitelist(address[] memory _users) public onlyOwner {\r\n\t    uint userLength = _users.length;\r\n\t    for (uint i = 0; i < userLength; i++) {\r\n\t        IfWhiteList[_users[i]] = true;\r\n\t    }\r\n\t}\r\n\t\r\n\tfunction initialPartnerNFT(address _cryptoPunksAddress, address _lostpoetsAddress, address _pakCube, address _theCurrencyAddress) public onlyOwner {\r\n\t    ERC721Token cryptoPunks = ERC721Token(_cryptoPunksAddress);\r\n        CryptoPunks = cryptoPunks;\r\n        \r\n        ERC721Token lostpoets = ERC721Token(_lostpoetsAddress);\r\n        LOSTPOETS = lostpoets;\r\n        \r\n        ERC721Token pakCube = ERC721Token(_pakCube);\r\n        PakCube = pakCube;\r\n        \r\n        ERC721Token theCurrencyAddress = ERC721Token(_theCurrencyAddress);\r\n        TheCurrency = theCurrencyAddress;\r\n\t}\r\n\r\n\tfunction _canAirdrop(address _user) private view returns(bool) {\r\n\t    if (PartnerTokenCheck[_user]){\r\n\t        return false;\r\n\t    }\r\n\t    if(CryptoPunks.balanceOf(_user) > 0) {\r\n\t        return true;\r\n\t    } else if (LOSTPOETS.balanceOf(_user) > 0) {\r\n\t        return true;\r\n\t    } else if (PakCube.balanceOf(_user) > 0) {\r\n\t        return true;\r\n\t    } else if (TheCurrency.balanceOf(_user) > 0) {\r\n\t        return true;\r\n\t    } else{\r\n\t        return false;\r\n\t    }\r\n\t}\r\n\t\r\n\tfunction _ifWhiteListed(address _user) private view returns(bool) {\r\n\t    return IfWhiteList[_user];\r\n\t}\r\n\t\r\n\tfunction setNFTPrice(uint256 _newPrice) public onlyOwner {\r\n\t    require(_newPrice > 0);\r\n\t    NFTprice = _newPrice;\r\n\t    emit NewNFTPrice(_newPrice);\r\n\t}\r\n\t\r\n\tfunction setProxyAddress(address _proxyAddress) public onlyOwner {\r\n\t    proxyRegistryAddress = _proxyAddress;\r\n\t}\r\n\r\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\r\n        require(_exists(_tokenId), \"ERC721Tradable#uri: NONEXISTENT_TOKEN\");\r\n        return Strings.strConcat(baseMetadataURI, Strings.uint2str(_tokenId));\r\n    }\r\n    \r\n    function _setBaseMetadataURI(string memory _newBaseMetadataURI) internal {\r\n        baseMetadataURI = _newBaseMetadataURI;\r\n    }\r\n\r\n\tfunction setBaseMetadataURI(string memory _newBaseMetadataURI) public onlyOwner {\r\n\t\t_setBaseMetadataURI(_newBaseMetadataURI);\r\n\t}\r\n\r\n\tfunction isApprovedForAll(address _owner, address _operator) public view returns (bool isOperator) {\r\n\t\tProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\r\n\t\tif (address(proxyRegistry.proxies(_owner)) == _operator) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn ERC721.isApprovedForAll(_owner, _operator);\r\n\t}\r\n}\r\n\r\ncontract CosmoChamber is ERC721Tradable {\r\n\tconstructor(address _proxyRegistryAddress) public ERC721Tradable(\"CosmoChamber\", \"CC\", 6001, 800, 500, 500, 4201, _proxyRegistryAddress) {\r\n\t\t_setBaseMetadataURI(\"https://api.cosmochamber.art/metadata/\");\r\n\t}\r\n\r\n\tfunction contractURI() public pure returns (string memory) {\r\n\t\treturn \"https://www.cosmoschanmber.art/about-us\";\r\n\t}\r\n\t\r\n\tfunction withdrawBalance() external onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_series\",\"type\":\"uint256\"}],\"name\":\"NFTGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newprice\",\"type\":\"uint256\"}],\"name\":\"NewNFTPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CryptoPunks\",\"outputs\":[{\"internalType\":\"contract ERC721Token\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"IfWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOSTPOETS\",\"outputs\":[{\"internalType\":\"contract ERC721Token\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"MarketingQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NFTprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PakCube\",\"outputs\":[{\"internalType\":\"contract ERC721Token\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PartnerTokenCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TheCurrency\",\"outputs\":[{\"internalType\":\"contract ERC721Token\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"adminGenerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vp\",\"type\":\"address\"}],\"name\":\"authorizeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"authorizedGenerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyNFT\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vp\",\"type\":\"address\"}],\"name\":\"cancelAuthorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentNFTid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cryptoPunksAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lostpoetsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pakCube\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_theCurrencyAddress\",\"type\":\"address\"}],\"name\":\"initialPartnerNFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"marketGenerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintDisable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintEnable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseMetadataURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMarketQuota\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setNFTPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyAddress\",\"type\":\"address\"}],\"name\":\"setProxyAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_series\",\"type\":\"uint256\"}],\"name\":\"setSeries\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CosmoChamber","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a5409ec958c83c3f309868babaca7c86dcb077c1","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d5abfefc82eb7d08b081d785ecd7a2d6a3a8dab00f91f8f192606daf2172d149"}]}