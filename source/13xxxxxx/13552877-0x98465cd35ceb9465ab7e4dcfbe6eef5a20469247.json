{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/farm/facets/SiloFacet/SiloFacet.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./BeanSilo.sol\\\";\\nimport \\\"../../../libraries/LibClaim.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Silo handles depositing and withdrawing Beans and LP, and updating the Silo.\\n**/\\ncontract SiloFacet is BeanSilo {\\n\\n    event BeanAllocation(address indexed account, uint256 beans);\\n\\n    using SafeMath for uint256;\\n    using SafeMath for uint32;\\n\\n    /**\\n     * Bean\\n    **/\\n\\n    // Deposit\\n\\n    function claimAndDepositBeans(uint256 amount, LibClaim.Claim calldata claim) external {\\n        allocateBeans(claim, amount);\\n        _depositBeans(amount);\\n    }\\n\\n    function claimBuyAndDepositBeans(\\n        uint256 amount,\\n        uint256 buyAmount,\\n        LibClaim.Claim calldata claim\\n    )\\n        external\\n        payable\\n    {\\n        allocateBeans(claim, amount);\\n        uint256 boughtAmount = LibMarket.buyAndDeposit(buyAmount);\\n        _depositBeans(boughtAmount.add(amount));\\n    }\\n\\n    function depositBeans(uint256 amount) public {\\n        bean().transferFrom(msg.sender, address(this), amount);\\n        _depositBeans(amount);\\n    }\\n\\n    function buyAndDepositBeans(uint256 amount, uint256 buyAmount) public payable {\\n        uint256 boughtAmount = LibMarket.buyAndDeposit(buyAmount);\\n        if (amount > 0) bean().transferFrom(msg.sender, address(this), amount);\\n        _depositBeans(boughtAmount.add(amount));\\n    }\\n\\n    // Withdraw\\n\\n    function withdrawBeans(\\n        uint32[] calldata crates,\\n        uint256[] calldata amounts\\n    )\\n        notLocked(msg.sender)\\n        external\\n    {\\n        _withdrawBeans(crates, amounts);\\n    }\\n\\n    function claimAndWithdrawBeans(\\n        uint32[] calldata crates,\\n        uint256[] calldata amounts,\\n        LibClaim.Claim calldata claim\\n    )\\n        notLocked(msg.sender)\\n        external\\n    {\\n        LibClaim.claim(claim, false);\\n        _withdrawBeans(crates, amounts);\\n    }\\n\\n    /**\\n     * LP\\n    **/\\n\\n    function claimAndDepositLP(uint256 amount, LibClaim.Claim calldata claim) external {\\n        LibClaim.claim(claim, false);\\n        depositLP(amount);\\n    }\\n\\n    function claimAddAndDepositLP(\\n        uint256 lp,\\n        uint256 buyBeanAmount,\\n        uint256 buyEthAmount,\\n        LibMarket.AddLiquidity calldata al,\\n        LibClaim.Claim calldata claim\\n    )\\n        external\\n        payable\\n    {\\n        uint256 allocatedBeans = LibClaim.claim(claim, true);\\n        _addAndDepositLP(lp, buyBeanAmount, buyEthAmount, allocatedBeans, al);\\n    }\\n\\n    function depositLP(uint256 amount) public {\\n        pair().transferFrom(msg.sender, address(this), amount);\\n        _depositLP(amount, season());\\n    }\\n\\n    function addAndDepositLP(uint256 lp,\\n        uint256 buyBeanAmount,\\n        uint256 buyEthAmount,\\n        LibMarket.AddLiquidity calldata al\\n    )\\n        public\\n        payable\\n    {\\n        require(buyBeanAmount == 0 || buyEthAmount == 0, \\\"Silo: Silo: Cant buy Ether and Beans.\\\");\\n        _addAndDepositLP(lp, buyBeanAmount, buyEthAmount, 0, al);\\n    }\\n\\n    function _addAndDepositLP(uint256 lp,\\n        uint256 buyBeanAmount,\\n        uint256 buyEthAmount,\\n        uint256 allocatedBeans,\\n        LibMarket.AddLiquidity calldata al\\n    )\\n        internal {\\n        uint256 boughtLP = LibMarket.swapAndAddLiquidity(buyBeanAmount, buyEthAmount, allocatedBeans, al);\\n        if (lp>0) pair().transferFrom(msg.sender, address(this), lp);\\n        _depositLP(lp.add(boughtLP), season());\\n\\n    }\\n\\n    function claimConvertAddAndDepositLP(\\n        uint256 lp,\\n        LibMarket.AddLiquidity calldata al,\\n        uint32[] memory crates,\\n        uint256[] memory amounts,\\n        LibClaim.Claim calldata claim\\n    )\\n        external\\n        payable\\n    {\\n        _convertAddAndDepositLP(lp, al, crates, amounts, LibClaim.claim(claim, true));\\n    }\\n\\n    function convertAddAndDepositLP(\\n        uint256 lp,\\n        LibMarket.AddLiquidity calldata al,\\n        uint32[] memory crates,\\n        uint256[] memory amounts\\n    )\\n        public\\n        payable\\n    {\\n        _convertAddAndDepositLP(lp, al, crates, amounts, 0);\\n    }\\n\\n    function _convertAddAndDepositLP(\\n        uint256 lp,\\n        LibMarket.AddLiquidity calldata al,\\n        uint32[] memory crates,\\n        uint256[] memory amounts,\\n        uint256 allocatedBeans\\n    )\\n        private\\n    {\\n        updateSilo(msg.sender);\\n        WithdrawState memory w;\\n        if (IBean(s.c.bean).balanceOf(address(this)) < al.beanAmount) {\\n            w.beansTransferred = al.beanAmount.sub(totalDepositedBeans());\\n            bean().transferFrom(msg.sender, address(this), w.beansTransferred);\\n        }\\n        (w.beansAdded, w.newLP) = LibMarket.addLiquidity(al);\\n        require(w.newLP > 0, \\\"Silo: No LP added.\\\");\\n        (w.beansRemoved, w.stalkRemoved) = _withdrawBeansForConvert(crates, amounts, w.beansAdded);\\n        uint256 amountFromWallet = w.beansAdded.sub(w.beansRemoved, \\\"Silo: Removed too many Beans.\\\");\\n\\n        if (amountFromWallet < w.beansTransferred)\\n            bean().transfer(msg.sender, w.beansTransferred.sub(amountFromWallet).add(allocatedBeans));\\n        else if (w.beansTransferred < amountFromWallet) {\\n            uint256 transferAmount = amountFromWallet.sub(w.beansTransferred);\\n            LibMarket.transferAllocatedBeans(allocatedBeans, transferAmount);\\n        }\\n        w.i = w.stalkRemoved.sub(w.beansRemoved.mul(C.getStalkPerBean()));\\n        w.i = w.i.div(lpToLPBeans(lp.add(w.newLP)), \\\"Silo: No LP Beans.\\\");\\n\\n        uint32 depositSeason = uint32(season().sub(w.i.div(C.getSeedsPerLPBean())));\\n\\n        if (lp > 0) pair().transferFrom(msg.sender, address(this), lp);\\n\\n        _depositLP(lp.add(w.newLP), depositSeason);\\n        LibCheck.beanBalanceCheck();\\n        updateBalanceOfRainStalk(msg.sender);\\n    }\\n\\n    /**\\n     * Withdraw\\n    **/\\n\\n    function claimAndWithdrawLP(\\n        uint32[] calldata crates,\\n        uint256[] calldata amounts,\\n        LibClaim.Claim calldata claim\\n    )\\n        notLocked(msg.sender)\\n        external\\n    {\\n        LibClaim.claim(claim, false);\\n        _withdrawLP(crates, amounts);\\n    }\\n\\n    function withdrawLP(\\n        uint32[] calldata crates, uint256[]\\n        calldata amounts\\n    )\\n        notLocked(msg.sender)\\n        external\\n    {\\n        _withdrawLP(crates, amounts);\\n    }\\n\\n    function allocateBeans(LibClaim.Claim calldata c, uint256 transferBeans) private {\\n        LibMarket.transferAllocatedBeans(LibClaim.claim(c, true), transferBeans);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/farm/facets/SiloFacet/BeanSilo.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LPSilo.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Bean Silo\\n**/\\ncontract BeanSilo is LPSilo {\\n\\n    using SafeMath for uint256;\\n    using SafeMath for uint32;\\n\\n    event BeanRemove(address indexed account, uint32[] crates, uint256[] crateBeans, uint256 beans);\\n    event BeanWithdraw(address indexed account, uint256 season, uint256 beans);\\n\\n    /**\\n     * Getters\\n    **/\\n\\n    function totalDepositedBeans() public view returns (uint256) {\\n            return s.bean.deposited;\\n    }\\n\\n    function totalWithdrawnBeans() public view returns (uint256) {\\n            return s.bean.withdrawn;\\n    }\\n\\n    function beanDeposit(address account, uint32 id) public view returns (uint256) {\\n        return s.a[account].bean.deposits[id];\\n    }\\n\\n    function beanWithdrawal(address account, uint32 i) public view returns (uint256) {\\n            return s.a[account].bean.withdrawals[i];\\n    }\\n\\n    /**\\n     * Internal\\n    **/\\n\\n    function _depositBeans(uint256 amount) internal {\\n        require(amount > 0, \\\"Silo: No beans.\\\");\\n        updateSilo(msg.sender);\\n        incrementDepositedBeans(amount);\\n        depositSiloAssets(msg.sender, amount.mul(C.getSeedsPerBean()), amount.mul(C.getStalkPerBean()));\\n        addBeanDeposit(msg.sender, season(), amount);\\n        LibCheck.beanBalanceCheck();\\n    }\\n\\n    function _withdrawBeans(\\n        uint32[] calldata crates,\\n        uint256[] calldata amounts\\n    )\\n        internal\\n    {\\n        updateSilo(msg.sender);\\n        require(crates.length == amounts.length, \\\"Silo: Crates, amounts are diff lengths.\\\");\\n        (uint256 beansRemoved, uint256 stalkRemoved) = removeBeanDeposits(crates, amounts);\\n        addBeanWithdrawal(msg.sender, season()+C.getSiloWithdrawSeasons(), beansRemoved);\\n        decrementDepositedBeans(beansRemoved);\\n        withdrawSiloAssets(msg.sender, beansRemoved.mul(C.getSeedsPerBean()), stalkRemoved);\\n        updateBalanceOfRainStalk(msg.sender);\\n        LibCheck.beanBalanceCheck();\\n    }\\n\\n    function _withdrawBeansForConvert(\\n        uint32[] memory crates,\\n        uint256[] memory amounts,\\n        uint256 maxBeans\\n    )\\n        internal\\n        returns (uint256 beansRemoved, uint256 stalkRemoved)\\n    {\\n        require(crates.length == amounts.length, \\\"Silo: Crates, amounts are diff lengths.\\\");\\n        uint256 crateBeans;\\n        uint256 i = 0;\\n        while ((i < crates.length) && (beansRemoved < maxBeans)) {\\n            if (beansRemoved.add(amounts[i]) < maxBeans)\\n                crateBeans = removeBeanDeposit(msg.sender, crates[i], amounts[i]);\\n            else\\n                crateBeans = removeBeanDeposit(msg.sender, crates[i], maxBeans.sub(beansRemoved));\\n            beansRemoved = beansRemoved.add(crateBeans);\\n            stalkRemoved = stalkRemoved.add(crateBeans.mul(C.getStalkPerBean()).add(\\n                stalkReward(crateBeans.mul(C.getSeedsPerBean()), season()-crates[i]\\n            )));\\n            i++;\\n        }\\n        if (i > 0) amounts[i.sub(1)] = crateBeans;\\n        while (i < crates.length) {\\n            amounts[i] = 0;\\n            i++;\\n        }\\n        decrementDepositedBeans(beansRemoved);\\n        withdrawSiloAssets(msg.sender, beansRemoved.mul(C.getSeedsPerBean()), stalkRemoved);\\n        emit BeanRemove(msg.sender, crates, amounts, beansRemoved);\\n        return (beansRemoved, stalkRemoved);\\n    }\\n\\n    function removeBeanDeposits(uint32[] calldata crates, uint256[] calldata amounts)\\n        private\\n        returns (uint256 beansRemoved, uint256 stalkRemoved)\\n    {\\n        for (uint256 i = 0; i < crates.length; i++) {\\n            uint256 crateBeans = removeBeanDeposit(msg.sender, crates[i], amounts[i]);\\n            beansRemoved = beansRemoved.add(crateBeans);\\n            stalkRemoved = stalkRemoved.add(crateBeans.mul(C.getStalkPerBean()).add(\\n                stalkReward(crateBeans.mul(C.getSeedsPerBean()), season()-crates[i]))\\n            );\\n        }\\n        emit BeanRemove(msg.sender, crates, amounts, beansRemoved);\\n    }\\n\\n    function decrementDepositedBeans(uint256 amount) private {\\n        s.bean.deposited = s.bean.deposited.sub(amount);\\n    }\\n\\n    function removeBeanDeposit(address account, uint32 id, uint256 amount)\\n        private\\n        returns (uint256)\\n    {\\n        require(id <= season(), \\\"Silo: Future crate.\\\");\\n        uint256 crateAmount = beanDeposit(account, id);\\n        require(crateAmount >= amount, \\\"Silo: Crate balance too low.\\\");\\n        require(crateAmount > 0, \\\"Silo: Crate empty.\\\");\\n        s.a[account].bean.deposits[id] -= amount;\\n        return amount;\\n    }\\n\\n    function addBeanWithdrawal(address account, uint32 arrivalSeason, uint256 amount) private {\\n        s.a[account].bean.withdrawals[arrivalSeason] = s.a[account].bean.withdrawals[arrivalSeason].add(amount);\\n        s.bean.withdrawn = s.bean.withdrawn.add(amount);\\n        emit BeanWithdraw(msg.sender, arrivalSeason, amount);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibClaim.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./LibCheck.sol\\\";\\nimport \\\"./LibInternal.sol\\\";\\nimport \\\"./LibMarket.sol\\\";\\nimport \\\"./LibAppStorage.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Claim Library handles claiming Bean and LP withdrawals, harvesting plots and claiming Ether.\\n**/\\nlibrary LibClaim {\\n\\n    using SafeMath for uint256;\\n    using SafeMath for uint32;\\n\\n    event BeanClaim(address indexed account, uint32[] withdrawals, uint256 beans);\\n    event LPClaim(address indexed account, uint32[] withdrawals, uint256 lp);\\n    event EtherClaim(address indexed account, uint256 ethereum);\\n    event Harvest(address indexed account, uint256[] plots, uint256 beans);\\n\\n    struct Claim {\\n        uint32[] beanWithdrawals;\\n        uint32[] lpWithdrawals;\\n        uint256[] plots;\\n        bool claimEth;\\n        bool convertLP;\\n        uint256 minBeanAmount;\\n        uint256 minEthAmount;\\n    }\\n\\n    function claim(Claim calldata c, bool allocate)\\n        public\\n        returns (uint256 beansClaimed)\\n    {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        if (c.beanWithdrawals.length > 0) beansClaimed = beansClaimed.add(claimBeans(c.beanWithdrawals));\\n        if (c.plots.length > 0) beansClaimed = beansClaimed.add(harvest(c.plots));\\n        if (c.lpWithdrawals.length > 0) {\\n            if (c.convertLP) {\\n                if (allocate) beansClaimed = beansClaimed.add(removeAllocationAndClaimLP(c.lpWithdrawals, c.minBeanAmount, c.minEthAmount));\\n                else removeAndClaimLP(c.lpWithdrawals, c.minBeanAmount, c.minEthAmount);\\n            }\\n            else claimLP(c.lpWithdrawals);\\n        }\\n        if (c.claimEth) claimEth();\\n        if (!allocate) IBean(s.c.bean).transfer(msg.sender, beansClaimed);\\n    }\\n\\n    // Claim Beans\\n\\n    function claimBeans(uint32[] calldata withdrawals) public returns (uint256 beansClaimed) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        for (uint256 i = 0; i < withdrawals.length; i++) {\\n            require(withdrawals[i] <= s.season.current, \\\"Claim: Withdrawal not recievable.\\\");\\n            beansClaimed = beansClaimed.add(claimBeanWithdrawal(msg.sender, withdrawals[i]));\\n        }\\n        emit BeanClaim(msg.sender, withdrawals, beansClaimed);\\n    }\\n\\n    function claimBeanWithdrawal(address account, uint32 _s) private returns (uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint256 amount = s.a[account].bean.withdrawals[_s];\\n        require(amount > 0, \\\"Claim: Bean withdrawal is empty.\\\");\\n        delete s.a[account].bean.withdrawals[_s];\\n        s.bean.withdrawn = s.bean.withdrawn.sub(amount);\\n        return amount;\\n    }\\n\\n    // Claim LP\\n\\n    function claimLP(uint32[] calldata withdrawals) public {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint256 lpClaimed = _claimLP(withdrawals);\\n        IUniswapV2Pair(s.c.pair).transfer(msg.sender, lpClaimed);\\n    }\\n\\n    function removeAndClaimLP(\\n        uint32[] calldata withdrawals,\\n        uint256 minBeanAmount,\\n        uint256 minEthAmount\\n    )\\n        public\\n    {\\n        uint256 lpClaimd = _claimLP(withdrawals);\\n        LibMarket.removeLiquidity(lpClaimd, minBeanAmount, minEthAmount);\\n    }\\n\\n    function removeAllocationAndClaimLP(\\n        uint32[] calldata withdrawals,\\n        uint256 minBeanAmount,\\n        uint256 minEthAmount\\n    )\\n        private\\n        returns (uint256 beans)\\n    {\\n        uint256 lpClaimd = _claimLP(withdrawals);\\n        (beans,) = LibMarket.removeLiquidityWithBeanAllocation(lpClaimd, minBeanAmount, minEthAmount);\\n    }\\n\\n    function _claimLP(uint32[] calldata withdrawals) private returns (uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint256 lpClaimd = 0;\\n        for(uint256 i = 0; i < withdrawals.length; i++) {\\n            require(withdrawals[i] <= s.season.current, \\\"Claim: Withdrawal not recievable.\\\");\\n            lpClaimd = lpClaimd.add(claimLPWithdrawal(msg.sender, withdrawals[i]));\\n        }\\n        emit LPClaim(msg.sender, withdrawals, lpClaimd);\\n        return lpClaimd;\\n    }\\n\\n    function claimLPWithdrawal(address account, uint32 _s) private returns (uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint256 amount = s.a[account].lp.withdrawals[_s];\\n        require(amount > 0, \\\"Claim: LP withdrawal is empty.\\\");\\n        delete s.a[account].lp.withdrawals[_s];\\n        s.lp.withdrawn = s.lp.withdrawn.sub(amount);\\n        return amount;\\n    }\\n\\n    // Season of Plenty\\n\\n    function claimEth() public {\\n        LibInternal.updateSilo(msg.sender);\\n        uint256 eth = claimPlenty(msg.sender);\\n        emit EtherClaim(msg.sender, eth);\\n    }\\n\\n    function claimPlenty(address account) private returns (uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        if (s.sop.base == 0) return 0;\\n        uint256 eth = s.a[account].sop.base.mul(s.sop.weth).div(s.sop.base);\\n        s.sop.weth = s.sop.weth.sub(eth);\\n        s.sop.base = s.sop.base.sub(s.a[account].sop.base);\\n        s.a[account].sop.base = 0;\\n        IWETH(s.c.weth).withdraw(eth);\\n        (bool success, ) = account.call{value: eth}(\\\"\\\");\\n        require(success, \\\"WETH: ETH transfer failed\\\");\\n        return eth;\\n    }\\n\\n    // Harvest\\n\\n    function harvest(uint256[] calldata plots) public returns (uint256 beansHarvested) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        for (uint256 i = 0; i < plots.length; i++) {\\n            require(plots[i] < s.f.harvestable, \\\"Claim: Plot not harvestable.\\\");\\n            require(s.a[msg.sender].field.plots[plots[i]] > 0, \\\"Claim: Plot not harvestable.\\\");\\n            uint256 harvested = harvestPlot(msg.sender, plots[i]);\\n            beansHarvested = beansHarvested.add(harvested);\\n        }\\n        require(s.f.harvestable.sub(s.f.harvested) >= beansHarvested, \\\"Claim: Not enough Harvestable.\\\");\\n        s.f.harvested = s.f.harvested.add(beansHarvested);\\n        emit Harvest(msg.sender, plots, beansHarvested);\\n    }\\n\\n    function harvestPlot(address account, uint256 plotId) private returns (uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint256 pods = s.a[account].field.plots[plotId];\\n        require(pods > 0, \\\"Claim: Plot is empty.\\\");\\n        uint256 harvestablePods = s.f.harvestable.sub(plotId);\\n        delete s.a[account].field.plots[plotId];\\n        if (harvestablePods >= pods) return pods;\\n        s.a[account].field.plots[plotId.add(harvestablePods)] = pods.sub(harvestablePods);\\n        return harvestablePods;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/farm/facets/SiloFacet/LPSilo.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SiloEntrance.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title LP Silo\\n**/\\ncontract LPSilo is SiloEntrance {\\n\\n    struct WithdrawState {\\n        uint256 newLP;\\n        uint256 beansAdded;\\n        uint256 beansTransferred;\\n        uint256 beansRemoved;\\n        uint256 stalkRemoved;\\n        uint256 i;\\n    }\\n\\n    using SafeMath for uint256;\\n    using SafeMath for uint32;\\n\\n    event LPDeposit(address indexed account, uint256 season, uint256 lp, uint256 seeds);\\n    event LPRemove(address indexed account, uint32[] crates, uint256[] crateLP, uint256 lp);\\n    event LPWithdraw(address indexed account, uint256 season, uint256 lp);\\n\\n    /**\\n     * Getters\\n    **/\\n\\n    function totalDepositedLP() public view returns (uint256) {\\n            return s.lp.deposited;\\n    }\\n\\n    function totalWithdrawnLP() public view returns (uint256) {\\n            return s.lp.withdrawn;\\n    }\\n\\n    function lpDeposit(address account, uint32 id) public view returns (uint256, uint256) {\\n        return (s.a[account].lp.deposits[id], s.a[account].lp.depositSeeds[id]);\\n    }\\n\\n    function lpWithdrawal(address account, uint32 i) public view returns (uint256) {\\n        return s.a[account].lp.withdrawals[i];\\n    }\\n\\n    /**\\n     * Internal\\n    **/\\n\\n    function _depositLP(uint256 amount, uint32 _s) internal {\\n        updateSilo(msg.sender);\\n        uint256 lpb = lpToLPBeans(amount);\\n        require(lpb > 0, \\\"Silo: No Beans under LP.\\\");\\n        incrementDepositedLP(amount);\\n        uint256 seeds = lpb.mul(C.getSeedsPerLPBean());\\n        if (season() == _s) depositSiloAssets(msg.sender, seeds, lpb.mul(10000));\\n        else depositSiloAssets(msg.sender, seeds, lpb.mul(10000).add(season().sub(_s).mul(seeds)));\\n\\n        addLPDeposit(msg.sender, _s, amount, lpb.mul(C.getSeedsPerLPBean()));\\n\\n        LibCheck.lpBalanceCheck();\\n    }\\n\\n    function _withdrawLP(uint32[] calldata crates, uint256[] calldata amounts) internal {\\n        updateSilo(msg.sender);\\n        require(crates.length == amounts.length, \\\"Silo: Crates, amounts are diff lengths.\\\");\\n        (\\n            uint256 lpRemoved,\\n            uint256 stalkRemoved,\\n            uint256 seedsRemoved\\n        ) = removeLPDeposits(crates, amounts);\\n        uint32 arrivalSeason = season() + C.getSiloWithdrawSeasons();\\n        addLPWithdrawal(msg.sender, arrivalSeason, lpRemoved);\\n        decrementDepositedLP(lpRemoved);\\n        withdrawSiloAssets(msg.sender, seedsRemoved, stalkRemoved);\\n        updateBalanceOfRainStalk(msg.sender);\\n\\n        LibCheck.lpBalanceCheck();\\n    }\\n\\n    function incrementDepositedLP(uint256 amount) private {\\n        s.lp.deposited = s.lp.deposited.add(amount);\\n    }\\n\\n    function decrementDepositedLP(uint256 amount) private {\\n        s.lp.deposited = s.lp.deposited.sub(amount);\\n    }\\n\\n    function addLPDeposit(address account, uint32 _s, uint256 amount, uint256 seeds) private {\\n        s.a[account].lp.deposits[_s] += amount;\\n        s.a[account].lp.depositSeeds[_s] += seeds;\\n        emit LPDeposit(msg.sender, _s, amount, seeds);\\n    }\\n\\n    function removeLPDeposits(uint32[] calldata crates, uint256[] calldata amounts)\\n        private\\n        returns (uint256 lpRemoved, uint256 stalkRemoved, uint256 seedsRemoved)\\n    {\\n        for (uint256 i = 0; i < crates.length; i++) {\\n            (uint256 crateBeans, uint256 crateSeeds) = removeLPDeposit(\\n                msg.sender,\\n                crates[i],\\n                amounts[i]\\n            );\\n            lpRemoved = lpRemoved.add(crateBeans);\\n            stalkRemoved = stalkRemoved.add(crateSeeds.mul(C.getStalkPerLPSeed()).add(\\n                stalkReward(crateSeeds, season()-crates[i]))\\n            );\\n            seedsRemoved = seedsRemoved.add(crateSeeds);\\n        }\\n        emit LPRemove(msg.sender, crates, amounts, lpRemoved);\\n    }\\n\\n    function removeLPDeposit(address account, uint32 id, uint256 amount)\\n        private\\n        returns (uint256, uint256) {\\n        require(id <= season(), \\\"Silo: Future crate.\\\");\\n        (uint256 crateAmount, uint256 crateBase) = lpDeposit(account, id);\\n        require(crateAmount >= amount, \\\"Silo: Crate balance too low.\\\");\\n        require(crateAmount > 0, \\\"Silo: Crate empty.\\\");\\n        if (amount < crateAmount) {\\n            uint256 base = amount.mul(crateBase).div(crateAmount);\\n            s.a[account].lp.deposits[id] -= amount;\\n            s.a[account].lp.depositSeeds[id] -= base;\\n            return (amount, base);\\n        } else {\\n            delete s.a[account].lp.deposits[id];\\n            delete s.a[account].lp.depositSeeds[id];\\n            return (crateAmount, crateBase);\\n        }\\n    }\\n\\n    function addLPWithdrawal(address account, uint32 arrivalSeason, uint256 amount) private {\\n        s.a[account].lp.withdrawals[arrivalSeason] = s.a[account].lp.withdrawals[arrivalSeason].add(amount);\\n        s.lp.withdrawn = s.lp.withdrawn.add(amount);\\n        emit LPWithdraw(msg.sender, arrivalSeason, amount);\\n    }\\n    \\n}\\n\"\r\n    },\r\n    \"contracts/farm/facets/SiloFacet/SiloEntrance.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SiloExit.sol\\\";\\nimport \\\"../../../libraries/LibCheck.sol\\\";\\nimport \\\"../../../libraries/LibInternal.sol\\\";\\nimport \\\"../../../libraries/LibMarket.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Silo Entrance\\n**/\\ncontract SiloEntrance is SiloExit {\\n\\n    using SafeMath for uint256;\\n\\n    event BeanDeposit(address indexed account, uint256 season, uint256 beans);\\n\\n    /**\\n     * Update\\n    **/\\n\\n    function updateSilo(address account) public payable {\\n        uint256 farmableStalk;\\n        uint32 update = lastUpdate(account);\\n        if (update > 0 && update <= s.bip0Start) update = migrateBip0(account);\\n        if (s.a[account].s.seeds > 0) farmableStalk = balanceOfGrownStalk(account);\\n        if (s.a[account].roots > 0 && update < season()) {\\n            farmSops(account);\\n            farmBeans(account);\\n        } else if (s.a[account].roots == 0) s.a[account].lastSop = s.r.start;\\n        if (farmableStalk > 0) incrementBalanceOfStalk(account, farmableStalk);\\n        s.a[account].lastUpdate = season();\\n    }\\n\\n    function migrateBip0(address account) private returns (uint32) {\\n        uint32 update = s.bip0Start;\\n\\n        s.a[account].lastUpdate = update;\\n        s.a[account].roots = balanceOfMigrationRoots(account);\\n\\n        delete s.a[account].sop;\\n        delete s.a[account].lastSop;\\n        delete s.a[account].lastRain;\\n\\n        return update;\\n    }\\n\\n    function farmBeans(address account) private {\\n        uint256 beans = balanceOfFarmableBeans(account);\\n        if (beans > 0) {\\n            uint256 stalk = balanceOfGrownFarmableStalk(account, beans);\\n            uint256 seeds = beans.mul(C.getSeedsPerBean());\\n            uint32 _s = uint32(stalk.div(seeds));\\n            if (_s >= season()) _s = season()-1;\\n            uint256 leftoverStalk = stalk.sub(seeds.mul(_s));\\n            _s = season() - _s;\\n            uint256 previousSeasonBeans = 0;\\n            if (_s > 1) {\\n                previousSeasonBeans = leftoverStalk.div(C.getSeedsPerBean());\\n                leftoverStalk = leftoverStalk.sub(previousSeasonBeans.mul(C.getSeedsPerBean()));\\n            }\\n\\n            stalk = stalk.sub(leftoverStalk);\\n\\n            Account.State storage a = s.a[account];\\n            s.si.beans = s.si.beans.sub(beans);\\n            s.si.stalk = s.si.stalk.sub(stalk);\\n            a.s.seeds = a.s.seeds.add(seeds);\\n            a.s.stalk = a.s.stalk.add(beans.mul(C.getStalkPerBean())).add(stalk);\\n\\n            addBeanDeposit(account, _s, beans.sub(previousSeasonBeans));\\n            if (previousSeasonBeans > 0) addBeanDeposit(account, _s-1, previousSeasonBeans);\\n        }\\n    }\\n\\n    function farmSops(address account) internal {\\n        if (s.sop.last > lastUpdate(account) || s.sops[s.a[account].lastRain] > 0) {\\n            s.a[account].sop.base = balanceOfPlentyBase(account);\\n            s.a[account].lastSop = s.sop.last;\\n        }\\n        if (s.r.raining) {\\n            if (s.r.start > lastUpdate(account)) {\\n                s.a[account].lastRain = s.r.start;\\n                s.a[account].sop.roots = s.a[account].roots;\\n            }\\n            if (s.sop.last == s.r.start) s.a[account].sop.basePerRoot = s.sops[s.sop.last];\\n        } else if (s.a[account].lastRain > 0) {\\n            s.a[account].lastRain = 0;\\n        }\\n    }\\n\\n    /**\\n     * Silo\\n    **/\\n\\n    function depositSiloAssets(address account, uint256 seeds, uint256 stalk) internal {\\n        incrementBalanceOfStalk(account, stalk);\\n        incrementBalanceOfSeeds(account, seeds);\\n    }\\n\\n    function incrementBalanceOfSeeds(address account, uint256 seeds) internal {\\n        s.s.seeds = s.s.seeds.add(seeds);\\n        s.a[account].s.seeds = s.a[account].s.seeds.add(seeds);\\n    }\\n\\n    function incrementBalanceOfStalk(address account, uint256 stalk) internal {\\n        uint256 roots;\\n        if (s.s.roots == 0) roots = stalk.mul(C.getRootsBase());\\n        else roots = s.s.roots.mul(stalk).div(totalStalk());\\n\\n        s.s.stalk = s.s.stalk.add(stalk);\\n        s.a[account].s.stalk = s.a[account].s.stalk.add(stalk);\\n\\n        s.s.roots = s.s.roots.add(roots);\\n        s.a[account].roots = s.a[account].roots.add(roots);\\n\\n        incrementBipRoots(account, roots);\\n    }\\n\\n    function withdrawSiloAssets(address account, uint256 seeds, uint256 stalk) internal {\\n        decrementBalanceOfStalk(account, stalk);\\n        decrementBalanceOfSeeds(account, seeds);\\n    }\\n\\n    function decrementBalanceOfSeeds(address account, uint256 seeds) internal {\\n        s.s.seeds = s.s.seeds.sub(seeds);\\n        s.a[account].s.seeds = s.a[account].s.seeds.sub(seeds);\\n    }\\n\\n    function decrementBalanceOfStalk(address account, uint256 stalk) internal {\\n        if (stalk == 0) return;\\n        uint256 roots = s.a[account].roots.mul(stalk).sub(1).div(s.a[account].s.stalk).add(1);\\n\\n        s.s.stalk = s.s.stalk.sub(stalk);\\n        s.a[account].s.stalk = s.a[account].s.stalk.sub(stalk);\\n\\n        s.s.roots = s.s.roots.sub(roots);\\n        s.a[account].roots = s.a[account].roots.sub(roots);\\n    }\\n\\n    function addBeanDeposit(address account, uint32 _s, uint256 amount) internal {\\n        s.a[account].bean.deposits[_s] += amount;\\n        emit BeanDeposit(account, _s, amount);\\n    }\\n\\n    function incrementDepositedBeans(uint256 amount) internal {\\n        s.bean.deposited = s.bean.deposited.add(amount);\\n    }\\n\\n    modifier notLocked(address account) {\\n        require(!(locked(account)),\\\"locked\\\");\\n        _;\\n    }\\n\\n    function updateBalanceOfRainStalk(address account) internal {\\n        if (!s.r.raining) return;\\n        if (s.a[account].roots < s.a[account].sop.roots) {\\n            s.r.roots = s.r.roots.sub(s.a[account].sop.roots.sub(s.a[account].roots));\\n            s.a[account].sop.roots = s.a[account].roots;\\n        }\\n    }\\n\\n    function incrementBipRoots(address account, uint256 roots) internal {\\n        if (s.a[account].lockedUntil >= season()) {\\n            for (uint256 i = 0; i < s.g.activeBips.length; i++) {\\n                uint32 bip = s.g.activeBips[i];\\n                if (s.g.voted[bip][account]) s.g.bips[bip].roots = s.g.bips[bip].roots.add(roots);\\n            }\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/farm/facets/SiloFacet/SiloExit.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../../../C.sol\\\";\\nimport \\\"../../../interfaces/IWETH.sol\\\";\\nimport \\\"../../AppStorage.sol\\\";\\nimport \\\"../../../interfaces/IBean.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Silo Exit\\n**/\\ncontract SiloExit {\\n\\n    using SafeMath for uint256;\\n    using SafeMath for uint32;\\n\\n    AppStorage internal s;\\n\\n    /**\\n     * Contracts\\n    **/\\n\\n    function weth() public view returns (IWETH) {\\n        return IWETH(s.c.weth);\\n    }\\n\\n    function index() internal view returns (uint8) {\\n        return s.index;\\n    }\\n\\n    function pair() internal view returns (IUniswapV2Pair) {\\n        return IUniswapV2Pair(s.c.pair);\\n    }\\n\\n    function bean() internal view returns (IBean) {\\n        return IBean(s.c.bean);\\n    }\\n\\n    function season() internal view returns (uint32) {\\n        return s.season.current;\\n    }\\n\\n    /**\\n     * Silo\\n    **/\\n\\n    function totalStalk() public view returns (uint256) {\\n        return s.s.stalk;\\n    }\\n\\n    function totalRoots() public view returns(uint256) {\\n        return s.s.roots;\\n    }\\n\\n    function totalSeeds() public view returns (uint256) {\\n        return s.s.seeds;\\n    }\\n\\n    function totalFarmableBeans() public view returns (uint256) {\\n        return s.si.beans;\\n    }\\n\\n    function totalFarmableStalk() public view returns (uint256) {\\n        return s.si.stalk;\\n    }\\n\\n    function balanceOfSeeds(address account) public view returns (uint256) {\\n        return s.a[account].s.seeds.add(balanceOfFarmableBeans(account).mul(C.getSeedsPerBean()));\\n    }\\n\\n    function balanceOfStalk(address account) public view returns (uint256) {\\n        uint256 farmableBeans = balanceOfFarmableBeans(account);\\n        uint256 farmableStalk = balanceOfFarmableStalkFromBeans(account, farmableBeans);\\n        return s.a[account].s.stalk.add(farmableBeans.mul(C.getStalkPerBean())).add(farmableStalk);\\n    }\\n\\n    function balanceOfRoots(address account) public view returns (uint256) {\\n        return s.a[account].roots;\\n    }\\n\\n    function balanceOfGrownStalk(address account) public view returns (uint256) {\\n        return stalkReward(s.a[account].s.seeds, season()-lastUpdate(account));\\n    }\\n\\n    function balanceOfFarmableStalk(address account) public view returns (uint256) {\\n        uint256 farmableBeans = balanceOfFarmableBeans(account);\\n        return balanceOfFarmableStalkFromBeans(account, farmableBeans);\\n    }\\n\\n    function balanceOfFarmableBeans(address account) public view returns (uint256) {\\n        if (s.s.roots == 0 || s.si.beans == 0) return 0;\\n        uint256 stalk = totalStalk().sub(s.si.stalk).mul(balanceOfRoots(account)).div(s.s.roots);\\n        if (stalk <= s.a[account].s.stalk) return 0;\\n        uint256 beans = stalk.sub(s.a[account].s.stalk).div(C.getStalkPerBean());\\n        if (beans > s.si.beans) return s.si.beans;\\n        return beans;\\n    }\\n\\n    function balanceOfFarmableSeeds(address account) public view returns (uint256) {\\n        return balanceOfFarmableBeans(account).mul(C.getSeedsPerBean());\\n    }\\n\\n    function balanceOfFarmableStalkFromBeans(address account, uint256 beans) internal view returns (uint256) {\\n        if (beans == 0) return 0;\\n        uint256 seeds = beans.mul(C.getSeedsPerBean());\\n        uint256 stalk = balanceOfGrownFarmableStalk(account, beans);\\n        uint32 _s = uint32(stalk.div(seeds));\\n        if (_s >= season()) _s = season()-1;\\n        uint256 leftoverStalk = stalk.sub(seeds.mul(_s));\\n        if (_s < season()-1) {\\n            uint256 previousSeasonBeans = leftoverStalk.div(C.getSeedsPerBean());\\n            leftoverStalk = leftoverStalk.sub(previousSeasonBeans.mul(C.getSeedsPerBean()));\\n        }\\n        return stalk.sub(leftoverStalk);\\n    }\\n\\n    function balanceOfGrownFarmableStalk(address account, uint256 beans) internal view returns (uint256) {\\n        if (s.s.roots == 0 || s.si.stalk == 0) return 0;\\n        uint256 stalk = balanceOfAllFarmableStalk(account);\\n        uint256 stalkFromBeans = beans.mul(C.getStalkPerBean());\\n        if (stalk <= stalkFromBeans) return 0;\\n        stalk = stalk.sub(stalkFromBeans);\\n        if (stalk > s.si.stalk) return s.si.stalk;\\n        return stalk;\\n    }\\n\\n    function balanceOfAllFarmableStalk(address account) public view returns (uint256) {\\n        uint256 stalk = totalStalk().mul(balanceOfRoots(account)).div(s.s.roots);\\n        if (stalk <= s.a[account].s.stalk) return 0;\\n        return stalk.sub(s.a[account].s.stalk);\\n    }\\n\\n    function lastUpdate(address account) public view returns (uint32) {\\n        return s.a[account].lastUpdate;\\n    }\\n\\n    /**\\n     * Season Of Plenty\\n    **/\\n\\n    function lastSeasonOfPlenty() public view returns (uint32) {\\n        return s.sop.last;\\n    }\\n\\n    function seasonsOfPlenty() public view returns (Storage.SeasonOfPlenty memory) {\\n        return s.sop;\\n    }\\n\\n    function balanceOfEth(address account) public view returns (uint256) {\\n        if (s.sop.base == 0) return 0;\\n        return balanceOfPlentyBase(account).mul(s.sop.weth).div(s.sop.base);\\n    }\\n\\n    function balanceOfPlentyBase(address account) public view returns (uint256) {\\n        uint256 plenty = s.a[account].sop.base;\\n        uint32 endSeason = s.a[account].lastSop;\\n        uint256 plentyPerRoot;\\n        uint256 rainSeasonBase = s.sops[s.a[account].lastRain];\\n        if (rainSeasonBase > 0) {\\n            if (endSeason == s.a[account].lastRain) {\\n                plentyPerRoot = rainSeasonBase.sub(s.a[account].sop.basePerRoot);\\n            } else {\\n                plentyPerRoot = rainSeasonBase.sub(s.sops[endSeason]);\\n                endSeason = s.a[account].lastRain;\\n            }\\n            if (plentyPerRoot > 0) plenty = plenty.add(plentyPerRoot.mul(s.a[account].sop.roots));\\n        }\\n\\n        if (s.sop.last > lastUpdate(account)) {\\n            plentyPerRoot = s.sops[s.sop.last].sub(s.sops[endSeason]);\\n            plenty = plenty.add(plentyPerRoot.mul(balanceOfRoots(account)));\\n        }\\n        return plenty;\\n    }\\n\\n    function balanceOfRainRoots(address account) public view returns (uint256) {\\n        return s.a[account].sop.roots;\\n    }\\n\\n    /**\\n     * Governance\\n    **/\\n\\n    function lockedUntil(address account) public view returns (uint32) {\\n        if (locked(account)) {\\n            return s.a[account].lockedUntil;\\n        }\\n        return 0;\\n    }\\n\\n    function locked(address account) public view returns (bool) {\\n        if (s.a[account].lockedUntil >= season()) {\\n            for (uint256 i = 0; i < s.g.activeBips.length; i++) {\\n                    uint32 activeBip = s.g.activeBips[i];\\n                    if (s.g.voted[activeBip][account]) {\\n                        return true;\\n                    }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * Shed\\n    **/\\n\\n    function reserves() internal view returns (uint256, uint256) {\\n        (uint112 reserve0, uint112 reserve1,) = pair().getReserves();\\n        return (index() == 0 ? reserve1 : reserve0,index() == 0 ? reserve0 : reserve1);\\n    }\\n\\n    function lpToLPBeans(uint256 amount) internal view returns (uint256) {\\n        (,uint256 beanReserve) = reserves();\\n        return amount.mul(beanReserve).mul(2).div(pair().totalSupply());\\n    }\\n\\n    function stalkReward(uint256 seeds, uint32 seasons) internal pure returns (uint256) {\\n        return seeds.mul(seasons);\\n    }\\n\\n    /**\\n     * Migration\\n    **/\\n\\n    function balanceOfMigrationRoots(address account) internal view returns (uint256) {\\n        return balanceOfMigrationStalk(account).mul(C.getRootsBase());\\n    }\\n\\n    function balanceOfMigrationStalk(address account) private view returns (uint256) {\\n        return s.a[account].s.stalk.add(stalkReward(s.a[account].s.seeds, s.bip0Start-lastUpdate(account)));\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibCheck.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./LibAppStorage.sol\\\";\\nimport \\\"../interfaces/IBean.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Check Library verifies Beanstalk's balances are correct.\\n**/\\nlibrary LibCheck {\\n\\n    using SafeMath for uint256;\\n\\n    function beanBalanceCheck() internal view {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(\\n            IBean(s.c.bean).balanceOf(address(this)) >=\\n                s.f.harvestable.sub(s.f.harvested).add(s.bean.deposited).add(s.bean.withdrawn),\\n            \\\"Check: Bean balance fail.\\\"\\n        );\\n    }\\n\\n    function lpBalanceCheck() internal view {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(\\n            IUniswapV2Pair(s.c.pair).balanceOf(address(this)) >= s.lp.deposited.add(s.lp.withdrawn),\\n            \\\"Check: LP balance fail.\\\"\\n        );\\n    }\\n\\n    function balanceCheck() internal view {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(\\n            IBean(s.c.bean).balanceOf(address(this)) >=\\n                s.f.harvestable.sub(s.f.harvested).add(s.bean.deposited).add(s.bean.withdrawn),\\n            \\\"Check: Bean balance fail.\\\"\\n        );\\n        require(\\n            IUniswapV2Pair(s.c.pair).balanceOf(address(this)) >= s.lp.deposited.add(s.lp.withdrawn),\\n            \\\"Check: LP balance fail.\\\"\\n        );\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibInternal.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @author Publius\\n * @title Internal Library handles gas efficient function calls between facets.\\n**/\\nlibrary LibInternal {\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        address[] facetAddresses;\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    struct Claim {\\n        uint32[] beanWithdrawals;\\n        uint32[] lpWithdrawals;\\n        uint256[] plots;\\n        bool claimEth;\\n        bool convertLP;\\n        uint256 minBeanAmount;\\n        uint256 minEthAmount;\\n    }\\n\\n    function updateSilo(address account) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        bytes4 functionSelector = bytes4(keccak256(\\\"updateSilo(address)\\\"));\\n        address facet = ds.selectorToFacetAndPosition[functionSelector].facetAddress;\\n        bytes memory myFunctionCall = abi.encodeWithSelector(functionSelector, account);\\n        (bool success,) = address(facet).delegatecall(myFunctionCall);\\n        require(success, \\\"Silo: updateSilo failed.\\\");\\n    }\\n\\n    function updateBip(uint32 bip) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        bytes4 functionSelector = bytes4(keccak256(\\\"updateBip(uint32)\\\"));\\n        address facet = ds.selectorToFacetAndPosition[functionSelector].facetAddress;\\n        bytes memory myFunctionCall = abi.encodeWithSelector(functionSelector, bip);\\n        (bool success,) = address(facet).delegatecall(myFunctionCall);\\n        require(success, \\\"Silo: updateBip failed.\\\");\\n    }\\n\\n    function stalkFor(uint32 bip) internal returns (uint256 stalk) {\\n        DiamondStorage storage ds = diamondStorage();\\n        bytes4 functionSelector = bytes4(keccak256(\\\"stalkFor(uint32)\\\"));\\n        address facet = ds.selectorToFacetAndPosition[functionSelector].facetAddress;\\n        bytes memory myFunctionCall = abi.encodeWithSelector(functionSelector, bip);\\n        (bool success, bytes memory data) = address(facet).delegatecall(myFunctionCall);\\n        require(success, \\\"Governance: stalkFor failed.\\\");\\n        assembly { stalk := mload(add(data, add(0x20, 0))) }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibMarket.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../interfaces/IBean.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Market Library handles swapping, addinga and removing LP on Uniswap for Beanstalk.\\n**/\\nlibrary LibMarket {\\n\\n    event BeanAllocation(address indexed account, uint256 beans);\\n\\n    struct DiamondStorage {\\n        address bean;\\n        address weth;\\n        address router;\\n    }\\n\\n    struct AddLiquidity {\\n        uint256 beanAmount;\\n        uint256 minBeanAmount;\\n        uint256 minEthAmount;\\n    }\\n\\n    using SafeMath for uint256;\\n\\n    bytes32 private constant MARKET_STORAGE_POSITION = keccak256(\\\"diamond.standard.market.storage\\\");\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = MARKET_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function initMarket(address bean, address weth, address router) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        ds.bean = bean;\\n        ds.weth = weth;\\n        ds.router = router;\\n    }\\n\\n    /**\\n     * Swap\\n    **/\\n\\n    function buy(uint256 buyBeanAmount) internal returns (uint256 amount) {\\n        (uint256 ethAmount, uint256 beanAmount) = _buy(buyBeanAmount, msg.value, msg.sender);\\n        (bool success,) = msg.sender.call{ value: msg.value.sub(ethAmount) }(\\\"\\\");\\n        require(success, \\\"Market: Refund failed.\\\");\\n        return beanAmount;\\n    }\\n\\n    function buyAndDeposit(uint256 buyBeanAmount) internal returns (uint256 amount) {\\n        (uint256 ethAmount, uint256 beanAmount) = _buy(buyBeanAmount, msg.value, address(this));\\n        (bool success,) = msg.sender.call{ value: msg.value.sub(ethAmount) }(\\\"\\\");\\n        require(success, \\\"Market: Refund failed.\\\");\\n        return beanAmount;\\n    }\\n\\n    function sellToWETH(uint256 sellBeanAmount, uint256 minBuyEthAmount)\\n        internal\\n        returns (uint256 amount)\\n    {\\n        (,uint256 outAmount) = _sell(sellBeanAmount, minBuyEthAmount, address(this));\\n        return outAmount;\\n    }\\n\\n    /**\\n     *  Liquidity\\n    **/\\n\\n    function addLiquidity(AddLiquidity calldata al) internal returns (uint256, uint256) {\\n        (uint256 beansDeposited, uint256 ethDeposited, uint256 liquidity) = _addLiquidity(\\n            msg.value,\\n            al.beanAmount,\\n            al.minEthAmount,\\n            al.minBeanAmount\\n        );\\n        (bool success,) = msg.sender.call{ value: msg.value.sub(ethDeposited) }(\\\"\\\");\\n        require(success, \\\"Market: Refund failed.\\\");\\n        return (beansDeposited, liquidity);\\n    }\\n\\n    function removeLiquidity(uint256 liqudity, uint256 minBeanAmount,uint256 minEthAmount)\\n        internal\\n        returns (uint256 beanAmount, uint256 ethAmount)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        return IUniswapV2Router02(ds.router).removeLiquidityETH(\\n            ds.bean,\\n            liqudity,\\n            minBeanAmount,\\n            minEthAmount,\\n            msg.sender,\\n            block.timestamp.add(1)\\n        );\\n    }\\n\\n    function removeLiquidityWithBeanAllocation(uint256 liqudity, uint256 minBeanAmount,uint256 minEthAmount)\\n        internal\\n        returns (uint256 beanAmount, uint256 ethAmount)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        (beanAmount, ethAmount) = IUniswapV2Router02(ds.router).removeLiquidity(\\n            ds.bean,\\n            ds.weth,\\n            liqudity,\\n            minBeanAmount,\\n            minEthAmount,\\n            address(this),\\n            block.timestamp.add(1)\\n        );\\n        IWETH(ds.weth).withdraw(ethAmount);\\n        (bool success, ) = msg.sender.call{value: ethAmount}(\\\"\\\");\\n        require(success, \\\"WETH: ETH transfer failed\\\");\\n    }\\n\\n    function addAndDepositLiquidity(uint256 allocatedBeans, AddLiquidity calldata al) internal returns (uint256) {\\n        DiamondStorage storage ds = diamondStorage();\\n        transferAllocatedBeans(allocatedBeans, al.beanAmount);\\n        (uint256 beans, uint256 liquidity) = addLiquidity(al);\\n        if (al.beanAmount > beans) IBean(ds.bean).transfer(msg.sender, al.beanAmount.sub(beans));\\n        return liquidity;\\n    }\\n\\n    function swapAndAddLiquidity(\\n        uint256 buyBeanAmount,\\n        uint256 buyEthAmount,\\n        uint256 allocatedBeans,\\n        LibMarket.AddLiquidity calldata al\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 boughtLP;\\n        if (buyBeanAmount > 0)\\n            boughtLP = LibMarket.buyBeansAndAddLiquidity(buyBeanAmount, allocatedBeans, al);\\n        else if (buyEthAmount > 0)\\n            boughtLP = LibMarket.buyEthAndAddLiquidity(buyEthAmount, allocatedBeans, al);\\n        else\\n            boughtLP = LibMarket.addAndDepositLiquidity(allocatedBeans, al);\\n        return boughtLP;\\n    }\\n\\n\\n    function buyBeansAndAddLiquidity(uint256 buyBeanAmount, uint256 allocatedBeans, AddLiquidity calldata al)\\n        internal\\n        returns (uint256)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        IWETH(ds.weth).deposit{value: msg.value}();\\n        address[] memory path = new address[](2);\\n        path[0] = ds.weth;\\n        path[1] = ds.bean;\\n        uint256[] memory amounts = IUniswapV2Router02(ds.router).getAmountsIn(buyBeanAmount, path);\\n        (uint256 ethSold, uint256 beans) = _buyWithWETH(buyBeanAmount, amounts[0], address(this));\\n        if (al.beanAmount > buyBeanAmount) {\\n            transferAllocatedBeans(allocatedBeans, al.beanAmount.sub(buyBeanAmount));\\n            beans = beans.add(al.beanAmount.sub(buyBeanAmount));\\n        } else if (allocatedBeans > 0) {\\n            IBean(ds.bean).transfer(msg.sender, allocatedBeans);\\n        }\\n        uint256 liquidity; uint256 ethAdded;\\n        (beans, ethAdded, liquidity) = _addLiquidityWETH(\\n            msg.value.sub(ethSold),\\n            beans,\\n            al.minEthAmount,\\n            al.minBeanAmount\\n        );\\n        if (al.beanAmount > beans) IBean(ds.bean).transfer(msg.sender, al.beanAmount.sub(beans));\\n        if (msg.value > ethAdded.add(ethSold)) {\\n            uint256 returnETH = msg.value.sub(ethAdded).sub(ethSold);\\n            IWETH(ds.weth).withdraw(returnETH);\\n            (bool success,) = msg.sender.call{ value: returnETH }(\\\"\\\");\\n            require(success, \\\"Market: Refund failed.\\\");\\n        }\\n        return liquidity;\\n    }\\n\\n    function buyEthAndAddLiquidity(uint256 buyWethAmount, uint256 allocatedBeans, AddLiquidity calldata al)\\n        internal\\n        returns (uint256)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 sellBeans = _amountIn(buyWethAmount);\\n        transferAllocatedBeans(allocatedBeans, al.beanAmount.add(sellBeans));\\n        (uint256 beansSold, uint256 wethBought) = _sell(sellBeans, buyWethAmount, address(this));\\n        if (msg.value > 0) IWETH(ds.weth).deposit{value: msg.value}();\\n        (uint256 beans, uint256 ethAdded, uint256 liquidity) = _addLiquidityWETH(\\n            msg.value.add(wethBought),\\n            al.beanAmount,\\n            al.minEthAmount,\\n            al.minBeanAmount\\n        );\\n\\n        if (al.beanAmount.add(sellBeans) > beans.add(beansSold))\\n            IBean(ds.bean).transfer(\\n                msg.sender,\\n                al.beanAmount.add(sellBeans).sub(beans.add(beansSold))\\n            );\\n\\n        if (ethAdded < wethBought.add(msg.value)) {\\n            uint256 eth = wethBought.add(msg.value).sub(ethAdded);\\n            IWETH(ds.weth).withdraw(eth);\\n            (bool success, ) = msg.sender.call{value: eth}(\\\"\\\");\\n            require(success, \\\"Market: Ether transfer failed.\\\");\\n        }\\n        return liquidity;\\n    }\\n\\n    /**\\n     *  Shed\\n    **/\\n\\n    function _sell(uint256 sellBeanAmount, uint256 minBuyEthAmount, address to)\\n        private\\n        returns (uint256 inAmount, uint256 outAmount)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        address[] memory path = new address[](2);\\n        path[0] = ds.bean;\\n        path[1] = ds.weth;\\n        uint[] memory amounts = IUniswapV2Router02(ds.router).swapExactTokensForTokens(\\n            sellBeanAmount,\\n            minBuyEthAmount,\\n            path,\\n            to,\\n            block.timestamp.add(1)\\n        );\\n        return (amounts[0], amounts[1]);\\n    }\\n\\n    function _buy(uint256 beanAmount, uint256 ethAmount, address to)\\n        private\\n        returns (uint256 inAmount, uint256 outAmount)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        address[] memory path = new address[](2);\\n        path[0] = ds.weth;\\n        path[1] = ds.bean;\\n\\n        uint[] memory amounts = IUniswapV2Router02(ds.router).swapExactETHForTokens{value: ethAmount}(\\n            beanAmount,\\n            path,\\n            to,\\n            block.timestamp.add(1)\\n        );\\n        return (amounts[0], amounts[1]);\\n    }\\n\\n    function _buyWithWETH(uint256 beanAmount, uint256 ethAmount, address to)\\n        private\\n        returns (uint256 inAmount, uint256 outAmount)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        address[] memory path = new address[](2);\\n        path[0] = ds.weth;\\n        path[1] = ds.bean;\\n\\n        uint[] memory amounts = IUniswapV2Router02(ds.router).swapExactTokensForTokens(\\n            ethAmount,\\n            beanAmount,\\n            path,\\n            to,\\n            block.timestamp.add(1)\\n        );\\n        return (amounts[0], amounts[1]);\\n    }\\n\\n    function _addLiquidity(uint256 ethAmount, uint256 beanAmount, uint256 minEthAmount, uint256 minBeanAmount)\\n        private\\n        returns (uint256, uint256, uint256)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        return IUniswapV2Router02(ds.router).addLiquidityETH{value: ethAmount}(\\n            ds.bean,\\n            beanAmount,\\n            minBeanAmount,\\n            minEthAmount,\\n            address(this),\\n            block.timestamp.add(1));\\n    }\\n\\n    function _addLiquidityWETH(uint256 wethAmount, uint256 beanAmount, uint256 minWethAmount, uint256 minBeanAmount)\\n        private\\n        returns (uint256, uint256, uint256)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        return IUniswapV2Router02(ds.router).addLiquidity(\\n            ds.bean,\\n            ds.weth,\\n            beanAmount,\\n            wethAmount,\\n            minBeanAmount,\\n            minWethAmount,\\n            address(this),\\n            block.timestamp.add(1));\\n    }\\n\\n    function _amountIn(uint256 buyWethAmount) internal view returns (uint256) {\\n        DiamondStorage storage ds = diamondStorage();\\n        address[] memory path = new address[](2);\\n        path[0] = ds.bean;\\n        path[1] = ds.weth;\\n        uint256[] memory amounts = IUniswapV2Router02(ds.router).getAmountsIn(buyWethAmount, path);\\n        return amounts[0];\\n    }\\n\\n    function transferAllocatedBeans(uint256 allocatedBeans, uint256 transferBeans) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        if (allocatedBeans == 0) {\\n            IBean(ds.bean).transferFrom(msg.sender, address(this), transferBeans);\\n        }\\n        else if (allocatedBeans >= transferBeans) {\\n            emit BeanAllocation(msg.sender, transferBeans);\\n            if (allocatedBeans > transferBeans) IBean(ds.bean).transfer(msg.sender, allocatedBeans.sub(transferBeans));\\n        } else {\\n            emit BeanAllocation(msg.sender, allocatedBeans);\\n            IBean(ds.bean).transferFrom(msg.sender, address(this), transferBeans.sub(allocatedBeans));\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/C.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./libraries/Decimal.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title C holds the contracts for Beanstalk.\\n**/\\nlibrary C {\\n\\n    using Decimal for Decimal.D256;\\n    using SafeMath for uint256;\\n\\n    // Chain\\n    uint256 private constant CHAIN_ID = 1; // Mainnet\\n\\n    // Season\\n    uint256 private constant CURRENT_SEASON_PERIOD = 3600; // 1 hour\\n\\n    // Sun\\n    uint256 private constant HARVESET_PERCENTAGE = 5e17; // 50%\\n\\n    // Weather\\n    uint256 private constant POD_RATE_LOWER_BOUND = 5e16; // 5%\\n    uint256 private constant OPTIMAL_POD_RATE = 15e16; // 15%\\n    uint256 private constant POD_RATE_UPPER_BOUND = 25e16; // 25%\\n\\n    uint256 private constant DELTA_POD_DEMAND_LOWER_BOUND = 95e16; // 95%\\n    uint256 private constant DELTA_POD_DEMAND_UPPER_BOUND = 105e16; // 105%\\n\\n    uint256 private constant STEADY_SOW_TIME = 60; // 1 minute\\n    uint256 private constant RAIN_TIME = 24; // 24 seasons = 1 day\\n\\n    // Governance\\n    uint32 private constant GOVERNANCE_PERIOD = 168; // 168 seasons = 7 days\\n    uint32 private constant GOVERNANCE_EMERGENCY_PERIOD = 86400; // 1 day\\n    uint256 private constant GOVERNANCE_PASS_THRESHOLD = 5e17; // 1/2\\n    uint256 private constant GOVERNANCE_EMERGENCY_THRESHOLD_NUMERATOR = 2; // 2/3\\n    uint256 private constant GOVERNANCE_EMERGENCY_THRESHOLD_DEMONINATOR = 3; // 2/3\\n    uint32 private constant GOVERNANCE_EXPIRATION = 24; // 24 seasons = 1 day\\n    uint256 private constant GOVERNANCE_PROPOSAL_THRESHOLD = 1e15; // 0.1%\\n    uint256 private constant BASE_COMMIT_INCENTIVE = 1e8; // 100 beans\\n    uint256 private constant MAX_PROPOSITIONS = 5;\\n\\n    // Silo\\n    uint256 private constant BASE_ADVANCE_INCENTIVE = 1e8; // 100 beans\\n    uint32 private constant WITHDRAW_TIME = 0; // 24 + 1 seasons\\n    uint256 private constant SEEDS_PER_BEAN = 2;\\n    uint256 private constant SEEDS_PER_LP_BEAN = 4;\\n    uint256 private constant STALK_PER_BEAN = 10000;\\n    uint256 private constant ROOTS_BASE = 1e12;\\n\\n    // Field\\n    uint256 private constant SOIL_MAX_RATIO_CAP = 25e16; // 25%\\n    uint256 private constant SOIL_MIN_RATIO_CAP = 1e15; // 0.1%\\n\\n\\n    /**\\n     * Getters\\n    **/\\n\\n    function getSeasonPeriod() internal pure returns (uint256) {\\n        return CURRENT_SEASON_PERIOD;\\n    }\\n\\n    function getGovernancePeriod() internal pure returns (uint32) {\\n        return GOVERNANCE_PERIOD;\\n    }\\n\\n    function getGovernanceEmergencyPeriod() internal pure returns (uint32) {\\n        return GOVERNANCE_EMERGENCY_PERIOD;\\n    }\\n\\n    function getGovernanceExpiration() internal pure returns (uint256) {\\n        return GOVERNANCE_EXPIRATION;\\n    }\\n\\n    function getGovernancePassThreshold() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.D256({value: GOVERNANCE_PASS_THRESHOLD});\\n    }\\n\\n    function getGovernanceEmergencyThreshold() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(GOVERNANCE_EMERGENCY_THRESHOLD_NUMERATOR,GOVERNANCE_EMERGENCY_THRESHOLD_DEMONINATOR);\\n    }\\n\\n    function getGovernanceProposalThreshold() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.D256({value: GOVERNANCE_PROPOSAL_THRESHOLD});\\n    }\\n\\n    function getAdvanceIncentive() internal pure returns (uint256) {\\n        return BASE_ADVANCE_INCENTIVE;\\n    }\\n\\n    function getCommitIncentive() internal pure returns (uint256) {\\n        return BASE_COMMIT_INCENTIVE;\\n    }\\n\\n    function getSiloWithdrawSeasons() internal pure returns (uint32) {\\n        return WITHDRAW_TIME;\\n    }\\n\\n    function getMinSoilRatioCap() internal pure returns (uint256) {\\n        return SOIL_MIN_RATIO_CAP;\\n    }\\n\\n    function getMaxSoilRatioCap() internal pure returns (uint256) {\\n        return SOIL_MAX_RATIO_CAP;\\n    }\\n\\n    function getHarvestPercentage() internal pure returns (uint256) {\\n        return HARVESET_PERCENTAGE;\\n    }\\n\\n    function getChainId() internal pure returns (uint256) {\\n        return CHAIN_ID;\\n    }\\n\\n    function getOptimalPodRate() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(OPTIMAL_POD_RATE,1e18);\\n    }\\n\\n    function getUpperBoundPodRate() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(POD_RATE_UPPER_BOUND,1e18);\\n    }\\n\\n    function getLowerBoundPodRate() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(POD_RATE_LOWER_BOUND,1e18);\\n    }\\n\\n    function getUpperBoundDPD() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(DELTA_POD_DEMAND_UPPER_BOUND,1e18);\\n    }\\n\\n    function getLowerBoundDPD() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(DELTA_POD_DEMAND_LOWER_BOUND,1e18);\\n    }\\n\\n    function getSteadySowTime() internal pure returns (uint256) {\\n        return STEADY_SOW_TIME;\\n    }\\n\\n    function getRainTime() internal pure returns (uint256) {\\n        return RAIN_TIME;\\n    }\\n\\n    function getMaxPropositions() internal pure returns (uint256) {\\n      return MAX_PROPOSITIONS;\\n    }\\n\\n    function getSeedsPerBean() internal pure returns (uint256) {\\n        return SEEDS_PER_BEAN;\\n    }\\n\\n    function getSeedsPerLPBean() internal pure returns (uint256) {\\n        return SEEDS_PER_LP_BEAN;\\n    }\\n\\n    function getStalkPerBean() internal pure returns (uint256) {\\n      return STALK_PER_BEAN;\\n    }\\n\\n    function getStalkPerLPSeed() internal pure returns (uint256) {\\n      return STALK_PER_BEAN/SEEDS_PER_LP_BEAN;\\n    }\\n\\n    function getRootsBase() internal pure returns (uint256) {\\n        return ROOTS_BASE;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title WETH Interface\\n**/\\ninterface IWETH is IERC20 {\\n\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/farm/AppStorage.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title App Storage defines the state object for Beanstalk.\\n**/\\ncontract Account {\\n\\n    struct Field {\\n        mapping(uint256 => uint256) plots;\\n        mapping(address => uint256) podAllowances;\\n    }\\n\\n    struct AssetSilo {\\n        mapping(uint32 => uint256) withdrawals;\\n        mapping(uint32 => uint256) deposits;\\n        mapping(uint32 => uint256) depositSeeds;\\n    }\\n\\n    struct Silo {\\n        uint256 stalk;\\n        uint256 seeds;\\n    }\\n\\n    struct SeasonOfPlenty {\\n        uint256 base;\\n        uint256 roots;\\n        uint256 basePerRoot;\\n    }\\n\\n    struct State {\\n        Field field;\\n        AssetSilo bean;\\n        AssetSilo lp;\\n        Silo s;\\n        uint32 lockedUntil;\\n        uint32 lastUpdate;\\n        uint32 lastSop;\\n        uint32 lastRain;\\n        SeasonOfPlenty sop;\\n        uint256 roots;\\n    }\\n}\\n\\ncontract Storage {\\n    struct Contracts {\\n        address bean;\\n        address pair;\\n        address pegPair;\\n        address weth;\\n    }\\n\\n    // Field\\n\\n    struct Field {\\n        uint256 soil;\\n        uint256 pods;\\n        uint256 harvested;\\n        uint256 harvestable;\\n    }\\n\\n    // Governance\\n\\n    struct Bip {\\n        address proposer;\\n        uint32 start;\\n        uint32 period;\\n        bool executed;\\n        int pauseOrUnpause;\\n        uint128 timestamp;\\n        uint256 roots;\\n        uint256 endTotalRoots;\\n    }\\n\\n    struct DiamondCut {\\n        IDiamondCut.FacetCut[] diamondCut;\\n        address initAddress;\\n        bytes initData;\\n    }\\n\\n    struct Governance {\\n        uint32[] activeBips;\\n        uint32 bipIndex;\\n        mapping(uint32 => DiamondCut) diamondCuts;\\n        mapping(uint32 => mapping(address => bool)) voted;\\n        mapping(uint32 => Bip) bips;\\n    }\\n\\n    // Silo\\n\\n    struct AssetSilo {\\n        uint256 deposited;\\n        uint256 withdrawn;\\n    }\\n\\n    struct IncreaseSilo {\\n        uint256 beans;\\n        uint256 stalk;\\n    }\\n\\n    struct SeasonOfPlenty {\\n        uint256 weth;\\n        uint256 base;\\n        uint32 last;\\n    }\\n\\n    struct Silo {\\n        uint256 stalk;\\n        uint256 seeds;\\n        uint256 roots;\\n    }\\n\\n    // Season\\n\\n    struct Oracle {\\n        bool initialized;\\n        uint256 cumulative;\\n        uint256 pegCumulative;\\n        uint32 timestamp;\\n        uint32 pegTimestamp;\\n    }\\n\\n    struct Rain {\\n        uint32 start;\\n        bool raining;\\n        uint256 pods;\\n        uint256 roots;\\n    }\\n\\n    struct Season {\\n        uint32 current;\\n        uint256 start;\\n        uint256 period;\\n        uint256 timestamp;\\n    }\\n\\n    struct Weather {\\n        uint256 startSoil;\\n        uint256 lastDSoil;\\n        uint96 lastSoilPercent;\\n        uint32 lastSowTime;\\n        uint32 nextSowTime;\\n        uint32 yield;\\n        bool didSowBelowMin;\\n        bool didSowFaster;\\n    }\\n}\\n\\nstruct AppStorage {\\n    uint8 index;\\n    int8[32] cases;\\n    bool paused;\\n    uint128 pausedAt;\\n    Storage.Season season;\\n    Storage.Contracts c;\\n    Storage.Field f;\\n    Storage.Governance g;\\n    Storage.Oracle o;\\n    Storage.Rain r;\\n    Storage.Silo s;\\n    uint256 depreciated1;\\n    Storage.Weather w;\\n    Storage.AssetSilo bean;\\n    Storage.AssetSilo lp;\\n    Storage.IncreaseSilo si;\\n    Storage.SeasonOfPlenty sop;\\n    uint256 depreciated2;\\n    uint256 depreciated3;\\n    uint256 depreciated4;\\n    uint256 depreciated5;\\n    uint256 depreciated6;\\n    mapping (uint32 => uint256) sops;\\n    mapping (address => Account.State) a;\\n    uint32 bip0Start;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBean.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Bean Interface\\n**/\\nabstract contract IBean is IERC20 {\\n\\n    function burn(uint256 amount) public virtual;\\n    function burnFrom(address account, uint256 amount) public virtual;\\n    function mint(address account, uint256 amount) public virtual returns (bool);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Decimal.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Decimal\\n * @author dYdX\\n *\\n * Library that defines a fixed-point number with 18 decimal places.\\n */\\nlibrary Decimal {\\n    using SafeMath for uint256;\\n\\n    // ============ Constants ============\\n\\n    uint256 constant BASE = 10**18;\\n\\n    // ============ Structs ============\\n\\n\\n    struct D256 {\\n        uint256 value;\\n    }\\n\\n    // ============ Static Functions ============\\n\\n    function zero()\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: 0 });\\n    }\\n\\n    function one()\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: BASE });\\n    }\\n\\n    function from(\\n        uint256 a\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: a.mul(BASE) });\\n    }\\n\\n    function ratio(\\n        uint256 a,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: getPartial(a, BASE, b) });\\n    }\\n\\n    // ============ Self Functions ============\\n\\n    function add(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.add(b.mul(BASE)) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.mul(BASE)) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        uint256 b,\\n        string memory reason\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.mul(BASE), reason) });\\n    }\\n\\n    function mul(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.mul(b) });\\n    }\\n\\n    function div(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.div(b) });\\n    }\\n\\n    function pow(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        if (b == 0) {\\n            return from(1);\\n        }\\n\\n        D256 memory temp = D256({ value: self.value });\\n        for (uint256 i = 1; i < b; i++) {\\n            temp = mul(temp, self);\\n        }\\n\\n        return temp;\\n    }\\n\\n    function add(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.add(b.value) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.value) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        D256 memory b,\\n        string memory reason\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.value, reason) });\\n    }\\n\\n    function mul(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: getPartial(self.value, b.value, BASE) });\\n    }\\n\\n    function div(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: getPartial(self.value, BASE, b.value) });\\n    }\\n\\n    function equals(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return self.value == b.value;\\n    }\\n\\n    function greaterThan(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) == 2;\\n    }\\n\\n    function lessThan(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) == 0;\\n    }\\n\\n    function greaterThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) > 0;\\n    }\\n\\n    function lessThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) < 2;\\n    }\\n\\n    function isZero(D256 memory self) internal pure returns (bool) {\\n        return self.value == 0;\\n    }\\n\\n    function asUint256(D256 memory self) internal pure returns (uint256) {\\n        return self.value.div(BASE);\\n    }\\n\\n    // ============ Core Methods ============\\n\\n    function getPartial(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    )\\n    private\\n    pure\\n    returns (uint256)\\n    {\\n        return target.mul(numerator).div(denominator);\\n    }\\n\\n    function compareTo(\\n        D256 memory a,\\n        D256 memory b\\n    )\\n    private\\n    pure\\n    returns (uint256)\\n    {\\n        if (a.value == b.value) {\\n            return 1;\\n        }\\n        return a.value > b.value ? 2 : 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.7.6;\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibAppStorage.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../farm/AppStorage.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title App Storage Library allows libaries to access Beanstalk's state.\\n**/\\nlibrary LibAppStorage {\\n\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libraries/LibClaim.sol\": {\r\n        \"LibClaim\": \"0x6982938c28bd93d6f06c5c65d970aa8687c2b400\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beans\",\"type\":\"uint256\"}],\"name\":\"BeanAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beans\",\"type\":\"uint256\"}],\"name\":\"BeanDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"crates\",\"type\":\"uint32[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"crateBeans\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beans\",\"type\":\"uint256\"}],\"name\":\"BeanRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beans\",\"type\":\"uint256\"}],\"name\":\"BeanWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seeds\",\"type\":\"uint256\"}],\"name\":\"LPDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"crates\",\"type\":\"uint32[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"crateLP\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"}],\"name\":\"LPRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"}],\"name\":\"LPWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyBeanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyEthAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"beanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBeanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibMarket.AddLiquidity\",\"name\":\"al\",\"type\":\"tuple\"}],\"name\":\"addAndDepositLP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfAllFarmableStalk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfFarmableBeans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfFarmableSeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfFarmableStalk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfGrownStalk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfPlentyBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfRainRoots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfRoots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfSeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfStalk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"name\":\"beanDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"i\",\"type\":\"uint32\"}],\"name\":\"beanWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"}],\"name\":\"buyAndDepositBeans\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyBeanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyEthAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"beanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBeanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibMarket.AddLiquidity\",\"name\":\"al\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"beanWithdrawals\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"lpWithdrawals\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"plots\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"claimEth\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"convertLP\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minBeanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibClaim.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"claimAddAndDepositLP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"beanWithdrawals\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"lpWithdrawals\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"plots\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"claimEth\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"convertLP\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minBeanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibClaim.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"claimAndDepositBeans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"beanWithdrawals\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"lpWithdrawals\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"plots\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"claimEth\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"convertLP\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minBeanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibClaim.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"claimAndDepositLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"crates\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"beanWithdrawals\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"lpWithdrawals\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"plots\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"claimEth\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"convertLP\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minBeanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibClaim.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"claimAndWithdrawBeans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"crates\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"beanWithdrawals\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"lpWithdrawals\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"plots\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"claimEth\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"convertLP\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minBeanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibClaim.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"claimAndWithdrawLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"beanWithdrawals\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"lpWithdrawals\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"plots\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"claimEth\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"convertLP\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minBeanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibClaim.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"claimBuyAndDepositBeans\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"beanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBeanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibMarket.AddLiquidity\",\"name\":\"al\",\"type\":\"tuple\"},{\"internalType\":\"uint32[]\",\"name\":\"crates\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"beanWithdrawals\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"lpWithdrawals\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"plots\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"claimEth\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"convertLP\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minBeanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibClaim.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"claimConvertAddAndDepositLP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"beanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBeanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibMarket.AddLiquidity\",\"name\":\"al\",\"type\":\"tuple\"},{\"internalType\":\"uint32[]\",\"name\":\"crates\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"convertAddAndDepositLP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositBeans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSeasonOfPlenty\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedUntil\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"name\":\"lpDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"i\",\"type\":\"uint32\"}],\"name\":\"lpWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seasonsOfPlenty\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"weth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"last\",\"type\":\"uint32\"}],\"internalType\":\"struct Storage.SeasonOfPlenty\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositedBeans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositedLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFarmableBeans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFarmableStalk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRoots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStalk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawnBeans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawnLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"updateSilo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"crates\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawBeans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"crates\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SiloFacet","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}