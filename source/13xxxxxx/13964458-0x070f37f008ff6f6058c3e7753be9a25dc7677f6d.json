{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.5.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libs/ABDKMath64x64.sol\r\n\r\n// BSD-4-Clause\r\n/*\r\n * ABDK Math 64.64 Smart Contract Library.  Copyright Â© 2019 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * Smart contract library of mathematical functions operating with signed\r\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\r\n * basically a simple fraction whose numerator is signed 128-bit integer and\r\n * denominator is 2^64.  As long as denominator is always the same, there is no\r\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\r\n * represented by int128 type holding only the numerator.\r\n */\r\nlibrary ABDKMath64x64 {\r\n  /*\r\n   * Minimum value signed 64.64-bit fixed point number may have. \r\n   */\r\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\r\n\r\n  /*\r\n   * Maximum value signed 64.64-bit fixed point number may have. \r\n   */\r\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  /**\r\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function fromInt (int256 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\r\n      return int128 (x << 64);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\r\n   * rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64-bit integer number\r\n   */\r\n  function toInt (int128 x) internal pure returns (int64) {\r\n    unchecked {\r\n      return int64 (x >> 64);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function fromUInt (uint256 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x <= 0x7FFFFFFFFFFFFFFF);\r\n      return int128 (int256 (x << 64));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\r\n   * number rounding down.  Revert on underflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return unsigned 64-bit integer number\r\n   */\r\n  function toUInt (int128 x) internal pure returns (uint64) {\r\n    unchecked {\r\n      require (x >= 0);\r\n      return uint64 (uint128 (x >> 64));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\r\n   * number rounding down.  Revert on overflow.\r\n   *\r\n   * @param x signed 128.128-bin fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function from128x128 (int256 x) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 result = x >> 64;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\r\n   * number.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 128.128 fixed point number\r\n   */\r\n  function to128x128 (int128 x) internal pure returns (int256) {\r\n    unchecked {\r\n      return int256 (x) << 64;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x + y.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function add (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 result = int256(x) + y;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x - y.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function sub (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 result = int256(x) - y;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding down.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function mul (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 result = int256(x) * y >> 64;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\r\n   * number and y is signed 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64 fixed point number\r\n   * @param y signed 256-bit integer number\r\n   * @return signed 256-bit integer number\r\n   */\r\n  function muli (int128 x, int256 y) internal pure returns (int256) {\r\n    unchecked {\r\n      if (x == MIN_64x64) {\r\n        require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\r\n          y <= 0x1000000000000000000000000000000000000000000000000);\r\n        return -y << 63;\r\n      } else {\r\n        bool negativeResult = false;\r\n        if (x < 0) {\r\n          x = -x;\r\n          negativeResult = true;\r\n        }\r\n        if (y < 0) {\r\n          y = -y; // We rely on overflow behavior here\r\n          negativeResult = !negativeResult;\r\n        }\r\n        uint256 absoluteResult = mulu (x, uint256 (y));\r\n        if (negativeResult) {\r\n          require (absoluteResult <=\r\n            0x8000000000000000000000000000000000000000000000000000000000000000);\r\n          return -int256 (absoluteResult); // We rely on overflow behavior here\r\n        } else {\r\n          require (absoluteResult <=\r\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n          return int256 (absoluteResult);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\r\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64 fixed point number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return unsigned 256-bit integer number\r\n   */\r\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\r\n    unchecked {\r\n      if (y == 0) return 0;\r\n\r\n      require (x >= 0);\r\n\r\n      uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\r\n      uint256 hi = uint256 (int256 (x)) * (y >> 128);\r\n\r\n      require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      hi <<= 64;\r\n\r\n      require (hi <=\r\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\r\n      return hi + lo;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function div (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      require (y != 0);\r\n      int256 result = (int256 (x) << 64) / y;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @param y signed 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function divi (int256 x, int256 y) internal pure returns (int128) {\r\n    unchecked {\r\n      require (y != 0);\r\n\r\n      bool negativeResult = false;\r\n      if (x < 0) {\r\n        x = -x; // We rely on overflow behavior here\r\n        negativeResult = true;\r\n      }\r\n      if (y < 0) {\r\n        y = -y; // We rely on overflow behavior here\r\n        negativeResult = !negativeResult;\r\n      }\r\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\r\n      if (negativeResult) {\r\n        require (absoluteResult <= 0x80000000000000000000000000000000);\r\n        return -int128 (absoluteResult); // We rely on overflow behavior here\r\n      } else {\r\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n        return int128 (absoluteResult); // We rely on overflow behavior here\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\r\n    unchecked {\r\n      require (y != 0);\r\n      uint128 result = divuu (x, y);\r\n      require (result <= uint128 (MAX_64x64));\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate -x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function neg (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x != MIN_64x64);\r\n      return -x;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate |x|.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function abs (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x != MIN_64x64);\r\n      return x < 0 ? -x : x;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function inv (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x != 0);\r\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function avg (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      return int128 ((int256 (x) + int256 (y)) >> 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\r\n   * Revert on overflow or in case x * y is negative.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 m = int256 (x) * int256 (y);\r\n      require (m >= 0);\r\n      require (m <\r\n          0x4000000000000000000000000000000000000000000000000000000000000000);\r\n      return int128 (sqrtu (uint256 (m)));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\r\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y uint256 value\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\r\n    unchecked {\r\n      bool negative = x < 0 && y & 1 == 1;\r\n\r\n      uint256 absX = uint128 (x < 0 ? -x : x);\r\n      uint256 absResult;\r\n      absResult = 0x100000000000000000000000000000000;\r\n\r\n      if (absX <= 0x10000000000000000) {\r\n        absX <<= 63;\r\n        while (y != 0) {\r\n          if (y & 0x1 != 0) {\r\n            absResult = absResult * absX >> 127;\r\n          }\r\n          absX = absX * absX >> 127;\r\n\r\n          if (y & 0x2 != 0) {\r\n            absResult = absResult * absX >> 127;\r\n          }\r\n          absX = absX * absX >> 127;\r\n\r\n          if (y & 0x4 != 0) {\r\n            absResult = absResult * absX >> 127;\r\n          }\r\n          absX = absX * absX >> 127;\r\n\r\n          if (y & 0x8 != 0) {\r\n            absResult = absResult * absX >> 127;\r\n          }\r\n          absX = absX * absX >> 127;\r\n\r\n          y >>= 4;\r\n        }\r\n\r\n        absResult >>= 64;\r\n      } else {\r\n        uint256 absXShift = 63;\r\n        if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\r\n        if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\r\n        if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\r\n        if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\r\n        if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\r\n        if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\r\n\r\n        uint256 resultShift = 0;\r\n        while (y != 0) {\r\n          require (absXShift < 64);\r\n\r\n          if (y & 0x1 != 0) {\r\n            absResult = absResult * absX >> 127;\r\n            resultShift += absXShift;\r\n            if (absResult > 0x100000000000000000000000000000000) {\r\n              absResult >>= 1;\r\n              resultShift += 1;\r\n            }\r\n          }\r\n          absX = absX * absX >> 127;\r\n          absXShift <<= 1;\r\n          if (absX >= 0x100000000000000000000000000000000) {\r\n              absX >>= 1;\r\n              absXShift += 1;\r\n          }\r\n\r\n          y >>= 1;\r\n        }\r\n\r\n        require (resultShift < 64);\r\n        absResult >>= 64 - resultShift;\r\n      }\r\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function sqrt (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x >= 0);\r\n      return int128 (sqrtu (uint256 (int256 (x)) << 64));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate binary logarithm of x.  Revert if x <= 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function log_2 (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x > 0);\r\n\r\n      int256 msb = 0;\r\n      int256 xc = x;\r\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\r\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n      int256 result = msb - 64 << 64;\r\n      uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\r\n      for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\r\n        ux *= ux;\r\n        uint256 b = ux >> 255;\r\n        ux >>= 127 + b;\r\n        result += bit * int256 (b);\r\n      }\r\n\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate natural logarithm of x.  Revert if x <= 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function ln (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x > 0);\r\n\r\n      return int128 (int256 (\r\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate binary exponent of x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function exp_2 (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x < 0x400000000000000000); // Overflow\r\n\r\n      if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n      uint256 result = 0x80000000000000000000000000000000;\r\n\r\n      if (x & 0x8000000000000000 > 0)\r\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\r\n      if (x & 0x4000000000000000 > 0)\r\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\r\n      if (x & 0x2000000000000000 > 0)\r\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\r\n      if (x & 0x1000000000000000 > 0)\r\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\r\n      if (x & 0x800000000000000 > 0)\r\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\r\n      if (x & 0x400000000000000 > 0)\r\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\r\n      if (x & 0x200000000000000 > 0)\r\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\r\n      if (x & 0x100000000000000 > 0)\r\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\r\n      if (x & 0x80000000000000 > 0)\r\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\r\n      if (x & 0x40000000000000 > 0)\r\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\r\n      if (x & 0x20000000000000 > 0)\r\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\r\n      if (x & 0x10000000000000 > 0)\r\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\r\n      if (x & 0x8000000000000 > 0)\r\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\r\n      if (x & 0x4000000000000 > 0)\r\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\r\n      if (x & 0x2000000000000 > 0)\r\n        result = result * 0x1000162E525EE054754457D5995292026 >> 128;\r\n      if (x & 0x1000000000000 > 0)\r\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\r\n      if (x & 0x800000000000 > 0)\r\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\r\n      if (x & 0x400000000000 > 0)\r\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\r\n      if (x & 0x200000000000 > 0)\r\n        result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\r\n      if (x & 0x100000000000 > 0)\r\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\r\n      if (x & 0x80000000000 > 0)\r\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\r\n      if (x & 0x40000000000 > 0)\r\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\r\n      if (x & 0x20000000000 > 0)\r\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\r\n      if (x & 0x10000000000 > 0)\r\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\r\n      if (x & 0x8000000000 > 0)\r\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\r\n      if (x & 0x4000000000 > 0)\r\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\r\n      if (x & 0x2000000000 > 0)\r\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\r\n      if (x & 0x1000000000 > 0)\r\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\r\n      if (x & 0x800000000 > 0)\r\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\r\n      if (x & 0x400000000 > 0)\r\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\r\n      if (x & 0x200000000 > 0)\r\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\r\n      if (x & 0x100000000 > 0)\r\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\r\n      if (x & 0x80000000 > 0)\r\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\r\n      if (x & 0x40000000 > 0)\r\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\r\n      if (x & 0x20000000 > 0)\r\n        result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\r\n      if (x & 0x10000000 > 0)\r\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\r\n      if (x & 0x8000000 > 0)\r\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\r\n      if (x & 0x4000000 > 0)\r\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\r\n      if (x & 0x2000000 > 0)\r\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\r\n      if (x & 0x1000000 > 0)\r\n        result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\r\n      if (x & 0x800000 > 0)\r\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\r\n      if (x & 0x400000 > 0)\r\n        result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\r\n      if (x & 0x200000 > 0)\r\n        result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\r\n      if (x & 0x100000 > 0)\r\n        result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\r\n      if (x & 0x80000 > 0)\r\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\r\n      if (x & 0x40000 > 0)\r\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\r\n      if (x & 0x20000 > 0)\r\n        result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\r\n      if (x & 0x10000 > 0)\r\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\r\n      if (x & 0x8000 > 0)\r\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\r\n      if (x & 0x4000 > 0)\r\n        result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\r\n      if (x & 0x2000 > 0)\r\n        result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\r\n      if (x & 0x1000 > 0)\r\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\r\n      if (x & 0x800 > 0)\r\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\r\n      if (x & 0x400 > 0)\r\n        result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\r\n      if (x & 0x200 > 0)\r\n        result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\r\n      if (x & 0x100 > 0)\r\n        result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\r\n      if (x & 0x80 > 0)\r\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\r\n      if (x & 0x40 > 0)\r\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\r\n      if (x & 0x20 > 0)\r\n        result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\r\n      if (x & 0x10 > 0)\r\n        result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\r\n      if (x & 0x8 > 0)\r\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\r\n      if (x & 0x4 > 0)\r\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\r\n      if (x & 0x2 > 0)\r\n        result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\r\n      if (x & 0x1 > 0)\r\n        result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\r\n\r\n      result >>= uint256 (int256 (63 - (x >> 64)));\r\n      require (result <= uint256 (int256 (MAX_64x64)));\r\n\r\n      return int128 (int256 (result));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate natural exponent of x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function exp (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x < 0x400000000000000000); // Overflow\r\n\r\n      if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n      return exp_2 (\r\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return unsigned 64.64-bit fixed point number\r\n   */\r\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\r\n    unchecked {\r\n      require (y != 0);\r\n\r\n      uint256 result;\r\n\r\n      if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n        result = (x << 64) / y;\r\n      else {\r\n        uint256 msb = 192;\r\n        uint256 xc = x >> 192;\r\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n        result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\r\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n        uint256 hi = result * (y >> 128);\r\n        uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n        uint256 xh = x >> 192;\r\n        uint256 xl = x << 64;\r\n\r\n        if (xl < lo) xh -= 1;\r\n        xl -= lo; // We rely on overflow behavior here\r\n        lo = hi << 128;\r\n        if (xl < lo) xh -= 1;\r\n        xl -= lo; // We rely on overflow behavior here\r\n\r\n        assert (xh == hi >> 128);\r\n\r\n        result += xl / y;\r\n      }\r\n\r\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return uint128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\r\n   * number.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return unsigned 128-bit integer number\r\n   */\r\n  function sqrtu (uint256 x) private pure returns (uint128) {\r\n    unchecked {\r\n      if (x == 0) return 0;\r\n      else {\r\n        uint256 xx = x;\r\n        uint256 r = 1;\r\n        if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\r\n        if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\r\n        if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\r\n        if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\r\n        if (xx >= 0x100) { xx >>= 8; r <<= 4; }\r\n        if (xx >= 0x10) { xx >>= 4; r <<= 2; }\r\n        if (xx >= 0x8) { r <<= 1; }\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1; // Seven iterations should be enough\r\n        uint256 r1 = x / r;\r\n        return uint128 (r < r1 ? r : r1);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IHedgeOptions.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev å®ä¹æ¬§å¼æææ¥å£\r\ninterface IHedgeOptions {\r\n    \r\n    // // ä»£å¸éééç½®ç»æä½\r\n    // struct Config {\r\n    //     // æ³¢å¨ç\r\n    //     uint96 sigmaSQ;\r\n\r\n    //     // 64ä½äºè¿å¶ç²¾åº¦\r\n    //     // 0.3/365/86400 = 9.512937595129377E-09\r\n    //     // 175482725206\r\n    //     int128 miu;\r\n\r\n    //     // ææè¡ææ¶é´åå½åæ¶é´çæå°é´é\r\n    //     uint32 minPeriod;\r\n    // }\r\n\r\n    /// @dev ææä¿¡æ¯\r\n    struct OptionView {\r\n        uint index;\r\n        address tokenAddress;\r\n        uint strikePrice;\r\n        bool orientation;\r\n        uint exerciseBlock;\r\n        uint balance;\r\n    }\r\n    \r\n    /// @dev æ°ææäºä»¶\r\n    /// @param tokenAddress ç®æ ä»£å¸å°åï¼0è¡¨ç¤ºeth\r\n    /// @param strikePrice ç¨æ·è®¾ç½®çè¡æä»·æ ¼ï¼ç»ç®æ¶ç³»ç»ä¼æ ¹æ®æ çç©å½åä»·ä¸è¡æä»·æ¯è¾ï¼è®¡ç®ç¨æ·çäº\r\n    /// @param orientation çæ¶¨/çè·ä¸¤ä¸ªæ¹åãtrueï¼çæ¶¨ï¼falseï¼çè·\r\n    /// @param exerciseBlock å°è¾¾è¯¥æ¥æåç¨æ·æå¨è¿è¡è¡æï¼æ¥æå¨ç³»ç»ä¸­ä½¿ç¨åºåå·è¿è¡è®°å½\r\n    /// @param index ææç¼å·\r\n    event New(address tokenAddress, uint strikePrice, bool orientation, uint exerciseBlock, uint index);\r\n\r\n    /// @dev å¼ä»äºä»¶\r\n    /// @param index ææç¼å·\r\n    /// @param dcuAmount æ¯ä»çdcuæ°é\r\n    /// @param owner ææè\r\n    /// @param amount ä¹°å¥ä»½æ°\r\n    event Open(\r\n        uint index,\r\n        uint dcuAmount,\r\n        address owner,\r\n        uint amount\r\n    );\r\n\r\n    /// @dev è¡æäºä»¶\r\n    /// @param index ææç¼å·\r\n    /// @param amount ç»ç®çææåæ°\r\n    /// @param owner ææè\r\n    /// @param gain èµ¢å¾çdcuæ°é\r\n    event Exercise(uint index, uint amount, address owner, uint gain);\r\n    \r\n    /// @dev ååºäºä»¶\r\n    /// @param index ææç¼å·\r\n    /// @param amount ååºä»½æ°\r\n    /// @param owner ææè\r\n    /// @param dcuAmount å¾å°çdcuæ°é\r\n    event Sell(uint index, uint amount, address owner, uint dcuAmount);\r\n    \r\n    // /// @dev ä¿®æ¹æå®ä»£å¸ééçéç½®\r\n    // /// @param tokenAddress ç®æ ä»£å¸å°å\r\n    // /// @param config éç½®å¯¹è±¡\r\n    // function setConfig(address tokenAddress, Config calldata config) external;\r\n\r\n    // /// @dev è·åæå®ä»£å¸ééçéç½®\r\n    // /// @param tokenAddress ç®æ ä»£å¸å°å\r\n    // /// @return éç½®å¯¹è±¡\r\n    // function getConfig(address tokenAddress) external view returns (Config memory);\r\n    \r\n    /// @dev è¿åæå®ææçä½é¢\r\n    /// @param index ç®æ ææç´¢å¼å·\r\n    /// @param addr ç®æ å°å\r\n    function balanceOf(uint index, address addr) external view returns (uint);\r\n\r\n    /// @dev æ¥æ¾ç®æ è´¦æ·çææï¼ååºï¼\r\n    /// @param start ä»ç»å®çåçº¦å°åå¯¹åºçç´¢å¼ååæ¥è¯¢ï¼ä¸åå«startå¯¹åºçè®°å½ï¼\r\n    /// @param count æå¤è¿åçè®°å½æ¡æ°\r\n    /// @param maxFindCount æå¤æ¥æ¾maxFindCountè®°å½\r\n    /// @param owner ç®æ è´¦æ·å°å\r\n    /// @return optionArray ææä¿¡æ¯åè¡¨\r\n    function find(\r\n        uint start, \r\n        uint count, \r\n        uint maxFindCount, \r\n        address owner\r\n    ) external view returns (OptionView[] memory optionArray);\r\n\r\n    /// @dev ååºåå²ææä¿¡æ¯\r\n    /// @param offset Skip previous (offset) records\r\n    /// @param count Return (count) records\r\n    /// @param order Order. 0 reverse order, non-0 positive order\r\n    /// @return optionArray ææä¿¡æ¯åè¡¨\r\n    function list(uint offset, uint count, uint order) external view returns (OptionView[] memory optionArray);\r\n    \r\n    /// @dev è·åå·²ç»å¼éçæ¬§å¼ææä»£å¸æ°é\r\n    /// @return å·²ç»å¼éçæ¬§å¼ææä»£å¸æ°é\r\n    function getOptionCount() external view returns (uint);\r\n\r\n    /// @dev è·åææä¿¡æ¯\r\n    /// @param tokenAddress ç®æ ä»£å¸å°åï¼0è¡¨ç¤ºeth\r\n    /// @param strikePrice ç¨æ·è®¾ç½®çè¡æä»·æ ¼ï¼ç»ç®æ¶ç³»ç»ä¼æ ¹æ®æ çç©å½åä»·ä¸è¡æä»·æ¯è¾ï¼è®¡ç®ç¨æ·çäº\r\n    /// @param orientation çæ¶¨/çè·ä¸¤ä¸ªæ¹åãtrueï¼çæ¶¨ï¼falseï¼çè·\r\n    /// @param exerciseBlock å°è¾¾è¯¥æ¥æåç¨æ·æå¨è¿è¡è¡æï¼æ¥æå¨ç³»ç»ä¸­ä½¿ç¨åºåå·è¿è¡è®°å½\r\n    /// @return ææä¿¡æ¯\r\n    function getOptionInfo(\r\n        address tokenAddress, \r\n        uint strikePrice, \r\n        bool orientation, \r\n        uint exerciseBlock\r\n    ) external view returns (OptionView memory);\r\n\r\n    /// @dev é¢ä¼°å¼ä»å¯ä»¥ä¹°å°çææå¸æ°é\r\n    /// @param tokenAddress ç®æ ä»£å¸å°åï¼0è¡¨ç¤ºeth\r\n    /// @param oraclePrice å½åé¢è¨æºä»·æ ¼ä»·\r\n    /// @param strikePrice ç¨æ·è®¾ç½®çè¡æä»·æ ¼ï¼ç»ç®æ¶ç³»ç»ä¼æ ¹æ®æ çç©å½åä»·ä¸è¡æä»·æ¯è¾ï¼è®¡ç®ç¨æ·çäº\r\n    /// @param orientation çæ¶¨/çè·ä¸¤ä¸ªæ¹åãtrueï¼çæ¶¨ï¼falseï¼çè·\r\n    /// @param exerciseBlock å°è¾¾è¯¥æ¥æåç¨æ·æå¨è¿è¡è¡æï¼æ¥æå¨ç³»ç»ä¸­ä½¿ç¨åºåå·è¿è¡è®°å½\r\n    /// @param dcuAmount æ¯ä»çdcuæ°é\r\n    /// @return amount é¢ä¼°å¯ä»¥è·å¾çææå¸æ°é\r\n    function estimate(\r\n        address tokenAddress,\r\n        uint oraclePrice,\r\n        uint strikePrice,\r\n        bool orientation,\r\n        uint exerciseBlock,\r\n        uint dcuAmount\r\n    ) external view returns (uint amount);\r\n\r\n    /// @dev å¼ä»\r\n    /// @param tokenAddress ç®æ ä»£å¸å°åï¼0è¡¨ç¤ºeth\r\n    /// @param strikePrice ç¨æ·è®¾ç½®çè¡æä»·æ ¼ï¼ç»ç®æ¶ç³»ç»ä¼æ ¹æ®æ çç©å½åä»·ä¸è¡æä»·æ¯è¾ï¼è®¡ç®ç¨æ·çäº\r\n    /// @param orientation çæ¶¨/çè·ä¸¤ä¸ªæ¹åãtrueï¼çæ¶¨ï¼falseï¼çè·\r\n    /// @param exerciseBlock å°è¾¾è¯¥æ¥æåç¨æ·æå¨è¿è¡è¡æï¼æ¥æå¨ç³»ç»ä¸­ä½¿ç¨åºåå·è¿è¡è®°å½\r\n    /// @param dcuAmount æ¯ä»çdcuæ°é\r\n    function open(\r\n        address tokenAddress,\r\n        uint strikePrice,\r\n        bool orientation,\r\n        uint exerciseBlock,\r\n        uint dcuAmount\r\n    ) external payable;\r\n\r\n    /// @dev è¡æ\r\n    /// @param index ææç¼å·\r\n    /// @param amount ç»ç®çææåæ°\r\n    function exercise(uint index, uint amount) external payable;\r\n\r\n    /// @dev ååºææ\r\n    /// @param index ææç¼å·\r\n    /// @param amount ååºçææåæ°\r\n    function sell(uint index, uint amount) external payable;\r\n\r\n    /// @dev è®¡ç®ææä»·æ ¼\r\n    /// @param tokenAddress ç®æ ä»£å¸å°åï¼0è¡¨ç¤ºeth\r\n    /// @param oraclePrice å½åé¢è¨æºä»·æ ¼ä»·\r\n    /// @param strikePrice ç¨æ·è®¾ç½®çè¡æä»·æ ¼ï¼ç»ç®æ¶ç³»ç»ä¼æ ¹æ®æ çç©å½åä»·ä¸è¡æä»·æ¯è¾ï¼è®¡ç®ç¨æ·çäº\r\n    /// @param orientation çæ¶¨/çè·ä¸¤ä¸ªæ¹åãtrueï¼çæ¶¨ï¼falseï¼çè·\r\n    /// @param exerciseBlock å°è¾¾è¯¥æ¥æåç¨æ·æå¨è¿è¡è¡æï¼æ¥æå¨ç³»ç»ä¸­ä½¿ç¨åºåå·è¿è¡è®°å½\r\n    /// @return v ææä»·æ ¼ï¼éè¦é¤ä»¥18446744073709551616000000\r\n    function calcV(\r\n        address tokenAddress,\r\n        uint oraclePrice,\r\n        uint strikePrice,\r\n        bool orientation,\r\n        uint exerciseBlock\r\n    ) external view returns (uint v);\r\n}\r\n\r\n\r\n// File contracts/interfaces/INestPriceFacade.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev This interface defines the methods for price call entry\r\ninterface INestPriceFacade {\r\n    \r\n    /// @dev Find the price at block number\r\n    /// @param tokenAddress Destination token address\r\n    /// @param height Destination block number\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    /// and the excess fees will be returned through this address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function findPrice(\r\n        address tokenAddress, \r\n        uint height, \r\n        address paybackAddress\r\n    ) external payable returns (uint blockNumber, uint price);\r\n\r\n    /// @dev Get the latest trigger price\r\n    /// @param tokenAddress Destination token address\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    /// and the excess fees will be returned through this address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function triggeredPrice(\r\n        address tokenAddress, \r\n        address paybackAddress\r\n    ) external payable returns (uint blockNumber, uint price);\r\n\r\n    // /// @dev Price call entry configuration structure\r\n    // struct Config {\r\n\r\n    //     // Single query feeï¼0.0001 ether, DIMI_ETHER). 100\r\n    //     uint16 singleFee;\r\n\r\n    //     // Double query feeï¼0.0001 ether, DIMI_ETHER). 100\r\n    //     uint16 doubleFee;\r\n\r\n    //     // The normal state flag of the call address. 0\r\n    //     uint8 normalFlag;\r\n    // }\r\n\r\n    // /// @dev Modify configuration\r\n    // /// @param config Configuration object\r\n    // function setConfig(Config calldata config) external;\r\n\r\n    // /// @dev Get configuration\r\n    // /// @return Configuration object\r\n    // function getConfig() external view returns (Config memory);\r\n\r\n    // /// @dev Set the address flag. Only the address flag equals to config.normalFlag can the price be called\r\n    // /// @param addr Destination address\r\n    // /// @param flag Address flag\r\n    // function setAddressFlag(address addr, uint flag) external;\r\n\r\n    // /// @dev Get the flag. Only the address flag equals to config.normalFlag can the price be called\r\n    // /// @param addr Destination address\r\n    // /// @return Address flag\r\n    // function getAddressFlag(address addr) external view returns(uint);\r\n\r\n    // /// @dev Set INestQuery implementation contract address for token\r\n    // /// @param tokenAddress Destination token address\r\n    // /// @param nestQueryAddress INestQuery implementation contract address, 0 means delete\r\n    // function setNestQuery(address tokenAddress, address nestQueryAddress) external;\r\n\r\n    // /// @dev Get INestQuery implementation contract address for token\r\n    // /// @param tokenAddress Destination token address\r\n    // /// @return INestQuery implementation contract address, 0 means use default\r\n    // function getNestQuery(address tokenAddress) external view returns (address);\r\n\r\n    // /// @dev Get cached fee in fee channel\r\n    // /// @param tokenAddress Destination token address\r\n    // /// @return Cached fee in fee channel\r\n    // function getTokenFee(address tokenAddress) external view returns (uint);\r\n\r\n    // /// @dev Settle fee for charge fee channel\r\n    // /// @param tokenAddress tokenAddress of charge fee channel\r\n    // function settle(address tokenAddress) external;\r\n    \r\n    // /// @dev Get the latest trigger price\r\n    // /// @param tokenAddress Destination token address\r\n    // /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    // /// and the excess fees will be returned through this address\r\n    // /// @return blockNumber The block number of price\r\n    // /// @return price The token price. (1eth equivalent to (price) token)\r\n    // function triggeredPrice(\r\n    //     address tokenAddress, \r\n    //     address paybackAddress\r\n    // ) external payable returns (uint blockNumber, uint price);\r\n\r\n    /// @dev Get the full information of latest trigger price\r\n    /// @param tokenAddress Destination token address\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    /// and the excess fees will be returned through this address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return avgPrice Average price\r\n    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation \r\n    /// assumes that the volatility cannot exceed 1. Correspondingly, when the return value is equal to \r\n    /// 999999999999996447, it means that the volatility has exceeded the range that can be expressed\r\n    function triggeredPriceInfo(\r\n        address tokenAddress, \r\n        address paybackAddress\r\n    ) external payable returns (uint blockNumber, uint price, uint avgPrice, uint sigmaSQ);\r\n\r\n    // /// @dev Find the price at block number\r\n    // /// @param tokenAddress Destination token address\r\n    // /// @param height Destination block number\r\n    // /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    // /// and the excess fees will be returned through this address\r\n    // /// @return blockNumber The block number of price\r\n    // /// @return price The token price. (1eth equivalent to (price) token)\r\n    // function findPrice(\r\n    //     address tokenAddress, \r\n    //     uint height, \r\n    //     address paybackAddress\r\n    // ) external payable returns (uint blockNumber, uint price);\r\n\r\n    /// @dev Get the latest effective price\r\n    /// @param tokenAddress Destination token address\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    /// and the excess fees will be returned through this address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function latestPrice(\r\n        address tokenAddress, \r\n        address paybackAddress\r\n    ) external payable returns (uint blockNumber, uint price);\r\n\r\n    /// @dev Get the last (num) effective price\r\n    /// @param tokenAddress Destination token address\r\n    /// @param count The number of prices that want to return\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    /// and the excess fees will be returned through this address\r\n    /// @return An array which length is num * 2, each two element expresses one price like blockNumberï½price\r\n    function lastPriceList(\r\n        address tokenAddress, \r\n        uint count, \r\n        address paybackAddress\r\n    ) external payable returns (uint[] memory);\r\n\r\n    // /// @dev Returns the results of latestPrice() and triggeredPriceInfo()\r\n    // /// @param tokenAddress Destination token address\r\n    // /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    // /// and the excess fees will be returned through this address\r\n    // /// @return latestPriceBlockNumber The block number of latest price\r\n    // /// @return latestPriceValue The token latest price. (1eth equivalent to (price) token)\r\n    // /// @return triggeredPriceBlockNumber The block number of triggered price\r\n    // /// @return triggeredPriceValue The token triggered price. (1eth equivalent to (price) token)\r\n    // /// @return triggeredAvgPrice Average price\r\n    // /// @return triggeredSigmaSQ The square of the volatility (18 decimal places). The current implementation \r\n    // /// assumes that the volatility cannot exceed 1. Correspondingly, when the return value is equal to \r\n    // /// 999999999999996447, it means that the volatility has exceeded the range that can be expressed\r\n    // function latestPriceAndTriggeredPriceInfo(address tokenAddress, address paybackAddress) \r\n    // external \r\n    // payable \r\n    // returns (\r\n    //     uint latestPriceBlockNumber, \r\n    //     uint latestPriceValue,\r\n    //     uint triggeredPriceBlockNumber,\r\n    //     uint triggeredPriceValue,\r\n    //     uint triggeredAvgPrice,\r\n    //     uint triggeredSigmaSQ\r\n    // );\r\n\r\n    /// @dev Returns lastPriceList and triggered price info\r\n    /// @param tokenAddress Destination token address\r\n    /// @param count The number of prices that want to return\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    /// and the excess fees will be returned through this address\r\n    /// @return prices An array which length is num * 2, each two element expresses one price like blockNumberï½price\r\n    /// @return triggeredPriceBlockNumber The block number of triggered price\r\n    /// @return triggeredPriceValue The token triggered price. (1eth equivalent to (price) token)\r\n    /// @return triggeredAvgPrice Average price\r\n    /// @return triggeredSigmaSQ The square of the volatility (18 decimal places). The current implementation \r\n    /// assumes that the volatility cannot exceed 1. Correspondingly, when the return value is equal to \r\n    /// 999999999999996447, it means that the volatility has exceeded the range that can be expressed\r\n    function lastPriceListAndTriggeredPriceInfo(\r\n        address tokenAddress, \r\n        uint count, \r\n        address paybackAddress\r\n    ) external payable \r\n    returns (\r\n        uint[] memory prices,\r\n        uint triggeredPriceBlockNumber,\r\n        uint triggeredPriceValue,\r\n        uint triggeredAvgPrice,\r\n        uint triggeredSigmaSQ\r\n    );\r\n\r\n    // /// @dev Get the latest trigger price. (token and ntoken)\r\n    // /// @param tokenAddress Destination token address\r\n    // /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    // /// and the excess fees will be returned through this address\r\n    // /// @return blockNumber The block number of price\r\n    // /// @return price The token price. (1eth equivalent to (price) token)\r\n    // /// @return ntokenBlockNumber The block number of ntoken price\r\n    // /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    // function triggeredPrice2(\r\n    //     address tokenAddress, \r\n    //     address paybackAddress\r\n    // ) external payable returns (\r\n    //     uint blockNumber, \r\n    //     uint price, \r\n    //     uint ntokenBlockNumber, \r\n    //     uint ntokenPrice\r\n    // );\r\n\r\n    // /// @dev Get the full information of latest trigger price. (token and ntoken)\r\n    // /// @param tokenAddress Destination token address\r\n    // /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    // /// and the excess fees will be returned through this address\r\n    // /// @return blockNumber The block number of price\r\n    // /// @return price The token price. (1eth equivalent to (price) token)\r\n    // /// @return avgPrice Average price\r\n    // /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    // /// the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447, \r\n    // /// it means that the volatility has exceeded the range that can be expressed\r\n    // /// @return ntokenBlockNumber The block number of ntoken price\r\n    // /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    // /// @return ntokenAvgPrice Average price of ntoken\r\n    // /// @return ntokenSigmaSQ The square of the volatility (18 decimal places). The current implementation \r\n    // /// assumes that the volatility cannot exceed 1. Correspondingly, when the return value is equal to \r\n    // /// 999999999999996447, it means that the volatility has exceeded the range that can be expressed\r\n    // function triggeredPriceInfo2(\r\n    //     address tokenAddress, \r\n    //     address paybackAddress\r\n    // ) external payable returns (\r\n    //     uint blockNumber, \r\n    //     uint price, \r\n    //     uint avgPrice, \r\n    //     uint sigmaSQ, \r\n    //     uint ntokenBlockNumber, \r\n    //     uint ntokenPrice, \r\n    //     uint ntokenAvgPrice, \r\n    //     uint ntokenSigmaSQ\r\n    // );\r\n\r\n    // /// @dev Get the latest effective price. (token and ntoken)\r\n    // /// @param tokenAddress Destination token address\r\n    // /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, \r\n    // /// and the excess fees will be returned through this address\r\n    // /// @return blockNumber The block number of price\r\n    // /// @return price The token price. (1eth equivalent to (price) token)\r\n    // /// @return ntokenBlockNumber The block number of ntoken price\r\n    // /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    // function latestPrice2(\r\n    //     address tokenAddress, \r\n    //     address paybackAddress\r\n    // ) external payable returns (\r\n    //     uint blockNumber, \r\n    //     uint price, \r\n    //     uint ntokenBlockNumber, \r\n    //     uint ntokenPrice\r\n    // );\r\n}\r\n\r\n\r\n// File contracts/interfaces/IHedgeMapping.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev The interface defines methods for Hedge builtin contract address mapping\r\ninterface IHedgeMapping {\r\n\r\n    /// @dev Set the built-in contract address of the system\r\n    /// @param dcuToken Address of dcu token contract\r\n    /// @param hedgeDAO IHedgeDAO implementation contract address\r\n    /// @param hedgeOptions IHedgeOptions implementation contract address\r\n    /// @param hedgeFutures IHedgeFutures implementation contract address\r\n    /// @param hedgeVaultForStaking IHedgeVaultForStaking implementation contract address\r\n    /// @param nestPriceFacade INestPriceFacade implementation contract address\r\n    function setBuiltinAddress(\r\n        address dcuToken,\r\n        address hedgeDAO,\r\n        address hedgeOptions,\r\n        address hedgeFutures,\r\n        address hedgeVaultForStaking,\r\n        address nestPriceFacade\r\n    ) external;\r\n\r\n    /// @dev Get the built-in contract address of the system\r\n    /// @return dcuToken Address of dcu token contract\r\n    /// @return hedgeDAO IHedgeDAO implementation contract address\r\n    /// @return hedgeOptions IHedgeOptions implementation contract address\r\n    /// @return hedgeFutures IHedgeFutures implementation contract address\r\n    /// @return hedgeVaultForStaking IHedgeVaultForStaking implementation contract address\r\n    /// @return nestPriceFacade INestPriceFacade implementation contract address\r\n    function getBuiltinAddress() external view returns (\r\n        address dcuToken,\r\n        address hedgeDAO,\r\n        address hedgeOptions,\r\n        address hedgeFutures,\r\n        address hedgeVaultForStaking,\r\n        address nestPriceFacade\r\n    );\r\n\r\n    /// @dev Get address of dcu token contract\r\n    /// @return Address of dcu token contract\r\n    function getDCUTokenAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeDAO implementation contract address\r\n    /// @return IHedgeDAO implementation contract address\r\n    function getHedgeDAOAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeOptions implementation contract address\r\n    /// @return IHedgeOptions implementation contract address\r\n    function getHedgeOptionsAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeFutures implementation contract address\r\n    /// @return IHedgeFutures implementation contract address\r\n    function getHedgeFuturesAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeVaultForStaking implementation contract address\r\n    /// @return IHedgeVaultForStaking implementation contract address\r\n    function getHedgeVaultForStakingAddress() external view returns (address);\r\n\r\n    /// @dev Get INestPriceFacade implementation contract address\r\n    /// @return INestPriceFacade implementation contract address\r\n    function getNestPriceFacade() external view returns (address);\r\n\r\n    /// @dev Registered address. The address registered here is the address accepted by Hedge system\r\n    /// @param key The key\r\n    /// @param addr Destination address. 0 means to delete the registration information\r\n    function registerAddress(string calldata key, address addr) external;\r\n\r\n    /// @dev Get registered address\r\n    /// @param key The key\r\n    /// @return Destination address. 0 means empty\r\n    function checkAddress(string calldata key) external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IHedgeGovernance.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev This interface defines the governance methods\r\ninterface IHedgeGovernance is IHedgeMapping {\r\n\r\n    /// @dev Set governance authority\r\n    /// @param addr Destination address\r\n    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function setGovernance(address addr, uint flag) external;\r\n\r\n    /// @dev Get governance rights\r\n    /// @param addr Destination address\r\n    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function getGovernance(address addr) external view returns (uint);\r\n\r\n    /// @dev Check whether the target address has governance rights for the given target\r\n    /// @param addr Destination address\r\n    /// @param flag Permission weight. The permission of the target address must be greater than this weight \r\n    /// to pass the check\r\n    /// @return True indicates permission\r\n    function checkGovernance(address addr, uint flag) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/libs/TransferHelper.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IHedgeDAO.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev This interface defines the DAO methods\r\ninterface IHedgeDAO {\r\n\r\n    /// @dev Application Flag Changed event\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    event ApplicationChanged(address addr, uint flag);\r\n    \r\n    /// @dev Set DAO application\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function setApplication(address addr, uint flag) external;\r\n\r\n    /// @dev Check DAO application flag\r\n    /// @param addr DAO application contract address\r\n    /// @return Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function checkApplication(address addr) external view returns (uint);\r\n\r\n    /// @dev Add reward\r\n    /// @param pool Destination pool\r\n    function addETHReward(address pool) external payable;\r\n\r\n    /// @dev The function returns eth rewards of specified pool\r\n    /// @param pool Destination pool\r\n    function totalETHRewards(address pool) external view returns (uint);\r\n\r\n    /// @dev Settlement\r\n    /// @param pool Destination pool. Indicates which pool to pay with\r\n    /// @param tokenAddress Token address of receiving funds (0 means ETH)\r\n    /// @param to Address to receive\r\n    /// @param value Amount to receive\r\n    function settle(address pool, address tokenAddress, address to, uint value) external payable;\r\n}\r\n\r\n\r\n// File contracts/HedgeBase.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev Base contract of Hedge\r\ncontract HedgeBase {\r\n\r\n    /// @dev IHedgeGovernance implementation contract address\r\n    address public _governance;\r\n\r\n    /// @dev To support open-zeppelin/upgrades\r\n    /// @param governance IHedgeGovernance implementation contract address\r\n    function initialize(address governance) public virtual {\r\n        require(_governance == address(0), \"Hedge:!initialize\");\r\n        _governance = governance;\r\n    }\r\n\r\n    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \r\n    ///      super.update(newGovernance) when overriding, and override method without onlyGovernance\r\n    /// @param newGovernance IHedgeGovernance implementation contract address\r\n    function update(address newGovernance) public virtual {\r\n\r\n        address governance = _governance;\r\n        require(governance == msg.sender || IHedgeGovernance(governance).checkGovernance(msg.sender, 0), \"Hedge:!gov\");\r\n        _governance = newGovernance;\r\n    }\r\n\r\n    //---------modifier------------\r\n\r\n    modifier onlyGovernance() {\r\n        require(IHedgeGovernance(_governance).checkGovernance(msg.sender, 0), \"Hedge:!gov\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/HedgeFrequentlyUsed.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev Base contract of Hedge\r\ncontract HedgeFrequentlyUsed is HedgeBase {\r\n\r\n    // Address of DCU contract\r\n    address constant DCU_TOKEN_ADDRESS = 0xf56c6eCE0C0d6Fbb9A53282C0DF71dBFaFA933eF;\r\n\r\n    // Address of NestPriceFacade contract\r\n    address constant NEST_PRICE_FACADE_ADDRESS = 0xB5D2890c061c321A5B6A4a4254bb1522425BAF0A;\r\n    \r\n    // USDTä»£å¸å°å\r\n    address constant USDT_TOKEN_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n\r\n    // USDTä»£å¸çåºæ°\r\n    uint constant USDT_BASE = 1000000;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.2.0\r\n\r\n// MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\r\n\r\n// MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.2.0\r\n\r\n// MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File contracts/DCU.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev DCUä»£å¸\r\ncontract DCU is HedgeBase, ERC20(\"Decentralized Currency Unit\", \"DCU\") {\r\n\r\n    // ä¿å­æç¿æéå°å\r\n    mapping(address=>uint) _minters;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    modifier onlyMinter {\r\n        require(_minters[msg.sender] == 1, \"DCU:not minter\");\r\n        _;\r\n    }\r\n\r\n    /// @dev è®¾ç½®æç¿æé\r\n    /// @param account ç®æ è´¦å·\r\n    /// @param flag æç¿æéæ è®°ï¼åªæ1è¡¨ç¤ºå¯ä»¥æç¿\r\n    function setMinter(address account, uint flag) external onlyGovernance {\r\n        _minters[account] = flag;\r\n    }\r\n\r\n    /// @dev æ£æ¥æç¿æé\r\n    /// @param account ç®æ è´¦å·\r\n    /// @return flag æç¿æéæ è®°ï¼åªæ1è¡¨ç¤ºå¯ä»¥æç¿\r\n    function checkMinter(address account) external view returns (uint) {\r\n        return _minters[account];\r\n    }\r\n\r\n    /// @dev é¸å¸\r\n    /// @param to æ¥åå°å\r\n    /// @param value é¸å¸æ°é\r\n    function mint(address to, uint value) external onlyMinter {\r\n        _mint(to, value);\r\n    }\r\n\r\n    /// @dev éæ¯\r\n    /// @param from ç®æ å°å\r\n    /// @param value éæ¯æ°é\r\n    function burn(address from, uint value) external onlyMinter {\r\n        _burn(from, value);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/HedgeOptions.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev æ¬§å¼ææ\r\ncontract HedgeOptions is HedgeFrequentlyUsed, IHedgeOptions {\r\n\r\n    /// @dev ææç»æ\r\n    struct Option {\r\n        address tokenAddress;\r\n        uint56 strikePrice;\r\n        bool orientation;\r\n        uint32 exerciseBlock;\r\n        \r\n        //uint totalSupply;\r\n        mapping(address=>uint) balances;\r\n    }\r\n\r\n    // åºåæ¶é´\r\n    uint constant BLOCK_TIME = 14;\r\n\r\n    // 64ä½äºè¿å¶ç²¾åº¦ç1\r\n    int128 constant ONE = 0x10000000000000000;\r\n\r\n    // 64ä½äºè¿å¶ç²¾åº¦ç50000\r\n    uint constant V50000 = 0x0C3500000000000000000;\r\n\r\n    // ææååºä»·å¼æ¯ä¾ï¼ä¸åå¶ã9750\r\n    uint constant SELL_RATE = 9500;\r\n\r\n    // Ï-usdt\t0.00021368\t\tæ³¢å¨çï¼æ¯ä¸ªå¸ç§ç¬ç«è®¾ç½®ï¼å¹´å120%ï¼\r\n    uint constant SIGMA_SQ = 45659142400;\r\n\r\n    // Î¼-usdt-long çæ¶¨æ¼ç§»ç³»æ°ï¼æ¯å¤©0.03%\r\n    uint constant MIU_LONG = 64051194700;\r\n\r\n    // Î¼-usdt-short çè·æ¼ç§»ç³»æ°ï¼0\r\n    uint constant MIU_SHORT= 0;\r\n\r\n    // ææè¡ææå°é´é\t180000\tåºåæ°\tè¡ææ¶é´åå½åæ¶é´æå°é´éåºåæ°ï¼ç»ä¸è®¾ç½®\r\n    uint constant MIN_PERIOD = 180000;\r\n\r\n    // ææä»£å¸æ å°\r\n    mapping(uint=>uint) _optionMapping;\r\n\r\n    // æ ç¨ï¼å ä½\r\n    // ç¼å­ä»£å¸çåºæ°å¼\r\n    mapping(address=>uint) _bases;\r\n\r\n    // ææä»£å¸æ°ç»\r\n    Option[] _options;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    /// @dev To support open-zeppelin/upgrades\r\n    /// @param governance IHedgeGovernance implementation contract address\r\n    function initialize(address governance) public override {\r\n        super.initialize(governance);\r\n        _options.push();\r\n    }\r\n\r\n    /// @dev è¿åæå®ææçä½é¢\r\n    /// @param index ç®æ ææç´¢å¼å·\r\n    /// @param addr ç®æ å°å\r\n    function balanceOf(uint index, address addr) external view override returns (uint) {\r\n        return _options[index].balances[addr];\r\n    }\r\n\r\n    /// @dev æ¥æ¾ç®æ è´¦æ·çææï¼ååºï¼\r\n    /// @param start ä»ç»å®çåçº¦å°åå¯¹åºçç´¢å¼ååæ¥è¯¢ï¼ä¸åå«startå¯¹åºçè®°å½ï¼\r\n    /// @param count æå¤è¿åçè®°å½æ¡æ°\r\n    /// @param maxFindCount æå¤æ¥æ¾maxFindCountè®°å½\r\n    /// @param owner ç®æ è´¦æ·å°å\r\n    /// @return optionArray ææä¿¡æ¯åè¡¨\r\n    function find(\r\n        uint start, \r\n        uint count, \r\n        uint maxFindCount, \r\n        address owner\r\n    ) external view override returns (OptionView[] memory optionArray) {\r\n        \r\n        optionArray = new OptionView[](count);\r\n        \r\n        // è®¡ç®æ¥æ¾åºé´iåend\r\n        Option[] storage options = _options;\r\n        uint i = options.length;\r\n        uint end = 0;\r\n        if (start > 0) {\r\n            i = start;\r\n        }\r\n        if (i > maxFindCount) {\r\n            end = i - maxFindCount;\r\n        }\r\n        \r\n        // å¾ªç¯æ¥æ¾ï¼å°ç¬¦åæ¡ä»¶çè®°å½åå¥ç¼å²åº\r\n        for (uint index = 0; index < count && i > end;) {\r\n            Option storage option = options[--i];\r\n            if (option.balances[owner] > 0) {\r\n                optionArray[index++] = _toOptionView(option, i, owner);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev ååºåå²ææä¿¡æ¯\r\n    /// @param offset Skip previous (offset) records\r\n    /// @param count Return (count) records\r\n    /// @param order Order. 0 reverse order, non-0 positive order\r\n    /// @return optionArray ææä¿¡æ¯åè¡¨\r\n    function list(\r\n        uint offset, \r\n        uint count, \r\n        uint order\r\n    ) external view override returns (OptionView[] memory optionArray) {\r\n\r\n        // å è½½ä»£å¸æ°ç»\r\n        Option[] storage options = _options;\r\n        // åå»ºç»ææ°ç»\r\n        optionArray = new OptionView[](count);\r\n        uint length = options.length;\r\n        uint i = 0;\r\n\r\n        // ååº\r\n        if (order == 0) {\r\n            uint index = length - offset;\r\n            uint end = index > count ? index - count : 0;\r\n            while (index > end) {\r\n                Option storage option = options[--index];\r\n                optionArray[i++] = _toOptionView(option, index, msg.sender);\r\n            }\r\n        } \r\n        // æ­£åº\r\n        else {\r\n            uint index = offset;\r\n            uint end = index + count;\r\n            if (end > length) {\r\n                end = length;\r\n            }\r\n            while (index < end) {\r\n                optionArray[i++] = _toOptionView(options[index], index, msg.sender);\r\n                ++index;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev è·åå·²ç»å¼éçæ¬§å¼ææä»£å¸æ°é\r\n    /// @return å·²ç»å¼éçæ¬§å¼ææä»£å¸æ°é\r\n    function getOptionCount() external view override returns (uint) {\r\n        return _options.length;\r\n    }\r\n\r\n    /// @dev è·åææä¿¡æ¯\r\n    /// @param tokenAddress ç®æ ä»£å¸å°åï¼0è¡¨ç¤ºeth\r\n    /// @param strikePrice ç¨æ·è®¾ç½®çè¡æä»·æ ¼ï¼ç»ç®æ¶ç³»ç»ä¼æ ¹æ®æ çç©å½åä»·ä¸è¡æä»·æ¯è¾ï¼è®¡ç®ç¨æ·çäº\r\n    /// @param orientation çæ¶¨/çè·ä¸¤ä¸ªæ¹åãtrueï¼çæ¶¨ï¼falseï¼çè·\r\n    /// @param exerciseBlock å°è¾¾è¯¥æ¥æåç¨æ·æå¨è¿è¡è¡æï¼æ¥æå¨ç³»ç»ä¸­ä½¿ç¨åºåå·è¿è¡è®°å½\r\n    /// @return ææä¿¡æ¯\r\n    function getOptionInfo(\r\n        address tokenAddress, \r\n        uint strikePrice, \r\n        bool orientation, \r\n        uint exerciseBlock\r\n    ) external view override returns (OptionView memory) {        \r\n        uint index = _optionMapping[_getKey(tokenAddress, strikePrice, orientation, exerciseBlock)];\r\n        return _toOptionView(_options[index], index, msg.sender);\r\n    }\r\n\r\n    /// @dev å¼ä»\r\n    /// @param tokenAddress ç®æ ä»£å¸å°åï¼0è¡¨ç¤ºeth\r\n    /// @param strikePrice ç¨æ·è®¾ç½®çè¡æä»·æ ¼ï¼ç»ç®æ¶ç³»ç»ä¼æ ¹æ®æ çç©å½åä»·ä¸è¡æä»·æ¯è¾ï¼è®¡ç®ç¨æ·çäº\r\n    /// @param orientation çæ¶¨/çè·ä¸¤ä¸ªæ¹åãtrueï¼çæ¶¨ï¼falseï¼çè·\r\n    /// @param exerciseBlock å°è¾¾è¯¥æ¥æåç¨æ·æå¨è¿è¡è¡æï¼æ¥æå¨ç³»ç»ä¸­ä½¿ç¨åºåå·è¿è¡è®°å½\r\n    /// @param dcuAmount æ¯ä»çdcuæ°é\r\n    function open(\r\n        address tokenAddress,\r\n        uint strikePrice,\r\n        bool orientation,\r\n        uint exerciseBlock,\r\n        uint dcuAmount\r\n    ) external payable override {\r\n\r\n        // 1. è°ç¨é¢è¨æºè·åä»·æ ¼\r\n        uint oraclePrice = _queryPrice(msg.value, msg.sender);\r\n\r\n        // 2. è®¡ç®å¯ä»¥ä¹°å°çææä»½æ°\r\n        uint amount = estimate(tokenAddress, oraclePrice, strikePrice, orientation, exerciseBlock, dcuAmount);\r\n\r\n        // 3. è·åæåå»ºææä»£å¸\r\n        uint key = _getKey(tokenAddress, strikePrice, orientation, exerciseBlock);\r\n        uint optionIndex = _optionMapping[key];\r\n        Option storage option = _options[optionIndex];\r\n        if (optionIndex == 0) {\r\n            \r\n            optionIndex = _options.length;\r\n            option = _options.push();\r\n            option.tokenAddress = tokenAddress;\r\n            option.strikePrice = _encodeFloat(strikePrice);\r\n            option.orientation = orientation;\r\n            option.exerciseBlock = uint32(exerciseBlock);\r\n\r\n            // å°ææä»£å¸å°åå­å¥æ å°åæ°ç»ï¼ä¾¿äºåé¢æ£ç´¢\r\n            _optionMapping[key] = optionIndex;\r\n        }\r\n\r\n        // 4. éæ¯æå©é\r\n        DCU(DCU_TOKEN_ADDRESS).burn(msg.sender, dcuAmount);\r\n\r\n        // 5. ååææå­è¯\r\n        option.balances[msg.sender] += amount;\r\n        \r\n        // å¼ä»äºä»¶\r\n        emit Open(optionIndex, dcuAmount, msg.sender, amount);\r\n    }\r\n\r\n    /// @dev é¢ä¼°å¼ä»å¯ä»¥ä¹°å°çææå¸æ°é\r\n    /// @param tokenAddress ç®æ ä»£å¸å°åï¼0è¡¨ç¤ºeth\r\n    /// @param oraclePrice å½åé¢è¨æºä»·æ ¼ä»·\r\n    /// @param strikePrice ç¨æ·è®¾ç½®çè¡æä»·æ ¼ï¼ç»ç®æ¶ç³»ç»ä¼æ ¹æ®æ çç©å½åä»·ä¸è¡æä»·æ¯è¾ï¼è®¡ç®ç¨æ·çäº\r\n    /// @param orientation çæ¶¨/çè·ä¸¤ä¸ªæ¹åãtrueï¼çæ¶¨ï¼falseï¼çè·\r\n    /// @param exerciseBlock å°è¾¾è¯¥æ¥æåç¨æ·æå¨è¿è¡è¡æï¼æ¥æå¨ç³»ç»ä¸­ä½¿ç¨åºåå·è¿è¡è®°å½\r\n    /// @param dcuAmount æ¯ä»çdcuæ°é\r\n    /// @return amount é¢ä¼°å¯ä»¥è·å¾çææå¸æ°é\r\n    function estimate(\r\n        address tokenAddress,\r\n        uint oraclePrice,\r\n        uint strikePrice,\r\n        bool orientation,\r\n        uint exerciseBlock,\r\n        uint dcuAmount\r\n    ) public view override returns (uint amount) {\r\n\r\n        require(exerciseBlock > block.number + MIN_PERIOD, \"FEO:exerciseBlock too small\");\r\n\r\n        // 1. è®¡ç®ææä»·æ ¼\r\n        // æç§å¹³åæ¯14ç§åºä¸ä¸ªåè®¡ç®\r\n        uint v = calcV(\r\n            tokenAddress, \r\n            oraclePrice,\r\n            strikePrice,\r\n            orientation,\r\n            exerciseBlock\r\n        );\r\n\r\n        // 2. ä¿®æ­£ææä»·æ ¼\r\n        if (orientation) {\r\n            //v = _calcVc(config, oraclePrice, T, strikePrice);\r\n            // Vc>=S0*1%; Vp>=K*1%\r\n            // require(v * 100 >> 64 >= oraclePrice, \"FEO:vc must greater than S0*1%\");\r\n            if (v * 100 >> 64 < oraclePrice) {\r\n                v = oraclePrice * 0x10000000000000000 / 100;\r\n            }\r\n        } else {\r\n            //v = _calcVp(config, oraclePrice, T, strikePrice);\r\n            // Vc>=S0*1%; Vp>=K*1%\r\n            // require(v * 100 >> 64 >= strikePrice, \"FEO:vp must greater than K*1%\");\r\n            if (v * 100 >> 64 < strikePrice) {\r\n                v = strikePrice * 0x10000000000000000 / 100;\r\n            }\r\n        }\r\n\r\n        // 3. è®¡ç®ææä»½æ°\r\n        amount = (USDT_BASE << 64) * dcuAmount / v;\r\n    }\r\n    \r\n    /// @dev è¡æ\r\n    /// @param index ææç¼å·\r\n    /// @param amount ç»ç®çææåæ°\r\n    function exercise(uint index, uint amount) external payable override {\r\n\r\n        // 1. è·åææä¿¡æ¯\r\n        Option storage option = _options[index];\r\n        //address tokenAddress = option.tokenAddress;\r\n        uint strikePrice = _decodeFloat(option.strikePrice);\r\n        bool orientation = option.orientation;\r\n        uint exerciseBlock = uint(option.exerciseBlock);\r\n\r\n        require(block.number >= exerciseBlock, \"FEO:at maturity\");\r\n\r\n        // 2. éæ¯ææä»£å¸\r\n        option.balances[msg.sender] -= amount;\r\n\r\n        // 3. è°ç¨é¢è¨æºè·åä»·æ ¼ï¼è¯»åé¢è¨æºå¨æå®åºåçä»·æ ¼\r\n        (, uint oraclePrice) = INestPriceFacade(NEST_PRICE_FACADE_ADDRESS).findPrice {\r\n            value: msg.value\r\n        } (USDT_TOKEN_ADDRESS, exerciseBlock, msg.sender);\r\n\r\n        // 4. åæåµè®¡ç®ç¨æ·å¯ä»¥è·å¾çdcuæ°é\r\n        uint gain = 0;\r\n        // è®¡ç®ç»ç®ç»æ\r\n        // çæ¶¨ææ\r\n        if (orientation) {\r\n            // èµèµ¢äº\r\n            if (oraclePrice > strikePrice) {\r\n                gain = amount * (oraclePrice - strikePrice) / USDT_BASE;\r\n            }\r\n        } \r\n        // çè·ææ\r\n        else {\r\n            // èµèµ¢äº\r\n            if (oraclePrice < strikePrice) {\r\n                gain = amount * (strikePrice - oraclePrice) / USDT_BASE;\r\n            }\r\n        }\r\n\r\n        // 5. ç¨æ·èµèµ¢äºï¼ç»å¶å¢åèµ¢å¾çdcu\r\n        if (gain > 0) {\r\n            DCU(DCU_TOKEN_ADDRESS).mint(msg.sender, gain);\r\n        }\r\n\r\n        // è¡æäºä»¶\r\n        emit Exercise(index, amount, msg.sender, gain);\r\n    }\r\n\r\n    /// @dev ååºææ\r\n    /// @param index ææç¼å·\r\n    /// @param amount ååºçææåæ°\r\n    function sell(uint index, uint amount) external payable override {\r\n        // ææååºå¬å¼ï¼vt=Maxï¼ct(T,Kï¼*0.975ï¼0ï¼å¶ä¸­ct(K,T)æ¯æç§å®ä»·å¬å¼è®¡ç®çææææ¬ï¼\r\n        // æ³¨æï¼ä¸æ¯åå«äºä¸ä½äº1%è¿ä¸ªè®¾å®\r\n        // 1. è·åææä¿¡æ¯\r\n        Option storage option = _options[index];\r\n        address tokenAddress = option.tokenAddress;\r\n        uint strikePrice = _decodeFloat(option.strikePrice);\r\n        bool orientation = option.orientation;\r\n        uint exerciseBlock = uint(option.exerciseBlock);\r\n\r\n        // 2. éæ¯ææä»£å¸\r\n        option.balances[msg.sender] -= amount;\r\n\r\n        // 3. è°ç¨é¢è¨æºè·åä»·æ ¼ï¼è¯»åé¢è¨æºå¨æå®åºåçä»·æ ¼\r\n        uint oraclePrice = _queryPrice(msg.value, msg.sender);\r\n\r\n        // 4. åæåµè®¡ç®å½åæåµä¸çææä»·æ ¼\r\n        // æç§å¹³åæ¯14ç§åºä¸ä¸ªåè®¡ç®\r\n        uint dcuAmount = amount * calcV(\r\n            tokenAddress, \r\n            oraclePrice,\r\n            strikePrice,\r\n            orientation,\r\n            exerciseBlock\r\n        ) * SELL_RATE / (USDT_BASE * 0x27100000000000000000); // (USDT_BASE * 10000 << 64);\r\n        if (dcuAmount > 0) {\r\n            DCU(DCU_TOKEN_ADDRESS).mint(msg.sender, dcuAmount);\r\n        }\r\n\r\n        // ååºäºä»¶\r\n        emit Sell(index, amount, msg.sender, dcuAmount);\r\n    }\r\n\r\n    /// @dev è®¡ç®ææä»·æ ¼\r\n    /// @param tokenAddress ç®æ ä»£å¸å°åï¼0è¡¨ç¤ºeth\r\n    /// @param oraclePrice å½åé¢è¨æºä»·æ ¼ä»·\r\n    /// @param strikePrice ç¨æ·è®¾ç½®çè¡æä»·æ ¼ï¼ç»ç®æ¶ç³»ç»ä¼æ ¹æ®æ çç©å½åä»·ä¸è¡æä»·æ¯è¾ï¼è®¡ç®ç¨æ·çäº\r\n    /// @param orientation çæ¶¨/çè·ä¸¤ä¸ªæ¹åãtrueï¼çæ¶¨ï¼falseï¼çè·\r\n    /// @param exerciseBlock å°è¾¾è¯¥æ¥æåç¨æ·æå¨è¿è¡è¡æï¼æ¥æå¨ç³»ç»ä¸­ä½¿ç¨åºåå·è¿è¡è®°å½\r\n    /// @return v ææä»·æ ¼ï¼éè¦é¤ä»¥18446744073709551616000000\r\n    function calcV(\r\n        address tokenAddress,\r\n        uint oraclePrice,\r\n        uint strikePrice,\r\n        bool orientation,\r\n        uint exerciseBlock\r\n    ) public view override returns (uint v) {\r\n\r\n        require(tokenAddress == address(0), \"FEO:not allowed\");\r\n\r\n        // è®¡ç®æå©éï¼éè¦çdcuæ°éï¼\r\n        // æç§å¹³åæ¯14ç§åºä¸ä¸ªåè®¡ç®\r\n        uint T = (exerciseBlock - block.number) * BLOCK_TIME;\r\n        v = orientation \r\n            ? _calcVc(oraclePrice, T, strikePrice) \r\n            : _calcVp(oraclePrice, T, strikePrice);\r\n    }\r\n\r\n    // è½¬åä½OptionView\r\n    function _toOptionView(\r\n        Option storage option, \r\n        uint index, \r\n        address owner\r\n    ) private view returns (OptionView memory) {\r\n        return OptionView(\r\n            index,\r\n            option.tokenAddress,\r\n            _decodeFloat(option.strikePrice),\r\n            option.orientation,\r\n            uint(option.exerciseBlock),\r\n            option.balances[owner]\r\n        );\r\n    }\r\n\r\n    // æ ¹æ®ææä¿¡æ¯è·åç´¢å¼key\r\n    function _getKey(\r\n        address tokenAddress, \r\n        uint strikePrice, \r\n        bool orientation, \r\n        uint exerciseBlock\r\n    ) private pure returns (uint) {\r\n        //return keccak256(abi.encodePacked(tokenAddress, strikePrice, orientation, exerciseBlock));\r\n        require(exerciseBlock < 0x100000000, \"FEO:exerciseBlock to large\");\r\n        return (uint(uint160(tokenAddress)) << 96) \r\n                | (uint(_encodeFloat(strikePrice)) << 40) \r\n                | (exerciseBlock << 8)\r\n                | (orientation ? 1 : 0);\r\n    }\r\n\r\n    // å°18ä½åè¿å¶å®ç¹æ°è½¬åä¸º64ä½äºçº§å¶å®ç¹æ°\r\n    function _d18TOb64(uint v) private pure returns (int128) {\r\n        require(v < 0x6F05B59D3B200000000000000000000, \"FEO:can't convert to 64bits\");\r\n        return int128(int((v << 64) / 1 ether));\r\n    }\r\n\r\n    // å°uintè½¬åä¸ºint128\r\n    function _toInt128(uint v) private pure returns (int128) {\r\n        require(v < 0x80000000000000000000000000000000, \"FEO:can't convert to int128\");\r\n        return int128(int(v));\r\n    }\r\n\r\n    // å°int128è½¬åä¸ºuint\r\n    function _toUInt(int128 v) private pure returns (uint) {\r\n        require(v >= 0, \"FEO:can't convert to uint\");\r\n        return uint(int(v));\r\n    }\r\n\r\n    // éè¿æ¥è¡¨çæ¹æ³è®¡ç®æ åæ­£æåå¸å½æ°\r\n    function _snd(int128 x) private pure returns (int128) {\r\n        uint[28] memory table = [\r\n            /* */ ///////////////////// STANDARD NORMAL TABLE //////////////////////////\r\n            /* */ 0x174A15BF143412A8111C0F8F0E020C740AE6095807CA063B04AD031E018F0000, //\r\n            ///// 0x2F8C2E0F2C912B1229922811268F250B23872202207D1EF61D6F1BE61A5D18D8, //\r\n            /* */ 0x2F8C2E0F2C912B1229922811268F250B23872202207D1EF61D6F1BE61A5D18D4, //\r\n            /* */ 0x46A2453C43D4426B41003F943E263CB63B4539D3385F36EA357333FB32823108, //\r\n            /* */ 0x5C0D5AC5597B582F56E05590543E52EA5194503C4EE24D874C294ACA49694807, //\r\n            /* */ 0x6F6C6E466D1F6BF56AC9699B686A6738660364CC6392625761195FD95E975D53, //\r\n            /* */ 0x807E7F7F7E7D7D797C737B6A7A5F79517841772F761A750373E972CD71AF708E, //\r\n            /* */ 0x8F2A8E518D768C998BB98AD789F2890B88218736864785568463836E8276817B, //\r\n            /* */ 0x9B749AC19A0B9953989997DD971E965D959A94D4940C9342927591A690D49000, //\r\n            /* */ 0xA57CA4ECA459A3C4A32EA295A1FAA15CA0BDA01C9F789ED29E2A9D809CD39C25, //\r\n            ///// 0xA57CA4ECA459A3C4A32EA295A1FAA15DA0BDA01C9F789ED29E2A9D809CD39C25, //\r\n            /* */ 0xAD78AD07AC93AC1EABA7AB2EAAB3AA36A9B8A937A8B5A830A7AAA721A697A60B, //\r\n            /* */ 0xB3AAB353B2FAB2A0B245B1E7B189B128B0C6B062AFFDAF96AF2DAEC2AE56ADE8, //\r\n            /* */ 0xB859B818B7D6B793B74EB708B6C0B678B62EB5E2B595B547B4F7B4A6B454B400, //\r\n            /* */ 0xBBCDBB9EBB6EBB3CBB0ABAD7BAA2BA6DBA36B9FFB9C6B98CB951B915B8D8B899, //\r\n            /* */ 0xBE49BE27BE05BDE2BDBEBD99BD74BD4DBD26BCFEBCD5BCACBC81BC56BC29BBFC, //\r\n            /* */ 0xC006BFEEBFD7BFBEBFA5BF8CBF72BF57BF3CBF20BF03BEE6BEC8BEA9BE8ABE69, //\r\n            /* */ 0xC135C126C116C105C0F4C0E3C0D1C0BFC0ACC099C086C072C05DC048C032C01C, //\r\n            /* */ 0xC200C1F5C1EBC1E0C1D5C1C9C1BEC1B1C1A5C198C18BC17EC170C162C154C145, //\r\n            /* */ 0xC283C27CC275C26EC267C260C258C250C248C240C238C22FC226C21DC213C20A, //\r\n            /* */ 0xC2D6C2D2C2CDC2C9C2C5C2C0C2BBC2B6C2B1C2ACC2A7C2A1C29BC295C28FC289, //\r\n            /* */ 0xC309C306C304C301C2FEC2FCC2F9C2F6C2F2C2EFC2ECC2E8C2E5C2E1C2DEC2DA, //\r\n            /* */ 0xC328C326C325C323C321C320C31EC31CC31AC318C316C314C312C310C30EC30B, //\r\n            /* */ 0xC33AC339C338C337C336C335C334C333C332C331C330C32EC32DC32CC32AC329, //\r\n            /* */ 0xC344C343C343C342C342C341C341C340C33FC33FC33EC33DC33DC33CC33BC33A, //\r\n            /* */ 0xC34AC349C349C349C348C348C348C348C347C347C346C346C346C345C345C344, //\r\n            /* */ 0xC34DC34DC34CC34CC34CC34CC34CC34CC34BC34BC34BC34BC34BC34AC34AC34A, //\r\n            /* */ 0xC34EC34EC34EC34EC34EC34EC34EC34EC34EC34EC34DC34DC34DC34DC34DC34D, //\r\n            /* */ 0xC34FC34FC34FC34FC34FC34FC34FC34FC34FC34FC34FC34FC34FC34FC34EC34E, //\r\n            /* */ 0xC350C350C350C350C350C350C34FC34FC34FC34FC34FC34FC34FC34FC34FC34F  //\r\n            /* */ //////////////////// MADE IN CHINA 2021-08-24 ////////////////////////\r\n        ];\r\n\r\n        uint ux = uint(int(x < 0 ? -x : x)) * 100;\r\n        uint i = ux >> 64;\r\n        uint v = V50000;\r\n\r\n        if (i < 447) {\r\n            v = uint((table[i >> 4] >> ((i & 0xF) << 4)) & 0xFFFF) << 64;\r\n            v = (\r\n                    (\r\n                        (\r\n                            (uint((table[(i + 1) >> 4] >> (((i + 1) & 0xF) << 4)) & 0xFFFF) << 64)\r\n                            - v\r\n                        ) * (ux & 0xFFFFFFFFFFFFFFFF) //(ux - (i << 64))\r\n                    ) >> 64\r\n                ) + v;\r\n        }\r\n\r\n        if (x > 0) {\r\n            v = V50000 + v;\r\n        } else {\r\n            v = V50000 - v;\r\n        }\r\n\r\n        return int128(int(v / 100000));\r\n    }\r\n\r\n    // æ¥è¯¢tokenä»·æ ¼\r\n    function _queryPrice(uint fee, address payback) private returns (uint oraclePrice) {\r\n        (, oraclePrice) = INestPriceFacade(NEST_PRICE_FACADE_ADDRESS).latestPrice {\r\n            value: fee\r\n        } (USDT_TOKEN_ADDRESS, payback);\r\n    }\r\n\r\n    // è®¡ç®çæ¶¨ææä»·æ ¼\r\n    function _calcVc(uint S0, uint T, uint K) private pure returns (uint vc) {\r\n\r\n        int128 sigmaSQ_T = _d18TOb64(SIGMA_SQ * T);\r\n        int128 miu_T = _toInt128(MIU_LONG * T);\r\n        int128 sigma_t = ABDKMath64x64.sqrt(sigmaSQ_T);\r\n        int128 D1 = _D1(S0, K, sigmaSQ_T, miu_T);\r\n        int128 d = ABDKMath64x64.div(D1, sigma_t);\r\n\r\n        uint left = _toUInt(ABDKMath64x64.mul(\r\n            //ABDKMath64x64.exp(miu_T), \r\n            // æ¹ä¸ºåå©è¿ä¼¼è®¡ç®: x*(1+rt)\r\n            // by chenf 2021-12-28 15:27\r\n            miu_T + ONE,\r\n            ABDKMath64x64.sub(\r\n                ONE,\r\n                _snd(ABDKMath64x64.sub(d, sigma_t))\r\n            )\r\n        )) * S0;\r\n        uint right = _toUInt(ABDKMath64x64.sub(ONE, _snd(d))) * K;\r\n        \r\n        vc = left > right ? left - right : 0;\r\n    }\r\n\r\n    // è®¡ç®çè·ææä»·æ ¼\r\n    function _calcVp(uint S0, uint T, uint K) private pure returns (uint vp) {\r\n\r\n        int128 sigmaSQ_T = _d18TOb64(SIGMA_SQ * T);\r\n        int128 miu_T = _toInt128(MIU_SHORT * T);\r\n        int128 sigma_t = ABDKMath64x64.sqrt(sigmaSQ_T);\r\n        int128 D1 = _D1(S0, K, sigmaSQ_T, miu_T);\r\n        int128 d = ABDKMath64x64.div(D1, sigma_t);\r\n\r\n        uint left = _toUInt(_snd(d)) * K;\r\n        uint right = _toUInt(ABDKMath64x64.mul(\r\n            //ABDKMath64x64.exp(miu_T), \r\n            // æ¹ä¸ºåå©è¿ä¼¼è®¡ç®: x*(1+rt)\r\n            // by chenf 2021-12-28 15:27\r\n            miu_T + ONE,\r\n            _snd(ABDKMath64x64.sub(d, sigma_t))\r\n        )) * S0;\r\n\r\n        vp = left > right ? left - right : 0;\r\n    }\r\n\r\n    // è®¡ç®å¬å¼ç§çd1ï¼å ä¸ºæ²¡æé¤ä»¥Ïï¼æä»¥å½åä¸ºD1\r\n    function _D1(uint S0, uint K, int128 sigmaSQ_T, int128 miu_T) private pure returns (int128) {\r\n\r\n        //require(K < 0x1000000000000000000000000000000000000000000000000, \"FEO:K can't ROL 64bits\");\r\n        return\r\n            ABDKMath64x64.sub(\r\n                ABDKMath64x64.add(\r\n                    ABDKMath64x64.ln(_toInt128(K * 0x10000000000000000 / S0)),\r\n                    sigmaSQ_T >> 1\r\n                ),\r\n                miu_T\r\n            );\r\n    }\r\n    \r\n    /// @dev Encode the uint value as a floating-point representation in the form of fraction * 16 ^ exponent\r\n    /// @param value Destination uint value\r\n    /// @return float format\r\n    function _encodeFloat(uint value) private pure returns (uint56) {\r\n\r\n        uint exponent = 0; \r\n        while (value > 0x3FFFFFFFFFFFF) {\r\n            value >>= 4;\r\n            ++exponent;\r\n        }\r\n        return uint56((value << 6) | exponent);\r\n    }\r\n\r\n    /// @dev Decode the floating-point representation of fraction * 16 ^ exponent to uint\r\n    /// @param floatValue fraction value\r\n    /// @return decode format\r\n    function _decodeFloat(uint56 floatValue) private pure returns (uint) {\r\n        return (uint(floatValue) >> 6) << ((uint(floatValue) & 0x3F) << 2);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"}],\"name\":\"Exercise\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"orientation\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exerciseBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"New\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dcuAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dcuAmount\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oraclePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orientation\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"exerciseBlock\",\"type\":\"uint256\"}],\"name\":\"calcV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oraclePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orientation\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"exerciseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dcuAmount\",\"type\":\"uint256\"}],\"name\":\"estimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exercise\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFindCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"find\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orientation\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"exerciseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IHedgeOptions.OptionView[]\",\"name\":\"optionArray\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOptionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orientation\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"exerciseBlock\",\"type\":\"uint256\"}],\"name\":\"getOptionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orientation\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"exerciseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IHedgeOptions.OptionView\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orientation\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"exerciseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IHedgeOptions.OptionView[]\",\"name\":\"optionArray\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orientation\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"exerciseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dcuAmount\",\"type\":\"uint256\"}],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HedgeOptions","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"8888","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5634f68639166b32916999f67f2f7f394823bff90934ebf4a92728f5df695ee5"}]}