{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n// MIT License\r\n// Copyright (c) 2021 Bolt Global Media UK LTD\r\n\r\n/// @title BOLT Token 2021 Staking Contract\r\n/// @author Bolt Global Media UK LTD\r\n/// @notice Implementation of BOLT 2021 Fixed + Dynamic Staking\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract StakeBoltToken is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Per Account staking data structure\r\n    struct stakingInfo {\r\n        uint128 amount; // Amount of tokens staked by the account\r\n        uint128 unclaimedDynReward; // Allocated but Unclaimed dynamic reward\r\n        uint128 maxObligation; // The fixed reward obligation, assuming user holds until contract expiry.\r\n        uint32 lastClaimTime; // used for delta time for claims\r\n    }\r\n\r\n    mapping(address => stakingInfo) userStakes;\r\n\r\n    // **** Constants set in Constructor ****\r\n    // ERC-20 Token we are staking\r\n    IERC20 immutable token;\r\n\r\n    // Timestamp of when staking rewards start, contract expires \"rewardLifetime\" after this.\r\n    uint32 rewardStartTime;\r\n\r\n    // Reward period of the contract\r\n    uint32 immutable rewardLifetime;\r\n\r\n    // Fixed APR, expressed in Basis Points (BPS - 0.01%)\r\n    uint32 immutable fixedAPR;\r\n\r\n    // max allowable number of tokens that can be Staked to the contract by all users\r\n    // if exceeded - abort the txn\r\n    uint128 immutable maxTokensStakable;\r\n\r\n    //total number of tokens that has been staked by all the users.\r\n    uint128 totalTokensStaked;\r\n\r\n    //tokens remaining to be distributed among stake holders - initially deposited by the contract owner\r\n    uint128 public fixedRewardsAvailable;\r\n\r\n    // Total dynamic tokens deposited, but not yet allocated\r\n    uint128 public dynamicTokensToAllocate;\r\n\r\n    // Total of the fixed staking obligation (unclaimed tokens) to stakers, assuming they stake until the contract expires.\r\n    // This amount is adjusted with each stake/unstake.\r\n    uint128 fixedObligation;\r\n\r\n    // Total Dynamic Tokens across all wallets\r\n    uint128 public dynamicTokensAllocated;\r\n\r\n    /// @notice Persist initial state on construction\r\n    /// @param _tokenAddr contract address of the token being staked\r\n    /// @param _maxStakable Maximum number of tokens stakable by the contract in basic units\r\n    constructor(address _tokenAddr, uint128 _maxStakable) {\r\n        token = IERC20(_tokenAddr);\r\n        maxTokensStakable = _maxStakable;\r\n        rewardLifetime = 365 days;\r\n        fixedAPR = 500; // 5% in Basis Points\r\n        rewardStartTime = 0; // Rewards are not started immediately\r\n    }\r\n\r\n    /// @notice Initiates the reward generation period\r\n    /// @dev contract & rewards finish \"rewardLifetime\" after this.\r\n    /// @return Starting Timestamp\r\n    function setRewardStartTime() external onlyOwner returns (uint256) {\r\n        require(rewardStartTime == 0, \"Rewards already started\");\r\n\r\n        rewardStartTime = uint32(block.timestamp);\r\n        return rewardStartTime;\r\n    }\r\n\r\n    /// @notice User function for staking tokens\r\n    /// @param _amount Number of tokens to stake in basic units (n * 10**decimals)\r\n    function stake(uint128 _amount) external {\r\n        require(\r\n            (rewardStartTime == 0) ||\r\n                (block.timestamp <= rewardStartTime + rewardLifetime),\r\n            \"Staking period is over\"\r\n        );\r\n\r\n        require(\r\n            totalTokensStaked + _amount <= maxTokensStakable,\r\n            \"Max staking limit exceeded\"\r\n        );\r\n\r\n        // Use .lastClaimTime == 0 as test for Account existence - initialise if a new address\r\n        if (userStakes[msg.sender].lastClaimTime == 0) {\r\n            userStakes[msg.sender].lastClaimTime = uint32(block.timestamp);\r\n        }\r\n\r\n        _claim(); //must claim before updating amount\r\n        userStakes[msg.sender].amount += _amount;\r\n        totalTokensStaked += _amount;\r\n\r\n        _updateFixedObligation(msg.sender);\r\n\r\n        token.safeTransferFrom(msg.sender, address(this), _amount);\r\n        emit StakeTokens(msg.sender, _amount);\r\n    }\r\n\r\n    /// @notice Unstake tokens from the contract. Unstaking will also trigger a claim of all allocated rewards.\r\n    /// @dev remaining tokens after unstake will accrue rewards based on the new balance.\r\n    /// @param _amount Number of tokens to stake in basic units (n * 10**decimals)\r\n    function unstake(uint128 _amount) external {\r\n        require(userStakes[msg.sender].amount > 0, \"Nothing to unstake\");\r\n        require(\r\n            _amount <= userStakes[msg.sender].amount,\r\n            \"Unstake Amount greater than Stake\"\r\n        );\r\n        _claim();\r\n        userStakes[msg.sender].amount -= _amount;\r\n        totalTokensStaked -= _amount;\r\n        _updateFixedObligation(msg.sender);\r\n\r\n        token.safeTransfer(msg.sender, _amount);\r\n        emit UnstakeTokens(msg.sender, _amount);\r\n    }\r\n\r\n    /// @notice Claim all outstanding rewards from the contract\r\n    function claim() external {\r\n        require(\r\n            rewardStartTime != 0,\r\n            \"Nothing to claim, Rewards have not yet started\"\r\n        );\r\n        _claim();\r\n        _updateFixedObligation(msg.sender);\r\n    }\r\n\r\n    /// @notice Update the end of contract obligation (user and Total)\r\n    /// @dev This obligation determines the number of tokens claimable by owner at end of contract\r\n    /// @param _address The address to update\r\n    function _updateFixedObligation(address _address) private {\r\n        // Use the entire rewardlifetime if rewards have not yet started\r\n        uint128 newMaxObligation;\r\n        uint128 effectiveTime;\r\n\r\n        if (rewardStartTime == 0) {\r\n            effectiveTime = 0;\r\n        } else if (\r\n            uint128(block.timestamp) > rewardStartTime + rewardLifetime\r\n        ) {\r\n            effectiveTime = rewardStartTime + rewardLifetime;\r\n        } else {\r\n            effectiveTime = uint128(block.timestamp);\r\n        }\r\n\r\n        newMaxObligation =\r\n            (((userStakes[_address].amount * fixedAPR) / 10000) *\r\n                (rewardStartTime + rewardLifetime - effectiveTime)) /\r\n            rewardLifetime;\r\n\r\n        // Adjust the total obligation\r\n        fixedObligation =\r\n            fixedObligation -\r\n            userStakes[_address].maxObligation +\r\n            newMaxObligation;\r\n        userStakes[_address].maxObligation = newMaxObligation;\r\n    }\r\n\r\n    /// @notice private claim all accumulated outstanding tokens back to the callers wallet\r\n    function _claim() private {\r\n        // Return with no action if the staking period has not commenced yet.\r\n        if (rewardStartTime == 0) {\r\n            return;\r\n        }\r\n\r\n        uint32 lastClaimTime = userStakes[msg.sender].lastClaimTime;\r\n\r\n        // If the user staked before the start time was set, update the stake time to be the now known start Time\r\n        if (lastClaimTime < rewardStartTime) {\r\n            lastClaimTime = rewardStartTime;\r\n        }\r\n\r\n        // Calculation includes Fixed 5% APR + Dynamic\r\n\r\n        // Adjust claim time to never exceed the reward end date\r\n        uint32 claimTime = (block.timestamp < rewardStartTime + rewardLifetime)\r\n            ? uint32(block.timestamp)\r\n            : rewardStartTime + rewardLifetime;\r\n\r\n        uint128 fixedClaimAmount = (((userStakes[msg.sender].amount *\r\n            fixedAPR) / 10000) * (claimTime - lastClaimTime)) / rewardLifetime;\r\n\r\n        uint128 dynamicClaimAmount = userStakes[msg.sender].unclaimedDynReward;\r\n        dynamicTokensAllocated -= dynamicClaimAmount;\r\n\r\n        uint128 totalClaim = fixedClaimAmount + dynamicClaimAmount;\r\n\r\n        require(\r\n            fixedRewardsAvailable >= fixedClaimAmount,\r\n            \"Insufficient Fixed Rewards available\"\r\n        );\r\n\r\n        if (totalClaim > 0) {\r\n            token.safeTransfer(msg.sender, totalClaim);\r\n        }\r\n\r\n        if (fixedClaimAmount > 0) {\r\n            fixedRewardsAvailable -= uint128(fixedClaimAmount); // decrease the tokens remaining to reward\r\n        }\r\n        userStakes[msg.sender].lastClaimTime = uint32(claimTime);\r\n\r\n        if (dynamicClaimAmount > 0) {\r\n            userStakes[msg.sender].unclaimedDynReward = 0;\r\n        }\r\n        // _updateFixedObligation(msg.sender); - refactored into stake, claim, unstake\r\n\r\n        emit ClaimReward(msg.sender, fixedClaimAmount, dynamicClaimAmount);\r\n    }\r\n\r\n    /// Deposit tokens for the current epoch's dynamic reward, then Allocate at end of epoch\r\n    /// Step 1 depositDynamicReward\r\n    /// Step 2 allocatDynamicReward\r\n\r\n    /// @notice owner Deposit deposit of dynamic reward for later Allocation\r\n    /// @param _amount Number of tokens to deposit in basic units (n * 10**decimals)\r\n    function depositDynamicReward(uint128 _amount) external onlyOwner {\r\n        token.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        dynamicTokensToAllocate += _amount;\r\n\r\n        emit DepositDynamicReward(msg.sender, _amount);\r\n    }\r\n\r\n    /// Step 2 - each week, an off-chain process will call this function to allocate the rewards to the staked wallets\r\n    /// A robust mechanism is required to be sure all addresses are allocated funds and that the allocation matches the tokens\r\n    ///  previously deposited (in step 1)\r\n    /// Multiple calls may be made per round if necessary (e.g. if the arrays grow too big)\r\n    /// @param _addresses[] Array of addresses to receive\r\n    /// @param _amounts[] Number of tokens to deposit in basic units (n * 10**decimals)\r\n    /// @param _totalAmount total number of tokens to Allocate in this call\r\n    function allocateDynamicReward(\r\n        address[] memory _addresses,\r\n        uint128[] memory _amounts,\r\n        uint128 _totalAmount\r\n    ) external onlyOwner {\r\n        uint256 _calcdTotal = 0;\r\n\r\n        require(\r\n            _addresses.length == _amounts.length,\r\n            \"_addresses[] and _amounts[] must be the same length\"\r\n        );\r\n        require(\r\n            dynamicTokensToAllocate >= _totalAmount,\r\n            \"Not enough tokens available to allocate\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            userStakes[_addresses[i]].unclaimedDynReward += _amounts[i];\r\n            _calcdTotal += _amounts[i];\r\n        }\r\n        require(\r\n            _calcdTotal == _totalAmount,\r\n            \"Sum of amounts does not equal total\"\r\n        );\r\n\r\n        dynamicTokensToAllocate -= _totalAmount; // adjust remaining balance to allocate\r\n\r\n        // ToDo - Remove after testing\r\n        dynamicTokensAllocated += _totalAmount;\r\n    }\r\n\r\n    /// @notice Team deposit of the Fixed staking reward for later distribution\r\n    /// @notice This transfer is intended be done once, in full, before the commencement of the staking period\r\n    /// @param _amount Number of tokens to deposit in basic units (n * 10**decimals)\r\n    function depositFixedReward(uint128 _amount)\r\n        external\r\n        onlyOwner\r\n        returns (uint128)\r\n    {\r\n        fixedRewardsAvailable += _amount;\r\n\r\n        token.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        emit DepositFixedReward(msg.sender, _amount);\r\n\r\n        return fixedRewardsAvailable;\r\n    }\r\n\r\n    /// @notice Withdraw unused Fixed reward tokens, deposited at the beginning of the contract period.\r\n    /// @notice Withdrawal is allowed only after the contract period has elapsed and then only allow withdrawal of unallocated tokens.\r\n    function withdrawFixedReward() external onlyOwner returns (uint256) {\r\n        require(\r\n            block.timestamp > rewardStartTime + rewardLifetime,\r\n            \"Staking period is not yet over\"\r\n        );\r\n        require(\r\n            fixedRewardsAvailable >= fixedObligation,\r\n            \"Insufficient Fixed Rewards available\"\r\n        );\r\n        uint128 tokensToWithdraw = fixedRewardsAvailable - fixedObligation;\r\n\r\n        fixedRewardsAvailable -= tokensToWithdraw;\r\n\r\n        token.safeTransfer(msg.sender, tokensToWithdraw);\r\n\r\n        emit WithdrawFixedReward(msg.sender, tokensToWithdraw);\r\n\r\n        return tokensToWithdraw;\r\n    }\r\n\r\n    //Inspection methods\r\n\r\n    // Contract Inspection methods\r\n    function getRewardStartTime() external view returns (uint256) {\r\n        return rewardStartTime;\r\n    }\r\n\r\n    function getMaxStakingLimit() public view returns (uint256) {\r\n        return maxTokensStakable;\r\n    }\r\n\r\n    function getRewardLifetime() public view returns (uint256) {\r\n        return rewardLifetime;\r\n    }\r\n\r\n    function getTotalStaked() external view  returns (uint256) {\r\n        return totalTokensStaked;\r\n    }\r\n\r\n    function getFixedObligation() public view returns (uint256) {\r\n        return fixedObligation;\r\n    }\r\n\r\n    // Account Inspection Methods\r\n    function getTokensStaked(address _addr) public view returns (uint256) {\r\n        return userStakes[_addr].amount;\r\n    }\r\n\r\n    function getStakedPercentage(address _addr)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        return (totalTokensStaked, userStakes[_addr].amount);\r\n    }\r\n\r\n    function getStakeInfo(address _addr)\r\n        public\r\n        view\r\n        returns (\r\n            uint128 amount, // Amount of tokens staked by the account\r\n            uint128 unclaimedFixedReward, // Allocated but Unclaimed fixed reward\r\n            uint128 unclaimedDynReward, // Allocated but Unclaimed dynamic reward\r\n            uint128 maxObligation, // The fixed reward obligation, assuming user holds until contract expiry.\r\n            uint32 lastClaimTime, // used for delta time for claims\r\n            uint32 claimtime // show the effective claim time\r\n        )\r\n    {\r\n        //added to view the dynamic obligation asso. with addr.\r\n        uint128 fixedClaimAmount;\r\n        uint32 claimTime;\r\n        stakingInfo memory s = userStakes[_addr];\r\n        if (rewardStartTime > 0) {\r\n            claimTime = (block.timestamp < rewardStartTime + rewardLifetime)\r\n                ? uint32(block.timestamp)\r\n                : rewardStartTime + rewardLifetime;\r\n\r\n            fixedClaimAmount =\r\n                (((s.amount * fixedAPR) / 10000) *\r\n                    (claimTime - s.lastClaimTime)) /\r\n                rewardLifetime;\r\n        } else {\r\n            // rewards have not started\r\n            fixedClaimAmount = 0;\r\n        }\r\n\r\n        return (\r\n            s.amount,\r\n            fixedClaimAmount,\r\n            s.unclaimedDynReward,\r\n            s.maxObligation,\r\n            s.lastClaimTime,\r\n            claimTime\r\n        );\r\n    }\r\n\r\n    function getStakeTokenAddress() public view returns (IERC20) {\r\n        return token;\r\n    }\r\n\r\n    // Events\r\n    event DepositFixedReward(address indexed from, uint256 amount);\r\n    event DepositDynamicReward(address indexed from, uint256 amount);\r\n    event WithdrawFixedReward(address indexed to, uint256 amount);\r\n\r\n    event StakeTokens(address indexed from, uint256 amount);\r\n    event UnstakeTokens(address indexed to, uint256 amount);\r\n    event ClaimReward(\r\n        address indexed to,\r\n        uint256 fixedAmount,\r\n        uint256 dynamicAmount\r\n    );\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_maxStakable\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fixedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dynamicAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositDynamicReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositFixedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFixedReward\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_amounts\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128\",\"name\":\"_totalAmount\",\"type\":\"uint128\"}],\"name\":\"allocateDynamicReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"depositDynamicReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"depositFixedReward\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicTokensAllocated\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicTokensToAllocate\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixedRewardsAvailable\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFixedObligation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxStakingLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardLifetime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"unclaimedFixedReward\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"unclaimedDynReward\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxObligation\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"lastClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"claimtime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeTokenAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getStakedPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setRewardStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFixedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakeBoltToken","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d5930c307d7395ff807f2921f12c5eb82131a78900000000000000000000000000000000000000000052b7d2dcc80cd2e4000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c5410d852f60b872c1a10d5995988eaaa9398d94e50c31dbe77c4f5f3c281b04"}]}