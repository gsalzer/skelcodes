{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/v3/strategies/MIMConvexStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '../interfaces/IConvexVault.sol';\\nimport '../interfaces/ICurvePool.sol';\\nimport '../interfaces/IStableSwap2Pool.sol';\\nimport '../interfaces/IStableSwap3Pool.sol';\\nimport './BaseStrategy.sol';\\nimport '../interfaces/ExtendedIERC20.sol';\\nimport '../interfaces/ICVXMinter.sol';\\nimport '../interfaces/IHarvester.sol';\\n\\ncontract MIMConvexStrategy is BaseStrategy {\\n    // used for Crv -> weth -> [mim/3crv] -> mimCrv route\\n    address public immutable crv;\\n    address public immutable cvx;\\n\\n    address public immutable mim;\\n    address public immutable crv3;\\n\\n    uint256 public immutable pid;\\n    IConvexVault public immutable convexVault;\\n    address public immutable mimCvxDepositLP;\\n    IConvexRewards public immutable crvRewards;\\n    IStableSwap2Pool public immutable stableSwap2Pool;\\n    IStableSwap3Pool public immutable stableSwap3Pool;\\n\\n    /**\\n     * @param _name The strategy name\\n     * @param _want The desired token of the strategy\\n     * @param _crv The address of CRV\\n     * @param _cvx The address of CVX\\n     * @param _weth The address of WETH\\n     * @param _mim The address of MIM\\n     * @param _crv3 The address of 3CRV\\n     * @param _stableSwap3Pool The address of the 3CRV pool\\n     * @param _pid The pool id of convex\\n     * @param _convexVault The address of the convex vault\\n     * @param _stableSwap2Pool The address of the stable swap pool\\n     * @param _controller The address of the controller\\n     * @param _manager The address of the manager\\n     * @param _routerArray The address array of routers for swapping tokens\\n     */\\n    constructor(\\n        string memory _name,\\n        address _want,\\n        address _crv,\\n        address _cvx,\\n        address _weth,\\n        address _mim,\\n        address _crv3,\\n        IStableSwap3Pool _stableSwap3Pool,\\n        uint256 _pid,\\n        IConvexVault _convexVault,\\n        IStableSwap2Pool _stableSwap2Pool,\\n        address _controller,\\n        address _manager,\\n        address[] memory _routerArray\\n    ) public BaseStrategy(_name, _controller, _manager, _want, _weth, _routerArray) {\\n        require(address(_crv) != address(0), '!_crv');\\n        require(address(_cvx) != address(0), '!_cvx');\\n        require(address(_mim) != address(0), '!_mim');\\n        require(address(_crv3) != address(0), '!_crv3');\\n        require(address(_convexVault) != address(0), '!_convexVault');\\n        require(address(_stableSwap2Pool) != address(0), '!_stableSwap2Pool');\\n        require(address(_stableSwap3Pool) != address(0), '!_stableSwap3Pool');\\n\\n        (, address _token, , address _crvRewards, , ) = _convexVault.poolInfo(_pid);\\n        crv = _crv;\\n        cvx = _cvx;\\n        mim = _mim;\\n        crv3 = _crv3;\\n        pid = _pid;\\n        convexVault = _convexVault;\\n        mimCvxDepositLP = _token;\\n        crvRewards = IConvexRewards(_crvRewards);\\n        stableSwap2Pool = _stableSwap2Pool;\\n        stableSwap3Pool = _stableSwap3Pool;\\n        // Required to overcome \\\"Stack Too Deep\\\" error\\n        _setApprovals(\\n            _want,\\n            _crv,\\n            _cvx,\\n            _mim,\\n            _crv3,\\n            address(_convexVault),\\n            address(_stableSwap2Pool),\\n            _routerArray\\n        );\\n        _setApprovals3crv(address(_stableSwap3Pool));\\n    }\\n    \\n    function _setApprovals3crv(address _stableSwap3Pool) internal {\\n        IERC20(IStableSwap3Pool(_stableSwap3Pool).coins(0)).safeApprove(_stableSwap3Pool, type(uint256).max);\\n        IERC20(IStableSwap3Pool(_stableSwap3Pool).coins(1)).safeApprove(_stableSwap3Pool, type(uint256).max);\\n        IERC20(IStableSwap3Pool(_stableSwap3Pool).coins(2)).safeApprove(_stableSwap3Pool, type(uint256).max);    \\t\\n    }\\n\\n    function _setApprovals(\\n        address _want,\\n        address _crv,\\n        address _cvx,\\n        address _mim,\\n        address _crv3,\\n        address _convexVault,\\n        address _stableSwap2Pool,\\n        address[] memory _routerArray\\n    ) internal {\\n        IERC20(_want).safeApprove(address(_convexVault), type(uint256).max);\\n        for(uint i=0; i<_routerArray.length; i++) {\\n            address _router = _routerArray[i];\\n            IERC20(_crv).safeApprove(address(_router), 0);\\n            IERC20(_crv).safeApprove(address(_router), type(uint256).max);\\n            IERC20(_cvx).safeApprove(address(_router), 0);\\n            IERC20(_cvx).safeApprove(address(_router), type(uint256).max);\\n        }\\n        IERC20(_mim).safeApprove(address(_stableSwap2Pool), type(uint256).max);\\n        IERC20(_crv3).safeApprove(address(_stableSwap2Pool), type(uint256).max);\\n        IERC20(_want).safeApprove(address(_stableSwap2Pool), type(uint256).max);\\n    }\\n\\n    function _deposit() internal override {\\n        if (balanceOfWant() > 0) {\\n            convexVault.depositAll(pid, true);\\n        }\\n    }\\n\\n    function _claimReward() internal {\\n        crvRewards.getReward(address(this), true);\\n    }\\n\\n    function _addLiquidity(uint256 estimate) internal {\\n        uint256[2] memory amounts;\\n        amounts[1] = IERC20(crv3).balanceOf(address(this));\\n        stableSwap2Pool.add_liquidity(amounts, estimate);\\n    }\\n\\n    function _addLiquidity3CRV(uint256 estimate) internal {\\n        uint256[3] memory amounts;\\n        (address targetCoin, uint256 targetIndex) = getMostPremium();\\n        amounts[targetIndex] = IERC20(targetCoin).balanceOf(address(this));\\n        stableSwap3Pool.add_liquidity(amounts, estimate);\\n    }\\n\\n    function getMostPremium() public view returns (address, uint256) {\\n        uint256 daiBalance = stableSwap3Pool.balances(0);\\n        uint256 usdcBalance = (stableSwap3Pool.balances(1)).mul(10**18).div(ExtendedIERC20(stableSwap3Pool.coins(1)).decimals());\\n        uint256 usdtBalance = (stableSwap3Pool.balances(2)).mul(10**12); \\n\\n        if (daiBalance <= usdcBalance && daiBalance <= usdtBalance) {\\n            return (stableSwap3Pool.coins(0), 0);\\n        }\\n\\n        if (usdcBalance <= daiBalance && usdcBalance <= usdtBalance) {\\n            return (stableSwap3Pool.coins(1), 1);\\n        }\\n\\n        if (usdtBalance <= daiBalance && usdtBalance <= usdcBalance) {\\n            return (stableSwap3Pool.coins(2), 2);\\n        }\\n\\n        return (stableSwap3Pool.coins(0), 0); // If they're somehow equal, we just want DAI\\n    }\\n\\n    function _harvest(uint256[] calldata _estimates) internal override {\\n        _claimReward();\\n        uint256 _cvxBalance = IERC20(cvx).balanceOf(address(this));\\n        if (_cvxBalance > 0) {\\n            _swapTokens(cvx, weth, _cvxBalance, _estimates[0]);\\n        }\\n\\n        uint256 _extraRewardsLength = crvRewards.extraRewardsLength();\\n        for (uint256 i = 0; i < _extraRewardsLength; i++) {\\n            address _rewardToken = IConvexRewards(crvRewards.extraRewards(i)).rewardToken();\\n            uint256 _extraRewardBalance = IERC20(_rewardToken).balanceOf(address(this));\\n            if (_extraRewardBalance > 0) {\\n                _swapTokens(_rewardToken, weth, _extraRewardBalance, _estimates[i+1]);\\n            }\\n        }\\n\\t// RouterIndex 1 sets router to Uniswap to swap WETH->YAXIS\\n        uint256 _remainingWeth = _payHarvestFees(crv, _estimates[_extraRewardsLength + 1], _estimates[_extraRewardsLength + 2], 1);\\n        if (_remainingWeth > 0) {\\n            (address _token, ) = getMostPremium(); // stablecoin we want to convert to\\n            _swapTokens(weth, _token, _remainingWeth, _estimates[_extraRewardsLength + 3]);\\n            _addLiquidity3CRV(_estimates[_extraRewardsLength + 4]);\\n            _addLiquidity(_estimates[_extraRewardsLength + 4]);\\n            _deposit();\\n        }\\n    }\\n\\n    function getEstimates() external view returns (uint256[] memory) {\\n               \\n        uint rewardsLength = crvRewards.extraRewardsLength();\\n        uint256[] memory _estimates = new uint256[](rewardsLength.add(5));\\n        address[] memory _path = new address[](2);\\n        uint256[] memory _amounts;\\n        uint256 _notSlippage = ONE_HUNDRED_PERCENT.sub(IHarvester(manager.harvester()).slippage());\\n        uint256 wethAmount;\\n\\n        // Estimates for CVX -> WETH\\n        _path[0] = cvx;\\n        _path[1] = weth;\\n        _amounts = router.getAmountsOut(\\n            // Calculating CVX minted\\n            (crvRewards.earned(address(this)))\\n            .mul(ICVXMinter(cvx).totalCliffs().sub(ICVXMinter(cvx).maxSupply().div(ICVXMinter(cvx).reductionPerCliff())))\\n            .div(ICVXMinter(cvx).totalCliffs()),\\n            _path\\n        );\\n        _estimates[0]= _amounts[1].mul(_notSlippage).div(ONE_HUNDRED_PERCENT);\\n\\n        wethAmount += _estimates[0];\\n\\n        // Estimates for extra rewards -> WETH\\n        \\n        if (rewardsLength > 0) {\\n            for (uint256 i = 0; i < rewardsLength; i++) {\\n                _path[0] = IConvexRewards(crvRewards.extraRewards(i)).rewardToken();\\n                _path[1] = weth;\\n                _amounts = router.getAmountsOut(\\n                    IConvexRewards(crvRewards.extraRewards(i)).earned(address(this)),\\n                    _path\\n                );\\n                _estimates[i + 1] = _amounts[1].mul(_notSlippage).div(ONE_HUNDRED_PERCENT);\\n\\n                wethAmount += _estimates[i + 1];\\n            }\\n        }\\n\\n        // Estimates for CRV -> WETH\\n        _path[0] = crv;\\n        _path[1] = weth;\\n        _amounts = router.getAmountsOut(\\n            crvRewards.earned(address(this)),\\n            _path\\n        );\\n        _estimates[rewardsLength + 1] = _amounts[1].mul(_notSlippage).div(ONE_HUNDRED_PERCENT);\\n\\n        wethAmount += _estimates[rewardsLength + 1];\\n\\n        // Estimates WETH -> YAXIS\\n        _path[0] = weth;\\n        _path[1] = manager.yaxis();\\n        // Set to UniswapV2 to calculate output for YAXIS\\n        _amounts = ISwap(routerArray[1]).getAmountsOut(wethAmount.mul(manager.treasuryFee()).div(ONE_HUNDRED_PERCENT), _path);\\n        _estimates[rewardsLength + 2] = _amounts[1].mul(_notSlippage).div(ONE_HUNDRED_PERCENT);\\n        \\n        // Estimates for WETH -> Stablecoin\\n        (address _targetCoin,) = getMostPremium(); \\n        _path[0] = weth;\\n        _path[1] = _targetCoin;\\n        _amounts = router.getAmountsOut(\\n            wethAmount - _amounts[0],\\n            _path\\n        );\\n        _estimates[rewardsLength + 3] = _amounts[1].mul(_notSlippage).div(ONE_HUNDRED_PERCENT);\\n\\n        // Estimates for Stablecoin -> 3CRV\\n        _estimates[rewardsLength + 4] = (_amounts[1].mul(10**(18-ExtendedIERC20(_targetCoin).decimals())).div(stableSwap3Pool.get_virtual_price())).mul(_notSlippage).div(ONE_HUNDRED_PERCENT);\\n        // Estimates for 3CRV -> MIM-3CRV is the same 3CRV estimate\\n        \\n        return _estimates;\\n    }\\n\\n    function _withdrawAll() internal override {\\n        convexVault.withdrawAll(pid);\\n    }\\n\\n    function _withdraw(uint256 _amount) internal override {\\n        convexVault.withdraw(pid, _amount);\\n    }\\n\\n    function balanceOfPool() public view override returns (uint256) {\\n        return IERC20(mimCvxDepositLP).balanceOf(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v3/interfaces/IConvexVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IConvexVault {\\n    function poolInfo(uint256 pid)\\n        external\\n        view\\n        returns (\\n            address lptoken,\\n            address token,\\n            address gauge,\\n            address crvRewards,\\n            address stash,\\n            bool shutdown\\n        );\\n\\n    function deposit(\\n        uint256 pid,\\n        uint256 amount,\\n        bool stake\\n    ) external returns (bool);\\n\\n    function depositAll(uint256 pid, bool stake) external returns (bool);\\n\\n    function withdraw(uint256 pid, uint256 amount) external returns (bool);\\n\\n    function withdrawAll(uint256 pid) external returns (bool);\\n}\\n\\ninterface IConvexRewards {\\n    function getReward(address _account, bool _claimExtras) external returns (bool);\\n\\n    function extraRewardsLength() external view returns (uint256);\\n\\n    function extraRewards(uint256 _pid) external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function earned(address _account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/v3/interfaces/ICurvePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface ICurvePool {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function coins(uint256) external view returns (address);\\n\\n    function balances(uint256) external view returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256 dy);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/v3/interfaces/IStableSwap2Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IStableSwap2Pool {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function balances(uint256) external view returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256 dy);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    function calc_token_amount(uint256[2] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/v3/interfaces/IStableSwap3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IStableSwap3Pool {\\n    function get_virtual_price() external view returns (uint);\\n    function balances(uint) external view returns (uint);\\n    function coins(uint) external view returns (address);\\n    function get_dy(int128 i, int128 j, uint dx) external view returns (uint dy);\\n    function exchange(int128 i, int128 j, uint dx, uint min_dy) external;\\n    function add_liquidity(uint[3] calldata amounts, uint min_mint_amount) external;\\n    function remove_liquidity(uint _amount, uint[3] calldata amounts) external;\\n    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_amount) external;\\n    function calc_token_amount(uint[3] calldata amounts, bool deposit) external view returns (uint);\\n    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/v3/strategies/BaseStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/IStableSwap3Pool.sol\\\";\\nimport \\\"../interfaces/ISwap.sol\\\";\\nimport \\\"../interfaces/IManager.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\n\\n/**\\n * @title BaseStrategy\\n * @notice The BaseStrategy is an abstract contract which all\\n * yAxis strategies should inherit functionality from. It gives\\n * specific security properties which make it hard to write an\\n * insecure strategy.\\n * @notice All state-changing functions implemented in the strategy\\n * should be internal, since any public or externally-facing functions\\n * are already handled in the BaseStrategy.\\n * @notice The following functions must be implemented by a strategy:\\n * - function _deposit() internal virtual;\\n * - function _harvest() internal virtual;\\n * - function _withdraw(uint256 _amount) internal virtual;\\n * - function _withdrawAll() internal virtual;\\n * - function balanceOfPool() public view override virtual returns (uint256);\\n */\\nabstract contract BaseStrategy is IStrategy {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant ONE_HUNDRED_PERCENT = 10000;\\n\\n    address public immutable override want;\\n    address public immutable override weth;\\n    address public immutable controller;\\n    IManager public immutable override manager;\\n    string public override name;\\n    address[] public routerArray;\\n    ISwap public override router;\\n\\n    /**\\n     * @param _controller The address of the controller\\n     * @param _manager The address of the manager\\n     * @param _want The desired token of the strategy\\n     * @param _weth The address of WETH\\n     * @param _routerArray The addresses of routers for swapping tokens\\n     */\\n    constructor(\\n        string memory _name,\\n        address _controller,\\n        address _manager,\\n        address _want,\\n        address _weth,\\n        address[] memory _routerArray\\n    ) public {\\n        name = _name;\\n        want = _want;\\n        controller = _controller;\\n        manager = IManager(_manager);\\n        weth = _weth;\\n        require(_routerArray.length > 0, \\\"Must input at least one router\\\");\\n        routerArray = _routerArray;\\n        router = ISwap(_routerArray[0]);\\n        for(uint i = 0; i < _routerArray.length; i++) {\\n            IERC20(_weth).safeApprove(address(_routerArray[i]), 0);\\n            IERC20(_weth).safeApprove(address(_routerArray[i]), type(uint256).max);\\n        }\\n        \\n    }\\n\\n    /**\\n     * GOVERNANCE-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Approves a token address to be spent by an address\\n     * @param _token The address of the token\\n     * @param _spender The address of the spender\\n     * @param _amount The amount to spend\\n     */\\n    function approveForSpender(\\n        IERC20 _token,\\n        address _spender,\\n        uint256 _amount\\n    )\\n        external\\n    {\\n        require(msg.sender == manager.governance(), \\\"!governance\\\");\\n        _token.safeApprove(_spender, 0);\\n        _token.safeApprove(_spender, _amount);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the ISwap-compatible router\\n     * @param _routerArray The addresses of routers\\n     * @param _tokenArray The addresses of tokens that need to be approved by the strategy\\n     */\\n     function setRouter(\\n        address[] calldata _routerArray,\\n        address[] calldata _tokenArray\\n    )\\n        external\\n    {\\n        require(msg.sender == manager.governance(), \\\"!governance\\\");\\n        routerArray = _routerArray;\\n        router = ISwap(_routerArray[0]);\\n        address _router;\\n        uint256 _routerLength = _routerArray.length;\\n        uint256 _tokenArrayLength = _tokenArray.length;\\n        for(uint i = 0; i < _routerLength; i++) {\\n            _router = _routerArray[i];\\n            IERC20(weth).safeApprove(_router, 0);\\n            IERC20(weth).safeApprove(_router, type(uint256).max);\\n            for(uint j = 0; j < _tokenArrayLength; j++) {\\n                IERC20(_tokenArray[j]).safeApprove(_router, 0);\\n                IERC20(_tokenArray[j]).safeApprove(_router, type(uint256).max);\\n            }\\n        }\\n\\n    }\\n    \\n    /**\\n     * @notice Sets the default ISwap-compatible router\\n     * @param _routerIndex Gets the address of the router from routerArray\\n     */\\n     function setDefaultRouter(\\n        uint256 _routerIndex\\n    )\\n        external\\n    {\\n    \\trequire(msg.sender == manager.governance(), \\\"!governance\\\");\\n    \\trouter = ISwap(routerArray[_routerIndex]);\\n    }\\n\\n    /**\\n     * CONTROLLER-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Deposits funds to the strategy's pool\\n     */\\n    function deposit()\\n        external\\n        override\\n        onlyController\\n    {\\n        _deposit();\\n    }\\n\\n    /**\\n     * @notice Harvest funds in the strategy's pool\\n     */\\n    function harvest(\\n        uint256[] calldata _estimates\\n    )\\n        external\\n        override\\n        onlyController\\n    {\\n        _harvest(_estimates);\\n    }\\n\\n    /**\\n     * @notice Sends stuck want tokens in the strategy to the controller\\n     */\\n    function skim()\\n        external\\n        override\\n        onlyController\\n    {\\n        IERC20(want).safeTransfer(controller, balanceOfWant());\\n    }\\n\\n    /**\\n     * @notice Sends stuck tokens in the strategy to the controller\\n     * @param _asset The address of the token to withdraw\\n     */\\n    function withdraw(\\n        address _asset\\n    )\\n        external\\n        override\\n        onlyController\\n    {\\n        require(want != _asset, \\\"want\\\");\\n\\n        IERC20 _assetToken = IERC20(_asset);\\n        uint256 _balance = _assetToken.balanceOf(address(this));\\n        _assetToken.safeTransfer(controller, _balance);\\n    }\\n\\n    /**\\n     * @notice Initiated from a vault, withdraws funds from the pool\\n     * @param _amount The amount of the want token to withdraw\\n     */\\n    function withdraw(\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        onlyController\\n    {\\n        uint256 _balance = balanceOfWant();\\n        if (_balance < _amount) {\\n            _amount = _withdrawSome(_amount.sub(_balance));\\n            _amount = _amount.add(_balance);\\n        }\\n\\n        IERC20(want).safeTransfer(controller, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws all funds from the strategy\\n     */\\n    function withdrawAll()\\n        external\\n        override\\n        onlyController\\n    {\\n        _withdrawAll();\\n\\n        uint256 _balance = IERC20(want).balanceOf(address(this));\\n\\n        IERC20(want).safeTransfer(controller, _balance);\\n    }\\n\\n    /**\\n     * EXTERNAL VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the strategy's balance of the want token plus the balance of pool\\n     */\\n    function balanceOf()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return balanceOfWant().add(balanceOfPool());\\n    }\\n\\n    /**\\n     * PUBLIC VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the balance of the pool\\n     * @dev Must be implemented by the strategy\\n     */\\n    function balanceOfPool()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the balance of the want token on the strategy\\n     */\\n    function balanceOfWant()\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return IERC20(want).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * INTERNAL FUNCTIONS\\n     */\\n\\n    function _deposit()\\n        internal\\n        virtual;\\n\\n    function _harvest(\\n        uint256[] calldata _estimates\\n    )\\n        internal\\n        virtual;\\n\\n    function _payHarvestFees(\\n        address _poolToken,\\n        uint256 _estimatedWETH,\\n        uint256 _estimatedYAXIS,\\n        uint256 _routerIndex\\n    )\\n        internal\\n        returns (uint256 _wethBal)\\n    {\\n        uint256 _amount = IERC20(_poolToken).balanceOf(address(this));\\n        _swapTokens(_poolToken, weth, _amount, _estimatedWETH);\\n        _wethBal = IERC20(weth).balanceOf(address(this));\\n\\n        if (_wethBal > 0) {\\n            // get all the necessary variables in a single call\\n            (\\n                address yaxis,\\n                address treasury,\\n                uint256 treasuryFee\\n            ) = manager.getHarvestFeeInfo();\\n\\n            uint256 _fee;\\n\\n            // pay the treasury with YAX\\n            if (treasuryFee > 0 && treasury != address(0)) {\\n                _fee = _wethBal.mul(treasuryFee).div(ONE_HUNDRED_PERCENT);\\n\\n                _swapTokensWithRouterIndex(weth, yaxis, _fee, _estimatedYAXIS, _routerIndex);\\n                IERC20(yaxis).safeTransfer(treasury, IERC20(yaxis).balanceOf(address(this)));\\n            }\\n\\n            // return the remaining WETH balance\\n            _wethBal = IERC20(weth).balanceOf(address(this));\\n        }\\n    }\\n\\n    function _swapTokensWithRouterIndex(\\n        address _input,\\n        address _output,\\n        uint256 _amount,\\n        uint256 _expected,\\n        uint256 _routerIndex\\n    )\\n        internal\\n    {\\n        address[] memory path = new address[](2);\\n        path[0] = _input;\\n        path[1] = _output;\\n        ISwap(routerArray[_routerIndex]).swapExactTokensForTokens(\\n            _amount,\\n            _expected,\\n            path,\\n            address(this),\\n            // The deadline is a hardcoded value that is far in the future.\\n            1e10\\n        );\\n    }\\n    \\n    function _swapTokens(\\n        address _input,\\n        address _output,\\n        uint256 _amount,\\n        uint256 _expected\\n    )\\n        internal\\n    {\\n        address[] memory path = new address[](2);\\n        path[0] = _input;\\n        path[1] = _output;\\n        router.swapExactTokensForTokens(\\n            _amount,\\n            _expected,\\n            path,\\n            address(this),\\n            // The deadline is a hardcoded value that is far in the future.\\n            1e10\\n        );\\n    }\\n\\n    function _withdraw(\\n        uint256 _amount\\n    )\\n        internal\\n        virtual;\\n\\n    function _withdrawAll()\\n        internal\\n        virtual;\\n\\n    function _withdrawSome(\\n        uint256 _amount\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 _before = IERC20(want).balanceOf(address(this));\\n        _withdraw(_amount);\\n        uint256 _after = IERC20(want).balanceOf(address(this));\\n        _amount = _after.sub(_before);\\n\\n        return _amount;\\n    }\\n\\n    /**\\n     * MODIFIERS\\n     */\\n\\n    modifier onlyStrategist() {\\n        require(msg.sender == manager.strategist(), \\\"!strategist\\\");\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v3/interfaces/ExtendedIERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\ninterface ExtendedIERC20 {\\n    function decimals() external view returns (uint8);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/v3/interfaces/ICVXMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ICVXMinter {\\n    function maxSupply() external view returns (uint256);\\n    function totalCliffs() external view returns (uint256);\\n    function reductionPerCliff() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/v3/interfaces/IHarvester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IHarvester {\\n    function addStrategy(address, address, uint256) external;\\n    function manager() external view returns (IManager);\\n    function removeStrategy(address, address, uint256) external;\\n    function slippage() external view returns (uint256);\\n}\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v3/interfaces/ISwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface ISwap {\\n    function swapExactTokensForTokens(uint256, uint256, address[] calldata, address, uint256) external;\\n    function getAmountsOut(uint256, address[] calldata) external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/v3/interfaces/IManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IManager {\\n    function addVault(address) external;\\n    function allowedControllers(address) external view returns (bool);\\n    function allowedConverters(address) external view returns (bool);\\n    function allowedStrategies(address) external view returns (bool);\\n    function allowedVaults(address) external view returns (bool);\\n    function controllers(address) external view returns (address);\\n    function getHarvestFeeInfo() external view returns (address, address, uint256);\\n    function getToken(address) external view returns (address);\\n    function governance() external view returns (address);\\n    function halted() external view returns (bool);\\n    function harvester() external view returns (address);\\n    function insuranceFee() external view returns (uint256);\\n    function insurancePool() external view returns (address);\\n    function insurancePoolFee() external view returns (uint256);\\n    function pendingStrategist() external view returns (address);\\n    function removeVault(address) external;\\n    function stakingPool() external view returns (address);\\n    function stakingPoolShareFee() external view returns (uint256);\\n    function strategist() external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasuryFee() external view returns (uint256);\\n    function withdrawalProtectionFee() external view returns (uint256);\\n    function yaxis() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/v3/interfaces/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\nimport \\\"./ISwap.sol\\\";\\n\\ninterface IStrategy {\\n    function balanceOf() external view returns (uint256);\\n    function balanceOfPool() external view returns (uint256);\\n    function balanceOfWant() external view returns (uint256);\\n    function deposit() external;\\n    function harvest(uint256[] calldata) external;\\n    function manager() external view returns (IManager);\\n    function name() external view returns (string memory);\\n    function router() external view returns (ISwap);\\n    function skim() external;\\n    function want() external view returns (address);\\n    function weth() external view returns (address);\\n    function withdraw(address) external;\\n    function withdraw(uint256) external;\\n    function withdrawAll() external;\\n}\\n\\ninterface IStrategyExtended {\\n    function getEstimates() external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/v3/interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IController {\\n    function balanceOf() external view returns (uint256);\\n    function converter(address _vault) external view returns (address);\\n    function earn(address _strategy, address _token, uint256 _amount) external;\\n    function investEnabled() external view returns (bool);\\n    function harvestStrategy(address _strategy, uint256[] calldata _estimates) external;\\n    function manager() external view returns (IManager);\\n    function strategies() external view returns (uint256);\\n    function withdraw(address _token, uint256 _amount) external;\\n    function withdrawAll(address _strategy, address _convert) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cvx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mim\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crv3\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap3Pool\",\"name\":\"_stableSwap3Pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"contract IConvexVault\",\"name\":\"_convexVault\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap2Pool\",\"name\":\"_stableSwap2Pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_routerArray\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveForSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexVault\",\"outputs\":[{\"internalType\":\"contract IConvexVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvRewards\",\"outputs\":[{\"internalType\":\"contract IConvexRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEstimates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMostPremium\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_estimates\",\"type\":\"uint256[]\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract IManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mim\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mimCvxDepositLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"routerArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_routerIndex\",\"type\":\"uint256\"}],\"name\":\"setDefaultRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_routerArray\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokenArray\",\"type\":\"address[]\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwap2Pool\",\"outputs\":[{\"internalType\":\"contract IStableSwap2Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwap3Pool\",\"outputs\":[{\"internalType\":\"contract IStableSwap3Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MIMConvexStrategy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000001c00000000000000000000000005a6a4d54456819380173272a5e8e9b9904bdf41b000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd520000000000000000000000004e3fbd56cd56c3e72c1403e103b45db9da5b9d2b000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000099d8a9c45b2eca8864373a26d1459e3dff1e17f30000000000000000000000006c3f90f043a72fa612cbac8115ee7e52bde6e490000000000000000000000000bebc44782c7db0a1a60cb6fe97d0b483032ff1c70000000000000000000000000000000000000000000000000000000000000028000000000000000000000000f403c135812408bfbe8713b5a23a04b3d48aae310000000000000000000000005a6a4d54456819380173272a5e8e9b9904bdf41b000000000000000000000000834ebce3b3fb5b9647d9398a1f6f44a2e831ac60000000000000000000000000ab72cc293b63f6477baf9d514da735cf6caadc2d0000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000e436f6e7665783a204d494d4352560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}