{"status":"1","message":"OK","result":[{"SourceCode":"/*\n    ___            _       ___  _                          \n    | .\\ ___  _ _ <_> ___ | __><_>._ _  ___ ._ _  ___  ___ \n    |  _// ._>| '_>| ||___|| _> | || ' |<_> || ' |/ | '/ ._>\n    |_|  \\___.|_|  |_|     |_|  |_||_|_|<___||_|_|\\_|_.\\___.\n    \n* PeriFinance: PynthUtil.sol\n*\n* Latest source (may be newer): https://github.com/perifinance/peri-finance/blob/master/contracts/PynthUtil.sol\n* Docs: Will be added in the future. \n* https://docs.peri.finance/contracts/source/contracts/PynthUtil\n*\n* Contract Dependencies: (none)\n* Libraries: (none)\n*\n* MIT License\n* ===========\n*\n* Copyright (c) 2021 PeriFinance\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n*/\n\n\n\npragma solidity 0.5.16;\n\n// https://docs.peri.finance/contracts/source/interfaces/ipynth\ninterface IPynth {\n    // Views\n    function currencyKey() external view returns (bytes32);\n\n    function transferablePynths(address account) external view returns (uint);\n\n    // Mutative functions\n    function transferAndSettle(address to, uint value) external returns (bool);\n\n    function transferFromAndSettle(\n        address from,\n        address to,\n        uint value\n    ) external returns (bool);\n\n    // Restricted: used internally to PeriFinance\n    function burn(address account, uint amount) external;\n\n    function issue(address account, uint amount) external;\n}\n\n\ninterface IVirtualPynth {\n    // Views\n    function balanceOfUnderlying(address account) external view returns (uint);\n\n    function rate() external view returns (uint);\n\n    function readyToSettle() external view returns (bool);\n\n    function secsLeftInWaitingPeriod() external view returns (uint);\n\n    function settled() external view returns (bool);\n\n    function pynth() external view returns (IPynth);\n\n    // Mutative functions\n    function settle(address account) external;\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/iperiFinance\ninterface IPeriFinance {\n    // Views\n    function getRequiredAddress(bytes32 contractName) external view returns (address);\n\n    function anyPynthOrPERIRateIsInvalid() external view returns (bool anyRateInvalid);\n\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\n\n    function availablePynthCount() external view returns (uint);\n\n    function availablePynths(uint index) external view returns (IPynth);\n\n    function collateral(address account) external view returns (uint);\n\n    function collateralisationRatio(address issuer) external view returns (uint);\n\n    function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns (uint);\n\n    function isWaitingPeriod(bytes32 currencyKey) external view returns (bool);\n\n    function maxIssuablePynths(address issuer) external view returns (uint maxIssuable);\n\n    function externalTokenQuota(\n        address _account,\n        uint _additionalpUSD,\n        uint _additionalExToken,\n        bool _isIssue\n    ) external view returns (uint);\n\n    function remainingIssuablePynths(address issuer)\n        external\n        view\n        returns (\n            uint maxIssuable,\n            uint alreadyIssued,\n            uint totalSystemDebt\n        );\n\n    function maxExternalTokenStakeAmount(address _account, bytes32 _currencyKey)\n        external\n        view\n        returns (uint issueAmountToQuota, uint stakeAmountToQuota);\n\n    function pynths(bytes32 currencyKey) external view returns (IPynth);\n\n    function pynthsByAddress(address pynthAddress) external view returns (bytes32);\n\n    function totalIssuedPynths(bytes32 currencyKey) external view returns (uint);\n\n    function totalIssuedPynthsExcludeEtherCollateral(bytes32 currencyKey) external view returns (uint);\n\n    function transferablePeriFinance(address account) external view returns (uint transferable);\n\n    // Mutative Functions\n    function issuePynths(bytes32 _currencyKey, uint _issueAmount) external;\n\n    function issueMaxPynths() external;\n\n    function issuePynthsToMaxQuota(bytes32 _currencyKey) external;\n\n    function burnPynths(bytes32 _currencyKey, uint _burnAmount) external;\n\n    function fitToClaimable() external;\n\n    function exit() external;\n\n    function exchange(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external returns (uint amountReceived);\n\n    function exchangeOnBehalf(\n        address exchangeForAddress,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external returns (uint amountReceived);\n\n    function exchangeWithTracking(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address originator,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived);\n\n    function exchangeOnBehalfWithTracking(\n        address exchangeForAddress,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address originator,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived);\n\n    function exchangeWithVirtual(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived, IVirtualPynth vPynth);\n\n    function mint(address _user, uint _amount) external returns (bool);\n\n    function inflationalMint(uint _networkDebtShare) external returns (bool);\n\n    function settle(bytes32 currencyKey)\n        external\n        returns (\n            uint reclaimed,\n            uint refunded,\n            uint numEntries\n        );\n\n    // Liquidations\n    function liquidateDelinquentAccount(address account, uint pusdAmount) external returns (bool);\n\n    // Restricted Functions\n\n    function mintSecondary(address account, uint amount) external;\n\n    function mintSecondaryRewards(uint amount) external;\n\n    function burnSecondary(address account, uint amount) external;\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/iexchangerates\ninterface IExchangeRates {\n    // Structs\n    struct RateAndUpdatedTime {\n        uint216 rate;\n        uint40 time;\n    }\n\n    struct InversePricing {\n        uint entryPoint;\n        uint upperLimit;\n        uint lowerLimit;\n        bool frozenAtUpperLimit;\n        bool frozenAtLowerLimit;\n    }\n\n    // Views\n    function aggregators(bytes32 currencyKey) external view returns (address);\n\n    function aggregatorWarningFlags() external view returns (address);\n\n    function anyRateIsInvalid(bytes32[] calldata currencyKeys) external view returns (bool);\n\n    function canFreezeRate(bytes32 currencyKey) external view returns (bool);\n\n    function currentRoundForRate(bytes32 currencyKey) external view returns (uint);\n\n    function currenciesUsingAggregator(address aggregator) external view returns (bytes32[] memory);\n\n    function effectiveValue(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external view returns (uint value);\n\n    function effectiveValueAndRates(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    )\n        external\n        view\n        returns (\n            uint value,\n            uint sourceRate,\n            uint destinationRate\n        );\n\n    function effectiveValueAtRound(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        uint roundIdForSrc,\n        uint roundIdForDest\n    ) external view returns (uint value);\n\n    function getCurrentRoundId(bytes32 currencyKey) external view returns (uint);\n\n    function getLastRoundIdBeforeElapsedSecs(\n        bytes32 currencyKey,\n        uint startingRoundId,\n        uint startingTimestamp,\n        uint timediff\n    ) external view returns (uint);\n\n    function inversePricing(bytes32 currencyKey)\n        external\n        view\n        returns (\n            uint entryPoint,\n            uint upperLimit,\n            uint lowerLimit,\n            bool frozenAtUpperLimit,\n            bool frozenAtLowerLimit\n        );\n\n    function lastRateUpdateTimes(bytes32 currencyKey) external view returns (uint256);\n\n    function oracle() external view returns (address);\n\n    function rateAndTimestampAtRound(bytes32 currencyKey, uint roundId) external view returns (uint rate, uint time);\n\n    function rateAndUpdatedTime(bytes32 currencyKey) external view returns (uint rate, uint time);\n\n    function rateAndInvalid(bytes32 currencyKey) external view returns (uint rate, bool isInvalid);\n\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint);\n\n    function rateIsFlagged(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsFrozen(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsInvalid(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsStale(bytes32 currencyKey) external view returns (bool);\n\n    function rateStalePeriod() external view returns (uint);\n\n    function ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32 currencyKey, uint numRounds)\n        external\n        view\n        returns (uint[] memory rates, uint[] memory times);\n\n    function ratesAndInvalidForCurrencies(bytes32[] calldata currencyKeys)\n        external\n        view\n        returns (uint[] memory rates, bool anyRateInvalid);\n\n    function ratesForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory);\n\n    // Mutative functions\n    function freezeRate(bytes32 currencyKey) external;\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/iaddressresolver\ninterface IAddressResolver {\n    function getAddress(bytes32 name) external view returns (address);\n\n    function getPynth(bytes32 key) external view returns (address);\n\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/ierc20\ninterface IERC20 {\n    // ERC20 Optional Views\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    // Views\n    function totalSupply() external view returns (uint);\n\n    function balanceOf(address owner) external view returns (uint);\n\n    function allowance(address owner, address spender) external view returns (uint);\n\n    // Mutative functions\n    function transfer(address to, uint value) external returns (bool);\n\n    function approve(address spender, uint value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint value\n    ) external returns (bool);\n\n    // Events\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\n// Inheritance\n\n\n// https://docs.peri.finance/contracts/source/contracts/pynthutil\ncontract PynthUtil {\n    IAddressResolver public addressResolverProxy;\n\n    bytes32 internal constant CONTRACT_PERIFINANCE = \"PeriFinance\";\n    bytes32 internal constant CONTRACT_EXRATES = \"ExchangeRates\";\n    bytes32 internal constant PUSD = \"pUSD\";\n\n    constructor(address resolver) public {\n        addressResolverProxy = IAddressResolver(resolver);\n    }\n\n    function _periFinance() internal view returns (IPeriFinance) {\n        return IPeriFinance(addressResolverProxy.requireAndGetAddress(CONTRACT_PERIFINANCE, \"Missing PeriFinance address\"));\n    }\n\n    function _exchangeRates() internal view returns (IExchangeRates) {\n        return IExchangeRates(addressResolverProxy.requireAndGetAddress(CONTRACT_EXRATES, \"Missing ExchangeRates address\"));\n    }\n\n    function totalPynthsInKey(address account, bytes32 currencyKey) external view returns (uint total) {\n        IPeriFinance periFinance = _periFinance();\n        IExchangeRates exchangeRates = _exchangeRates();\n        uint numPynths = periFinance.availablePynthCount();\n        for (uint i = 0; i < numPynths; i++) {\n            IPynth pynth = periFinance.availablePynths(i);\n            total += exchangeRates.effectiveValue(\n                pynth.currencyKey(),\n                IERC20(address(pynth)).balanceOf(account),\n                currencyKey\n            );\n        }\n        return total;\n    }\n\n    function pynthsBalances(address account)\n        external\n        view\n        returns (\n            bytes32[] memory,\n            uint[] memory,\n            uint[] memory\n        )\n    {\n        IPeriFinance periFinance = _periFinance();\n        IExchangeRates exchangeRates = _exchangeRates();\n        uint numPynths = periFinance.availablePynthCount();\n        bytes32[] memory currencyKeys = new bytes32[](numPynths);\n        uint[] memory balances = new uint[](numPynths);\n        uint[] memory pUSDBalances = new uint[](numPynths);\n        for (uint i = 0; i < numPynths; i++) {\n            IPynth pynth = periFinance.availablePynths(i);\n            currencyKeys[i] = pynth.currencyKey();\n            balances[i] = IERC20(address(pynth)).balanceOf(account);\n            pUSDBalances[i] = exchangeRates.effectiveValue(currencyKeys[i], balances[i], PUSD);\n        }\n        return (currencyKeys, balances, pUSDBalances);\n    }\n\n    function frozenPynths() external view returns (bytes32[] memory) {\n        IPeriFinance periFinance = _periFinance();\n        IExchangeRates exchangeRates = _exchangeRates();\n        uint numPynths = periFinance.availablePynthCount();\n        bytes32[] memory frozenPynthsKeys = new bytes32[](numPynths);\n        for (uint i = 0; i < numPynths; i++) {\n            IPynth pynth = periFinance.availablePynths(i);\n            if (exchangeRates.rateIsFrozen(pynth.currencyKey())) {\n                frozenPynthsKeys[i] = pynth.currencyKey();\n            }\n        }\n        return frozenPynthsKeys;\n    }\n\n    function pynthsRates() external view returns (bytes32[] memory, uint[] memory) {\n        bytes32[] memory currencyKeys = _periFinance().availableCurrencyKeys();\n        return (currencyKeys, _exchangeRates().ratesForCurrencies(currencyKeys));\n    }\n\n    function pynthsTotalSupplies()\n        external\n        view\n        returns (\n            bytes32[] memory,\n            uint256[] memory,\n            uint256[] memory\n        )\n    {\n        IPeriFinance periFinance = _periFinance();\n        IExchangeRates exchangeRates = _exchangeRates();\n\n        uint256 numPynths = periFinance.availablePynthCount();\n        bytes32[] memory currencyKeys = new bytes32[](numPynths);\n        uint256[] memory balances = new uint256[](numPynths);\n        uint256[] memory pUSDBalances = new uint256[](numPynths);\n        for (uint256 i = 0; i < numPynths; i++) {\n            IPynth pynth = periFinance.availablePynths(i);\n            currencyKeys[i] = pynth.currencyKey();\n            balances[i] = IERC20(address(pynth)).totalSupply();\n            pUSDBalances[i] = exchangeRates.effectiveValue(currencyKeys[i], balances[i], PUSD);\n        }\n        return (currencyKeys, balances, pUSDBalances);\n    }\n}\n\n    ","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressResolverProxy\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenPynths\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pynthsBalances\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pynthsRates\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pynthsTotalSupplies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"totalPynthsInKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PynthUtil","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007015cd1e78ba1428d103b0c2513077b2826b64fc","EVMVersion":"Default","Library":"SafeDecimalMath:6e0bff12512a94f3b1ecebe08203fe7f8f8fae64","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}