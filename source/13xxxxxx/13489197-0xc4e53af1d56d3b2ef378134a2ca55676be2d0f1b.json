{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\npragma solidity 0.5.7;\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/lib/Require.sol\r\n\r\n/**\r\n * @title Require\r\n * @author dYdX\r\n *\r\n * Stringifies parameters to pretty-print revert messages. Costs more gas than regular require()\r\n */\r\nlibrary Require {\r\n\r\n    // ============ Constants ============\r\n\r\n    uint256 constant ASCII_ZERO = 48; // '0'\r\n    uint256 constant ASCII_RELATIVE_ZERO = 87; // 'a' - 10\r\n    uint256 constant ASCII_LOWER_EX = 120; // 'x'\r\n    bytes2 constant COLON = 0x3a20; // ': '\r\n    bytes2 constant COMMA = 0x2c20; // ', '\r\n    bytes2 constant LPAREN = 0x203c; // ' <'\r\n    byte constant RPAREN = 0x3e; // '>'\r\n    uint256 constant FOUR_BIT_MASK = 0xf;\r\n\r\n    // ============ Library Functions ============\r\n\r\n    function that(\r\n        bool must,\r\n        bytes32 file,\r\n        bytes32 reason\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        if (!must) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        stringify(file),\r\n                        COLON,\r\n                        stringify(reason)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function that(\r\n        bool must,\r\n        bytes32 file,\r\n        bytes32 reason,\r\n        uint256 payloadA\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        if (!must) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        stringify(file),\r\n                        COLON,\r\n                        stringify(reason),\r\n                        LPAREN,\r\n                        stringify(payloadA),\r\n                        RPAREN\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function that(\r\n        bool must,\r\n        bytes32 file,\r\n        bytes32 reason,\r\n        uint256 payloadA,\r\n        uint256 payloadB\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        if (!must) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        stringify(file),\r\n                        COLON,\r\n                        stringify(reason),\r\n                        LPAREN,\r\n                        stringify(payloadA),\r\n                        COMMA,\r\n                        stringify(payloadB),\r\n                        RPAREN\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function that(\r\n        bool must,\r\n        bytes32 file,\r\n        bytes32 reason,\r\n        address payloadA\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        if (!must) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        stringify(file),\r\n                        COLON,\r\n                        stringify(reason),\r\n                        LPAREN,\r\n                        stringify(payloadA),\r\n                        RPAREN\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function that(\r\n        bool must,\r\n        bytes32 file,\r\n        bytes32 reason,\r\n        address payloadA,\r\n        uint256 payloadB\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        if (!must) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        stringify(file),\r\n                        COLON,\r\n                        stringify(reason),\r\n                        LPAREN,\r\n                        stringify(payloadA),\r\n                        COMMA,\r\n                        stringify(payloadB),\r\n                        RPAREN\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function that(\r\n        bool must,\r\n        bytes32 file,\r\n        bytes32 reason,\r\n        address payloadA,\r\n        uint256 payloadB,\r\n        uint256 payloadC\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        if (!must) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        stringify(file),\r\n                        COLON,\r\n                        stringify(reason),\r\n                        LPAREN,\r\n                        stringify(payloadA),\r\n                        COMMA,\r\n                        stringify(payloadB),\r\n                        COMMA,\r\n                        stringify(payloadC),\r\n                        RPAREN\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    // ============ Private Functions ============\r\n\r\n    function stringify(\r\n        bytes32 input\r\n    )\r\n        private\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        // put the input bytes into the result\r\n        bytes memory result = abi.encodePacked(input);\r\n\r\n        // determine the length of the input by finding the location of the last non-zero byte\r\n        for (uint256 i = 32; i > 0; ) {\r\n            // reverse-for-loops with unsigned integer\r\n            /* solium-disable-next-line security/no-modify-for-iter-var */\r\n            i--;\r\n\r\n            // find the last non-zero byte in order to determine the length\r\n            if (result[i] != 0) {\r\n                uint256 length = i + 1;\r\n\r\n                /* solium-disable-next-line security/no-inline-assembly */\r\n                assembly {\r\n                    mstore(result, length) // r.length = length;\r\n                }\r\n\r\n                return result;\r\n            }\r\n        }\r\n\r\n        // all bytes are zero\r\n        return new bytes(0);\r\n    }\r\n\r\n    function stringify(\r\n        uint256 input\r\n    )\r\n        private\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        if (input == 0) {\r\n            return \"0\";\r\n        }\r\n\r\n        // get the final string length\r\n        uint256 j = input;\r\n        uint256 length;\r\n        while (j != 0) {\r\n            length++;\r\n            j /= 10;\r\n        }\r\n\r\n        // allocate the string\r\n        bytes memory bstr = new bytes(length);\r\n\r\n        // populate the string starting with the least-significant character\r\n        j = input;\r\n        for (uint256 i = length; i > 0; ) {\r\n            // reverse-for-loops with unsigned integer\r\n            /* solium-disable-next-line security/no-modify-for-iter-var */\r\n            i--;\r\n\r\n            // take last decimal digit\r\n            bstr[i] = byte(uint8(ASCII_ZERO + (j % 10)));\r\n\r\n            // remove the last decimal digit\r\n            j /= 10;\r\n        }\r\n\r\n        return bstr;\r\n    }\r\n\r\n    function stringify(\r\n        address input\r\n    )\r\n        private\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        uint256 z = uint256(input);\r\n\r\n        // addresses are \"0x\" followed by 20 bytes of data which take up 2 characters each\r\n        bytes memory result = new bytes(42);\r\n\r\n        // populate the result with \"0x\"\r\n        result[0] = byte(uint8(ASCII_ZERO));\r\n        result[1] = byte(uint8(ASCII_LOWER_EX));\r\n\r\n        // for each byte (starting from the lowest byte), populate the result with two characters\r\n        for (uint256 i = 0; i < 20; i++) {\r\n            // each byte takes two characters\r\n            uint256 shift = i * 2;\r\n\r\n            // populate the least-significant character\r\n            result[41 - shift] = char(z & FOUR_BIT_MASK);\r\n            z = z >> 4;\r\n\r\n            // populate the most-significant character\r\n            result[40 - shift] = char(z & FOUR_BIT_MASK);\r\n            z = z >> 4;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function char(\r\n        uint256 input\r\n    )\r\n        private\r\n        pure\r\n        returns (byte)\r\n    {\r\n        // return ASCII digit (0-9)\r\n        if (input < 10) {\r\n            return byte(uint8(input + ASCII_ZERO));\r\n        }\r\n\r\n        // return ASCII letter (a-f)\r\n        return byte(uint8(input + ASCII_RELATIVE_ZERO));\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/lib/Math.sol\r\n\r\n/**\r\n * @title Math\r\n * @author dYdX\r\n *\r\n * Library for non-standard Math functions\r\n */\r\nlibrary Math {\r\n    using SafeMath for uint256;\r\n\r\n    // ============ Constants ============\r\n\r\n    bytes32 constant FILE = \"Math\";\r\n\r\n    // ============ Library Functions ============\r\n\r\n    /*\r\n     * Return target * (numerator / denominator).\r\n     */\r\n    function getPartial(\r\n        uint256 target,\r\n        uint256 numerator,\r\n        uint256 denominator\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return target.mul(numerator).div(denominator);\r\n    }\r\n\r\n    /*\r\n     * Return target * (numerator / denominator), but rounded up.\r\n     */\r\n    function getPartialRoundUp(\r\n        uint256 target,\r\n        uint256 numerator,\r\n        uint256 denominator\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (target == 0 || numerator == 0) {\r\n            // SafeMath will check for zero denominator\r\n            return SafeMath.div(0, denominator);\r\n        }\r\n        return target.mul(numerator).sub(1).div(denominator).add(1);\r\n    }\r\n\r\n    function to128(\r\n        uint256 number\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint128)\r\n    {\r\n        uint128 result = uint128(number);\r\n        Require.that(\r\n            result == number,\r\n            FILE,\r\n            \"Unsafe cast to uint128\"\r\n        );\r\n        return result;\r\n    }\r\n\r\n    function to96(\r\n        uint256 number\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint96)\r\n    {\r\n        uint96 result = uint96(number);\r\n        Require.that(\r\n            result == number,\r\n            FILE,\r\n            \"Unsafe cast to uint96\"\r\n        );\r\n        return result;\r\n    }\r\n\r\n    function to32(\r\n        uint256 number\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint32)\r\n    {\r\n        uint32 result = uint32(number);\r\n        Require.that(\r\n            result == number,\r\n            FILE,\r\n            \"Unsafe cast to uint32\"\r\n        );\r\n        return result;\r\n    }\r\n\r\n    function min(\r\n        uint256 a,\r\n        uint256 b\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max(\r\n        uint256 a,\r\n        uint256 b\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a > b ? a : b;\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/lib/Types.sol\r\n\r\n/**\r\n * @title Types\r\n * @author dYdX\r\n *\r\n * Library for interacting with the basic structs used in Solo\r\n */\r\nlibrary Types {\r\n    using Math for uint256;\r\n\r\n    // ============ AssetAmount ============\r\n\r\n    enum AssetDenomination {\r\n        Wei, // the amount is denominated in wei\r\n        Par  // the amount is denominated in par\r\n    }\r\n\r\n    enum AssetReference {\r\n        Delta, // the amount is given as a delta from the current value\r\n        Target // the amount is given as an exact number to end up at\r\n    }\r\n\r\n    struct AssetAmount {\r\n        bool sign; // true if positive\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n\r\n    // ============ Par (Principal Amount) ============\r\n\r\n    // Total borrow and supply values for a market\r\n    struct TotalPar {\r\n        uint128 borrow;\r\n        uint128 supply;\r\n    }\r\n\r\n    // Individual principal amount for an account\r\n    struct Par {\r\n        bool sign; // true if positive\r\n        uint128 value;\r\n    }\r\n\r\n    function zeroPar()\r\n        internal\r\n        pure\r\n        returns (Par memory)\r\n    {\r\n        return Par({\r\n            sign: false,\r\n            value: 0\r\n        });\r\n    }\r\n\r\n    function sub(\r\n        Par memory a,\r\n        Par memory b\r\n    )\r\n        internal\r\n        pure\r\n        returns (Par memory)\r\n    {\r\n        return add(a, negative(b));\r\n    }\r\n\r\n    function add(\r\n        Par memory a,\r\n        Par memory b\r\n    )\r\n        internal\r\n        pure\r\n        returns (Par memory)\r\n    {\r\n        Par memory result;\r\n        if (a.sign == b.sign) {\r\n            result.sign = a.sign;\r\n            result.value = SafeMath.add(a.value, b.value).to128();\r\n        } else {\r\n            if (a.value >= b.value) {\r\n                result.sign = a.sign;\r\n                result.value = SafeMath.sub(a.value, b.value).to128();\r\n            } else {\r\n                result.sign = b.sign;\r\n                result.value = SafeMath.sub(b.value, a.value).to128();\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function equals(\r\n        Par memory a,\r\n        Par memory b\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        if (a.value == b.value) {\r\n            if (a.value == 0) {\r\n                return true;\r\n            }\r\n            return a.sign == b.sign;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function negative(\r\n        Par memory a\r\n    )\r\n        internal\r\n        pure\r\n        returns (Par memory)\r\n    {\r\n        return Par({\r\n            sign: !a.sign,\r\n            value: a.value\r\n        });\r\n    }\r\n\r\n    function isNegative(\r\n        Par memory a\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return !a.sign && a.value > 0;\r\n    }\r\n\r\n    function isPositive(\r\n        Par memory a\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return a.sign && a.value > 0;\r\n    }\r\n\r\n    function isZero(\r\n        Par memory a\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return a.value == 0;\r\n    }\r\n\r\n    // ============ Wei (Token Amount) ============\r\n\r\n    // Individual token amount for an account\r\n    struct Wei {\r\n        bool sign; // true if positive\r\n        uint256 value;\r\n    }\r\n\r\n    function zeroWei()\r\n        internal\r\n        pure\r\n        returns (Wei memory)\r\n    {\r\n        return Wei({\r\n            sign: false,\r\n            value: 0\r\n        });\r\n    }\r\n\r\n    function sub(\r\n        Wei memory a,\r\n        Wei memory b\r\n    )\r\n        internal\r\n        pure\r\n        returns (Wei memory)\r\n    {\r\n        return add(a, negative(b));\r\n    }\r\n\r\n    function add(\r\n        Wei memory a,\r\n        Wei memory b\r\n    )\r\n        internal\r\n        pure\r\n        returns (Wei memory)\r\n    {\r\n        Wei memory result;\r\n        if (a.sign == b.sign) {\r\n            result.sign = a.sign;\r\n            result.value = SafeMath.add(a.value, b.value);\r\n        } else {\r\n            if (a.value >= b.value) {\r\n                result.sign = a.sign;\r\n                result.value = SafeMath.sub(a.value, b.value);\r\n            } else {\r\n                result.sign = b.sign;\r\n                result.value = SafeMath.sub(b.value, a.value);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function equals(\r\n        Wei memory a,\r\n        Wei memory b\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        if (a.value == b.value) {\r\n            if (a.value == 0) {\r\n                return true;\r\n            }\r\n            return a.sign == b.sign;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function negative(\r\n        Wei memory a\r\n    )\r\n        internal\r\n        pure\r\n        returns (Wei memory)\r\n    {\r\n        return Wei({\r\n            sign: !a.sign,\r\n            value: a.value\r\n        });\r\n    }\r\n\r\n    function isNegative(\r\n        Wei memory a\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return !a.sign && a.value > 0;\r\n    }\r\n\r\n    function isPositive(\r\n        Wei memory a\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return a.sign && a.value > 0;\r\n    }\r\n\r\n    function isZero(\r\n        Wei memory a\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return a.value == 0;\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/lib/Account.sol\r\n\r\n/**\r\n * @title Account\r\n * @author dYdX\r\n *\r\n * Library of structs and functions that represent an account\r\n */\r\nlibrary Account {\r\n    // ============ Enums ============\r\n\r\n    /*\r\n     * Most-recently-cached account status.\r\n     *\r\n     * Normal: Can only be liquidated if the account values are violating the global margin-ratio.\r\n     * Liquid: Can be liquidated no matter the account values.\r\n     *         Can be vaporized if there are no more positive account values.\r\n     * Vapor:  Has only negative (or zeroed) account values. Can be vaporized.\r\n     *\r\n     */\r\n    enum Status {\r\n        Normal,\r\n        Liquid,\r\n        Vapor\r\n    }\r\n\r\n    // ============ Structs ============\r\n\r\n    // Represents the unique key that specifies an account\r\n    struct Info {\r\n        address owner;  // The address that owns the account\r\n        uint256 number; // A nonce that allows a single address to control many accounts\r\n    }\r\n\r\n    // The complete storage for any account\r\n    struct Storage {\r\n        mapping (uint256 => Types.Par) balances; // Mapping from marketId to principal\r\n        Status status;\r\n    }\r\n\r\n    // ============ Library Functions ============\r\n\r\n    function equals(\r\n        Info memory a,\r\n        Info memory b\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return a.owner == b.owner && a.number == b.number;\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IAutoTrader.sol\r\n\r\n/**\r\n * @title IAutoTrader\r\n * @author dYdX\r\n *\r\n * Interface that Auto-Traders for Solo must implement in order to approve trades.\r\n */\r\ncontract IAutoTrader {\r\n\r\n    // ============ Public Functions ============\r\n\r\n    /**\r\n     * Allows traders to make trades approved by this smart contract. The active trader's account is\r\n     * the takerAccount and the passive account (for which this contract approves trades\r\n     * on-behalf-of) is the makerAccount.\r\n     *\r\n     * @param  inputMarketId   The market for which the trader specified the original amount\r\n     * @param  outputMarketId  The market for which the trader wants the resulting amount specified\r\n     * @param  makerAccount    The account for which this contract is making trades\r\n     * @param  takerAccount    The account requesting the trade\r\n     * @param  oldInputPar     The old principal amount for the makerAccount for the inputMarketId\r\n     * @param  newInputPar     The new principal amount for the makerAccount for the inputMarketId\r\n     * @param  inputWei        The change in token amount for the makerAccount for the inputMarketId\r\n     * @param  data            Arbitrary data passed in by the trader\r\n     * @return                 The AssetAmount for the makerAccount for the outputMarketId\r\n     */\r\n    function getTradeCost(\r\n        uint256 inputMarketId,\r\n        uint256 outputMarketId,\r\n        Account.Info memory makerAccount,\r\n        Account.Info memory takerAccount,\r\n        Types.Par memory oldInputPar,\r\n        Types.Par memory newInputPar,\r\n        Types.Wei memory inputWei,\r\n        bytes memory data\r\n    )\r\n        public\r\n        returns (Types.AssetAmount memory);\r\n}\r\n\r\n// File: contracts/protocol/lib/Decimal.sol\r\n\r\n/**\r\n * @title Decimal\r\n * @author dYdX\r\n *\r\n * Library that defines a fixed-point number with 18 decimal places.\r\n */\r\nlibrary Decimal {\r\n    using SafeMath for uint256;\r\n\r\n    // ============ Constants ============\r\n\r\n    uint256 constant BASE = 10**18;\r\n\r\n    // ============ Structs ============\r\n\r\n    struct D256 {\r\n        uint256 value;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    function one()\r\n        internal\r\n        pure\r\n        returns (D256 memory)\r\n    {\r\n        return D256({ value: BASE });\r\n    }\r\n\r\n    function onePlus(\r\n        D256 memory d\r\n    )\r\n        internal\r\n        pure\r\n        returns (D256 memory)\r\n    {\r\n        return D256({ value: d.value.add(BASE) });\r\n    }\r\n\r\n    function mul(\r\n        uint256 target,\r\n        D256 memory d\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return Math.getPartial(target, d.value, BASE);\r\n    }\r\n\r\n    function div(\r\n        uint256 target,\r\n        D256 memory d\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return Math.getPartial(target, BASE, d.value);\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/lib/Monetary.sol\r\n\r\n/**\r\n * @title Monetary\r\n * @author dYdX\r\n *\r\n * Library for types involving money\r\n */\r\nlibrary Monetary {\r\n\r\n    /*\r\n     * The price of a base-unit of an asset.\r\n     */\r\n    struct Price {\r\n        uint256 value;\r\n    }\r\n\r\n    /*\r\n     * Total value of an some amount of an asset. Equal to (price * amount).\r\n     */\r\n    struct Value {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/lib/Time.sol\r\n\r\n/**\r\n * @title Time\r\n * @author dYdX\r\n *\r\n * Library for dealing with time, assuming timestamps fit within 32 bits (valid until year 2106)\r\n */\r\nlibrary Time {\r\n\r\n    // ============ Library Functions ============\r\n\r\n    function currentTime()\r\n        internal\r\n        view\r\n        returns (uint32)\r\n    {\r\n        return Math.to32(block.timestamp);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2π.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter);\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/Getters.sol\r\n\r\n/**\r\n * @title Getters\r\n * @author dYdX\r\n *\r\n * Public read-only functions that allow transparency into the state of Solo\r\n */\r\ncontract Getters {\r\n    // ============ Constants ============\r\n\r\n    bytes32 FILE = \"Getters\";\r\n\r\n    // ============ Getters for Risk ============\r\n\r\n    /* ... */\r\n\r\n    // ============ Getters for Markets ============\r\n\r\n    /**\r\n     * Get the total number of markets.\r\n     *\r\n     * @return  The number of markets\r\n     */\r\n    function getNumMarkets()\r\n        public\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * Get the ERC20 token address for a market.\r\n     *\r\n     * @param  marketId  The market to query\r\n     * @return           The token address\r\n     */\r\n    function getMarketTokenAddress(\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (address);\r\n\r\n    /**\r\n     * Get the total principal amounts (borrowed and supplied) for a market.\r\n     *\r\n     * @param  marketId  The market to query\r\n     * @return           The total principal amounts\r\n     */\r\n    function getMarketTotalPar(\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (Types.TotalPar memory);\r\n\r\n    /* ... */\r\n\r\n    /**\r\n     * Get the margin premium for a market. A margin premium makes it so that any positions that\r\n     * include the market require a higher collateralization to avoid being liquidated.\r\n     *\r\n     * @param  marketId  The market to query\r\n     * @return           The market's margin premium\r\n     */\r\n    function getMarketMarginPremium(\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (Decimal.D256 memory);\r\n\r\n    /**\r\n     * Get the spread premium for a market. A spread premium makes it so that any liquidations\r\n     * that include the market have a higher spread than the global default.\r\n     *\r\n     * @param  marketId  The market to query\r\n     * @return           The market's spread premium\r\n     */\r\n    function getMarketSpreadPremium(\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (Decimal.D256 memory);\r\n\r\n    /**\r\n     * Return true if a particular market is in closing mode. Additional borrows cannot be taken\r\n     * from a market that is closing.\r\n     *\r\n     * @param  marketId  The market to query\r\n     * @return           True if the market is closing\r\n     */\r\n    function getMarketIsClosing(\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * Get the price of the token for a market.\r\n     *\r\n     * @param  marketId  The market to query\r\n     * @return           The price of each atomic unit of the token\r\n     */\r\n    function getMarketPrice(\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (Monetary.Price memory);\r\n\r\n    /* ... */\r\n\r\n    /**\r\n     * Get the adjusted liquidation spread for some market pair. This is equal to the global\r\n     * liquidation spread multiplied by (1 + spreadPremium) for each of the two markets.\r\n     *\r\n     * @param  heldMarketId  The market for which the account has collateral\r\n     * @param  owedMarketId  The market for which the account has borrowed tokens\r\n     * @return               The adjusted liquidation spread\r\n     */\r\n    function getLiquidationSpreadForPair(\r\n        uint256 heldMarketId,\r\n        uint256 owedMarketId\r\n    )\r\n        public\r\n        view\r\n        returns (Decimal.D256 memory);\r\n\r\n    /* ... */\r\n\r\n    /**\r\n     * Get the number of excess tokens for a market. The number of excess tokens is calculated\r\n     * by taking the current number of tokens held in Solo, adding the number of tokens owed to Solo\r\n     * by borrowers, and subtracting the number of tokens owed to suppliers by Solo.\r\n     *\r\n     * @param  marketId  The market to query\r\n     * @return           The number of excess tokens\r\n     */\r\n    function getNumExcessTokens(\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (Types.Wei memory);\r\n\r\n    // ============ Getters for Accounts ============\r\n\r\n    /**\r\n     * Get the principal value for a particular account and market.\r\n     *\r\n     * @param  account   The account to query\r\n     * @param  marketId  The market to query\r\n     * @return           The principal value\r\n     */\r\n    function getAccountPar(\r\n        Account.Info memory account,\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (Types.Par memory);\r\n\r\n    /**\r\n     * Get the token balance for a particular account and market.\r\n     *\r\n     * @param  account   The account to query\r\n     * @param  marketId  The market to query\r\n     * @return           The token amount\r\n     */\r\n    function getAccountWei(\r\n        Account.Info memory account,\r\n        uint256 marketId\r\n    )\r\n        public\r\n        view\r\n        returns (Types.Wei memory);\r\n\r\n    /**\r\n     * Get the status of an account (Normal, Liquidating, or Vaporizing).\r\n     *\r\n     * @param  account  The account to query\r\n     * @return          The account's status\r\n     */\r\n    function getAccountStatus(\r\n        Account.Info memory account\r\n    )\r\n        public\r\n        view\r\n        returns (Account.Status);\r\n\r\n    /**\r\n     * Get the total supplied and total borrowed value of an account.\r\n     *\r\n     * @param  account  The account to query\r\n     * @return          The following values:\r\n     *                   - The supplied value of the account\r\n     *                   - The borrowed value of the account\r\n     */\r\n    function getAccountValues(\r\n        Account.Info memory account\r\n    )\r\n        public\r\n        view\r\n        returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    /**\r\n     * Get the total supplied and total borrowed values of an account adjusted by the marginPremium\r\n     * of each market. Supplied values are divided by (1 + marginPremium) for each market and\r\n     * borrowed values are multiplied by (1 + marginPremium) for each market. Comparing these\r\n     * adjusted values gives the margin-ratio of the account which will be compared to the global\r\n     * margin-ratio when determining if the account can be liquidated.\r\n     *\r\n     * @param  account  The account to query\r\n     * @return          The following values:\r\n     *                   - The supplied value of the account (adjusted for marginPremium)\r\n     *                   - The borrowed value of the account (adjusted for marginPremium)\r\n     */\r\n    function getAdjustedAccountValues(\r\n        Account.Info memory account\r\n    )\r\n        public\r\n        view\r\n        returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    /**\r\n     * Get an account's summary for each market.\r\n     *\r\n     * @param  account  The account to query\r\n     * @return          The following values:\r\n     *                   - The ERC20 token address for each market\r\n     *                   - The account's principal value for each market\r\n     *                   - The account's (supplied or borrowed) number of tokens for each market\r\n     */\r\n    function getAccountBalances(\r\n        Account.Info memory account\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            address[] memory,\r\n            Types.Par[] memory,\r\n            Types.Wei[] memory\r\n        );\r\n\r\n    // ============ Getters for Permissions ============\r\n\r\n    /**\r\n     * Return true if a particular address is approved as an operator for an owner's accounts.\r\n     * Approved operators can act on the accounts of the owner as if it were the operator's own.\r\n     *\r\n     * @param  owner     The owner of the accounts\r\n     * @param  operator  The possible operator\r\n     * @return           True if operator is approved for owner's accounts\r\n     */\r\n    function getIsLocalOperator(\r\n        address owner,\r\n        address operator\r\n    )\r\n        public\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * Return true if a particular address is approved as a global operator. Such an address can\r\n     * act on any account as if it were the operator's own.\r\n     *\r\n     * @param  operator  The address to query\r\n     * @return           True if operator is a global operator\r\n     */\r\n    function getIsGlobalOperator(\r\n        address operator\r\n    )\r\n        public\r\n        view\r\n        returns (bool);\r\n}\r\n\r\n// File: contracts/protocol/SoloMargin.sol\r\n\r\n/**\r\n * @title SoloMargin\r\n * @author dYdX\r\n *\r\n * Main contract that inherits from other contracts\r\n */\r\ncontract SoloMargin is\r\n    Getters\r\n{\r\n  /* ... */\r\n}\r\n\r\n// File: contracts/external/helpers/OnlySolo.sol\r\n\r\n/**\r\n * @title OnlySolo\r\n * @author dYdX\r\n *\r\n * Inheritable contract that restricts the calling of certain functions to Solo only\r\n */\r\ncontract OnlySolo {\r\n\r\n    // ============ Constants ============\r\n\r\n    bytes32 constant FILE = \"OnlySolo\";\r\n\r\n    // ============ Storage ============\r\n\r\n    SoloMargin public SOLO_MARGIN;\r\n\r\n    // ============ Constructor ============\r\n\r\n    constructor (\r\n        address soloMargin\r\n    )\r\n        public\r\n    {\r\n        SOLO_MARGIN = SoloMargin(soloMargin);\r\n    }\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier onlySolo(address from) {\r\n        Require.that(\r\n            from == address(SOLO_MARGIN),\r\n            FILE,\r\n            \"Only Solo can call function\",\r\n            from\r\n        );\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/external/traders/FinalSettlement.sol\r\n\r\n/**\r\n * @title FinalSettlement\r\n * @author dYdX\r\n *\r\n * FinalSettlement contract that allows closing of all positions on Solo.\r\n */\r\ncontract FinalSettlement is\r\n    OnlySolo,\r\n    IAutoTrader\r\n{\r\n    using Math for uint256;\r\n    using SafeMath for uint32;\r\n    using SafeMath for uint256;\r\n    using Types for Types.Par;\r\n    using Types for Types.Wei;\r\n\r\n    // ============ Constants ============\r\n\r\n    bytes32 constant FILE = \"FinalSettlement\";\r\n\r\n    // ============ Events ============\r\n\r\n    event Initialized(\r\n        uint32 time\r\n    );\r\n\r\n    event Settlement(\r\n        address indexed makerAddress,\r\n        address indexed takerAddress,\r\n        uint256 heldMarketId,\r\n        uint256 owedMarketId,\r\n        uint256 heldWei,\r\n        uint256 owedWei\r\n    );\r\n\r\n    // ============ Storage ============\r\n\r\n    // Time over which the liquidation spread goes from zero to maximum.\r\n    uint256 public g_spreadRampTime;\r\n\r\n    // Time at which the contract was initialized. Zero if uninitialized.\r\n    uint32 public g_startTime = 0;\r\n\r\n    // ============ Constructor ============\r\n\r\n    constructor (\r\n        address soloMargin,\r\n        uint256 rampTime\r\n    )\r\n        public\r\n        OnlySolo(soloMargin)\r\n    {\r\n        g_spreadRampTime = rampTime;\r\n    }\r\n\r\n    // ============ External Functions ============\r\n\r\n    function initialize()\r\n        external\r\n    {\r\n        Require.that(\r\n            g_startTime == 0,\r\n            FILE,\r\n            \"Already initialized\"\r\n        );\r\n        Require.that(\r\n            SOLO_MARGIN.getIsGlobalOperator(address(this)),\r\n            FILE,\r\n            \"Not a global operator\"\r\n        );\r\n\r\n        g_startTime = Time.currentTime();\r\n\r\n        emit Initialized(\r\n            g_startTime\r\n        );\r\n    }\r\n\r\n    // ============ Getters ============\r\n\r\n    function getSpreadAdjustedPrices(\r\n        uint256 heldMarketId,\r\n        uint256 owedMarketId,\r\n        uint32 timestamp\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            Monetary.Price memory,\r\n            Monetary.Price memory\r\n        )\r\n    {\r\n        // Require timestamp to be at-or-after initialization\r\n        Require.that(\r\n            g_startTime != 0,\r\n            FILE,\r\n            \"Not initialized\"\r\n        );\r\n\r\n        // Get the amount of time passed since deployment, bounded by the maximum ramp time.\r\n        uint256 rampedTime = Math.min(\r\n            timestamp.sub(g_startTime),\r\n            g_spreadRampTime\r\n        );\r\n\r\n        // Get the liquidation spread prorated by the ramp time.\r\n        Decimal.D256 memory spread = SOLO_MARGIN.getLiquidationSpreadForPair(\r\n            heldMarketId,\r\n            owedMarketId\r\n        );\r\n        spread.value = Math.getPartial(spread.value, rampedTime, g_spreadRampTime);\r\n\r\n        Monetary.Price memory heldPrice = SOLO_MARGIN.getMarketPrice(heldMarketId);\r\n        Monetary.Price memory owedPrice = SOLO_MARGIN.getMarketPrice(owedMarketId);\r\n        owedPrice.value = owedPrice.value.add(Decimal.mul(owedPrice.value, spread));\r\n\r\n        return (heldPrice, owedPrice);\r\n    }\r\n\r\n    // ============ Only-Solo Functions ============\r\n\r\n    function getTradeCost(\r\n        uint256 inputMarketId,\r\n        uint256 outputMarketId,\r\n        Account.Info memory makerAccount,\r\n        Account.Info memory takerAccount,\r\n        Types.Par memory oldInputPar,\r\n        Types.Par memory newInputPar,\r\n        Types.Wei memory inputWei,\r\n        bytes memory data\r\n    )\r\n        public\r\n        onlySolo(msg.sender)\r\n        returns (Types.AssetAmount memory)\r\n    {\r\n        // require contract to be initialized\r\n        Require.that(\r\n            g_startTime != 0,\r\n            FILE,\r\n            \"Contract must be initialized\"\r\n        );\r\n\r\n        // return zero if input amount is zero\r\n        if (inputWei.isZero()) {\r\n            return Types.AssetAmount({\r\n                sign: true,\r\n                denomination: Types.AssetDenomination.Par,\r\n                ref: Types.AssetReference.Delta,\r\n                value: 0\r\n            });\r\n        }\r\n\r\n        (uint256 owedMarketId) = abi.decode(data, (uint256));\r\n\r\n        Types.AssetAmount memory result = getTradeCostInternal(\r\n            inputMarketId,\r\n            outputMarketId,\r\n            makerAccount,\r\n            oldInputPar,\r\n            newInputPar,\r\n            inputWei,\r\n            owedMarketId\r\n        );\r\n\r\n        uint256 heldMarketId = (owedMarketId == inputMarketId)\r\n            ? outputMarketId\r\n            : inputMarketId;\r\n        uint256 heldWei = (owedMarketId == inputMarketId)\r\n            ? result.value\r\n            : inputWei.value;\r\n        uint256 owedWei = (owedMarketId == inputMarketId)\r\n            ? inputWei.value\r\n            : result.value;\r\n        emit Settlement(\r\n            makerAccount.owner,\r\n            takerAccount.owner,\r\n            heldMarketId,\r\n            owedMarketId,\r\n            heldWei,\r\n            owedWei\r\n        );\r\n\r\n        return result;\r\n    }\r\n\r\n    // ============ Helper Functions ============\r\n\r\n    function getTradeCostInternal(\r\n        uint256 inputMarketId,\r\n        uint256 outputMarketId,\r\n        Account.Info memory makerAccount,\r\n        Types.Par memory oldInputPar,\r\n        Types.Par memory newInputPar,\r\n        Types.Wei memory inputWei,\r\n        uint256 owedMarketId\r\n    )\r\n        private\r\n        view\r\n        returns (Types.AssetAmount memory)\r\n    {\r\n        Types.AssetAmount memory output;\r\n        Types.Wei memory maxOutputWei = SOLO_MARGIN.getAccountWei(makerAccount, outputMarketId);\r\n\r\n        if (inputWei.isPositive()) {\r\n            Require.that(\r\n                inputMarketId == owedMarketId,\r\n                FILE,\r\n                \"inputMarket mismatch\",\r\n                inputMarketId\r\n            );\r\n            Require.that(\r\n                !newInputPar.isPositive(),\r\n                FILE,\r\n                \"Borrows cannot be overpaid\",\r\n                newInputPar.value\r\n            );\r\n            assert(oldInputPar.isNegative());\r\n            Require.that(\r\n                maxOutputWei.isPositive(),\r\n                FILE,\r\n                \"Collateral must be positive\",\r\n                outputMarketId,\r\n                maxOutputWei.value\r\n            );\r\n            output = owedWeiToHeldWei(\r\n                inputWei,\r\n                outputMarketId,\r\n                inputMarketId\r\n            );\r\n        } else {\r\n            Require.that(\r\n                outputMarketId == owedMarketId,\r\n                FILE,\r\n                \"outputMarket mismatch\",\r\n                outputMarketId\r\n            );\r\n            Require.that(\r\n                !newInputPar.isNegative(),\r\n                FILE,\r\n                \"Collateral cannot be overused\",\r\n                newInputPar.value\r\n            );\r\n            assert(oldInputPar.isPositive());\r\n            Require.that(\r\n                maxOutputWei.isNegative(),\r\n                FILE,\r\n                \"Borrows must be negative\",\r\n                outputMarketId,\r\n                maxOutputWei.value\r\n            );\r\n            output = heldWeiToOwedWei(\r\n                inputWei,\r\n                inputMarketId,\r\n                outputMarketId\r\n            );\r\n        }\r\n\r\n        Require.that(\r\n            output.value <= maxOutputWei.value,\r\n            FILE,\r\n            \"outputMarket too small\",\r\n            output.value,\r\n            maxOutputWei.value\r\n        );\r\n        assert(output.sign != maxOutputWei.sign);\r\n\r\n        return output;\r\n    }\r\n\r\n    function heldWeiToOwedWei(\r\n        Types.Wei memory heldWei,\r\n        uint256 heldMarketId,\r\n        uint256 owedMarketId\r\n    )\r\n        private\r\n        view\r\n        returns (Types.AssetAmount memory)\r\n    {\r\n        (\r\n            Monetary.Price memory heldPrice,\r\n            Monetary.Price memory owedPrice\r\n        ) = getSpreadAdjustedPrices(\r\n            heldMarketId,\r\n            owedMarketId,\r\n            Time.currentTime()\r\n        );\r\n\r\n        uint256 owedAmount = Math.getPartialRoundUp(\r\n            heldWei.value,\r\n            heldPrice.value,\r\n            owedPrice.value\r\n        );\r\n\r\n        return Types.AssetAmount({\r\n            sign: true,\r\n            denomination: Types.AssetDenomination.Wei,\r\n            ref: Types.AssetReference.Delta,\r\n            value: owedAmount\r\n        });\r\n    }\r\n\r\n    function owedWeiToHeldWei(\r\n        Types.Wei memory owedWei,\r\n        uint256 heldMarketId,\r\n        uint256 owedMarketId\r\n    )\r\n        private\r\n        view\r\n        returns (Types.AssetAmount memory)\r\n    {\r\n        (\r\n            Monetary.Price memory heldPrice,\r\n            Monetary.Price memory owedPrice\r\n        ) = getSpreadAdjustedPrices(\r\n            heldMarketId,\r\n            owedMarketId,\r\n            Time.currentTime()\r\n        );\r\n\r\n        uint256 heldAmount = Math.getPartial(\r\n            owedWei.value,\r\n            owedPrice.value,\r\n            heldPrice.value\r\n        );\r\n\r\n        return Types.AssetAmount({\r\n            sign: false,\r\n            denomination: Types.AssetDenomination.Wei,\r\n            ref: Types.AssetReference.Delta,\r\n            value: heldAmount\r\n        });\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"SOLO_MARGIN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"g_spreadRampTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inputMarketId\",\"type\":\"uint256\"},{\"name\":\"outputMarketId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"makerAccount\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"takerAccount\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"sign\",\"type\":\"bool\"},{\"name\":\"value\",\"type\":\"uint128\"}],\"name\":\"oldInputPar\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"sign\",\"type\":\"bool\"},{\"name\":\"value\",\"type\":\"uint128\"}],\"name\":\"newInputPar\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"sign\",\"type\":\"bool\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"inputWei\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getTradeCost\",\"outputs\":[{\"components\":[{\"name\":\"sign\",\"type\":\"bool\"},{\"name\":\"denomination\",\"type\":\"uint8\"},{\"name\":\"ref\",\"type\":\"uint8\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"heldMarketId\",\"type\":\"uint256\"},{\"name\":\"owedMarketId\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"getSpreadAdjustedPrices\",\"outputs\":[{\"components\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"g_startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"soloMargin\",\"type\":\"address\"},{\"name\":\"rampTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"time\",\"type\":\"uint32\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"makerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"takerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"heldMarketId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owedMarketId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"heldWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owedWei\",\"type\":\"uint256\"}],\"name\":\"Settlement\",\"type\":\"event\"}]","ContractName":"FinalSettlement","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"0000000000000000000000001e0447b19bb6ecfdae1e4ae1694b0c3659614e4e000000000000000000000000000000000000000000000000000000000024ea00","EVMVersion":"byzantium","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7b87f1aee4a71ef95d117c60e884e4ef0a0a77ea0a88723f38ca58557db85a21"}]}