{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Cashier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IVoucherKernel.sol\\\";\\nimport \\\"./interfaces/ICashier.sol\\\";\\nimport {PaymentMethod, VoucherState, VoucherDetails, isStatus, determineStatus} from \\\"./UsingHelpers.sol\\\";\\n\\n/**\\n * @title Contract for managing funds\\n * Roughly following OpenZeppelin's Escrow at https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/payment/\\n */\\ncontract Cashier is ICashier, ReentrancyGuard, Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n    using SafeMath for uint256;\\n\\n    address private voucherKernel;\\n    address private bosonRouterAddress;\\n    address private voucherSetTokenAddress;   //ERC1155 contract representing voucher sets    \\n    address private voucherTokenAddress;     //ERC721 contract representing vouchers;\\n    bool private disasterState;\\n\\n    enum PaymentType {PAYMENT, DEPOSIT_SELLER, DEPOSIT_BUYER}\\n    enum Role {ISSUER, HOLDER}\\n\\n    mapping(address => uint256) private escrow; // both types of deposits AND payments >> can be released token-by-token if checks pass\\n    // slashedDepositPool can be obtained through getEscrowAmount(poolAddress)\\n    mapping(address => mapping(address => uint256)) private escrowTokens; //token address => mgsSender => amount\\n\\n    uint256 internal constant CANCELFAULT_SPLIT = 2; //for POC purposes, this is hardcoded; e.g. each party gets depositSe / 2\\n\\n    event LogBosonRouterSet(address _newBosonRouter, address _triggeredBy);\\n\\n    event LogVoucherTokenContractSet(address _newTokenContract, address _triggeredBy);\\n\\n    event LogVoucherSetTokenContractSet(address _newTokenContract, address _triggeredBy);\\n\\n    event LogVoucherKernelSet(address _newVoucherKernel, address _triggeredBy);\\n\\n    event LogWithdrawal(address _caller, address _payee, uint256 _payment);\\n\\n    event LogAmountDistribution(\\n        uint256 indexed _tokenIdVoucher,\\n        address _to,\\n        uint256 _payment,\\n        PaymentType _type\\n    );\\n\\n    event LogDisasterStateSet(bool _disasterState, address _triggeredBy);\\n    event LogWithdrawEthOnDisaster(uint256 _amount, address _triggeredBy);\\n    event LogWithdrawTokensOnDisaster(\\n        uint256 _amount,\\n        address _tokenAddress,\\n        address _triggeredBy\\n    );\\n\\n    modifier onlyFromRouter() {\\n        require(msg.sender == bosonRouterAddress, \\\"UNAUTHORIZED_BR\\\");\\n        _;\\n    }\\n\\n    modifier notZeroAddress(address _addressToCheck) {\\n        require(_addressToCheck != address(0), \\\"0A\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice The caller must be the Vouchers token contract, otherwise reverts.\\n     */\\n    modifier onlyVoucherTokenContract() {\\n        require(msg.sender == voucherTokenAddress, \\\"UNAUTHORIZED_VOUCHER_TOKEN_ADDRESS\\\"); // Unauthorized token address\\n        _;\\n    }\\n\\n     /**\\n     * @notice The caller must be the Voucher Sets token contract, otherwise reverts.\\n     */\\n    modifier onlyVoucherSetTokenContract() {\\n        require(msg.sender == voucherSetTokenAddress, \\\"UNAUTHORIZED_VOUCHER_SET_TOKEN_ADDRESS\\\"); // Unauthorized token address\\n        _;\\n    }\\n\\n    /**\\n     * @notice Construct and initialze the contract. Iniialises associated contract addresses. Iniialises disaster state to false.    \\n     * @param _bosonRouterAddress address of the associated BosonRouter contract\\n     * @param _voucherKernel address of the associated VocherKernal contract instance\\n     * @param _voucherSetTokenAddress address of the associated ERC1155 contract instance\\n     * @param _voucherTokenAddress address of the associated ERC721 contract instance\\n\\n     */\\n    constructor(address _bosonRouterAddress, address _voucherKernel, address _voucherSetTokenAddress, address _voucherTokenAddress) \\n        notZeroAddress(_bosonRouterAddress)\\n        notZeroAddress(_voucherKernel)\\n        notZeroAddress(_voucherSetTokenAddress)\\n        notZeroAddress(_voucherTokenAddress)\\n    {\\n        bosonRouterAddress = _bosonRouterAddress;\\n        voucherKernel = _voucherKernel;\\n        voucherSetTokenAddress = _voucherSetTokenAddress;\\n        voucherTokenAddress = _voucherTokenAddress;\\n        disasterState = false;\\n    }\\n\\n    /**\\n     * @notice Pause the process of interaction with voucherID's (ERC-721), in case of emergency.\\n     * Only BR contract is in control of this function.\\n     */\\n    function pause() external override onlyFromRouter {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause the process of interaction with voucherID's (ERC-721).\\n     * Only BR contract is in control of this function.\\n     */\\n    function unpause() external override onlyFromRouter {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice If once disaster state has been set to true, the contract could never be unpaused.\\n     */\\n    function canUnpause() external view override returns (bool) {\\n        return !disasterState;\\n    }\\n\\n    /**\\n     * @notice Once this functions is triggered, contracts cannot be unpaused anymore\\n     * Only BR contract is in control of this function.\\n     */\\n    function setDisasterState() external onlyOwner whenPaused {\\n        require(!disasterState, \\\"Disaster state is already set\\\");\\n        disasterState = true;\\n        emit LogDisasterStateSet(disasterState, msg.sender);\\n    }\\n\\n    /**\\n     * @notice In case of a disaster this function allow the caller to withdraw all pooled funds kept in the escrow for the address provided. Funds are sent in ETH\\n     */\\n    function withdrawEthOnDisaster() external whenPaused nonReentrant {\\n        require(disasterState, \\\"Owner did not allow manual withdraw\\\");\\n\\n        uint256 amount = escrow[msg.sender];\\n\\n        require(amount > 0, \\\"ESCROW_EMPTY\\\");\\n        escrow[msg.sender] = 0;\\n        msg.sender.sendValue(amount);\\n\\n        emit LogWithdrawEthOnDisaster(amount, msg.sender);\\n    }\\n\\n    /**\\n     * @notice In case of a disaster this function allow the caller to withdraw all pooled funds kept in the escrowTokens for the address provided.\\n     * @param _token address of a token, that the caller sent the funds, while interacting with voucher or voucher-set\\n     */\\n    function withdrawTokensOnDisaster(address _token)\\n        external\\n        whenPaused\\n        nonReentrant\\n        notZeroAddress(_token)\\n    {\\n        require(disasterState, \\\"Owner did not allow manual withdraw\\\");\\n\\n        uint256 amount = escrowTokens[_token][msg.sender];\\n        require(amount > 0, \\\"ESCROW_EMPTY\\\");\\n        escrowTokens[_token][msg.sender] = 0;\\n\\n        SafeERC20.safeTransfer(IERC20(_token), msg.sender, amount);\\n        emit LogWithdrawTokensOnDisaster(amount, _token, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Trigger withdrawals of what funds are releasable\\n     * The caller of this function triggers transfers to all involved entities (pool, issuer, token holder), also paying for gas.\\n     * @dev This function would be optimized a lot, here verbose for readability.\\n     * @param _tokenIdVoucher  ID of a voucher token (ERC-721) to try withdraw funds from\\n     */\\n    function withdraw(uint256 _tokenIdVoucher)\\n        external\\n        override\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        VoucherDetails memory voucherDetails;\\n\\n        require(_tokenIdVoucher != 0, \\\"UNSPECIFIED_ID\\\");\\n\\n        voucherDetails.tokenIdVoucher = _tokenIdVoucher;\\n        voucherDetails.tokenIdSupply = IVoucherKernel(voucherKernel)\\n            .getIdSupplyFromVoucher(voucherDetails.tokenIdVoucher);\\n        voucherDetails.paymentMethod = IVoucherKernel(voucherKernel)\\n            .getVoucherPaymentMethod(voucherDetails.tokenIdSupply);\\n\\n        (\\n            voucherDetails.currStatus.status,\\n            voucherDetails.currStatus.isPaymentReleased,\\n            voucherDetails.currStatus.isDepositsReleased,\\n            ,\\n        ) = IVoucherKernel(voucherKernel).getVoucherStatus(\\n            voucherDetails.tokenIdVoucher\\n        );\\n\\n        (\\n            voucherDetails.price,\\n            voucherDetails.depositSe,\\n            voucherDetails.depositBu\\n        ) = IVoucherKernel(voucherKernel).getOrderCosts(\\n            voucherDetails.tokenIdSupply\\n        );\\n\\n        voucherDetails.issuer = payable(\\n            IVoucherKernel(voucherKernel).getSupplyHolder(\\n                voucherDetails.tokenIdSupply\\n            )\\n        );\\n        voucherDetails.holder = payable(\\n            IVoucherKernel(voucherKernel).getVoucherHolder(\\n                voucherDetails.tokenIdVoucher\\n            )\\n        );\\n\\n        bool released;\\n        //process the RELEASE OF PAYMENTS - only depends on the redeemed/not-redeemed, a voucher need not be in the final status\\n        if (!voucherDetails.currStatus.isPaymentReleased) {\\n            releasePayments(voucherDetails);\\n            released = true;\\n        }\\n\\n        //process the RELEASE OF DEPOSITS - only when vouchers are in the FINAL status\\n        if (\\n            !voucherDetails.currStatus.isDepositsReleased &&\\n            isStatus(voucherDetails.currStatus.status, VoucherState.FINAL)\\n        ) {\\n            releaseDeposits(voucherDetails);\\n            released = true;\\n        }\\n\\n        require (released, \\\"NOTHING_TO_WITHDRAW\\\");\\n\\n        if (voucherDetails.deposit2pool > 0) {\\n            _withdrawDeposits(\\n                owner(),\\n                voucherDetails.deposit2pool,\\n                voucherDetails.paymentMethod,\\n                voucherDetails.tokenIdSupply\\n            );\\n        }\\n\\n        if (voucherDetails.price2issuer > 0) {\\n            _withdrawPayments(\\n                voucherDetails.issuer,\\n                voucherDetails.price2issuer,\\n                voucherDetails.paymentMethod,\\n                voucherDetails.tokenIdSupply\\n            );\\n        }\\n\\n        if (voucherDetails.deposit2issuer > 0) {\\n            _withdrawDeposits(\\n                voucherDetails.issuer,\\n                voucherDetails.deposit2issuer,\\n                voucherDetails.paymentMethod,\\n                voucherDetails.tokenIdSupply\\n            );\\n        }\\n\\n        if (voucherDetails.price2holder > 0) {\\n            _withdrawPayments(\\n                voucherDetails.holder,\\n                voucherDetails.price2holder,\\n                voucherDetails.paymentMethod,\\n                voucherDetails.tokenIdSupply\\n            );\\n        }\\n\\n        if (voucherDetails.deposit2holder > 0) {\\n            _withdrawDeposits(\\n                voucherDetails.holder,\\n                voucherDetails.deposit2holder,\\n                voucherDetails.paymentMethod,\\n                voucherDetails.tokenIdSupply\\n            );\\n        }        \\n    }\\n\\n    /**\\n     * @notice Release of payments, for a voucher which payments had not been released already.\\n     * Based on the voucher status(e.g. redeemed, refunded, etc), the voucher price will be sent to either buyer or seller.\\n     * @param _voucherDetails keeps all required information of the voucher which the payment should be released for.\\n     */\\n    function releasePayments(VoucherDetails memory _voucherDetails) internal {\\n        if (isStatus(_voucherDetails.currStatus.status, VoucherState.REDEEM)) {\\n            releasePayment(_voucherDetails, Role.ISSUER);\\n        } else if (\\n            isStatus(_voucherDetails.currStatus.status, VoucherState.REFUND) ||\\n            isStatus(_voucherDetails.currStatus.status, VoucherState.EXPIRE) ||\\n            (isStatus(_voucherDetails.currStatus.status, VoucherState.CANCEL_FAULT) &&\\n                !isStatus(_voucherDetails.currStatus.status, VoucherState.REDEEM))\\n        ) { \\n            releasePayment(_voucherDetails, Role.HOLDER);\\n        }\\n    }\\n\\n    /**\\n     * @notice Following function `releasePayments`, if certain conditions for the voucher status are met, the voucher price will be sent to the seller or the buyer\\n     * @param _voucherDetails keeps all required information of the voucher which the payment should be released for.\\n     */\\n    function releasePayment(VoucherDetails memory _voucherDetails, Role _role) internal {\\n        if (\\n            _voucherDetails.paymentMethod == PaymentMethod.ETHETH ||\\n            _voucherDetails.paymentMethod == PaymentMethod.ETHTKN\\n        ) {\\n            escrow[_voucherDetails.holder] = escrow[_voucherDetails.holder].sub(\\n                _voucherDetails.price\\n            );\\n        }\\n\\n        if (\\n            _voucherDetails.paymentMethod == PaymentMethod.TKNETH ||\\n            _voucherDetails.paymentMethod == PaymentMethod.TKNTKN\\n        ) {\\n            address addressTokenPrice =\\n                IVoucherKernel(voucherKernel).getVoucherPriceToken(\\n                    _voucherDetails.tokenIdSupply\\n                );\\n\\n            escrowTokens[addressTokenPrice][\\n                _voucherDetails.holder\\n            ] = escrowTokens[addressTokenPrice][_voucherDetails.holder].sub(\\n                _voucherDetails.price\\n            );\\n        }\\n\\n        if (_role == Role.ISSUER) {\\n            _voucherDetails.price2issuer = _voucherDetails.price2issuer.add(\\n            _voucherDetails.price\\n        );\\n        } else {\\n            _voucherDetails.price2holder = _voucherDetails.price2holder.add(\\n            _voucherDetails.price\\n        ); \\n        }\\n\\n        IVoucherKernel(voucherKernel).setPaymentReleased(\\n            _voucherDetails.tokenIdVoucher\\n        );\\n\\n        emit LogAmountDistribution(\\n            _voucherDetails.tokenIdVoucher,\\n            _role == Role.ISSUER ? _voucherDetails.issuer : _voucherDetails.holder,\\n            _voucherDetails.price,\\n            PaymentType.PAYMENT\\n        );\\n    }\\n\\n    /**\\n     * @notice Release of deposits, for a voucher which deposits had not been released already, and had been marked as `finalized`\\n     * Based on the voucher status(e.g. complained, redeemed, refunded, etc), the voucher deposits will be sent to either buyer, seller, or pool owner.\\n     * Depending on the payment type (e.g ETH, or Token) escrow funds will be held in the `escrow` || escrowTokens mappings\\n     * @param _voucherDetails keeps all required information of the voucher which the deposits should be released for.\\n     */\\n    function releaseDeposits(VoucherDetails memory _voucherDetails) internal {\\n        //first, depositSe\\n        if (isStatus(_voucherDetails.currStatus.status, VoucherState.COMPLAIN)) {\\n            //slash depositSe\\n            distributeIssuerDepositOnHolderComplain(_voucherDetails);\\n        } else {\\n            if (isStatus(_voucherDetails.currStatus.status, VoucherState.CANCEL_FAULT)) {\\n                //slash depositSe\\n                distributeIssuerDepositOnIssuerCancel(_voucherDetails);\\n            } else {\\n                //release depositSe\\n                distributeFullIssuerDeposit(_voucherDetails);\\n            }\\n        }\\n\\n        //second, depositBu\\n        if (\\n            isStatus(_voucherDetails.currStatus.status, VoucherState.REDEEM) ||\\n            isStatus(_voucherDetails.currStatus.status, VoucherState.CANCEL_FAULT)\\n        ) {\\n            //release depositBu\\n            distributeFullHolderDeposit(_voucherDetails);\\n        } else {\\n            //slash depositBu\\n            distributeHolderDepositOnNotRedeemedNotCancelled(_voucherDetails);\\n        }\\n\\n        IVoucherKernel(voucherKernel).setDepositsReleased(\\n            _voucherDetails.tokenIdVoucher\\n        );\\n    }\\n\\n    /**\\n     * @notice Following function `releaseDeposits` this function will be triggered if a voucher had been complained by the buyer.\\n     * Also checks if the voucher had been cancelled\\n     * @param _voucherDetails keeps all required information of the voucher which the payment should be released for.\\n     */\\n    function distributeIssuerDepositOnHolderComplain(\\n        VoucherDetails memory _voucherDetails\\n    ) internal {\\n        if (isStatus(_voucherDetails.currStatus.status, VoucherState.CANCEL_FAULT)) {\\n            //appease the conflict three-ways\\n            if (\\n                _voucherDetails.paymentMethod == PaymentMethod.ETHETH ||\\n                _voucherDetails.paymentMethod == PaymentMethod.TKNETH\\n            ) {\\n                escrow[_voucherDetails.issuer] = escrow[_voucherDetails.issuer]\\n                    .sub(_voucherDetails.depositSe);\\n            }\\n\\n            if (\\n                _voucherDetails.paymentMethod == PaymentMethod.ETHTKN ||\\n                _voucherDetails.paymentMethod == PaymentMethod.TKNTKN\\n            ) {\\n                address addressTokenDeposits =\\n                    IVoucherKernel(voucherKernel).getVoucherDepositToken(\\n                        _voucherDetails.tokenIdSupply\\n                    );\\n\\n                escrowTokens[addressTokenDeposits][\\n                    _voucherDetails.issuer\\n                ] = escrowTokens[addressTokenDeposits][_voucherDetails.issuer]\\n                    .sub(_voucherDetails.depositSe);\\n            }\\n\\n            uint256 tFraction = _voucherDetails.depositSe.div(CANCELFAULT_SPLIT);\\n            _voucherDetails.deposit2holder = _voucherDetails.deposit2holder.add(\\n                tFraction\\n            ); //Bu gets, say, a half\\n            _voucherDetails.deposit2issuer = _voucherDetails.deposit2issuer.add(\\n                tFraction.div(CANCELFAULT_SPLIT)\\n            ); //Se gets, say, a quarter\\n            _voucherDetails.deposit2pool = _voucherDetails.deposit2pool.add(\\n                (_voucherDetails.depositSe.sub(tFraction)).sub(\\n                    tFraction.div(CANCELFAULT_SPLIT)\\n                )\\n            ); //slashing the rest\\n\\n            emit LogAmountDistribution(\\n                _voucherDetails.tokenIdVoucher,\\n                _voucherDetails.holder,\\n                tFraction,\\n                PaymentType.DEPOSIT_SELLER\\n            );\\n            emit LogAmountDistribution(\\n                _voucherDetails.tokenIdVoucher,\\n                _voucherDetails.issuer,\\n                tFraction.div(CANCELFAULT_SPLIT),\\n                PaymentType.DEPOSIT_SELLER\\n            );\\n            emit LogAmountDistribution(\\n                _voucherDetails.tokenIdVoucher,\\n                owner(),\\n                (_voucherDetails.depositSe.sub(tFraction)).sub(\\n                    tFraction.div(CANCELFAULT_SPLIT)\\n                ),\\n                PaymentType.DEPOSIT_SELLER\\n            );\\n\\n        } else {\\n            //slash depositSe\\n            if (\\n                _voucherDetails.paymentMethod == PaymentMethod.ETHETH ||\\n                _voucherDetails.paymentMethod == PaymentMethod.TKNETH\\n            ) {\\n                escrow[_voucherDetails.issuer] = escrow[_voucherDetails.issuer]\\n                    .sub(_voucherDetails.depositSe);\\n            } else {\\n                address addressTokenDeposits =\\n                    IVoucherKernel(voucherKernel).getVoucherDepositToken(\\n                        _voucherDetails.tokenIdSupply\\n                    );\\n\\n                escrowTokens[addressTokenDeposits][\\n                    _voucherDetails.issuer\\n                ] = escrowTokens[addressTokenDeposits][_voucherDetails.issuer]\\n                    .sub(_voucherDetails.depositSe);\\n            }\\n\\n            _voucherDetails.deposit2pool = _voucherDetails.deposit2pool.add(\\n                _voucherDetails.depositSe\\n            );\\n\\n            emit LogAmountDistribution(\\n                _voucherDetails.tokenIdVoucher,\\n                owner(),\\n                _voucherDetails.depositSe,\\n                PaymentType.DEPOSIT_SELLER\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Following function `releaseDeposits` this function will be triggered if a voucher had been cancelled by the seller.\\n     * Will be triggered if the voucher had not been complained.\\n     * @param _voucherDetails keeps all required information of the voucher which the deposits should be released for.\\n     */\\n    function distributeIssuerDepositOnIssuerCancel(\\n        VoucherDetails memory _voucherDetails\\n    ) internal {\\n        if (\\n            _voucherDetails.paymentMethod == PaymentMethod.ETHETH ||\\n            _voucherDetails.paymentMethod == PaymentMethod.TKNETH\\n        ) {\\n            escrow[_voucherDetails.issuer] = escrow[_voucherDetails.issuer].sub(\\n                _voucherDetails.depositSe\\n            );\\n        }\\n\\n        if (\\n            _voucherDetails.paymentMethod == PaymentMethod.ETHTKN ||\\n            _voucherDetails.paymentMethod == PaymentMethod.TKNTKN\\n        ) {\\n            address addressTokenDeposits =\\n                IVoucherKernel(voucherKernel).getVoucherDepositToken(\\n                    _voucherDetails.tokenIdSupply\\n                );\\n\\n            escrowTokens[addressTokenDeposits][\\n                _voucherDetails.issuer\\n            ] = escrowTokens[addressTokenDeposits][_voucherDetails.issuer].sub(\\n                _voucherDetails.depositSe\\n            );\\n        }\\n\\n        _voucherDetails.deposit2issuer = _voucherDetails.deposit2issuer.add(\\n            _voucherDetails.depositSe.div(CANCELFAULT_SPLIT)\\n        );\\n\\n        _voucherDetails.deposit2holder = _voucherDetails.deposit2holder.add(\\n            _voucherDetails.depositSe.sub(\\n                _voucherDetails.depositSe.div(CANCELFAULT_SPLIT)\\n            )\\n        );\\n\\n        emit LogAmountDistribution(\\n            _voucherDetails.tokenIdVoucher,\\n            _voucherDetails.issuer,\\n            _voucherDetails.depositSe.div(CANCELFAULT_SPLIT),\\n            PaymentType.DEPOSIT_SELLER\\n        );\\n\\n        emit LogAmountDistribution(\\n            _voucherDetails.tokenIdVoucher,\\n            _voucherDetails.holder,\\n            _voucherDetails.depositSe.sub(\\n                _voucherDetails.depositSe.div(CANCELFAULT_SPLIT)\\n            ),\\n            PaymentType.DEPOSIT_SELLER\\n        );\\n    }\\n\\n    /**\\n     * @notice Following function `releaseDeposits` this function will be triggered if no complain, nor cancel had been made.\\n     * All seller deposit is returned to seller.\\n     * @param _voucherDetails keeps all required information of the voucher which the deposits should be released for.\\n     */\\n    function distributeFullIssuerDeposit(VoucherDetails memory _voucherDetails)\\n        internal\\n    {\\n        if (\\n            _voucherDetails.paymentMethod == PaymentMethod.ETHETH ||\\n            _voucherDetails.paymentMethod == PaymentMethod.TKNETH\\n        ) {\\n            escrow[_voucherDetails.issuer] = escrow[_voucherDetails.issuer].sub(\\n                _voucherDetails.depositSe\\n            );\\n        }\\n\\n        if (\\n            _voucherDetails.paymentMethod == PaymentMethod.ETHTKN ||\\n            _voucherDetails.paymentMethod == PaymentMethod.TKNTKN\\n        ) {\\n            address addressTokenDeposits =\\n                IVoucherKernel(voucherKernel).getVoucherDepositToken(\\n                    _voucherDetails.tokenIdSupply\\n                );\\n\\n            escrowTokens[addressTokenDeposits][\\n                _voucherDetails.issuer\\n            ] = escrowTokens[addressTokenDeposits][_voucherDetails.issuer].sub(\\n                _voucherDetails.depositSe\\n            );\\n        }\\n\\n        _voucherDetails.deposit2issuer = _voucherDetails.deposit2issuer.add(\\n            _voucherDetails.depositSe\\n        );\\n\\n        emit LogAmountDistribution(\\n            _voucherDetails.tokenIdVoucher,\\n            _voucherDetails.issuer,\\n            _voucherDetails.depositSe,\\n            PaymentType.DEPOSIT_SELLER\\n        );\\n    }\\n\\n    /**\\n     * @notice Following function `releaseDeposits` this function will be triggered if voucher had been redeemed, or the seller had cancelled.\\n     * All buyer deposit is returned to buyer.\\n     * @param _voucherDetails keeps all required information of the voucher which the deposits should be released for.\\n     */\\n    function distributeFullHolderDeposit(VoucherDetails memory _voucherDetails)\\n        internal\\n    {\\n        if (\\n            _voucherDetails.paymentMethod == PaymentMethod.ETHETH ||\\n            _voucherDetails.paymentMethod == PaymentMethod.TKNETH\\n        ) {\\n            escrow[_voucherDetails.holder] = escrow[_voucherDetails.holder].sub(\\n                _voucherDetails.depositBu\\n            );\\n        }\\n\\n        if (\\n            _voucherDetails.paymentMethod == PaymentMethod.ETHTKN ||\\n            _voucherDetails.paymentMethod == PaymentMethod.TKNTKN\\n        ) {\\n            address addressTokenDeposits =\\n                IVoucherKernel(voucherKernel).getVoucherDepositToken(\\n                    _voucherDetails.tokenIdSupply\\n                );\\n\\n            escrowTokens[addressTokenDeposits][\\n                _voucherDetails.holder\\n            ] = escrowTokens[addressTokenDeposits][_voucherDetails.holder].sub(\\n                _voucherDetails.depositBu\\n            );\\n        }\\n\\n        _voucherDetails.deposit2holder = _voucherDetails.deposit2holder.add(\\n            _voucherDetails.depositBu\\n        );\\n\\n        emit LogAmountDistribution(\\n            _voucherDetails.tokenIdVoucher,\\n            _voucherDetails.holder,\\n            _voucherDetails.depositBu,\\n            PaymentType.DEPOSIT_BUYER\\n        );\\n    }\\n\\n    /**\\n     * @notice Following function `releaseDeposits` this function will be triggered if voucher had not been redeemed or cancelled after finalization.\\n     * @param _voucherDetails keeps all required information of the voucher which the deposits should be released for.\\n     * All buyer deposit goes to Boson.\\n     */\\n    function distributeHolderDepositOnNotRedeemedNotCancelled(\\n        VoucherDetails memory _voucherDetails\\n    ) internal {\\n        if (\\n            _voucherDetails.paymentMethod == PaymentMethod.ETHETH ||\\n            _voucherDetails.paymentMethod == PaymentMethod.TKNETH\\n        ) {\\n            escrow[_voucherDetails.holder] = escrow[_voucherDetails.holder].sub(\\n                _voucherDetails.depositBu\\n            );\\n        }\\n\\n        if (\\n            _voucherDetails.paymentMethod == PaymentMethod.ETHTKN ||\\n            _voucherDetails.paymentMethod == PaymentMethod.TKNTKN\\n        ) {\\n            address addressTokenDeposits =\\n                IVoucherKernel(voucherKernel).getVoucherDepositToken(\\n                    _voucherDetails.tokenIdSupply\\n                );\\n\\n            escrowTokens[addressTokenDeposits][\\n                _voucherDetails.holder\\n            ] = escrowTokens[addressTokenDeposits][_voucherDetails.holder].sub(\\n                _voucherDetails.depositBu\\n            );\\n        }\\n\\n        _voucherDetails.deposit2pool = _voucherDetails.deposit2pool.add(\\n            _voucherDetails.depositBu\\n        );\\n\\n        emit LogAmountDistribution(\\n            _voucherDetails.tokenIdVoucher,\\n            owner(),\\n            _voucherDetails.depositBu,\\n            PaymentType.DEPOSIT_BUYER\\n        );\\n    }\\n\\n    /**\\n     * @notice External function for withdrawing deposits. Caller must be the seller of the goods, otherwise reverts.\\n     * @notice Seller triggers withdrawals of remaining deposits for a given supply, in case the voucher set is no longer in exchange.\\n     * @param _tokenIdSupply an ID of a supply token (ERC-1155) which will be burned and deposits will be returned for\\n     * @param _burnedQty burned quantity that the deposits should be withdrawn for\\n     * @param _messageSender owner of the voucher set\\n     */\\n    function withdrawDepositsSe(\\n        uint256 _tokenIdSupply,\\n        uint256 _burnedQty,\\n        address payable _messageSender\\n    ) external override nonReentrant onlyFromRouter notZeroAddress(_messageSender) {\\n        // notZeroAddress(_messageSender);\\n        require(IVoucherKernel(voucherKernel).getSupplyHolder(_tokenIdSupply) == _messageSender, \\\"UNAUTHORIZED_V\\\");\\n\\n        uint256 deposit =\\n            IVoucherKernel(voucherKernel).getSellerDeposit(_tokenIdSupply);\\n\\n        uint256 depositAmount = deposit.mul(_burnedQty);\\n\\n        PaymentMethod paymentMethod =\\n            IVoucherKernel(voucherKernel).getVoucherPaymentMethod(\\n                _tokenIdSupply\\n            );\\n\\n        if (paymentMethod == PaymentMethod.ETHETH || paymentMethod == PaymentMethod.TKNETH) {\\n            escrow[_messageSender] = escrow[_messageSender].sub(depositAmount);\\n        }\\n\\n        if (paymentMethod == PaymentMethod.ETHTKN || paymentMethod == PaymentMethod.TKNTKN) {\\n            address addressTokenDeposits =\\n                IVoucherKernel(voucherKernel).getVoucherDepositToken(\\n                    _tokenIdSupply\\n                );\\n\\n            escrowTokens[addressTokenDeposits][_messageSender] = escrowTokens[\\n                addressTokenDeposits\\n            ][_messageSender]\\n                .sub(depositAmount);\\n        }\\n\\n        _withdrawDeposits(\\n            _messageSender,\\n            depositAmount,\\n            paymentMethod,\\n            _tokenIdSupply\\n        );\\n    }\\n\\n    /**\\n     * @notice Internal function for withdrawing payments.\\n     * As unbelievable as it is, neither .send() nor .transfer() are now secure to use due to EIP-1884\\n     *  So now transferring funds via the last remaining option: .call()\\n     *  See https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/\\n     * @param _recipient    address of the account receiving funds from the escrow\\n     * @param _amount       amount to be released from escrow\\n     * @param _paymentMethod payment method that should be used to determine, how to do the payouts\\n     * @param _tokenIdSupply       _tokenIdSupply of the voucher set this is related to\\n     */\\n    function _withdrawPayments(\\n        address _recipient,\\n        uint256 _amount,\\n        PaymentMethod _paymentMethod,\\n        uint256 _tokenIdSupply\\n    ) internal\\n      notZeroAddress(_recipient)\\n    {\\n        if (_paymentMethod == PaymentMethod.ETHETH || _paymentMethod == PaymentMethod.ETHTKN) {\\n            payable(_recipient).sendValue(_amount);\\n            emit LogWithdrawal(msg.sender, _recipient, _amount);\\n        }\\n\\n        if (_paymentMethod == PaymentMethod.TKNETH || _paymentMethod == PaymentMethod.TKNTKN) {\\n            address addressTokenPrice =\\n                IVoucherKernel(voucherKernel).getVoucherPriceToken(\\n                    _tokenIdSupply\\n                );\\n\\n            SafeERC20.safeTransfer(\\n                IERC20(addressTokenPrice),\\n                _recipient,\\n                _amount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function for withdrawing deposits.\\n     * @param _recipient    address of the account receiving funds from the escrow\\n     * @param _amount       amount to be released from escrow\\n     * @param _paymentMethod       payment method that should be used to determine, how to do the payouts\\n     * @param _tokenIdSupply       _tokenIdSupply of the voucher set this is related to\\n     */\\n    function _withdrawDeposits(\\n        address _recipient,\\n        uint256 _amount,\\n        PaymentMethod _paymentMethod,\\n        uint256 _tokenIdSupply\\n    ) internal    \\n      notZeroAddress(_recipient)\\n    {\\n        require(_amount > 0, \\\"NO_FUNDS_TO_WITHDRAW\\\");\\n\\n        if (_paymentMethod == PaymentMethod.ETHETH || _paymentMethod == PaymentMethod.TKNETH) {\\n            payable(_recipient).sendValue(_amount);\\n            emit LogWithdrawal(msg.sender, _recipient, _amount);\\n        }\\n\\n        if (_paymentMethod == PaymentMethod.ETHTKN || _paymentMethod == PaymentMethod.TKNTKN) {\\n            address addressTokenDeposits =\\n                IVoucherKernel(voucherKernel).getVoucherDepositToken(\\n                    _tokenIdSupply\\n                );\\n\\n            SafeERC20.safeTransfer(\\n                IERC20(addressTokenDeposits),\\n                _recipient,\\n                _amount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Set the address of the BR contract\\n     * @param _bosonRouterAddress   The address of the Boson Route contract\\n     */\\n    function setBosonRouterAddress(address _bosonRouterAddress)\\n        external\\n        override\\n        onlyOwner\\n        whenPaused\\n        notZeroAddress(_bosonRouterAddress)\\n    {\\n        bosonRouterAddress = _bosonRouterAddress;\\n\\n        emit LogBosonRouterSet(_bosonRouterAddress, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Set the address of the Vouchers token contract, an ERC721 contract\\n     * @param _voucherTokenAddress   The address of the Vouchers token contract\\n     */\\n    function setVoucherTokenAddress(address _voucherTokenAddress)\\n        external\\n        override\\n        onlyOwner\\n        notZeroAddress(_voucherTokenAddress)\\n        whenPaused\\n    {\\n        voucherTokenAddress = _voucherTokenAddress;\\n        emit LogVoucherTokenContractSet(_voucherTokenAddress, msg.sender);\\n    }\\n\\n   /**\\n     * @notice Set the address of the Voucher Sets token contract, an ERC1155 contract\\n     * @param _voucherSetTokenAddress   The address of the Vouchers token contract\\n     */\\n    function setVoucherSetTokenAddress(address _voucherSetTokenAddress)\\n        external\\n        override\\n        onlyOwner\\n        notZeroAddress(_voucherSetTokenAddress)\\n        whenPaused\\n    {\\n        voucherSetTokenAddress = _voucherSetTokenAddress;\\n        emit LogVoucherSetTokenContractSet(_voucherSetTokenAddress, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Update the amount in escrow of an address with the new value, based on VoucherSet/Voucher interaction\\n     * @param _account  The address of an account to update\\n     */\\n    function addEscrowAmount(address _account)\\n        external\\n        override\\n        payable\\n        onlyFromRouter\\n    {\\n        escrow[_account] = escrow[_account].add(msg.value);\\n    }\\n\\n    /**\\n     * @notice Update the amount in escrowTokens of an address with the new value, based on VoucherSet/Voucher interaction\\n     * @param _token  The address of a token to query\\n     * @param _account  The address of an account to query\\n     * @param _newAmount  New amount to be set\\n     */\\n    function addEscrowTokensAmount(\\n        address _token,\\n        address _account,\\n        uint256 _newAmount\\n    ) external override onlyFromRouter {\\n        escrowTokens[_token][_account] =  escrowTokens[_token][_account].add(_newAmount);\\n    }\\n\\n    /**\\n     * @notice Hook which will be triggered when a _tokenIdVoucher will be transferred. Escrow funds should be allocated to the new owner.\\n     * @param _from prev owner of the _tokenIdVoucher\\n     * @param _to next owner of the _tokenIdVoucher\\n     * @param _tokenIdVoucher _tokenIdVoucher that has been transferred\\n     */\\n    function onVoucherTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenIdVoucher\\n    ) external override nonReentrant onlyVoucherTokenContract {\\n        address tokenAddress;\\n\\n        uint256 tokenSupplyId =\\n            IVoucherKernel(voucherKernel).getIdSupplyFromVoucher(\\n                _tokenIdVoucher\\n            );\\n\\n        PaymentMethod paymentType =\\n            IVoucherKernel(voucherKernel).getVoucherPaymentMethod(\\n                tokenSupplyId\\n            );\\n\\n        (uint256 price, uint256 depositBu) =\\n            IVoucherKernel(voucherKernel).getBuyerOrderCosts(tokenSupplyId);\\n\\n        if (paymentType == PaymentMethod.ETHETH) {\\n            uint256 totalAmount = price.add(depositBu);\\n\\n            //Reduce _from escrow amount and increase _to escrow amount\\n            escrow[_from] = escrow[_from].sub(totalAmount);\\n            escrow[_to] = escrow[_to].add(totalAmount);\\n        }\\n\\n\\n        if (paymentType == PaymentMethod.ETHTKN) {\\n\\n            //Reduce _from escrow amount and increase _to escrow amount - price\\n            escrow[_from] = escrow[_from].sub(price);\\n            escrow[_to] = escrow[_to].add(price);\\n\\n            tokenAddress = IVoucherKernel(voucherKernel).getVoucherDepositToken(\\n                tokenSupplyId\\n            );\\n\\n            //Reduce _from escrow token amount and increase _to escrow token amount - deposit\\n            escrowTokens[tokenAddress][_from] = escrowTokens[tokenAddress][_from].sub(depositBu);\\n            escrowTokens[tokenAddress][_to] = escrowTokens[tokenAddress][_to].add(depositBu);\\n\\n        }\\n\\n        if (paymentType == PaymentMethod.TKNETH) {\\n            tokenAddress = IVoucherKernel(voucherKernel).getVoucherPriceToken(\\n                tokenSupplyId\\n            );\\n        \\n\\n            //Reduce _from escrow token amount and increase _to escrow token amount - price \\n            escrowTokens[tokenAddress][_from] = escrowTokens[tokenAddress][_from].sub(price);\\n            escrowTokens[tokenAddress][_to] = escrowTokens[tokenAddress][_to].add(price);\\n\\n            //Reduce _from escrow amount and increase _to escrow amount - deposit\\n            escrow[_from] = escrow[_from].sub(depositBu);\\n            escrow[_to] = escrow[_to].add(depositBu);\\n        }\\n\\n        if (paymentType == PaymentMethod.TKNTKN) {\\n            tokenAddress = IVoucherKernel(voucherKernel).getVoucherPriceToken(\\n                tokenSupplyId\\n            );\\n\\n\\n            //Reduce _from escrow token amount and increase _to escrow token amount - price \\n            escrowTokens[tokenAddress][_from] = escrowTokens[tokenAddress][_from].sub(price);\\n            escrowTokens[tokenAddress][_to] = escrowTokens[tokenAddress][_to].add(price);\\n\\n            tokenAddress = IVoucherKernel(voucherKernel).getVoucherDepositToken(\\n                tokenSupplyId\\n            );\\n\\n            //Reduce _from escrow token amount and increase _to escrow token amount - deposit \\n            escrowTokens[tokenAddress][_from] = escrowTokens[tokenAddress][_from].sub(depositBu);\\n            escrowTokens[tokenAddress][_to] = escrowTokens[tokenAddress][_to].add(depositBu);\\n\\n        }\\n    }\\n\\n    /**\\n     * @notice After the transfer happens the _tokenSupplyId should be updated in the promise. Escrow funds for the seller's deposits (If in ETH) should be allocated to the new owner as well.\\n     * @param _from prev owner of the _tokenSupplyId\\n     * @param _to nex owner of the _tokenSupplyId\\n     * @param _tokenSupplyId _tokenSupplyId for transfer\\n     * @param _value qty which has been transferred\\n     */\\n    function onVoucherSetTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenSupplyId,\\n        uint256 _value\\n    ) external override nonReentrant onlyVoucherSetTokenContract {\\n        PaymentMethod paymentType =\\n            IVoucherKernel(voucherKernel).getVoucherPaymentMethod(\\n                _tokenSupplyId\\n            );\\n\\n        uint256 depositSe;\\n        uint256 totalAmount;\\n\\n        if (paymentType == PaymentMethod.ETHETH || paymentType == PaymentMethod.TKNETH) {\\n            depositSe = IVoucherKernel(voucherKernel).getSellerDeposit(\\n                _tokenSupplyId\\n            );\\n            totalAmount = depositSe.mul(_value);\\n\\n            //Reduce _from escrow amount and increase _to escrow amount\\n            escrow[_from] = escrow[_from].sub(totalAmount);\\n            escrow[_to] = escrow[_to].add(totalAmount);\\n        }\\n\\n        if (paymentType == PaymentMethod.ETHTKN || paymentType == PaymentMethod.TKNTKN) {\\n            address tokenDepositAddress =\\n                IVoucherKernel(voucherKernel).getVoucherDepositToken(\\n                    _tokenSupplyId\\n                );\\n\\n            depositSe = IVoucherKernel(voucherKernel).getSellerDeposit(\\n                _tokenSupplyId\\n            );\\n            totalAmount = depositSe.mul(_value);\\n\\n            //Reduce _from escrow token amount and increase _to escrow token amount - deposit\\n            escrowTokens[tokenDepositAddress][_from] = escrowTokens[tokenDepositAddress][_from].sub(totalAmount);\\n            escrowTokens[tokenDepositAddress][_to] = escrowTokens[tokenDepositAddress][_to].add(totalAmount);\\n        }\\n\\n        IVoucherKernel(voucherKernel).setSupplyHolderOnTransfer(\\n            _tokenSupplyId,\\n            _to\\n        );\\n    }\\n\\n    // // // // // // // //\\n    // GETTERS\\n    // // // // // // // //\\n\\n    /**\\n     * @notice Get the address of Voucher Kernel contract\\n     * @return Address of Voucher Kernel contract\\n     */\\n    function getVoucherKernelAddress() \\n        external \\n        view \\n        override\\n        returns (address)\\n    {\\n        return voucherKernel;\\n    }\\n\\n    /**\\n     * @notice Get the address of Boson Router contract\\n     * @return Address of Boson Router contract\\n     */\\n    function getBosonRouterAddress() \\n        external \\n        view \\n        override\\n        returns (address)\\n    {\\n        return bosonRouterAddress;\\n    }\\n\\n    /**\\n     * @notice Get the address of the Vouchers token contract, an ERC721 contract\\n     * @return Address of Vouchers contract\\n     */\\n    function getVoucherTokenAddress() \\n        external \\n        view \\n        override\\n        returns (address)\\n    {\\n        return voucherTokenAddress;\\n    }\\n\\n    /**\\n     * @notice Get the address of the VoucherSets token contract, an ERC155 contract\\n     * @return Address of VoucherSets contract\\n     */\\n    function getVoucherSetTokenAddress() \\n        external \\n        view \\n        override\\n        returns (address)\\n    {\\n        return voucherSetTokenAddress;\\n    }\\n\\n    /**\\n     * @notice Ensure whether or not contract has been set to disaster state \\n     * @return disasterState\\n     */\\n    function isDisasterStateSet() external view override returns(bool) {\\n        return disasterState;\\n    }\\n\\n    /**\\n     * @notice Get the amount in escrow of an address\\n     * @param _account  The address of an account to query\\n     * @return          The balance in escrow\\n     */\\n    function getEscrowAmount(address _account)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return escrow[_account];\\n    }\\n\\n    /**\\n     * @notice Get the amount in escrow of an address\\n     * @param _token  The address of a token to query\\n     * @param _account  The address of an account to query\\n     * @return          The balance in escrow\\n     */\\n    function getEscrowTokensAmount(address _token, address _account)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return escrowTokens[_token][_account];\\n    }\\n\\n    /**\\n     * @notice Set the address of the VoucherKernel contract\\n     * @param _voucherKernelAddress   The address of the VoucherKernel contract\\n     */\\n    function setVoucherKernelAddress(address _voucherKernelAddress)\\n        external\\n        override\\n        onlyOwner\\n        notZeroAddress(_voucherKernelAddress)\\n        whenPaused\\n    {\\n        voucherKernel = _voucherKernelAddress;\\n\\n        emit LogVoucherKernelSet(_voucherKernelAddress, msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVoucherKernel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport \\\"./../UsingHelpers.sol\\\";\\n\\ninterface IVoucherKernel {\\n    /**\\n     * @notice Pause the process of interaction with voucherID's (ERC-721), in case of emergency.\\n     * Only Cashier contract is in control of this function.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @notice Unpause the process of interaction with voucherID's (ERC-721).\\n     * Only Cashier contract is in control of this function.\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @notice Creating a new promise for goods or services.\\n     * Can be reused, e.g. for making different batches of these (but not in prototype).\\n     * @param _seller      seller of the promise\\n     * @param _validFrom   Start of valid period\\n     * @param _validTo     End of valid period\\n     * @param _price       Price (payment amount)\\n     * @param _depositSe   Seller's deposit\\n     * @param _depositBu   Buyer's deposit\\n     */\\n    function createTokenSupplyId(\\n        address _seller,\\n        uint256 _validFrom,\\n        uint256 _validTo,\\n        uint256 _price,\\n        uint256 _depositSe,\\n        uint256 _depositBu,\\n        uint256 _quantity\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Creates a Payment method struct recording the details on how the seller requires to receive Price and Deposits for a certain Voucher Set.\\n     * @param _tokenIdSupply     _tokenIdSupply of the voucher set this is related to\\n     * @param _paymentMethod  might be ETHETH, ETHTKN, TKNETH or TKNTKN\\n     * @param _tokenPrice   token address which will hold the funds for the price of the voucher\\n     * @param _tokenDeposits   token address which will hold the funds for the deposits of the voucher\\n     */\\n    function createPaymentMethod(\\n        uint256 _tokenIdSupply,\\n        PaymentMethod _paymentMethod,\\n        address _tokenPrice,\\n        address _tokenDeposits\\n    ) external;\\n\\n    /**\\n     * @notice Mark voucher token that the payment was released\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     */\\n    function setPaymentReleased(uint256 _tokenIdVoucher) external;\\n\\n    /**\\n     * @notice Mark voucher token that the deposits were released\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     */\\n    function setDepositsReleased(uint256 _tokenIdVoucher) external;\\n\\n    /**\\n     * @notice Redemption of the vouchers promise\\n     * @param _tokenIdVoucher   ID of the voucher\\n     * @param _messageSender owner of the voucher\\n     */\\n    function redeem(uint256 _tokenIdVoucher, address _messageSender) external;\\n\\n    /**\\n     * @notice Refunding a voucher\\n     * @param _tokenIdVoucher   ID of the voucher\\n     * @param _messageSender owner of the voucher\\n     */\\n    function refund(uint256 _tokenIdVoucher, address _messageSender) external;\\n\\n    /**\\n     * @notice Issue a complain for a voucher\\n     * @param _tokenIdVoucher   ID of the voucher\\n     * @param _messageSender owner of the voucher\\n     */\\n    function complain(uint256 _tokenIdVoucher, address _messageSender) external;\\n\\n    /**\\n     * @notice Cancel/Fault transaction by the Seller, admitting to a fault or backing out of the deal\\n     * @param _tokenIdVoucher   ID of the voucher\\n     * @param _messageSender owner of the voucher set (seller)\\n     */\\n    function cancelOrFault(uint256 _tokenIdVoucher, address _messageSender)\\n        external;\\n\\n    /**\\n     * @notice Cancel/Fault transaction by the Seller, cancelling the remaining uncommitted voucher set so that seller prevents buyers from committing to vouchers for items no longer in exchange.\\n     * @param _tokenIdSupply   ID of the voucher\\n     * @param _issuer   owner of the voucher\\n     */\\n    function cancelOrFaultVoucherSet(uint256 _tokenIdSupply, address _issuer)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Fill Voucher Order, iff funds paid, then extract & mint NFT to the voucher holder\\n     * @param _tokenIdSupply   ID of the supply token (ERC-1155)\\n     * @param _issuer          Address of the token's issuer\\n     * @param _holder          Address of the recipient of the voucher (ERC-721)\\n     * @param _paymentMethod   method being used for that particular order that needs to be fulfilled\\n     */\\n    function fillOrder(\\n        uint256 _tokenIdSupply,\\n        address _issuer,\\n        address _holder,\\n        PaymentMethod _paymentMethod\\n    ) external;\\n\\n    /**\\n     * @notice Mark voucher token as expired\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     */\\n    function triggerExpiration(uint256 _tokenIdVoucher) external;\\n\\n    /**\\n     * @notice Mark voucher token to the final status\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     */\\n    function triggerFinalizeVoucher(uint256 _tokenIdVoucher) external;\\n\\n    /**\\n     * @notice Set the address of the new holder of a _tokenIdSupply on transfer\\n     * @param _tokenIdSupply   _tokenIdSupply which will be transferred\\n     * @param _newSeller   new holder of the supply\\n     */\\n    function setSupplyHolderOnTransfer(\\n        uint256 _tokenIdSupply,\\n        address _newSeller\\n    ) external;\\n\\n    /**\\n     * @notice Set the general cancelOrFault period, should be used sparingly as it has significant consequences. Here done simply for demo purposes.\\n     * @param _cancelFaultPeriod   the new value for cancelOrFault period (in number of seconds)\\n     */\\n    function setCancelFaultPeriod(uint256 _cancelFaultPeriod) external;\\n\\n    /**\\n     * @notice Set the address of the Boson Router contract\\n     * @param _bosonRouterAddress   The address of the BR contract\\n     */\\n    function setBosonRouterAddress(address _bosonRouterAddress) external;\\n\\n    /**\\n     * @notice Set the address of the Cashier contract\\n     * @param _cashierAddress   The address of the Cashier contract\\n     */\\n    function setCashierAddress(address _cashierAddress) external;\\n\\n    /**\\n     * @notice Set the address of the Vouchers token contract, an ERC721 contract\\n     * @param _voucherTokenAddress   The address of the Vouchers token contract\\n     */\\n    function setVoucherTokenAddress(address _voucherTokenAddress) external;\\n\\n    /**\\n     * @notice Set the address of the Voucher Sets token contract, an ERC1155 contract\\n     * @param _voucherSetTokenAddress   The address of the Voucher Sets token contract\\n     */\\n    function setVoucherSetTokenAddress(address _voucherSetTokenAddress)\\n        external;\\n\\n    /**\\n     * @notice Set the general complain period, should be used sparingly as it has significant consequences. Here done simply for demo purposes.\\n     * @param _complainPeriod   the new value for complain period (in number of seconds)\\n     */\\n    function setComplainPeriod(uint256 _complainPeriod) external;\\n\\n    /**\\n     * @notice Get the promise ID at specific index\\n     * @param _idx  Index in the array of promise keys\\n     * @return      Promise ID\\n     */\\n    function getPromiseKey(uint256 _idx) external view returns (bytes32);\\n\\n    /**\\n     * @notice Get the address of the token where the price for the supply is held\\n     * @param _tokenIdSupply   ID of the voucher token\\n     * @return                  Address of the token\\n     */\\n    function getVoucherPriceToken(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Get the address of the token where the deposits for the supply are held\\n     * @param _tokenIdSupply   ID of the voucher token\\n     * @return                  Address of the token\\n     */\\n    function getVoucherDepositToken(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Get Buyer costs required to make an order for a supply token\\n     * @param _tokenIdSupply   ID of the supply token\\n     * @return                  returns a tuple (Payment amount, Buyer's deposit)\\n     */\\n    function getBuyerOrderCosts(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    /**\\n     * @notice Get Seller deposit\\n     * @param _tokenIdSupply   ID of the supply token\\n     * @return                  returns sellers deposit\\n     */\\n    function getSellerDeposit(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the promise ID from a voucher token\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     * @return                  ID of the promise\\n     */\\n    function getIdSupplyFromVoucher(uint256 _tokenIdVoucher)\\n        external\\n        pure\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the promise ID from a voucher token\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     * @return                  ID of the promise\\n     */\\n    function getPromiseIdFromVoucherId(uint256 _tokenIdVoucher)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Get all necessary funds for a supply token\\n     * @param _tokenIdSupply   ID of the supply token\\n     * @return                  returns a tuple (Payment amount, Seller's deposit, Buyer's deposit)\\n     */\\n    function getOrderCosts(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /**\\n     * @notice Get the remaining quantity left in supply of tokens (e.g ERC-721 left in ERC-1155) of an account\\n     * @param _tokenSupplyId  Token supply ID\\n     * @param _owner    holder of the Token Supply\\n     * @return          remaining quantity\\n     */\\n    function getRemQtyForSupply(uint256 _tokenSupplyId, address _owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the payment method for a particular _tokenIdSupply\\n     * @param _tokenIdSupply   ID of the voucher supply token\\n     * @return                  payment method\\n     */\\n    function getVoucherPaymentMethod(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (PaymentMethod);\\n\\n    /**\\n     * @notice Get the current status of a voucher\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     * @return                  Status of the voucher (via enum)\\n     */\\n    function getVoucherStatus(uint256 _tokenIdVoucher)\\n        external\\n        view\\n        returns (\\n            uint8,\\n            bool,\\n            bool,\\n            uint256,\\n            uint256\\n        );\\n\\n    /**\\n     * @notice Get the holder of a supply\\n     * @param _tokenIdSupply    _tokenIdSupply ID of the order (aka VoucherSet) which is mapped to the corresponding Promise.\\n     * @return                  Address of the holder\\n     */\\n    function getSupplyHolder(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Get the holder of a voucher\\n     * @param _tokenIdVoucher   ID of the voucher token\\n     * @return                  Address of the holder\\n     */\\n    function getVoucherHolder(uint256 _tokenIdVoucher)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Checks whether a voucher is in valid period for redemption (between start date and end date)\\n     * @param _tokenIdVoucher ID of the voucher token\\n     */\\n    function isInValidityPeriod(uint256 _tokenIdVoucher)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Checks whether a voucher is in valid state to be transferred. If either payments or deposits are released, voucher could not be transferred\\n     * @param _tokenIdVoucher ID of the voucher token\\n     */\\n    function isVoucherTransferable(uint256 _tokenIdVoucher)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Get address of the Boson Router contract to which this contract points\\n     * @return Address of the Boson Router contract\\n     */\\n    function getBosonRouterAddress() external view returns (address);\\n\\n    /**\\n     * @notice Get address of the Cashier contract to which this contract points\\n     * @return Address of the Cashier contract\\n     */\\n    function getCashierAddress() external view returns (address);\\n\\n    /**\\n     * @notice Get the token nonce for a seller\\n     * @param _seller Address of the seller\\n     * @return The seller's\\n     */\\n    function getTokenNonce(address _seller) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the current type Id\\n     * @return type Id\\n     */\\n    function getTypeId() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the complain period\\n     * @return complain period\\n     */\\n    function getComplainPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the cancel or fault period\\n     * @return cancel or fault period\\n     */\\n    function getCancelFaultPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Get promise data not retrieved by other accessor functions\\n     * @param _promiseKey   ID of the promise\\n     * @return promise data not returned by other accessor methods\\n     */\\n    function getPromiseData(bytes32 _promiseKey)\\n        external\\n        view\\n        returns (\\n            bytes32,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /**\\n     * @notice Get the promise ID from a voucher set\\n     * @param _tokenIdSupply   ID of the voucher token\\n     * @return                  ID of the promise\\n     */\\n    function getPromiseIdFromSupplyId(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Get the address of the Vouchers token contract, an ERC721 contract\\n     * @return Address of Vouchers contract\\n     */\\n    function getVoucherTokenAddress() external view returns (address);\\n\\n    /**\\n     * @notice Get the address of the VoucherSets token contract, an ERC155 contract\\n     * @return Address of VoucherSets contract\\n     */\\n    function getVoucherSetTokenAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICashier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./../UsingHelpers.sol\\\";\\n\\ninterface ICashier {\\n    /**\\n     * @notice Pause the Cashier && the Voucher Kernel contracts in case of emergency.\\n     * All functions related to creating new batch, requestVoucher or withdraw will be paused, hence cannot be executed.\\n     * There is special function for withdrawing funds if contract is paused.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @notice Unpause the Cashier && the Voucher Kernel contracts.\\n     * All functions related to creating new batch, requestVoucher or withdraw will be unpaused.\\n     */\\n    function unpause() external;\\n\\n    function canUnpause() external view returns (bool);\\n\\n    /**\\n     * @notice Trigger withdrawals of what funds are releasable\\n     * The caller of this function triggers transfers to all involved entities (pool, issuer, token holder), also paying for gas.\\n     * @dev This function would be optimized a lot, here verbose for readability.\\n     * @param _tokenIdVoucher  ID of a voucher token (ERC-721) to try withdraw funds from\\n     */\\n    function withdraw(uint256 _tokenIdVoucher) external;\\n\\n    /**\\n     * @notice External function for withdrawing deposits. Caller must be the seller of the goods, otherwise reverts.\\n     * @notice Seller triggers withdrawals of remaining deposits for a given supply, in case the voucher set is no longer in exchange.\\n     * @param _tokenIdSupply an ID of a supply token (ERC-1155) which will be burned and deposits will be returned for\\n     * @param _burnedQty burned quantity that the deposits should be withdrawn for\\n     * @param _messageSender owner of the voucher set\\n     */\\n    function withdrawDepositsSe(\\n        uint256 _tokenIdSupply,\\n        uint256 _burnedQty,\\n        address payable _messageSender\\n    ) external;\\n\\n    /**\\n     * @notice Get the amount in escrow of an address\\n     * @param _account  The address of an account to query\\n     * @return          The balance in escrow\\n     */\\n    function getEscrowAmount(address _account) external view returns (uint256);\\n\\n    /**\\n     * @notice Update the amount in escrow of an address with the new value, based on VoucherSet/Voucher interaction\\n     * @param _account  The address of an account to query\\n     */\\n    function addEscrowAmount(address _account) external payable;\\n\\n    /**\\n     * @notice Update the amount in escrowTokens of an address with the new value, based on VoucherSet/Voucher interaction\\n     * @param _token  The address of a token to query\\n     * @param _account  The address of an account to query\\n     * @param _newAmount  New amount to be set\\n     */\\n    function addEscrowTokensAmount(\\n        address _token,\\n        address _account,\\n        uint256 _newAmount\\n    ) external;\\n\\n    /**\\n     * @notice Hook which will be triggered when a _tokenIdVoucher will be transferred. Escrow funds should be allocated to the new owner.\\n     * @param _from prev owner of the _tokenIdVoucher\\n     * @param _to next owner of the _tokenIdVoucher\\n     * @param _tokenIdVoucher _tokenIdVoucher that has been transferred\\n     */\\n    function onVoucherTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenIdVoucher\\n    ) external;\\n\\n    /**\\n     * @notice After the transfer happens the _tokenSupplyId should be updated in the promise. Escrow funds for the deposits (If in ETH) should be allocated to the new owner as well.\\n     * @param _from prev owner of the _tokenSupplyId\\n     * @param _to next owner of the _tokenSupplyId\\n     * @param _tokenSupplyId _tokenSupplyId for transfer\\n     * @param _value qty which has been transferred\\n     */\\n    function onVoucherSetTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenSupplyId,\\n        uint256 _value\\n    ) external;\\n\\n    /**\\n     * @notice Get the address of Voucher Kernel contract\\n     * @return Address of Voucher Kernel contract\\n     */\\n    function getVoucherKernelAddress() external view returns (address);\\n\\n    /**\\n     * @notice Get the address of Boson Router contract\\n     * @return Address of Boson Router contract\\n     */\\n    function getBosonRouterAddress() external view returns (address);\\n\\n    /**\\n     * @notice Get the address of the Vouchers contract, an ERC721 contract\\n     * @return Address of Vouchers contract\\n     */\\n    function getVoucherTokenAddress() external view returns (address);\\n\\n    /**\\n     * @notice Get the address of the VoucherSets token contract, an ERC155 contract\\n     * @return Address of VoucherSets contract\\n     */\\n    function getVoucherSetTokenAddress() external view returns (address);\\n\\n    /**\\n     * @notice Ensure whether or not contract has been set to disaster state\\n     * @return disasterState\\n     */\\n    function isDisasterStateSet() external view returns (bool);\\n\\n    /**\\n     * @notice Get the amount in escrow of an address\\n     * @param _token  The address of a token to query\\n     * @param _account  The address of an account to query\\n     * @return          The balance in escrow\\n     */\\n    function getEscrowTokensAmount(address _token, address _account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Set the address of the BR contract\\n     * @param _bosonRouterAddress   The address of the Cashier contract\\n     */\\n    function setBosonRouterAddress(address _bosonRouterAddress) external;\\n\\n    /**\\n     * @notice Set the address of the VoucherKernel contract\\n     * @param _voucherKernelAddress   The address of the VoucherKernel contract\\n     */\\n    function setVoucherKernelAddress(address _voucherKernelAddress) external;\\n\\n    /**\\n     * @notice Set the address of the Vouchers token contract, an ERC721 contract\\n     * @param _voucherTokenAddress   The address of the Vouchers token contract\\n     */\\n    function setVoucherTokenAddress(address _voucherTokenAddress) external;\\n\\n    /**\\n     * @notice Set the address of the Voucher Sets token contract, an ERC1155 contract\\n     * @param _voucherSetTokenAddress   The address of the Voucher Sets token contract\\n     */\\n    function setVoucherSetTokenAddress(address _voucherSetTokenAddress)\\n        external;\\n}\\n\"\r\n    },\r\n    \"contracts/UsingHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity 0.7.6;\\n\\n// Those are the payment methods we are using throughout the system.\\n// Depending on how to user choose to interact with it's funds we store the method, so we could distribute its tokens afterwise\\nenum PaymentMethod {\\n    ETHETH,\\n    ETHTKN,\\n    TKNETH,\\n    TKNTKN\\n}\\n\\nenum VoucherState {FINAL, CANCEL_FAULT, COMPLAIN, EXPIRE, REFUND, REDEEM, COMMIT}\\n/*  Status of the voucher in 8 bits:\\n    [6:COMMITTED] [5:REDEEMED] [4:REFUNDED] [3:EXPIRED] [2:COMPLAINED] [1:CANCELORFAULT] [0:FINAL]\\n*/\\n\\nuint8 constant ONE = 1;\\n\\nstruct VoucherDetails {\\n    uint256 tokenIdSupply;\\n    uint256 tokenIdVoucher;\\n    address issuer;\\n    address holder;\\n    uint256 price;\\n    uint256 depositSe;\\n    uint256 depositBu;\\n    uint256 price2pool;\\n    uint256 deposit2pool;\\n    uint256 price2issuer;\\n    uint256 deposit2issuer;\\n    uint256 price2holder;\\n    uint256 deposit2holder;\\n    PaymentMethod paymentMethod;\\n    VoucherStatus currStatus;\\n}\\n\\nstruct VoucherStatus {\\n    uint8 status;\\n    bool isPaymentReleased;\\n    bool isDepositsReleased;\\n    uint256 complainPeriodStart;\\n    uint256 cancelFaultPeriodStart;\\n}\\n\\n/**\\n    * @notice Based on its lifecycle, voucher can have many different statuses. Checks whether a voucher is in Committed state.\\n    * @param _status current status of a voucher.\\n    */\\nfunction isStateCommitted(uint8 _status) pure returns (bool) {\\n    return _status == determineStatus(0, VoucherState.COMMIT);\\n}\\n\\n/**\\n    * @notice Based on its lifecycle, voucher can have many different statuses. Checks whether a voucher is in RedemptionSigned state.\\n    * @param _status current status of a voucher.\\n    */\\nfunction isStateRedemptionSigned(uint8 _status)\\n    pure\\n    returns (bool)\\n{\\n    return _status == determineStatus(determineStatus(0, VoucherState.COMMIT), VoucherState.REDEEM);\\n}\\n\\n/**\\n    * @notice Based on its lifecycle, voucher can have many different statuses. Checks whether a voucher is in Refunded state.\\n    * @param _status current status of a voucher.\\n    */\\nfunction isStateRefunded(uint8 _status) pure returns (bool) {\\n    return _status == determineStatus(determineStatus(0, VoucherState.COMMIT), VoucherState.REFUND);\\n}\\n\\n/**\\n    * @notice Based on its lifecycle, voucher can have many different statuses. Checks whether a voucher is in Expired state.\\n    * @param _status current status of a voucher.\\n    */\\nfunction isStateExpired(uint8 _status) pure returns (bool) {\\n    return _status == determineStatus(determineStatus(0, VoucherState.COMMIT), VoucherState.EXPIRE);\\n}\\n\\n/**\\n    * @notice Based on its lifecycle, voucher can have many different statuses. Checks the current status a voucher is at.\\n    * @param _status current status of a voucher.\\n    * @param _idx status to compare.\\n    */\\nfunction isStatus(uint8 _status, VoucherState _idx) pure returns (bool) {\\n    return (_status >> uint8(_idx)) & ONE == 1;\\n}\\n\\n/**\\n    * @notice Set voucher status.\\n    * @param _status previous status.\\n    * @param _changeIdx next status.\\n    */\\nfunction determineStatus(uint8 _status, VoucherState _changeIdx)\\n    pure\\n    returns (uint8)\\n{\\n    return _status | (ONE << uint8(_changeIdx));\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bosonRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voucherKernel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voucherSetTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voucherTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Cashier.PaymentType\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"LogAmountDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newBosonRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogBosonRouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_disasterState\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogDisasterStateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newVoucherKernel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogVoucherKernelSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogVoucherSetTokenContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogVoucherTokenContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogWithdrawEthOnDisaster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogWithdrawTokensOnDisaster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addEscrowAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"addEscrowTokensAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canUnpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBosonRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getEscrowAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getEscrowTokensAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoucherKernelAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoucherSetTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoucherTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDisasterStateSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenSupplyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"onVoucherSetTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"}],\"name\":\"onVoucherTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bosonRouterAddress\",\"type\":\"address\"}],\"name\":\"setBosonRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDisasterState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voucherKernelAddress\",\"type\":\"address\"}],\"name\":\"setVoucherKernelAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voucherSetTokenAddress\",\"type\":\"address\"}],\"name\":\"setVoucherSetTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voucherTokenAddress\",\"type\":\"address\"}],\"name\":\"setVoucherTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdVoucher\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnedQty\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_messageSender\",\"type\":\"address\"}],\"name\":\"withdrawDepositsSe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEthOnDisaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawTokensOnDisaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Cashier","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000048093736f038935c50dc587d14ba8c7857683293000000000000000000000000aa10d375b2b61e99bdba850550b71b26b1c45746000000000000000000000000c7ce90b985cbd9b6d6daab012f2622e437a7101c00000000000000000000000017053d2b8a4bea8b878a99636e25b509e081e2e3","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}