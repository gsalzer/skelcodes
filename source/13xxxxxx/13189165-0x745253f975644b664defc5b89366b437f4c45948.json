{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.8.6;\r\n\r\n\r\nabstract contract OwnableStatic {\r\n    // address private _owner;\r\n    mapping( address => bool ) private _isOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(msg.sender, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    // function owner() public view virtual returns (address) {\r\n    //     return _owner;\r\n    // }\r\n    function isOwner( address ownerQuery ) external  view returns ( bool isQueryOwner ) {\r\n    isQueryOwner = _isOwner[ownerQuery];\r\n  }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    // modifier onlyOwner() virtual {\r\n    //     require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n    //     _;\r\n    // }\r\n    modifier onlyOwner() {\r\n    require( _isOwner[msg.sender] );\r\n    _;\r\n  }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    // function renounceOwnership() public virtual onlyOwner {\r\n    //     _setOwner(address(0));\r\n    // }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    // function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    //     require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    //     _setOwner(newOwner);\r\n    // }\r\n\r\n    function _setOwner(address newOwner, bool makeOwner) private {\r\n        _isOwner[newOwner] = makeOwner;\r\n        // _owner = newOwner;\r\n        // emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    function setOwnerShip( address newOwner, bool makeOOwner ) external onlyOwner() returns ( bool success ) {\r\n    _isOwner[newOwner] = makeOOwner;\r\n    success = true;\r\n  }\r\n}\r\nlibrary AddressUtils {\r\n  function toString (address account) internal pure returns (string memory) {\r\n    bytes32 value = bytes32(uint256(uint160(account)));\r\n    bytes memory alphabet = '0123456789abcdef';\r\n    bytes memory chars = new bytes(42);\r\n\r\n    chars[0] = '0';\r\n    chars[1] = 'x';\r\n\r\n    for (uint256 i = 0; i < 20; i++) {\r\n      chars[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\r\n      chars[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\r\n    }\r\n\r\n    return string(chars);\r\n  }\r\n\r\n  function isContract (address account) internal view returns (bool) {\r\n    uint size;\r\n    assembly { size := extcodesize(account) }\r\n    return size > 0;\r\n  }\r\n\r\n  function sendValue (address payable account, uint amount) internal {\r\n    (bool success, ) = account.call{ value: amount }('');\r\n    require(success, 'AddressUtils: failed to send value');\r\n  }\r\n\r\n  function functionCall (address target, bytes memory data) internal returns (bytes memory) {\r\n    return functionCall(target, data, 'AddressUtils: failed low-level call');\r\n  }\r\n\r\n  function functionCall (address target, bytes memory data, string memory error) internal returns (bytes memory) {\r\n    return _functionCallWithValue(target, data, 0, error);\r\n  }\r\n\r\n  function functionCallWithValue (address target, bytes memory data, uint value) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, value, 'AddressUtils: failed low-level call with value');\r\n  }\r\n\r\n  function functionCallWithValue (address target, bytes memory data, uint value, string memory error) internal returns (bytes memory) {\r\n    require(address(this).balance >= value, 'AddressUtils: insufficient balance for call');\r\n    return _functionCallWithValue(target, data, value, error);\r\n  }\r\n\r\n  function _functionCallWithValue (address target, bytes memory data, uint value, string memory error) private returns (bytes memory) {\r\n    require(isContract(target), 'AddressUtils: function call to non-contract');\r\n\r\n    (bool success, bytes memory returnData) = target.call{ value: value }(data);\r\n\r\n    if (success) {\r\n      return returnData;\r\n    } else if (returnData.length > 0) {\r\n      assembly {\r\n        let returnData_size := mload(returnData)\r\n        revert(add(32, returnData), returnData_size)\r\n      }\r\n    } else {\r\n      revert(error);\r\n    }\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n\r\n  function totalSupply () external view returns (uint256);\r\n\r\n  function balanceOf (\r\n    address account\r\n  ) external view returns (uint256);\r\n\r\n  function transfer (\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  function allowance (\r\n    address owner,\r\n    address spender\r\n  ) external view returns (uint256);\r\n\r\n  function approve (\r\n    address spender,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  function transferFrom (\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using AddressUtils for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev safeApprove (like approve) should only be called when setting an initial allowance or when resetting it to zero; otherwise prefer safeIncreaseAllowance and safeDecreaseAllowance\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice send transaction data and check validity of return value, if present\r\n     * @param token ERC20 token interface\r\n     * @param data transaction data\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract LPLeverageLaunch is OwnableStatic {\r\n\r\n  using SafeERC20 for IERC20;\r\n\r\n  mapping( address => bool ) public isTokenApprovedForLending;\r\n\r\n  mapping( address => mapping( address => uint256 ) ) public amountLoanedForLoanedTokenForLender;\r\n  \r\n  mapping( address => uint256 ) public totalLoanedForToken;\r\n\r\n  mapping( address => uint256 ) public launchTokenDueForHolder;\r\n\r\n  mapping( address => uint256 ) public priceForLentToken;\r\n\r\n  address public _weth9;\r\n\r\n  address public fundManager;\r\n\r\n  bool public isActive;\r\n\r\n  modifier onlyActive() {\r\n    require( isActive == true );\r\n    _;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  function changeActive( bool makeActive ) external onlyOwner() returns ( bool success ) {\r\n    isActive = makeActive;\r\n    success = true;\r\n  }\r\n\r\n  function setFundManager( address newFundManager ) external onlyOwner() returns ( bool success ) {\r\n    fundManager = newFundManager;\r\n    success = true;\r\n  }\r\n\r\n  function setWETH9( address weth9 ) external onlyOwner() returns ( bool success ) {\r\n    _weth9 = weth9;\r\n    success = true;\r\n  }\r\n\r\n  function dispenseToFundManager( address token ) external onlyOwner() returns ( bool success ) {\r\n    _dispenseToFundManager( token );\r\n    success = true;\r\n  }\r\n\r\n  function _dispenseToFundManager( address token ) internal {\r\n    require( fundManager != address(0) );\r\n    IERC20(token).safeTransfer( fundManager, IERC20(token).balanceOf( address(this) ) );\r\n  }\r\n\r\n  function changeTokenLendingApproval( address newToken, bool isApproved ) external onlyOwner() returns ( bool success ) {\r\n    isTokenApprovedForLending[newToken] = isApproved;\r\n    success = true;\r\n  }\r\n\r\n  function getTotalLoaned(address token ) external view returns (uint256 totalLoaned) {\r\n    totalLoaned = totalLoanedForToken[token];\r\n  }\r\n\r\n  function setPrice( address lentToken, uint256 price ) external onlyOwner() returns ( bool success ) {\r\n    priceForLentToken[lentToken] = price;\r\n    success = true;\r\n  }\r\n\r\n  /**\r\n   * @param loanedToken The address fo the token being paid. Ethereum is indicated with address(0).\r\n   */\r\n  function lendLiquidity( address loanedToken, uint amount ) external onlyActive() returns ( bool success ) {\r\n    require( fundManager != address(0) );\r\n    require( isTokenApprovedForLending[loanedToken] );\r\n\r\n    IERC20(loanedToken).safeTransferFrom( msg.sender, fundManager, amount );\r\n    amountLoanedForLoanedTokenForLender[msg.sender][loanedToken] += amount;\r\n    totalLoanedForToken[loanedToken] += amount;\r\n\r\n    // uint256 lentTokenPrice = twapForToken[loanedToken];\r\n\r\n    launchTokenDueForHolder[msg.sender] += (amount / priceForLentToken[loanedToken]);\r\n\r\n    success == true;\r\n  }\r\n\r\n  function getAmountDueToLender( address lender ) external view returns ( uint256 amountDue ) {\r\n    amountDue = launchTokenDueForHolder[lender];\r\n  }\r\n\r\n  receive() external payable onlyActive() {\r\n    _lendLiquidity();\r\n  }\r\n\r\n  function lendETHLiquidity() external payable onlyActive() returns ( bool success ) {\r\n    _lendLiquidity();\r\n\r\n    success == true;\r\n  }\r\n\r\n  function _lendLiquidity() internal returns ( bool success ) {\r\n    require( fundManager != address(0) );\r\n    amountLoanedForLoanedTokenForLender[msg.sender][address(_weth9)] = amountLoanedForLoanedTokenForLender[msg.sender][address(_weth9)] + msg.value;\r\n    totalLoanedForToken[address(_weth9)] += msg.value;\r\n\r\n    payable(fundManager).transfer( address(this).balance );\r\n\r\n    launchTokenDueForHolder[msg.sender] += msg.value;\r\n\r\n    success == true;\r\n  }\r\n\r\n  function dispenseToFundManager() external onlyOwner() returns ( bool success ) {\r\n    payable(fundManager).transfer( address(this).balance );\r\n    success = true;\r\n  }\r\n\r\n  function getAmountLoaned( address lender, address lentToken ) external view returns ( uint256 amountLoaned ) {\r\n    amountLoaned = amountLoanedForLoanedTokenForLender[lender][lentToken];\r\n  }\r\n\r\n  function emergencyWithdraw( address token ) external onlyOwner() returns ( bool success ) {\r\n    IERC20(token).safeTransfer( msg.sender, IERC20(token).balanceOf( address(this) ) );\r\n    totalLoanedForToken[token] = 0;\r\n    success = true;\r\n  }\r\n\r\n  function emergencyWithdraw() external onlyOwner() returns ( bool success ) {\r\n    payable(msg.sender).transfer( address(this).balance );\r\n    success = true;\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_weth9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountLoanedForLoanedTokenForLender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"makeActive\",\"type\":\"bool\"}],\"name\":\"changeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"changeTokenLendingApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"dispenseToFundManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dispenseToFundManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"getAmountDueToLender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lentToken\",\"type\":\"address\"}],\"name\":\"getAmountLoaned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLoaned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTotalLoaned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLoaned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerQuery\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isQueryOwner\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTokenApprovedForLending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchTokenDueForHolder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendETHLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lendLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceForLentToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFundManager\",\"type\":\"address\"}],\"name\":\"setFundManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"makeOOwner\",\"type\":\"bool\"}],\"name\":\"setOwnerShip\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth9\",\"type\":\"address\"}],\"name\":\"setWETH9\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLoanedForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LPLeverageLaunch","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d03f7b97998b6dd614319a35fe0f8c6acf15da6c83c15e1eff33388885cd6426"}]}