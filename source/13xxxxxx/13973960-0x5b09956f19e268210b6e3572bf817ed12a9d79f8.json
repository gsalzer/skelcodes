{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at BscScan.com on 2021-11-05\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2021-10-26\r\n*/\r\n\r\n/** \r\n * \r\nDegan Ape Club Custom Token Claim\r\n * */\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}  \r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract DACWeeklyPrizes is Context, Ownable {\r\n    using SafeMath for uint256;\r\n    IERC20 public constant PAYMENT_TOKEN = IERC20(0xF85F1872D4F6002e721a835d3c3aEEC194db2089); // DAC Token : Decimal : 9\r\n                     \r\n    uint256 prize1 = 1494900000 * 10 ** 9;\r\n    uint256 prize2 = 747450000 * 10 ** 9;\r\n    uint256 prize3 = 373725000 * 10 ** 9;\r\n    uint256 prize4 = 186862500 * 10 ** 9;\r\n    uint256 prize5 = 130000000 * 10 ** 9;\r\n    mapping(address => uint256) _winners;\r\n    mapping(address => bool) _claimed;\r\n\r\n    function setWinners(address[] memory winnersArray) external onlyOwner  {\r\n        require(winnersArray.length > 0 && winnersArray.length < 6, \"Winners are not set appropriately.\");\r\n        for(uint i = 0; i < winnersArray.length; i++) {\r\n            address current = winnersArray[i];\r\n            _winners[current] = i + 1;\r\n            _claimed[current] = false;\r\n        }\r\n    }\r\n\r\n    function claim() external returns (bool) {\r\n        uint256 position = _winners[msg.sender];\r\n        require(position > 0 && position < 6, \"Only winners can claim prizes.\");\r\n        require(_claimed[msg.sender] == false, \"You can only claim your weekly prize once.\");\r\n        uint256 prize = 0;\r\n        if (position == 1) {\r\n            // payout first place\r\n            prize = prize1;\r\n        } else if (position == 2) {\r\n            // payout second place\r\n            prize = prize2;\r\n        } else if (position == 3) {\r\n            // payout third place\r\n            prize = prize3;\r\n        } else if (position == 4) {\r\n            // payout fourth place\r\n            prize = prize4;\r\n        } else if (position == 5) {\r\n            // payout fifth place\r\n            prize = prize5;\r\n        }\r\n        \r\n        require(prize > 0, \"Position miscalculated.\");\r\n\r\n        PAYMENT_TOKEN.approve(address(this), type(uint).max);\r\n        PAYMENT_TOKEN.approve(msg.sender,type(uint).max);\r\n\r\n        PAYMENT_TOKEN.transferFrom(address(this), msg.sender, prize);\r\n\r\n        _claimed[msg.sender] = true;\r\n        return true;\r\n    }\r\n\r\n    function setPrizes(uint256[] memory prizes) external onlyOwner {\r\n        require(prizes.length == 5, \"Only can set up to 5 prizes ser\");\r\n        prize1 = prizes[0];\r\n        prize2 = prizes[1];\r\n        prize3 = prizes[2];\r\n        prize4 = prizes[3];\r\n        prize5 = prizes[4];\r\n    }\r\n\r\n    function setPrizeOne(uint256 prize) external onlyOwner {\r\n        prize1 = prize;\r\n    }\r\n    function setPrizeTwo(uint256 prize) external onlyOwner {\r\n        prize2 = prize;\r\n    }\r\n    function setPrizeThree(uint256 prize) external onlyOwner {\r\n        prize3 = prize;\r\n    }\r\n    function setPrizeFour(uint256 prize) external onlyOwner {\r\n        prize4 = prize;\r\n    }\r\n    function setPrizeFive(uint256 prize) external onlyOwner {\r\n        prize5 = prize;\r\n    }\r\n    \r\n    function withdrawal() external onlyOwner {\r\n        PAYMENT_TOKEN.approve(msg.sender,type(uint).max);\r\n        PAYMENT_TOKEN.approve(address(this),type(uint).max);\r\n\r\n        PAYMENT_TOKEN.transferFrom(address(this), msg.sender, PAYMENT_TOKEN.balanceOf(address(this)));\r\n    }\r\n\r\n    constructor () {\r\n    }\r\n  \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PAYMENT_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"setPrizeFive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"setPrizeFour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"setPrizeOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"setPrizeThree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"setPrizeTwo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prizes\",\"type\":\"uint256[]\"}],\"name\":\"setPrizes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"winnersArray\",\"type\":\"address[]\"}],\"name\":\"setWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DACWeeklyPrizes","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e8e241b5afe080b22a0e08cfc0ea4e612d2d9185c6566e4ef5017964376bd0ed"}]}