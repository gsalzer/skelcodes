{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/utils/uniq/ShopHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./SignatureVerify.sol\\\";\\n\\ncontract shopHelper is Ownable, SignatureVerify {\\n    // ----- VARIABLES ----- //\\n    address internal _shopAddress;\\n\\n    // ----- CONSTRUCTOR ----- //\\n    constructor(address _shopContractAddress) {\\n        _shopAddress = _shopContractAddress;\\n    }\\n\\n    // ----- VIEWS ----- //\\n    function getShopAddress() external view returns (address) {\\n        return _shopAddress;\\n    }\\n\\n    // ----- MESSAGE SIGNATURE ----- //\\n    /// @dev not test for functions related to signature\\n    function getMessageHash(\\n        uint256[] memory _tokenIds,\\n        uint256 _price,\\n        address _paymnetTokenAddress\\n    ) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(_tokenIds, _price, _paymnetTokenAddress)\\n            );\\n    }\\n\\n    /// @dev not test for functions related to signature\\n    function verifySignature(\\n        uint256[] memory _tokenIds,\\n        uint256 _price,\\n        address _paymentTokenAddress,\\n        bytes memory _signature\\n    ) internal view returns (bool) {\\n        bytes32 messageHash = getMessageHash(\\n            _tokenIds,\\n            _price,\\n            _paymentTokenAddress\\n        );\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n        return recoverSigner(ethSignedMessageHash, _signature) == owner();\\n    }\\n\\n    // ----- PUBLIC METHODS ----- //\\n\\n    function buyToken(\\n        uint256[] memory _tokenIds,\\n        uint256 _price,\\n        address _paymentToken,\\n        address _receiver,\\n        bytes memory _signature\\n    ) external payable {\\n        require(_tokenIds.length == 1, \\\"More than one token\\\");\\n        require(\\n            verifySignature(_tokenIds, _price, _paymentToken, _signature),\\n            \\\"Signature mismatch\\\"\\n        );\\n        if (_price != 0) {\\n            if (_paymentToken == address(0)) {\\n                require(msg.value >= _price, \\\"Not enough ether\\\");\\n                if (_price < msg.value) {\\n                    payable(msg.sender).transfer(msg.value - _price);\\n                }\\n            } else {\\n                require(\\n                    IERC20(_paymentToken).transferFrom(\\n                        msg.sender,\\n                        address(this),\\n                        _price\\n                    )\\n                );\\n            }\\n        }\\n        address[] memory receivers = new address[](1);\\n        receivers[0] = _receiver;\\n        IUniqCollections(_shopAddress).batchMintSelectedIds(\\n            _tokenIds,\\n            receivers\\n        );\\n    }\\n\\n    function buyTokens(\\n        uint256[] memory _tokenIds,\\n        uint256 _priceForPackage,\\n        address _paymentToken,\\n        address _receiver,\\n        bytes memory _signature\\n    ) external payable {\\n        require(\\n            verifySignature(\\n                _tokenIds,\\n                _priceForPackage,\\n                _paymentToken,\\n                _signature\\n            ),\\n            \\\"Signature mismatch\\\"\\n        );\\n        if (_priceForPackage != 0) {\\n            if (_paymentToken == address(0)) {\\n                require(msg.value >= _priceForPackage, \\\"Not enough ether\\\");\\n                if (_priceForPackage < msg.value) {\\n                    payable(msg.sender).transfer(msg.value - _priceForPackage);\\n                }\\n            } else {\\n                require(\\n                    IERC20(_paymentToken).transferFrom(\\n                        msg.sender,\\n                        address(this),\\n                        _priceForPackage\\n                    )\\n                );\\n            }\\n        }\\n        address[] memory _receivers = new address[](_tokenIds.length);\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            _receivers[i] = _receiver;\\n        }\\n        IUniqCollections(_shopAddress).batchMintSelectedIds(\\n            _tokenIds,\\n            _receivers\\n        );\\n    }\\n\\n    // ----- PROXY METHODS ----- //\\n\\n    function pEditClaimingAddress(address _newAddress) external onlyOwner {\\n        IUniqCollections(_shopAddress).editClaimingAdress(_newAddress);\\n    }\\n\\n    function pEditRoyaltyFee(uint256 _newFee) external onlyOwner {\\n        IUniqCollections(_shopAddress).editRoyaltyFee(_newFee);\\n    }\\n\\n    function pEditTokenUri(string memory _ttokenUri) external onlyOwner {\\n        IUniqCollections(_shopAddress).editTokenUri(_ttokenUri);\\n    }\\n\\n    function pRecoverERC20(address token) external onlyOwner {\\n        IUniqCollections(_shopAddress).recoverERC20(token);\\n        uint256 val = IERC20(token).balanceOf(address(this));\\n        require(val > 0, \\\"Nothing to recover\\\");\\n        Ierc20(token).transfer(owner(), val);\\n    }\\n\\n    function pTransferOwnership(address newOwner) external onlyOwner {\\n        IUniqCollections(_shopAddress).transferOwnership(newOwner);\\n    }\\n\\n    function pBatchMintSelectedIds(\\n        uint256[] memory _ids,\\n        address[] memory _addresses\\n    ) external onlyOwner {\\n        IUniqCollections(_shopAddress).batchMintSelectedIds(_ids, _addresses);\\n    }\\n\\n    // ----- OWNERS METHODS ----- //\\n\\n    function editShopAddress(address _newShopAddress) external onlyOwner {\\n        _shopAddress = _newShopAddress;\\n    }\\n\\n    function withdrawTokens(address token) external onlyOwner {\\n        uint256 val = IERC20(token).balanceOf(address(this));\\n        require(val > 0, \\\"Nothing to recover\\\");\\n        // use interface that not return value (USDT case)\\n        Ierc20(token).transfer(owner(), val);\\n    }\\n\\n    receive() external payable {}\\n\\n    function withdrawETH() external onlyOwner {\\n        require(payable(msg.sender).send(address(this).balance));\\n    }\\n}\\n\\ninterface IUniqCollections {\\n    function editClaimingAdress(address _newAddress) external;\\n\\n    function editRoyaltyFee(uint256 _newFee) external;\\n\\n    function batchMintSelectedIds(\\n        uint256[] memory _ids,\\n        address[] memory _addresses\\n    ) external;\\n\\n    function editTokenUri(string memory _ttokenUri) external;\\n\\n    function recoverERC20(address token) external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\\ninterface Ierc20 {\\n    function transfer(address, uint256) external;\\n}\\n\"\r\n    },\r\n    \"./contracts/utils/uniq/SignatureVerify.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ncontract SignatureVerify{\\n\\n    function getEthSignedMessageHash(bytes32 _messageHash)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    _messageHash\\n                )\\n            );\\n    }\\n\\n    function recoverSigner(\\n        bytes32 _ethSignedMessageHash,\\n        bytes memory _signature\\n    ) internal pure returns (address) {\\n        require(_signature.length == 65, \\\"invalid signature length\\\");\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            r := mload(add(_signature, 32))\\n            s := mload(add(_signature, 64))\\n            v := byte(0, mload(add(_signature, 96)))\\n        }\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shopContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_priceForPackage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newShopAddress\",\"type\":\"address\"}],\"name\":\"editShopAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymnetTokenAddress\",\"type\":\"address\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShopAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"pBatchMintSelectedIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"pEditClaimingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"pEditRoyaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ttokenUri\",\"type\":\"string\"}],\"name\":\"pEditTokenUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"pRecoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"pTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"shopHelper","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008f2a7af7aaf33ffe4e2c61ee91fde92cecea45dd","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0007303c6c69df2c80dda4e286d06023499f2e6169934362f890cfb5f4616fe1"}]}