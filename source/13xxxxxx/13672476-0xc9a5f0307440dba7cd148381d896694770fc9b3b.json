{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC1155 is IERC165{\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n    event TransferBatch(address indexed operator,address indexed from,address indexed to,uint256[] ids,uint256[] values);\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n    event URI(string value, uint256 indexed id);\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view  returns (uint256[] memory);\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from,address to,uint256 id,uint256 amount,bytes calldata data) external;\r\n    function safeBatchTransferFrom(address from,address to,uint256[] calldata ids,uint256[] calldata amounts,bytes calldata data) external;\r\n}\r\n\r\n\r\ninterface IERC1155Receiver is IERC165 {\r\n    function onERC1155Received(address operator,address from,uint256 id,uint256 value,bytes calldata data) external returns (bytes4);\r\n    function onERC1155BatchReceived(address operator,address from,uint256[] calldata ids,uint256[] calldata values,bytes calldata data) external returns (bytes4);\r\n}\r\n\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n\r\ncontract Utopia3301 is IERC1155MetadataURI\r\n{\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private counts;\r\n    mapping(uint256 => mapping(address => uint256)) private _balances;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    string private _defaultUri;\r\n    string public name;\r\n    string public symbol;\r\n    address private _owner;\r\n    address private _owner1;\r\n    address private _owner2;\r\n    address private first25;\r\n    address[] private _whiteListedAddresses;\r\n    \r\n    uint private _minted;\r\n    uint private TOTAL_TOKENS = 500;\r\n    uint private _saleEnable = 0;\r\n    uint private _presaleEnable = 0;\r\n    uint private _price;\r\n    uint private MAX_TOKENS_PER_ADDR1LIST = 2;\r\n    uint private MAX_TOKENS_PER_ADDR2LIST = 1;\r\n    \r\n    mapping(address => uint256) private whitelist1;\r\n    mapping(address => uint256) private whitelist2;\r\n    \r\n    \r\n    \r\n    \r\n    constructor( ) {\r\n        name = \"Utopia Pass\";\r\n        symbol = \"UP\";\r\n        \r\n        _setOwner(msg.sender);\r\n        _owner1 = 0xDcb879cA3483A8505A20eb4d2853c6620D65613c;\r\n        _owner2 = 0xEcC487709fE85fa8391c29c4f8F76e4738452687; \r\n        first25 = 0x1FcEfb472F0e1586F79f26e5E8e13741E4076c7A; \r\n        \r\n        _defaultUri=\"ipfs://ipfs/some_CID_/\";\r\n        \r\n        _price = 0.25 ether;\r\n        //reserve 25 tokens for addr first25, line 159\r\n        _mint(first25, 1, 25, \"\");\r\n        _whiteListedAddresses = \r\n        [\r\n            0xCEa18c22806f2adb61bac1B3db031980A45fB5Ea,\r\n            0x4ee470c6f6A678adF8ddD5879Fd85A0d9cbD386b,\r\n            0xB9556D93CCFA3Cc4d66CC9A3D426Ecd7A2F21bbb,\r\n            0xC8f9711387A6E6966D039B554d656a5c375cA97E,\r\n            0x5a84ff45A6400dD3c203317Bb1a2Ac6CE78C4D9F,\r\n            0x98Cd36875331bAB6Af1d99fdDC6f41d32f9f7f23,\r\n            0xBbc6b65F6E25ADE2A97c8ff47f8adD5163849A60,\r\n            0x9De33BeE1353E65fE86Cc274F86Ade0439021576,\r\n            0x526Dc23263a5ed4EC20b0944AC1951C348199Ef3,\r\n            0x39fC4291f38FFb27d17B9c2b46BB8e5019e23AcE,\r\n            0x972A6D9674A261a3C4BEcb2038B7E5D6ec9b09e9,\r\n            0x12569E01f1F8d64AC0367B5ECA6948EABa5D97e2,\r\n            0x1DbEa852180D4B51bAd2a90eB5791309515d49c7,\r\n            0x9B03891a8251c448B6C5D55556c43c3E0C64b924,\r\n            0x4eBb9E1909feC61A035Aac994053260522262919,\r\n            0xd80438E0CF0b60e41ee8B21387b724F6609b5cE4,\r\n            0x5819Ee729ec366Ce1e4C681A1d23DE2C966CddA5,\r\n            0x379e916535e017Cc2B22c4C099F61FA2D73a960C,\r\n            0x467cc59F1ce2045b0cDc4E85d941BD8cb8DCBd2e,\r\n            0xC55C754b9F11198BFcB5b6f1315D47DaADa0C4ab,\r\n            0xcd38e361c232CE889CB4458D90eBc031D63c2A8A,\r\n            0x8d701bD0504A13aa89BdBD30ad45688d11AdEaCa,\r\n            0x58d5b48Bdc6270F9eD3DBCe945960d390ea281eE,\r\n            0x05d93eC016c4aE7a653fE79E6DA7746073AFB94f,\r\n            0x2b6cD34F241a34C24b058C70616eF4C81C5f9eb8,\r\n            0xa3b11D1f06d71eaA9cD3d0142F08E7AcE9b474eC,\r\n            0x5f444d38bB4CD9338EB727d3E2E0A6A24aAAc886,\r\n            0xc59f2589aFC329Bd0008D7Ce19348031dffA28aa,\r\n            0x41F8EAFDE35fEB8A5962C0E0Ba445ceeA2e5c12e,\r\n            0xBf3633ed017339328a7C00a54dAEF8Eb306c103e,\r\n            0x221fCe6B6dAc61520C1C283825e29Bb556979111,\r\n            0xC539AC0aaE0a5f1B1A0C0dB9d5bBD2E6D4d50288,\r\n            0x612952a8D811B3Cd5626eBc748d5eB835Fcf724B,\r\n            0xF21a309D02ffAd0C133577e50937892C4643B709,\r\n            0xd79a9865F5866760B77D7f82e35316662dEC6793,\r\n            0xbC19738d9D26F587be394574253CD8efa732505d,\r\n            0x2953D07a05c71C5C4A9DB463e26Fb80749199A61,\r\n            0x22E7259B76fB34ABc2ee4d60BC996727b3B79a83,\r\n            0xE098CD6692Bf1af1F1287dd8e56D4A3D9C543dEB,\r\n            0xeA57994eb2d110888905fbB9D90DC29a54D0ea3C,\r\n            0xA8e1a4D37884aE493d63ac5224028Cf98a6eA233,\r\n            0xDb11B192249b414Aa6cc1e7F1d7414eCF59C36aF,\r\n            0x3c5FAAf770511E403fD907E6d77Ac8F5bC699CBe,\r\n            0x78d13A345B7987fEdbC54Ead3E6f8d75CE668bd3,\r\n            0xB7e5A2fcE41196D74f200Cc7Ce926EF20a8Ff452,\r\n            0x7701cC2986207232b88e88DFDd4E1BE18B5381b9,\r\n            0xE67A7dD0a6E086ea3a3b61edB0406a04e335CFCf,\r\n            0xaf68d7887074963722888a91362d0D542F29Dea3,\r\n            0xe169B92348e5BE50D9eF9310b46ce17716bFb78D,\r\n            0xc3Abc862eA13fF183DBbB9676163C1E13e4647ba,\r\n            0x5B7E678C85BF2C8Df77D2bcD30b74AdAe6b7874F,\r\n            0x5F77b880eae0E97B3E00c0c442f4605f6BCC61aD,\r\n            0x37660b87525559598c053f0f5b4c93C44Ec35E13,\r\n            0x71651F0053C3c4ef3658809e9898c649a1b67aEb,\r\n            0xebE9f2bBD5e7b3b8099233aFff654c6a9BaC679C,\r\n            0xbe8D8FBfc6582C55869222BceB30Be3fe9572056,\r\n            0xace354020076D59E4920cC9f271E5A151014e760,\r\n            0x4923179E970f4e466e446a228EF86792EDe2A6C3,\r\n            0x995e7FC77F43343A23A90c65e4Ea84F7b54B24E9,\r\n            0x6d4678D0B9E4e1D1E025aC30f0BADC3871B96183,\r\n            0xa61ca29DB1A127bcBBf55AE85c2B917Ed5D9089a,\r\n            0x2987fcD32d9D1Cd4Dbd30425D0DCeB05DEED0318,\r\n            0x469264AfE93730d82e386e72B24cb1F736f164Ef,\r\n            0xdfDC3d90E83Ad1e283265E9206d2aCB15EF87f74,\r\n            0x8365236b8b29EBe2A67eE167E605cFb7f28bd393,\r\n            0x3808fD269346976fDb5753ba25761899EAaA8C0A,\r\n            0x6Af844c98BF3eb3d918f371b3c59417D7c851a71,\r\n            0xA1F6E60B2C65A660580671764933247562c901A4,\r\n            0x4162eA18d68e2e385a9e39325aeFFCebb70f42D6,\r\n            0xACcC4cf8258B619027FF8058d7737Ed3CCd28965,\r\n            0x041A6c3bB3784465ec6d1042BD97b608AD88ECd4,\r\n            0xe77064473BE26ce57405f2aAa341470d9626f725,\r\n            0xa1c985c386E3B1588e1c8c910AC742077cA01Bd7,\r\n            0x71e9CA9e48Eb2d621535C274Dd21a985B73E0Dd4,\r\n            0x4e3D5a999FfB1AF101E780d491F325bBEb413285,\r\n            0x8482B54C571530A5f155bdb2BfFf31DcD1DB1e34,\r\n            0x3808fD269346976fDb5753ba25761899EAaA8C0A,\r\n            0x0029dd4662551C9939e3aD378417100A3fED3b8C,\r\n            0xd943843977daEB63d8e1e2Dd7172f69390a231A0,\r\n            0x8365236b8b29EBe2A67eE167E605cFb7f28bd393,\r\n            0xaf32e3A19A551487D0191E07C939B0ED18eDA1f0,\r\n            0x160583a6C15f6E59085827c9c7ce5D744603eFDb,\r\n            0x462872d18dB59f13e7A965788A89B0e43469965F,\r\n            0x2a094A27AE3a79BfEFf1483502A9783e2504041B,\r\n            0x9Bd4b05B6F3cD3778012f72C16c42Fd0490CfB3e,\r\n            0x515B8339eFF4CB3bb87C3627aCFbF242B612a708,\r\n            0x468B589384265937a5983E7a9C4F0B0B5A11B82f,\r\n            0x93823D23e3eEbf844093C11cB0d0710C8c0c8eA4,\r\n            0x877444579532453050720cEd6a8A66C0c60B04C8,\r\n            0x0E918674b6e34B03FdDD5b7F2F61deA4252b3b82,\r\n            0xCb2e90B72F33B4d9FB8541a410E16aD3e6EE7625,\r\n            0x619d70d46b64239bf5060bc12011F4b47d2aC825,\r\n            0x191EB06b656AF55004a02d9e207b5C379978200A,\r\n            0x360f58916AbB5cc07b5512B5a6dF50Eb603Aa4A4,\r\n            0x05Ae78DD0DFDCB23f1B09186D07f0BD3dFcBa4F2,\r\n            0xEb1dF5995575e7882a767092ab52F4e6b3EFe55b,\r\n            0x4eB166aA490547E12dD3a9EDed8D2b5E8E5De0B5,\r\n            0xb47C91f55896fe899393f9A7ecFD6A4426bb0AbF,\r\n            0xE4eD0Dd880ae6B5761F8C73f38509A4d377021BA,\r\n            0xee183D9E1e2D133648829b37f5a0aB6436628C55\r\n        ];\r\n        \r\n        _addToWhitelist1(_whiteListedAddresses);    \r\n    }\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    function addToWhitelist(address[] memory newusers, uint numeration) external onlyOwner { // numeration of whitelist\r\n        for(uint256 i=0; i < newusers.length; i++){\r\n            if (numeration == 1) {\r\n                require(whitelist2[newusers[i]] == 0, \"Whitelist: the user is already on the whitelist2\"); // \r\n                whitelist1[newusers[i]] = 1;\r\n            } else if (numeration == 2) {\r\n                require(whitelist1[newusers[i]] == 0, \"Whitelist: the user is already on the whitelist1\");\r\n                whitelist2[newusers[i]] = 1; \r\n            }\r\n        }\r\n    }\r\n\r\n    function _addToWhitelist1(address[] memory newusers) internal { // numeration of whitelist\r\n        for(uint256 i=0; i < newusers.length; i++){\r\n            whitelist1[newusers[i]] = 1;\r\n        }\r\n    }\r\n\r\n    function removeFromWhitelist(address[] memory newusers, uint numeration) external onlyOwner { // numeration of whitelist\r\n        for(uint256 i=0; i < newusers.length; i++){\r\n            if (numeration == 1) {\r\n                whitelist1[newusers[i]] = 0;\r\n            } else if (numeration == 2) {\r\n                whitelist2[newusers[i]] = 0;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier saleEnabled() {\r\n        require( _saleEnable==1, \"Sale is disabled\");\r\n        _;\r\n    }\r\n    modifier presaleEnabled() {\r\n        require( _presaleEnable ==1, \"PreSale is disabled\");\r\n        _;\r\n    }\r\n    \r\n    function enableSale() external onlyOwner{\r\n        _saleEnable = 1;\r\n    }\r\n    function disableSale() external onlyOwner{\r\n        _saleEnable = 0;\r\n    }\r\n    \r\n    function enablePresale() external onlyOwner{\r\n        _presaleEnable = 1;\r\n    }\r\n    function disablePresale() external onlyOwner{\r\n        _presaleEnable = 0;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    \r\n    function mint(\r\n        address _to,\r\n        uint256 _quantity\r\n    ) public payable saleEnabled {\r\n        require( _price * _quantity <= msg.value, \"Need more money to buy tokens\");\r\n        require( _minted + _quantity <= TOTAL_TOKENS, \"Max tokens reached\");    \r\n        \r\n        if (whitelist1[_to] == 1) {\r\n            require( _balances[1][_to] + _quantity <= MAX_TOKENS_PER_ADDR1LIST, \"Max tokens per address reached\");\r\n        } else if (whitelist2[_to] == 1) {\r\n            require( _balances[1][_to] + _quantity <= MAX_TOKENS_PER_ADDR2LIST, \"Max tokens per address reached\");\r\n        }\r\n        \r\n        _mint(_to, 1, _quantity, \"\");\r\n        \r\n        uint256 half_amount = msg.value / 2;\r\n        payable(_owner1).transfer(half_amount);\r\n        payable(_owner2).transfer(half_amount);\r\n    }\r\n  \r\n    function mintPresale(\r\n        address _to,\r\n        uint256 _quantity\r\n    ) public payable presaleEnabled {\r\n        require( _price * _quantity <= msg.value, \"Need more money to buy tokens\");\r\n        require( _minted + _quantity <= TOTAL_TOKENS, \"Max tokens reached\");          \r\n        require(whitelist1[_to] == 1 || whitelist2[_to] == 1, \"Address not allowed to buy\" );\r\n        \r\n        if (whitelist1[_to] == 1) {\r\n            require( _balances[1][_to] + _quantity <= MAX_TOKENS_PER_ADDR1LIST, \"Max tokens per address reached, 2/2\");\r\n        } else if (whitelist2[_to] == 1) {\r\n            require( _balances[1][_to] + _quantity <= MAX_TOKENS_PER_ADDR2LIST, \"Max tokens per address reached, 1/1\");\r\n        }\r\n        \r\n        _mint(_to, 1, _quantity, \"\");\r\n        \r\n        uint256 half_amount = msg.value / 2;\r\n        payable(_owner1).transfer(half_amount);\r\n        payable(_owner2).transfer(half_amount);\r\n    }\r\n\r\n    function _mint(\r\n        address account,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(account != address(0), \"ERC1155: mint to the zero address\");\r\n        address operator = _msgSender();\r\n        _balances[id][account] += amount;\r\n        _minted = _minted + amount;\r\n        \r\n        emit TransferSingle(operator, address(0), account, id, amount);\r\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\r\n    }\r\n\r\n    function setDefaultUri(string memory _uri)public onlyOwner{\r\n        _defaultUri = _uri;\r\n    }\r\n    \r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()) ,\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n        _safeTransferFrom(from, to, id, amount, data);\r\n    }\r\n\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()) ,\r\n            \"ERC1155: transfer caller is not owner nor approved\"\r\n        );\r\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n    }\r\n\r\n    function _safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n\r\n        if (whitelist1[to] == 1) {\r\n            require( _balances[id][to] + amount <= MAX_TOKENS_PER_ADDR1LIST, \"Max tokens per address reached\");\r\n        } else if (whitelist2[to] == 1) {\r\n            require( _balances[id][to] + amount <= MAX_TOKENS_PER_ADDR2LIST, \"Max tokens per address reached\");\r\n        }\r\n\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n        \r\n        _balances[id][to] += amount;\r\n\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }\r\n\r\n\r\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[account][operator];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\r\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\r\n        return _balances[id][account];\r\n    }\r\n    \r\n    function uri(uint256 id) public view override returns (string memory) {\r\n        return string(\r\n            abi.encodePacked(\r\n            _defaultUri,\r\n            Strings.toString(id),\r\n            \".json\"\r\n            )\r\n        );\r\n    }\r\n    \r\n     function uri() public view  returns (string memory){\r\n        return _defaultUri;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return _minted;\r\n    }\r\n    \r\n    function totalSupply(\r\n        uint256 _id\r\n      ) public view returns (uint256) {\r\n        return _minted;\r\n      }\r\n  \r\n     function _safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n\r\n            if (whitelist1[to] == 1) {\r\n                require( _balances[id][to] + amount <= MAX_TOKENS_PER_ADDR1LIST, \"Max tokens per address reached\");\r\n            } else if (whitelist2[to] == 1) {\r\n                require( _balances[id][to] + amount <= MAX_TOKENS_PER_ADDR2LIST, \"Max tokens per address reached\");\r\n            }    \r\n            \r\n            _balances[id][to] += amount;\r\n        }\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\r\n                bytes4 response\r\n            ) {\r\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n        function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n            interfaceId == type(IERC165).interfaceId;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newusers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"numeration\",\"type\":\"uint256\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disablePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enablePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"mintPresale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newusers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"numeration\",\"type\":\"uint256\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setDefaultUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Utopia3301","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://49fa9a0166ac5831feb4490a287e59a546900ffc09682c9942757e0ac297dfdc"}]}