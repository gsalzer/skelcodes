{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/token/PrincipalShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./PoolShare.sol\\\";\\n\\n/// @dev Token representing the principal shares of a pool.\\ncontract PrincipalShare is PoolShare {\\n    constructor(\\n        ITempusPool _pool,\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals\\n    ) PoolShare(ShareKind.Principal, _pool, name, symbol, decimals) {}\\n\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function getPricePerFullShare() external override returns (uint256) {\\n        return pool.pricePerPrincipalShare();\\n    }\\n\\n    function getPricePerFullShareStored() external view override returns (uint256) {\\n        return pool.pricePerPrincipalShareStored();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/PoolShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./ERC20OwnerMintableToken.sol\\\";\\nimport \\\"../ITempusPool.sol\\\";\\n\\n/// Token representing the principal or yield shares of a pool.\\nabstract contract PoolShare is IPoolShare, ERC20OwnerMintableToken {\\n    /// The kind of the share.\\n    ShareKind public immutable override kind;\\n\\n    /// The pool this share is part of.\\n    ITempusPool public immutable override pool;\\n\\n    uint8 internal immutable tokenDecimals;\\n\\n    constructor(\\n        ShareKind _kind,\\n        ITempusPool _pool,\\n        string memory name,\\n        string memory symbol,\\n        uint8 _decimals\\n    ) ERC20OwnerMintableToken(name, symbol) {\\n        kind = _kind;\\n        pool = _pool;\\n        tokenDecimals = _decimals;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return tokenDecimals;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/ERC20OwnerMintableToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/// This is a simplified implementation, but compatible with\\n/// OpenZeppelin's ERC20Mintable and ERC20Burnable extensions.\\ncontract ERC20OwnerMintableToken is ERC20 {\\n    /// The manager who is allowed to mint and burn.\\n    address public immutable manager;\\n\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\n        manager = msg.sender;\\n    }\\n\\n    /// Creates `amount` new tokens for `to`.\\n    /// @param account Recipient address to mint tokens to\\n    /// @param amount Number of tokens to mint\\n    function mint(address account, uint256 amount) external {\\n        require(msg.sender == manager, \\\"mint: only manager can mint\\\");\\n        _mint(account, amount);\\n    }\\n\\n    /// Destroys `amount` tokens from the caller.\\n    /// @param amount Number of tokens to burn.\\n    function burn(uint256 amount) external {\\n        require(msg.sender == manager, \\\"burn: only manager can burn\\\");\\n        _burn(manager, amount);\\n    }\\n\\n    /// Destroys `amount` tokens from `account`.\\n    /// @param account Source address to burn tokens from\\n    /// @param amount Number of tokens to burn\\n    function burnFrom(address account, uint256 amount) external {\\n        require(msg.sender == manager, \\\"burn: only manager can burn\\\");\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ITempusPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\npragma abicoder v2;\\n\\nimport \\\"./token/IPoolShare.sol\\\";\\nimport \\\"./utils/IOwnable.sol\\\";\\nimport \\\"./utils/IVersioned.sol\\\";\\n\\n/// Setting and transferring of fees are restricted to the owner.\\ninterface ITempusFees is IOwnable {\\n    /// The fees are in terms of yield bearing token (YBT).\\n    struct FeesConfig {\\n        uint256 depositPercent;\\n        uint256 earlyRedeemPercent;\\n        uint256 matureRedeemPercent;\\n    }\\n\\n    /// Returns the current fee configuration.\\n    function getFeesConfig() external view returns (FeesConfig memory);\\n\\n    /// Replace the current fee configuration with a new one.\\n    /// By default all the fees are expected to be set to zero.\\n    /// @notice This function can only be called by the owner.\\n    function setFeesConfig(FeesConfig calldata newFeesConfig) external;\\n\\n    /// @return Maximum possible fee percentage that can be set for deposit\\n    function maxDepositFee() external view returns (uint256);\\n\\n    /// @return Maximum possible fee percentage that can be set for early redeem\\n    function maxEarlyRedeemFee() external view returns (uint256);\\n\\n    /// @return Maximum possible fee percentage that can be set for mature redeem\\n    function maxMatureRedeemFee() external view returns (uint256);\\n\\n    /// Accumulated fees available for withdrawal.\\n    function totalFees() external view returns (uint256);\\n\\n    /// Transfers accumulated Yield Bearing Token (YBT) fees\\n    /// from this pool contract to `recipient`.\\n    /// @param recipient Address which will receive the specified amount of YBT\\n    /// @notice This function can only be called by the owner.\\n    function transferFees(address recipient) external;\\n}\\n\\n/// All state changing operations are restricted to the controller.\\ninterface ITempusPool is ITempusFees, IVersioned {\\n    /// @return The name of underlying protocol, for example \\\"Aave\\\" for Aave protocol\\n    function protocolName() external view returns (bytes32);\\n\\n    /// This token will be used as a token that user can deposit to mint same amounts\\n    /// of principal and interest shares.\\n    /// @return The underlying yield bearing token.\\n    function yieldBearingToken() external view returns (address);\\n\\n    /// This is the address of the actual backing asset token\\n    /// in the case of ETH, this address will be 0\\n    /// @return Address of the Backing Token\\n    function backingToken() external view returns (address);\\n\\n    /// @return uint256 value of one backing token, in case of 18 decimals 1e18\\n    function backingTokenONE() external view returns (uint256);\\n\\n    /// @return This TempusPool's Tempus Principal Share (TPS)\\n    function principalShare() external view returns (IPoolShare);\\n\\n    /// @return This TempusPool's Tempus Yield Share (TYS)\\n    function yieldShare() external view returns (IPoolShare);\\n\\n    /// @return The TempusController address that is authorized to perform restricted actions\\n    function controller() external view returns (address);\\n\\n    /// @return Start time of the pool.\\n    function startTime() external view returns (uint256);\\n\\n    /// @return Maturity time of the pool.\\n    function maturityTime() external view returns (uint256);\\n\\n    /// @return Time of exceptional halting of the pool.\\n    /// In case the pool is still in operation, this must return type(uint256).max.\\n    function exceptionalHaltTime() external view returns (uint256);\\n\\n    /// @return The maximum allowed time (in seconds) to pass with negative yield.\\n    function maximumNegativeYieldDuration() external view returns (uint256);\\n\\n    /// @return True if maturity has been reached and the pool was finalized.\\n    ///         This also includes the case when maturity was triggered due to\\n    ///         exceptional conditions (negative yield periods).\\n    function matured() external view returns (bool);\\n\\n    /// Finalizes the pool. This can only happen on or after `maturityTime`.\\n    /// Once finalized depositing is not possible anymore, and the behaviour\\n    /// redemption will change.\\n    ///\\n    /// Can be called by anyone and can be called multiple times.\\n    function finalize() external;\\n\\n    /// Yield bearing tokens deposit hook.\\n    /// @notice Deposit will fail if maturity has been reached.\\n    /// @notice This function can only be called by TempusController\\n    /// @notice This function assumes funds were already transferred to the TempusPool from the TempusController\\n    /// @param yieldTokenAmount Amount of yield bearing tokens to deposit in YieldToken decimal precision\\n    /// @param recipient Address which will receive Tempus Principal Shares (TPS) and Tempus Yield Shares (TYS)\\n    /// @return mintedShares Amount of TPS and TYS minted to `recipient`\\n    /// @return depositedBT The YBT value deposited, denominated as Backing Tokens\\n    /// @return fee The fee which was deducted (in terms of YBT)\\n    /// @return rate The interest rate at the time of the deposit\\n    function onDepositYieldBearing(uint256 yieldTokenAmount, address recipient)\\n        external\\n        returns (\\n            uint256 mintedShares,\\n            uint256 depositedBT,\\n            uint256 fee,\\n            uint256 rate\\n        );\\n\\n    /// Backing tokens deposit hook.\\n    /// @notice Deposit will fail if maturity has been reached.\\n    /// @notice This function can only be called by TempusController\\n    /// @notice This function assumes funds were already transferred to the TempusPool from the TempusController\\n    /// @param backingTokenAmount amount of Backing Tokens to be deposited to underlying protocol in BackingToken decimal precision\\n    /// @param recipient Address which will receive Tempus Principal Shares (TPS) and Tempus Yield Shares (TYS)\\n    /// @return mintedShares Amount of TPS and TYS minted to `recipient`\\n    /// @return depositedYBT The BT value deposited, denominated as Yield Bearing Tokens\\n    /// @return fee The fee which was deducted (in terms of YBT)\\n    /// @return rate The interest rate at the time of the deposit\\n    function onDepositBacking(uint256 backingTokenAmount, address recipient)\\n        external\\n        payable\\n        returns (\\n            uint256 mintedShares,\\n            uint256 depositedYBT,\\n            uint256 fee,\\n            uint256 rate\\n        );\\n\\n    /// Redeems yield bearing tokens from this TempusPool\\n    ///      msg.sender will receive the YBT\\n    ///      NOTE #1 Before maturity, principalAmount must equal to yieldAmount.\\n    ///      NOTE #2 This function can only be called by TempusController\\n    /// @param from Address to redeem its Tempus Shares\\n    /// @param principalAmount Amount of Tempus Principal Shares (TPS) to redeem for YBT in PrincipalShare decimal precision\\n    /// @param yieldAmount Amount of Tempus Yield Shares (TYS) to redeem for YBT in YieldShare decimal precision\\n    /// @param recipient Address to which redeemed YBT will be sent\\n    /// @return redeemableYieldTokens Amount of Yield Bearing Tokens redeemed to `recipient`\\n    /// @return fee The fee which was deducted (in terms of YBT)\\n    /// @return rate The interest rate at the time of the redemption\\n    function redeem(\\n        address from,\\n        uint256 principalAmount,\\n        uint256 yieldAmount,\\n        address recipient\\n    )\\n        external\\n        returns (\\n            uint256 redeemableYieldTokens,\\n            uint256 fee,\\n            uint256 rate\\n        );\\n\\n    /// Redeems TPS+TYS held by msg.sender into backing tokens\\n    ///      `msg.sender` must approve TPS and TYS amounts to this TempusPool.\\n    ///      `msg.sender` will receive the backing tokens\\n    ///      NOTE #1 Before maturity, principalAmount must equal to yieldAmount.\\n    ///      NOTE #2 This function can only be called by TempusController\\n    /// @param from Address to redeem its Tempus Shares\\n    /// @param principalAmount Amount of Tempus Principal Shares (TPS) to redeem in PrincipalShare decimal precision\\n    /// @param yieldAmount Amount of Tempus Yield Shares (TYS) to redeem in YieldShare decimal precision\\n    /// @param recipient Address to which redeemed BT will be sent\\n    /// @return redeemableYieldTokens Amount of Backing Tokens redeemed to `recipient`, denominated in YBT\\n    /// @return redeemableBackingTokens Amount of Backing Tokens redeemed to `recipient`\\n    /// @return fee The fee which was deducted (in terms of YBT)\\n    /// @return rate The interest rate at the time of the redemption\\n    function redeemToBacking(\\n        address from,\\n        uint256 principalAmount,\\n        uint256 yieldAmount,\\n        address recipient\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 redeemableYieldTokens,\\n            uint256 redeemableBackingTokens,\\n            uint256 fee,\\n            uint256 rate\\n        );\\n\\n    /// Gets the estimated amount of Principals and Yields after a successful deposit\\n    /// @param amount Amount of BackingTokens or YieldBearingTokens that would be deposited\\n    /// @param isBackingToken If true, @param amount is in BackingTokens, otherwise YieldBearingTokens\\n    /// @return Amount of Principals (TPS) and Yields (TYS) in Principal/YieldShare decimal precision\\n    ///         TPS and TYS are minted in 1:1 ratio, hence a single return value.\\n    function estimatedMintedShares(uint256 amount, bool isBackingToken) external view returns (uint256);\\n\\n    /// Gets the estimated amount of YieldBearingTokens or BackingTokens received when calling `redeemXXX()` functions\\n    /// @param principals Amount of Principals (TPS) in PrincipalShare decimal precision\\n    /// @param yields Amount of Yields (TYS) in YieldShare decimal precision\\n    /// @param toBackingToken If true, redeem amount is estimated in BackingTokens instead of YieldBearingTokens\\n    /// @return Amount of YieldBearingTokens or BackingTokens in YBT/BT decimal precision\\n    function estimatedRedeem(\\n        uint256 principals,\\n        uint256 yields,\\n        bool toBackingToken\\n    ) external view returns (uint256);\\n\\n    /// @dev This returns the stored Interest Rate of the YBT (Yield Bearing Token) pool\\n    ///      it is safe to call this after updateInterestRate() was called\\n    /// @return Stored Interest Rate, decimal precision depends on specific TempusPool implementation\\n    function currentInterestRate() external view returns (uint256);\\n\\n    /// @return Initial interest rate of the underlying pool,\\n    ///         decimal precision depends on specific TempusPool implementation\\n    function initialInterestRate() external view returns (uint256);\\n\\n    /// @return Interest rate at maturity of the underlying pool (or 0 if maturity not reached yet)\\n    ///         decimal precision depends on specific TempusPool implementation\\n    function maturityInterestRate() external view returns (uint256);\\n\\n    /// @return Rate of one Tempus Yield Share expressed in Asset Tokens\\n    function pricePerYieldShare() external returns (uint256);\\n\\n    /// @return Rate of one Tempus Principal Share expressed in Asset Tokens\\n    function pricePerPrincipalShare() external returns (uint256);\\n\\n    /// Calculated with stored interest rates\\n    /// @return Rate of one Tempus Yield Share expressed in Asset Tokens,\\n    function pricePerYieldShareStored() external view returns (uint256);\\n\\n    /// Calculated with stored interest rates\\n    /// @return Rate of one Tempus Principal Share expressed in Asset Tokens\\n    function pricePerPrincipalShareStored() external view returns (uint256);\\n\\n    /// @dev This returns actual Backing Token amount for amount of YBT (Yield Bearing Tokens)\\n    ///      For example, in case of Aave and Lido the result is 1:1,\\n    ///      and for compound is `yieldTokens * currentInterestRate`\\n    /// @param yieldTokens Amount of YBT in YBT decimal precision\\n    /// @param interestRate The current interest rate\\n    /// @return Amount of Backing Tokens for specified @param yieldTokens\\n    function numAssetsPerYieldToken(uint yieldTokens, uint interestRate) external view returns (uint);\\n\\n    /// @dev This returns amount of YBT (Yield Bearing Tokens) that can be converted\\n    ///      from @param backingTokens Backing Tokens\\n    /// @param backingTokens Amount of Backing Tokens in BT decimal precision\\n    /// @param interestRate The current interest rate\\n    /// @return Amount of YBT for specified @param backingTokens\\n    function numYieldTokensPerAsset(uint backingTokens, uint interestRate) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/IPoolShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\nimport \\\"../ITempusPool.sol\\\";\\n\\n/// Interface of Tokens representing the principal or yield shares of a pool.\\ninterface IPoolShare {\\n    enum ShareKind {\\n        Principal,\\n        Yield\\n    }\\n\\n    /// @return The kind of the share.\\n    function kind() external view returns (ShareKind);\\n\\n    /// @return The pool this share is part of.\\n    function pool() external view returns (ITempusPool);\\n\\n    /// @dev Price per single share expressed in Backing Tokens of the underlying pool.\\n    ///      This is for the purpose of TempusAMM api support.\\n    ///      Example: exchanging Tempus Yield Share to DAI\\n    /// @return 1e18 decimal conversion rate per share\\n    function getPricePerFullShare() external returns (uint256);\\n\\n    /// @return 1e18 decimal stored conversion rate per share\\n    function getPricePerFullShareStored() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9.0;\\n\\n/// Implements Ownable with a two step transfer of ownership\\ninterface IOwnable {\\n    /**\\n     * @dev Change of ownership proposed.\\n     * @param currentOwner The current owner.\\n     * @param proposedOwner The proposed owner.\\n     */\\n    event OwnershipProposed(address indexed currentOwner, address indexed proposedOwner);\\n\\n    /**\\n     * @dev Ownership transferred.\\n     * @param previousOwner The previous owner.\\n     * @param newOwner The new owner.\\n     */\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @dev Proposes a transfer of ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external;\\n\\n    /**\\n     * @dev Accepts ownership of the contract by a proposed account.\\n     * Can only be called by the proposed owner.\\n     */\\n    function acceptOwnership() external;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/IVersioned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9.0;\\npragma abicoder v2;\\n\\n/// Implements versioning\\ninterface IVersioned {\\n    struct Version {\\n        uint16 major;\\n        uint16 minor;\\n        uint16 patch;\\n    }\\n\\n    /// @return The version of the contract.\\n    function version() external view returns (Version memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ITempusPool\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShareStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kind\",\"outputs\":[{\"internalType\":\"enum IPoolShare.ShareKind\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract ITempusPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PrincipalShare","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"100000","ConstructorArguments":"0000000000000000000000006320e6844eeea57343d5ca47d3166822ec78b116000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001d5450532d4c69646f207374616b6564204554482d33312d322d3230323200000000000000000000000000000000000000000000000000000000000000000000135450532d73744554482d33312d322d3230323200000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}