{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/transfers/SignatureVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"./OraclesManager.sol\\\";\\r\\nimport \\\"../interfaces/ISignatureVerifier.sol\\\";\\r\\nimport \\\"../libraries/SignatureUtil.sol\\\";\\r\\n\\r\\n/// @dev It's used to verify that a transfer is signed by oracles.\\r\\ncontract SignatureVerifier is OraclesManager, ISignatureVerifier {\\r\\n    using SignatureUtil for bytes;\\r\\n    using SignatureUtil for bytes32;\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n    /// @dev Number of required confirmations per block after the extra check is enabled\\r\\n    uint8 public confirmationThreshold;\\r\\n    /// @dev submissions count in current block\\r\\n    uint40 public submissionsInBlock;\\r\\n    /// @dev Current block\\r\\n    uint40 public currentBlock;\\r\\n\\r\\n    /// @dev Debridge gate address\\r\\n    address public debridgeAddress;\\r\\n\\r\\n    /* ========== ERRORS ========== */\\r\\n\\r\\n    error DeBridgeGateBadRole();\\r\\n    error NotConfirmedByRequiredOracles();\\r\\n    error NotConfirmedThreshold();\\r\\n    error SubmissionNotConfirmed();\\r\\n    error DuplicateSignatures();\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    modifier onlyDeBridgeGate() {\\r\\n        if (msg.sender != debridgeAddress) revert DeBridgeGateBadRole();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== CONSTRUCTOR  ========== */\\r\\n\\r\\n    /// @dev Constructor that initializes the most important configurations.\\r\\n    /// @param _minConfirmations Common confirmations count.\\r\\n    /// @param _confirmationThreshold Confirmations per block after the extra check is enabled.\\r\\n    /// @param _excessConfirmations Confirmations count in case of excess activity.\\r\\n    function initialize(\\r\\n        uint8 _minConfirmations,\\r\\n        uint8 _confirmationThreshold,\\r\\n        uint8 _excessConfirmations,\\r\\n        address _debridgeAddress\\r\\n    ) public initializer {\\r\\n        OraclesManager.initialize(_minConfirmations, _excessConfirmations);\\r\\n        confirmationThreshold = _confirmationThreshold;\\r\\n        debridgeAddress = _debridgeAddress;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @inheritdoc ISignatureVerifier\\r\\n    function submit(\\r\\n        bytes32 _submissionId,\\r\\n        bytes memory _signatures,\\r\\n        uint8 _excessConfirmations\\r\\n    ) external override onlyDeBridgeGate {\\r\\n        //Need confirmation to confirm submission\\r\\n        uint8 needConfirmations = _excessConfirmations > minConfirmations\\r\\n            ? _excessConfirmations\\r\\n            : minConfirmations;\\r\\n        // Count of required(DSRM) oracles confirmation\\r\\n        uint256 currentRequiredOraclesCount;\\r\\n        // stack variable to aggregate confirmations and write to storage once\\r\\n        uint8 confirmations;\\r\\n        uint256 signaturesCount = _countSignatures(_signatures);\\r\\n        address[] memory validators = new address[](signaturesCount);\\r\\n        for (uint256 i = 0; i < signaturesCount; i++) {\\r\\n            (bytes32 r, bytes32 s, uint8 v) = _signatures.parseSignature(i * 65);\\r\\n            address oracle = ecrecover(_submissionId.getUnsignedMsg(), v, r, s);\\r\\n            if (getOracleInfo[oracle].isValid) {\\r\\n                for (uint256 k = 0; k < i; k++) {\\r\\n                    if (validators[k] == oracle) revert DuplicateSignatures();\\r\\n                }\\r\\n                validators[i] = oracle;\\r\\n\\r\\n                confirmations += 1;\\r\\n                emit Confirmed(_submissionId, oracle);\\r\\n                if (getOracleInfo[oracle].required) {\\r\\n                    currentRequiredOraclesCount += 1;\\r\\n                }\\r\\n                if (\\r\\n                    confirmations >= needConfirmations &&\\r\\n                    currentRequiredOraclesCount >= requiredOraclesCount\\r\\n                ) {\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (currentRequiredOraclesCount != requiredOraclesCount)\\r\\n            revert NotConfirmedByRequiredOracles();\\r\\n\\r\\n        if (confirmations >= minConfirmations) {\\r\\n            if (currentBlock == uint40(block.number)) {\\r\\n                submissionsInBlock += 1;\\r\\n            } else {\\r\\n                currentBlock = uint40(block.number);\\r\\n                submissionsInBlock = 1;\\r\\n            }\\r\\n            emit SubmissionApproved(_submissionId);\\r\\n        }\\r\\n\\r\\n        if (submissionsInBlock > confirmationThreshold) {\\r\\n            if (confirmations < excessConfirmations) revert NotConfirmedThreshold();\\r\\n        }\\r\\n\\r\\n        if (confirmations < needConfirmations) revert SubmissionNotConfirmed();\\r\\n    }\\r\\n\\r\\n    /* ========== ADMIN ========== */\\r\\n\\r\\n    /// @dev Sets minimal required confirmations.\\r\\n    /// @param _confirmationThreshold Confirmation info.\\r\\n    function setThreshold(uint8 _confirmationThreshold) external onlyAdmin {\\r\\n        if (_confirmationThreshold == 0) revert WrongArgument();\\r\\n        confirmationThreshold = _confirmationThreshold;\\r\\n    }\\r\\n\\r\\n    /// @dev Sets core debridge conrtact address.\\r\\n    /// @param _debridgeAddress Debridge address.\\r\\n    function setDebridgeAddress(address _debridgeAddress) external onlyAdmin {\\r\\n        debridgeAddress = _debridgeAddress;\\r\\n    }\\r\\n\\r\\n    /* ========== VIEW ========== */\\r\\n\\r\\n    /// @dev Check is valid signature\\r\\n    /// @param _submissionId Submission identifier.\\r\\n    /// @param _signature signature by oracle.\\r\\n    function isValidSignature(bytes32 _submissionId, bytes memory _signature)\\r\\n        external\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        (bytes32 r, bytes32 s, uint8 v) = _signature.splitSignature();\\r\\n        address oracle = ecrecover(_submissionId.getUnsignedMsg(), v, r, s);\\r\\n        return getOracleInfo[oracle].isValid;\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL ========== */\\r\\n\\r\\n    function _countSignatures(bytes memory _signatures) internal pure returns (uint256) {\\r\\n        return _signatures.length % 65 == 0 ? _signatures.length / 65 : 0;\\r\\n    }\\r\\n\\r\\n    // ============ Version Control ============\\r\\n    /// @dev Get this contract's version\\r\\n    function version() external pure returns (uint256) {\\r\\n        return 201; // 2.0.1\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/transfers/OraclesManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"../interfaces/IOraclesManager.sol\\\";\\r\\n\\r\\n/// @dev The base contract for oracles management. Allows adding/removing oracles,\\r\\n/// managing the minimal required amount of confirmations.\\r\\ncontract OraclesManager is Initializable, AccessControlUpgradeable, IOraclesManager {\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    /// @dev Minimal required confirmations\\r\\n    uint8 public minConfirmations;\\r\\n    /// @dev Minimal required confirmations in case of too many confirmations\\r\\n    uint8 public excessConfirmations;\\r\\n    /// @dev Count of required oracles\\r\\n    uint8 public requiredOraclesCount;\\r\\n    /// @dev Oracle addresses\\r\\n    address[] public oracleAddresses;\\r\\n    /// @dev Maps an oracle address to the oracle details\\r\\n    mapping(address => OracleInfo) public getOracleInfo;\\r\\n\\r\\n    /* ========== ERRORS ========== */\\r\\n\\r\\n    error AdminBadRole();\\r\\n    error OracleBadRole();\\r\\n\\r\\n    error OracleAlreadyExist();\\r\\n    error OracleNotFound();\\r\\n\\r\\n    error WrongArgument();\\r\\n    error LowMinConfirmations();\\r\\n\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\\r\\n        _;\\r\\n    }\\r\\n    modifier onlyOracle() {\\r\\n        if (!getOracleInfo[msg.sender].isValid) revert OracleBadRole();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== CONSTRUCTOR  ========== */\\r\\n\\r\\n    /// @dev Constructor that initializes the most important configurations.\\r\\n    /// @param _minConfirmations Minimal required confirmations.\\r\\n    /// @param _excessConfirmations Minimal required confirmations in case of too many confirmations.\\r\\n    function initialize(uint8 _minConfirmations, uint8 _excessConfirmations) internal {\\r\\n        if (_minConfirmations == 0 || _excessConfirmations < _minConfirmations) revert LowMinConfirmations();\\r\\n        minConfirmations = _minConfirmations;\\r\\n        excessConfirmations = _excessConfirmations;\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n    }\\r\\n\\r\\n    /* ========== ADMIN ========== */\\r\\n\\r\\n    /// @dev Sets minimal required confirmations.\\r\\n    /// @param _minConfirmations Minimal required confirmations.\\r\\n    function setMinConfirmations(uint8 _minConfirmations) external onlyAdmin {\\r\\n        if (_minConfirmations < oracleAddresses.length / 2 + 1) revert LowMinConfirmations();\\r\\n        minConfirmations = _minConfirmations;\\r\\n    }\\r\\n\\r\\n    /// @dev Sets minimal required confirmations in case of too many confirmations.\\r\\n    /// @param _excessConfirmations Minimal required confirmations in case of too many confirmations.\\r\\n    function setExcessConfirmations(uint8 _excessConfirmations) external onlyAdmin {\\r\\n        if (_excessConfirmations < minConfirmations) revert LowMinConfirmations();\\r\\n        excessConfirmations = _excessConfirmations;\\r\\n    }\\r\\n\\r\\n    /// @dev Add oracles.\\r\\n    /// @param _oracles Oracles' addresses.\\r\\n    /// @param _required A transfer will not be confirmed without oracles having required set to true,\\r\\n    function addOracles(\\r\\n        address[] memory _oracles,\\r\\n        bool[] memory _required\\r\\n    ) external onlyAdmin {\\r\\n        if (_oracles.length != _required.length) revert WrongArgument();\\r\\n        if (minConfirmations < (oracleAddresses.length +  _oracles.length) / 2 + 1) revert LowMinConfirmations();\\r\\n\\r\\n        for (uint256 i = 0; i < _oracles.length; i++) {\\r\\n            OracleInfo storage oracleInfo = getOracleInfo[_oracles[i]];\\r\\n            if (oracleInfo.exist) revert OracleAlreadyExist();\\r\\n\\r\\n            oracleAddresses.push(_oracles[i]);\\r\\n\\r\\n            if (_required[i]) {\\r\\n                requiredOraclesCount += 1;\\r\\n            }\\r\\n\\r\\n            oracleInfo.exist = true;\\r\\n            oracleInfo.isValid = true;\\r\\n            oracleInfo.required = _required[i];\\r\\n\\r\\n            emit AddOracle(_oracles[i], _required[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Update an oracle.\\r\\n    /// @param _oracle An oracle address.\\r\\n    /// @param _isValid Is this oracle valid, i.e. should it be treated as an oracle.\\r\\n    /// @param _required If set to true a transfer will not be confirmed without this oracle.\\r\\n    function updateOracle(\\r\\n        address _oracle,\\r\\n        bool _isValid,\\r\\n        bool _required\\r\\n    ) external onlyAdmin {\\r\\n        //If oracle is invalid, it must be not required\\r\\n        if (!_isValid && _required) revert WrongArgument();\\r\\n\\r\\n        OracleInfo storage oracleInfo = getOracleInfo[_oracle];\\r\\n        if (!oracleInfo.exist) revert OracleNotFound();\\r\\n\\r\\n        if (oracleInfo.required && !_required) {\\r\\n            requiredOraclesCount -= 1;\\r\\n        } else if (!oracleInfo.required && _required) {\\r\\n            requiredOraclesCount += 1;\\r\\n        }\\r\\n        if (oracleInfo.isValid && !_isValid) {\\r\\n            // remove oracle from oracleAddresses array without keeping an order\\r\\n            for (uint256 i = 0; i < oracleAddresses.length; i++) {\\r\\n                if (oracleAddresses[i] == _oracle) {\\r\\n                    oracleAddresses[i] = oracleAddresses[oracleAddresses.length - 1];\\r\\n                    oracleAddresses.pop();\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        } else if (!oracleInfo.isValid && _isValid) {\\r\\n            if (minConfirmations < (oracleAddresses.length + 1) / 2 + 1) revert LowMinConfirmations();\\r\\n            oracleAddresses.push(_oracle);\\r\\n        }\\r\\n        oracleInfo.isValid = _isValid;\\r\\n        oracleInfo.required = _required;\\r\\n        emit UpdateOracle(_oracle, _required, _isValid);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ISignatureVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ninterface ISignatureVerifier {\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    /// @dev Emitted once the submission is confirmed by one oracle.\\r\\n    event Confirmed(bytes32 submissionId, address operator);\\r\\n    /// @dev Emitted once the submission is confirmed by min required amount of oracles.\\r\\n    event DeployConfirmed(bytes32 deployId, address operator);\\r\\n\\r\\n    /* ========== FUNCTIONS ========== */\\r\\n\\r\\n    /// @dev Check confirmation (validate signatures) for the transfer request.\\r\\n    /// @param _submissionId Submission identifier.\\r\\n    /// @param _signatures Array of signatures by oracles.\\r\\n    /// @param _excessConfirmations override min confirmations count\\r\\n    function submit(\\r\\n        bytes32 _submissionId,\\r\\n        bytes memory _signatures,\\r\\n        uint8 _excessConfirmations\\r\\n    ) external;\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/SignatureUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nlibrary SignatureUtil {\\r\\n    /* ========== ERRORS ========== */\\r\\n\\r\\n    error WrongArgumentLength();\\r\\n    error SignatureInvalidLength();\\r\\n    error SignatureInvalidV();\\r\\n\\r\\n    /// @dev Prepares raw msg that was signed by the oracle.\\r\\n    /// @param _submissionId Submission identifier.\\r\\n    function getUnsignedMsg(bytes32 _submissionId) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _submissionId));\\r\\n    }\\r\\n\\r\\n    /// @dev Splits signature bytes to r,s,v components.\\r\\n    /// @param _signature Signature bytes in format r+s+v.\\r\\n    function splitSignature(bytes memory _signature)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            bytes32 r,\\r\\n            bytes32 s,\\r\\n            uint8 v\\r\\n        )\\r\\n    {\\r\\n        if (_signature.length != 65) revert SignatureInvalidLength();\\r\\n        return parseSignature(_signature, 0);\\r\\n    }\\r\\n\\r\\n    function parseSignature(bytes memory _signatures, uint256 offset)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            bytes32 r,\\r\\n            bytes32 s,\\r\\n            uint8 v\\r\\n        )\\r\\n    {\\r\\n        assembly {\\r\\n            r := mload(add(_signatures, add(32, offset)))\\r\\n            s := mload(add(_signatures, add(64, offset)))\\r\\n            v := and(mload(add(_signatures, add(65, offset))), 0xff)\\r\\n        }\\r\\n\\r\\n        if (v < 27) v += 27;\\r\\n        if (v != 27 && v != 28) revert SignatureInvalidV();\\r\\n    }\\r\\n\\r\\n    function toUint256(bytes memory _bytes, uint256 _offset)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 result)\\r\\n    {\\r\\n        if (_bytes.length < _offset + 32) revert WrongArgumentLength();\\r\\n\\r\\n        assembly {\\r\\n            result := mload(add(add(_bytes, 0x20), _offset))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOraclesManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ninterface IOraclesManager {\\r\\n    /* ========== STRUCTS ========== */\\r\\n\\r\\n    struct OracleInfo {\\r\\n        bool exist; // exist oracle\\r\\n        bool isValid; // is valid oracle\\r\\n        bool required; // without this oracle (DSRM), the transfer will not be confirmed\\r\\n    }\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n    /// @dev Emitted when an oracle is added\\r\\n    /// @param oracle Address of an added oracle\\r\\n    /// @param required Is this oracle's signature required for every transfer\\r\\n    event AddOracle(address oracle, bool required);\\r\\n    /// @dev Emitted when an oracle is updated\\r\\n    /// @param oracle Address of an updated oracle\\r\\n    /// @param required Is this oracle's signature required for every transfer\\r\\n    /// @param isValid Is this oracle valid, i.e. should it be treated as an oracle\\r\\n    event UpdateOracle(address oracle, bool required, bool isValid);\\r\\n    /// @dev Emitted once the submission is confirmed by min required amount of oracles\\r\\n    event DeployApproved(bytes32 deployId);\\r\\n    /// @dev Emitted once the submission is confirmed by min required amount of oracles\\r\\n    event SubmissionApproved(bytes32 submissionId);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"AdminBadRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeBridgeGateBadRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LowMinConfirmations\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotConfirmedByRequiredOracles\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotConfirmedThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleAlreadyExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleBadRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureInvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureInvalidV\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubmissionNotConfirmed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongArgument\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"required\",\"type\":\"bool\"}],\"name\":\"AddOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"submissionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"Confirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"deployId\",\"type\":\"bytes32\"}],\"name\":\"DeployApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"deployId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"DeployConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"submissionId\",\"type\":\"bytes32\"}],\"name\":\"SubmissionApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"required\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"UpdateOracle\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_required\",\"type\":\"bool[]\"}],\"name\":\"addOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmationThreshold\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBlock\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excessConfirmations\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getOracleInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"required\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_minConfirmations\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_confirmationThreshold\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_excessConfirmations\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_debridgeAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_submissionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minConfirmations\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oracleAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredOraclesCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_debridgeAddress\",\"type\":\"address\"}],\"name\":\"setDebridgeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_excessConfirmations\",\"type\":\"uint8\"}],\"name\":\"setExcessConfirmations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_minConfirmations\",\"type\":\"uint8\"}],\"name\":\"setMinConfirmations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_confirmationThreshold\",\"type\":\"uint8\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submissionsInBlock\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_submissionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signatures\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"_excessConfirmations\",\"type\":\"uint8\"}],\"name\":\"submit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isValid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_required\",\"type\":\"bool\"}],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"SignatureVerifier","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}