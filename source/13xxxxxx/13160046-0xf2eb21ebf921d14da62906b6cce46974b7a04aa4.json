{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ETHStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./IETHStaking.sol\\\";\\r\\n\\r\\ncontract ETHStaking is IETHStaking, Ownable, ReentrancyGuard {\\r\\n    /*********** VARIABLES ***********/\\r\\n    uint256 public override totalValueLocked;\\r\\n\\r\\n    uint256 public override apy;\\r\\n\\r\\n    uint256 public override correctionFactor;\\r\\n\\r\\n    /*********** MAPPING ***********/\\r\\n    // User info\\r\\n    // user address -> stakeNum -> UserInfo struct\\r\\n    mapping(address => mapping(uint256 => UserInfo)) public override userInfo;\\r\\n\\r\\n    // Stake Nums - How many stakes a user has\\r\\n    mapping(address => uint256) public override stakeNums;\\r\\n    mapping(address => uint256) private __stakeNums;\\r\\n\\r\\n    /*********** CONSTRUCTOR ***********/\\r\\n    constructor(uint256 _apy, uint256 _correctionFactor) {\\r\\n        apy = _apy; // 0.6% apy -> 0.6 * 1e18\\r\\n        correctionFactor = _correctionFactor; // 0.6% apy -> 1e21\\r\\n    }\\r\\n\\r\\n    /*********** FALLBACK FUNCTIONS ***********/\\r\\n    receive() external payable {}\\r\\n\\r\\n    /*********** GETTERS ***********/\\r\\n    function balanceOf(address _account, uint256 _stakeNum)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return userInfo[_account][_stakeNum].amount;\\r\\n    }\\r\\n\\r\\n    function stakeExists(address _beneficiary, uint256 _stakeNum)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return balanceOf(_beneficiary, _stakeNum) != 0 ? true : false;\\r\\n    }\\r\\n\\r\\n    function calculateReward(address _beneficiary, uint256 _stakeNum)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 _reward)\\r\\n    {\\r\\n        UserInfo memory _user = userInfo[_beneficiary][_stakeNum];\\r\\n        _stakeExists(_beneficiary, _stakeNum);\\r\\n\\r\\n        if (totalValueLocked == 0) return 0;\\r\\n\\r\\n        uint256 _secs = _calculateSecs(block.timestamp, _user.lastUpdated);\\r\\n        _reward = (_secs * _user.amount * apy) / (3153600 * correctionFactor);\\r\\n    }\\r\\n\\r\\n    function contractBalance() public view override returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    /*********** ACTIONS ***********/\\r\\n\\r\\n    function changeAPY(uint256 _apy, uint256 _correctionFactor)\\r\\n        public\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_apy != 0, \\\"apy cannot be zero\\\");\\r\\n        apy = _apy; // 0.6% apy -> 0.6 * 1e18\\r\\n        correctionFactor = _correctionFactor; // 0.6% apy -> 1e21\\r\\n        emit APYChanged(_apy, _correctionFactor);\\r\\n    }\\r\\n\\r\\n    function withdrawContractFunds(uint256 _amount) public override onlyOwner {\\r\\n        require(\\r\\n            _amount <= address(this).balance,\\r\\n            \\\"amount exceeds contract balance\\\"\\r\\n        );\\r\\n        _handleETHTransfer(owner(), _amount);\\r\\n        emit OwnerWithdrawFunds(owner(), _amount);\\r\\n    }\\r\\n\\r\\n    function destructContract() public override onlyOwner {\\r\\n        selfdestruct(payable(owner()));\\r\\n    }\\r\\n\\r\\n    function stake() public payable override {\\r\\n        uint256 _amount = msg.value;\\r\\n        require(_amount > 0, \\\"stake amount not valid\\\");\\r\\n\\r\\n        uint256 _stakeNums = __stakeNums[_msgSender()];\\r\\n        uint256 _stakeNum;\\r\\n\\r\\n        if (_stakeNums == 0) {\\r\\n            // user is coming for first time\\r\\n            _stakeNum = 1;\\r\\n        } else {\\r\\n            // add 1 in his previous stake\\r\\n            _stakeNum = _stakeNums + 1;\\r\\n        }\\r\\n\\r\\n        require(!stakeExists(_msgSender(), _stakeNum), \\\"stake already exists\\\");\\r\\n\\r\\n        _updateUserInfo(ActionType.Stake, _msgSender(), _stakeNum, _amount, 0);\\r\\n\\r\\n        emit Staked(_msgSender(), _amount, _stakeNum);\\r\\n    }\\r\\n\\r\\n    function unstake(uint256 _stakeNum) public override {\\r\\n        _stakeExists(_msgSender(), _stakeNum);\\r\\n\\r\\n        uint256 _amount = balanceOf(_msgSender(), _stakeNum);\\r\\n        uint256 _reward = calculateReward(_msgSender(), _stakeNum);\\r\\n\\r\\n        _updateUserInfo(\\r\\n            ActionType.Unstake,\\r\\n            _msgSender(),\\r\\n            _stakeNum,\\r\\n            _amount,\\r\\n            _reward\\r\\n        );\\r\\n\\r\\n        _handleETHTransfer(_msgSender(), (_amount + _reward));\\r\\n\\r\\n        emit Unstaked(_msgSender(), _amount, _reward, _stakeNum);\\r\\n    }\\r\\n\\r\\n    /*********** INTERNAL FUNCTIONS ***********/\\r\\n    function _calculateSecs(uint256 _to, uint256 _from)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _to - _from;\\r\\n    }\\r\\n\\r\\n    function _stakeExists(address _beneficiary, uint256 _stakeNum)\\r\\n        internal\\r\\n        view\\r\\n    {\\r\\n        UserInfo memory _user = userInfo[_beneficiary][_stakeNum];\\r\\n        require(_stakeNum != 0, \\\"StakeNum does not exist\\\");\\r\\n        require(stakeNums[_beneficiary] != 0, \\\"User does not have any stake\\\");\\r\\n        require(_user.amount > 0, \\\"User staked amount cannot be 0\\\");\\r\\n    }\\r\\n\\r\\n    function _handleETHTransfer(address _beneficiary, uint256 _amount)\\r\\n        internal\\r\\n    {\\r\\n        payable(_beneficiary).transfer(_amount);\\r\\n        emit ETHTransferred(_beneficiary, _amount);\\r\\n    }\\r\\n\\r\\n    function _updateUserInfo(\\r\\n        ActionType _actionType,\\r\\n        address _beneficiary,\\r\\n        uint256 _stakeNum,\\r\\n        uint256 _amount,\\r\\n        uint256 _reward\\r\\n    ) internal nonReentrant {\\r\\n        UserInfo storage user = userInfo[_beneficiary][_stakeNum];\\r\\n\\r\\n        user.lastUpdated = block.timestamp;\\r\\n\\r\\n        if (_actionType == ActionType.Stake) {\\r\\n            stakeNums[_beneficiary] = _stakeNum;\\r\\n            __stakeNums[_beneficiary] = _stakeNum;\\r\\n            totalValueLocked = totalValueLocked + _amount;\\r\\n            user.amount = _amount;\\r\\n            user.rewardPaid = 0;\\r\\n        }\\r\\n\\r\\n        if (_actionType == ActionType.Unstake) {\\r\\n            stakeNums[_beneficiary] = stakeNums[_beneficiary] - 1;\\r\\n            totalValueLocked = totalValueLocked - _amount;\\r\\n            user.amount = 0;\\r\\n            user.rewardPaid = _reward;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IETHStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IETHStaking {\\r\\n    /*********** STRUCT ***********/\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        uint256 rewardPaid;\\r\\n        uint256 lastUpdated;\\r\\n    }\\r\\n\\r\\n    /*********** ENUM ***********/\\r\\n    enum ActionType {\\r\\n        Stake,\\r\\n        Unstake\\r\\n    }\\r\\n\\r\\n    /*********** EVENTS ***********/\\r\\n    event Staked(address indexed user, uint256 amount, uint256 stakeNum);\\r\\n    event Unstaked(\\r\\n        address indexed user,\\r\\n        uint256 amount,\\r\\n        uint256 reward,\\r\\n        uint256 stakeNum\\r\\n    );\\r\\n    event OwnerWithdrawFunds(address indexed beneficiary, uint256 amount);\\r\\n    event ETHTransferred(address indexed beneficiary, uint256 amount);\\r\\n    event APYChanged(uint256 apy, uint256 correctionFactor);\\r\\n\\r\\n    /*********** GETTERS ***********/\\r\\n    function totalValueLocked() external view returns (uint256);\\r\\n\\r\\n    function apy() external view returns (uint256);\\r\\n\\r\\n    function correctionFactor() external view returns (uint256);\\r\\n\\r\\n    function userInfo(address, uint256)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function stakeNums(address) external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address _account, uint256 _stakeNum)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function stakeExists(address _beneficiary, uint256 _stakeNum)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function calculateReward(address _beneficiary, uint256 _stakeNum)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function contractBalance() external view returns (uint256);\\r\\n\\r\\n    /*********** ACTIONS ***********/\\r\\n    function stake() external payable;\\r\\n\\r\\n    function unstake(uint256 _stakeNum) external;\\r\\n\\r\\n    function changeAPY(uint256 _apy, uint256 _correctionFactor) external;\\r\\n\\r\\n    function withdrawContractFunds(uint256 _amount) external;\\r\\n\\r\\n    function destructContract() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_correctionFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"correctionFactor\",\"type\":\"uint256\"}],\"name\":\"APYChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OwnerWithdrawFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeNum\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeNum\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"apy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeNum\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeNum\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_correctionFactor\",\"type\":\"uint256\"}],\"name\":\"changeAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"correctionFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destructContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeNum\",\"type\":\"uint256\"}],\"name\":\"stakeExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeNums\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeNum\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawContractFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ETHStaking","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000a688906bd8b0000000000000000000000000000000000000000000000000003635c9adc5dea00000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}