{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/v0/libraries/Elections.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./ElectionsPrincipal.sol\\\";\\n\\nlibrary Elections {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * Finds:\\n     * - the winning candidate (and the number of votes cast for it),\\n     * - the number of votes cast for the runner up candidate,\\n     * - and the total number of votes cast for any candidate but `address(0)`\\n     *   (such votes are treated as abstained votes)\\n     * by transforming the set of `voters` (and reading each voter's decision\\n     * and the number of its votes via `principal`'s interface)\\n     * into the array of candidates with the sum of votes cast for each candidate,\\n     * then iterating through this array to find the TOP-2 candidates on the fly.\\n     *\\n     * Technical considerations: our experiments show that handling ≈2500 voters\\n     * with ≈10 unique candidates consumes almost 30M of gas - this is treated\\n     * as the best-case scenario, and that's why the internal memory arrays\\n     * are defined with the size of `2500` elements each.\\n     */\\n    function findTop2(\\n        EnumerableSet.AddressSet storage voters,\\n        ElectionsPrincipal principal\\n    )\\n        public\\n        view\\n        returns (\\n            address winningCandidate,\\n            uint256 winningCandidateVotes,\\n            uint256 runnerUpCandidateVotes,\\n            uint256 totalVotes\\n        )\\n    {\\n        (\\n            address[2500] memory candidatesList,\\n            uint256[2500] memory candidatesVotes,\\n            uint256 candidatesCount,\\n            uint256 totalVotes_\\n        ) = _convertVotersList(voters, principal);\\n\\n        require(candidatesCount > 0, \\\"no candidates\\\");\\n\\n        totalVotes = totalVotes_;\\n\\n        // iterate thru the list of candidatesVotes making TOP-2 on the fly\\n        for (uint256 j = 0; j < candidatesCount; j++) {\\n            uint256 votes = candidatesVotes[j];\\n\\n            if (votes > winningCandidateVotes) {\\n                // the winner found within this loop shifts the\\n                // winner found during previous loops down to the runner up\\n                runnerUpCandidateVotes = winningCandidateVotes;\\n\\n                winningCandidate = candidatesList[j];\\n                winningCandidateVotes = votes;\\n            } else if (votes > runnerUpCandidateVotes) {\\n                runnerUpCandidateVotes = votes;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Sums the votes of the `selectedVoters` (reading each voter's decision\\n     * and the number of its votes via `principal` interface) who cast their\\n     * votes for the `expectedCandidate`.\\n     *\\n     * @param expectedCandidate the candidate whom the votes to be sum where cast for\\n     * @param selectedVoters the ordered list of voters whose votes cast for the expected candidate should be summed\\n     * @param principal the interface to read each voter's decision and balance\\n     */\\n    function sumVotesFor(\\n        address expectedCandidate,\\n        address[] memory selectedVoters,\\n        ElectionsPrincipal principal\\n    ) public view returns (uint256 votes) {\\n        address prevVoter;\\n        for (uint256 j = 0; j < selectedVoters.length; j++) {\\n            address voter = selectedVoters[j];\\n            address candidate = principal.candidateOf(voter);\\n            if (\\n                candidate == expectedCandidate &&\\n                // make sure this list is ordered\\n                prevVoter < voter\\n            ) {\\n                votes += principal.votesOf(voter);\\n                prevVoter = voter;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Sums the votes of the `selectedVoters` (reading each voter's decision\\n     * and the number of its votes via `principal` interface) who cast their\\n     * votes for anyone but `excludedCandidate` and `address(0)`.\\n     *\\n     * @param excludedCandidate the candidate whom the votes to not be sum where cast for\\n     * @param selectedVoters the ordered list of voters whose votes cast for anyone but `excludedCandidate` and `address(0)` should be summed\\n     * @param principal the interface to read voters' decisions and balances\\n     */\\n    function sumVotesExceptZeroAnd(\\n        address excludedCandidate,\\n        address[] memory selectedVoters,\\n        ElectionsPrincipal principal\\n    ) public view returns (uint256 votes) {\\n        address prevVoter;\\n        for (uint256 i = 0; i < selectedVoters.length; i++) {\\n            address voter = selectedVoters[i];\\n            address candidate = principal.candidateOf(voter);\\n            if (\\n                // exclude unwanted addresses\\n                candidate != excludedCandidate &&\\n                candidate != address(0) &&\\n                // make sure this list is ordered\\n                prevVoter < voter\\n            ) {\\n                votes += principal.votesOf(voter);\\n                prevVoter = voter;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Determines the consensus. Consensus is reached when the number of `votes`\\n     * is more than a half of `totalVotes`, otherwise it is broken.\\n     */\\n    function calcConsensus(uint256 votes, uint256 totalVotes)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        return votes > (totalVotes / 2);\\n    }\\n\\n    /**\\n     * Internal function to transform the set of `voters` into the array of\\n     * candidates.\\n     *\\n     * This function iterates through the set of `voters`, reading each\\n     * voter's decision and the number of votes via `principal` interface.\\n     *  A voter's decision is represented by the address of the candidate he/she\\n     * decided to cast its votes for;\\n     * a voter's number of votes is represented by the number of tokens at\\n     * its balance.\\n     *\\n     * Each found candidate is added to the `candidatesList` (only once),\\n     * and the number of votes given for him are added to the `candidatesVotes`\\n     * at the same index this candidate has been added to `candidatesList`.\\n     * Additionally, this function keeps track of the number of found candidates\\n     * via `candidatesCount` and the total number of votes cast for all\\n     * candidates (except `address(0)`) via `totalVotes`.\\n     */\\n    function _convertVotersList(\\n        EnumerableSet.AddressSet storage voters,\\n        ElectionsPrincipal principal\\n    )\\n        private\\n        view\\n        returns (\\n            address[2500] memory candidatesList,\\n            uint256[2500] memory candidatesVotes,\\n            uint256 candidatesCount,\\n            uint256 totalVotes\\n        )\\n    {\\n        // each found candidate is added to the candidatesList, and the number\\n        // of votes given for it are added at the respective index\\n        // in the candidatesVotes\\n        for (uint256 i = 0; i < voters.length(); i++) {\\n            address voter = voters.at(i);\\n            uint256 voterBalance = principal.votesOf(voter);\\n            address candidate = principal.candidateOf(voter);\\n\\n            // a voter must have positive balance, and its candidate\\n            // must not be address(0)\\n            if (voterBalance > 0 && candidate != address(0)) {\\n                totalVotes += voterBalance;\\n\\n                // this candidate may have been already added to the list,\\n                // we must look it up\\n                (bool found, uint256 foundIndex) = _findIndex(\\n                    candidate,\\n                    candidatesList,\\n                    candidatesCount\\n                );\\n\\n                if (found) {\\n                    candidatesVotes[foundIndex] += voterBalance;\\n                } else {\\n                    candidatesList[candidatesCount] = candidate;\\n                    candidatesVotes[candidatesCount] = voterBalance;\\n                    candidatesCount++;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Internal function that returns the index of the element inside `array`\\n     * which is equal to `predicate`. If such element is not found, `found` is\\n     * set to `false`.\\n     */\\n    function _findIndex(\\n        address predicate,\\n        address[2500] memory array,\\n        uint256 length\\n    ) private pure returns (bool found, uint256 index) {\\n        for (uint256 j = 0; j < length; j++) {\\n            if (predicate == array[j]) {\\n                return (true, j);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v0/libraries/ElectionsPrincipal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\n/**\\n * This interface gives readonly access to ToonToken contract's data\\n * needed by the `Elections` library\\n */\\ninterface ElectionsPrincipal {\\n    /**\\n     * Returns the address of a candidate a tokenholder account left its\\n     * votes for. In case of `address(0)` a voter is treated as an abstained.\\n     */\\n    function candidateOf(address account) external view returns (address);\\n\\n    /**\\n     * Returns the number of votes the `account` has.\\n     */\\n    function votesOf(address account) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"}],\"name\":\"calcConsensus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"excludedCandidate\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"selectedVoters\",\"type\":\"address[]\"},{\"internalType\":\"contract ElectionsPrincipal\",\"name\":\"principal\",\"type\":\"ElectionsPrincipal\"}],\"name\":\"sumVotesExceptZeroAnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expectedCandidate\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"selectedVoters\",\"type\":\"address[]\"},{\"internalType\":\"contract ElectionsPrincipal\",\"name\":\"principal\",\"type\":\"ElectionsPrincipal\"}],\"name\":\"sumVotesFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Elections","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}