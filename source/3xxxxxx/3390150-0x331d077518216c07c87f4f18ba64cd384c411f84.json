{"status":"1","message":"OK","result":[{"SourceCode":"// This software is a subject to Ambisafe License Agreement.\r\n// No use or distribution is allowed without written permission from Ambisafe.\r\n// https://ambisafe.com/terms.pdf\r\n\r\npragma solidity 0.4.8;\r\n\r\ncontract Ambi2 {\r\n    function claimFor(address _address, address _owner) returns(bool);\r\n    function hasRole(address _from, bytes32 _role, address _to) constant returns(bool);\r\n    function isOwner(address _node, address _owner) constant returns(bool);\r\n}\r\n\r\ncontract Ambi2Enabled {\r\n    Ambi2 ambi2;\r\n\r\n    modifier onlyRole(bytes32 _role) {\r\n        if (address(ambi2) != 0x0 && ambi2.hasRole(this, _role, msg.sender)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    // Perform only after claiming the node, or claim in the same tx.\r\n    function setupAmbi2(Ambi2 _ambi2) returns(bool) {\r\n        if (address(ambi2) != 0x0) {\r\n            return false;\r\n        }\r\n\r\n        ambi2 = _ambi2;\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Ambi2EnabledFull is Ambi2Enabled {\r\n    // Setup and claim atomically.\r\n    function setupAmbi2(Ambi2 _ambi2) returns(bool) {\r\n        if (address(ambi2) != 0x0) {\r\n            return false;\r\n        }\r\n        if (!_ambi2.claimFor(this, msg.sender) && !_ambi2.isOwner(this, msg.sender)) {\r\n            return false;\r\n        }\r\n\r\n        ambi2 = _ambi2;\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract RegistryICAPInterface {\r\n    function parse(bytes32 _icap) constant returns(address, bytes32, bool);\r\n    function institutions(bytes32 _institution) constant returns(address);\r\n}\r\n\r\ncontract Cosigner {\r\n    function consumeOperation(bytes32 _opHash, uint _required) returns(bool);\r\n}\r\n\r\ncontract Emitter {\r\n    function emitTransfer(address _from, address _to, bytes32 _symbol, uint _value, string _reference);\r\n    function emitTransferToICAP(address _from, address _to, bytes32 _icap, uint _value, string _reference);\r\n    function emitIssue(bytes32 _symbol, uint _value, address _by);\r\n    function emitRevoke(bytes32 _symbol, uint _value, address _by);\r\n    function emitOwnershipChange(address _from, address _to, bytes32 _symbol);\r\n    function emitApprove(address _from, address _spender, bytes32 _symbol, uint _value);\r\n    function emitRecovery(address _from, address _to, address _by);\r\n    function emitError(bytes32 _message);\r\n    function emitChange(bytes32 _symbol);\r\n}\r\n\r\ncontract Proxy {\r\n    function emitTransfer(address _from, address _to, uint _value);\r\n    function emitApprove(address _from, address _spender, uint _value);\r\n}\r\n\r\n/**\r\n * @title EToken2.\r\n *\r\n * The official Ambisafe assets platform powering all kinds of tokens.\r\n * EToken2 uses EventsHistory contract to keep events, so that in case it needs to be redeployed\r\n * at some point, all the events keep appearing at the same place.\r\n *\r\n * Every asset is meant to be used through a proxy contract. Only one proxy contract have access\r\n * rights for a particular asset.\r\n *\r\n * Features: assets issuance, transfers, allowances, supply adjustments, lost wallet access recovery.\r\n *           cosignature check, ICAP.\r\n *\r\n * Note: all the non constant functions return false instead of throwing in case if state change\r\n * didn't happen yet.\r\n */\r\ncontract EToken2 is Ambi2EnabledFull {\r\n    mapping(bytes32 => bool) switches;\r\n\r\n    function isEnabled(bytes32 _switch) constant returns(bool) {\r\n        return switches[_switch];\r\n    }\r\n\r\n    function enableSwitch(bytes32 _switch) onlyRole('issuance') returns(bool) {\r\n        switches[_switch] = true;\r\n        return true;\r\n    }\r\n\r\n    modifier checkEnabledSwitch(bytes32 _switch) {\r\n        if (!isEnabled(_switch)) {\r\n            _error('Feature is disabled');\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    enum Features { Issue, TransferWithReference, Revoke, ChangeOwnership, Allowances, ICAP }\r\n\r\n    // Structure of a particular asset.\r\n    struct Asset {\r\n        uint owner;                       // Asset's owner id.\r\n        uint totalSupply;                 // Asset's total supply.\r\n        string name;                      // Asset's name, for information purposes.\r\n        string description;               // Asset's description, for information purposes.\r\n        bool isReissuable;                // Indicates if asset have dynamic of fixed supply.\r\n        uint8 baseUnit;                   // Proposed number of decimals.\r\n        bool isLocked;                    // Are changes still allowed.\r\n        mapping(uint => Wallet) wallets;  // Holders wallets.\r\n    }\r\n\r\n    // Structure of an asset holder wallet for particular asset.\r\n    struct Wallet {\r\n        uint balance;\r\n        mapping(uint => uint) allowance;\r\n    }\r\n\r\n    // Structure of an asset holder.\r\n    struct Holder {\r\n        address addr;                    // Current address of the holder.\r\n        Cosigner cosigner;               // Cosigner contract for 2FA and recovery.\r\n        mapping(address => bool) trust;  // Addresses that are trusted with recovery proocedure.\r\n    }\r\n\r\n    // Iterable mapping pattern is used for holders.\r\n    uint public holdersCount;\r\n    mapping(uint => Holder) public holders;\r\n\r\n    // This is an access address mapping. Many addresses may have access to a single holder.\r\n    mapping(address => uint) holderIndex;\r\n\r\n    // Asset symbol to asset mapping.\r\n    mapping(bytes32 => Asset) public assets;\r\n\r\n    // Asset symbol to asset proxy mapping.\r\n    mapping(bytes32 => address) public proxies;\r\n\r\n    // ICAP registry contract.\r\n    RegistryICAPInterface public registryICAP;\r\n\r\n    // Should use interface of the emitter, but address of events history.\r\n    Emitter public eventsHistory;\r\n\r\n    /**\r\n     * Emits Error event with specified error message.\r\n     *\r\n     * Should only be used if no state changes happened.\r\n     *\r\n     * @param _message error message.\r\n     */\r\n    function _error(bytes32 _message) internal {\r\n        eventsHistory.emitError(_message);\r\n    }\r\n\r\n    /**\r\n     * Sets EventsHstory contract address.\r\n     *\r\n     * Can be set only once, and only by contract owner.\r\n     *\r\n     * @param _eventsHistory EventsHistory contract address.\r\n     *\r\n     * @return success.\r\n     */\r\n    function setupEventsHistory(Emitter _eventsHistory) onlyRole('setup') returns(bool) {\r\n        if (address(eventsHistory) != 0) {\r\n            return false;\r\n        }\r\n        eventsHistory = _eventsHistory;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Sets RegistryICAP contract address.\r\n     *\r\n     * Can be set only once, and only by contract owner.\r\n     *\r\n     * @param _registryICAP RegistryICAP contract address.\r\n     *\r\n     * @return success.\r\n     */\r\n    function setupRegistryICAP(RegistryICAPInterface _registryICAP) onlyRole('setup') returns(bool) {\r\n        if (address(registryICAP) != 0) {\r\n            return false;\r\n        }\r\n        registryICAP = _registryICAP;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Emits Error if called not by asset owner.\r\n     */\r\n    modifier onlyOwner(bytes32 _symbol) {\r\n        if (_isSignedOwner(_symbol)) {\r\n            _;\r\n        } else {\r\n            _error('Only owner: access denied');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Emits Error if called not by asset proxy.\r\n     */\r\n    modifier onlyProxy(bytes32 _symbol) {\r\n        if (_isProxy(_symbol)) {\r\n            _;\r\n        } else {\r\n            _error('Only proxy: access denied');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Emits Error if _from doesn't trust _to.\r\n     */\r\n    modifier checkTrust(address _from, address _to) {\r\n        if (isTrusted(_from, _to)) {\r\n            _;\r\n        } else {\r\n            _error('Only trusted: access denied');\r\n        }\r\n    }\r\n\r\n    function _isSignedOwner(bytes32 _symbol) internal checkSigned(getHolderId(msg.sender), 1) returns(bool) {\r\n        return isOwner(msg.sender, _symbol);\r\n    }\r\n\r\n    /**\r\n     * Check asset existance.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return asset existance.\r\n     */\r\n    function isCreated(bytes32 _symbol) constant returns(bool) {\r\n        return assets[_symbol].owner != 0;\r\n    }\r\n\r\n    function isLocked(bytes32 _symbol) constant returns(bool) {\r\n        return assets[_symbol].isLocked;\r\n    }\r\n\r\n    /**\r\n     * Returns asset decimals.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return asset decimals.\r\n     */\r\n    function baseUnit(bytes32 _symbol) constant returns(uint8) {\r\n        return assets[_symbol].baseUnit;\r\n    }\r\n\r\n    /**\r\n     * Returns asset name.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return asset name.\r\n     */\r\n    function name(bytes32 _symbol) constant returns(string) {\r\n        return assets[_symbol].name;\r\n    }\r\n\r\n    /**\r\n     * Returns asset description.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return asset description.\r\n     */\r\n    function description(bytes32 _symbol) constant returns(string) {\r\n        return assets[_symbol].description;\r\n    }\r\n\r\n    /**\r\n     * Returns asset reissuability.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return asset reissuability.\r\n     */\r\n    function isReissuable(bytes32 _symbol) constant returns(bool) {\r\n        return assets[_symbol].isReissuable;\r\n    }\r\n\r\n    /**\r\n     * Returns asset owner address.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return asset owner address.\r\n     */\r\n    function owner(bytes32 _symbol) constant returns(address) {\r\n        return holders[assets[_symbol].owner].addr;\r\n    }\r\n\r\n    /**\r\n     * Check if specified address has asset owner rights.\r\n     *\r\n     * @param _owner address to check.\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return owner rights availability.\r\n     */\r\n    function isOwner(address _owner, bytes32 _symbol) constant returns(bool) {\r\n        return isCreated(_symbol) && (assets[_symbol].owner == getHolderId(_owner));\r\n    }\r\n\r\n    /**\r\n     * Returns asset total supply.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return asset total supply.\r\n     */\r\n    function totalSupply(bytes32 _symbol) constant returns(uint) {\r\n        return assets[_symbol].totalSupply;\r\n    }\r\n\r\n    /**\r\n     * Returns asset balance for current address of a particular holder.\r\n     *\r\n     * @param _holder holder address.\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return holder balance.\r\n     */\r\n    function balanceOf(address _holder, bytes32 _symbol) constant returns(uint) {\r\n        uint holderId = getHolderId(_holder);\r\n        return holders[holderId].addr == _holder ? _balanceOf(holderId, _symbol) : 0;\r\n    }\r\n\r\n    /**\r\n     * Returns asset balance for a particular holder id.\r\n     *\r\n     * @param _holderId holder id.\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return holder balance.\r\n     */\r\n    function _balanceOf(uint _holderId, bytes32 _symbol) constant internal returns(uint) {\r\n        return assets[_symbol].wallets[_holderId].balance;\r\n    }\r\n\r\n    /**\r\n     * Returns current address for a particular holder id.\r\n     *\r\n     * @param _holderId holder id.\r\n     *\r\n     * @return holder address.\r\n     */\r\n    function _address(uint _holderId) constant internal returns(address) {\r\n        return holders[_holderId].addr;\r\n    }\r\n\r\n    function _isProxy(bytes32 _symbol) constant internal returns(bool) {\r\n        return proxies[_symbol] == msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Sets Proxy contract address for a particular asset.\r\n     *\r\n     * Can be set only once for each asset, and only by contract owner.\r\n     *\r\n     * @param _address Proxy contract address.\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return success.\r\n     */\r\n    function setProxy(address _address, bytes32 _symbol) onlyOwner(_symbol) returns(bool) {\r\n        if (proxies[_symbol] != 0x0 && assets[_symbol].isLocked) {\r\n            return false;\r\n        }\r\n        proxies[_symbol] = _address;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfers asset balance between holders wallets.\r\n     *\r\n     * @param _fromId holder id to take from.\r\n     * @param _toId holder id to give to.\r\n     * @param _value amount to transfer.\r\n     * @param _symbol asset symbol.\r\n     */\r\n    function _transferDirect(uint _fromId, uint _toId, uint _value, bytes32 _symbol) internal {\r\n        assets[_symbol].wallets[_fromId].balance -= _value;\r\n        assets[_symbol].wallets[_toId].balance += _value;\r\n    }\r\n\r\n    /**\r\n     * Transfers asset balance between holders wallets.\r\n     *\r\n     * Performs sanity checks and takes care of allowances adjustment.\r\n     *\r\n     * @param _fromId holder id to take from.\r\n     * @param _toId holder id to give to.\r\n     * @param _value amount to transfer.\r\n     * @param _symbol asset symbol.\r\n     * @param _reference transfer comment to be included in a Transfer event.\r\n     * @param _senderId transfer initiator holder id.\r\n     *\r\n     * @return success.\r\n     */\r\n    function _transfer(uint _fromId, uint _toId, uint _value, bytes32 _symbol, string _reference, uint _senderId) internal checkSigned(_senderId, 1) returns(bool) {\r\n        // Should not allow to send to oneself.\r\n        if (_fromId == _toId) {\r\n            _error('Cannot send to oneself');\r\n            return false;\r\n        }\r\n        // Should have positive value.\r\n        if (_value == 0) {\r\n            _error('Cannot send 0 value');\r\n            return false;\r\n        }\r\n        // Should have enough balance.\r\n        if (_balanceOf(_fromId, _symbol) < _value) {\r\n            _error('Insufficient balance');\r\n            return false;\r\n        }\r\n        // Should allow references.\r\n        if (bytes(_reference).length > 0 && !isEnabled(sha3(_symbol, Features.TransferWithReference))) {\r\n            _error('References feature is disabled');\r\n            return false;\r\n        }\r\n        // Should have enough allowance.\r\n        if (_fromId != _senderId && _allowance(_fromId, _senderId, _symbol) < _value) {\r\n            _error('Not enough allowance');\r\n            return false;\r\n        }\r\n        // Adjust allowance.\r\n        if (_fromId != _senderId) {\r\n            assets[_symbol].wallets[_fromId].allowance[_senderId] -= _value;\r\n        }\r\n        _transferDirect(_fromId, _toId, _value, _symbol);\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Recursive Call: safe, all changes already made.\r\n        eventsHistory.emitTransfer(_address(_fromId), _address(_toId), _symbol, _value, _reference);\r\n        _proxyTransferEvent(_fromId, _toId, _value, _symbol);\r\n        return true;\r\n    }\r\n\r\n    // Feature and proxy checks done internally due to unknown symbol when the function is called.\r\n    function _transferToICAP(uint _fromId, bytes32 _icap, uint _value, string _reference, uint _senderId) internal returns(bool) {\r\n        var (to, symbol, success) = registryICAP.parse(_icap);\r\n        if (!success) {\r\n            _error('ICAP is not registered');\r\n            return false;\r\n        }\r\n        if (!isEnabled(sha3(symbol, Features.ICAP))) {\r\n            _error('ICAP feature is disabled');\r\n            return false;\r\n        }\r\n        if (!_isProxy(symbol)) {\r\n            _error('Only proxy: access denied');\r\n            return false;\r\n        }\r\n        uint toId = _createHolderId(to);\r\n        if (!_transfer(_fromId, toId, _value, symbol, _reference, _senderId)) {\r\n            return false;\r\n        }\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Recursive Call: safe, all changes already made.\r\n        eventsHistory.emitTransferToICAP(_address(_fromId), _address(toId), _icap, _value, _reference);\r\n        return true;\r\n    }\r\n\r\n    function proxyTransferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender) returns(bool) {\r\n        return _transferToICAP(getHolderId(_from), _icap, _value, _reference, getHolderId(_sender));\r\n    }\r\n\r\n    /**\r\n     * Ask asset Proxy contract to emit ERC20 compliant Transfer event.\r\n     *\r\n     * @param _fromId holder id to take from.\r\n     * @param _toId holder id to give to.\r\n     * @param _value amount to transfer.\r\n     * @param _symbol asset symbol.\r\n     */\r\n    function _proxyTransferEvent(uint _fromId, uint _toId, uint _value, bytes32 _symbol) internal {\r\n        if (proxies[_symbol] != 0x0) {\r\n            // Internal Out Of Gas/Throw: revert this transaction too;\r\n            // Recursive Call: safe, all changes already made.\r\n            Proxy(proxies[_symbol]).emitTransfer(_address(_fromId), _address(_toId), _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns holder id for the specified address.\r\n     *\r\n     * @param _holder holder address.\r\n     *\r\n     * @return holder id.\r\n     */\r\n    function getHolderId(address _holder) constant returns(uint) {\r\n        return holderIndex[_holder];\r\n    }\r\n\r\n    /**\r\n     * Returns holder id for the specified address, creates it if needed.\r\n     *\r\n     * @param _holder holder address.\r\n     *\r\n     * @return holder id.\r\n     */\r\n    function _createHolderId(address _holder) internal returns(uint) {\r\n        uint holderId = holderIndex[_holder];\r\n        if (holderId == 0) {\r\n            holderId = ++holdersCount;\r\n            holders[holderId].addr = _holder;\r\n            holderIndex[_holder] = holderId;\r\n        }\r\n        return holderId;\r\n    }\r\n\r\n    /**\r\n     * Issues new asset token on the platform.\r\n     *\r\n     * Tokens issued with this call go straight to contract owner.\r\n     * Each symbol can be issued only once, and only by contract owner.\r\n     *\r\n     * _isReissuable is included in checkEnabledSwitch because it should be\r\n     * explicitly allowed before issuing new asset.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     * @param _value amount of tokens to issue immediately.\r\n     * @param _name name of the asset.\r\n     * @param _description description for the asset.\r\n     * @param _baseUnit number of decimals.\r\n     * @param _isReissuable dynamic or fixed supply.\r\n     *\r\n     * @return success.\r\n     */\r\n    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable) checkEnabledSwitch(sha3(_symbol, _isReissuable, Features.Issue)) returns(bool) {\r\n        // Should have positive value if supply is going to be fixed.\r\n        if (_value == 0 && !_isReissuable) {\r\n            _error('Cannot issue 0 value fixed asset');\r\n            return false;\r\n        }\r\n        // Should not be issued yet.\r\n        if (isCreated(_symbol)) {\r\n            _error('Asset already issued');\r\n            return false;\r\n        }\r\n        uint holderId = _createHolderId(msg.sender);\r\n\r\n        assets[_symbol] = Asset(holderId, _value, _name, _description, _isReissuable, _baseUnit, false);\r\n        assets[_symbol].wallets[holderId].balance = _value;\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Recursive Call: safe, all changes already made.\r\n        eventsHistory.emitIssue(_symbol, _value, _address(holderId));\r\n        return true;\r\n    }\r\n\r\n    function changeAsset(bytes32 _symbol, string _name, string _description, uint8 _baseUnit) onlyOwner(_symbol) returns(bool) {\r\n        if (isLocked(_symbol)) {\r\n            _error('Asset is locked');\r\n            return false;\r\n        }\r\n        assets[_symbol].name = _name;\r\n        assets[_symbol].description = _description;\r\n        assets[_symbol].baseUnit = _baseUnit;\r\n        eventsHistory.emitChange(_symbol);\r\n        return true;\r\n    }\r\n\r\n    function lockAsset(bytes32 _symbol) onlyOwner(_symbol) returns(bool) {\r\n        if (isLocked(_symbol)) {\r\n            _error('Asset is locked');\r\n            return false;\r\n        }\r\n        assets[_symbol].isLocked = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Issues additional asset tokens if the asset have dynamic supply.\r\n     *\r\n     * Tokens issued with this call go straight to asset owner.\r\n     * Can only be called by asset owner.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     * @param _value amount of additional tokens to issue.\r\n     *\r\n     * @return success.\r\n     */\r\n    function reissueAsset(bytes32 _symbol, uint _value) onlyOwner(_symbol) returns(bool) {\r\n        // Should have positive value.\r\n        if (_value == 0) {\r\n            _error('Cannot reissue 0 value');\r\n            return false;\r\n        }\r\n        Asset asset = assets[_symbol];\r\n        // Should have dynamic supply.\r\n        if (!asset.isReissuable) {\r\n            _error('Cannot reissue fixed asset');\r\n            return false;\r\n        }\r\n        // Resulting total supply should not overflow.\r\n        if (asset.totalSupply + _value < asset.totalSupply) {\r\n            _error('Total supply overflow');\r\n            return false;\r\n        }\r\n        uint holderId = getHolderId(msg.sender);\r\n        asset.wallets[holderId].balance += _value;\r\n        asset.totalSupply += _value;\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Recursive Call: safe, all changes already made.\r\n        eventsHistory.emitIssue(_symbol, _value, _address(holderId));\r\n        _proxyTransferEvent(0, holderId, _value, _symbol);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroys specified amount of senders asset tokens.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     * @param _value amount of tokens to destroy.\r\n     *\r\n     * @return success.\r\n     */\r\n    function revokeAsset(bytes32 _symbol, uint _value) checkEnabledSwitch(sha3(_symbol, Features.Revoke)) checkSigned(getHolderId(msg.sender), 1) returns(bool) {\r\n        // Should have positive value.\r\n        if (_value == 0) {\r\n            _error('Cannot revoke 0 value');\r\n            return false;\r\n        }\r\n        Asset asset = assets[_symbol];\r\n        uint holderId = getHolderId(msg.sender);\r\n        // Should have enough tokens.\r\n        if (asset.wallets[holderId].balance < _value) {\r\n            _error('Not enough tokens to revoke');\r\n            return false;\r\n        }\r\n        asset.wallets[holderId].balance -= _value;\r\n        asset.totalSupply -= _value;\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Recursive Call: safe, all changes already made.\r\n        eventsHistory.emitRevoke(_symbol, _value, _address(holderId));\r\n        _proxyTransferEvent(holderId, 0, _value, _symbol);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Passes asset ownership to specified address.\r\n     *\r\n     * Only ownership is changed, balances are not touched.\r\n     * Can only be called by asset owner.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     * @param _newOwner address to become a new owner.\r\n     *\r\n     * @return success.\r\n     */\r\n    function changeOwnership(bytes32 _symbol, address _newOwner) checkEnabledSwitch(sha3(_symbol, Features.ChangeOwnership)) onlyOwner(_symbol) returns(bool) {\r\n        Asset asset = assets[_symbol];\r\n        uint newOwnerId = _createHolderId(_newOwner);\r\n        // Should pass ownership to another holder.\r\n        if (asset.owner == newOwnerId) {\r\n            _error('Cannot pass ownership to oneself');\r\n            return false;\r\n        }\r\n        address oldOwner = _address(asset.owner);\r\n        asset.owner = newOwnerId;\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Recursive Call: safe, all changes already made.\r\n        eventsHistory.emitOwnershipChange(oldOwner, _address(newOwnerId), _symbol);\r\n        return true;\r\n    }\r\n\r\n    function setCosignerAddress(Cosigner _cosigner) checkSigned(_createHolderId(msg.sender), 1) returns(bool) {\r\n        if (!_checkSigned(_cosigner, getHolderId(msg.sender), 1)) {\r\n            _error('Invalid cosigner');\r\n            return false;\r\n        }\r\n        holders[_createHolderId(msg.sender)].cosigner = _cosigner;\r\n        return true;\r\n    }\r\n\r\n    function isCosignerSet(uint _holderId) constant returns(bool) {\r\n        return address(holders[_holderId].cosigner) != 0x0;\r\n    }\r\n\r\n    function _checkSigned(Cosigner _cosigner, uint _holderId, uint _required) internal returns(bool) {\r\n        return _cosigner.consumeOperation(sha3(msg.data, _holderId), _required);\r\n    }\r\n\r\n    modifier checkSigned(uint _holderId, uint _required) {\r\n        if (!isCosignerSet(_holderId) || _checkSigned(holders[_holderId].cosigner, _holderId, _required)) {\r\n            _;\r\n        } else {\r\n            _error('Cosigner: access denied');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if specified holder trusts an address with recovery procedure.\r\n     *\r\n     * @param _from truster.\r\n     * @param _to trustee.\r\n     *\r\n     * @return trust existance.\r\n     */\r\n    function isTrusted(address _from, address _to) constant returns(bool) {\r\n        return holders[getHolderId(_from)].trust[_to];\r\n    }\r\n\r\n    /**\r\n     * Trust an address to perform recovery procedure for the caller.\r\n     *\r\n     * @param _to trustee.\r\n     *\r\n     * @return success.\r\n     */\r\n    function trust(address _to) returns(bool) {\r\n        uint fromId = _createHolderId(msg.sender);\r\n        // Should trust to another address.\r\n        if (fromId == getHolderId(_to)) {\r\n            _error('Cannot trust to oneself');\r\n            return false;\r\n        }\r\n        // Should trust to yet untrusted.\r\n        if (isTrusted(msg.sender, _to)) {\r\n            _error('Already trusted');\r\n            return false;\r\n        }\r\n        holders[fromId].trust[_to] = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Revoke trust to perform recovery procedure from an address.\r\n     *\r\n     * @param _to trustee.\r\n     *\r\n     * @return success.\r\n     */\r\n    function distrust(address _to) checkTrust(msg.sender, _to) returns(bool) {\r\n        holders[getHolderId(msg.sender)].trust[_to] = false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Perform recovery procedure.\r\n     *\r\n     * This function logic is actually more of an grantAccess(uint _holderId, address _to).\r\n     * It grants another address access to recovery subject wallets.\r\n     * Can only be called by trustee of recovery subject.\r\n     * If cosigning is enabled, should have atleast 2 confirmations.\r\n     *\r\n     * @dev Deprecated. Backward compatibility.\r\n     *\r\n     * @param _from holder address to recover from.\r\n     * @param _to address to grant access to.\r\n     *\r\n     * @return success.\r\n     */\r\n    function recover(address _from, address _to) checkTrust(_from, msg.sender) returns(bool) {\r\n        return _grantAccess(getHolderId(_from), _to);\r\n    }\r\n\r\n    /**\r\n     * Perform recovery procedure.\r\n     *\r\n     * This function logic is actually more of an grantAccess(uint _holderId, address _to).\r\n     * It grants another address access to subject holder wallets.\r\n     * Can only be called if pre-confirmed by atleast 2 cosign oracles.\r\n     *\r\n     * @param _from holder address to recover from.\r\n     * @param _to address to grant access to.\r\n     *\r\n     * @return success.\r\n     */\r\n    function grantAccess(address _from, address _to) returns(bool) {\r\n        if (!isCosignerSet(getHolderId(_from))) {\r\n            _error('Cosigner not set');\r\n            return false;\r\n        }\r\n        return _grantAccess(getHolderId(_from), _to);\r\n    }\r\n\r\n    function _grantAccess(uint _fromId, address _to) internal checkSigned(_fromId, 2) returns(bool) {\r\n        // Should recover to previously unused address.\r\n        if (getHolderId(_to) != 0) {\r\n            _error('Should recover to new address');\r\n            return false;\r\n        }\r\n        // We take current holder address because it might not equal _from.\r\n        // It is possible to recover from any old holder address, but event should have the current one.\r\n        address from = holders[_fromId].addr;\r\n        holders[_fromId].addr = _to;\r\n        holderIndex[_to] = _fromId;\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Recursive Call: safe, all changes already made.\r\n        eventsHistory.emitRecovery(from, _to, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Sets asset spending allowance for a specified spender.\r\n     *\r\n     * Note: to revoke allowance, one needs to set allowance to 0.\r\n     *\r\n     * @param _spenderId holder id to set allowance for.\r\n     * @param _value amount to allow.\r\n     * @param _symbol asset symbol.\r\n     * @param _senderId approve initiator holder id.\r\n     *\r\n     * @return success.\r\n     */\r\n    function _approve(uint _spenderId, uint _value, bytes32 _symbol, uint _senderId) internal checkEnabledSwitch(sha3(_symbol, Features.Allowances)) checkSigned(_senderId, 1) returns(bool) {\r\n        // Asset should exist.\r\n        if (!isCreated(_symbol)) {\r\n            _error('Asset is not issued');\r\n            return false;\r\n        }\r\n        // Should allow to another holder.\r\n        if (_senderId == _spenderId) {\r\n            _error('Cannot approve to oneself');\r\n            return false;\r\n        }\r\n        assets[_symbol].wallets[_senderId].allowance[_spenderId] = _value;\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Recursive Call: safe, all changes already made.\r\n        eventsHistory.emitApprove(_address(_senderId), _address(_spenderId), _symbol, _value);\r\n        if (proxies[_symbol] != 0x0) {\r\n            // Internal Out Of Gas/Throw: revert this transaction too;\r\n            // Recursive Call: safe, all changes already made.\r\n            Proxy(proxies[_symbol]).emitApprove(_address(_senderId), _address(_spenderId), _value);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Sets asset spending allowance for a specified spender.\r\n     *\r\n     * Can only be called by asset proxy.\r\n     *\r\n     * @param _spender holder address to set allowance to.\r\n     * @param _value amount to allow.\r\n     * @param _symbol asset symbol.\r\n     * @param _sender approve initiator address.\r\n     *\r\n     * @return success.\r\n     */\r\n    function proxyApprove(address _spender, uint _value, bytes32 _symbol, address _sender) onlyProxy(_symbol) returns(bool) {\r\n        return _approve(_createHolderId(_spender), _value, _symbol, _createHolderId(_sender));\r\n    }\r\n\r\n    /**\r\n     * Returns asset allowance from one holder to another.\r\n     *\r\n     * @param _from holder that allowed spending.\r\n     * @param _spender holder that is allowed to spend.\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return holder to spender allowance.\r\n     */\r\n    function allowance(address _from, address _spender, bytes32 _symbol) constant returns(uint) {\r\n        return _allowance(getHolderId(_from), getHolderId(_spender), _symbol);\r\n    }\r\n\r\n    /**\r\n     * Returns asset allowance from one holder to another.\r\n     *\r\n     * @param _fromId holder id that allowed spending.\r\n     * @param _toId holder id that is allowed to spend.\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return holder to spender allowance.\r\n     */\r\n    function _allowance(uint _fromId, uint _toId, bytes32 _symbol) constant internal returns(uint) {\r\n        return assets[_symbol].wallets[_fromId].allowance[_toId];\r\n    }\r\n\r\n    /**\r\n     * Prforms allowance transfer of asset balance between holders wallets.\r\n     *\r\n     * Can only be called by asset proxy.\r\n     *\r\n     * @param _from holder address to take from.\r\n     * @param _to holder address to give to.\r\n     * @param _value amount to transfer.\r\n     * @param _symbol asset symbol.\r\n     * @param _reference transfer comment to be included in a Transfer event.\r\n     * @param _sender allowance transfer initiator address.\r\n     *\r\n     * @return success.\r\n     */\r\n    function proxyTransferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference, address _sender) onlyProxy(_symbol) returns(bool) {\r\n        return _transfer(getHolderId(_from), _createHolderId(_to), _value, _symbol, _reference, getHolderId(_sender));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eventsHistory\",\"type\":\"address\"}],\"name\":\"setupEventsHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_switch\",\"type\":\"bytes32\"}],\"name\":\"isEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_baseUnit\",\"type\":\"uint8\"},{\"name\":\"_isReissuable\",\"type\":\"bool\"}],\"name\":\"issueAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getHolderId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_baseUnit\",\"type\":\"uint8\"}],\"name\":\"changeAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"proxyApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"proxyTransferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cosigner\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"isCreated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"trust\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_switch\",\"type\":\"bytes32\"}],\"name\":\"enableSwitch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"setProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"recover\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"isTrusted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proxies\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registryICAP\",\"type\":\"address\"}],\"name\":\"setupRegistryICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ambi2\",\"type\":\"address\"}],\"name\":\"setupAmbi2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cosigner\",\"type\":\"address\"}],\"name\":\"setCosignerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holderId\",\"type\":\"uint256\"}],\"name\":\"isCosignerSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"assets\",\"outputs\":[{\"name\":\"owner\",\"type\":\"uint256\"},{\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"isReissuable\",\"type\":\"bool\"},{\"name\":\"baseUnit\",\"type\":\"uint8\"},{\"name\":\"isLocked\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registryICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"proxyTransferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"isReissuable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"grantAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"revokeAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"lockAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"baseUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"reissueAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eventsHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"distrust\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"}]","ContractName":"EToken2","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c6b0f154e0142d65bb5467dca4a26c852d2e6e792db2d104e3fe12d1f0e71771"}]}