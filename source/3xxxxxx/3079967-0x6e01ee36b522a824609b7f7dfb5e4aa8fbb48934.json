{"status":"1","message":"OK","result":[{"SourceCode":"//https://github.com/codetract/ethToken\r\n\r\npragma solidity ^0.4.6;\r\n\r\n/**\r\n@title StandardToken\r\n@author https://github.com/ConsenSys/Tokens/tree/master/Token_Contracts/contracts\r\n*/\r\ncontract StandardToken {\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /**\r\n    @notice Function transfers '_value' tokens from 'msg.sender' to '_to'\r\n    @param _to The address of the destination account\r\n    @param _value The number of tokens to be transferred\r\n    @return success Whether the transfer is successful\r\n    */\r\n    function transfer(address _to, uint256 _value) returns(bool success) {\r\n        if(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice Function transfers '_value' tokens from '_from' to '_to' if there is allowance\r\n    @param _from The address of the source account\r\n    @param _to The address of the destination account\r\n    @param _value The number of tokens to be transferred\r\n    @return success Whether the transfer is successful\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\r\n        if(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n   \t@notice Returns the balance associated with the relevant address\r\n   \t@param _owner address of account owner\r\n   \t@return { \"balance\" : \"token balance of _owner\" }\r\n   \t*/\r\n    function balanceOf(address _owner) constant returns(uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    @notice Function approves `_addr` to spend `_value` tokens of msg.sender\r\n    @param _spender The address of the account able to transfer the tokens\r\n    @param _value The amount of wei to be approved for transfer\r\n    @return success Whether the approval was successful or not\r\n    */\r\n    function approve(address _spender, uint256 _value) returns(bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    @notice Returns the amount for _spender left approved by _owner\r\n    @param _owner The address of the account owning tokens\r\n    @param _spender The address of the account able to transfer the tokens\r\n    @return remaining Amount of remaining tokens allowed to spent\r\n    */\r\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n@title HumanStandardToken\r\n@author https://github.com/ConsenSys/Tokens/tree/master/Token_Contracts/contracts\r\n*/\r\ncontract HumanStandardToken is StandardToken {\r\n    string public name; //fancy name: eg Simon Bucks\r\n    uint8 public decimals; //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\r\n    string public symbol; //An identifier: eg SBX\r\n    string public version; //human 0.1 standard. Just an arbitrary versioning scheme.\r\n}\r\n\r\n/**\r\n@title EthToken\r\n@author https://codetract.io\r\n*/\r\ncontract EthToken is HumanStandardToken {\r\n    /**\r\n    @notice Constructor function for the EthToken contract\r\n    @dev Contract to trade ether to tokens at 1 to 1\r\n    */\r\n    function EthToken() {\r\n        balances[msg.sender] = 0;\r\n        totalSupply = 0;\r\n        name = 'ETH Token';\r\n        decimals = 18;\r\n        symbol = 'Îž';\r\n        version = '0.2';\r\n    }\r\n\r\n    event LogCreateToken(address indexed _from, uint256 _value);\r\n    event LogRedeemToken(address indexed _from, uint256 _value);\r\n\r\n    /**\r\n    @notice Creates ether tokens corresponding to the amount of ether received 'msg.value'. Updates account token balance\r\n    @return success Whether the transfer is successful\r\n    */\r\n    function createToken() payable returns(bool success) {\r\n        if(msg.value == 0) {\r\n            throw;\r\n        }\r\n        if((balances[msg.sender] + msg.value) > balances[msg.sender] && (totalSupply + msg.value) > totalSupply) {\r\n            totalSupply += msg.value;\r\n            balances[msg.sender] += msg.value;\r\n            LogCreateToken(msg.sender, msg.value);\r\n            return true;\r\n        } else {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice Converts token quantity defined by '_token' into ether and sends back to msg.sender\r\n    @param _tokens The number of tokens to be converted to ether\r\n    @return success Whether the transfer is successful\r\n    */\r\n    function redeemToken(uint256 _tokens) returns(bool success) {\r\n        if(this.balance < totalSupply) {\r\n            throw;\r\n        }\r\n        if(_tokens == 0) {\r\n            throw;\r\n        }\r\n        if(balances[msg.sender] >= _tokens && totalSupply >= _tokens) {\r\n            balances[msg.sender] -= _tokens;\r\n            totalSupply -= _tokens;\r\n            if(msg.sender.send(_tokens)) {\r\n                LogRedeemToken(msg.sender, _tokens);\r\n                return true;\r\n            } else {\r\n                throw;\r\n            }\r\n        } else {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    function() payable {\r\n        createToken();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"redeemToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogCreateToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogRedeemToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EthToken","CompilerVersion":"v0.4.6+commit.2dabbdf0","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}