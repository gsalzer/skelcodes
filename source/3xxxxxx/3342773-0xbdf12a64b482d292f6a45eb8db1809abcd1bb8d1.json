{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\n/// @title Oracle contract where m of n predetermined voters determine a value\r\ncontract FederatedOracleBytes8 {\r\n    struct Voter {\r\n        bool isVoter;\r\n        bool hasVoted;\r\n    }\r\n\r\n    event VoterAdded(address account);\r\n    event VoteSubmitted(address account, bytes8 value);\r\n    event ValueFinalized(bytes8 value);\r\n\r\n    mapping(address => Voter) public voters;\r\n    mapping(bytes8 => uint8) public votes;\r\n\r\n    uint8 public m;\r\n    uint8 public n;\r\n    bytes8 public finalValue;\r\n\r\n    uint8 private voterCount;\r\n    address private creator;\r\n\r\n    function FederatedOracleBytes8(uint8 m_, uint8 n_) {\r\n        creator = msg.sender;\r\n        m = m_;\r\n        n = n_;\r\n    }\r\n\r\n    function addVoter(address account) {\r\n        if (msg.sender != creator) {\r\n            throw;\r\n        }\r\n        if (voterCount == n) {\r\n            throw;\r\n        }\r\n\r\n        var voter = voters[account];\r\n        if (voter.isVoter) {\r\n            throw;\r\n        }\r\n\r\n        voter.isVoter = true;\r\n        voterCount++;\r\n        VoterAdded(account);\r\n    }\r\n\r\n    function submitValue(bytes8 value) {\r\n        var voter = voters[msg.sender];\r\n        if (!voter.isVoter) {\r\n            throw;\r\n        }\r\n        if (voter.hasVoted) {\r\n            throw;\r\n        }\r\n\r\n        voter.hasVoted = true;\r\n        votes[value]++;\r\n        VoteSubmitted(msg.sender, value);\r\n\r\n        if (votes[value] == m) {\r\n            finalValue = value;\r\n            ValueFinalized(value);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes8\"}],\"name\":\"votes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"n\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalValue\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"name\":\"isVoter\",\"type\":\"bool\"},{\"name\":\"hasVoted\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bytes8\"}],\"name\":\"submitValue\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addVoter\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"m_\",\"type\":\"uint8\"},{\"name\":\"n_\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"VoterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bytes8\"}],\"name\":\"VoteSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"bytes8\"}],\"name\":\"ValueFinalized\",\"type\":\"event\"}]","ContractName":"FederatedOracleBytes8","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004","Library":"","SwarmSource":"bzzr://c8221ee34d3fcb2f63ee9858fcf299057531b8b8d5f44c696dd81a3138497c61"}]}