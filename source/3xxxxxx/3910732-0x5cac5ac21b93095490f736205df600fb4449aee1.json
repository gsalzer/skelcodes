{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract token {function transfer(address receiver, uint amount){ }}\r\n\r\ncontract FazBitsCrowdsale {\r\n    uint public amountRaised; uint public resAmount; uint public soldTokens;\r\n    mapping(address => uint256) public balanceOf;\r\n    event GoalReached(address beneficiary, uint amountRaised);\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n    bool public crowdsaleClosed = false;\r\n    bool public minimumTargetReached = false;\r\n\r\n    // initialization\r\n    address public beneficiary = 0x89464d51Af1C6edb2E116c28798C9A06e574d299;/*ifSuccessfulSendTo*/\r\n    uint public price = 0.0015 ether;/*costOfEachToken*/\r\n    uint public minimumTarget = 100 * price;/*minimumTargetInTokens*/\r\n    uint public maximumTarget = 250000 * price;/*maximumTargetInTokens*/\r\n    uint public deadline =  now + 10080 * 1 minutes;/*durationInMinutes*/\r\n    token public tokenReward = token(0xD8a19038Ca6d75227Ad5a5d7ec335a111ad6E141);/*addressOfTokenUsedAsReward*/\r\n\r\n\r\n    // the function without name is the default function that is called whenever anyone sends funds to a contract\r\n    function () payable {\r\n        if (crowdsaleClosed || (maximumTarget - amountRaised) < msg.value) throw;\r\n        uint amount = msg.value;\r\n        balanceOf[msg.sender] += amount;\r\n        amountRaised += amount;\r\n        resAmount += amount;\r\n        soldTokens += amount / price;\r\n        tokenReward.transfer(msg.sender, amount / price);\r\n        FundTransfer(msg.sender, amount, true);\r\n\r\n        if (amountRaised >= minimumTarget && !minimumTargetReached) {\r\n            minimumTargetReached = true;\r\n            GoalReached(beneficiary, minimumTarget);\r\n        }\r\n\r\n        // funds are sending to beneficiary account after minimumTarget will be reached\r\n        if (minimumTargetReached) {\r\n            if (beneficiary.send(amount)) {\r\n                FundTransfer(beneficiary, amount, false);\r\n                resAmount -= amount;\r\n            }\r\n        }\r\n    }\r\n\r\n    // dev function for withdraw any amount from raised funds (activate only if minimumTarget is reached)\r\n    function devWithdrawal(uint num, uint den) {\r\n        if (!minimumTargetReached || !(beneficiary == msg.sender)) throw;\r\n        uint wAmount = num / den;\r\n        if (beneficiary.send(wAmount)) {\r\n            FundTransfer(beneficiary, wAmount, false);\r\n        }\r\n    }\r\n\r\n    // dev function for withdraw amount, which be reserved by minimumTarget (activate only if minimumTarget is reached)\r\n    function devResWithdrawal() {\r\n        if (!minimumTargetReached || !(beneficiary == msg.sender)) throw;\r\n        if (beneficiary.send(resAmount)) {\r\n            FundTransfer(beneficiary, resAmount, false);\r\n            resAmount = 0;\r\n        }\r\n    }\r\n\r\n    // dev function for close crowdsale  \r\n    function closeCrowdsale(bool closeType) {\r\n         if (beneficiary == msg.sender) {\r\n            crowdsaleClosed = closeType;\r\n         }\r\n    }\r\n\r\n\r\n    modifier afterDeadline() { if (now >= deadline) _; }\r\n\r\n    // checks if the minimumTarget has been reached\r\n    function checkTargetReached() afterDeadline {\r\n        if (amountRaised >= minimumTarget) {\r\n            minimumTargetReached = true;\r\n        }\r\n    }\r\n\r\n    // function for return non sold tokens to dev account after crowdsale\r\n    function returnTokens(uint tokensAmount) afterDeadline {\r\n        if (!crowdsaleClosed) throw;\r\n        if (beneficiary == msg.sender) {\r\n            tokenReward.transfer(beneficiary, tokensAmount);\r\n        }\r\n    }\r\n\r\n    // return your funds after deadline if minimumTarget is not reached (activate if crowdsale closing)\r\n    function safeWithdrawal() afterDeadline {\r\n        if (!minimumTargetReached && crowdsaleClosed) {\r\n            uint amount = balanceOf[msg.sender];\r\n            balanceOf[msg.sender] = 0;\r\n            if (amount > 0) {\r\n                if (msg.sender.send(amount)) {\r\n                    FundTransfer(msg.sender, amount, false);\r\n                } else {\r\n                    balanceOf[msg.sender] = amount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"devResWithdrawal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"returnTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkTargetReached\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumTargetReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"den\",\"type\":\"uint256\"}],\"name\":\"devWithdrawal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"closeType\",\"type\":\"bool\"}],\"name\":\"closeCrowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"FazBitsCrowdsale","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e722b3c31a024eb2247e061a1e7e58611bf1af36adbb0a198f68b5a782070c9f"}]}