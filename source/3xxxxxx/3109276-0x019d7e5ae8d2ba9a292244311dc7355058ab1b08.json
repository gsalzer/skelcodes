{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.9;\r\n\r\ncontract ProofOfIdleness {\r\n    address public organizer;\r\n    \r\n    // number of remaining participants\r\n    uint public countRemaining = 0;\r\n    \r\n    // stores the last ping of every participants\r\n    mapping (address => uint) public lastPing;\r\n    \r\n    // Events allow light clients to react on changes efficiently.\r\n    event Eliminated(address a);\r\n    event Pinged(address a, uint time);\r\n\r\n    // This is the constructor whose code is\r\n    // run only when the contract is created.\r\n    function ProofOfIdleness() {\r\n        organizer = msg.sender;\r\n    }\r\n    \r\n    \r\n    // function called when the user pings\r\n    function idle() {\r\n      if (lastPing[msg.sender] == 0)\r\n        throw;\r\n        \r\n      lastPing[msg.sender] = now;\r\n      Pinged(msg.sender, now);\r\n    }\r\n    \r\n    \r\n    // function called when a new user wants to join\r\n    function join() payable { \r\n        if (lastPing[msg.sender] > 0 || msg.value != 1 ether)\r\n            throw;\r\n        \r\n        lastPing[msg.sender] = now; \r\n        countRemaining = countRemaining + 1;\r\n        Pinged(msg.sender, now);\r\n        \r\n        if (!organizer.send(0.01 ether)) {\r\n          throw;\r\n        }\r\n    }\r\n    \r\n    \r\n    // function used to eliminate address Ì€`a'\r\n    // will only succeed if the lastPing[a] is at least 27 hours old\r\n    function eliminate(address a) {\r\n      if (lastPing[a] == 0 || now <= lastPing[a] + 27 hours)\r\n        throw;\r\n        \r\n      lastPing[a] = 0;\r\n      countRemaining = countRemaining - 1;\r\n      Eliminated(a);\r\n    }\r\n    \r\n    \r\n    // function used to claim the whole reward\r\n    // will only succeed if called by the last remaining participant\r\n    function claimReward() {\r\n      if (lastPing[msg.sender] == 0 || countRemaining != 1)\r\n        throw;\r\n        \r\n      if (!msg.sender.send(this.balance))\r\n        throw;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"eliminate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"idle\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastPing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"organizer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"join\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"Eliminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Pinged\",\"type\":\"event\"}]","ContractName":"ProofOfIdleness","CompilerVersion":"v0.4.9+commit.364da425","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://af77c92b72af6a4ca6ff0282316d7c68b02d62acdf0c1d419f1561f1f9b33d0a"}]}