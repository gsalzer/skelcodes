{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/*\r\n\r\nStatus Buyer\r\n========================\r\n\r\nBuys Status tokens from the crowdsale on your behalf.\r\nAuthor: /u/Cintix\r\n\r\n*/\r\n\r\n// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\n// Interface to Status ICO Contract\r\ncontract StatusContribution {\r\n  uint256 public maxGasPrice;\r\n  uint256 public startBlock;\r\n  uint256 public totalNormalCollected;\r\n  uint256 public finalizedBlock;\r\n  function proxyPayment(address _th) payable returns (bool);\r\n}\r\n\r\n// Interface to Status Cap Determination Contract\r\ncontract DynamicCeiling {\r\n  function curves(uint currentIndex) returns (bytes32 hash, \r\n                                              uint256 limit, \r\n                                              uint256 slopeFactor, \r\n                                              uint256 collectMinimum);\r\n  uint256 public currentIndex;\r\n  uint256 public revealedCurves;\r\n}\r\n\r\ncontract StatusBuyer {\r\n  // Store the amount of ETH deposited by each account.\r\n  mapping (address => uint256) public deposits;\r\n  // Track how much SNT each account would have been able to purchase on their own.\r\n  mapping (address => uint256) public simulated_snt;\r\n  // Bounty for executing buy.\r\n  uint256 public bounty;\r\n  // Track whether the contract has bought tokens yet.\r\n  bool public bought_tokens;\r\n  \r\n  // The Status Token Sale address.\r\n  StatusContribution public sale = StatusContribution(0x55d34b686aa8C04921397c5807DB9ECEdba00a4c);\r\n  // The Status DynamicCeiling Contract address.\r\n  DynamicCeiling public dynamic = DynamicCeiling(0xc636e73Ff29fAEbCABA9E0C3f6833EaD179FFd5c);\r\n  // Status Network Token (SNT) Contract address.\r\n  ERC20 public token = ERC20(0x744d70FDBE2Ba4CF95131626614a1763DF805B9E);\r\n  // The developer address.\r\n  address developer = 0x4e6A1c57CdBfd97e8efe831f8f4418b1F2A09e6e;\r\n  \r\n  // Withdraws all ETH/SNT owned by the user in the ratio currently owned by the contract.\r\n  function withdraw() {\r\n    // Store the user's deposit prior to withdrawal in a temporary variable.\r\n    uint256 user_deposit = deposits[msg.sender];\r\n    // Update the user's deposit prior to sending ETH to prevent recursive call.\r\n    deposits[msg.sender] = 0;\r\n    // Retrieve current ETH balance of contract (less the bounty).\r\n    uint256 contract_eth_balance = this.balance - bounty;\r\n    // Retrieve current SNT balance of contract.\r\n    uint256 contract_snt_balance = token.balanceOf(address(this));\r\n    // Calculate total SNT value of ETH and SNT owned by the contract.\r\n    // 1 ETH Wei -> 10000 SNT Wei\r\n    uint256 contract_value = (contract_eth_balance * 10000) + contract_snt_balance;\r\n    // Calculate amount of ETH to withdraw.\r\n    uint256 eth_amount = (user_deposit * contract_eth_balance * 10000) / contract_value;\r\n    // Calculate amount of SNT to withdraw.\r\n    uint256 snt_amount = 10000 * ((user_deposit * contract_snt_balance) / contract_value);\r\n    // No fee for withdrawing if user would have made it into the crowdsale alone.\r\n    uint256 fee = 0;\r\n    // 1% fee on portion of tokens user would not have been able to buy alone.\r\n    if (simulated_snt[msg.sender] < snt_amount) {\r\n      fee = (snt_amount - simulated_snt[msg.sender]) / 100;\r\n    }\r\n    // Send the funds.  Throws on failure to prevent loss of funds.\r\n    if(!token.transfer(msg.sender, snt_amount - fee)) throw;\r\n    if(!token.transfer(developer, fee)) throw;\r\n    msg.sender.transfer(eth_amount);\r\n  }\r\n  \r\n  // Allow anyone to contribute to the buy execution bounty.\r\n  function add_to_bounty() payable {\r\n    // Disallow adding to the bounty if contract has already bought the tokens.\r\n    if (bought_tokens) throw;\r\n    // Update bounty to include received amount.\r\n    bounty += msg.value;\r\n  }\r\n  \r\n  // Allow users to simulate entering the crowdsale to avoid the fee.  Callable by anyone.\r\n  function simulate_ico() {\r\n    // Limit maximum gas price to the same value as the Status ICO (50 GWei).\r\n    if (tx.gasprice > sale.maxGasPrice()) throw;\r\n    // Restrict until after the ICO has started.\r\n    if (block.number < sale.startBlock()) throw;\r\n    if (dynamic.revealedCurves() == 0) throw;\r\n    // Extract the buy limit and rate-limiting slope factor of the current curve/cap.\r\n    uint256 limit;\r\n    uint256 slopeFactor;\r\n    (,limit,slopeFactor,) = dynamic.curves(dynamic.currentIndex());\r\n    // Retrieve amount of ETH the ICO has collected so far.\r\n    uint256 totalNormalCollected = sale.totalNormalCollected();\r\n    // Verify the ICO is not currently at a cap, waiting for a reveal.\r\n    if (limit <= totalNormalCollected) throw;\r\n    // Add the maximum contributable amount to the user's simulated SNT balance.\r\n    simulated_snt[msg.sender] += ((limit - totalNormalCollected) / slopeFactor);\r\n  }\r\n  \r\n  // Buys tokens in the crowdsale and rewards the sender.  Callable by anyone.\r\n  function buy() {\r\n    // Short circuit to save gas if the contract has already bought tokens.\r\n    if (bought_tokens) return;\r\n    // Record that the contract has bought tokens first to prevent recursive call.\r\n    bought_tokens = true;\r\n    // Transfer all the funds (less the bounty) to the Status ICO contract \r\n    // to buy tokens.  Throws if the crowdsale hasn't started yet or has \r\n    // already completed, preventing loss of funds.\r\n    sale.proxyPayment.value(this.balance - bounty)(address(this));\r\n    // Send the user their bounty for buying tokens for the contract.\r\n    msg.sender.transfer(bounty);\r\n  }\r\n  \r\n  // A helper function for the default function, allowing contracts to interact.\r\n  function default_helper() payable {\r\n    // Only allow deposits if the contract hasn't already purchased the tokens.\r\n    if (!bought_tokens) {\r\n      // Update records of deposited ETH to include the received amount.\r\n      deposits[msg.sender] += msg.value;\r\n      // Block each user from contributing more than 30 ETH.  No whales!  >:C\r\n      if (deposits[msg.sender] > 30 ether) throw;\r\n    }\r\n    else {\r\n      // Reject ETH sent after the contract has already purchased tokens.\r\n      if (msg.value != 0) throw;\r\n      // If the ICO isn't over yet, simulate entering the crowdsale.\r\n      if (sale.finalizedBlock() == 0) {\r\n        simulate_ico();\r\n      }\r\n      else {\r\n        // Withdraw user's funds if they sent 0 ETH to the contract after the ICO.\r\n        withdraw();\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Default function.  Called when a user sends ETH to the contract.\r\n  function () payable {\r\n    // Avoid recursively buying tokens when the sale contract refunds ETH.\r\n    if (msg.sender == address(sale)) return;\r\n    // Delegate to the helper function.\r\n    default_helper();\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dynamic\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"default_helper\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"add_to_bounty\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bought_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"simulate_ico\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"simulated_snt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"StatusBuyer","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c796cfefab43cec452a68ddb845b7f8e101a7bd8e9f4e99ab7ea1162a952cbbb"}]}