{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (c) 2016 Chronicled, Inc. All rights reserved.\r\n// http://explorer.chronicled.org\r\n// http://demo.chronicled.org\r\n// http://chronicled.org\r\n\r\ncontract Registrar {\r\n    address public registrar;\r\n\r\n    /**\r\n\r\n    * Created event, gets triggered when a new registrant gets created\r\n    * event\r\n    * @param registrant - The registrant address.\r\n    * @param registrar - The registrar address.\r\n    * @param data - The data of the registrant.\r\n    */\r\n    event Created(address indexed registrant, address registrar, bytes data);\r\n\r\n    /**\r\n    * Updated event, gets triggered when a new registrant id Updated\r\n    * event\r\n    * @param registrant - The registrant address.\r\n    * @param registrar - The registrar address.\r\n    * @param data - The data of the registrant.\r\n    */\r\n    event Updated(address indexed registrant, address registrar, bytes data, bool active);\r\n\r\n    /**\r\n    * Error event.\r\n    * event\r\n    * @param code - The error code.\r\n    * 1: Permission denied.\r\n    * 2: Duplicate Registrant address.\r\n    * 3: No such Registrant.\r\n    */\r\n    event Error(uint code);\r\n\r\n    struct Registrant {\r\n        address addr;\r\n        bytes data;\r\n        bool active;\r\n    }\r\n\r\n    mapping(address => uint) public registrantIndex;\r\n    Registrant[] public registrants;\r\n\r\n    /**\r\n    * Function can't have ether.\r\n    * modifier\r\n    */\r\n    modifier noEther() {\r\n        if (msg.value > 0) throw;\r\n        _;\r\n    }\r\n\r\n    modifier isRegistrar() {\r\n      if (msg.sender != registrar) {\r\n        Error(1);\r\n        return;\r\n      }\r\n      else {\r\n        _;\r\n      }\r\n    }\r\n\r\n    /**\r\n    * Construct registry with and starting registrants lenght of one, and registrar as msg.sender\r\n    * constructor\r\n    */\r\n    function Registrar() {\r\n        registrar = msg.sender;\r\n        registrants.length++;\r\n    }\r\n\r\n    /**\r\n    * Add a registrant, only registrar allowed\r\n    * public_function\r\n    * @param _registrant - The registrant address.\r\n    * @param _data - The registrant data string.\r\n    */\r\n    function add(address _registrant, bytes _data) isRegistrar noEther returns (bool) {\r\n        if (registrantIndex[_registrant] > 0) {\r\n            Error(2); // Duplicate registrant\r\n            return false;\r\n        }\r\n        uint pos = registrants.length++;\r\n        registrants[pos] = Registrant(_registrant, _data, true);\r\n        registrantIndex[_registrant] = pos;\r\n        Created(_registrant, msg.sender, _data);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Edit a registrant, only registrar allowed\r\n    * public_function\r\n    * @param _registrant - The registrant address.\r\n    * @param _data - The registrant data string.\r\n    */\r\n    function edit(address _registrant, bytes _data, bool _active) isRegistrar noEther returns (bool) {\r\n        if (registrantIndex[_registrant] == 0) {\r\n            Error(3); // No such registrant\r\n            return false;\r\n        }\r\n        Registrant registrant = registrants[registrantIndex[_registrant]];\r\n        registrant.data = _data;\r\n        registrant.active = _active;\r\n        Updated(_registrant, msg.sender, _data, _active);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Set new registrar address, only registrar allowed\r\n    * public_function\r\n    * @param _registrar - The new registrar address.\r\n    */\r\n    function setNextRegistrar(address _registrar) isRegistrar noEther returns (bool) {\r\n        registrar = _registrar;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Get if a regsitrant is active or not.\r\n    * constant_function\r\n    * @param _registrant - The registrant address.\r\n    */\r\n    function isActiveRegistrant(address _registrant) constant returns (bool) {\r\n        uint pos = registrantIndex[_registrant];\r\n        return (pos > 0 && registrants[pos].active);\r\n    }\r\n\r\n    /**\r\n    * Get all the registrants.\r\n    * constant_function\r\n    */\r\n    function getRegistrants() constant returns (address[]) {\r\n        address[] memory result = new address[](registrants.length-1);\r\n        for (uint j = 1; j < registrants.length; j++) {\r\n            result[j-1] = registrants[j].addr;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n    * Function to reject value sends to the contract.\r\n    * fallback_function\r\n    */\r\n    function () noEther {}\r\n\r\n    /**\r\n    * Desctruct the smart contract. Since this is first, alpha release of Open Registry for IoT, updated versions will follow.\r\n    * Registry's discontinue must be executed first.\r\n    */\r\n    function discontinue() isRegistrar noEther {\r\n      selfdestruct(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getRegistrants\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registrant\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"add\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registrant\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"edit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_registrant\",\"type\":\"address\"}],\"name\":\"isActiveRegistrant\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"discontinue\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrar\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"registrantIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registrants\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registrar\",\"type\":\"address\"}],\"name\":\"setNextRegistrar\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registrant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"registrar\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registrant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"registrar\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"code\",\"type\":\"uint256\"}],\"name\":\"Error\",\"type\":\"event\"}]","ContractName":"Registrar","CompilerVersion":"v0.4.10+commit.f0d539ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cdc922321332877d8f627fbe08e5ff5506dcf839b4ca0b9aa8c304f7e90e83bd"}]}