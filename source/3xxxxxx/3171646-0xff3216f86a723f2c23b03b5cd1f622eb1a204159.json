{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n\r\ncontract ValentineRegistry {\r\n\r\n    event LogValentineRequestCreated(string requesterName, string valentineName, string customMessage, address valentineAddress, address requesterAddress);\r\n    event LogRequestAccepted(address requesterAddress);\r\n\r\n    struct Request {\r\n        string requesterName;\r\n        string valentineName;\r\n        string customMessage;\r\n        bool doesExist;\r\n        bool wasAccepted;\r\n        address valentineAddress;\r\n    }\r\n    address public owner;\r\n    // Requests maps requester addresses to the requests details\r\n    mapping (address => Request) private requests;\r\n    uint public numRequesters;\r\n    address[] public requesters;\r\n    address constant ADDRESS_NULL = 0;\r\n    uint constant MAX_CUSTOM_MESSAGE_LENGTH = 140;\r\n    uint constant MAX_NAME_LENGTH = 25;\r\n    uint constant COST = 0.1 ether;\r\n\r\n    modifier restricted() {\r\n        if (msg.sender != owner)\r\n            throw;\r\n        _;\r\n    }\r\n    modifier costs(uint _amount) {\r\n        if (msg.value < _amount)\r\n            throw;\r\n        _;\r\n    }\r\n    modifier prohibitRequestUpdates() {\r\n        if (requests[msg.sender].doesExist)\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    function ValentineRegistry() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // Creates a valentine request that can only be accepted by the specified valentineAddress\r\n    function createTargetedValentineRequest(string requesterName, string valentineName,\r\n        string customMessage, address valentineAddress)\r\n        costs(COST)\r\n        prohibitRequestUpdates\r\n        payable\r\n        public {\r\n        createNewValentineRequest(requesterName, valentineName, customMessage, valentineAddress);\r\n    }\r\n\r\n    // Creates a valentine request that can be fullfilled by any address\r\n    function createOpenValentineRequest(string requesterName, string valentineName, string customMessage)\r\n        costs(COST)\r\n        prohibitRequestUpdates\r\n        payable\r\n        public {\r\n        createNewValentineRequest(requesterName, valentineName, customMessage, ADDRESS_NULL);\r\n    }\r\n\r\n    function createNewValentineRequest(string requesterName, string valentineName, string customMessage,\r\n        address valentineAddress)\r\n        internal {\r\n        if (bytes(requesterName).length > MAX_NAME_LENGTH || bytes(valentineName).length > MAX_NAME_LENGTH\r\n            || bytes(customMessage).length > MAX_CUSTOM_MESSAGE_LENGTH) {\r\n            throw; // invalid request\r\n        }\r\n        bool doesExist = true;\r\n        bool wasAccepted = false;\r\n        Request memory r = Request(requesterName, valentineName, customMessage, doesExist,\r\n        wasAccepted, valentineAddress);\r\n        requesters.push(msg.sender);\r\n        numRequesters++;\r\n        requests[msg.sender] = r;\r\n        LogValentineRequestCreated(requesterName, valentineName, customMessage, valentineAddress, msg.sender);\r\n    }\r\n\r\n    function acceptValentineRequest(address requesterAddress) public {\r\n        Request request = requests[requesterAddress];\r\n        if (!request.doesExist) {\r\n            throw; // the request doesn't exist\r\n        }\r\n        request.wasAccepted = true;\r\n        LogRequestAccepted(requesterAddress);\r\n    }\r\n\r\n    function getRequestByRequesterAddress(address requesterAddress) public returns (string, string, string, bool, address, address) {\r\n        Request r = requests[requesterAddress];\r\n        if (!r.doesExist) {\r\n            return (\"\", \"\", \"\", false, ADDRESS_NULL, ADDRESS_NULL);\r\n        }\r\n        return (r.requesterName, r.valentineName, r.customMessage, r.wasAccepted, r.valentineAddress, requesterAddress);\r\n    }\r\n\r\n    function getRequestByIndex(uint index) public returns (string, string, string, bool, address, address) {\r\n        if (index >= requesters.length) {\r\n            throw;\r\n        }\r\n        address requesterAddress = requesters[index];\r\n        Request r = requests[requesterAddress];\r\n        return (r.requesterName, r.valentineName, r.customMessage, r.wasAccepted, r.valentineAddress, requesterAddress);\r\n    }\r\n\r\n    function updateOwner(address newOwner)\r\n        restricted\r\n        public {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function cashout(address recipient)\r\n        restricted\r\n        public {\r\n        address contractAddress = this;\r\n        if (!recipient.send(contractAddress.balance)) {\r\n            throw;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"requesterAddress\",\"type\":\"address\"}],\"name\":\"getRequestByRequesterAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requesterName\",\"type\":\"string\"},{\"name\":\"valentineName\",\"type\":\"string\"},{\"name\":\"customMessage\",\"type\":\"string\"},{\"name\":\"valentineAddress\",\"type\":\"address\"}],\"name\":\"createTargetedValentineRequest\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"cashout\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requesters\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numRequesters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRequestByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requesterName\",\"type\":\"string\"},{\"name\":\"valentineName\",\"type\":\"string\"},{\"name\":\"customMessage\",\"type\":\"string\"}],\"name\":\"createOpenValentineRequest\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requesterAddress\",\"type\":\"address\"}],\"name\":\"acceptValentineRequest\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requesterName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"valentineName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"customMessage\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"valentineAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requesterAddress\",\"type\":\"address\"}],\"name\":\"LogValentineRequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requesterAddress\",\"type\":\"address\"}],\"name\":\"LogRequestAccepted\",\"type\":\"event\"}]","ContractName":"ValentineRegistry","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bbd9ee3f74c035cbd578c8acadb29654a31fbef675dec757262b742919709627"}]}