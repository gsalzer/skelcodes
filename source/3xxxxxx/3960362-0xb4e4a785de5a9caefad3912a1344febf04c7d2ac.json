{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * Controller\r\n */\r\ncontract Controller {\r\n\r\n  /// @notice Called when `_owner` sends ether to the token contract\r\n  /// @param _owner The address that sent the ether to create tokens\r\n  /// @return True if the ether is accepted, false if it throws\r\n  function proxyPayment(address _owner) payable returns(bool);\r\n\r\n  /// @notice Notifies the controller about a token transfer allowing the\r\n  ///  controller to react if desired\r\n  /// @param _from The origin of the transfer\r\n  /// @param _to The destination of the transfer\r\n  /// @param _amount The amount of the transfer\r\n  /// @return False if the controller does not authorize the transfer\r\n  function onTransfer(address _from, address _to, uint _amount) returns(bool);\r\n\r\n  /// @notice Notifies the controller about an approval allowing the\r\n  ///  controller to react if desired\r\n  /// @param _owner The address that calls `approve()`\r\n  /// @param _spender The spender in the `approve()` call\r\n  /// @param _amount The amount in the `approve()` call\r\n  /// @return False if the controller does not authorize the approval\r\n  function onApprove(address _owner, address _spender, uint _amount) returns(bool);\r\n}\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n/**\r\n * @title Contracts that should not own Tokens\r\n * @dev This blocks incoming ERC23 tokens to prevent accidental loss of tokens.\r\n * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\r\n * owner to reclaim the tokens.\r\n */\r\ncontract HasNoTokens is Ownable {\r\n\r\n /**\r\n  * @dev Reject all ERC23 compatible tokens\r\n  * @param from_ address The address that is transferring the tokens\r\n  * @param value_ Uint the amount of the specified token\r\n  * @param data_ Bytes The data passed from the caller.\r\n  */\r\n  function tokenFallback(address from_, uint value_, bytes data_) external {\r\n    throw;\r\n  }\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param tokenAddr address The address of the token contract\r\n   */\r\n  function reclaimToken(address tokenAddr) external onlyOwner {\r\n    ERC20Basic tokenInst = ERC20Basic(tokenAddr);\r\n    uint256 balance = tokenInst.balanceOf(this);\r\n    tokenInst.transfer(owner, balance);\r\n  }\r\n}\r\n\r\n// @dev Contract to hold ETH raised during a token sale.\r\n// Prevents attack in which the Multisig sends raised ether to the\r\n// sale contract to mint tokens to itself, and getting the\r\n// funds back immediately.\r\ncontract AbstractSale {\r\n  function saleFinalized() constant returns (bool);\r\n}\r\n\r\ncontract Escrow is HasNoTokens {\r\n\r\n  address public beneficiary;\r\n  uint public finalBlock;\r\n  AbstractSale public tokenSale;\r\n\r\n  // @dev Constructor initializes public variables\r\n  // @param _beneficiary The address of the multisig that will receive the funds\r\n  // @param _finalBlock Block after which the beneficiary can request the funds\r\n  function Escrow(address _beneficiary, uint _finalBlock, address _tokenSale) {\r\n    beneficiary = _beneficiary;\r\n    finalBlock = _finalBlock;\r\n    tokenSale = AbstractSale(_tokenSale);\r\n  }\r\n\r\n  // @dev Receive all sent funds without any further logic\r\n  function() public payable {}\r\n\r\n  // @dev Withdraw function sends all the funds to the wallet if conditions are correct\r\n  function withdraw() public {\r\n    if (msg.sender != beneficiary) throw;\r\n    if (block.number > finalBlock) return doWithdraw();\r\n    if (tokenSale.saleFinalized()) return doWithdraw();\r\n  }\r\n\r\n  function doWithdraw() internal {\r\n    if (!beneficiary.send(this.balance)) throw;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint;\r\n\r\n  mapping (address => uint) balances;\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n     if(msg.data.length < size + 4) {\r\n       throw;\r\n     }\r\n     _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n  function transferFrom(address from, address to, uint value);\r\n  function approve(address spender, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implemantation of the basic standart token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint _value) {\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\n/**\r\n * Controlled\r\n */\r\ncontract Controlled {\r\n\r\n  address public controller;\r\n\r\n  function Controlled() {\r\n    controller = msg.sender;\r\n  }\r\n\r\n  function changeController(address _controller) onlyController {\r\n    controller = _controller;\r\n  }\r\n\r\n  modifier onlyController {\r\n    if (msg.sender != controller) throw;\r\n    _;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n */\r\ncontract MintableToken is StandardToken, Controlled {\r\n\r\n  event Mint(address indexed to, uint value);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n  uint public totalSupply = 0;\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint _amount) onlyController canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyController returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n  modifier canMint() {\r\n    if (mintingFinished) throw;\r\n    _;\r\n  }\r\n}\r\n\r\n/**\r\n * @title LimitedTransferToken\r\n * @dev LimitedTransferToken defines the generic interface and the implementation to limit token\r\n * transferability for different events. It is intended to be used as a base class for other token\r\n * contracts.\r\n * LimitedTransferToken has been designed to allow for different limiting factors,\r\n * this can be achieved by recursively calling super.transferableTokens() until the base class is\r\n * hit. For example:\r\n *     function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n *       return min256(unlockedTokens, super.transferableTokens(holder, time));\r\n *     }\r\n * A working example is VestedToken.sol:\r\n * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/VestedToken.sol\r\n */\r\ncontract LimitedTransferToken is ERC20 {\r\n\r\n  /**\r\n   * @dev Checks whether it can transfer or otherwise throws.\r\n   */\r\n  modifier canTransfer(address _sender, uint _value) {\r\n   if (_value > transferableTokens(_sender, uint64(now))) throw;\r\n   _;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks modifier and allows transfer if tokens are not locked.\r\n   * @param _to The address that will recieve the tokens.\r\n   * @param _value The amount of tokens to be transferred.\r\n   */\r\n  function transfer(address _to, uint _value) canTransfer(msg.sender, _value) {\r\n    super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Checks modifier and allows transfer if tokens are not locked.\r\n  * @param _from The address that will send the tokens.\r\n  * @param _to The address that will recieve the tokens.\r\n  * @param _value The amount of tokens to be transferred.\r\n  */\r\n  function transferFrom(address _from, address _to, uint _value) canTransfer(_from, _value) {\r\n    super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Default transferable tokens function returns all tokens for a holder (no limit).\r\n   * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the\r\n   * specific logic for limiting token transferability for a holder over time.\r\n   */\r\n  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n    return balanceOf(holder);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Vested token\r\n * @dev Tokens that can be vested for a group of addresses.\r\n */\r\ncontract VestedToken is StandardToken, LimitedTransferToken {\r\n\r\n  uint256 MAX_GRANTS_PER_ADDRESS = 20;\r\n\r\n  struct TokenGrant {\r\n    address granter;     // 20 bytes\r\n    uint256 value;       // 32 bytes\r\n    uint64 cliff;\r\n    uint64 vesting;\r\n    uint64 start;        // 3 * 8 = 24 bytes\r\n    bool revokable;\r\n    bool burnsOnRevoke;  // 2 * 1 = 2 bits? or 2 bytes?\r\n  } // total 78 bytes = 3 sstore per operation (32 per sstore)\r\n\r\n  mapping (address => TokenGrant[]) public grants;\r\n\r\n  event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint256 grantId);\r\n\r\n  /**\r\n   * @dev Grant tokens to a specified address\r\n   * @param _to address The address which the tokens will be granted to.\r\n   * @param _value uint256 The amount of tokens to be granted.\r\n   * @param _start uint64 Time of the beginning of the grant.\r\n   * @param _cliff uint64 Time of the cliff period.\r\n   * @param _vesting uint64 The vesting period.\r\n   * @param _revokable bool If the grant is revokable.\r\n   * @param _burnsOnRevoke bool When true, the tokens are burned if revoked.\r\n   */\r\n  function grantVestedTokens(\r\n    address _to,\r\n    uint256 _value,\r\n    uint64 _start,\r\n    uint64 _cliff,\r\n    uint64 _vesting,\r\n    bool _revokable,\r\n    bool _burnsOnRevoke\r\n  ) public {\r\n\r\n    // Check for date inconsistencies that may cause unexpected behavior\r\n    if (_cliff < _start || _vesting < _cliff) {\r\n      throw;\r\n    }\r\n\r\n    if (tokenGrantsCount(_to) > MAX_GRANTS_PER_ADDRESS) throw;  // To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\r\n\r\n    uint count = grants[_to].push(\r\n                TokenGrant(\r\n                  _revokable ? msg.sender : 0,  // avoid storing an extra 20 bytes when it is non-revokable\r\n                  _value,\r\n                  _cliff,\r\n                  _vesting,\r\n                  _start,\r\n                  _revokable,\r\n                  _burnsOnRevoke\r\n                )\r\n              );\r\n    transfer(_to, _value);\r\n    NewTokenGrant(msg.sender, _to, _value, count - 1);\r\n  }\r\n\r\n  /**\r\n   * @dev Revoke the grant of tokens of a specifed address.\r\n   * @param _holder The address which will have its tokens revoked.\r\n   * @param _grantId The id of the token grant.\r\n   */\r\n  function revokeTokenGrant(address _holder, uint _grantId) public {\r\n    TokenGrant grant = grants[_holder][_grantId];\r\n\r\n    if (!grant.revokable) { // Check if grant was revokable\r\n      throw;\r\n    }\r\n\r\n    if (grant.granter != msg.sender) { // Only granter can revoke it\r\n      throw;\r\n    }\r\n\r\n    address receiver = grant.burnsOnRevoke ? 0xdead : msg.sender;\r\n    uint256 nonVested = nonVestedTokens(grant, uint64(now));\r\n\r\n    // remove grant from array\r\n    delete grants[_holder][_grantId];\r\n    grants[_holder][_grantId] = grants[_holder][grants[_holder].length.sub(1)];\r\n    grants[_holder].length -= 1;\r\n\r\n    balances[receiver] = balances[receiver].add(nonVested);\r\n    balances[_holder] = balances[_holder].sub(nonVested);\r\n\r\n    Transfer(_holder, receiver, nonVested);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate the total amount of transferable tokens of a holder at a given time\r\n   * @param holder address The address of the holder\r\n   * @param time uint64 The specific time.\r\n   * @return An uint representing a holder's total amount of transferable tokens.\r\n   */\r\n  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n    uint256 grantIndex = tokenGrantsCount(holder);\r\n    if (grantIndex == 0) return balanceOf(holder); // shortcut for holder without grants\r\n\r\n    // Iterate through all the grants the holder has, and add all non-vested tokens\r\n    uint256 nonVested = 0;\r\n    for (uint256 i = 0; i < grantIndex; i++) {\r\n      nonVested = nonVested.add(nonVestedTokens(grants[holder][i], time));\r\n    }\r\n\r\n    // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\r\n    uint256 vestedTransferable = balanceOf(holder).sub(nonVested);\r\n\r\n    // Return the minimum of how many vested can transfer and other value\r\n    // in case there are other limiting transferability factors (default is balanceOf)\r\n    return SafeMath.min256(vestedTransferable, super.transferableTokens(holder, time));\r\n  }\r\n\r\n  /**\r\n   * @dev Check the amount of grants that an address has.\r\n   * @param _holder The holder of the grants.\r\n   * @return A uint representing the total amount of grants.\r\n   */\r\n  function tokenGrantsCount(address _holder) constant returns (uint index) {\r\n    return grants[_holder].length;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate amount of vested tokens at a specifc time.\r\n   * @param tokens uint256 The amount of tokens grantted.\r\n   * @param time uint64 The time to be checked\r\n   * @param start uint64 A time representing the begining of the grant\r\n   * @param cliff uint64 The cliff period.\r\n   * @param vesting uint64 The vesting period.\r\n   * @return An uint representing the amount of vested tokensof a specif grant.\r\n   *  transferableTokens\r\n   *   |                         _/--------   vestedTokens rect\r\n   *   |                       _/\r\n   *   |                     _/\r\n   *   |                   _/\r\n   *   |                 _/\r\n   *   |                /\r\n   *   |              .|\r\n   *   |            .  |\r\n   *   |          .    |\r\n   *   |        .      |\r\n   *   |      .        |(grants[_holder] == address(0)) return 0;\r\n   *   |    .          |\r\n   *   +===+===========+---------+----------> time\r\n   *      Start       Clift    Vesting\r\n   */\r\n  function calculateVestedTokens(\r\n    uint256 tokens,\r\n    uint256 time,\r\n    uint256 start,\r\n    uint256 cliff,\r\n    uint256 vesting) constant returns (uint256)\r\n    {\r\n      // Shortcuts for before cliff and after vesting cases.\r\n      if (time < cliff) return 0;\r\n      if (time >= vesting) return tokens;\r\n\r\n      // Interpolate all vested tokens.\r\n      // As before cliff the shortcut returns 0, we can use just calculate a value\r\n      // in the vesting rect (as shown in above's figure)\r\n\r\n      // vestedTokens = tokens * (time - start) / (vesting - start)\r\n      uint256 vestedTokens = tokens.mul(time.sub(start)).div(vesting.sub(start));\r\n      return vestedTokens;\r\n  }\r\n\r\n  /**\r\n   * @dev Get all information about a specifc grant.\r\n   * @param _holder The address which will have its tokens revoked.\r\n   * @param _grantId The id of the token grant.\r\n   * @return Returns all the values that represent a TokenGrant(address, value, start, cliff,\r\n   * revokability, burnsOnRevoke, and vesting) plus the vested value at the current time.\r\n   */\r\n  function tokenGrant(address _holder, uint _grantId) constant returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting, bool revokable, bool burnsOnRevoke) {\r\n    TokenGrant grant = grants[_holder][_grantId];\r\n\r\n    granter = grant.granter;\r\n    value = grant.value;\r\n    start = grant.start;\r\n    cliff = grant.cliff;\r\n    vesting = grant.vesting;\r\n    revokable = grant.revokable;\r\n    burnsOnRevoke = grant.burnsOnRevoke;\r\n\r\n    vested = vestedTokens(grant, uint64(now));\r\n  }\r\n\r\n  /**\r\n   * @dev Get the amount of vested tokens at a specific time.\r\n   * @param grant TokenGrant The grant to be checked.\r\n   * @param time The time to be checked\r\n   * @return An uint representing the amount of vested tokens of a specific grant at a specific time.\r\n   */\r\n  function vestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\r\n    return calculateVestedTokens(\r\n      grant.value,\r\n      uint256(time),\r\n      uint256(grant.start),\r\n      uint256(grant.cliff),\r\n      uint256(grant.vesting)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate the amount of non vested tokens at a specific time.\r\n   * @param grant TokenGrant The grant to be checked.\r\n   * @param time uint64 The time to be checked\r\n   * @return An uint representing the amount of non vested tokens of a specifc grant on the\r\n   * passed time frame.\r\n   */\r\n  function nonVestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\r\n    return grant.value.sub(vestedTokens(grant, time));\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate the date when the holder can trasfer all its tokens\r\n   * @param holder address The address of the holder\r\n   * @return An uint representing the date of the last transferable tokens.\r\n   */\r\n  function lastTokenIsTransferableDate(address holder) constant public returns (uint64 date) {\r\n    date = uint64(now);\r\n    uint256 grantIndex = grants[holder].length;\r\n    for (uint256 i = 0; i < grantIndex; i++) {\r\n      date = SafeMath.max64(grants[holder][i].vesting, date);\r\n    }\r\n  }\r\n}\r\n\r\n/// @title Artcoin (ART) - democratizing culture.\r\ncontract Artcoin is MintableToken, VestedToken {\r\n\r\n  string public constant name = 'Artcoin';\r\n  string public constant symbol = 'ART';\r\n  uint public constant decimals = 18;\r\n\r\n  function() public payable {\r\n    if (isContract(controller)) {\r\n      if (!Controller(controller).proxyPayment.value(msg.value)(msg.sender)) throw;\r\n    } else {\r\n      throw;\r\n    }\r\n  }\r\n\r\n  function isContract(address _addr) constant internal returns(bool) {\r\n    uint size;\r\n    if (_addr == address(0)) return false;\r\n    assembly {\r\n      size := extcodesize(_addr)\r\n    }\r\n    return size > 0;\r\n  }\r\n}\r\n\r\n/// @title Artcoin Placeholder - democratizing culture.\r\ncontract ArtcoinPlaceholder is Controller {\r\n\r\n  Artcoin public token;\r\n  address public tokenSale;\r\n\r\n  function ArtcoinPlaceholder(address _token, address _tokenSale) {\r\n    token = Artcoin(_token);\r\n    tokenSale = _tokenSale;\r\n  }\r\n\r\n  function changeController(address consortium) public {\r\n    if (msg.sender != tokenSale) throw;\r\n    token.changeController(consortium);\r\n    suicide(consortium);\r\n  }\r\n\r\n  function proxyPayment(address _owner) payable public returns (bool) {\r\n    throw;\r\n    return false;\r\n  }\r\n\r\n  function onTransfer(address _from, address _to, uint _amount) public returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  function onApprove(address _owner, address _spender, uint _amount) public returns (bool) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/// @title ART Sale - democratizing culture.\r\ncontract ArtSale is Controller {\r\n  using SafeMath for uint;\r\n\r\n  address public manager;\r\n  address public operations;\r\n  ArtcoinPlaceholder public consortiumPlaceholder;\r\n\r\n  Artcoin public token;\r\n  Escrow public escrow;\r\n\r\n  uint public initialBlock;  // block number in which the sale starts, inclusive. sale will be opened at initial block.\r\n  uint public finalBlock;  // block number in which the sale ends, exclusive, sale will be closed at ends block.\r\n  uint public initialPrice;  // number of wei-Artcoin tokens for 1 wei, at the start of the sale (18 decimals)\r\n  uint public finalPrice;  // number of wei-Artcoin tokens for 1 wei, at the end of the sale\r\n  uint public priceStages;  // number of different price stages for interpolating between initialPrice and finalPrice\r\n\r\n  uint public maximumSubscription;  // maximum subscriptions, in wei\r\n  uint public totalSubscription = 0;  // total subscriptions, in wei\r\n\r\n  mapping (address => bool) public activations;  // confirmations to activate the sale\r\n  mapping (address => uint) public subscriptions;  // subscriptions\r\n\r\n  uint constant public dust = 1 finney;  // minimum investment\r\n\r\n  bool public saleStopped = false;\r\n  bool public saleFinalized = false;\r\n\r\n  event NewPresaleAllocation(address indexed holder, uint amount);\r\n  event NewSubscription(address indexed holder, uint amount, uint etherAmount);\r\n\r\n  function ArtSale(address _manager,\r\n                   address _operations,\r\n                   uint _initialBlock,\r\n                   uint _finalBlock,\r\n                   uint256 _initialPrice,\r\n                   uint256 _finalPrice,\r\n                   uint8 _priceStages,\r\n                   uint _maximumSubscription)\r\n                   nonZeroAddress(_operations) {\r\n    if (_initialBlock < getBlockNumber()) throw;\r\n    if (_initialBlock >= _finalBlock) throw;\r\n    if (_initialPrice <= _finalPrice) throw;\r\n    if (_priceStages < 2) throw;\r\n    if (_priceStages > _initialPrice - _finalPrice) throw;\r\n\r\n    manager = _manager;\r\n    operations = _operations;\r\n    maximumSubscription = _maximumSubscription;\r\n    initialBlock = _initialBlock;\r\n    finalBlock = _finalBlock;\r\n    initialPrice = _initialPrice;\r\n    finalPrice = _finalPrice;\r\n    priceStages = _priceStages;\r\n  }\r\n\r\n  // @notice Set Artcoin token and escrow address.\r\n  // @param _token: Address of an instance of the Artcoin token\r\n  // @param _consortiumPlaceholder: Address of the consortium placeholder\r\n  // @param _escrow: Address of the wallet receiving the funds of the sale\r\n  function setArtcoin(address _token,\r\n                      address _consortiumPlaceholder,\r\n                      address _escrow)\r\n                      nonZeroAddress(_token)\r\n                      nonZeroAddress(_consortiumPlaceholder)\r\n                      nonZeroAddress(_escrow)\r\n                      public {\r\n    if (activations[this]) throw;\r\n\r\n    token = Artcoin(_token);\r\n    consortiumPlaceholder = ArtcoinPlaceholder(_consortiumPlaceholder);\r\n    escrow = Escrow(_escrow);\r\n\r\n    if (token.controller() != address(this)) throw;  // sale is token controller\r\n    if (token.totalSupply() > 0) throw;  // token is empty\r\n    if (consortiumPlaceholder.tokenSale() != address(this)) throw;  // placeholder has reference to sale\r\n    if (consortiumPlaceholder.token() != address(token)) throw; // placeholder has reference to ART\r\n    if (escrow.finalBlock() != finalBlock) throw;  // final blocks must match\r\n    if (escrow.beneficiary() != operations) throw;  // receiving wallet must match\r\n    if (escrow.tokenSale() != address(this)) throw;  // watched token sale must be self\r\n\r\n    doActivateSale(this);\r\n  }\r\n\r\n  // @notice Certain addresses need to call the activate function prior to the sale opening block.\r\n  // This proves that they have checked the sale contract is legit, as well as proving\r\n  // the capability for those addresses to interact with the contract.\r\n  function activateSale() public {\r\n    doActivateSale(msg.sender);\r\n  }\r\n\r\n  function doActivateSale(address _entity) nonZeroAddress(token) onlyBeforeSale private {\r\n    activations[_entity] = true;\r\n  }\r\n\r\n  // @notice Whether the needed accounts have activated the sale.\r\n  // @return Is sale activated\r\n  function isActivated() constant public returns (bool) {\r\n    return activations[this] && activations[operations];\r\n  }\r\n\r\n  // @notice Get the price for a Artcoin token at any given block number\r\n  // @param _blockNumber the block for which the price is requested\r\n  // @return Number of wei-Artcoin for 1 wei\r\n  // If sale isn't ongoing for that block, returns 0.\r\n  function getPrice(uint _blockNumber) constant public returns (uint) {\r\n    if (_blockNumber < initialBlock || _blockNumber >= finalBlock) return 0;\r\n    return priceForStage(stageForBlock(_blockNumber));\r\n  }\r\n\r\n  // @notice Get what the stage is for a given blockNumber\r\n  // @param _blockNumber: Block number\r\n  // @return The sale stage for that block. Stage is between 0 and (priceStages - 1)\r\n  function stageForBlock(uint _blockNumber) constant internal returns (uint) {\r\n    uint blockN = _blockNumber.sub(initialBlock);\r\n    uint totalBlocks = finalBlock.sub(initialBlock);\r\n    return priceStages.mul(blockN).div(totalBlocks);\r\n  }\r\n\r\n  // @notice Get what the price is for a given stage\r\n  // @param _stage: Stage number\r\n  // @return Price in wei for that stage.\r\n  // If sale stage doesn't exist, returns 0.\r\n  function priceForStage(uint _stage) constant internal returns (uint) {\r\n    if (_stage >= priceStages) return 0;\r\n    uint priceDifference = initialPrice.sub(finalPrice);\r\n    uint stageDelta = priceDifference.div(uint(priceStages - 1));\r\n    return initialPrice.sub(uint(_stage).mul(stageDelta));\r\n  }\r\n\r\n  // @notice Artcoin needs to make initial token allocations for presale partners\r\n  // This allocation has to be made before the sale is activated. Activating the\r\n  // sale means no more arbitrary allocations are possible and expresses conformity.\r\n  // @param _recipient: The receiver of the tokens\r\n  // @param _amount: Amount of tokens allocated for receiver.\r\n  function allocatePresaleTokens(address _recipient,\r\n                                 uint _amount,\r\n                                 uint64 cliffDate,\r\n                                 uint64 vestingDate,\r\n                                 bool revokable,\r\n                                 bool burnOnRevocation)\r\n                                 onlyBeforeSaleActivation\r\n                                 onlyBeforeSale\r\n                                 nonZeroAddress(_recipient)\r\n                                 only(operations) public {\r\n    token.grantVestedTokens(_recipient, _amount, uint64(now), cliffDate, vestingDate, revokable, burnOnRevocation);\r\n    NewPresaleAllocation(_recipient, _amount);\r\n  }\r\n\r\n  /// @dev The fallback function is called when ether is sent to the contract, it\r\n  /// simply calls `doPayment()` with the address that sent the ether as the\r\n  /// `_subscriber`. Payable is a required solidity modifier for functions to receive\r\n  /// ether, without this modifier functions will throw if ether is sent to them\r\n  function() public payable {\r\n    return doPayment(msg.sender);\r\n  }\r\n\r\n  /// @dev `doPayment()` is an internal function that sends the ether that this\r\n  /// contract receives to escrow and creates tokens in the address of the\r\n  /// @param _subscriber The address that will hold the newly created tokens\r\n  function doPayment(address _subscriber)\r\n           onlyDuringSalePeriod\r\n           onlySaleNotStopped\r\n           onlySaleActivated\r\n           nonZeroAddress(_subscriber)\r\n           minimumValue(dust) internal {\r\n    if (totalSubscription + msg.value > maximumSubscription) throw;  // throw if maximum subscription exceeded\r\n    uint purchasedTokens = msg.value.mul(getPrice(getBlockNumber()));  // number of purchased tokens\r\n\r\n    if (!escrow.send(msg.value)) throw;  // escrow funds\r\n    if (!token.mint(_subscriber, purchasedTokens)) throw;  // deliver tokens\r\n\r\n    subscriptions[_subscriber] = subscriptions[_subscriber].add(msg.value);\r\n    totalSubscription = totalSubscription.add(msg.value);\r\n    NewSubscription(_subscriber, purchasedTokens, msg.value);\r\n  }\r\n\r\n  // @notice Function to stop sale before the sale period ends\r\n  // @dev Only operations is authorized to call this method\r\n  function stopSale() onlySaleActivated onlySaleNotStopped only(operations) public {\r\n    saleStopped = true;\r\n  }\r\n\r\n  // @notice Function to restart stopped sale\r\n  // @dev Only operations is authorized to call this method\r\n  function restartSale() onlyDuringSalePeriod onlySaleStopped only(operations) public {\r\n    saleStopped = false;\r\n  }\r\n\r\n  // @notice Finalizes sale and distributes Artcoin to purchasers and releases payments\r\n  // @dev Transfers the token controller power to the consortium.\r\n  function finalizeSale() onlyAfterSale only(operations) public {\r\n    doFinalizeSale();\r\n  }\r\n\r\n  function doFinalizeSale() internal {\r\n    uint purchasedTokens = token.totalSupply();\r\n\r\n    uint advisorTokens = purchasedTokens * 5 / 100;  // mint 5% of purchased for advisors\r\n    if (!token.mint(operations, advisorTokens)) throw;\r\n\r\n    uint managerTokens = purchasedTokens * 25 / 100;  // mint 25% of purchased for manager\r\n    if (!token.mint(manager, managerTokens)) throw;\r\n\r\n    token.changeController(consortiumPlaceholder);\r\n\r\n    saleFinalized = true;\r\n    saleStopped = true;\r\n  }\r\n\r\n  // @notice Deploy Artcoin Consortium contract\r\n  // @param consortium: The address the consortium was deployed at.\r\n  function deployConsortium(address consortium) onlyFinalizedSale nonZeroAddress(consortium) only(operations) public {\r\n    consortiumPlaceholder.changeController(consortium);\r\n  }\r\n\r\n  function setOperations(address _operations) nonZeroAddress(_operations) only(operations) public {\r\n    operations = _operations;\r\n  }\r\n\r\n  function getBlockNumber() constant internal returns (uint) {\r\n    return block.number;\r\n  }\r\n\r\n  function saleFinalized() constant returns (bool) {\r\n    return saleFinalized;\r\n  }\r\n\r\n  function proxyPayment(address _owner) payable public returns (bool) {\r\n    doPayment(_owner);\r\n    return true;\r\n  }\r\n\r\n  /// @notice Notifies the controller about a transfer\r\n  /// @param _from The origin of the transfer\r\n  /// @param _to The destination of the transfer\r\n  /// @param _amount The amount of the transfer\r\n  /// @return False if the controller does not authorize the transfer\r\n  function onTransfer(address _from, address _to, uint _amount) public returns (bool) {\r\n    // Until the sale is finalized, only allows transfers originated by the sale contract.\r\n    // When finalizeSale is called, this function will stop being called and will always be true.\r\n    return _from == address(this);\r\n  }\r\n\r\n  /// @notice Notifies the controller about an approval\r\n  /// @param _owner The address that calls `approve()`\r\n  /// @param _spender The spender in the `approve()` call\r\n  /// @param _amount The amount in the `approve()` call\r\n  /// @return False if the controller does not authorize the approval\r\n  function onApprove(address _owner, address _spender, uint _amount) public returns (bool) {\r\n    return false;\r\n  }\r\n\r\n  modifier only(address x) {\r\n    if (msg.sender != x) throw;\r\n    _;\r\n  }\r\n\r\n  modifier onlyBeforeSale {\r\n    if (getBlockNumber() >= initialBlock) throw;\r\n    _;\r\n  }\r\n\r\n  modifier onlyDuringSalePeriod {\r\n    if (getBlockNumber() < initialBlock) throw;\r\n    if (getBlockNumber() >= finalBlock) throw;\r\n    _;\r\n  }\r\n\r\n  modifier onlyAfterSale {\r\n    if (getBlockNumber() < finalBlock) throw;\r\n    _;\r\n  }\r\n\r\n  modifier onlySaleStopped {\r\n    if (!saleStopped) throw;\r\n    _;\r\n  }\r\n\r\n  modifier onlySaleNotStopped {\r\n    if (saleStopped) throw;\r\n    _;\r\n  }\r\n\r\n  modifier onlyBeforeSaleActivation {\r\n    if (isActivated()) throw;\r\n    _;\r\n  }\r\n\r\n  modifier onlySaleActivated {\r\n    if (!isActivated()) throw;\r\n    _;\r\n  }\r\n\r\n  modifier onlyFinalizedSale {\r\n    if (getBlockNumber() < finalBlock) throw;\r\n    if (!saleFinalized) throw;\r\n    _;\r\n  }\r\n\r\n  modifier nonZeroAddress(address x) {\r\n    if (x == 0) throw;\r\n    _;\r\n  }\r\n\r\n  modifier minimumValue(uint256 x) {\r\n    if (msg.value < x) throw;\r\n    _;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"initialPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActivated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restartSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"consortium\",\"type\":\"address\"}],\"name\":\"deployConsortium\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operations\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"consortiumPlaceholder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operations\",\"type\":\"address\"}],\"name\":\"setOperations\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"activations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_consortiumPlaceholder\",\"type\":\"address\"},{\"name\":\"_escrow\",\"type\":\"address\"}],\"name\":\"setArtcoin\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSubscription\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"subscriptions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"cliffDate\",\"type\":\"uint64\"},{\"name\":\"vestingDate\",\"type\":\"uint64\"},{\"name\":\"revokable\",\"type\":\"bool\"},{\"name\":\"burnOnRevocation\",\"type\":\"bool\"}],\"name\":\"allocatePresaleTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"proxyPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumSubscription\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dust\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_operations\",\"type\":\"address\"},{\"name\":\"_initialBlock\",\"type\":\"uint256\"},{\"name\":\"_finalBlock\",\"type\":\"uint256\"},{\"name\":\"_initialPrice\",\"type\":\"uint256\"},{\"name\":\"_finalPrice\",\"type\":\"uint256\"},{\"name\":\"_priceStages\",\"type\":\"uint8\"},{\"name\":\"_maximumSubscription\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewPresaleAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"NewSubscription\",\"type\":\"event\"}]","ContractName":"ArtSale","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"000000000000000000000000c68815b3a6f22482683f6fe257de1ffda961714c00000000000000000000000074b46f7b07cf6a214dd4aa84a9c99afa842da09200000000000000000000000000000000000000000000000000000000003c6e6900000000000000000000000000000000000000000000000000000000003f27e9000000000000000000000000000000000000000000000000000000000000012c00000000000000000000000000000000000000000000000000000000000000c80000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000001fc3842bd1f071c00000","Library":"","SwarmSource":"bzzr://80d147b2ba231c16eba5324240ea959ed8303ab5ef7e91e03560a60cbc96d078"}]}