{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\n \r\n\r\ncontract Burner {\r\n    function burnILF(address , uint ) {}\r\n}\r\n\r\ncontract StandardToken {\r\n\r\n    /* *  Data structures */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n\r\n    /* *  Events */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /* *  Read and write storage functions */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /* * Read storage functions */\r\n    /// @dev Returns number of allowed tokens for given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\ncontract ILF is StandardToken {\r\n\r\n    mapping(address => bool) public previousMinters;\r\n    mapping(address => bool) public previousBurners;\r\n    bool public minterChangeable = true;\r\n    bool public burnerChangeable = true;\r\n    bool public manualEmissionEnabled = true;\r\n    string public constant symbol = \"ILF\";\r\n    string public constant name = \"ICO Lab Fund Token\";\r\n    uint8 public constant decimals = 8;\r\n    address public burnerAddress;\r\n    address public minterAddress;\r\n    address public ILFManager;\r\n    address public ILFManagerCandidate;   \r\n    bytes32 public ILFManagerCandidateKeyHash; \r\n    Burner burner;\r\n                                           \r\n    event Emission(address indexed emitTo, uint amount);\r\n    event Burn(address indexed burnFrom, uint amount);\r\n\r\n    // @dev Create token.\r\n    // @param _ILFManager ILF manager address.\r\n    function ILF(address _ILFManager){\r\n        ILFManager = _ILFManager;\r\n    }\r\n\r\n    /// @dev Emit new tokens for an address. Only usable by minter or manager.\r\n    /// @param emitTo Emission destination address.\r\n    /// @param amount Amount to emit.\r\n    function emitToken(address emitTo, uint amount) {\r\n        assert(amount>0);\r\n        assert(msg.sender == minterAddress || (msg.sender == ILFManager && manualEmissionEnabled));\r\n        balances[emitTo] += amount;\r\n        totalSupply += amount;\r\n        Emission(emitTo, amount);\r\n    }\r\n\r\n    /// @dev Burn tokens from an address. Only usable by burner.\r\n    /// @param burnFrom Address to burn tokens from.\r\n    /// @param amount Amount to burn.\r\n    function burnToken(address burnFrom, uint amount) external onlyBurner {\r\n        assert(amount <= balances[burnFrom] && amount <= totalSupply);\r\n        balances[burnFrom] -= amount;\r\n        totalSupply -= amount;\r\n        Burn(burnFrom, amount);\r\n    }\r\n\r\n    //Overloading the original ERC20 transfer function to handle token burn\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        assert(!previousBurners[_to] && !previousMinters[_to] && _to != minterAddress);\r\n        \r\n        if (balances[msg.sender] >= _value && _value > 0 && _to != address(0) && _to != address(this)) {//The last two checks are done for preventing sending tokens to zero address or token address (this contract).\r\n            if (_to == burnerAddress) {\r\n                burner.burnILF(msg.sender, _value);\r\n            }\r\n            else {\r\n                balances[msg.sender] -= _value;\r\n                balances[_to] += _value;\r\n                Transfer(msg.sender, _to, _value);\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        assert(!previousBurners[_to] && !previousMinters[_to] && _to != minterAddress);\r\n\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && _to != address(0) && _to != address(this)) {\r\n            if (_to == burnerAddress) {\r\n                burner.burnILF(_from, _value);\r\n            }\r\n            else {\r\n                balances[_to] += _value;\r\n                balances[_from] -= _value;\r\n                allowed[_from][msg.sender] -= _value;\r\n                Transfer(_from, _to, _value);\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Change minter manager. Only usable by manager.\r\n    /// @param candidate New manager address.\r\n    /// @param keyHash Hash of secret key possessed by candidate.\r\n    function changeILFManager(address candidate, bytes32 keyHash) external onlyILFManager {\r\n        ILFManagerCandidate = candidate;\r\n        ILFManagerCandidateKeyHash = keyHash;\r\n    }\r\n\r\n    /// @dev Accept taking manager role. Only usable by manager candidate.\r\n    /// @param key Hash of the secret key from the current manager.\r\n    function acceptManagement(string key) external onlyManagerCandidate(key) {\r\n        ILFManager = ILFManagerCandidate;\r\n    }\r\n\r\n    /// @dev Change minter address. Only usable by manager.\r\n    /// @param _minterAddress New minter address.\r\n    function changeMinter(address _minterAddress) external onlyILFManager {\r\n        assert(minterChangeable);\r\n        previousMinters[minterAddress]=true;\r\n        minterAddress = _minterAddress;\r\n    }\r\n\r\n    /// @dev Seals minter. After this procedure minter is no longer changeable.\r\n    /// @param _hash SHA3 hash of current minter address.\r\n    function sealMinter(bytes32 _hash) onlyILFManager {\r\n        assert(sha3(minterAddress)==_hash);\r\n        minterChangeable = false; \r\n    }\r\n    \r\n    /// @dev Change burner address. Only usable by manager.\r\n    /// @param _burnerAddress New burner address.\r\n    function changeBurner(address _burnerAddress) external onlyILFManager {\r\n        assert(burnerChangeable);\r\n        burner = Burner(_burnerAddress);\r\n        previousBurners[burnerAddress]=true;\r\n        burnerAddress = _burnerAddress;\r\n    }\r\n\r\n    /// @dev Seals burner. After this procedure burner is no longer changeable.\r\n    /// @param _hash SHA3 hash of current burner address.\r\n    function sealBurner(bytes32 _hash) onlyILFManager {\r\n        assert(sha3(burnerAddress)==_hash);\r\n        burnerChangeable = false; \r\n    }\r\n\r\n    /// @dev Disable calling emitToken by manager needed for initial token distribution. Only usable by manager.\r\n    /// @param _hash SHA3 Hash of current manager address.\r\n    function disableManualEmission(bytes32 _hash) onlyILFManager {\r\n        assert(sha3(ILFManager)==_hash);\r\n        manualEmissionEnabled = false; \r\n    }\r\n\r\n    modifier onlyILFManager() {\r\n        assert(msg.sender == ILFManager);\r\n        _;\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        assert(msg.sender == minterAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyBurner() {\r\n        assert(msg.sender == burnerAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyManagerCandidate(string key) {\r\n        assert(msg.sender == ILFManagerCandidate);\r\n        assert(sha3(key) == ILFManagerCandidateKeyHash);\r\n        _;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minterAddress\",\"type\":\"address\"}],\"name\":\"changeMinter\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"emitTo\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minterAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"sealBurner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnerChangeable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"previousBurners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"sealMinter\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnerAddress\",\"type\":\"address\"}],\"name\":\"changeBurner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ILFManagerCandidateKeyHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ILFManagerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ILFManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manualEmissionEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burnFrom\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"previousMinters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"},{\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"changeILFManager\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minterChangeable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"disableManualEmission\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"acceptManagement\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ILFManager\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"emitTo\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Emission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burnFrom\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ILF","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a96a22f9e444f71e26747da0d902d12049741797","Library":"","SwarmSource":"bzzr://e7e1d603179d580a7beef1d54de4eb0c87d129be1f5b1cfd20a3986daf5c94d2"}]}