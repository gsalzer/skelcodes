{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract SafeMath {\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) throw;\r\n  }\r\n}\r\ncontract Token {\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n    function name() public constant returns (string name) { name; }\r\n    function symbol() public constant returns (string symbol) { symbol; }\r\n    function decimals() public constant returns (uint8 decimals) { decimals; }\r\n    function totalSupply() public constant returns (uint256 totalSupply) { totalSupply; }\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) { _owner; balance; }\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) { _owner; _spender; remaining; }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\ncontract Ethex is SafeMath {\r\n  address public admin; //the admin address\r\n  address public feeAccount; //the account that will receive fees\r\n  uint public sellFee; //percentage times (1 ether)\r\n  uint public buyFee; //percentage times (1 ether)\r\n  mapping (bytes32 => uint) public sellOrders; //a hash of available orders holds a number of tokens\r\n  mapping (bytes32 => uint) public buyOrders; //a hash of available orders. holds a number of eth\r\n\r\n  event BuyOrder(bytes32 order, address token, uint amount, uint price, address buyer);\r\n  event SellOrder(bytes32 order,address token, uint amount, uint price, address seller);\r\n  event CancelBuyOrder(bytes32 order, address token, uint price, address buyer);\r\n  event CancelSellOrder(bytes32 order, address token, uint price, address seller);\r\n  event Buy(bytes32 order, address token, uint amount, uint price, address buyer, address seller);\r\n  event Sell(bytes32 order, address token, uint amount, uint price, address buyer, address seller);\r\n\r\n  function Ethex(address admin_, address feeAccount_, uint buyFee_, uint sellFee_) {\r\n    admin = admin_;\r\n    feeAccount = feeAccount_;\r\n    buyFee = buyFee_;\r\n    sellFee = sellFee_;\r\n  }\r\n\r\n  function() {\r\n    throw;\r\n  }\r\n\r\n  function changeAdmin(address admin_) {\r\n    if (msg.sender != admin) throw;\r\n    admin = admin_;\r\n  }\r\n\r\n  function changeFeeAccount(address feeAccount_) {\r\n    if (msg.sender != admin) throw;\r\n    feeAccount = feeAccount_;\r\n  }\r\n\r\n  function changeBuyFee(uint buyFee_) {\r\n    if (msg.sender != admin) throw;\r\n    if (buyFee_ > buyFee) throw;\r\n    buyFee = buyFee_;\r\n  }\r\n\r\n  function changeSellFee(uint sellFee_) {\r\n    if (msg.sender != admin) throw;\r\n    if (sellFee_ > sellFee)\r\n    sellFee = sellFee_;\r\n  }\r\n\r\n  function sellOrder(address token, uint tokenAmount, uint price) {\r\n    bytes32 h = sha256(token, price, msg.sender);\r\n    sellOrders[h] = safeAdd(sellOrders[h],tokenAmount);\r\n    SellOrder(h, token, tokenAmount, price, msg.sender);\r\n  }\r\n\r\n  function buyOrder(address token, uint tokenAmount, uint price) payable {\r\n    bytes32 h = sha256(token, price,  msg.sender);\r\n    uint totalCost = tokenAmount*price;\r\n    if (totalCost < msg.value) throw;\r\n    buyOrders[h] = safeAdd(buyOrders[h],msg.value);\r\n    BuyOrder(h, token, tokenAmount, price, msg.sender);\r\n  }\r\n\r\n  function cancelSellOrder(address token, uint price) {\r\n    bytes32 h = sha256(token, price, msg.sender);\r\n    delete sellOrders[h];\r\n    CancelSellOrder(h,token,price,msg.sender);\r\n  }\r\n\r\n  function cancelBuyOrder(address token, uint price) {\r\n    bytes32 h = sha256(token, price, msg.sender);\r\n    uint remain = buyOrders[h];\r\n    delete buyOrders[h];\r\n    if (!msg.sender.call.value(remain)()) throw;\r\n    CancelBuyOrder(h,token,price,msg.sender);\r\n  }\r\n\r\n  function totalBuyPrice(uint amount, uint price)  public constant returns (uint) {\r\n    uint totalPriceNoFee = safeMul(amount, price);\r\n    uint totalFee = safeMul(totalPriceNoFee, buyFee) / (1 ether);\r\n    uint totalPrice = safeAdd(totalPriceNoFee,totalFee);\r\n    return totalPrice;\r\n  }\r\n\r\n  function takeBuy(address token, uint amount, uint price, address buyer) payable {\r\n    bytes32 h = sha256(token, price, buyer);\r\n    uint totalPriceNoFee = safeMul(amount, price);\r\n    uint totalFee = safeMul(totalPriceNoFee, buyFee) / (1 ether);\r\n    uint totalPrice = safeAdd(totalPriceNoFee,totalFee);\r\n    if (buyOrders[h] < amount) throw;\r\n    if (totalPrice > msg.value) throw;\r\n    if (Token(token).allowance(msg.sender,this) < amount) throw;\r\n    if (Token(token).transferFrom(msg.sender,buyer,amount)) throw;\r\n    buyOrders[h] = safeSub(buyOrders[h], amount);\r\n    if (!feeAccount.send(totalFee)) throw;\r\n    uint leftOver = msg.value - totalPrice;\r\n    if (leftOver>0)\r\n      if (!msg.sender.send(leftOver)) throw;\r\n    Buy(h, token, amount, totalPrice, buyer, msg.sender);\r\n  }\r\n\r\n  function totalSellPrice(uint amount, uint price)  public constant returns (uint) {\r\n    uint totalPriceNoFee = safeMul(amount, price);\r\n    uint totalFee = safeMul(totalPriceNoFee, buyFee) / (1 ether);\r\n    uint totalPrice = safeSub(totalPriceNoFee,totalFee);\r\n    return totalPrice;\r\n  }\r\n\r\n  function takeSell(address token, uint amount,uint price, address seller) payable {\r\n    bytes32 h = sha256(token, price, seller);\r\n    uint totalPriceNoFee = safeMul(amount, price);\r\n    uint totalFee = safeMul(totalPriceNoFee, buyFee) / (1 ether);\r\n    uint totalPrice = safeSub(totalPriceNoFee,totalFee);\r\n    if (sellOrders[h] < amount) throw;\r\n    if (Token(token).allowance(seller,this) < amount) throw;\r\n    if (!Token(token).transferFrom(seller,msg.sender,amount)) throw;\r\n    sellOrders[h] = safeSub(sellOrders[h],amount);\r\n    if (!seller.send(totalPrice)) throw;\r\n    if (!feeAccount.send(totalFee)) throw;\r\n    Sell(h, token, amount, totalPrice, msg.sender, seller);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"buyOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"sellOrder\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"cancelSellOrder\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"takeSell\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"totalBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sellFee_\",\"type\":\"uint256\"}],\"name\":\"changeSellFee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"cancelBuyOrder\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeAccount_\",\"type\":\"address\"}],\"name\":\"changeFeeAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"buyOrder\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"totalSellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyFee_\",\"type\":\"uint256\"}],\"name\":\"changeBuyFee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"takeBuy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sellOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"admin_\",\"type\":\"address\"},{\"name\":\"feeAccount_\",\"type\":\"address\"},{\"name\":\"buyFee_\",\"type\":\"uint256\"},{\"name\":\"sellFee_\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"order\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"BuyOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"order\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"SellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"order\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"CancelBuyOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"order\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"CancelSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"order\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"order\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"Sell\",\"type\":\"event\"}]","ContractName":"Ethex","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000a8d7d441ffdfc8a3f33d5d5583813656fbdfe000000000000000000000000000a8d7d441ffdfc8a3f33d5d5583813656fbdfe00000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000071afd498d0000","Library":"","SwarmSource":"bzzr://4885d23d6d287d4f235b55400638786f219d7665efaaca8691f49671981776be"}]}