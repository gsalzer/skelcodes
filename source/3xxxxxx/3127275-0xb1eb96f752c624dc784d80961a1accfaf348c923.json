{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\n// ------------------------------------------------------------------------\r\n// TokenSellerFactory\r\n//\r\n// Decentralised trustless ERC20-partially-compliant token to ETH exchange\r\n// contract on the Ethereum blockchain.\r\n//\r\n// This caters for the Golem Network Token which does not implement the\r\n// ERC20 transferFrom(...), approve(...) and allowance(...) methods\r\n//\r\n// History:\r\n//   Jan 25 2017 - BPB Added makerTransferAsset(...)\r\n//   Feb 05 2017 - BPB Bug fix in the change calculation for the Unicorn\r\n//                     token with natural number 1\r\n//\r\n// Enjoy. (c) JonnyLatte, Cintix & BokkyPooBah 2017. The MIT licence.\r\n// ------------------------------------------------------------------------\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20Partial {\r\n    function totalSupply() constant returns (uint totalSupply);\r\n    function balanceOf(address _owner) constant returns (uint balance);\r\n    function transfer(address _to, uint _value) returns (bool success);\r\n    // function transferFrom(address _from, address _to, uint _value) returns (bool success);\r\n    // function approve(address _spender, uint _value) returns (bool success);\r\n    // function allowance(address _owner, address _spender) constant returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    // event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// contract can sell tokens for ETH\r\n// prices are in amount of wei per batch of token units\r\n\r\ncontract TokenSeller is Owned {\r\n\r\n    address public asset;       // address of token\r\n    uint256 public sellPrice;   // contract sells lots of tokens at this price\r\n    uint256 public units;       // lot size (token-wei)\r\n\r\n    bool public sellsTokens;    // is contract selling\r\n\r\n    event ActivatedEvent(bool sells);\r\n    event MakerWithdrewAsset(uint256 tokens);\r\n    event MakerTransferredAsset(address toTokenSeller, uint256 tokens);\r\n    event MakerWithdrewERC20Token(address tokenAddress, uint256 tokens);\r\n    event MakerWithdrewEther(uint256 ethers);\r\n    event TakerBoughtAsset(address indexed buyer, uint256 ethersSent,\r\n        uint256 ethersReturned, uint256 tokensBought);\r\n\r\n    // Constructor - only to be called by the TokenSellerFactory contract\r\n    function TokenSeller (\r\n        address _asset,\r\n        uint256 _sellPrice,\r\n        uint256 _units,\r\n        bool    _sellsTokens\r\n    ) {\r\n        asset       = _asset;\r\n        sellPrice   = _sellPrice;\r\n        units       = _units;\r\n        sellsTokens = _sellsTokens;\r\n        ActivatedEvent(sellsTokens);\r\n    }\r\n\r\n    // Maker can activate or deactivate this contract's\r\n    // selling status\r\n    //\r\n    // The ActivatedEvent() event is logged with the following\r\n    // parameter:\r\n    //   sellsTokens  this contract can sell asset tokens\r\n    function activate (\r\n        bool _sellsTokens\r\n    ) onlyOwner {\r\n        sellsTokens = _sellsTokens;\r\n        ActivatedEvent(sellsTokens);\r\n    }\r\n\r\n    // Maker can withdraw asset tokens from this contract, with the\r\n    // following parameter:\r\n    //   tokens  is the number of asset tokens to be withdrawn\r\n    //\r\n    // The MakerWithdrewAsset() event is logged with the following\r\n    // parameter:\r\n    //   tokens  is the number of tokens withdrawn by the maker\r\n    //\r\n    // This method was called withdrawAsset() in the old version\r\n    function makerWithdrawAsset(uint256 tokens) onlyOwner returns (bool ok) {\r\n        MakerWithdrewAsset(tokens);\r\n        return ERC20Partial(asset).transfer(owner, tokens);\r\n    }\r\n\r\n    // Maker can transfer asset tokens from this contract to another\r\n    // TokenSeller contract, with the following parameter:\r\n    //   toTokenSeller  Another TokenSeller contract owned by the\r\n    //                  same owner\r\n    //   tokens         is the number of asset tokens to be moved\r\n    //\r\n    // The MakerTransferredAsset() event is logged with the following\r\n    // parameters:\r\n    //   toTokenSeller  The other TokenSeller contract owned by\r\n    //                  the same owner\r\n    //   tokens         is the number of tokens transferred\r\n    //\r\n    // The asset Transfer() event is logged from this contract to\r\n    // the other contract\r\n    //\r\n    function makerTransferAsset(\r\n        TokenSeller toTokenSeller,\r\n        uint256 tokens\r\n    ) onlyOwner returns (bool ok) {\r\n        if (owner != toTokenSeller.owner() || asset != toTokenSeller.asset()) {\r\n            throw;\r\n        }\r\n        MakerTransferredAsset(toTokenSeller, tokens);\r\n        return ERC20Partial(asset).transfer(toTokenSeller, tokens);\r\n    }\r\n\r\n    // Maker can withdraw any ERC20 asset tokens from this contract\r\n    //\r\n    // This method is included in the case where this contract receives\r\n    // the wrong tokens\r\n    //\r\n    // The MakerWithdrewERC20Token() event is logged with the following\r\n    // parameter:\r\n    //   tokenAddress  is the address of the tokens withdrawn by the maker\r\n    //   tokens        is the number of tokens withdrawn by the maker\r\n    //\r\n    // This method was called withdrawToken() in the old version\r\n    function makerWithdrawERC20Token(\r\n        address tokenAddress,\r\n        uint256 tokens\r\n    ) onlyOwner returns (bool ok) {\r\n        MakerWithdrewERC20Token(tokenAddress, tokens);\r\n        return ERC20Partial(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    // Maker withdraws ethers from this contract\r\n    //\r\n    // The MakerWithdrewEther() event is logged with the following parameter\r\n    //   ethers  is the number of ethers withdrawn by the maker\r\n    //\r\n    // This method was called withdraw() in the old version\r\n    function makerWithdrawEther(uint256 ethers) onlyOwner returns (bool ok) {\r\n        if (this.balance >= ethers) {\r\n            MakerWithdrewEther(ethers);\r\n            return owner.send(ethers);\r\n        }\r\n    }\r\n\r\n    // Taker buys asset tokens by sending ethers\r\n    //\r\n    // The TakerBoughtAsset() event is logged with the following parameters\r\n    //   buyer           is the buyer's address\r\n    //   ethersSent      is the number of ethers sent by the buyer\r\n    //   ethersReturned  is the number of ethers sent back to the buyer as\r\n    //                   change\r\n    //   tokensBought    is the number of asset tokens sent to the buyer\r\n    //\r\n    // This method was called buy() in the old version\r\n    function takerBuyAsset() payable {\r\n        if (sellsTokens || msg.sender == owner) {\r\n            // Note that sellPrice has already been validated as > 0\r\n            uint order    = msg.value / sellPrice;\r\n            // Note that units has already been validated as > 0\r\n            uint can_sell = ERC20Partial(asset).balanceOf(address(this)) / units;\r\n            uint256 change = 0;\r\n            if (msg.value > (can_sell * sellPrice)) {\r\n                change  = msg.value - (can_sell * sellPrice);\r\n                order = can_sell;\r\n            }\r\n            if (change > 0) {\r\n                if (!msg.sender.send(change)) throw;\r\n            }\r\n            if (order > 0) {\r\n                if (!ERC20Partial(asset).transfer(msg.sender, order * units)) throw;\r\n            }\r\n            TakerBoughtAsset(msg.sender, msg.value, change, order * units);\r\n        }\r\n        // Return user funds if the contract is not selling\r\n        else if (!msg.sender.send(msg.value)) throw;\r\n    }\r\n\r\n    // Taker buys tokens by sending ethers\r\n    function () payable {\r\n        takerBuyAsset();\r\n    }\r\n}\r\n\r\n// This contract deploys TokenSeller contracts and logs the event\r\ncontract TokenSellerFactory is Owned {\r\n\r\n    event TradeListing(address indexed ownerAddress, address indexed tokenSellerAddress,\r\n        address indexed asset, uint256 sellPrice, uint256 units, bool sellsTokens);\r\n    event OwnerWithdrewERC20Token(address indexed tokenAddress, uint256 tokens);\r\n\r\n    mapping(address => bool) _verify;\r\n\r\n    // Anyone can call this method to verify the settings of a\r\n    // TokenSeller contract. The parameters are:\r\n    //   tradeContract  is the address of a TokenSeller contract\r\n    //\r\n    // Return values:\r\n    //   valid        did this TokenTraderFactory create the TokenTrader contract?\r\n    //   owner        is the owner of the TokenTrader contract\r\n    //   asset        is the ERC20 asset address\r\n    //   sellPrice    is the sell price in ethers per `units` of asset tokens\r\n    //   units        is the number of units of asset tokens\r\n    //   sellsTokens  is the TokenTrader contract selling tokens?\r\n    //\r\n    function verify(address tradeContract) constant returns (\r\n        bool    valid,\r\n        address owner,\r\n        address asset,\r\n        uint256 sellPrice,\r\n        uint256 units,\r\n        bool    sellsTokens\r\n    ) {\r\n        valid = _verify[tradeContract];\r\n        if (valid) {\r\n            TokenSeller t = TokenSeller(tradeContract);\r\n            owner         = t.owner();\r\n            asset         = t.asset();\r\n            sellPrice     = t.sellPrice();\r\n            units         = t.units();\r\n            sellsTokens   = t.sellsTokens();\r\n        }\r\n    }\r\n\r\n    // Maker can call this method to create a new TokenSeller contract\r\n    // with the maker being the owner of this new contract\r\n    //\r\n    // Parameters:\r\n    //   asset        is the ERC20 asset address\r\n    //   sellPrice    is the sell price in ethers per `units` of asset tokens\r\n    //   units        is the number of units of asset tokens\r\n    //   sellsTokens  is the TokenSeller contract selling tokens?\r\n    //\r\n    // For example, listing a TokenSeller contract on the GNT Golem Network Token\r\n    // where the contract will sell GNT tokens at a rate of 170/100000 = 0.0017 ETH\r\n    // per GNT token:\r\n    //   asset        0xa74476443119a942de498590fe1f2454d7d4ac0d\r\n    //   sellPrice    170\r\n    //   units        100000\r\n    //   sellsTokens  true\r\n    //\r\n    // The TradeListing() event is logged with the following parameters\r\n    //   ownerAddress        is the Maker's address\r\n    //   tokenSellerAddress  is the address of the newly created TokenSeller contract\r\n    //   asset               is the ERC20 asset address\r\n    //   sellPrice           is the sell price in ethers per `units` of asset tokens\r\n    //   unit                is the number of units of asset tokens\r\n    //   sellsTokens         is the TokenSeller contract selling tokens?\r\n    //\r\n    // This method was called createTradeContract() in the old version\r\n    //\r\n    function createSaleContract(\r\n        address asset,\r\n        uint256 sellPrice,\r\n        uint256 units,\r\n        bool    sellsTokens\r\n    ) returns (address seller) {\r\n        // Cannot have invalid asset\r\n        if (asset == 0x0) throw;\r\n        // Cannot set zero or negative price\r\n        if (sellPrice <= 0) throw;\r\n        // Cannot sell zero or negative units\r\n        if (units <= 0) throw;\r\n        seller = new TokenSeller(\r\n            asset,\r\n            sellPrice,\r\n            units,\r\n            sellsTokens);\r\n        // Record that this factory created the trader\r\n        _verify[seller] = true;\r\n        // Set the owner to whoever called the function\r\n        TokenSeller(seller).transferOwnership(msg.sender);\r\n        TradeListing(msg.sender, seller, asset, sellPrice, units, sellsTokens);\r\n    }\r\n\r\n    // Factory owner can withdraw any ERC20 asset tokens from this contract\r\n    //\r\n    // This method is included in the case where this contract receives\r\n    // the wrong tokens\r\n    //\r\n    // The OwnerWithdrewERC20Token() event is logged with the following\r\n    // parameter:\r\n    //   tokenAddress  is the address of the tokens withdrawn by the maker\r\n    //   tokens        is the number of tokens withdrawn by the maker\r\n    function ownerWithdrawERC20Token(address tokenAddress, uint256 tokens) onlyOwner returns (bool ok) {\r\n        OwnerWithdrewERC20Token(tokenAddress, tokens);\r\n        return ERC20Partial(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    // Prevents accidental sending of ether to the factory\r\n    function () {\r\n        throw;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawERC20Token\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tradeContract\",\"type\":\"address\"}],\"name\":\"verify\",\"outputs\":[{\"name\":\"valid\",\"type\":\"bool\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"name\":\"units\",\"type\":\"uint256\"},{\"name\":\"sellsTokens\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"name\":\"units\",\"type\":\"uint256\"},{\"name\":\"sellsTokens\",\"type\":\"bool\"}],\"name\":\"createSaleContract\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenSellerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"units\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sellsTokens\",\"type\":\"bool\"}],\"name\":\"TradeListing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"OwnerWithdrewERC20Token\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenSellerFactory","CompilerVersion":"v0.4.6+commit.2dabbdf0","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}