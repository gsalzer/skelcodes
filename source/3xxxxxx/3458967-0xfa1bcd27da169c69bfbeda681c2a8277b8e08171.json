{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n\r\n/* Родительский контракт */\r\ncontract Owned {\r\n\r\n    /* Адрес владельца контракта*/\r\n    address owner;\r\n\r\n    /* Конструктор контракта, вызывается при первом запуске */\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /* Изменить владельца контракта, newOwner - адрес нового владельца */\r\n    function changeOwner(address newOwner) onlyowner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    /* Модификатор для ограничения доступа к функциям только для владельца */\r\n    modifier onlyowner() {\r\n        if (msg.sender==owner) _;\r\n    }\r\n\r\n    /* Удалить контракт */\r\n    function kill() onlyowner {\r\n        if (msg.sender == owner) suicide(owner);\r\n    }\r\n}\r\n\r\n/* Основной контракт, наследует контракт Owned */\r\ncontract Documents is Owned {\r\n\r\n    /* Структура представляющая документ */\r\n    struct Document {\r\n        string hash;\r\n        string link;\r\n        string data;\r\n        address creator;\r\n        uint date;\r\n        uint signsCount;\r\n        mapping (uint => Sign) signs;\r\n    }\r\n\r\n    /* Структура представляющая подпись */\r\n    struct Sign {\r\n        address member;\r\n        uint date;\r\n    }\r\n\r\n    /* Маппинг ID документа -> документ */\r\n    mapping (uint => Document) public documentsIds;\r\n\r\n    /* Кол-во документов */\r\n    uint documentsCount = 0;\r\n\r\n    /* Событие при подписи документа участником, параметры - адрес участника, ID документа */\r\n    event DocumentSigned(uint id, address member);\r\n\r\n    /* Событие при регистрации документа, параметры - ID документа */\r\n    event DocumentRegistered(uint id, string hash);\r\n\r\n     /* Конструктор контракта, вызывается при первом запуске */\r\n    function Documents() {\r\n    }\r\n\r\n    /* функция добавления документа, параметры - хэш, ссылка, дополнительные данные, создатель.\r\n    Если не передаётся адрес создателя, то будет указан адрес отправителя, в конце вызовется событие DocumentRegistered\r\n    с параметрами id - документа (позиция в массиве documents) и hash - хэш сумма */\r\n    function registerDocument(string hash,\r\n                       string link,\r\n                       string data) {\r\n        address creator = msg.sender;\r\n\r\n        uint id = documentsCount + 1;\r\n        documentsIds[id] = Document({\r\n           hash: hash,\r\n           link: link,\r\n           data: data,\r\n           creator: creator,\r\n           date: now,\r\n           signsCount: 0\r\n        });\r\n        documentsCount = id;\r\n        DocumentRegistered(id, hash);\r\n    }\r\n\r\n    /* функция добавления подписи в документ, параметры - ID Документа, адрес подписчика.\r\n    Если не передаётся адрес подписчика, то будет указан адрес отправителя,\r\n    в конце вызовется событие DocumentSigned */\r\n    function addSignature(uint id) {\r\n        address member = msg.sender;\r\n\r\n        Document d = documentsIds[id];\r\n        uint count = d.signsCount;\r\n        bool signed = false;\r\n        if (count != 0) {\r\n            for (uint i = 0; i < count; i++) {\r\n                if (d.signs[i].member == member) {\r\n                    signed = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!signed) {\r\n            d.signs[count] = Sign({\r\n                    member: member,\r\n                    date: now\r\n                });\r\n            documentsIds[id].signsCount = count + 1;\r\n            DocumentSigned(id, member);\r\n        }\r\n    }\r\n\r\n    /* Функция получения количества документов */\r\n    function getDocumentsCount() constant returns (uint) {\r\n        return documentsCount;\r\n    }\r\n\r\n    /* Функция получения документа по ID */\r\n    function getDocument(uint id) constant returns (string hash,\r\n                       string link,\r\n                       string data,\r\n                       address creator,\r\n                       uint date,\r\n                       uint count) {\r\n        Document d = documentsIds[id];\r\n        hash = d.hash;\r\n        link = d.link;\r\n        data = d.data;\r\n        creator = d.creator;\r\n        date = d.date;\r\n    }\r\n\r\n    /* Функция получения количества подписей по ID документа */\r\n    function getDocumentSignsCount(uint id) constant returns (uint) {\r\n        Document d = documentsIds[id];\r\n        return d.signsCount;\r\n    }\r\n\r\n    /* Функция получения подписи документов, параметры - ID документа, позиция подписи в массиве */\r\n    function getDocumentSign(uint id, uint index) constant returns (\r\n                        address member,\r\n                        uint date) {\r\n        Document d = documentsIds[id];\r\n        Sign s = d.signs[index];\r\n        member = s.member;\r\n        date = s.date;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getDocumentsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"string\"},{\"name\":\"link\",\"type\":\"string\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"registerDocument\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"addSignature\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getDocument\",\"outputs\":[{\"name\":\"hash\",\"type\":\"string\"},{\"name\":\"link\",\"type\":\"string\"},{\"name\":\"data\",\"type\":\"string\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"documentsIds\",\"outputs\":[{\"name\":\"hash\",\"type\":\"string\"},{\"name\":\"link\",\"type\":\"string\"},{\"name\":\"data\",\"type\":\"string\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"signsCount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getDocumentSignsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDocumentSign\",\"outputs\":[{\"name\":\"member\",\"type\":\"address\"},{\"name\":\"date\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"member\",\"type\":\"address\"}],\"name\":\"DocumentSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"DocumentRegistered\",\"type\":\"event\"}]","ContractName":"Documents","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1e1bbf9bac22ac510d6f313cc823e197e2fe041fb13867a63e87130bb0728c21"}]}