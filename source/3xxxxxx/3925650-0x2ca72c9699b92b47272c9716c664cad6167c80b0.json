{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/*\r\n    Copyright 2017, Shaun Shull\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/// @title GUNS Crowdsale Contract - GeoFounders.com\r\n/// @author Shaun Shull\r\n/// @dev Simple single crowdsale contract for fixed supply, single-rate, \r\n///  block-range crowdsale. Additional token cleanup functionality.\r\n\r\n\r\n/// @dev Generic ERC20 Token Interface, totalSupply made to var for compiler\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n/// @dev ERC20 Standard Token Contract\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\n\r\n/// @dev Primary Token Contract\r\ncontract GUNS is StandardToken {\r\n\r\n    // metadata\r\n    string public constant name = \"GeoUnits\";\r\n    string public constant symbol = \"GUNS\";\r\n    uint256 public constant decimals = 18;\r\n    string public version = \"1.0\";\r\n\r\n    // contracts\r\n    address public hostAccount;       // address that kicks off the crowdsale\r\n    address public ethFundDeposit;    // deposit address for ETH for GeoFounders\r\n    address public gunsFundDeposit;   // deposit address for GeoFounders Tokens - GeoUnits (GUNS)\r\n\r\n    // crowdsale parameters\r\n    bool public isFinalized;                                                      // false until crowdsale finalized\r\n    uint256 public fundingStartBlock;                                             // start block\r\n    uint256 public fundingEndBlock;                                               // end block\r\n    uint256 public constant gunsFund = 35 * (10**6) * 10**decimals;               // 35m GUNS reserved for devs\r\n    uint256 public constant tokenExchangeRate = 1000;                             // 1000 GUNS per 1 ETH\r\n    uint256 public constant tokenCreationCap =  100 * (10**6) * 10**decimals;     // 100m GUNS fixed supply\r\n    uint256 public constant tokenCreationMin =  1 * (10**6) * 10**decimals;       // 1m minimum must be in supply (legacy code)\r\n\r\n    // events\r\n    event LogRefund(address indexed _to, uint256 _value);   // event for refund\r\n    event CreateGUNS(address indexed _to, uint256 _value);  // event for token creation\r\n\r\n    // safely add\r\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n        uint256 z = x + y;\r\n        assert((z >= x) && (z >= y));\r\n        return z;\r\n    }\r\n\r\n    // safely subtract\r\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    // safely multiply\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n    // constructor\r\n    function GUNS() {}\r\n\r\n    // initialize deployed contract\r\n    function initialize(\r\n        address _ethFundDeposit,\r\n        address _gunsFundDeposit,\r\n        uint256 _fundingStartBlock,\r\n        uint256 _fundingEndBlock\r\n    ) public {\r\n        require(address(hostAccount) == 0x0);     // one time initialize\r\n        hostAccount = msg.sender;                 // assign initializer var\r\n        isFinalized = false;                      // crowdsale state\r\n        ethFundDeposit = _ethFundDeposit;         // set final ETH deposit address\r\n        gunsFundDeposit = _gunsFundDeposit;       // set final GUNS dev deposit address\r\n        fundingStartBlock = _fundingStartBlock;   // block number to start crowdsale\r\n        fundingEndBlock = _fundingEndBlock;       // block number to end crowdsale\r\n        totalSupply = gunsFund;                   // update totalSupply to reserve\r\n        balances[gunsFundDeposit] = gunsFund;     // deposit reserve tokens to dev address\r\n        CreateGUNS(gunsFundDeposit, gunsFund);    // logs token creation event\r\n    }\r\n\r\n    // enable people to pay contract directly\r\n    function () public payable {\r\n        require(address(hostAccount) != 0x0);                      // initialization check\r\n\r\n        if (isFinalized) throw;                                    // crowdsale state check\r\n        if (block.number < fundingStartBlock) throw;               // within start block check\r\n        if (block.number > fundingEndBlock) throw;                 // within end block check\r\n        if (msg.value == 0) throw;                                 // person actually sent ETH check\r\n\r\n        uint256 tokens = safeMult(msg.value, tokenExchangeRate);   // calculate num of tokens purchased\r\n        uint256 checkedSupply = safeAdd(totalSupply, tokens);      // calculate total supply if purchased\r\n\r\n        if (tokenCreationCap < checkedSupply) throw;               // if exceeding token max, cancel order\r\n\r\n        totalSupply = checkedSupply;                               // update totalSupply\r\n        balances[msg.sender] += tokens;                            // update token balance for payer\r\n        CreateGUNS(msg.sender, tokens);                            // logs token creation event\r\n    }\r\n\r\n    // generic function to pay this contract\r\n    function emergencyPay() external payable {}\r\n\r\n    // wrap up crowdsale after end block\r\n    function finalize() external {\r\n        //if (isFinalized) throw;                                                        // check crowdsale state is false\r\n        if (msg.sender != ethFundDeposit) throw;                                         // check caller is ETH deposit address\r\n        //if (totalSupply < tokenCreationMin) throw;                                     // check minimum is met\r\n        if (block.number <= fundingEndBlock && totalSupply < tokenCreationCap) throw;    // check past end block unless at creation cap\r\n\r\n        if (!ethFundDeposit.send(this.balance)) throw;                                   // send account balance to ETH deposit address\r\n        \r\n        uint256 remainingSupply = safeSubtract(tokenCreationCap, totalSupply);           // calculate remaining tokens to reach fixed supply\r\n        if (remainingSupply > 0) {                                                       // if remaining supply left\r\n            uint256 updatedSupply = safeAdd(totalSupply, remainingSupply);               // calculate total supply with remaining supply\r\n            totalSupply = updatedSupply;                                                 // update totalSupply\r\n            balances[gunsFundDeposit] += remainingSupply;                                // manually update devs token balance\r\n            CreateGUNS(gunsFundDeposit, remainingSupply);                                // logs token creation event\r\n        }\r\n\r\n        isFinalized = true;                                                              // update crowdsale state to true\r\n    }\r\n\r\n    // legacy code to enable refunds if min token supply not met (not possible with fixed supply)\r\n    function refund() external {\r\n        if (isFinalized) throw;                               // check crowdsale state is false\r\n        if (block.number <= fundingEndBlock) throw;           // check crowdsale still running\r\n        if (totalSupply >= tokenCreationMin) throw;           // check creation min was not met\r\n        if (msg.sender == gunsFundDeposit) throw;             // do not allow dev refund\r\n\r\n        uint256 gunsVal = balances[msg.sender];               // get callers token balance\r\n        if (gunsVal == 0) throw;                              // check caller has tokens\r\n\r\n        balances[msg.sender] = 0;                             // set callers tokens to zero\r\n        totalSupply = safeSubtract(totalSupply, gunsVal);     // subtract callers balance from total supply\r\n        uint256 ethVal = gunsVal / tokenExchangeRate;         // calculate ETH from token exchange rate\r\n        LogRefund(msg.sender, ethVal);                        // log refund event\r\n\r\n        if (!msg.sender.send(ethVal)) throw;                  // send caller their refund\r\n    }\r\n\r\n    // clean up mistaken tokens sent to this contract\r\n    // also check empty address for tokens and clean out\r\n    // (GUNS only, does not support 3rd party tokens)\r\n    function mistakenTokens() external {\r\n        if (msg.sender != ethFundDeposit) throw;                // check caller is ETH deposit address\r\n        \r\n        if (balances[this] > 0) {                               // if contract has tokens\r\n            Transfer(this, gunsFundDeposit, balances[this]);    // log transfer event\r\n            balances[gunsFundDeposit] += balances[this];        // send tokens to dev tokens address\r\n            balances[this] = 0;                                 // zero out contract token balance\r\n        }\r\n\r\n        if (balances[0x0] > 0) {                                // if empty address has tokens\r\n            Transfer(0x0, gunsFundDeposit, balances[0x0]);      // log transfer event\r\n            balances[gunsFundDeposit] += balances[0x0];         // send tokens to dev tokens address\r\n            balances[0x0] = 0;                                  // zero out empty address token balance\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gunsFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gunsFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hostAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyPay\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethFundDeposit\",\"type\":\"address\"},{\"name\":\"_gunsFundDeposit\",\"type\":\"address\"},{\"name\":\"_fundingStartBlock\",\"type\":\"uint256\"},{\"name\":\"_fundingEndBlock\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mistakenTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"CreateGUNS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GUNS","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c1e4af946997cad27e5d138920d3d3ef0acda8f548d0ec526bedb504b631a037"}]}