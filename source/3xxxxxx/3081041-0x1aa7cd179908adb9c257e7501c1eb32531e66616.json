{"status":"1","message":"OK","result":[{"SourceCode":"/** \r\n* The contract defining the contest, allowing participation and voting.\r\n* Participation is only possible before the participation deadline.\r\n* Voting is only allowed after the participation deadline was met and before the voting deadline expires.\r\n* As soon as voting is over, the contest may be closed, resultig in the distribution od the prizes.\r\n* The referee may disable certain participants, if their content is inappropiate. \r\n*\r\n* Copyright (c) 2016 Jam Data, Julia Altenried\r\n* */\r\npragma solidity ^0.4.7;\r\ncontract Contest {\r\n/** An ID derived from the contest meta data, so users can verify which contract belongs to which contest **/\r\nuint public id;\r\n/** The contest creator**/\r\naddress owner;\r\n/** The referee deciding if content is appropiate **/\r\naddress public referee;\r\n/** The providers address **/\r\naddress public c4c;\r\n/** List of all participants **/\r\naddress[] public participants;\r\n/** List of all voters **/\r\naddress[] public voters;\r\n/** List of the winning participants */\r\naddress[] public winners;\r\n/** List of the voters that won a prize */\r\naddress[] public luckyVoters;\r\n/** The sum of the prizes paid out */\r\nuint public totalPrize;\r\n/** to efficiently check if somebody already participated **/\r\nmapping(address=>bool) public participated;\r\n/** to efficiently check if somebody already voted **/\r\nmapping(address=>bool) public voted;\r\n/** number of votes per candidate (think about it, maybe itâ€™s better to count afterwards) **/\r\nmapping(address=>uint) public numVotes;\r\n/** disqualified participants**/\r\nmapping(address => bool) public disqualified;\r\n/** timestamp of the participation deadline**/\r\nuint public deadlineParticipation;\r\n/** timestamp of the voting deadline**/\r\nuint public deadlineVoting;\r\n/** participation fee **/\r\nuint128 public participationFee;\r\n/** voting fee**/\r\nuint128 public votingFee;\r\n/** provider fee **/\r\nuint16 public c4cfee;\r\n/** prize distribution **/\r\nuint16 public prizeOwner;\r\nuint16 public prizeReferee;\r\nuint16[] public prizeWinners;\r\n//rest for voters, how many?\r\nuint8 public nLuckyVoters;\r\n\r\n/** fired when contest is closed **/\r\nevent ContestClosed(uint prize, address[] winners, address[] votingWinners);\r\n\r\n/** sets owner, referee, c4c, prizes (in percent with two decimals), deadlines **/\r\nfunction Contest() payable{\r\nc4c = 0x87b0de512502f3e86fd22654b72a640c8e0f59cc;\r\nc4cfee = 1000;\r\nowner = msg.sender;\r\n\r\ndeadlineParticipation=1488344100;\r\ndeadlineVoting=1489640100;\r\nparticipationFee=200000000000000000;\r\nvotingFee=10000000000000000;\r\nprizeOwner=4500;\r\nprizeReferee=0;\r\nprizeWinners.push(5000);\r\nnLuckyVoters=1;\r\n\r\n\r\nuint16 sumPrizes = prizeOwner;\r\nfor(uint i = 0; i < prizeWinners.length; i++) {\r\nsumPrizes += prizeWinners[i];\r\n}\r\nif(sumPrizes>10000) \r\nthrow;\r\nelse if(sumPrizes < 10000 && nLuckyVoters == 0)//make sure everything is paid out\r\nthrow;\r\n}\r\n\r\n/**\r\n* adds msg.sender to the list of participants if the deadline was not yet met and the participation fee is paid\r\n* */\r\nfunction participate() payable {\r\nif(msg.value < participationFee)\r\nthrow;\r\nelse if (now >= deadlineParticipation) \r\nthrow;\r\nelse if (participated[msg.sender])\r\nthrow;\r\nelse if (msg.sender!=tx.origin) //contract could decline money sending or have an expensive fallback function, only wallets should be able to participate\r\nthrow;\r\nelse {\r\nparticipants.push(msg.sender);\r\nparticipated[msg.sender]=true;\r\n//if the winners list is smaller than the prize list, push the candidate\r\nif(winners.length < prizeWinners.length) winners.push(msg.sender);\r\n} \r\n}\r\n\r\n/**\r\n* adds msg.sender to the voter list and updates vote related mappings if msg.value is enough, the vote is done between the deadlines and the voter didn't vote already\r\n*/\r\nfunction vote(address candidate) payable{\r\nif(msg.value < votingFee) \r\nthrow;\r\nelse if(now < deadlineParticipation || now >=deadlineVoting)\r\nthrow;\r\nelse if(voted[msg.sender])//voter did already vote\r\nthrow;\r\nelse if (msg.sender!=tx.origin) //contract could decline money sending or have an expensive fallback function, only wallets should be able to vote\r\nthrow;\r\nelse if(!participated[candidate]) //only voting for actual participants\r\nthrow;\r\nelse{\r\nvoters.push(msg.sender);\r\nvoted[msg.sender] = true;\r\nnumVotes[candidate]++;\r\n\r\nfor(var i = 0; i < winners.length; i++){//from the first to the last\r\nif(winners[i]==candidate) break;//the candidate remains on the same position\r\nif(numVotes[candidate]>numVotes[winners[i]]){//candidate is better\r\n//else, usually winners[i+1]==candidate, because usually a candidate just improves by one ranking\r\n//however, if there are multiple candidates with the same amount of votes, it might be otherwise\r\nfor(var j = getCandidatePosition(candidate, i+1); j>i; j--){\r\nwinners[j]=winners[j-1]; \r\n}\r\nwinners[i]=candidate;\r\nbreak;\r\n}\r\n}\r\n}\r\n}\r\n\r\nfunction getCandidatePosition(address candidate, uint startindex) internal returns (uint){\r\nfor(uint i = startindex; i < winners.length; i++){\r\nif(winners[i]==candidate) return i;\r\n}\r\nreturn winners.length-1;\r\n}\r\n\r\n/**\r\n* only called by referee, does not delete the participant from the list, but keeps him from winning (because of inappropiate content), only in contract if a referee exists\r\n* */\r\nfunction disqualify(address candidate){\r\nif(msg.sender==referee)\r\ndisqualified[candidate]=true;\r\n}\r\n\r\n/**\r\n* only callable by referee. in case he disqualified the wrong participant\r\n* */\r\nfunction requalify(address candidate){\r\nif(msg.sender==referee)\r\ndisqualified[candidate]=false;\r\n}\r\n\r\n/**\r\n* only callable after voting deadline, distributes the prizes, fires event?\r\n* */\r\nfunction close(){\r\n// if voting already ended and the contract has not been closed yet\r\nif(now>=deadlineVoting&&totalPrize==0){\r\ndetermineLuckyVoters();\r\nif(this.balance>10000) distributePrizes(); //more than 10000 wei so every party gets at least 1 wei (if s.b. gets 0.01%)\r\nContestClosed(totalPrize, winners, luckyVoters);\r\n}\r\n}\r\n\r\n/**\r\n* Determines the winning voters\r\n* */\r\nfunction determineLuckyVoters() constant {\r\nif(nLuckyVoters>=voters.length)\r\nluckyVoters = voters;\r\nelse{\r\nmapping (uint => bool) chosen;\r\nuint nonce=1;\r\n\r\nuint rand;\r\nfor(uint i = 0; i < nLuckyVoters; i++){\r\ndo{\r\nrand = randomNumberGen(nonce, voters.length);\r\nnonce++;\r\n}while (chosen[rand]);\r\n\r\nchosen[rand] = true;\r\nluckyVoters.push(voters[rand]);\r\n}\r\n}\r\n}\r\n\r\n/**\r\n* creates a random number in [0,range)\r\n* */\r\nfunction randomNumberGen(uint nonce, uint range) internal constant returns(uint){\r\nreturn uint(block.blockhash(block.number-nonce))%range;\r\n}\r\n\r\n/**\r\n* distribites the contract balance amongst the creator, wthe winners, the lucky voters, the referee and the provider\r\n* */\r\nfunction distributePrizes() internal{\r\n\r\nif(!c4c.send(this.balance/10000*c4cfee)) throw;\r\ntotalPrize = this.balance;\r\nif(prizeOwner!=0 && !owner.send(totalPrize/10000*prizeOwner)) throw;\r\nif(prizeReferee!=0 && !referee.send(totalPrize/10000*prizeReferee)) throw;\r\nfor (uint8 i = 0; i < winners.length; i++)\r\nif(prizeWinners[i]!=0 && !winners[i].send(totalPrize/10000*prizeWinners[i])) throw;\r\nif (luckyVoters.length>0){//if anybody voted\r\nif(this.balance>luckyVoters.length){//if there is ether left to be distributed amongst the lucky voters\r\nuint amount = this.balance/luckyVoters.length;\r\nfor(uint8 j = 0; j < luckyVoters.length; j++)\r\nif(!luckyVoters[j].send(amount)) throw;\r\n}\r\n}\r\nelse if(!owner.send(this.balance)) throw;//if there is no lucky voter, give remainder to the owner\r\n}\r\n\r\n/**\r\n* returns the total vote count\r\n* */\r\nfunction getTotalVotes() constant returns(uint){\r\nreturn voters.length;\r\n}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"deadlineVoting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"c4c\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prizeWinners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizeReferee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"participationFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"numVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"c4cfee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"voted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"participated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nLuckyVoters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadlineParticipation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"determineLuckyVoters\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"participate\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votingFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"luckyVoters\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"requalify\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"disqualify\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"disqualified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winners\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"votingWinners\",\"type\":\"address[]\"}],\"name\":\"ContestClosed\",\"type\":\"event\"}]","ContractName":"Contest","CompilerVersion":"v0.4.7+commit.822622cf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://69f727bff8f559005c0b9558d0024736b6cc58bcbcbfda512a2ad12012975334"}]}