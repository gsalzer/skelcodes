{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/*\r\n\r\nENS Trade Factory\r\n========================\r\n\r\nListed names and additional information available at ensnames.com\r\nAuthor: /u/Cintix\r\n*/\r\n\r\n// Interfaces for the various ENS contracts\r\ncontract AbstractENS {\r\n  function setResolver(bytes32 node, address resolver);\r\n}\r\ncontract Resolver {\r\n  function setAddr(bytes32 node, address addr);\r\n}\r\ncontract Deed {\r\n  address public previousOwner;\r\n}\r\ncontract Registrar {\r\n  function transfer(bytes32 _hash, address newOwner);\r\n  function entries(bytes32 _hash) constant returns (uint, Deed, uint, uint, uint);\r\n}\r\n\r\n// The child contract, used to make buying as simple as sending ETH.\r\ncontract SellENS {\r\n  SellENSFactory factory;\r\n  \r\n  function SellENS(){\r\n    // Store the address of the factory (0x34abcc1fdedb49c953445c11a71e428d719ba8d9)\r\n    factory = SellENSFactory(msg.sender);\r\n  }\r\n  \r\n  function () payable {\r\n    // Delegate the work back to the factory to save space on the blockchain.\r\n    // This saves on gas when creating sell contracts.\r\n    // Could be replaced with a delegatecall to a library, but that\r\n    // would require a second contract deployment and added complexity.\r\n    factory.transfer(msg.value);\r\n    factory.sell_label(msg.sender, msg.value);\r\n  }\r\n}\r\n\r\n// The factory which produces the seller child contracts.\r\ncontract SellENSFactory {\r\n  // Store the relevant information for each child contract.\r\n  struct SellENSInfo {\r\n    string label;\r\n    uint price;\r\n    address owner;\r\n  }\r\n  mapping (address => SellENSInfo) public get_info;\r\n  \r\n  // The developer address, used for seller fees.\r\n  address developer = 0x4e6A1c57CdBfd97e8efe831f8f4418b1F2A09e6e;\r\n  // The Ethereum Name Service primary contract.\r\n  AbstractENS ens = AbstractENS(0x314159265dD8dbb310642f98f50C066173C1259b);\r\n  // The Ethereum Name Service Registrar contract.\r\n  Registrar registrar = Registrar(0x6090A6e47849629b7245Dfa1Ca21D94cd15878Ef);\r\n  // The Ethereum Name Service Public Resolver contract.\r\n  Resolver resolver = Resolver(0x1da022710dF5002339274AaDEe8D58218e9D6AB5);\r\n  // The hash of \".eth\" under which all top level names are registered.\r\n  bytes32 root_node = 0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\r\n  \r\n  // Events used to help track sales.\r\n  event SellENSCreated(SellENS sell_ens);\r\n  event LabelSold(SellENS sell_ens);\r\n  \r\n  // Called by name sellers to make a new seller child contract.\r\n  function createSellENS(string label, uint price) {\r\n    SellENS sell_ens = new SellENS();\r\n    // Store the seller's address so they can get paid when the name sells.\r\n    get_info[sell_ens] = SellENSInfo(label, price, msg.sender);\r\n    SellENSCreated(sell_ens);\r\n  }\r\n  \r\n  // Called only by seller child contracts when a name is purchased.\r\n  function sell_label(address buyer, uint amount_paid){\r\n    SellENS sell_ens = SellENS(msg.sender);\r\n    // Verify the sender is a child contract.\r\n    if (get_info[sell_ens].owner == 0x0) throw;\r\n    \r\n    string label = get_info[sell_ens].label;\r\n    uint price = get_info[sell_ens].price;\r\n    address owner = get_info[sell_ens].owner;\r\n    \r\n    // Calculate the hash of the name being bought.\r\n    bytes32 label_hash = sha3(label);\r\n    // Retrieve the name's deed.\r\n    Deed deed;\r\n    (,deed,,,) = registrar.entries(label_hash);\r\n    // Verify the deed's previous owner matches the seller.\r\n    if (deed.previousOwner() != owner) throw;\r\n    // Calculate the hash of the full name (i.e. rumours.eth).\r\n    bytes32 node = sha3(root_node, label_hash);\r\n    // Set the name's resolver to the public resolver.\r\n    ens.setResolver(node, resolver);\r\n    // Configure the resolver to direct payments sent to the name to the buyer.\r\n    resolver.setAddr(node, buyer);\r\n    // Transfer the name's deed to the buyer.\r\n    registrar.transfer(label_hash, buyer);\r\n\r\n    // Dev fee of 5%\r\n    uint fee = price / 20;\r\n    // The seller pays nothing to unlist and get their name back.\r\n    if (buyer == owner) {\r\n      price = 0;\r\n      fee = 0;\r\n    }\r\n    // 5% to the dev\r\n    developer.transfer(fee);\r\n    // 95% to the seller\r\n    owner.transfer(price - fee);\r\n    // Any extra past the sale price is returned to the buyer.\r\n    if (amount_paid > price) {\r\n      buyer.transfer(amount_paid - price);\r\n    }\r\n    LabelSold(sell_ens);\r\n  }\r\n  \r\n  // The factory must be payable to receive funds from its child contracts.\r\n  function () payable {}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"amount_paid\",\"type\":\"uint256\"}],\"name\":\"sell_label\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"get_info\",\"outputs\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"createSellENS\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sell_ens\",\"type\":\"address\"}],\"name\":\"SellENSCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sell_ens\",\"type\":\"address\"}],\"name\":\"LabelSold\",\"type\":\"event\"}]","ContractName":"SellENSFactory","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3613f8188b1b1b97fac009ffdd40f19582cfb89ac6e895279ace439df45adeba"}]}