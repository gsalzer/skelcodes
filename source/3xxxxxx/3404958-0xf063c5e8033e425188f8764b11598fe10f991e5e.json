{"status":"1","message":"OK","result":[{"SourceCode":"contract StandardTokenProtocol {\r\n\r\n    function totalSupply() constant returns (uint256 totalSupply) {}\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n    function transfer(address _recipient, uint256 _value) returns (bool success) {}\r\n    function transferFrom(address _from, address _recipient, uint256 _value) returns (bool success) {}\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _recipient, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\n\r\ncontract StandardToken is StandardTokenProtocol {\r\n\r\n    modifier when_can_transfer(address _from, uint256 _value) {\r\n        if (balances[_from] >= _value) _;\r\n    }\r\n\r\n    modifier when_can_receive(address _recipient, uint256 _value) {\r\n        if (balances[_recipient] + _value > balances[_recipient]) _;\r\n    }\r\n\r\n    modifier when_is_allowed(address _from, address _delegate, uint256 _value) {\r\n        if (allowed[_from][_delegate] >= _value) _;\r\n    }\r\n\r\n    function transfer(address _recipient, uint256 _value)\r\n        when_can_transfer(msg.sender, _value)\r\n        when_can_receive(_recipient, _value)\r\n        returns (bool o_success)\r\n    {\r\n        balances[msg.sender] -= _value;\r\n        balances[_recipient] += _value;\r\n        Transfer(msg.sender, _recipient, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _recipient, uint256 _value)\r\n        when_can_transfer(_from, _value)\r\n        when_can_receive(_recipient, _value)\r\n        when_is_allowed(_from, msg.sender, _value)\r\n        returns (bool o_success)\r\n    {\r\n        allowed[_from][msg.sender] -= _value;\r\n        balances[_from] -= _value;\r\n        balances[_recipient] += _value;\r\n        Transfer(_from, _recipient, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool o_success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 o_remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n\r\n}\r\n\r\ncontract GUPToken is StandardToken {\r\n\r\n  //FIELDS\r\n  //CONSTANTS\r\n  uint public constant LOCKOUT_PERIOD = 1 years; //time after end date that illiquid GUP can be transferred\r\n\r\n  //ASSIGNED IN INITIALIZATION\r\n  uint public endMintingTime; //Time in seconds no more tokens can be created\r\n  address public minter; //address of the account which may mint new tokens\r\n\r\n  mapping (address => uint) public illiquidBalance; //Balance of 'Frozen funds'\r\n\r\n  //MODIFIERS\r\n  //Can only be called by contribution contract.\r\n  modifier only_minter {\r\n    if (msg.sender != minter) throw;\r\n    _;\r\n  }\r\n\r\n  // Can only be called if illiquid tokens may be transformed into liquid.\r\n  // This happens when `LOCKOUT_PERIOD` of time passes after `endMintingTime`.\r\n  modifier when_thawable {\r\n    if (now < endMintingTime + LOCKOUT_PERIOD) throw;\r\n    _;\r\n  }\r\n\r\n  // Can only be called if (liquid) tokens may be transferred. Happens\r\n  // immediately after `endMintingTime`.\r\n  modifier when_transferable {\r\n    if (now < endMintingTime) throw;\r\n    _;\r\n  }\r\n\r\n  // Can only be called if the `crowdfunder` is allowed to mint tokens. Any\r\n  // time before `endMintingTime`.\r\n  modifier when_mintable {\r\n    if (now >= endMintingTime) throw;\r\n    _;\r\n  }\r\n\r\n  // Initialization contract assigns address of crowdfund contract and end time.\r\n  function GUPToken(address _minter, uint _endMintingTime) {\r\n    endMintingTime = _endMintingTime;\r\n    minter = _minter;\r\n  }\r\n\r\n  // Fallback function throws when called.\r\n  function() {\r\n    throw;\r\n  }\r\n\r\n  // Create new tokens when called by the crowdfund contract.\r\n  // Only callable before the end time.\r\n  function createToken(address _recipient, uint _value)\r\n    when_mintable\r\n    only_minter\r\n    returns (bool o_success)\r\n  {\r\n    balances[_recipient] += _value;\r\n    totalSupply += _value;\r\n    return true;\r\n  }\r\n\r\n  // Create an illiquidBalance which cannot be traded until end of lockout period.\r\n  // Can only be called by crowdfund contract befor the end time.\r\n  function createIlliquidToken(address _recipient, uint _value)\r\n    when_mintable\r\n    only_minter\r\n    returns (bool o_success)\r\n  {\r\n    illiquidBalance[_recipient] += _value;\r\n    totalSupply += _value;\r\n    return true;\r\n  }\r\n\r\n  // Make sender's illiquid balance liquid when called after lockout period.\r\n  function makeLiquid()\r\n    when_thawable\r\n    returns (bool o_success)\r\n  {\r\n    balances[msg.sender] += illiquidBalance[msg.sender];\r\n    illiquidBalance[msg.sender] = 0;\r\n    return true;\r\n  }\r\n\r\n  // Transfer amount of tokens from sender account to recipient.\r\n  // Only callable after the crowd fund end date.\r\n  function transfer(address _recipient, uint _amount)\r\n    when_transferable\r\n    returns (bool o_success)\r\n  {\r\n    return super.transfer(_recipient, _amount);\r\n  }\r\n\r\n  // Transfer amount of tokens from a specified address to a recipient.\r\n  // Only callable after the crowd fund end date.\r\n  function transferFrom(address _from, address _recipient, uint _amount)\r\n    when_transferable\r\n    returns (bool o_success)\r\n  {\r\n    return super.transferFrom(_from, _recipient, _amount);\r\n  }\r\n}\r\n\r\ncontract SafeMath {\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) throw;\r\n  }\r\n\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\ncontract Contribution is SafeMath {\r\n\r\n  //FIELDS\r\n\r\n  //CONSTANTS\r\n  //Time limits\r\n  uint public constant STAGE_ONE_TIME_END = 1 hours;\r\n  uint public constant STAGE_TWO_TIME_END = 3 days;\r\n  uint public constant STAGE_THREE_TIME_END = 2 weeks;\r\n  uint public constant STAGE_FOUR_TIME_END = 4 weeks;\r\n  //Prices of GUP\r\n  uint public constant PRICE_STAGE_ONE = 400000;\r\n  uint public constant PRICE_STAGE_TWO = 366000;\r\n  uint public constant PRICE_STAGE_THREE = 333000;\r\n  uint public constant PRICE_STAGE_FOUR = 300000;\r\n  uint public constant PRICE_BTCS = 400000;\r\n  //GUP Token Limits\r\n  uint public constant MAX_SUPPLY =        100000000000;\r\n  uint public constant ALLOC_ILLIQUID_TEAM = 8000000000;\r\n  uint public constant ALLOC_LIQUID_TEAM =  13000000000;\r\n  uint public constant ALLOC_BOUNTIES =      2000000000;\r\n  uint public constant ALLOC_NEW_USERS =    17000000000;\r\n  uint public constant ALLOC_CROWDSALE =    60000000000;\r\n  uint public constant BTCS_PORTION_MAX = 37500 * PRICE_BTCS;\r\n  //ASSIGNED IN INITIALIZATION\r\n  //Start and end times\r\n  uint public publicStartTime = 1490446800; //Time in seconds public crowd fund starts.\r\n  uint public privateStartTime = 1490432400; //Time in seconds when BTCSuisse can purchase up to 125000 ETH worth of GUP;\r\n  uint public publicEndTime; //Time in seconds crowdsale ends\r\n  //Special Addresses\r\n  address public btcsAddress = 0x00a88EDaA9eAd00A1d114e4820B0B0f2e3651ECE; //Address used by BTCSuisse\r\n  address public multisigAddress = 0x2CAfdC32aC9eC55e915716bC43037Bd2C689512E; //Address to which all ether flows.\r\n  address public matchpoolAddress = 0x00ce633b4789D1a16a0aD3AEC58599B76d5D669E; //Address to which ALLOC_BOUNTIES, ALLOC_LIQUID_TEAM, ALLOC_NEW_USERS, ALLOC_ILLIQUID_TEAM is sent to.\r\n  address public ownerAddress = 0x00ce633b4789D1a16a0aD3AEC58599B76d5D669E; //Address of the contract owner. Can halt the crowdsale.\r\n  //Contracts\r\n  GUPToken public gupToken; //External token contract hollding the GUP\r\n  //Running totals\r\n  uint public etherRaised; //Total Ether raised.\r\n  uint public gupSold; //Total GUP created\r\n  uint public btcsPortionTotal; //Total of Tokens purchased by BTC Suisse. Not to exceed BTCS_PORTION_MAX.\r\n  //booleans\r\n  bool public halted; //halts the crowd sale if true.\r\n\r\n  //FUNCTION MODIFIERS\r\n\r\n  //Is currently in the period after the private start time and before the public start time.\r\n  modifier is_pre_crowdfund_period() {\r\n    if (now >= publicStartTime || now < privateStartTime) throw;\r\n    _;\r\n  }\r\n\r\n  //Is currently the crowdfund period\r\n  modifier is_crowdfund_period() {\r\n    if (now < publicStartTime || now >= publicEndTime) throw;\r\n    _;\r\n  }\r\n\r\n  //May only be called by BTC Suisse\r\n  modifier only_btcs() {\r\n    if (msg.sender != btcsAddress) throw;\r\n    _;\r\n  }\r\n\r\n  //May only be called by the owner address\r\n  modifier only_owner() {\r\n    if (msg.sender != ownerAddress) throw;\r\n    _;\r\n  }\r\n\r\n  //May only be called if the crowdfund has not been halted\r\n  modifier is_not_halted() {\r\n    if (halted) throw;\r\n    _;\r\n  }\r\n\r\n  // EVENTS\r\n\r\n  event PreBuy(uint _amount);\r\n  event Buy(address indexed _recipient, uint _amount);\r\n\r\n\r\n  // FUNCTIONS\r\n\r\n  //Initialization function. Deploys GUPToken contract assigns values, to all remaining fields, creates first entitlements in the GUP Token contract.\r\n  function Contribution() {\r\n    publicEndTime = publicStartTime + STAGE_FOUR_TIME_END;\r\n    gupToken = new GUPToken(this, publicEndTime);\r\n    gupToken.createIlliquidToken(matchpoolAddress, ALLOC_ILLIQUID_TEAM);\r\n    gupToken.createToken(matchpoolAddress, ALLOC_BOUNTIES);\r\n    gupToken.createToken(matchpoolAddress, ALLOC_LIQUID_TEAM);\r\n    gupToken.createToken(matchpoolAddress, ALLOC_NEW_USERS);\r\n  }\r\n\r\n  //May be used by owner of contract to halt crowdsale and no longer except ether.\r\n  function toggleHalt(bool _halted)\r\n    only_owner\r\n  {\r\n    halted = _halted;\r\n  }\r\n\r\n  //constant function returns the current GUP price.\r\n  function getPriceRate()\r\n    constant\r\n    returns (uint o_rate)\r\n  {\r\n    if (now <= publicStartTime + STAGE_ONE_TIME_END) return PRICE_STAGE_ONE;\r\n    if (now <= publicStartTime + STAGE_TWO_TIME_END) return PRICE_STAGE_TWO;\r\n    if (now <= publicStartTime + STAGE_THREE_TIME_END) return PRICE_STAGE_THREE;\r\n    if (now <= publicStartTime + STAGE_FOUR_TIME_END) return PRICE_STAGE_FOUR;\r\n    else return 0;\r\n  }\r\n\r\n  // Given the rate of a purchase and the remaining tokens in this tranche, it\r\n  // will throw if the sale would take it past the limit of the tranche.\r\n  // It executes the purchase for the appropriate amount of tokens, which\r\n  // involves adding it to the total, minting GUP tokens and stashing the\r\n  // ether.\r\n  // Returns `amount` in scope as the number of GUP tokens that it will\r\n  // purchase.\r\n  function processPurchase(uint _rate, uint _remaining)\r\n    internal\r\n    returns (uint o_amount)\r\n  {\r\n    o_amount = safeDiv(safeMul(msg.value, _rate), 1 ether);\r\n    if (o_amount > _remaining) throw;\r\n    if (!multisigAddress.send(msg.value)) throw;\r\n    if (!gupToken.createToken(msg.sender, o_amount)) throw; //change to match create token\r\n    gupSold += o_amount;\r\n  }\r\n\r\n  //Special Function can only be called by BTC Suisse and only during the pre-crowdsale period.\r\n  //Allows the purchase of up to 125000 Ether worth of GUP Tokens.\r\n  function preBuy()\r\n    payable\r\n    is_pre_crowdfund_period\r\n    only_btcs\r\n    is_not_halted\r\n  {\r\n    uint amount = processPurchase(PRICE_BTCS, BTCS_PORTION_MAX - btcsPortionTotal);\r\n    btcsPortionTotal += amount;\r\n    PreBuy(amount);\r\n  }\r\n\r\n  //Default function called by sending Ether to this address with no arguments.\r\n  //Results in creation of new GUP Tokens if transaction would not exceed hard limit of GUP Token.\r\n  function()\r\n    payable\r\n    is_crowdfund_period\r\n    is_not_halted\r\n  {\r\n    uint amount = processPurchase(getPriceRate(), ALLOC_CROWDSALE - gupSold);\r\n    Buy(msg.sender, amount);\r\n  }\r\n\r\n  //failsafe drain\r\n  function drain()\r\n    only_owner\r\n  {\r\n    if (!ownerAddress.send(this.balance)) throw;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_STAGE_TWO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"matchpoolAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOC_NEW_USERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"btcsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE_FOUR_TIME_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOC_LIQUID_TEAM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOC_BOUNTIES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOC_ILLIQUID_TEAM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE_TWO_TIME_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gupSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE_ONE_TIME_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOC_CROWDSALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceRate\",\"outputs\":[{\"name\":\"o_rate\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_halted\",\"type\":\"bool\"}],\"name\":\"toggleHalt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_STAGE_ONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gupToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_STAGE_FOUR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BTCS_PORTION_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_STAGE_THREE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_BTCS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE_THREE_TIME_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"preBuy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"btcsPortionTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PreBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"}]","ContractName":"Contribution","CompilerVersion":"v0.4.10+commit.f0d539ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://48c788e0211db237a93d318bda871277e1f081393fb6a1403eda088de76be5da"}]}