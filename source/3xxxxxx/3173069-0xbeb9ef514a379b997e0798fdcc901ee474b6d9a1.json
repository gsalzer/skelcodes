{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\n/// @title Assertive contract\r\n/// @author Melonport AG <team@melonport.com>\r\n/// @notice Asserts function\r\ncontract Assertive {\r\n\r\n  function assert(bool assertion) internal {\r\n      if (!assertion) throw;\r\n  }\r\n\r\n}\r\n\r\n/// @title Overflow aware uint math functions.\r\n/// @author Melonport AG <team@melonport.com>\r\n/// @notice Inspired by https://github.com/MakerDAO/maker-otc/blob/master/contracts/simple_market.sol\r\ncontract SafeMath is Assertive{\r\n\r\n    function safeMul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/// @title ERC20 Token Protocol\r\n/// @author Melonport AG <team@melonport.com>\r\n/// @notice See https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20Protocol {\r\n\r\n    function totalSupply() constant returns (uint256 totalSupply) {}\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\n/// @title ERC20 Token\r\n/// @author Melonport AG <team@melonport.com>\r\n/// @notice Original taken from https://github.com/ethereum/EIPs/issues/20\r\n/// @notice Checked against integer overflow\r\ncontract ERC20 is ERC20Protocol {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 public totalSupply;\r\n\r\n}\r\n\r\n\r\n/// @title Melon Token Contract\r\n/// @author Melonport AG <team@melonport.com>\r\ncontract MelonToken is ERC20, SafeMath {\r\n\r\n    // FIELDS\r\n\r\n    // Constant token specific fields\r\n    string public constant name = \"Melon Token\";\r\n    string public constant symbol = \"MLN\";\r\n    uint public constant decimals = 18;\r\n    uint public constant THAWING_DURATION = 2 years; // Time needed for iced tokens to thaw into liquid tokens\r\n    uint public constant MAX_TOTAL_TOKEN_AMOUNT_OFFERED_TO_PUBLIC = 1000000 * 10 ** decimals; // Max amount of tokens offered to the public\r\n    uint public constant MAX_TOTAL_TOKEN_AMOUNT = 1250000 * 10 ** decimals; // Max amount of total tokens raised during all contributions (includes stakes of patrons)\r\n\r\n    // Fields that are only changed in constructor\r\n    address public minter; // Contribution contract(s)\r\n    address public melonport; // Can change to other minting contribution contracts but only until total amount of token minted\r\n    uint public startTime; // Contribution start time in seconds\r\n    uint public endTime; // Contribution end time in seconds\r\n\r\n    // Fields that can be changed by functions\r\n    mapping (address => uint) lockedBalances;\r\n\r\n    // MODIFIERS\r\n\r\n    modifier only_minter {\r\n        assert(msg.sender == minter);\r\n        _;\r\n    }\r\n\r\n    modifier only_melonport {\r\n        assert(msg.sender == melonport);\r\n        _;\r\n    }\r\n\r\n    modifier is_later_than(uint x) {\r\n        assert(now > x);\r\n        _;\r\n    }\r\n\r\n    modifier max_total_token_amount_not_reached(uint amount) {\r\n        assert(safeAdd(totalSupply, amount) <= MAX_TOTAL_TOKEN_AMOUNT);\r\n        _;\r\n    }\r\n\r\n    // CONSTANT METHODS\r\n\r\n    function lockedBalanceOf(address _owner) constant returns (uint balance) {\r\n        return lockedBalances[_owner];\r\n    }\r\n\r\n    // METHODS\r\n\r\n    /// Pre: All fields, except { minter, melonport, startTime, endTime } are valid\r\n    /// Post: All fields, including { minter, melonport, startTime, endTime } are valid\r\n    function MelonToken(address setMinter, address setMelonport, uint setStartTime, uint setEndTime) {\r\n        minter = setMinter;\r\n        melonport = setMelonport;\r\n        startTime = setStartTime;\r\n        endTime = setEndTime;\r\n    }\r\n\r\n    /// Pre: Address of contribution contract (minter) is set\r\n    /// Post: Mints token into tradeable tranche\r\n    function mintLiquidToken(address recipient, uint amount)\r\n        external\r\n        only_minter\r\n        max_total_token_amount_not_reached(amount)\r\n    {\r\n        balances[recipient] = safeAdd(balances[recipient], amount);\r\n        totalSupply = safeAdd(totalSupply, amount);\r\n    }\r\n\r\n    /// Pre: Address of contribution contract (minter) is set\r\n    /// Post: Mints Token into iced tranche. Become liquid after completion of the melonproject or two years.\r\n    function mintIcedToken(address recipient, uint amount)\r\n        external\r\n        only_minter\r\n        max_total_token_amount_not_reached(amount)\r\n    {\r\n        lockedBalances[recipient] = safeAdd(lockedBalances[recipient], amount);\r\n        totalSupply = safeAdd(totalSupply, amount);\r\n    }\r\n\r\n    /// Pre: Thawing period has passed - iced funds have turned into liquid ones\r\n    /// Post: All funds available for trade\r\n    function unlockBalance(address recipient)\r\n        is_later_than(endTime + THAWING_DURATION)\r\n    {\r\n        balances[recipient] = safeAdd(balances[recipient], lockedBalances[recipient]);\r\n        lockedBalances[recipient] = 0;\r\n    }\r\n\r\n    /// Pre: Prevent transfers until contribution period is over.\r\n    /// Post: Transfer MLN from msg.sender\r\n    /// Note: ERC20 interface\r\n    function transfer(address recipient, uint amount)\r\n        is_later_than(endTime)\r\n        returns (bool success)\r\n    {\r\n        return super.transfer(recipient, amount);\r\n    }\r\n\r\n    /// Pre: Prevent transfers until contribution period is over.\r\n    /// Post: Transfer MLN from arbitrary address\r\n    /// Note: ERC20 interface\r\n    function transferFrom(address sender, address recipient, uint amount)\r\n        is_later_than(endTime)\r\n        returns (bool success)\r\n    {\r\n        return super.transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    /// Pre: Melonport address is set. Restricted to melonport.\r\n    /// Post: New minter can now create tokens up to MAX_TOTAL_TOKEN_AMOUNT.\r\n    /// Note: This allows additional contribution periods at a later stage, while still using the same ERC20 compliant contract.\r\n    function changeMintingAddress(address newAddress) only_melonport { minter = newAddress; }\r\n\r\n    /// Pre: Melonport address is set. Restricted to melonport.\r\n    /// Post: New address set. This address controls the setting of the minter address\r\n    function changeMelonportAddress(address newAddress) only_melonport { melonport = newAddress; }\r\n}\r\n\r\n\r\n/// @title Contribution Contract\r\n/// @author Melonport AG <team@melonport.com>\r\n/// @notice This follows Condition-Orientated Programming as outlined here:\r\n/// @notice   https://medium.com/@gavofyork/condition-orientated-programming-969f6ba0161a#.saav3bvva\r\ncontract Contribution is SafeMath {\r\n\r\n    // FIELDS\r\n\r\n    // Constant fields\r\n    uint public constant ETHER_CAP = 227000 ether; // Max amount raised during first contribution; targeted amount CHF 2.5MN\r\n    uint public constant MAX_CONTRIBUTION_DURATION = 4 weeks; // Max amount in seconds of contribution period\r\n    uint public constant BTCS_ETHER_CAP = ETHER_CAP * 25 / 100; // Max melon token allocation for btcs before contribution period starts\r\n    // Price Rates\r\n    uint public constant PRICE_RATE_FIRST = 2200; // Four price tiers, each valid for two weeks\r\n    uint public constant PRICE_RATE_SECOND = 2150;\r\n    uint public constant PRICE_RATE_THIRD = 2100;\r\n    uint public constant PRICE_RATE_FOURTH = 2050;\r\n    uint public constant DIVISOR_PRICE = 1000; // Price rates are divided by this number\r\n    // Addresses of Patrons\r\n    address public constant FOUNDER_ONE = 0x009beAE06B0c0C536ad1eA43D6f61DCCf0748B1f;\r\n    address public constant FOUNDER_TWO = 0xB1EFca62C555b49E67363B48aE5b8Af3C7E3e656;\r\n    address public constant EXT_COMPANY_ONE = 0x00779e0e4c6083cfd26dE77B4dbc107A7EbB99d2;\r\n    address public constant EXT_COMPANY_TWO = 0x1F06B976136e94704D328D4d23aae7259AaC12a2;\r\n    address public constant EXT_COMPANY_THREE = 0xDD91615Ea8De94bC48231c4ae9488891F1648dc5;\r\n    address public constant ADVISOR_ONE = 0x0001126FC94AE0be2B685b8dE434a99B2552AAc3;\r\n    address public constant ADVISOR_TWO = 0x4f2AF8d2614190Cc80c6E9772B0C367db8D9753C;\r\n    address public constant ADVISOR_THREE = 0x715a70a7c7d76acc8d5874862e381c1940c19cce;\r\n    address public constant ADVISOR_FOUR = 0x8615F13C12c24DFdca0ba32511E2861BE02b93b2;\r\n    address public constant AMBASSADOR_ONE = 0xd3841FB80CE408ca7d0b41D72aA91CA74652AF47;\r\n    address public constant AMBASSADOR_TWO = 0xDb775577538018a689E4Ad2e8eb5a7Ae7c34722B;\r\n    address public constant AMBASSADOR_THREE = 0xaa967e0ce6A1Ff5F9c124D15AD0412F137C99767;\r\n    address public constant AMBASSADOR_FOUR = 0x910B41a6568a645437bC286A5C733f3c501d8c88;\r\n    address public constant AMBASSADOR_FIVE = 0xb1d16BFE840E66E3c81785551832aAACB4cf69f3;\r\n    address public constant AMBASSADOR_SIX = 0x5F6ff16364BfEf546270325695B6e90cc89C497a;\r\n    address public constant AMBASSADOR_SEVEN = 0x58656e8872B0d266c2acCD276cD23F4C0B5fEfb9;\r\n    address public constant SPECIALIST_ONE = 0x8a815e818E617d1f93BE7477D179258aC2d25310;\r\n    address public constant SPECIALIST_TWO = 0x1eba6702ba21cfc1f6c87c726364b60a5e444901;\r\n    address public constant SPECIALIST_THREE = 0x82eae6c30ed9606e2b389ae65395648748c6a17f;\r\n    // Stakes of Patrons\r\n    uint public constant MELONPORT_COMPANY_STAKE = 1000; // 10% of all created melon token allocated to melonport company\r\n    uint public constant FOUNDER_STAKE = 445; // 4.45% of all created melon token allocated to founder\r\n    uint public constant EXT_COMPANY_STAKE_ONE = 150; // 1.5% of all created melon token allocated to external company\r\n    uint public constant EXT_COMPANY_STAKE_TWO = 100; // 1% of all created melon token allocated to external company\r\n    uint public constant EXT_COMPANY_STAKE_THREE = 50; // 0.5% of all created melon token allocated to external company\r\n    uint public constant ADVISOR_STAKE_ONE = 150; // 1.5% of all created melon token allocated to advisor\r\n    uint public constant ADVISOR_STAKE_TWO = 50; // 0.5% of all created melon token allocated to advisor\r\n    uint public constant ADVISOR_STAKE_THREE = 25; // 0.25% of all created melon token allocated to advisor\r\n    uint public constant ADVISOR_STAKE_FOUR = 10; // 0.1% of all created melon token allocated to advisor\r\n    uint public constant AMBASSADOR_STAKE = 5; // 0.05% of all created melon token allocated to ambassadors\r\n    uint public constant SPECIALIST_STAKE_ONE = 25; // 0.25% of all created melon token allocated to specialist\r\n    uint public constant SPECIALIST_STAKE_TWO = 10; // 0.1% of all created melon token allocated to specialist\r\n    uint public constant SPECIALIST_STAKE_THREE = 5; // 0.05% of all created melon token allocated to specialist\r\n    uint public constant DIVISOR_STAKE = 10000; // Stakes are divided by this number; Results to one basis point\r\n\r\n    // Fields that are only changed in constructor\r\n    address public melonport; // All deposited ETH will be instantly forwarded to this address.\r\n    address public btcs; // Bitcoin Suisse address for their allocation option\r\n    address public signer; // Signer address as on https://contribution.melonport.com\r\n    uint public startTime; // Contribution start time in seconds\r\n    uint public endTime; // Contribution end time in seconds\r\n    MelonToken public melonToken; // Contract of the ERC20 compliant melon token\r\n\r\n    // Fields that can be changed by functions\r\n    uint public etherRaised; // This will keep track of the Ether raised during the contribution\r\n    bool public halted; // The melonport address can set this to true to halt the contribution due to an emergency\r\n\r\n    // EVENTS\r\n\r\n    event TokensBought(address indexed sender, uint eth, uint amount);\r\n\r\n    // MODIFIERS\r\n\r\n    modifier is_signer_signature(uint8 v, bytes32 r, bytes32 s) {\r\n        bytes32 hash = sha256(msg.sender);\r\n        assert(ecrecover(hash, v, r, s) == signer);\r\n        _;\r\n    }\r\n\r\n    modifier only_melonport {\r\n        assert(msg.sender == melonport);\r\n        _;\r\n    }\r\n\r\n    modifier only_btcs {\r\n        assert(msg.sender == btcs);\r\n        _;\r\n    }\r\n\r\n    modifier is_not_halted {\r\n        assert(!halted);\r\n        _;\r\n    }\r\n\r\n    modifier ether_cap_not_reached {\r\n        assert(safeAdd(etherRaised, msg.value) <= ETHER_CAP);\r\n        _;\r\n    }\r\n\r\n    modifier btcs_ether_cap_not_reached {\r\n        assert(safeAdd(etherRaised, msg.value) <= BTCS_ETHER_CAP);\r\n        _;\r\n    }\r\n\r\n    modifier is_not_earlier_than(uint x) {\r\n        assert(now >= x);\r\n        _;\r\n    }\r\n\r\n    modifier is_earlier_than(uint x) {\r\n        assert(now < x);\r\n        _;\r\n    }\r\n\r\n    // CONSTANT METHODS\r\n\r\n    /// Pre: startTime, endTime specified in constructor,\r\n    /// Post: Price rate at given blockTime; One ether equals priceRate() / DIVISOR_PRICE of melon tokens\r\n    function priceRate() constant returns (uint) {\r\n        // Four price tiers\r\n        if (startTime <= now && now < startTime + 1 weeks)\r\n            return PRICE_RATE_FIRST;\r\n        if (startTime + 1 weeks <= now && now < startTime + 2 weeks)\r\n            return PRICE_RATE_SECOND;\r\n        if (startTime + 2 weeks <= now && now < startTime + 3 weeks)\r\n            return PRICE_RATE_THIRD;\r\n        if (startTime + 3 weeks <= now && now < endTime)\r\n            return PRICE_RATE_FOURTH;\r\n        // Should not be called before or after contribution period\r\n        assert(false);\r\n    }\r\n\r\n    // NON-CONSTANT METHODS\r\n\r\n    /// Pre: All fields, except { melonport, btcs, signer, startTime } are valid\r\n    /// Post: All fields, including { melonport, btcs, signer, startTime } are valid\r\n    function Contribution(address setMelonport, address setBTCS, address setSigner, uint setStartTime) {\r\n        melonport = setMelonport;\r\n        btcs = setBTCS;\r\n        signer = setSigner;\r\n        startTime = setStartTime;\r\n        endTime = startTime + MAX_CONTRIBUTION_DURATION;\r\n        melonToken = new MelonToken(this, melonport, startTime, endTime); // Create Melon Token Contract\r\n        var maxTotalTokenAmountOfferedToPublic = melonToken.MAX_TOTAL_TOKEN_AMOUNT_OFFERED_TO_PUBLIC();\r\n        uint stakeMultiplier = maxTotalTokenAmountOfferedToPublic / DIVISOR_STAKE;\r\n        // Mint liquid tokens for melonport company, liquid means tradeale\r\n        melonToken.mintLiquidToken(melonport,       MELONPORT_COMPANY_STAKE * stakeMultiplier);\r\n        // Mint iced tokens that are unable to trade for two years and allocate according to relevant stakes\r\n        melonToken.mintIcedToken(FOUNDER_ONE,       FOUNDER_STAKE *           stakeMultiplier);\r\n        melonToken.mintIcedToken(FOUNDER_TWO,       FOUNDER_STAKE *           stakeMultiplier);\r\n        melonToken.mintIcedToken(EXT_COMPANY_ONE,   EXT_COMPANY_STAKE_ONE *   stakeMultiplier);\r\n        melonToken.mintIcedToken(EXT_COMPANY_TWO,   EXT_COMPANY_STAKE_TWO *   stakeMultiplier);\r\n        melonToken.mintIcedToken(EXT_COMPANY_THREE, EXT_COMPANY_STAKE_THREE * stakeMultiplier);\r\n        melonToken.mintIcedToken(ADVISOR_ONE,       ADVISOR_STAKE_ONE *       stakeMultiplier);\r\n        melonToken.mintIcedToken(ADVISOR_TWO,       ADVISOR_STAKE_TWO *       stakeMultiplier);\r\n        melonToken.mintIcedToken(ADVISOR_THREE,     ADVISOR_STAKE_THREE *     stakeMultiplier);\r\n        melonToken.mintIcedToken(ADVISOR_FOUR,      ADVISOR_STAKE_FOUR *      stakeMultiplier);\r\n        melonToken.mintIcedToken(AMBASSADOR_ONE,    AMBASSADOR_STAKE *        stakeMultiplier);\r\n        melonToken.mintIcedToken(AMBASSADOR_TWO,    AMBASSADOR_STAKE *        stakeMultiplier);\r\n        melonToken.mintIcedToken(AMBASSADOR_THREE,  AMBASSADOR_STAKE *        stakeMultiplier);\r\n        melonToken.mintIcedToken(AMBASSADOR_FOUR,   AMBASSADOR_STAKE *        stakeMultiplier);\r\n        melonToken.mintIcedToken(AMBASSADOR_FIVE,   AMBASSADOR_STAKE *        stakeMultiplier);\r\n        melonToken.mintIcedToken(AMBASSADOR_SIX,    AMBASSADOR_STAKE *        stakeMultiplier);\r\n        melonToken.mintIcedToken(AMBASSADOR_SEVEN,  AMBASSADOR_STAKE *        stakeMultiplier);\r\n        melonToken.mintIcedToken(SPECIALIST_ONE,    SPECIALIST_STAKE_ONE *    stakeMultiplier);\r\n        melonToken.mintIcedToken(SPECIALIST_TWO,    SPECIALIST_STAKE_TWO *    stakeMultiplier);\r\n        melonToken.mintIcedToken(SPECIALIST_THREE,  SPECIALIST_STAKE_THREE *  stakeMultiplier);\r\n    }\r\n\r\n    /// Pre: Valid signature received from https://contribution.melonport.com\r\n    /// Post: Bought melon tokens according to priceRate() and msg.value\r\n    function buy(uint8 v, bytes32 r, bytes32 s) payable { buyRecipient(msg.sender, v, r, s); }\r\n\r\n    /// Pre: Valid signature received from https://contribution.melonport.com\r\n    /// Post: Bought melon tokens according to priceRate() and msg.value on behalf of recipient\r\n    function buyRecipient(address recipient, uint8 v, bytes32 r, bytes32 s)\r\n        payable\r\n        is_signer_signature(v, r, s)\r\n        is_not_earlier_than(startTime)\r\n        is_earlier_than(endTime)\r\n        is_not_halted\r\n        ether_cap_not_reached\r\n    {\r\n        uint amount = safeMul(msg.value, priceRate()) / DIVISOR_PRICE;\r\n        melonToken.mintLiquidToken(recipient, amount);\r\n        etherRaised = safeAdd(etherRaised, msg.value);\r\n        assert(melonport.send(msg.value));\r\n        TokensBought(recipient, msg.value, amount);\r\n    }\r\n\r\n    /// Pre: BTCS before contribution period, BTCS has exclusive right to buy up to 25% of all melon tokens\r\n    /// Post: Bought melon tokens according to PRICE_RATE_FIRST and msg.value on behalf of recipient\r\n    function btcsBuyRecipient(address recipient)\r\n        payable\r\n        only_btcs\r\n        is_earlier_than(startTime)\r\n        is_not_halted\r\n        btcs_ether_cap_not_reached\r\n    {\r\n        uint amount = safeMul(msg.value, PRICE_RATE_FIRST) / DIVISOR_PRICE;\r\n        melonToken.mintLiquidToken(recipient, amount);\r\n        etherRaised = safeAdd(etherRaised, msg.value);\r\n        assert(melonport.send(msg.value));\r\n        TokensBought(recipient, msg.value, amount);\r\n    }\r\n\r\n    /// Pre: Emergency situation that requires contribution period to stop.\r\n    /// Post: Contributing not possible anymore.\r\n    function halt() only_melonport { halted = true; }\r\n\r\n    /// Pre: Emergency situation resolved.\r\n    /// Post: Contributing becomes possible again withing the outlined restrictions.\r\n    function unhalt() only_melonport { halted = false; }\r\n\r\n    /// Pre: Restricted to melonport.\r\n    /// Post: New address set. To halt contribution and/or change minter in MelonToken contract.\r\n    function changeMelonportAddress(address newAddress) only_melonport { melonport = newAddress; }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeMelonportAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TOTAL_TOKEN_AMOUNT_OFFERED_TO_PUBLIC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeMintingAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintIcedToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintLiquidToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TOTAL_TOKEN_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unlockBalance\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"melonport\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"THAWING_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"setMinter\",\"type\":\"address\"},{\"name\":\"setMelonport\",\"type\":\"address\"},{\"name\":\"setStartTime\",\"type\":\"uint256\"},{\"name\":\"setEndTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MelonToken","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003bf541f87056d134e0109be1be92978b26cb09e000000000000000000000000000ec6379d7186193983e90ba58d3cf169f7e4af30000000000000000000000000000000000000000000000000000000058a434b00000000000000000000000000000000000000000000000000000000058c91eb0","Library":"","SwarmSource":"bzzr://31ad327722684ad0754a3abefefa220e61d836c0a4f14bcb989ebd3a29f86d25"}]}