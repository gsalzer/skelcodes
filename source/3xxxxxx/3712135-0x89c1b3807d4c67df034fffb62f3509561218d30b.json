{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.9;\r\n\r\ncontract TownCrier {\r\n    struct Request { // the data structure for each request\r\n        address requester; // the address of the requester\r\n        uint fee; // the amount of wei the requester pays for the request\r\n        address callbackAddr; // the address of the contract to call for delivering response\r\n        bytes4 callbackFID; // the specification of the callback function\r\n        bytes32 paramsHash; // the hash of the request parameters\r\n    }\r\n   \r\n    event Upgrade(address newAddr);\r\n    event Reset(uint gas_price, uint min_fee, uint cancellation_fee); \r\n    event RequestInfo(uint64 id, uint8 requestType, address requester, uint fee, address callbackAddr, bytes32 paramsHash, uint timestamp, bytes32[] requestData); // log of requests, the Town Crier server watches this event and processes requests\r\n    event DeliverInfo(uint64 requestId, uint fee, uint gasPrice, uint gasLeft, uint callbackGas, bytes32 paramsHash, uint64 error, bytes32 respData); // log of responses\r\n    event Cancel(uint64 requestId, address canceller, address requester, uint fee, int flag); // log of cancellations\r\n\r\n    address public constant SGX_ADDRESS = 0x18513702cCd928F2A3eb63d900aDf03c9cc81593;// address of the SGX account\r\n\r\n    uint public GAS_PRICE = 5 * 10**10;\r\n    uint public MIN_FEE = 30000 * GAS_PRICE; // minimum fee required for the requester to pay such that SGX could call deliver() to send a response\r\n    uint public CANCELLATION_FEE = 25000 * GAS_PRICE; // charged when the requester cancels a request that is not responded\r\n\r\n    uint public constant CANCELLED_FEE_FLAG = 1;\r\n    uint public constant DELIVERED_FEE_FLAG = 0;\r\n    int public constant FAIL_FLAG = -2 ** 250;\r\n    int public constant SUCCESS_FLAG = 1;\r\n\r\n    bool public killswitch;\r\n\r\n    bool public externalCallFlag;\r\n\r\n    uint64 public requestCnt;\r\n    uint64 public unrespondedCnt;\r\n    Request[2**64] public requests;\r\n\r\n    int public newVersion = 0;\r\n\r\n    // Contracts that receive Ether but do not define a fallback function throw\r\n    // an exception, sending back the Ether (this was different before Solidity\r\n    // v0.4.0). So if you want your contract to receive Ether, you have to\r\n    // implement a fallback function.\r\n    function () {}\r\n\r\n    function TownCrier() public {\r\n        // Start request IDs at 1 for two reasons:\r\n        //   1. We can use 0 to denote an invalid request (ids are unsigned)\r\n        //   2. Storage is more expensive when changing something from zero to non-zero,\r\n        //      so this means the first request isn't randomly more expensive.\r\n        requestCnt = 1;\r\n        requests[0].requester = msg.sender;\r\n        killswitch = false;\r\n        unrespondedCnt = 0;\r\n        externalCallFlag = false;\r\n    }\r\n\r\n    function upgrade(address newAddr) {\r\n        if (msg.sender == requests[0].requester && unrespondedCnt == 0) {\r\n            newVersion = -int(newAddr);\r\n            killswitch = true;\r\n            Upgrade(newAddr);\r\n        }\r\n    }\r\n\r\n    function reset(uint price, uint minGas, uint cancellationGas) public {\r\n        if (msg.sender == requests[0].requester && unrespondedCnt == 0) {\r\n            GAS_PRICE = price;\r\n            MIN_FEE = price * minGas;\r\n            CANCELLATION_FEE = price * cancellationGas;\r\n            Reset(GAS_PRICE, MIN_FEE, CANCELLATION_FEE);\r\n        }\r\n    }\r\n\r\n    function suspend() public {\r\n        if (msg.sender == requests[0].requester) {\r\n            killswitch = true;\r\n        }\r\n    }\r\n\r\n    function restart() public {\r\n        if (msg.sender == requests[0].requester && newVersion == 0) {\r\n            killswitch = false;\r\n        }\r\n    }\r\n\r\n    function withdraw() public {\r\n        if (msg.sender == requests[0].requester && unrespondedCnt == 0) {\r\n            if (!requests[0].requester.call.value(this.balance)()) {\r\n                throw;\r\n            }\r\n        }\r\n    }\r\n\r\n    function request(uint8 requestType, address callbackAddr, bytes4 callbackFID, uint timestamp, bytes32[] requestData) public payable returns (int) {\r\n        if (externalCallFlag) {\r\n            throw;\r\n        }\r\n\r\n        if (killswitch) {\r\n            externalCallFlag = true;\r\n            if (!msg.sender.call.value(msg.value)()) {\r\n                throw;\r\n            }\r\n            externalCallFlag = false;\r\n            return newVersion;\r\n        }\r\n\r\n        if (msg.value < MIN_FEE) {\r\n            externalCallFlag = true;\r\n            // If the amount of ether sent by the requester is too little or \r\n            // too much, refund the requester and discard the request.\r\n            if (!msg.sender.call.value(msg.value)()) {\r\n                throw;\r\n            }\r\n            externalCallFlag = false;\r\n            return FAIL_FLAG;\r\n        } else {\r\n            // Record the request.\r\n            uint64 requestId = requestCnt;\r\n            requestCnt++;\r\n            unrespondedCnt++;\r\n\r\n            bytes32 paramsHash = sha3(requestType, requestData);\r\n            requests[requestId].requester = msg.sender;\r\n            requests[requestId].fee = msg.value;\r\n            requests[requestId].callbackAddr = callbackAddr;\r\n            requests[requestId].callbackFID = callbackFID;\r\n            requests[requestId].paramsHash = paramsHash;\r\n\r\n            // Log the request for the Town Crier server to process.\r\n            RequestInfo(requestId, requestType, msg.sender, msg.value, callbackAddr, paramsHash, timestamp, requestData);\r\n            return requestId;\r\n        }\r\n    }\r\n\r\n    function deliver(uint64 requestId, bytes32 paramsHash, uint64 error, bytes32 respData) public {\r\n        if (msg.sender != SGX_ADDRESS ||\r\n                requestId <= 0 ||\r\n                requests[requestId].requester == 0 ||\r\n                requests[requestId].fee == DELIVERED_FEE_FLAG) {\r\n            // If the response is not delivered by the SGX account or the \r\n            // request has already been responded to, discard the response.\r\n            return;\r\n        }\r\n\r\n        uint fee = requests[requestId].fee;\r\n        if (requests[requestId].paramsHash != paramsHash) {\r\n            // If the hash of request parameters in the response is not \r\n            // correct, discard the response for security concern.\r\n            return;\r\n        } else if (fee == CANCELLED_FEE_FLAG) {\r\n            // If the request is cancelled by the requester, cancellation \r\n            // fee goes to the SGX account and set the request as having\r\n            // been responded to.\r\n            SGX_ADDRESS.send(CANCELLATION_FEE);\r\n            requests[requestId].fee = DELIVERED_FEE_FLAG;\r\n            unrespondedCnt--;\r\n            return;\r\n        }\r\n\r\n        requests[requestId].fee = DELIVERED_FEE_FLAG;\r\n        unrespondedCnt--;\r\n\r\n        if (error < 2) {\r\n            // Either no error occurs, or the requester sent an invalid query.\r\n            // Send the fee to the SGX account for its delivering.\r\n            SGX_ADDRESS.send(fee);         \r\n        } else {\r\n            // Error in TC, refund the requester.\r\n            externalCallFlag = true;\r\n            requests[requestId].requester.call.gas(2300).value(fee)();\r\n            externalCallFlag = false;\r\n        }\r\n\r\n        uint callbackGas = (fee - MIN_FEE) / tx.gasprice; // gas left for the callback function\r\n        DeliverInfo(requestId, fee, tx.gasprice, msg.gas, callbackGas, paramsHash, error, respData); // log the response information\r\n        if (callbackGas > msg.gas - 5000) {\r\n            callbackGas = msg.gas - 5000;\r\n        }\r\n        \r\n        externalCallFlag = true;\r\n        requests[requestId].callbackAddr.call.gas(callbackGas)(requests[requestId].callbackFID, requestId, error, respData); // call the callback function in the application contract\r\n        externalCallFlag = false;\r\n    }\r\n\r\n    function cancel(uint64 requestId) public returns (int) {\r\n        if (externalCallFlag) {\r\n            throw;\r\n        }\r\n\r\n        if (killswitch) {\r\n            return 0;\r\n        }\r\n\r\n        uint fee = requests[requestId].fee;\r\n        if (requests[requestId].requester == msg.sender && fee >= CANCELLATION_FEE) {\r\n            // If the request was sent by this user and has money left on it,\r\n            // then cancel it.\r\n            requests[requestId].fee = CANCELLED_FEE_FLAG;\r\n            externalCallFlag = true;\r\n            if (!msg.sender.call.value(fee - CANCELLATION_FEE)()) {\r\n                throw;\r\n            }\r\n            externalCallFlag = false;\r\n            Cancel(requestId, msg.sender, requests[requestId].requester, requests[requestId].fee, 1);\r\n            return SUCCESS_FLAG;\r\n        } else {\r\n            Cancel(requestId, msg.sender, requests[requestId].requester, fee, -1);\r\n            return FAIL_FLAG;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restart\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SGX_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DELIVERED_FEE_FLAG\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"killswitch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestId\",\"type\":\"uint64\"},{\"name\":\"paramsHash\",\"type\":\"bytes32\"},{\"name\":\"error\",\"type\":\"uint64\"},{\"name\":\"respData\",\"type\":\"bytes32\"}],\"name\":\"deliver\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestId\",\"type\":\"uint64\"}],\"name\":\"cancel\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestType\",\"type\":\"uint8\"},{\"name\":\"callbackAddr\",\"type\":\"address\"},{\"name\":\"callbackFID\",\"type\":\"bytes4\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"requestData\",\"type\":\"bytes32[]\"}],\"name\":\"request\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FAIL_FLAG\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestCnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CANCELLATION_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"name\":\"requester\",\"type\":\"address\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"callbackAddr\",\"type\":\"address\"},{\"name\":\"callbackFID\",\"type\":\"bytes4\"},{\"name\":\"paramsHash\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAS_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unrespondedCnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"minGas\",\"type\":\"uint256\"},{\"name\":\"cancellationGas\",\"type\":\"uint256\"}],\"name\":\"reset\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CANCELLED_FEE_FLAG\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUCCESS_FLAG\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"suspend\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"externalCallFlag\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gas_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"min_fee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cancellation_fee\",\"type\":\"uint256\"}],\"name\":\"Reset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"requestType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"callbackAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"paramsHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"requestData\",\"type\":\"bytes32[]\"}],\"name\":\"RequestInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gasLeft\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"callbackGas\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"paramsHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"error\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"respData\",\"type\":\"bytes32\"}],\"name\":\"DeliverInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"canceller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"flag\",\"type\":\"int256\"}],\"name\":\"Cancel\",\"type\":\"event\"}]","ContractName":"TownCrier","CompilerVersion":"v0.4.9+commit.364da425","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fd21c4caa91cdff8e738b01201b4ffc134931251b8eb75b1fe4e59a5ef4c96eb"}]}