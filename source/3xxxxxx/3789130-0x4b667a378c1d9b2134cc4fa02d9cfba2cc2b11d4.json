{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *\r\n * Time-locked ETH vault of money being transferred into team multisig.\r\n *\r\n * Add 4 weeks delay to the transfer to the team multisig wallet.\r\n *\r\n * The owning party can reset the timer.\r\n *\r\n */\r\ncontract IntermediateVault  {\r\n\r\n  /** Interface flag to determine if address is for a real contract or not */\r\n  bool public isIntermediateVault = true;\r\n\r\n  /** Address that can claim tokens */\r\n  address public teamMultisig;\r\n\r\n  /** UNIX timestamp when tokens can be claimed. */\r\n  uint256 public unlockedAt;\r\n\r\n  event Unlocked();\r\n  event Paid(address sender, uint amount);\r\n\r\n  function IntermediateVault(address _teamMultisig, uint _unlockedAt) {\r\n\r\n    teamMultisig = _teamMultisig;\r\n    unlockedAt = _unlockedAt;\r\n\r\n    // Sanity check\r\n    if(teamMultisig == 0x0)\r\n      throw;\r\n\r\n    // Do not check for the future time here, so that test is easier.\r\n    // Check for an empty value though\r\n    // Use value 1 for testing\r\n    if(_unlockedAt == 0)\r\n      throw;\r\n  }\r\n\r\n  /// @notice Transfer locked tokens to Lunyr's multisig wallet\r\n  function unlock() public {\r\n    // Wait your turn!\r\n    if(now < unlockedAt) throw;\r\n\r\n    // StandardToken will throw in the case of transaction fails\r\n    if(!teamMultisig.send(address(this).balance)) throw; // Should this forward gas, since we trust the wallet?\r\n\r\n    Unlocked();\r\n  }\r\n\r\n  function () public payable {\r\n    // Collect deposits from the crowdsale\r\n    Paid(msg.sender, msg.value);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isIntermediateVault\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamMultisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_teamMultisig\",\"type\":\"address\"},{\"name\":\"_unlockedAt\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Paid\",\"type\":\"event\"}]","ContractName":"IntermediateVault","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007e6614722614e434c4df9901bab31e466ba12fa400000000000000000000000000000000000000000000000000000000593fe1d0","Library":"","SwarmSource":"bzzr://89e46d0a8912ea2d6c479a60a594f87c13822a2124aca9ba74ab7fb6ccf395aa"}]}