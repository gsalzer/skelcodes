{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\n\r\ncontract SafeMath {\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) throw;\r\n  }\r\n\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract StandardTokenProtocol {\r\n\r\n    function totalSupply() constant returns (uint256 totalSupply) {}\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n    function transfer(address _recipient, uint256 _value) returns (bool success) {}\r\n    function transferFrom(address _from, address _recipient, uint256 _value) returns (bool success) {}\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _recipient, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\n\r\ncontract StandardToken is StandardTokenProtocol {\r\n\r\n    modifier when_can_transfer(address _from, uint256 _value) {\r\n        if (balances[_from] >= _value) _;\r\n    }\r\n\r\n    modifier when_can_receive(address _recipient, uint256 _value) {\r\n        if (balances[_recipient] + _value > balances[_recipient]) _;\r\n    }\r\n\r\n    modifier when_is_allowed(address _from, address _delegate, uint256 _value) {\r\n        if (allowed[_from][_delegate] >= _value) _;\r\n    }\r\n\r\n    function transfer(address _recipient, uint256 _value)\r\n        when_can_transfer(msg.sender, _value)\r\n        when_can_receive(_recipient, _value)\r\n        returns (bool o_success)\r\n    {\r\n        balances[msg.sender] -= _value;\r\n        balances[_recipient] += _value;\r\n        Transfer(msg.sender, _recipient, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _recipient, uint256 _value)\r\n        when_can_transfer(_from, _value)\r\n        when_can_receive(_recipient, _value)\r\n        when_is_allowed(_from, msg.sender, _value)\r\n        returns (bool o_success)\r\n    {\r\n        allowed[_from][msg.sender] -= _value;\r\n        balances[_from] -= _value;\r\n        balances[_recipient] += _value;\r\n        Transfer(_from, _recipient, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool o_success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 o_remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n\r\n}\r\n\r\ncontract GUPToken is StandardToken {\r\n\r\n\t//FIELDS\r\n\tstring public name = \"Guppy\";\r\n    string public symbol = \"GUP\";\r\n    uint public decimals = 3;\r\n\r\n\t//CONSTANTS\r\n\tuint public constant LOCKOUT_PERIOD = 1 years; //time after end date that illiquid GUP can be transferred\r\n\r\n\t//ASSIGNED IN INITIALIZATION\r\n\tuint public endMintingTime; //Timestamp after which no more tokens can be created\r\n\taddress public minter; //address of the account which may mint new tokens\r\n\r\n\tmapping (address => uint) public illiquidBalance; //Balance of 'Frozen funds'\r\n\r\n\t//MODIFIERS\r\n\t//Can only be called by contribution contract.\r\n\tmodifier only_minter {\r\n\t\tif (msg.sender != minter) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\t// Can only be called if illiquid tokens may be transformed into liquid.\r\n\t// This happens when `LOCKOUT_PERIOD` of time passes after `endMintingTime`.\r\n\tmodifier when_thawable {\r\n\t\tif (now < endMintingTime + LOCKOUT_PERIOD) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\t// Can only be called if (liquid) tokens may be transferred. Happens\r\n\t// immediately after `endMintingTime`.\r\n\tmodifier when_transferable {\r\n\t\tif (now < endMintingTime) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\t// Can only be called if the `crowdfunder` is allowed to mint tokens. Any\r\n\t// time before `endMintingTime`.\r\n\tmodifier when_mintable {\r\n\t\tif (now >= endMintingTime) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\t// Initialization contract assigns address of crowdfund contract and end time.\r\n\tfunction GUPToken(address _minter, uint _endMintingTime) {\r\n\t\tendMintingTime = _endMintingTime;\r\n\t\tminter = _minter;\r\n\t}\r\n\r\n\t// Create new tokens when called by the crowdfund contract.\r\n\t// Only callable before the end time.\r\n\tfunction createToken(address _recipient, uint _value)\r\n\t\twhen_mintable\r\n\t\tonly_minter\r\n\t\treturns (bool o_success)\r\n\t{\r\n\t\tbalances[_recipient] += _value;\r\n\t\ttotalSupply += _value;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Create an illiquidBalance which cannot be traded until end of lockout period.\r\n\t// Can only be called by crowdfund contract before the end time.\r\n\tfunction createIlliquidToken(address _recipient, uint _value)\r\n\t\twhen_mintable\r\n\t\tonly_minter\r\n\t\treturns (bool o_success)\r\n\t{\r\n\t\tilliquidBalance[_recipient] += _value;\r\n\t\ttotalSupply += _value;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Make sender's illiquid balance liquid when called after lockout period.\r\n\tfunction makeLiquid()\r\n\t\twhen_thawable\r\n\t{\r\n\t\tbalances[msg.sender] += illiquidBalance[msg.sender];\r\n\t\tilliquidBalance[msg.sender] = 0;\r\n\t}\r\n\r\n\t// Transfer amount of tokens from sender account to recipient.\r\n\t// Only callable after the crowd fund end date.\r\n\tfunction transfer(address _recipient, uint _amount)\r\n\t\twhen_transferable\r\n\t\treturns (bool o_success)\r\n\t{\r\n\t\treturn super.transfer(_recipient, _amount);\r\n\t}\r\n\r\n\t// Transfer amount of tokens from a specified address to a recipient.\r\n\t// Only callable after the crowd fund end date.\r\n\tfunction transferFrom(address _from, address _recipient, uint _amount)\r\n\t\twhen_transferable\r\n\t\treturns (bool o_success)\r\n\t{\r\n\t\treturn super.transferFrom(_from, _recipient, _amount);\r\n\t}\r\n}\r\n\r\n\r\ncontract Contribution is SafeMath {\r\n\r\n\t//FIELDS\r\n\r\n\t//CONSTANTS\r\n\t//Time limits\r\n\tuint public constant STAGE_ONE_TIME_END = 5 hours;\r\n\tuint public constant STAGE_TWO_TIME_END = 72 hours;\r\n\tuint public constant STAGE_THREE_TIME_END = 2 weeks;\r\n\tuint public constant STAGE_FOUR_TIME_END = 4 weeks;\r\n\t//Prices of GUP\r\n\tuint public constant PRICE_STAGE_ONE   = 480000;\r\n\tuint public constant PRICE_STAGE_TWO   = 440000;\r\n\tuint public constant PRICE_STAGE_THREE = 400000;\r\n\tuint public constant PRICE_STAGE_FOUR  = 360000;\r\n\tuint public constant PRICE_BTCS        = 480000;\r\n\t//GUP Token Limits\r\n\tuint public constant MAX_SUPPLY =        100000000000;\r\n\tuint public constant ALLOC_ILLIQUID_TEAM = 8000000000;\r\n\tuint public constant ALLOC_LIQUID_TEAM =  13000000000;\r\n\tuint public constant ALLOC_BOUNTIES =      2000000000;\r\n\tuint public constant ALLOC_NEW_USERS =    17000000000;\r\n\tuint public constant ALLOC_CROWDSALE =    60000000000;\r\n\tuint public constant BTCS_PORTION_MAX = 31250 * PRICE_BTCS;\r\n\t//ASSIGNED IN INITIALIZATION\r\n\t//Start and end times\r\n\tuint public publicStartTime; //Time in seconds public crowd fund starts.\r\n\tuint public privateStartTime; //Time in seconds when BTCSuisse can purchase up to 31250 ETH worth of GUP;\r\n\tuint public publicEndTime; //Time in seconds crowdsale ends\r\n\t//Special Addresses\r\n\taddress public btcsAddress; //Address used by BTCSuisse\r\n\taddress public multisigAddress; //Address to which all ether flows.\r\n\taddress public matchpoolAddress; //Address to which ALLOC_BOUNTIES, ALLOC_LIQUID_TEAM, ALLOC_NEW_USERS, ALLOC_ILLIQUID_TEAM is sent to.\r\n\taddress public ownerAddress; //Address of the contract owner. Can halt the crowdsale.\r\n\t//Contracts\r\n\tGUPToken public gupToken; //External token contract hollding the GUP\r\n\t//Running totals\r\n\tuint public etherRaised; //Total Ether raised.\r\n\tuint public gupSold; //Total GUP created\r\n\tuint public btcsPortionTotal; //Total of Tokens purchased by BTC Suisse. Not to exceed BTCS_PORTION_MAX.\r\n\t//booleans\r\n\tbool public halted; //halts the crowd sale if true.\r\n\r\n\t//FUNCTION MODIFIERS\r\n\r\n\t//Is currently in the period after the private start time and before the public start time.\r\n\tmodifier is_pre_crowdfund_period() {\r\n\t\tif (now >= publicStartTime || now < privateStartTime) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\t//Is currently the crowdfund period\r\n\tmodifier is_crowdfund_period() {\r\n\t\tif (now < publicStartTime || now >= publicEndTime) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\t//May only be called by BTC Suisse\r\n\tmodifier only_btcs() {\r\n\t\tif (msg.sender != btcsAddress) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\t//May only be called by the owner address\r\n\tmodifier only_owner() {\r\n\t\tif (msg.sender != ownerAddress) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\t//May only be called if the crowdfund has not been halted\r\n\tmodifier is_not_halted() {\r\n\t\tif (halted) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\t// EVENTS\r\n\r\n\tevent PreBuy(uint _amount);\r\n\tevent Buy(address indexed _recipient, uint _amount);\r\n\r\n\r\n\t// FUNCTIONS\r\n\r\n\t//Initialization function. Deploys GUPToken contract assigns values, to all remaining fields, creates first entitlements in the GUP Token contract.\r\n\tfunction Contribution(\r\n\t\taddress _btcs,\r\n\t\taddress _multisig,\r\n\t\taddress _matchpool,\r\n\t\tuint _publicStartTime,\r\n\t\tuint _privateStartTime\r\n\t) {\r\n\t\townerAddress = msg.sender;\r\n\t\tpublicStartTime = _publicStartTime;\r\n\t\tprivateStartTime = _privateStartTime;\r\n\t\tpublicEndTime = _publicStartTime + 4 weeks;\r\n\t\tbtcsAddress = _btcs;\r\n\t\tmultisigAddress = _multisig;\r\n\t\tmatchpoolAddress = _matchpool;\r\n\t\tgupToken = new GUPToken(this, publicEndTime);\r\n\t\tgupToken.createIlliquidToken(matchpoolAddress, ALLOC_ILLIQUID_TEAM);\r\n\t\tgupToken.createToken(matchpoolAddress, ALLOC_BOUNTIES);\r\n\t\tgupToken.createToken(matchpoolAddress, ALLOC_LIQUID_TEAM);\r\n\t\tgupToken.createToken(matchpoolAddress, ALLOC_NEW_USERS);\r\n\t}\r\n\r\n\t//May be used by owner of contract to halt crowdsale and no longer except ether.\r\n\tfunction toggleHalt(bool _halted)\r\n\t\tonly_owner\r\n\t{\r\n\t\thalted = _halted;\r\n\t}\r\n\r\n\t//constant function returns the current GUP price.\r\n\tfunction getPriceRate()\r\n\t\tconstant\r\n\t\treturns (uint o_rate)\r\n\t{\r\n\t\tif (now <= publicStartTime + STAGE_ONE_TIME_END) return PRICE_STAGE_ONE;\r\n\t\tif (now <= publicStartTime + STAGE_TWO_TIME_END) return PRICE_STAGE_TWO;\r\n\t\tif (now <= publicStartTime + STAGE_THREE_TIME_END) return PRICE_STAGE_THREE;\r\n\t\tif (now <= publicStartTime + STAGE_FOUR_TIME_END) return PRICE_STAGE_FOUR;\r\n\t\telse return 0;\r\n\t}\r\n\r\n\t// Given the rate of a purchase and the remaining tokens in this tranche, it\r\n\t// will throw if the sale would take it past the limit of the tranche.\r\n\t// It executes the purchase for the appropriate amount of tokens, which\r\n\t// involves adding it to the total, minting GUP tokens and stashing the\r\n\t// ether.\r\n\t// Returns `amount` in scope as the number of GUP tokens that it will\r\n\t// purchase.\r\n\tfunction processPurchase(uint _rate, uint _remaining)\r\n\t\tinternal\r\n\t\treturns (uint o_amount)\r\n\t{\r\n\t\to_amount = safeDiv(safeMul(msg.value, _rate), 1 ether);\r\n\t\tif (o_amount > _remaining) throw;\r\n\t\tif (!multisigAddress.send(msg.value)) throw;\r\n\t\tif (!gupToken.createToken(msg.sender, o_amount)) throw;\r\n\t\tgupSold += o_amount;\r\n\t\tetherRaised += msg.value;\r\n\t}\r\n\r\n\t//Special Function can only be called by BTC Suisse and only during the pre-crowdsale period.\r\n\t//Allows the purchase of up to 125000 Ether worth of GUP Tokens.\r\n\tfunction preBuy()\r\n\t\tpayable\r\n\t\tis_pre_crowdfund_period\r\n\t\tonly_btcs\r\n\t\tis_not_halted\r\n\t{\r\n\t\tuint amount = processPurchase(PRICE_BTCS, BTCS_PORTION_MAX - btcsPortionTotal);\r\n\t\tbtcsPortionTotal += amount;\r\n\t\tPreBuy(amount);\r\n\t}\r\n\r\n\t//Default function called by sending Ether to this address with no arguments.\r\n\t//Results in creation of new GUP Tokens if transaction would not exceed hard limit of GUP Token.\r\n\tfunction()\r\n\t\tpayable\r\n\t\tis_crowdfund_period\r\n\t\tis_not_halted\r\n\t{\r\n\t\tuint amount = processPurchase(getPriceRate(), ALLOC_CROWDSALE - gupSold);\r\n\t\tBuy(msg.sender, amount);\r\n\t}\r\n\r\n\t//failsafe drain\r\n\tfunction drain()\r\n\t\tonly_owner\r\n\t{\r\n\t\tif (!ownerAddress.send(this.balance)) throw;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_STAGE_TWO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"matchpoolAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOC_NEW_USERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"btcsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE_FOUR_TIME_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOC_LIQUID_TEAM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOC_BOUNTIES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOC_ILLIQUID_TEAM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE_TWO_TIME_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gupSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE_ONE_TIME_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOC_CROWDSALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceRate\",\"outputs\":[{\"name\":\"o_rate\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_halted\",\"type\":\"bool\"}],\"name\":\"toggleHalt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_STAGE_ONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gupToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_STAGE_FOUR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BTCS_PORTION_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_STAGE_THREE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_BTCS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE_THREE_TIME_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"preBuy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"btcsPortionTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_btcs\",\"type\":\"address\"},{\"name\":\"_multisig\",\"type\":\"address\"},{\"name\":\"_matchpool\",\"type\":\"address\"},{\"name\":\"_publicStartTime\",\"type\":\"uint256\"},{\"name\":\"_privateStartTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PreBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"}]","ContractName":"Contribution","CompilerVersion":"v0.4.9+commit.364da425","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000a88edaa9ead00a1d114e4820b0b0f2e3651ece00000000000000000000000072a7197bbccbe6ee1e9c688645436ed06017768a0000000000000000000000000073b3b86e0d59e5948541e94ee90fdbb3396a310000000000000000000000000000000000000000000000000000000058e0f5d00000000000000000000000000000000000000000000000000000000058df5741","Library":"","SwarmSource":"bzzr://3dcde1c9f44afbc617c4f4a26a4a97b14f242608e5850358b7d05f9b6081a779"}]}