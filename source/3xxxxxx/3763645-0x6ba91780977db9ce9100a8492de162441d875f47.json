{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\n\r\ncontract Metronome {\r\n\r\n    // This is the constructor whose code is\r\n    // run only when the contract is created.\r\n    function Metronome() {\r\n    }\r\n    \r\n    \r\n    // total amount invested\r\n    uint public invested = 0;\r\n    \r\n    // stores the last ping of every participants\r\n    mapping (address => uint) public lastPing;\r\n    // stores the balance of each participant\r\n    mapping (address => uint) public balanceOf;\r\n    // stores the value of rewards the last time a player collected rewards\r\n    mapping (address => uint) public lastRewards;\r\n\r\n    uint public constant largeConstant = 1000000 ether;\r\n    // cumulative ratio of rewards over invested (multiplied by largeConstant)\r\n    uint public cumulativeRatios = 0;\r\n    \r\n    // this array is not used in the rules of the game\r\n    // it enables players to check the state of other players more easily\r\n    mapping (uint => address) public participants;\r\n    uint public countParticipants = 0;\r\n    \r\n    \r\n    /** Private and Constant functions */\r\n    \r\n    // adds a player to the array of participants\r\n    function addPlayer(address a) private {\r\n        if (lastPing[a] == 0) {\r\n            participants[countParticipants] = a;\r\n            countParticipants = countParticipants + 1;\r\n        }\r\n        lastPing[a] = now;\r\n    }\r\n    \r\n    \r\n    // updates the balance and updates the total invested amount\r\n    function modifyBalance(address a, uint x) private {\r\n        balanceOf[a] = balanceOf[a] + x;\r\n        invested = invested + x;\r\n    }\r\n    \r\n    // creates a new reward that can be claimed by users\r\n    function createReward(uint value, uint oldTotal) private {\r\n        if (oldTotal > 0)\r\n            cumulativeRatios = cumulativeRatios + (value * largeConstant) / oldTotal;\r\n    }\r\n    \r\n    // function called to forbid a player from claiming all past rewards\r\n    function forbid(address a) private {\r\n        lastRewards[a] = cumulativeRatios;\r\n    }\r\n    \r\n    // function to compute the next reward of a player\r\n    function getReward(address a) constant returns (uint) {\r\n        uint rewardsDifference = cumulativeRatios - lastRewards[a];\r\n        return (rewardsDifference * balanceOf[a]) / largeConstant;\r\n    }\r\n    \r\n    // function to compute the lost amount\r\n    function losingAmount(address a, uint toShare) constant returns (uint) {\r\n        return toShare - (((toShare*largeConstant)/invested)*balanceOf[a]) / largeConstant;\r\n    }\r\n    \r\n    /** Public functions */\r\n    \r\n    // to be called every day\r\n    function idle() {\r\n        lastPing[msg.sender] = now;\r\n    }\r\n    \r\n    // function called when a user wants to invest in the contract\r\n    // after calling this function you cannot claim past rewards\r\n    function invest() payable {\r\n        uint reward = getReward(msg.sender);\r\n        addPlayer(msg.sender);\r\n        modifyBalance(msg.sender, msg.value);\r\n        forbid(msg.sender);\r\n        createReward(reward, invested);\r\n    }\r\n    \r\n    // function called when a user wants to divest\r\n    function divest(uint256 value) {\r\n        require(value <= balanceOf[msg.sender]);\r\n        \r\n        uint reward = getReward(msg.sender);\r\n        modifyBalance(msg.sender, -value);\r\n        forbid(msg.sender);\r\n        createReward(reward, invested);\r\n        msg.sender.transfer(value);\r\n    }\r\n    \r\n    // claims the rewards\r\n    function claimRewards() {\r\n        uint reward = getReward(msg.sender);\r\n        modifyBalance(msg.sender,reward);\r\n        forbid(msg.sender);\r\n    }\r\n    \r\n    // used to take create a reward from the funds of someone who has not\r\n    // idled in the last 10 minutes\r\n    function poke(address a) {\r\n        require(now > lastPing[a] + 14 hours && balanceOf[a] > 0);\r\n        \r\n        uint missed = getReward(a);\r\n        uint toShare = balanceOf[a] / 10;\r\n        uint toLose = losingAmount(a, toShare);\r\n        \r\n        createReward(toShare, invested);\r\n        modifyBalance(a, -toLose);\r\n        forbid(a);\r\n        lastPing[a] = now;\r\n        createReward(missed, invested);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"largeConstant\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"},{\"name\":\"toShare\",\"type\":\"uint256\"}],\"name\":\"losingAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"idle\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastPing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cumulativeRatios\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"divest\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"poke\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"}]","ContractName":"Metronome","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1e014232dddaf065c92532615f57a33fecd6b5eacc125e2db1f5ec05bca472a3"}]}