{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * ERC 20 token\r\n *\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract MoacToken  {\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => uint256) redeem;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 public totalSupply;\r\n    string public name = \"MoacToken Token\";\r\n    string public symbol = \"MOAC\";\r\n    uint public decimals = 18;\r\n\r\n    uint public startBlock; //crowdsale start block (set in constructor)\r\n    uint public endBlock; //crowdsale end block (set in constructor)\r\n\r\n    address public founder = 0x0;\r\n    address public owner = 0x0;\r\n\r\n    // signer address \r\n    address public signer = 0x0;\r\n\r\n    // price is defined by levels\r\n    uint256 public levelOneTokenNum = 30000000 * 10**18; //first level \r\n    uint256 public levelTwoTokenNum = 50000000 * 10**18; //second level \r\n    uint256 public levelThreeTokenNum = 75000000 * 10**18; //third level \r\n    uint256 public levelFourTokenNum = 100000000 * 10**18; //fourth level \r\n    \r\n    //max amount raised during crowdsale\r\n    uint256 public etherCap = 1000000 * 10**18;  \r\n    uint public transferLockup = 370285; \r\n    uint public founderLockup = 86400; \r\n    \r\n    uint256 public founderAllocation = 100 * 10**16; \r\n    bool public founderAllocated = false; \r\n\r\n    uint256 public saleTokenSupply = 0; \r\n    uint256 public saleEtherRaised = 0; \r\n    bool public halted = false; \r\n\r\n    event Donate(uint256 eth, uint256 fbt);\r\n    event AllocateFounderTokens(address indexed sender);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event print(bytes32 msg);\r\n\r\n    function MoacToken(address founderInput, address signerInput, uint startBlockInput, uint endBlockInput) {\r\n        founder = founderInput;\r\n        signer = signerInput;\r\n        startBlock = startBlockInput;\r\n        endBlock = endBlockInput;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    //price based on current token supply\r\n    function price() constant returns(uint256) {\r\n        if (totalSupply<levelOneTokenNum) return 1600;\r\n        if (totalSupply>=levelOneTokenNum && totalSupply < levelTwoTokenNum) return 1000;\r\n        if (totalSupply>=levelTwoTokenNum && totalSupply < levelThreeTokenNum) return 800;\r\n        if (totalSupply>=levelThreeTokenNum && totalSupply < levelFourTokenNum) return 730;\r\n        if (totalSupply>=levelFourTokenNum) return 680;\r\n        return 1600;\r\n    }\r\n\r\n    // price() exposed for unit tests\r\n    function testPrice(uint256 currentSupply) constant returns(uint256) {\r\n        if (currentSupply<levelOneTokenNum) return 1600;\r\n        if (currentSupply>=levelOneTokenNum && currentSupply < levelTwoTokenNum) return 1000;\r\n        if (currentSupply>=levelTwoTokenNum && currentSupply < levelThreeTokenNum) return 800;\r\n        if (currentSupply>=levelThreeTokenNum && currentSupply < levelFourTokenNum) return 730;\r\n        if (currentSupply>=levelFourTokenNum) return 680;\r\n        return 1600;\r\n    }\r\n\r\n\r\n    // Donate entry point\r\n    function donate( bytes32 hash) payable {\r\n        print(hash);\r\n        if (block.number<startBlock || block.number>endBlock || (saleEtherRaised + msg.value)>etherCap || halted) throw;\r\n        uint256 tokens = (msg.value * price());\r\n        balances[msg.sender] = (balances[msg.sender] + tokens);\r\n        totalSupply = (totalSupply + tokens);\r\n        saleEtherRaised = (saleEtherRaised + msg.value);\r\n        //immediately send Ether to founder address\r\n        if (!founder.call.value(msg.value)()) throw; \r\n        Donate(msg.value, tokens);\r\n    }\r\n\r\n    /**\r\n     * Set up founder address token balance.\r\n     */\r\n    function allocateFounderTokens() {\r\n        if (msg.sender!=founder) throw;\r\n        if (block.number <= endBlock + founderLockup) throw;\r\n        if (founderAllocated) throw;\r\n        balances[founder] = (balances[founder] + saleTokenSupply * founderAllocation / (1 ether));\r\n        totalSupply = (totalSupply + saleTokenSupply * founderAllocation / (1 ether));\r\n        founderAllocated = true;\r\n        AllocateFounderTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * For offline donation, executed by signer only. only available during the sale\r\n     */\r\n    function offlineDonate(uint256 offlineTokenNum, uint256 offlineEther) {\r\n        if (msg.sender!=signer) throw;\r\n        if (block.number >= endBlock) throw; //offline can be done only before end block\r\n        \r\n        //check if overflow\r\n        if( (totalSupply +offlineTokenNum) > totalSupply && (saleEtherRaised + offlineEther)>saleEtherRaised){\r\n            totalSupply = (totalSupply + offlineTokenNum);\r\n            balances[founder] = (balances[founder] + offlineTokenNum );\r\n            saleEtherRaised = (saleEtherRaised + offlineEther);\r\n        }\r\n    }\r\n\r\n\r\n    /** \r\n     * emergency adjust if incorrectly set by signer, only available during the sale\r\n     */\r\n    function offlineAdjust(uint256 offlineTokenNum, uint256 offlineEther) {\r\n        if (msg.sender!=founder) throw;\r\n        if (block.number >= endBlock) throw; //offline can be done only before end block\r\n        \r\n        //check if overflow\r\n        if( (totalSupply - offlineTokenNum) > 0 && (saleEtherRaised - offlineEther) > 0 && (balances[founder] - offlineTokenNum)>0){\r\n            totalSupply = (totalSupply - offlineTokenNum);\r\n            balances[founder] = (balances[founder] - offlineTokenNum );\r\n            saleEtherRaised = (saleEtherRaised - offlineEther);\r\n        }\r\n    }\r\n\r\n\r\n    //check for redeemed balance\r\n    function redeemBalanceOf(address _owner) constant returns (uint256 balance) {\r\n        return redeem[_owner];\r\n    }\r\n\r\n    /**\r\n     * redeem token in MOAC network\r\n     */\r\n    function redeemToken(uint256 tokenNum) {\r\n        if (block.number <= (endBlock + transferLockup) && msg.sender!=founder) throw; \r\n        if( balances[msg.sender] < tokenNum ) throw;\r\n        balances[msg.sender] = (balances[msg.sender] - tokenNum );\r\n        redeem[msg.sender] += tokenNum;\r\n    }\r\n\r\n    /**\r\n     * restore redeemed back to user, only founder can do, if user made an error\r\n     */\r\n    function redeemRestore(address _to, uint256 tokenNum){\r\n        if( msg.sender != founder) throw;\r\n        if( redeem[_to] < tokenNum ) throw;\r\n\r\n        redeem[_to] -= tokenNum;\r\n        balances[_to] += tokenNum;\r\n    }\r\n\r\n\r\n    /**\r\n     * Emergency Stop ICO.\r\n     */\r\n    function halt() {\r\n        if (msg.sender!=founder) throw;\r\n        halted = true;\r\n    }\r\n\r\n    function unhalt() {\r\n        if (msg.sender!=founder) throw;\r\n        halted = false;\r\n    }\r\n\r\n    // only owner can kill\r\n    function kill() { \r\n        if (msg.sender == owner) suicide(owner); \r\n    }\r\n\r\n\r\n    /**\r\n     * Change founder address (where ICO ETH is being forwarded).\r\n     */\r\n    function changeFounder(address newFounder) {\r\n        if (msg.sender!=founder) throw;\r\n        founder = newFounder;\r\n    }\r\n\r\n    /**\r\n     * ERC 20 Standard Token interface transfer function\r\n     */\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (block.number <= (endBlock + transferLockup) && msg.sender!=founder) throw;\r\n\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        if (balances[msg.sender] >= _value && (balances[_to] + _value) > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n\r\n    }\r\n\r\n    /**\r\n     * ERC 20 Standard Token interface transfer function\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (block.number <= (endBlock + transferLockup) && msg.sender!=founder) throw;\r\n\r\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && (balances[_to] + _value) > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    /**\r\n     * Do not allow direct deposits.\r\n     *\r\n     * All crowdsale depositors must have read the legal agreement.\r\n     * This is confirmed by having them signing the terms of service on the website.\r\n     * The give their crowdsale Ethereum source address on the website.\r\n     * donate() takes data as input and rejects all deposits that do not have\r\n     * signature you receive after reading terms of service.\r\n     *\r\n     */\r\n    function() {\r\n        throw;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenNum\",\"type\":\"uint256\"}],\"name\":\"redeemToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"tokenNum\",\"type\":\"uint256\"}],\"name\":\"redeemRestore\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"redeemBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentSupply\",\"type\":\"uint256\"}],\"name\":\"testPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"levelThreeTokenNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"offlineTokenNum\",\"type\":\"uint256\"},{\"name\":\"offlineEther\",\"type\":\"uint256\"}],\"name\":\"offlineAdjust\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderLockup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFounder\",\"type\":\"address\"}],\"name\":\"changeFounder\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"offlineTokenNum\",\"type\":\"uint256\"},{\"name\":\"offlineEther\",\"type\":\"uint256\"}],\"name\":\"offlineDonate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocateFounderTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferLockup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"levelOneTokenNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"levelFourTokenNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"levelTwoTokenNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEtherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"founderInput\",\"type\":\"address\"},{\"name\":\"signerInput\",\"type\":\"address\"},{\"name\":\"startBlockInput\",\"type\":\"uint256\"},{\"name\":\"endBlockInput\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fbt\",\"type\":\"uint256\"}],\"name\":\"Donate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AllocateFounderTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msg\",\"type\":\"bytes32\"}],\"name\":\"print\",\"type\":\"event\"}]","ContractName":"MoacToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005afbCF6e567eBfF95771aC2e47aDF9309885cf1600000000000000000000000081F9c842fA421CCfC7553Ad51D6C0c602bC6a8f500000000000000000000000000000000000000000000000000000000003B8CAE00000000000000000000000000000000000000000000000000000000003CC9DE","Library":"","SwarmSource":"bzzr://f17fca170d793493e2513def2646a7d9ab762db6ba2d22cb3c13ef28d5ec751c"}]}