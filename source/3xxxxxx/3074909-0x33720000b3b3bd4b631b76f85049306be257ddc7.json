{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.6;\r\n\r\n//created by http://about.me/kh.bakhtiari\r\ncontract Lottery {\r\n    bool enabled = true;\r\n    address public owner;\r\n    \r\n    uint private ROUND_PER_BLOCK = 20;\r\n    uint private TICKET_PRICE = 1 finney;\r\n    uint private MAX_PENDING_PARTICIPANTS = 50;\r\n    \r\n    uint public targetBlock;\r\n    uint public ticketPrice;\r\n    uint8 public minParticipants;\r\n    uint8 public maxParticipants;\r\n    \r\n    uint public totalRoundsPassed;\r\n    uint public totalTicketsSold;\r\n    \r\n    address[] public participants;\r\n    address[] public pendingParticipants;\r\n    \r\n    event RoundEnded(address winner, uint amount);\r\n    \r\n    function Lottery() public payable {\r\n        increaseBlockTarget();\r\n        ticketPrice = 1 finney;\r\n        minParticipants = 2;\r\n        maxParticipants = 20;\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function () payable {\r\n        if (!enabled)\r\n            throw;\r\n            \r\n        if (msg.value < ticketPrice)\r\n            throw;\r\n            \r\n        for (uint i = 0; i < msg.value / ticketPrice; i++) {\r\n            if (participants.length == maxParticipants) {\r\n                if (pendingParticipants.length >= MAX_PENDING_PARTICIPANTS)\r\n                    if (msg.sender.send(msg.value - (i * TICKET_PRICE))) \r\n                        return;\r\n                    else\r\n                        throw;\r\n\r\n                pendingParticipants.push(msg.sender);\r\n            } else {\r\n                participants.push(msg.sender);\r\n            }\r\n            totalTicketsSold++;\r\n        }\r\n\r\n        if (msg.value % ticketPrice > 0)\r\n            if (!msg.sender.send(msg.value % ticketPrice))\r\n                throw;\r\n    }\r\n\r\n    function conclude () public returns (bool) {\r\n        if (block.number < targetBlock)\r\n            return false;\r\n\r\n        totalRoundsPassed++;\r\n        \r\n        increaseBlockTarget();\r\n        \r\n        if (!findAndPayTheWinner())\r\n            return false;\r\n\r\n        delete participants;\r\n        \r\n        uint m = pendingParticipants.length > maxParticipants ? maxParticipants : pendingParticipants.length;\r\n        \r\n        for (uint i = 0; i < m; i++)\r\n            participants.push(pendingParticipants[i]);\r\n        \r\n        if (m == pendingParticipants.length) {\r\n            delete pendingParticipants;\r\n        } else {\r\n            for (i = m; i < pendingParticipants.length; i++) {\r\n                pendingParticipants[i-m] == pendingParticipants[i];\r\n                delete pendingParticipants[i];\r\n            }\r\n            pendingParticipants.length -= m;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function findAndPayTheWinner() private returns (bool) {\r\n        uint winnerIndex = uint(block.blockhash(block.number - 1)) % participants.length;\r\n        \r\n        address winner = participants[winnerIndex];\r\n        \r\n        uint prize = (ticketPrice * participants.length) * 98 / 100;\r\n        \r\n        bool success =  winner.send(prize);\r\n        \r\n        if (success)\r\n            RoundEnded(winner, prize);\r\n        \r\n        return success;\r\n    }\r\n\r\n    function increaseBlockTarget() private {\r\n        if (block.number < targetBlock)\r\n            return;\r\n\r\n        targetBlock = block.number + ROUND_PER_BLOCK;\r\n    }\r\n    \r\n    function currentParticipants() public constant returns (uint) {\r\n        return participants.length;\r\n    }\r\n    \r\n    function currentPendingParticipants() public constant returns (uint) {\r\n        return pendingParticipants.length;\r\n    }\r\n    \r\n    function maxPendingParticipants() public constant returns (uint) {\r\n        return MAX_PENDING_PARTICIPANTS;\r\n    }\r\n    \r\n    function kill() public {\r\n        enabled = false;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"targetBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPendingParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTicketsSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPendingParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"conclude\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRoundsPassed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RoundEnded\",\"type\":\"event\"}]","ContractName":"Lottery","CompilerVersion":"v0.4.6+commit.2dabbdf0","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}