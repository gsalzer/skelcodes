{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\n// version (ZK)\r\n\r\n\r\ncontract iE4RowEscrow {\r\n\tfunction getNumGamesStarted() constant returns (int ngames);\r\n}\r\n\r\n\r\ncontract E4RowEscrow is iE4RowEscrow {\r\n\r\nevent StatEvent(string msg);\r\nevent StatEventI(string msg, uint val);\r\nevent StatEventA(string msg, address addr);\r\n\r\n\tuint constant MAX_PLAYERS = 5;\r\n\r\n\tenum EndReason  {erWinner, erTimeOut, erCancel}\r\n\tenum SettingStateValue  {debug, release, lockedRelease}\r\n\r\n\tstruct gameInstance {\r\n\t\taddress[5] players;\r\n\t\tuint[5] playerPots;\r\n\t\tuint numPlayers;\r\n\r\n\t\tbool active; // active\r\n\t\tbool allocd; //  allocated already. \r\n\t\tuint started; // time game started\r\n\t\tuint lastMoved; // time game last moved\r\n\t\tuint payout; // payout amont\r\n\t\taddress winner; // address of winner\r\n\t\t\r\n\r\n\t\tEndReason reasonEnded; // enum reason of ended\r\n\t\t\r\n\t}\r\n\t\r\n\tstruct arbiter {\r\n\t\tmapping (uint => uint)  gameIndexes; // game handles\r\n\r\n\t\tuint arbToken; // 2 bytes\r\n\t\tuint gameSlots; // a counter of alloc'd game structs (they can be reused)\r\n\t\tuint gamesStarted; // total games started\r\n\t\tuint gamesCompleted;\r\n\t\tuint gamesCanceled; // also tied\r\n\t\tuint gamesTimedout;\r\n\t\tuint numPlayers;\r\n\t\tbool registered; \r\n\t\tbool locked;\r\n\t}\r\n\r\n\r\n\taddress public  owner; \t// owner is address that deployed contract\r\n\taddress public  tokenPartner; \t// the address of partner that receives rake fees\r\n\tuint public numArbiters; \t// number of arbiters\r\n\r\n\tint numGamesStarted;\t// total stats from all arbiters\r\n\r\n\tuint public numGamesCompleted; // ...\r\n\tuint public numGamesCanceled; \t// tied and canceled\r\n\tuint public numGamesTimedOut;\t// ...\r\n\r\n\tuint public houseFeeHoldover; // hold fee till threshold\r\n\tuint public lastPayoutTime; \t// timestamp of last payout time\r\n\r\n\r\n\t// configurables\r\n\tuint public gameTimeOut;\r\n\tuint public registrationFee;\r\n\tuint public houseFeeThreshold;\r\n\tuint public payoutInterval;\r\n\r\n\tuint raGas; // for register arb\r\n\tuint sgGas;// for start game\r\n\tuint wpGas; // for winner paid\r\n\tuint rfGas; // for refund\r\n\tuint feeGas; // for rake fee payout\r\n\r\n\tSettingStateValue public settingsState = SettingStateValue.debug; \r\n\t\r\n\r\n\tmapping (address => arbiter)  arbiters;\r\n\tmapping (uint => address)  arbiterTokens;\r\n\tmapping (uint => address)  arbiterIndexes;\r\n\tmapping (uint => gameInstance)  games;\r\n\r\n\r\n\tfunction E4RowEscrow() public\r\n\t{\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\r\n\tfunction applySettings(SettingStateValue _state, uint _fee, uint _threshold, uint _timeout, uint _interval)\r\n\t{\r\n\t\tif (msg.sender != owner) \r\n\t\t\tthrow;\r\n\r\n\t\t// ----------------------------------------------\r\n\t\t// these items are tweakable for game optimization\r\n\t\t// ----------------------------------------------\r\n\t\thouseFeeThreshold = _threshold;\r\n\t\tgameTimeOut = _timeout;\r\n\t\tpayoutInterval = _interval;\r\n\t\r\n\t\tif (settingsState == SettingStateValue.lockedRelease) {\r\n\t\t\tStatEvent(\"Settings Tweaked\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n \t \tsettingsState = _state;\r\n\t\tregistrationFee = _fee;\r\n\r\n\t\t// set default op gas -  any futher settings done in set up gas\r\n\t\traGas = 150000; \r\n\t\tsgGas = 110000;\r\n\t\twpGas = 20000; \r\n\t\trfGas = 20000; \r\n\t\tfeeGas = 360000; \r\n\r\n\t\tStatEvent(\"Settings Changed\");\r\n\r\n\t\r\n\t}\r\n\r\n\t//-----------------------------\r\n\t// return an arbiter token from an hGame\r\n\t//-----------------------------\r\n\tfunction ArbTokFromHGame(uint _hGame) returns (uint _tok)\r\n\t{ \r\n\t\t_tok =  (_hGame / (2 ** 48)) & 0xffff;\r\n\t}\r\n\r\n\r\n\t//-----------------------------\r\n\t// suicide the contract, not called for release\r\n\t//-----------------------------\r\n\tfunction HaraKiri()\r\n\t{\r\n\t\tif ((msg.sender == owner) && (settingsState != SettingStateValue.lockedRelease))\r\n\t\t\t  suicide(tokenPartner);\r\n\t\telse\r\n\t\t\tStatEvent(\"Kill attempt failed\");\r\n\t}\r\n\r\n\r\n\r\n\r\n\t//-----------------------------\r\n\t// default function\r\n\t// who are we to look a gift-horse in the mouth?\r\n\t//-----------------------------\r\n \tfunction() payable  {\r\n\t\tStatEvent(\"thanks!\");\r\n  \t}\r\n\r\n\t//------------------------------------------------------\r\n\t// check active game and valid player, return player index\r\n\t//-------------------------------------------------------\r\n\tfunction validPlayer(uint _hGame, address _addr)  internal returns( bool _valid, uint _pidx)\r\n\t{\r\n\t\t_valid = false;\r\n\t\tif (activeGame(_hGame)) {\r\n\t\t\tfor (uint i = 0; i < games[_hGame].numPlayers; i++) {\r\n\t\t\t\tif (games[_hGame].players[i] == _addr) {\r\n\t\t\t\t\t_valid=true;\r\n\t\t\t\t\t_pidx = i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\t\t\r\n\t}\r\n\r\n\t//------------------------------------------------------\r\n\t// check valid player, return player index\r\n\t//-------------------------------------------------------\r\n\tfunction validPlayer2(uint _hGame, address _addr) internal  returns( bool _valid, uint _pidx)\r\n\t{\r\n\t\t_valid = false;\r\n\t\tfor (uint i = 0; i < games[_hGame].numPlayers; i++) {\r\n\t\t\tif (games[_hGame].players[i] == _addr) {\r\n\t\t\t\t_valid=true;\r\n\t\t\t\t_pidx = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//------------------------------------------------------\r\n\t// check the arbiter is valid by comparing token\r\n\t//------------------------------------------------------\r\n\tfunction validArb(address _addr, uint _tok) internal  returns( bool _valid)\r\n\t{\r\n\t\t_valid = false;\r\n\r\n\t\tif ((arbiters[_addr].registered)\r\n\t\t\t&& (arbiters[_addr].arbToken == _tok)) \r\n\t\t\t_valid = true;\r\n\t}\r\n\r\n\t//------------------------------------------------------\r\n\t// check the arbiter is valid without comparing token\r\n\t//------------------------------------------------------\r\n\tfunction validArb2(address _addr) internal  returns( bool _valid)\r\n\t{\r\n\t\t_valid = false;\r\n\t\tif (arbiters[_addr].registered)\r\n\t\t\t_valid = true;\r\n\t}\r\n\r\n\t//------------------------------------------------------\r\n\t// check if arbiter is locked out\r\n\t//------------------------------------------------------\r\n\tfunction arbLocked(address _addr) internal  returns( bool _locked)\r\n\t{\r\n\t\t_locked = false;\r\n\t\tif (validArb2(_addr)) \r\n\t\t\t_locked = arbiters[_addr].locked;\r\n\t}\r\n\r\n\t//------------------------------------------------------\r\n\t// return if game is active\r\n\t//------------------------------------------------------\r\n\tfunction activeGame(uint _hGame) internal  returns( bool _valid)\r\n\t{\r\n\t\t_valid = false;\r\n\t\tif ((_hGame > 0)\r\n\t\t\t&& (games[_hGame].active))\r\n\t\t\t_valid = true;\r\n\t}\r\n\r\n\r\n\t//------------------------------------------------------\r\n\t// register game arbiter, max players of 5, pass in exact registration fee\r\n\t//------------------------------------------------------\r\n\tfunction registerArbiter(uint _numPlayers, uint _arbToken) public payable \r\n\t{\r\n\r\n\t\tif (msg.value != registrationFee) {\r\n\t\t\tthrow;  //Insufficient Fee\r\n\t\t}\r\n\r\n\t\tif (_arbToken == 0) {\r\n\t\t\tthrow; // invalid token\r\n\t\t}\r\n\r\n\t\tif (arbTokenExists(_arbToken & 0xffff)) {\r\n\t\t\tthrow; // Token Already Exists\r\n\t\t}\r\n\r\n\t\tif (arbiters[msg.sender].registered) {\r\n\t\t\tthrow; // Arb Already Registered\r\n\t\t}\r\n\t\t\r\n\t\tif (_numPlayers > MAX_PLAYERS) {\r\n\t\t\tthrow; // Exceeds Max Players\r\n\t\t}\r\n\r\n\t\tarbiters[msg.sender].gamesStarted = 0;\r\n\t\tarbiters[msg.sender].gamesCompleted = 0;\r\n\t\tarbiters[msg.sender].gamesCanceled = 0; \r\n\t\tarbiters[msg.sender].gamesTimedout = 0;\r\n\t\tarbiters[msg.sender].locked = false;\r\n\t\tarbiters[msg.sender].arbToken = _arbToken & 0xffff;\r\n\t\tarbiters[msg.sender].numPlayers = _numPlayers;\r\n\t\tarbiters[msg.sender].registered = true;\r\n\r\n\t\tarbiterTokens[(_arbToken & 0xffff)] = msg.sender;\r\n\t\tarbiterIndexes[numArbiters++] = msg.sender;\r\n\t\r\n\r\n\t\tif (!tokenPartner.call.gas(raGas).value(msg.value)()) {\r\n\t\t\t//Statvent(\"Send Error\"); // event never registers\r\n\t\t        throw;\r\n\t\t}\r\n\t\tStatEventI(\"Arb Added\", _arbToken);\r\n\t}\r\n\r\n\r\n\t//------------------------------------------------------\r\n\t// start game.  pass in valid hGame containing token in top two bytes\r\n\t//------------------------------------------------------\r\n\tfunction startGame(uint _hGame, int _hkMax, address[] _players) public \r\n\r\n\t{\r\n\t\tuint ntok = ArbTokFromHGame(_hGame);\r\n\t\tif (!validArb(msg.sender, ntok )) {\r\n\t\t\tStatEvent(\"Invalid Arb\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\r\n\t\tif (arbLocked(msg.sender)) {\r\n\t\t\tStatEvent(\"Arb Locked\");\r\n\t\t\treturn; \r\n\t\t}\r\n\r\n\t\tarbiter xarb = arbiters[msg.sender];\r\n\t\tif (_players.length != xarb.numPlayers) { \r\n\t\t\tStatEvent(\"Incorrect num players\");\r\n\t\t\treturn; \r\n\t\t}\r\n\r\n\t\tif (games[_hGame].active) {\r\n\t\t\t// guard-rail. just in case to return funds\r\n\t\t\tabortGame(msg.sender, _hGame, EndReason.erCancel);\r\n\r\n\t\t} else if (_hkMax > 0) {\r\n\t\t\thouseKeep(_hkMax, ntok); \r\n\t\t}\r\n\r\n\t\tif (!games[_hGame].allocd) {\r\n\t\t\tgames[_hGame].allocd = true;\r\n\t\t\txarb.gameIndexes[xarb.gameSlots++] = _hGame;\r\n\t\t} \r\n\t\tnumGamesStarted++; // always inc this one\r\n\t\txarb.gamesStarted++;\r\n\r\n\t\tgames[_hGame].active = true;\r\n\t\tgames[_hGame].started = now; \r\n\t\tgames[_hGame].lastMoved = now; \r\n\t\tgames[_hGame].payout = 0; \r\n\t\tgames[_hGame].winner = address(0);\r\n\r\n\t\tgames[_hGame].numPlayers = _players.length; // we'll be the judge of how many unique players\r\n\t\tfor (uint i = 0; i< _players.length && i < MAX_PLAYERS; i++) {\r\n\t            games[_hGame].players[i] = _players[i];\r\n\t\t    games[_hGame].playerPots[i] = 0;\r\n\t\t}\r\n\r\n\t\tStatEventI(\"Game Added\", _hGame);\r\n\t\t\r\n\r\n\t}\r\n\t\r\n\t//------------------------------------------------------\r\n\t// clean up game, set to inactive, refund any balances\r\n\t// called by housekeep ONLY\r\n\t//------------------------------------------------------\r\n\tfunction abortGame(address _arb, uint  _hGame, EndReason _reason) private returns(bool _success)\r\n\t{\r\n\t     gameInstance nGame = games[_hGame];\r\n\t     \r\n\t\t// find game in game id, \r\n\t\tif (nGame.active) {\r\n\t\t\t_success = true;\r\n\t\t\tfor (uint i = 0; i < nGame.numPlayers; i++) {\r\n\t\t\t\tif (nGame.playerPots[i] > 0) {\r\n\t\t\t\t\taddress a = nGame.players[i];\r\n\t\t\t\t\tuint nsend = nGame.playerPots[i];\r\n\t\t\t\t\tnGame.playerPots[i] = 0;\r\n\t\t\t\t\tif (!a.call.gas(rfGas).value(nsend)()) {\r\n\t\t\t\t\t\thouseFeeHoldover += nsend; // cannot refund due to error, give to the house\r\n\t\t\t\t\t        StatEventA(\"Cannot Refund Address\", a);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tnGame.active = false;\r\n\t\t\tnGame.reasonEnded = _reason;\r\n\t\t\tif (_reason == EndReason.erCancel) {\r\n\t\t\t\tnumGamesCanceled++;\r\n\t\t\t\tarbiters[_arb].gamesCanceled++;\r\n\t\t\t\tStatEvent(\"Game canceled\");\r\n\t\t\t} else if (_reason == EndReason.erTimeOut) {\r\n\t\t\t\tnumGamesTimedOut++;\r\n\t\t\t\tarbiters[_arb].gamesTimedout++;\r\n\t\t\t\tStatEvent(\"Game timed out\");\r\n\t\t\t} else \r\n\t\t\t\tStatEvent(\"Game aborted\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//------------------------------------------------------\r\n\t// called by arbiter when winner is decided\r\n\t// *pass in high num for winnerbal for tie games\r\n\t//------------------------------------------------------\r\n\tfunction winnerDecided(uint _hGame, address _winner, uint _winnerBal) public\r\n\t{\r\n\r\n\t\tif (!validArb(msg.sender, ArbTokFromHGame(_hGame))) {\r\n\t\t\tStatEvent(\"Invalid Arb\");\t\r\n\t\t\treturn; // no throw no change made\r\n\t\t}\r\n\r\n\t\tvar (valid, pidx) = validPlayer(_hGame, _winner);\r\n\t\tif (!valid) {\r\n\t\t\tStatEvent(\"Invalid Player\");\t\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tarbiter xarb = arbiters[msg.sender];\r\n\t\tgameInstance xgame = games[_hGame];\r\n\r\n\t\tuint totalPot = 0;\r\n\r\n\t\tif (xgame.playerPots[pidx] < _winnerBal) {\r\n\t\t    abortGame(msg.sender, _hGame, EndReason.erCancel);\r\n  \t\t    return;\r\n\t\t}\r\n\r\n\t\tfor (uint i = 0; i < xgame.numPlayers; i++) {\r\n\t\t\ttotalPot += xgame.playerPots[i];\r\n\t\t}\r\n\t\t\r\n\t\tuint nportion;\r\n\t\tuint nremnant;\r\n\t\tif (totalPot > 0) {\r\n\t\t \tnportion = totalPot/50; // 2 percent fixed\r\n\t\t\tnremnant = totalPot-nportion;\r\n\t\t} else {\r\n\t\t\tnportion = 0;\r\n\t\t\tnremnant = 0;\r\n\t\t}\r\n\t\t\r\n\r\n\t\txgame.lastMoved = now;\r\n\t\txgame.active = false;\r\n\t\txgame.reasonEnded = EndReason.erWinner;\r\n\t\txgame.winner = _winner;\r\n\t\txgame.payout = nremnant;\r\n\t\t\r\n\t\tif (nportion > 0) {\r\n\t\t\thouseFeeHoldover += nportion;\r\n\t\t\tif ((houseFeeHoldover > houseFeeThreshold)\r\n\t\t\t\t&& (now > (lastPayoutTime + payoutInterval))) {\r\n\t\t\t\tuint ntmpho = houseFeeHoldover;\r\n\t\t\t\thouseFeeHoldover = 0;\r\n\t\t\t\tlastPayoutTime = now; // reset regardless of succeed/fail\r\n\t\t\t\tif (!tokenPartner.call.gas(feeGas).value(ntmpho)()) {\r\n\t\t\t\t\thouseFeeHoldover = ntmpho; // put it back\r\n\t\t\t\t\tStatEvent(\"House-Fee Error1\");\r\n\t\t\t\t} \r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\tfor (i = 0; i < xgame.numPlayers; i++) {\r\n\t\t\txgame.playerPots[i] = 0;\r\n\t\t}\r\n\r\n\t\txarb.gamesCompleted++;\r\n\t\tnumGamesCompleted++;\r\n\t\tif (nremnant > 0) {\r\n\t\t\tif (!_winner.call.gas(wpGas).value(uint(nremnant))()) {\r\n\t\t\t\t// StatEvent(\"Send Error\");\r\n\t\t\t        throw; // if you cant pay the winner - very bad\r\n\t\t\t} else {\r\n\t\t\t\tStatEventI(\"Winner Paid\", _hGame);\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//------------------------------------------------------\r\n\t// handle a bet made by a player, validate the player and game\r\n\t// add to players balance\r\n\t//------------------------------------------------------\r\n\tfunction handleBet(uint _hGame) public payable \r\n\t{\r\n\t\taddress narb = arbiterTokens[ArbTokFromHGame(_hGame)];\r\n\t\tif (narb == address(0)) {\r\n\t\t\tthrow; // \"Invalid hGame\"\r\n\t\t}\r\n\r\n\t\tvar (valid, pidx) = validPlayer(_hGame, msg.sender);\r\n\t\tif (!valid) {\r\n\t\t\tthrow; // \"Invalid Player\"\r\n\t\t}\r\n\r\n\t\tgames[_hGame].playerPots[pidx] += msg.value;\r\n\t\tgames[_hGame].lastMoved = now;\r\n\r\n\t\tStatEventI(\"Bet Added\", _hGame);\r\n\r\n\t}\r\n\r\n\r\n\t//------------------------------------------------------\r\n\t// return if arb token exists\r\n\t//------------------------------------------------------\r\n\tfunction arbTokenExists(uint _tok) constant returns (bool _exists)\r\n\t{\r\n\t\t_exists = false;\r\n\t\tif ((_tok > 0)\r\n\t\t\t&& (arbiterTokens[_tok] != address(0))\r\n\t\t\t&& arbiters[arbiterTokens[_tok]].registered)\r\n\t\t\t_exists = true;\r\n\r\n\t}\r\n\r\n\r\n\r\n\r\n\t//------------------------------------------------------\r\n\t// called by ico token contract \r\n\t//------------------------------------------------------\r\n\tfunction getNumGamesStarted() constant returns (int _games) \r\n\t{\r\n\t\t_games = numGamesStarted;\r\n\t}\r\n\r\n\t//------------------------------------------------------\r\n\t// return arbiter game stats\r\n\t//------------------------------------------------------\r\n\tfunction getArbInfo(uint _idx) constant  returns (address _addr, uint _started, uint _completed, uint _canceled, uint _timedOut) \r\n\t{\r\n\t\tif (_idx >= numArbiters) {\r\n\t\t\tStatEvent(\"Invalid Arb\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t_addr = arbiterIndexes[_idx];\r\n\t\tif ((_addr == address(0))\r\n\t\t\t|| (!arbiters[_addr].registered)) {\r\n\t\t\tStatEvent(\"Invalid Arb\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tarbiter xarb = arbiters[_addr];\r\n\t\t_started = xarb.gamesStarted;\r\n\t\t_completed = xarb.gamesCompleted;\r\n\t\t_timedOut = xarb.gamesTimedout;\r\n\t\t_canceled = xarb.gamesCanceled;\r\n\t}\r\n\r\n\r\n\t//------------------------------------------------------\r\n\t// scan for a game 10 minutes old\r\n\t// if found abort the game, causing funds to be returned\r\n\t//------------------------------------------------------\r\n\tfunction houseKeep(int _max, uint _arbToken) public\r\n\t{\t\r\n\t\tuint gi;\r\n\t\taddress a;\r\n\t\tint aborted = 0;\r\n\t\t\r\n\t\tarbiter xarb = arbiters[msg.sender];// have to set it to something\r\n\t        \r\n         \r\n\t\tif (msg.sender == owner) {\r\n\t\t\tfor (uint ar = 0; (ar < numArbiters) && (aborted < _max) ; ar++) {\r\n\t\t\t    a = arbiterIndexes[ar];\r\n\t\t\t    xarb = arbiters[a];    \r\n\r\n\t\t\t    for ( gi = 0; (gi < xarb.gameSlots) && (aborted < _max); gi++) {\r\n\t\t\t\tgameInstance ngame0 = games[xarb.gameIndexes[gi]];\r\n\t\t\t\tif ((ngame0.active)\r\n\t\t\t\t    && ((now - ngame0.lastMoved) > gameTimeOut)) {\r\n\t\t\t\t\tabortGame(a, xarb.gameIndexes[gi], EndReason.erTimeOut);\r\n\t\t\t\t\t++aborted;\r\n\t\t\t\t}\r\n\t\t\t    }\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tif (!validArb(msg.sender, _arbToken))\r\n\t\t\t\tStatEvent(\"Housekeep invalid arbiter\");\r\n\t\t\telse {\r\n\t\t\t    a = msg.sender;\r\n\t\t\t    xarb = arbiters[a];    \r\n\t\t\t    for (gi = 0; (gi < xarb.gameSlots) && (aborted < _max); gi++) {\r\n\t\t\t\tgameInstance ngame1 = games[xarb.gameIndexes[gi]];\r\n\t\t\t\tif ((ngame1.active)\r\n\t\t\t\t    && ((now - ngame1.lastMoved) > gameTimeOut)) {\r\n\t\t\t\t\tabortGame(a, xarb.gameIndexes[gi], EndReason.erTimeOut);\r\n\t\t\t\t\t++aborted;\r\n\t\t\t\t}\r\n\t\t\t    }\r\n\r\n\t\t\t}\t\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//------------------------------------------------------\r\n\t// return game info\r\n\t//------------------------------------------------------\r\n\tfunction getGameInfo(uint _hGame)  constant  returns (EndReason _reason, uint _players, uint _payout, bool _active, address _winner )\r\n\t{\r\n\t\tgameInstance ngame = games[_hGame];\r\n\t\t_active = ngame.active;\r\n\t\t_players = ngame.numPlayers;\r\n\t\t_winner = ngame.winner;\r\n\t\t_payout = ngame.payout;\r\n\t\t_reason = ngame.reasonEnded;\r\n\r\n\t}\r\n\r\n\t//------------------------------------------------------\r\n\t// return arbToken and low bytes from an HGame\r\n\t//------------------------------------------------------\r\n\tfunction checkHGame(uint _hGame) constant returns(uint _arbTok, uint _lowWords)\r\n\t{\r\n\t\t_arbTok = ArbTokFromHGame(_hGame);\r\n\t\t_lowWords = _hGame & 0xffffffffffff;\r\n\t\t\r\n\t}\r\n\r\n\t//------------------------------------------------------\r\n\t// get operation gas amounts\r\n\t//------------------------------------------------------\r\n\tfunction getOpGas() constant returns (uint _ra, uint _sg, uint _wp, uint _rf, uint _fg) \r\n\t{\r\n\t\t_ra = raGas; // register arb\r\n\t\t_sg = sgGas; // start game\r\n\t\t_wp = wpGas; // winner paid\r\n\t\t_rf = rfGas; // refund\r\n\t\t_fg = feeGas; // rake fee gas\r\n\t}\r\n\r\n\r\n\t//------------------------------------------------------\r\n\t// set operation gas amounts for forwading operations\r\n\t//------------------------------------------------------\r\n\tfunction setOpGas(uint _ra, uint _sg, uint _wp, uint _rf, uint _fg) \r\n\t{\r\n\t\tif (msg.sender != owner)\r\n\t\t\tthrow;\r\n\r\n\t\traGas = _ra;\r\n\t\tsgGas = _sg;\r\n\t\twpGas = _wp;\r\n\t\trfGas = _rf;\r\n\t\tfeeGas = _fg;\r\n\t}\r\n\r\n\t//------------------------------------------------------\r\n\t// set a micheivous arbiter to locked\r\n\t//------------------------------------------------------\r\n\tfunction setArbiterLocked(address _addr, bool _lock)  public \r\n\t{\r\n\t\tif (owner != msg.sender)  {\r\n\t\t\tthrow; \r\n\t\t} else if (!validArb2(_addr)) {\r\n\t\t\tStatEvent(\"invalid arb\");\r\n\t\t} else {\r\n\t\t\tarbiters[_addr].locked = _lock;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\t//------------------------------------------------------\r\n\t// flush the house fees whenever commanded to.\r\n\t// ignore the threshold and the last payout time\r\n\t// but this time only reset lastpayouttime upon success\r\n\t//------------------------------------------------------\r\n\tfunction flushHouseFees()\r\n\t{\r\n\t\tif (msg.sender != owner) {\r\n\t\t\tStatEvent(\"only owner calls this function\");\r\n\t\t} else if (houseFeeHoldover > 0) {\r\n\t\t\tuint ntmpho = houseFeeHoldover;\r\n\t\t\thouseFeeHoldover = 0;\r\n\t\t\tif (!tokenPartner.call.gas(feeGas).value(ntmpho)()) {\r\n\t\t\t\thouseFeeHoldover = ntmpho; // put it back\r\n\t\t\t\tStatEvent(\"House-Fee Error2\"); \r\n\t\t\t} else {\r\n\t\t\t\tlastPayoutTime = now;\r\n \t\t\t\tStatEvent(\"House-Fee Paid\");\r\n\t \t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t//------------------------------------------------------\r\n\t// set the token partner\r\n\t//------------------------------------------------------\r\n\tfunction setTokenPartner(address _addr) public\r\n\t{\r\n\t\tif (msg.sender != owner) {\r\n\t\t\tthrow;\r\n\t\t} \r\n\r\n\t\tif ((settingsState == SettingStateValue.lockedRelease) \r\n\t\t\t&& (tokenPartner == address(0))) {\r\n\t\t\ttokenPartner = _addr;\r\n\t\t\tStatEvent(\"Token Partner Final!\");\r\n\t\t} else if (settingsState != SettingStateValue.lockedRelease) {\r\n\t\t\ttokenPartner = _addr;\r\n\t\t\tStatEvent(\"Token Partner Assigned!\");\r\n\t\t}\r\n\t\t\t\r\n\t}\r\n\r\n\t// ----------------------------\r\n\t// swap executor\r\n\t// ----------------------------\r\n\tfunction changeOwner(address _addr) \r\n\t{\r\n\t\tif (msg.sender != owner\r\n\t\t\t|| settingsState == SettingStateValue.lockedRelease)\r\n\t\t\t throw;\r\n\r\n\t\towner = _addr;\r\n\t}\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_numPlayers\",\"type\":\"uint256\"},{\"name\":\"_arbToken\",\"type\":\"uint256\"}],\"name\":\"registerArbiter\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutInterval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumGamesStarted\",\"outputs\":[{\"name\":\"_games\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_state\",\"type\":\"uint8\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_threshold\",\"type\":\"uint256\"},{\"name\":\"_timeout\",\"type\":\"uint256\"},{\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"applySettings\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrationFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numArbiters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"houseFeeThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hGame\",\"type\":\"uint256\"}],\"name\":\"ArbTokFromHGame\",\"outputs\":[{\"name\":\"_tok\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hGame\",\"type\":\"uint256\"}],\"name\":\"getGameInfo\",\"outputs\":[{\"name\":\"_reason\",\"type\":\"uint8\"},{\"name\":\"_players\",\"type\":\"uint256\"},{\"name\":\"_payout\",\"type\":\"uint256\"},{\"name\":\"_active\",\"type\":\"bool\"},{\"name\":\"_winner\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hGame\",\"type\":\"uint256\"}],\"name\":\"handleBet\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameTimeOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getArbInfo\",\"outputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_started\",\"type\":\"uint256\"},{\"name\":\"_completed\",\"type\":\"uint256\"},{\"name\":\"_canceled\",\"type\":\"uint256\"},{\"name\":\"_timedOut\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPayoutTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settingsState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hGame\",\"type\":\"uint256\"},{\"name\":\"_winner\",\"type\":\"address\"},{\"name\":\"_winnerBal\",\"type\":\"uint256\"}],\"name\":\"winnerDecided\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setTokenPartner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numGamesTimedOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"setArbiterLocked\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_max\",\"type\":\"int256\"},{\"name\":\"_arbToken\",\"type\":\"uint256\"}],\"name\":\"houseKeep\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOpGas\",\"outputs\":[{\"name\":\"_ra\",\"type\":\"uint256\"},{\"name\":\"_sg\",\"type\":\"uint256\"},{\"name\":\"_wp\",\"type\":\"uint256\"},{\"name\":\"_rf\",\"type\":\"uint256\"},{\"name\":\"_fg\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hGame\",\"type\":\"uint256\"}],\"name\":\"checkHGame\",\"outputs\":[{\"name\":\"_arbTok\",\"type\":\"uint256\"},{\"name\":\"_lowWords\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numGamesCompleted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hGame\",\"type\":\"uint256\"},{\"name\":\"_hkMax\",\"type\":\"int256\"},{\"name\":\"_players\",\"type\":\"address[]\"}],\"name\":\"startGame\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ra\",\"type\":\"uint256\"},{\"name\":\"_sg\",\"type\":\"uint256\"},{\"name\":\"_wp\",\"type\":\"uint256\"},{\"name\":\"_rf\",\"type\":\"uint256\"},{\"name\":\"_fg\",\"type\":\"uint256\"}],\"name\":\"setOpGas\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"houseFeeHoldover\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"flushHouseFees\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numGamesCanceled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPartner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tok\",\"type\":\"uint256\"}],\"name\":\"arbTokenExists\",\"outputs\":[{\"name\":\"_exists\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"HaraKiri\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msg\",\"type\":\"string\"}],\"name\":\"StatEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msg\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"StatEventI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msg\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"StatEventA\",\"type\":\"event\"}]","ContractName":"E4RowEscrow","CompilerVersion":"v0.4.10+commit.f0d539ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://65899295bf18b68794ae4663f7902b2b3912178a798a20c2beb61b786886d04b"}]}