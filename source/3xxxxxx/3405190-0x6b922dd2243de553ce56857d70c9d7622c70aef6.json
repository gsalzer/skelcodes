{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.6;\r\n\r\n// --------------------------\r\n//  R Split Contract\r\n// --------------------------\r\ncontract RSPLT_F {\r\n        event StatEvent(string msg);\r\n        event StatEventI(string msg, uint val);\r\n\r\n        enum SettingStateValue  {debug, locked}\r\n\r\n        struct partnerAccount {\r\n                uint credited;  // total funds credited to this account\r\n                uint balance;   // current balance = credited - amount withdrawn\r\n                uint pctx10;     // percent allocation times ten\r\n                address addr;   // payout addr of this acct\r\n                bool evenStart; // even split up to evenDistThresh\r\n        }\r\n\r\n// -----------------------------\r\n//  data storage\r\n// ----------------------------------------\r\n        address public owner;                                // deployer executor\r\n        mapping (uint => partnerAccount) partnerAccounts;    // accounts by index\r\n        uint public numAccounts;                             // how many accounts exist\r\n        uint public holdoverBalance;                         // amount yet to be distributed\r\n        uint public totalFundsReceived;                      // amount received since begin of time\r\n        uint public totalFundsDistributed;                   // amount distributed since begin of time\r\n        uint public totalFundsWithdrawn;                     // amount withdrawn since begin of time\r\n        uint public evenDistThresh;                          // distribute evenly until this amount (total)\r\n        uint public withdrawGas = 35000;                     // gas for withdrawals\r\n        uint constant TENHUNDWEI = 1000;                     // need gt. 1000 wei to do payout\r\n        uint constant MAX_ACCOUNTS = 5;                      // max accounts this contract can handle\r\n        SettingStateValue public settingsState = SettingStateValue.debug; \r\n\r\n\r\n        // --------------------\r\n        // contract constructor\r\n        // --------------------\r\n        function RSPLT_F() {\r\n                owner = msg.sender;\r\n        }\r\n\r\n\r\n        // -----------------------------------\r\n        // lock\r\n        // lock the contract. after calling this you will not be able to modify accounts:\r\n        // -----------------------------------\r\n        function lock() {\r\n                if (msg.sender != owner) {\r\n                        StatEvent(\"err: not owner\");\r\n                        return;\r\n                }\r\n                if (settingsState == SettingStateValue.locked) {\r\n                        StatEvent(\"err: locked\");\r\n                        return;\r\n                }\r\n                settingsState = SettingStateValue.locked;\r\n                StatEvent(\"ok: contract locked\");\r\n        }\r\n\r\n\r\n        // -----------------------------------\r\n        // reset\r\n        // reset all accounts\r\n        // -----------------------------------\r\n        function reset() {\r\n                if (msg.sender != owner) {\r\n                        StatEvent(\"err: not owner\");\r\n                        return;\r\n                }\r\n                if (settingsState == SettingStateValue.locked) {\r\n                        StatEvent(\"err: locked\");\r\n                        return;\r\n                }\r\n                numAccounts = 0;\r\n                holdoverBalance = 0;\r\n                totalFundsReceived = 0;\r\n                totalFundsDistributed = 0;\r\n                totalFundsWithdrawn = 0;\r\n                StatEvent(\"ok: all accts reset\");\r\n        }\r\n\r\n\r\n        // -----------------------------------\r\n        // set even distribution threshold\r\n        // -----------------------------------\r\n        function setEvenDistThresh(uint256 _thresh) {\r\n                if (msg.sender != owner) {\r\n                        StatEvent(\"err: not owner\");\r\n                        return;\r\n                }\r\n                if (settingsState == SettingStateValue.locked) {\r\n                        StatEvent(\"err: locked\");\r\n                        return;\r\n                }\r\n                evenDistThresh = (_thresh / TENHUNDWEI) * TENHUNDWEI;\r\n                StatEventI(\"ok: threshold set\", evenDistThresh);\r\n        }\r\n\r\n\r\n        // -----------------------------------\r\n        // set even distribution threshold\r\n        // -----------------------------------\r\n        function setWitdrawGas(uint256 _withdrawGas) {\r\n                if (msg.sender != owner) {\r\n                        StatEvent(\"err: not owner\");\r\n                        return;\r\n                }\r\n                withdrawGas = _withdrawGas;\r\n                StatEventI(\"ok: withdraw gas set\", withdrawGas);\r\n        }\r\n\r\n\r\n        // ---------------------------------------------------\r\n        // add a new account\r\n        // ---------------------------------------------------\r\n        function addAccount(address _addr, uint256 _pctx10, bool _evenStart) {\r\n                if (msg.sender != owner) {\r\n                        StatEvent(\"err: not owner\");\r\n                        return;\r\n                }\r\n                if (settingsState == SettingStateValue.locked) {\r\n                        StatEvent(\"err: locked\");\r\n                        return;\r\n                }\r\n                if (numAccounts >= MAX_ACCOUNTS) {\r\n                        StatEvent(\"err: max accounts\");\r\n                        return;\r\n                }\r\n                partnerAccounts[numAccounts].addr = _addr;\r\n                partnerAccounts[numAccounts].pctx10 = _pctx10;\r\n                partnerAccounts[numAccounts].evenStart = _evenStart;\r\n                partnerAccounts[numAccounts].credited = 0;\r\n                partnerAccounts[numAccounts].balance = 0;\r\n                ++numAccounts;\r\n                StatEvent(\"ok: acct added\");\r\n        }\r\n\r\n\r\n        // ----------------------------\r\n        // get acct info\r\n        // ----------------------------\r\n        function getAccountInfo(address _addr) constant returns(uint _idx, uint _pctx10, bool _evenStart, uint _credited, uint _balance) {\r\n                for (uint i = 0; i < numAccounts; i++ ) {\r\n                        address addr = partnerAccounts[i].addr;\r\n                        if (addr == _addr) {\r\n                                _idx = i;\r\n                                _pctx10 = partnerAccounts[i].pctx10;\r\n                                _evenStart = partnerAccounts[i].evenStart;\r\n                                _credited = partnerAccounts[i].credited;\r\n                                _balance = partnerAccounts[i].balance;\r\n                                StatEvent(\"ok: found acct\");\r\n                                return;\r\n                        }\r\n                }\r\n                StatEvent(\"err: acct not found\");\r\n        }\r\n\r\n\r\n        // ----------------------------\r\n        // get total percentages x10\r\n        // ----------------------------\r\n        function getTotalPctx10() constant returns(uint _totalPctx10) {\r\n                _totalPctx10 = 0;\r\n                for (uint i = 0; i < numAccounts; i++ ) {\r\n                        _totalPctx10 += partnerAccounts[i].pctx10;\r\n                }\r\n                StatEventI(\"ok: total pctx10\", _totalPctx10);\r\n        }\r\n\r\n\r\n        // ----------------------------\r\n        // get no. accts that are set for even split\r\n        // ----------------------------\r\n        function getNumEvenSplits() constant returns(uint _numEvenSplits) {\r\n                _numEvenSplits = 0;\r\n                for (uint i = 0; i < numAccounts; i++ ) {\r\n                        if (partnerAccounts[i].evenStart) {\r\n                                ++_numEvenSplits;\r\n                        }\r\n                }\r\n                StatEventI(\"ok: even splits\", _numEvenSplits);\r\n        }\r\n\r\n\r\n        // -------------------------------------------\r\n        // default payable function.\r\n        // call us with plenty of gas, or catastrophe will ensue\r\n        // note: you can call this fcn with amount of zero to force distribution\r\n        // -------------------------------------------\r\n        function () payable {\r\n                totalFundsReceived += msg.value;\r\n                holdoverBalance += msg.value;\r\n                StatEventI(\"ok: incoming\", msg.value);\r\n        }\r\n\r\n\r\n        // ----------------------------\r\n        // distribute funds to all partners\r\n        // ----------------------------\r\n        function distribute() {\r\n                //only payout if we have more than 1000 wei\r\n                if (holdoverBalance < TENHUNDWEI) {\r\n                        return;\r\n                }\r\n                //first pay accounts that are not constrained by even distribution\r\n                //each account gets their prescribed percentage of this holdover.\r\n                uint i;\r\n                uint pctx10;\r\n                uint acctDist;\r\n                uint maxAcctDist;\r\n                uint numEvenSplits = 0;\r\n                for (i = 0; i < numAccounts; i++ ) {\r\n                        if (partnerAccounts[i].evenStart) {\r\n                                ++numEvenSplits;\r\n                        } else {\r\n                                pctx10 = partnerAccounts[i].pctx10;\r\n                                acctDist = holdoverBalance * pctx10 / TENHUNDWEI;\r\n                                //we also double check to ensure that the amount awarded cannot exceed the\r\n                                //total amount due to this acct. note: this check is necessary, cuz here we\r\n                                //might not distribute the full holdover amount during each pass.\r\n                                maxAcctDist = totalFundsReceived * pctx10 / TENHUNDWEI;\r\n                                if (partnerAccounts[i].credited >= maxAcctDist) {\r\n                                        acctDist = 0;\r\n                                } else if (partnerAccounts[i].credited + acctDist > maxAcctDist) {\r\n                                        acctDist = maxAcctDist - partnerAccounts[i].credited;\r\n                                }\r\n                                partnerAccounts[i].credited += acctDist;\r\n                                partnerAccounts[i].balance += acctDist;\r\n                                totalFundsDistributed += acctDist;\r\n                                holdoverBalance -= acctDist;\r\n                        }\r\n                }\r\n                //now pay accounts that are constrained by even distribution. we split whatever is\r\n                //left of the holdover evenly.\r\n                uint distAmount = holdoverBalance;\r\n                if (totalFundsDistributed < evenDistThresh) {\r\n                        for (i = 0; i < numAccounts; i++ ) {\r\n                                if (partnerAccounts[i].evenStart) {\r\n                                        acctDist = distAmount / numEvenSplits;\r\n                                        //we also double check to ensure that the amount awarded cannot exceed the\r\n                                        //total amount due to this acct. note: this check is necessary, cuz here we\r\n                                        //might not distribute the full holdover amount during each pass.\r\n                                        uint fundLimit = totalFundsReceived;\r\n                                        if (fundLimit > evenDistThresh)\r\n                                                fundLimit = evenDistThresh;\r\n                                        maxAcctDist = fundLimit / numEvenSplits;\r\n                                        if (partnerAccounts[i].credited >= maxAcctDist) {\r\n                                                acctDist = 0;\r\n                                        } else if (partnerAccounts[i].credited + acctDist > maxAcctDist) {\r\n                                                acctDist = maxAcctDist - partnerAccounts[i].credited;\r\n                                        }\r\n                                        partnerAccounts[i].credited += acctDist;\r\n                                        partnerAccounts[i].balance += acctDist;\r\n                                        totalFundsDistributed += acctDist;\r\n                                        holdoverBalance -= acctDist;\r\n                                }\r\n                        }\r\n                }\r\n                //now, if there are any funds left (because of a remainder in the even split), then distribute them\r\n                //according to percentages. note that this must be done here, even if we haven't passed the even distribution\r\n                //threshold, to ensure that we don't get stuck with a remainder amount that cannot be distributed.\r\n                distAmount = holdoverBalance;\r\n                if (distAmount > 0) {\r\n                        for (i = 0; i < numAccounts; i++ ) {\r\n                                if (partnerAccounts[i].evenStart) {\r\n                                        pctx10 = partnerAccounts[i].pctx10;\r\n                                        acctDist = distAmount * pctx10 / TENHUNDWEI;\r\n                                        //we also double check to ensure that the amount awarded cannot exceed the\r\n                                        //total amount due to this acct. note: this check is necessary, cuz here we\r\n                                        //might not distribute the full holdover amount during each pass.\r\n                                        maxAcctDist = totalFundsReceived * pctx10 / TENHUNDWEI;\r\n                                        if (partnerAccounts[i].credited >= maxAcctDist) {\r\n                                                acctDist = 0;\r\n                                        } else if (partnerAccounts[i].credited + acctDist > maxAcctDist) {\r\n                                                acctDist = maxAcctDist - partnerAccounts[i].credited;\r\n                                        }\r\n                                        partnerAccounts[i].credited += acctDist;\r\n                                        partnerAccounts[i].balance += acctDist;\r\n                                        totalFundsDistributed += acctDist;\r\n                                        holdoverBalance -= acctDist;\r\n                                }\r\n                        }\r\n                }\r\n                StatEvent(\"ok: distributed funds\");\r\n        }\r\n\r\n\r\n        // ----------------------------\r\n        // withdraw account balance\r\n        // ----------------------------\r\n        function withdraw() {\r\n                for (uint i = 0; i < numAccounts; i++ ) {\r\n                        address addr = partnerAccounts[i].addr;\r\n                        if (addr == msg.sender) {\r\n                                uint amount = partnerAccounts[i].balance;\r\n                                if (amount == 0) { \r\n                                        StatEvent(\"err: balance is zero\");\r\n                                } else {\r\n                                        partnerAccounts[i].balance = 0;\r\n                                        totalFundsWithdrawn += amount;\r\n                                        if (!msg.sender.call.gas(withdrawGas).value(amount)())\r\n                                                throw;\r\n                                        StatEventI(\"ok: rewards paid\", amount);\r\n                                }\r\n                        }\r\n                }\r\n        }\r\n\r\n\r\n        // ----------------------------\r\n        // suicide\r\n        // ----------------------------\r\n        function hariKari() {\r\n                if (msg.sender != owner) {\r\n                        StatEvent(\"err: not owner\");\r\n                        return;\r\n                }\r\n                if (settingsState == SettingStateValue.locked) {\r\n                        StatEvent(\"err: locked\");\r\n                        return;\r\n                }\r\n                suicide(owner);\r\n        }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"withdrawGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFundsDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_thresh\",\"type\":\"uint256\"}],\"name\":\"setEvenDistThresh\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalPctx10\",\"outputs\":[{\"name\":\"_totalPctx10\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settingsState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFundsWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_pctx10\",\"type\":\"uint256\"},{\"name\":\"_evenStart\",\"type\":\"bool\"}],\"name\":\"addAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_pctx10\",\"type\":\"uint256\"},{\"name\":\"_evenStart\",\"type\":\"bool\"},{\"name\":\"_credited\",\"type\":\"uint256\"},{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumEvenSplits\",\"outputs\":[{\"name\":\"_numEvenSplits\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"hariKari\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFundsReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_withdrawGas\",\"type\":\"uint256\"}],\"name\":\"setWitdrawGas\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"evenDistThresh\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdoverBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msg\",\"type\":\"string\"}],\"name\":\"StatEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msg\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"StatEventI\",\"type\":\"event\"}]","ContractName":"RSPLT_F","CompilerVersion":"v0.4.6+commit.2dabbdf0","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}