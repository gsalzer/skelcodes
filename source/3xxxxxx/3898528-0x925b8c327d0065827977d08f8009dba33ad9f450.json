{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract boleno {\r\n    string public constant name = \"Boleno\";                 // Token name\r\n    string public constant symbol = \"BLN\";                  // Boleno token symbol\r\n    uint8 public constant decimals = 18;                    // Number of decimals\r\n    uint256 public totalSupply = 10**25;                    // The initial supply (10 million) in base unit\r\n    address public supplier;                                // Boleno supplier address\r\n    uint public blnpereth = 50;                             // Price of 1 Ether in Bolenos by the supplier\r\n    uint public bounty = 15;                                // Percentage of bounty program. Initiates with 15%\r\n    bool public sale = false;                               // Is there an ongoing sale?\r\n    bool public referral = false;                           // Is the referral program enabled?\r\n\r\n    // Events\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    mapping (address => uint256) public balances;           // Balances\r\n    mapping(address => mapping (address => uint256)) allowed;// Record of allowances\r\n\r\n    // Initialization\r\n    function boleno() {\r\n      supplier = msg.sender;                                // Supplier is contract creator\r\n      balances[supplier] = totalSupply;                     // The initial supply goes to supplier\r\n    }\r\n\r\n    // For functions that require only supplier usage\r\n    modifier onlySupplier {\r\n      if (msg.sender != supplier) throw;\r\n      _;\r\n    }\r\n\r\n    // Token transfer\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n      if (now < 1502755200 && msg.sender != supplier) throw;// Cannot trade until Tuesday, August 15, 2017 12:00:00 AM (End of ICO)\r\n      if (balances[msg.sender] < _value) throw;            // Does the spender have enough Bolenos to send?\r\n      if (balances[_to] + _value < balances[_to]) throw;   // Overflow?\r\n      balances[msg.sender] -= _value;                      // Subtract the Bolenos from the sender's balance\r\n      balances[_to] += _value;                             // Add the Bolenos to the recipient's balance\r\n      Transfer(msg.sender, _to, _value);                   // Send Bolenos transfer event\r\n      return true;                                         // Return true to client\r\n    }\r\n\r\n    // Token transfer on your behalf (i.e. by contracts)\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n      if (now < 1502755200 && _from != supplier) throw;     // Cannot trade until Tuesday, August 15, 2017 12:00:00 AM (End of ICO)\r\n      if (balances[_from] < _value) throw;                  // Does the spender have enough Bolenos to send?\r\n      if(allowed[_from][msg.sender] < _value) throw;        // Is the sender allowed to spend as much money on behalf of the spender?\r\n      if (balances[_to] + _value < balances[_to]) throw;    // Overflow?\r\n      balances[_from] -= _value;                            // Subtract the Bolenos from the sender's balance\r\n      allowed[_from][msg.sender] -= _value;                 // Update allowances record\r\n      balances[_to] += _value;                              // Add the Bolenos to the recipient's balance\r\n      Transfer(_from, _to, _value);                         // Send Bolenos transfer event\r\n      return true;                                          // Return true to client\r\n     }\r\n\r\n     // Allows someone (i.e a contract) to spend on your behalf multiple times up to a certain value.\r\n     // If this function is called again, it overwrites the current allowance with _value.\r\n     // Approve 0 to cancel previous approval\r\n     function approve(address _spender, uint256 _value) returns (bool success) {\r\n       allowed[msg.sender][_spender] = _value;             // Update allowances record\r\n       Approval(msg.sender, _spender, _value);             // Send approval event\r\n       return true;                                        // Return true to client\r\n     }\r\n\r\n     // Check how much someone approved you to spend on their behalf\r\n     function allowance(address _owner, address _spender) returns (uint256 bolenos) {\r\n       return allowed[_owner][_spender];                   // Check the allowances record\r\n     }\r\n\r\n    // What is the Boleno balance of a particular person?\r\n    function balanceOf(address _owner) returns (uint256 bolenos){\r\n      return balances[_owner];\r\n    }\r\n\r\n    /*\r\n     Crowdsale related functions\r\n    */\r\n\r\n    // Referral bounty system\r\n    function referral(address referrer) payable {\r\n      if(sale != true) throw;                               // Is there an ongoing sale?\r\n      if(referral != true) throw;                           // Is referral bounty allowed by supplier?\r\n      if(balances[referrer] < 100**18) throw;               // Make sure referrer already has at least 100 Bolenos\r\n      uint256 bolenos = msg.value * blnpereth;              // Determine amount of equivalent Bolenos to the Ethers received\r\n      /*\r\n        First give Bolenos to the purchaser\r\n      */\r\n      uint256 purchaserBounty = (bolenos / 100) * (100 + bounty);// Add bounty to the purchased amount\r\n      if(balances[supplier] < purchaserBounty) throw;       // Does the supplier have enough BLN tokens to sell?\r\n      if (balances[msg.sender] + purchaserBounty < balances[msg.sender]) throw; // Overflow?\r\n      balances[supplier] -= purchaserBounty;                // Subtract the Bolenos from the supplier's balance\r\n      balances[msg.sender] += purchaserBounty;              // Add the Bolenos to the buyer's balance\r\n      Transfer(supplier, msg.sender, purchaserBounty);      // Send Bolenos transfer event\r\n      /*\r\n        Then give Bolenos to the referrer\r\n      */\r\n      uint256 referrerBounty = (bolenos / 100) * bounty;    // Only the bounty percentage is added to the referrer\r\n      if(balances[supplier] < referrerBounty) throw;        // Does the supplier have enough BLN tokens to sell?\r\n      if (balances[referrer] + referrerBounty < balances[referrer]) throw; // Overflow?\r\n      balances[supplier] -= referrerBounty;                 // Subtract the Bolenos from the supplier's balance\r\n      balances[referrer] += referrerBounty;                 // Add the Bolenos to the buyer's balance\r\n      Transfer(supplier, referrer, referrerBounty);         // Send Bolenos transfer event\r\n    }\r\n\r\n    // Set the number of BLNs sold per ETH (only by the supplier).\r\n    function setbounty(uint256 newBounty) onlySupplier {\r\n      bounty = newBounty;\r\n    }\r\n\r\n    // Set the number of BLNs sold per ETH (only by the supplier).\r\n    function setblnpereth(uint256 newRate) onlySupplier {\r\n      blnpereth = newRate;\r\n    }\r\n\r\n    // Trigger Sale (only by the supplier)\r\n    function triggerSale(bool newSale) onlySupplier {\r\n      sale = newSale;\r\n    }\r\n\r\n    // Transfer both supplier status and all held Boleno tokens supply to a different address (only supplier)\r\n    function transferSupply(address newSupplier) onlySupplier {\r\n      if (balances[newSupplier] + balances[supplier] < balances[newSupplier]) throw;// Overflow?\r\n      uint256 supplyValue = balances[supplier];             // Determine current value of the supply\r\n      balances[newSupplier] += supplyValue;                 // Add supply to new supplier\r\n      balances[supplier] -= supplyValue;                    // Substract supply from old supplier\r\n      Transfer(supplier, newSupplier, supplyValue);         // Send Bolenos transfer event\r\n      supplier = newSupplier;                               // Transfer supplier status\r\n    }\r\n\r\n    // Claim sale Ethers. Can be executed by anyone.\r\n    function claimSale(){\r\n      address dao = 0x400Be625f1308a56C19C38b1A21A50FCE8c62617;// Hardcoded address of the Bolenum private DAO\r\n      dao.transfer(this.balance);                           // Send all collected Ethers to the address\r\n    }\r\n\r\n    // Fallback function. Used for buying Bolenos from supplier by simply sending Ethers to contract\r\n    function () payable {\r\n      if(sale != true) throw;                               // Is there an ongoing sale?\r\n      uint256 bolenos = msg.value * blnpereth;              // Determine amount of equivalent Bolenos to the Ethers received\r\n      if(balances[supplier] < bolenos) throw;               // Does the supplier have enough BLN tokens to sell?\r\n      if (balances[msg.sender] + bolenos < balances[msg.sender]) throw; // Overflow?\r\n      balances[supplier] -= bolenos;                        // Subtract the Bolenos the supplier's balance\r\n      balances[msg.sender] += bolenos;                      // Add the Bolenos to the buyer's balance\r\n      Transfer(supplier, msg.sender, bolenos);              // Send Bolenos transfer event\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setblnpereth\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referral\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blnpereth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBounty\",\"type\":\"uint256\"}],\"name\":\"setbounty\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"bolenos\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"referral\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSupplier\",\"type\":\"address\"}],\"name\":\"transferSupply\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSale\",\"type\":\"bool\"}],\"name\":\"triggerSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"bolenos\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"boleno","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://92100dc5774082a4a566de24b957abff98d28c92967c59237b50811d9b8446dc"}]}