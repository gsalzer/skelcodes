{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * SimpleRegistrar lets you claim a subdomain name for yourself and configure it\r\n * all in one step. This one is deployed at registrar.gimmethe.eth.\r\n * \r\n * To use it, simply call register() with the name you want and the appropriate\r\n * fee (initially 0.01 ether, but adjustable over time; call fee() to get the\r\n * current price). For example, in a web3 console:\r\n * \r\n *     var simpleRegistrarContract = web3.eth.contract([{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":true,\"type\":\"function\"}]);\r\n *     var simpleRegistrar = simpleRegistrarContract.at(\"0x1bebbc372772817d5d11a06ee2a4eba33ab6ee65\");\r\n *     simpleRegistrar.register('myname', {from: accounts[0], value: simpleRegistrar.fee(), gas: 150000});\r\n * \r\n * SimpleRegistrar will take care of everything: registering your subdomain,\r\n * setting up a resolver, and pointing that resolver at the account that called\r\n * it.\r\n * \r\n * Funds received from running this service are reinvested into building new\r\n * ENS tools and utilities.\r\n * \r\n * Note that the Deed owning gimmethe.eth is not currently in a holding\r\n * contract, so I could theoretically change the registrar at any time. This is\r\n * a temporary measure, as it may be necessary to replace this contract with an\r\n * updated one as ENS best practices change. You have only my word that I will\r\n * never interfere with a properly registered subdomain of gimmethe.eth.\r\n * \r\n * Author: Nick Johnson <nick@arachnidlabs.com>\r\n * Copyright 2017, Nick Johnson\r\n * Licensed under the Apache Public License, version 2.0.\r\n */\r\npragma solidity ^0.4.10;\r\n\r\ncontract AbstractENS {\r\n    function owner(bytes32 node) constant returns(address);\r\n    function resolver(bytes32 node) constant returns(address);\r\n    function ttl(bytes32 node) constant returns(uint64);\r\n    function setOwner(bytes32 node, address owner);\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\r\n    function setResolver(bytes32 node, address resolver);\r\n    function setTTL(bytes32 node, uint64 ttl);\r\n}\r\n\r\ncontract owned {\r\n    address owner;\r\n    \r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier owner_only() {\r\n        if(msg.sender != owner) throw;\r\n        _;\r\n    }\r\n    \r\n    function setOwner(address _owner) owner_only {\r\n        owner = _owner;\r\n    }\r\n}\r\n\r\ncontract Resolver {\r\n    function setAddr(bytes32 node, address addr);\r\n}\r\n\r\ncontract ReverseRegistrar {\r\n    function claim(address owner) returns (bytes32 node);\r\n}\r\n\r\ncontract SimpleRegistrar is owned {\r\n    // namehash('addr.reverse')\r\n    bytes32 constant RR_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\r\n\r\n    event HashRegistered(bytes32 indexed hash, address indexed owner);\r\n\r\n    AbstractENS public ens;\r\n    bytes32 public rootNode;\r\n    uint public fee;\r\n    // Temporary until we have a public address for it\r\n    Resolver public resolver;\r\n    \r\n    function SimpleRegistrar(AbstractENS _ens, bytes32 _rootNode, uint _fee, Resolver _resolver) {\r\n        ens = _ens;\r\n        rootNode = _rootNode;\r\n        fee = _fee;\r\n        resolver = _resolver;\r\n        \r\n        // Assign reverse record to sender\r\n        ReverseRegistrar(ens.owner(RR_NODE)).claim(msg.sender);\r\n    }\r\n    \r\n    function withdraw() owner_only {\r\n        if(!msg.sender.send(this.balance)) throw;\r\n    }\r\n    \r\n    function setFee(uint _fee) owner_only {\r\n        fee = _fee;\r\n    }\r\n    \r\n    function setResolver(Resolver _resolver) owner_only {\r\n        resolver = _resolver;\r\n    }\r\n    \r\n    modifier can_register(bytes32 label) {\r\n        if(ens.owner(sha3(rootNode, label)) != 0 || msg.value < fee) throw;\r\n        _;\r\n    }\r\n    \r\n    function register(string name) payable can_register(sha3(name)) {\r\n        var label = sha3(name);\r\n        \r\n        // First register the name to ourselves\r\n        ens.setSubnodeOwner(rootNode, label, this);\r\n        \r\n        // Now set a resolver up\r\n        var node = sha3(rootNode, label);\r\n        ens.setResolver(node, resolver);\r\n        resolver.setAddr(node, msg.sender);\r\n        \r\n        // Now transfer ownership to the user\r\n        ens.setOwner(node, msg.sender);\r\n        \r\n        HashRegistered(label, msg.sender);\r\n        \r\n        // Send any excess ether back\r\n        if(msg.value > fee) {\r\n            if(!msg.sender.send(msg.value - fee)) throw;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rootNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ens\",\"type\":\"address\"},{\"name\":\"_rootNode\",\"type\":\"bytes32\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"HashRegistered\",\"type\":\"event\"}]","ContractName":"SimpleRegistrar","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b91da2f2435333aa8d14cea1b05d8a548a1f9d36e1ee63116aa284e061caf1ddd000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000005ffc014343cd971b7eb70732021e26c35b744cc4","Library":"","SwarmSource":"bzzr://e4f8e1bc523d11c328257d2238d164ce2cbd1f96f98d08efc48b6cd6028ffcc0"}]}