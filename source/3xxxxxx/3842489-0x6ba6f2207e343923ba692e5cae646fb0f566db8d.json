{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\ncontract CryptoPunks {\r\n\r\n    // You can use this hash to verify the image file containing all the punks\r\n    string public imageHash = \"ac39af4793119ee46bbff351d8cb6b5f23da60222126add4268e261199a2921b\";\r\n\r\n    address owner;\r\n\r\n    string public standard = 'CryptoPunks';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    uint public nextPunkIndexToAssign = 0;\r\n\r\n    //bool public allPunksAssigned = false;\r\n    uint public punksRemainingToAssign = 0;\r\n    uint public numberOfPunksToReserve;\r\n    uint public numberOfPunksReserved = 0;\r\n\r\n    //mapping (address => uint) public addressToPunkIndex;\r\n    mapping (uint => address) public punkIndexToAddress;\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    struct Offer {\r\n        bool isForSale;\r\n        uint punkIndex;\r\n        address seller;\r\n        uint minValue;          // in ether\r\n        address onlySellTo;     // specify to sell only to a specific person\r\n    }\r\n\r\n    // A record of punks that are offered for sale at a specific minimum value, and perhaps to a specific person\r\n    mapping (uint => Offer) public punksOfferedForSale;\r\n\r\n    mapping (address => uint) public pendingWithdrawals;\r\n\r\n    event Assign(address indexed to, uint256 punkIndex);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event PunkTransfer(address indexed from, address indexed to, uint256 punkIndex);\r\n    event PunkOffered(uint indexed punkIndex, uint minValue, address indexed toAddress);\r\n    event PunkBought(uint indexed punkIndex, uint value, address indexed fromAddress, address indexed toAddress);\r\n    event PunkNoLongerForSale(uint indexed punkIndex);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function CryptoPunks() payable {\r\n        //        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\r\n        owner = msg.sender;\r\n        totalSupply = 10000;                        // Update total supply\r\n        punksRemainingToAssign = totalSupply;\r\n        numberOfPunksToReserve = 1000;\r\n        name = \"CRYPTOPUNKS\";                                   // Set the name for display purposes\r\n        symbol = \"Ï¾\";                               // Set the symbol for display purposes\r\n        decimals = 0;                                       // Amount of decimals for display purposes\r\n    }\r\n\r\n    function reservePunksForOwner(uint maxForThisRun) {\r\n        if (msg.sender != owner) throw;\r\n        if (numberOfPunksReserved >= numberOfPunksToReserve) throw;\r\n        uint numberPunksReservedThisRun = 0;\r\n        while (numberOfPunksReserved < numberOfPunksToReserve && numberPunksReservedThisRun < maxForThisRun) {\r\n            punkIndexToAddress[nextPunkIndexToAssign] = msg.sender;\r\n            Assign(msg.sender, nextPunkIndexToAssign);\r\n            numberPunksReservedThisRun++;\r\n            nextPunkIndexToAssign++;\r\n        }\r\n        punksRemainingToAssign -= numberPunksReservedThisRun;\r\n        numberOfPunksReserved += numberPunksReservedThisRun;\r\n        balanceOf[msg.sender] += numberPunksReservedThisRun;\r\n    }\r\n\r\n    function getPunk(uint punkIndex) {\r\n        if (punksRemainingToAssign == 0) throw;\r\n        if (punkIndexToAddress[punkIndex] != 0x0) throw;\r\n        punkIndexToAddress[punkIndex] = msg.sender;\r\n        balanceOf[msg.sender]++;\r\n        punksRemainingToAssign--;\r\n        Assign(msg.sender, punkIndex);\r\n    }\r\n\r\n    // Transfer ownership of a punk to another user without requiring payment\r\n    function transferPunk(address to, uint punkIndex) {\r\n        if (punkIndexToAddress[punkIndex] != msg.sender) throw;\r\n        punkIndexToAddress[punkIndex] = to;\r\n        balanceOf[msg.sender]--;\r\n        balanceOf[to]++;\r\n        Transfer(msg.sender, to, 1);\r\n        PunkTransfer(msg.sender, to, punkIndex);\r\n    }\r\n\r\n    function punkNoLongerForSale(uint punkIndex) {\r\n        if (punkIndexToAddress[punkIndex] != msg.sender) throw;\r\n        punksOfferedForSale[punkIndex] = Offer(false, punkIndex, msg.sender, 0, 0x0);\r\n        PunkNoLongerForSale(punkIndex);\r\n    }\r\n\r\n    function offerPunkForSale(uint punkIndex, uint minSalePriceInWei) {\r\n        if (punkIndexToAddress[punkIndex] != msg.sender) throw;\r\n        punksOfferedForSale[punkIndex] = Offer(true, punkIndex, msg.sender, minSalePriceInWei, 0x0);\r\n        PunkOffered(punkIndex, minSalePriceInWei, 0x0);\r\n    }\r\n\r\n    function offerPunkForSaleToAddress(uint punkIndex, uint minSalePriceInWei, address toAddress) {\r\n        if (punkIndexToAddress[punkIndex] != msg.sender) throw;\r\n        punksOfferedForSale[punkIndex] = Offer(true, punkIndex, msg.sender, minSalePriceInWei, toAddress);\r\n        PunkOffered(punkIndex, minSalePriceInWei, toAddress);\r\n    }\r\n\r\n    function buyPunk(uint punkIndex) payable {\r\n        Offer offer = punksOfferedForSale[punkIndex];\r\n        if (!offer.isForSale) throw;                // punk not actually for sale\r\n        if (offer.onlySellTo != 0x0 && offer.onlySellTo != msg.sender) throw;  // punk not supposed to be sold to this user\r\n        if (msg.value < offer.minValue) throw;      // Didn't send enough ETH\r\n        if (offer.seller != punkIndexToAddress[punkIndex]) throw; // Seller no longer owner of punk\r\n\r\n        punkIndexToAddress[punkIndex] = msg.sender;\r\n        balanceOf[offer.seller]--;\r\n        balanceOf[msg.sender]++;\r\n        Transfer(offer.seller, msg.sender, 1);\r\n\r\n        punkNoLongerForSale(punkIndex);\r\n        pendingWithdrawals[offer.seller] += msg.value;\r\n        PunkBought(punkIndex, msg.value, offer.seller, msg.sender);\r\n    }\r\n\r\n    function withdraw() {\r\n        uint amount = pendingWithdrawals[msg.sender];\r\n        // Remember to zero the pending refund before\r\n        // sending to prevent re-entrancy attacks\r\n        pendingWithdrawals[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxForThisRun\",\"type\":\"uint256\"}],\"name\":\"reservePunksForOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"punksOfferedForSale\",\"outputs\":[{\"name\":\"isForSale\",\"type\":\"bool\"},{\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"minValue\",\"type\":\"uint256\"},{\"name\":\"onlySellTo\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"imageHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPunkIndexToAssign\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"punkIndexToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"buyPunk\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"transferPunk\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfPunksToReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfPunksReserved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"},{\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"offerPunkForSaleToAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"punksRemainingToAssign\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"}],\"name\":\"offerPunkForSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"getPunk\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"punkNoLongerForSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"Assign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"PunkTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minValue\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"PunkOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"PunkBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"PunkNoLongerForSale\",\"type\":\"event\"}]","ContractName":"CryptoPunks","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cd1903deb8c3a00bcd5580c74884b992d2c40cb0e3a57a0f6045d55ce504d0a4"}]}