{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\ncontract WinMatrix\r\n {\r\n   function getCoeff(uint16 n) external returns (uint256);\r\n   function getBetsProcessed() external constant returns (uint16);\r\n }\r\n\r\ncontract SmartRoulette\r\n{\r\n    address developer;\r\n    address operator;\r\n\r\n    // Wait BlockDelay blocks before spin the wheel \r\n    uint8 BlockDelay;\r\n\r\n    // Maximum bet value for game\r\n    uint256 currentMaxBet;    \r\n\r\n    // maximum games count per block\r\n    uint64 maxBetsPerBlock;\r\n    uint64 nbBetsCurrentBlock;\r\n    \r\n    // Enable\\disable to place new bets\r\n    bool ContractState;\r\n\r\n    // table with winner coefficients\r\n    WinMatrix winMatrix;\r\n\r\n    uint16 constant maxTypeBets = 157;\r\n\r\n    //\r\n    uint256 private SmartRouletteLimit = 1;\r\n\r\n   // last game index for player (used for fast access)\r\n   mapping (address => uint64) private gambleIndex;   \r\n   \r\n   // \r\n   uint8 defaultMinCreditsOnBet; \r\n   //\r\n   mapping (uint8 => uint8) private minCreditsOnBet;\r\n\r\n   struct Gamble\r\n   {\r\n        address player;\r\n        uint256 blockNumber;\r\n        uint256 blockSpinned;\r\n        uint8 wheelResult;\r\n        uint256 bets;\r\n        bytes32 values;\r\n        bytes32 values2;\r\n   }\r\n       \r\n   Gamble[] private gambles;\r\n\r\n   enum BetTypes{number0, number1,number2,number3,number4,number5,number6,number7,number8,number9,\r\n     number10,number11,number12,number13,number14,number15,number16,number17,number18,number19,number20,number21,\r\n     number22,number23,number24,number25,number26,number27,number28,number29,number30,number31,number32,number33,\r\n     number34,number35,number36, red, black, odd, even, dozen1,dozen2,dozen3, column1,column2,column3, low,high,\r\n     pair_01, pair_02, pair_03, pair_12, pair_23, pair_36, pair_25, pair_14, pair_45, pair_56, pair_69, pair_58, pair_47,\r\n     pair_78, pair_89, pair_912, pair_811, pair_710, pair_1011, pair_1112, pair_1215, pair_1518, pair_1617, pair_1718, pair_1720,\r\n     pair_1619, pair_1922, pair_2023, pair_2124, pair_2223, pair_2324, pair_2528, pair_2629, pair_2730, pair_2829, pair_2930, pair_1114,\r\n     pair_1013, pair_1314, pair_1415, pair_1316, pair_1417, pair_1821, pair_1920, pair_2021, pair_2225, pair_2326, pair_2427, pair_2526,\r\n     pair_2627, pair_2831, pair_2932, pair_3033, pair_3132, pair_3233, pair_3134, pair_3235, pair_3336, pair_3435, pair_3536, corner_0_1_2_3,\r\n     corner_1_2_5_4, corner_2_3_6_5, corner_4_5_8_7, corner_5_6_9_8, corner_7_8_11_10, corner_8_9_12_11, corner_10_11_14_13, corner_11_12_15_14,\r\n     corner_13_14_17_16, corner_14_15_18_17, corner_16_17_20_19, corner_17_18_21_20, corner_19_20_23_22, corner_20_21_24_23, corner_22_23_26_25,\r\n     corner_23_24_27_26, corner_25_26_29_28, corner_26_27_30_29, corner_28_29_32_31, corner_29_30_33_32, corner_31_32_35_34, corner_32_33_36_35,\r\n     three_0_2_3, three_0_1_2, three_1_2_3, three_4_5_6, three_7_8_9, three_10_11_12, three_13_14_15, three_16_17_18, three_19_20_21, three_22_23_24,\r\n     three_25_26_27, three_28_29_30, three_31_32_33, three_34_35_36, six_1_2_3_4_5_6, six_4_5_6_7_8_9, six_7_8_9_10_11_12, six_10_11_12_13_14_15,\r\n     six_13_14_15_16_17_18, six_16_17_18_19_20_21, six_19_20_21_22_23_24, six_22_23_24_25_26_27, six_25_26_27_28_29_30, six_28_29_30_31_32_33,\r\n     six_31_32_33_34_35_36}\r\n   \r\n\r\n   function SmartRoulette() internal\r\n   {        \r\n        developer  = msg.sender;\r\n        operator   = msg.sender;\r\n        \r\n        winMatrix = WinMatrix(0xDA16251B2977F86cB8d4C3318e9c6F92D7fC1A8f);\r\n        if (winMatrix.getBetsProcessed() != maxTypeBets) throw;\r\n\r\n        BlockDelay = 1;        \r\n        maxBetsPerBlock = 5;\r\n        defaultMinCreditsOnBet = 1;   \r\n        ContractState  = true;  \r\n   }\r\n\r\n   function updateMaxBet() private onlyDeveloper \r\n   {      \r\n      uint256 newMaxBet = this.balance/(35*SmartRouletteLimit);\r\n\r\n      // rounds to 2 digts\r\n      newMaxBet = newMaxBet / 2560000000000000000 * 2560000000000000000;  \r\n      if (newMaxBet != currentMaxBet) \r\n      {\r\n        currentMaxBet = newMaxBet;\r\n        SettingsChanged(currentMaxBet, currentMaxBet / 256,  defaultMinCreditsOnBet, minCreditsOnBet[uint8(BetTypes.low)], minCreditsOnBet[uint8(BetTypes.dozen1)], BlockDelay, ContractState);\r\n      }\r\n   }\r\n\r\n   function changeSettings(uint256 NewSmartRouletteLimit, uint64 NewMaxBetsPerBlock, uint8 NewBlockDelay, uint8 MinCreditsOnBet50, uint8 MinCreditsOnBet33, uint8 NewDefaultMinCreditsOnBet) onlyDeveloper\r\n   {\r\n     if (NewSmartRouletteLimit > 0) SmartRouletteLimit = NewSmartRouletteLimit;\r\n\r\n     BlockDelay = NewBlockDelay;     \r\n\r\n     if (NewMaxBetsPerBlock != 0) maxBetsPerBlock = NewMaxBetsPerBlock;     \r\n\r\n      if (MinCreditsOnBet50 > 0)\r\n      {\r\n        minCreditsOnBet[uint8(BetTypes.low)] = MinCreditsOnBet50;\r\n        minCreditsOnBet[uint8(BetTypes.high)] = MinCreditsOnBet50;\r\n        minCreditsOnBet[uint8(BetTypes.red)] = MinCreditsOnBet50;\r\n        minCreditsOnBet[uint8(BetTypes.black)] = MinCreditsOnBet50;\r\n        minCreditsOnBet[uint8(BetTypes.odd)] = MinCreditsOnBet50;\r\n        minCreditsOnBet[uint8(BetTypes.even)] = MinCreditsOnBet50;\r\n      }  \r\n\r\n      if (MinCreditsOnBet33 > 0)\r\n      {\r\n        minCreditsOnBet[uint8(BetTypes.dozen1)] = MinCreditsOnBet33;\r\n        minCreditsOnBet[uint8(BetTypes.dozen2)] = MinCreditsOnBet33;\r\n        minCreditsOnBet[uint8(BetTypes.dozen3)] = MinCreditsOnBet33;\r\n        minCreditsOnBet[uint8(BetTypes.column1)] = MinCreditsOnBet33;\r\n        minCreditsOnBet[uint8(BetTypes.column2)] = MinCreditsOnBet33;\r\n        minCreditsOnBet[uint8(BetTypes.column3)] = MinCreditsOnBet33;\r\n      }\r\n\r\n      if (NewDefaultMinCreditsOnBet > 0) defaultMinCreditsOnBet = NewDefaultMinCreditsOnBet;\r\n\r\n     updateMaxBet();\r\n   }\r\n   \r\n   function deleteContract() onlyDeveloper  \r\n   {\r\n        suicide(msg.sender);\r\n   }\r\n\r\n   // bit from 0 to 255\r\n   function isBitSet(uint256 data, uint8 bit) private constant returns (bool ret)\r\n   {\r\n       assembly {\r\n            ret := iszero(iszero(and(data, exp(2,bit))))\r\n        }\r\n        return ret;\r\n   }\r\n\r\n   // unique combination of bet and wheelResult, used for access to WinMatrix\r\n   function getIndex(uint16 bet, uint16 wheelResult) private constant returns (uint16)\r\n   {\r\n      return (bet+1)*256 + (wheelResult+1);\r\n   }\r\n\r\n   // n form 1 <= to <= 32\r\n   function getBetValue(bytes32 values, uint8 n) private constant returns (uint256)\r\n   {\r\n        // bet in credits (1..256) \r\n        uint256 bet = uint256(values[32-n])+1;\r\n\r\n         // check min bet\r\n        uint8 minCredits = minCreditsOnBet[n];\r\n        if (minCredits == 0) minCredits = defaultMinCreditsOnBet;\r\n        if (bet < minCredits) throw;\r\n        \r\n        // bet in wei\r\n        bet = currentMaxBet*bet/256;\r\n        if (bet > currentMaxBet) throw;         \r\n\r\n        return bet;        \r\n   }\r\n\r\n   function getBetValueByGamble(Gamble gamble, uint8 n) private constant returns (uint256) \r\n   {\r\n      if (n<=32) return getBetValue(gamble.values, n);\r\n      if (n<=64) return getBetValue(gamble.values2, n-32);\r\n      // there are 64 maximum unique bets (positions) in one game\r\n      throw;\r\n   }\r\n  \r\n   function totalGames() constant returns (uint256)\r\n   {\r\n       return gambles.length;\r\n   }\r\n   \r\n   function getSettings() constant returns(uint256 maxBet, uint256 oneCredit, uint8 MinBetInCredits, uint8 MinBetInCredits_50,uint8 MinBetInCredits_33, uint8 blockDelayBeforeSpin, bool contractState)\r\n    {\r\n        maxBet=currentMaxBet;\r\n        oneCredit=currentMaxBet / 256; \r\n        blockDelayBeforeSpin=BlockDelay;        \r\n        MinBetInCredits = defaultMinCreditsOnBet;\r\n        MinBetInCredits_50 = minCreditsOnBet[uint8(BetTypes.low)]; \r\n        MinBetInCredits_33 = minCreditsOnBet[uint8(BetTypes.column1)]; \r\n        contractState = ContractState;\r\n        return;\r\n    }\r\n   \r\n    modifier onlyDeveloper() \r\n    {\r\n       if (msg.sender != developer) throw;\r\n       _;\r\n    }\r\n\r\n    modifier onlyDeveloperOrOperator() \r\n    {\r\n       if (msg.sender != developer && msg.sender != operator) throw;\r\n       _;\r\n    }\r\n\r\n   function disableBetting_only_Dev()\r\n    onlyDeveloperOrOperator\r\n    {\r\n        ContractState=false;\r\n    }\r\n\r\n\r\n    function changeOperator(address newOperator) onlyDeveloper\r\n    {\r\n       operator = newOperator;\r\n    }\r\n\r\n    function enableBetting_only_Dev()\r\n    onlyDeveloperOrOperator\r\n    {\r\n        ContractState=true;\r\n\r\n    }\r\n\r\n    event PlayerBet(address player, uint256 block, uint256 gambleId);\r\n    event EndGame(address player, uint8 result, uint256 gambleId);\r\n    event SettingsChanged(uint256 maxBet, uint256 oneCredit, uint8 DefaultMinBetInCredits, uint8 MinBetInCredits50, uint8 MinBetInCredits33, uint8 blockDelayBeforeSpin, bool contractState);\r\n    event ErrorLog(address player, string message);\r\n\r\n   function totalBetValue(Gamble g) private constant returns (uint256)\r\n   {              \r\n       uint256 totalBetsValue = 0; \r\n       uint8 nPlayerBetNo = 0;\r\n       for(uint8 i=0; i < maxTypeBets;i++) \r\n        if (isBitSet(g.bets, i))\r\n        {\r\n          totalBetsValue += getBetValueByGamble(g, nPlayerBetNo+1);\r\n          nPlayerBetNo++;\r\n        }\r\n\r\n       return totalBetsValue;\r\n   }\r\n\r\n   function totalBetCount(Gamble g) private constant returns (uint256)\r\n   {              \r\n       uint256 totalBets = 0; \r\n       for(uint8 i=0; i < maxTypeBets;i++) \r\n        if (isBitSet(g.bets, i)) totalBets++;          \r\n       return totalBets;   \r\n   }\r\n\r\n   function placeBet(uint256 bets, bytes32 values1,bytes32 values2)  payable\r\n   {\r\n       if (ContractState == false)\r\n       {\r\n         ErrorLog(msg.sender, \"ContractDisabled\");\r\n         if (msg.sender.send(msg.value) == false) throw;\r\n         return;\r\n       } \r\n\r\n       if (nbBetsCurrentBlock >= maxBetsPerBlock) \r\n       {\r\n         ErrorLog(msg.sender, \"checkNbBetsCurrentBlock\");\r\n         if (msg.sender.send(msg.value) == false) throw;\r\n         return;\r\n       }\r\n\r\n       if (msg.value < currentMaxBet/256 || bets == 0)\r\n       {\r\n          ErrorLog(msg.sender, \"Wrong bet value\");\r\n          if (msg.sender.send(msg.value) == false) throw;\r\n          return;\r\n       }\r\n\r\n       if (msg.value > currentMaxBet)\r\n       {\r\n          ErrorLog(msg.sender, \"Limit for table\");\r\n          if (msg.sender.send(msg.value) == false) throw;\r\n          return;\r\n       }\r\n\r\n       Gamble memory g = Gamble(msg.sender, block.number, 0, 37, bets, values1,values2);\r\n\r\n       if (totalBetValue(g) != msg.value)\r\n       {\r\n          ErrorLog(msg.sender, \"Wrong bet value\");\r\n          if (msg.sender.send(msg.value) == false) throw;\r\n          return;\r\n       }       \r\n\r\n       uint64 index = gambleIndex[msg.sender];\r\n       if (index != 0)\r\n       {\r\n          if (gambles[index-1].wheelResult == 37) \r\n          {\r\n            ErrorLog(msg.sender, \"previous game is not finished\");\r\n            if (msg.sender.send(msg.value) == false) throw;\r\n            return;\r\n          }\r\n       }\r\n\r\n       if (gambles.length != 0 && block.number==gambles[gambles.length-1].blockNumber) \r\n        nbBetsCurrentBlock++;\r\n       else \r\n        nbBetsCurrentBlock = 0;\r\n\r\n       // gambleIndex is index of gambles array + 1\r\n       gambleIndex[msg.sender] = uint64(gambles.length + 1);\r\n\r\n       gambles.push(g);\r\n            \r\n       PlayerBet(msg.sender, block.number, gambles.length - 1);\r\n   }\r\n\r\n    function Invest() payable\r\n    {\r\n      updateMaxBet();\r\n    }\r\n\r\n    function SpinTheWheel(address playerSpinned) \r\n    {\r\n        if (playerSpinned==0){\r\n           playerSpinned=msg.sender;\r\n        }\r\n\r\n        uint64 index = gambleIndex[playerSpinned];\r\n        if (index == 0) \r\n        {\r\n          ErrorLog(playerSpinned, \"No games for player\");\r\n          return;\r\n        }\r\n        index--;        \r\n\r\n        if (gambles[index].wheelResult != 37)\r\n        {\r\n          ErrorLog(playerSpinned, \"Gamble already spinned\");\r\n          return;\r\n        } \r\n\r\n        uint256 playerblock = gambles[index].blockNumber;\r\n        \r\n        if (block.number <= playerblock + BlockDelay) \r\n        {\r\n          ErrorLog(msg.sender, \"Wait for playerblock+blockDelay\");\r\n          return;          \r\n        }\r\n\r\n        gambles[index].wheelResult = getRandomNumber(gambles[index].player, playerblock);\r\n        gambles[index].blockSpinned = block.number;\r\n        \r\n        if (gambles[index].player.send(getGameResult(index)) == false) throw;\r\n\r\n        EndGame(gambles[index].player, gambles[index].wheelResult, index);        \r\n    }\r\n\r\n    function getRandomNumber(address player, uint256 playerblock) private returns(uint8 wheelResult)\r\n    {\r\n        // block.blockhash - hash of the given block - only works for 256 most recent blocks excluding current\r\n        bytes32 blockHash = block.blockhash(playerblock+BlockDelay); \r\n        \r\n        if (blockHash==0) \r\n        {\r\n          ErrorLog(msg.sender, \"Cannot generate random number\");\r\n          wheelResult = 200;\r\n        }\r\n        else\r\n        {\r\n          bytes32 shaPlayer = sha3(player, blockHash);\r\n    \r\n          wheelResult = uint8(uint256(shaPlayer)%37);\r\n        }    \r\n    }\r\n\r\n    function calculateRandomNumberByBlockhash(uint256 blockHash, address player) public constant returns (uint8 wheelResult) \r\n    { \r\n          bytes32 shaPlayer = sha3(player, blockHash);\r\n    \r\n          wheelResult = uint8(uint256(shaPlayer)%37);\r\n    }\r\n\r\n    function emergencyFixGameResult(uint64 gambleId, uint256 blockHash) onlyDeveloperOrOperator\r\n    {\r\n      // Probably this function will never be called, but\r\n      // if game was not spinned in 256 blocks then block.blockhash will returns always 0 and \r\n      // we should fix this manually (you can check result with public function calculateRandomNumberByBlockhash)\r\n      Gamble memory gamble = gambles[gambleId];\r\n      if (gamble.wheelResult != 200) throw;\r\n\r\n      gambles[gambleId].wheelResult = calculateRandomNumberByBlockhash(blockHash, gamble.player);\r\n      gambles[gambleId].blockSpinned = block.number;\r\n\r\n      if (gamble.player.send(getGameResult(gambleId)) == false) throw;\r\n\r\n      EndGame(gamble.player, gamble.wheelResult, gambleId);\r\n    }\r\n\r\n    // \r\n    function checkGameResult(address playerSpinned) constant returns (uint64 gambleId, address player, uint256 blockNumber, uint256 blockSpinned, uint256 totalWin, uint8 wheelResult, uint256 bets, uint256 values1, uint256 values2, uint256 nTotalBetValue, uint256 nTotalBetCount) \r\n    {\r\n        if (playerSpinned==0){\r\n           playerSpinned=msg.sender;\r\n        }\r\n\r\n        uint64 index = gambleIndex[playerSpinned];\r\n        if (index == 0) throw;\r\n        index--;        \r\n\r\n        uint256 playerblock = gambles[index].blockNumber;        \r\n        if (block.number <= playerblock + BlockDelay) throw;\r\n        \r\n        gambles[index].wheelResult = getRandomNumber(gambles[index].player, playerblock);\r\n        gambles[index].blockSpinned = block.number;\r\n        \r\n        return getGame(index);      \r\n    }\r\n\r\n    function getGameResult(uint64 index) private constant returns (uint256 totalWin) \r\n    {\r\n        Gamble memory game = gambles[index];\r\n        totalWin = 0;\r\n        uint8 nPlayerBetNo = 0;\r\n        for(uint8 i=0; i<maxTypeBets; i++)\r\n        {                      \r\n            if (isBitSet(game.bets, i))\r\n            {              \r\n              var winMul = winMatrix.getCoeff(getIndex(i, game.wheelResult)); // get win coef\r\n              if (winMul > 0) winMul++; // + return player bet\r\n              totalWin += winMul * getBetValueByGamble(game, nPlayerBetNo+1);\r\n              nPlayerBetNo++; \r\n            }\r\n        }\r\n        if (totalWin == 0) totalWin = 1 wei; // 1 wei if lose                      \r\n    }\r\n\r\n    function getGame(uint64 index) constant returns (uint64 gambleId, address player, uint256 blockNumber, uint256 blockSpinned, uint256 totalWin, uint8 wheelResult, uint256 bets, uint256 values1, uint256 values2, uint256 nTotalBetValue, uint256 nTotalBetCount) \r\n    {\r\n        gambleId = index;\r\n        player = gambles[index].player;\r\n        totalWin = getGameResult(index);\r\n        blockNumber = gambles[index].blockNumber;\r\n        blockSpinned = gambles[index].blockSpinned;\r\n        wheelResult = gambles[index].wheelResult;\r\n        nTotalBetValue = totalBetValue(gambles[index]);\r\n        nTotalBetCount = totalBetCount(gambles[index]);\r\n        bets = gambles[index].bets;\r\n        values1 = uint256(gambles[index].values);\r\n        values2 = uint256(gambles[index].values2);        \r\n    }\r\n\r\n   function() \r\n   {\r\n      throw;\r\n   }\r\n   \r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"changeOperator\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gambleId\",\"type\":\"uint64\"},{\"name\":\"blockHash\",\"type\":\"uint256\"}],\"name\":\"emergencyFixGameResult\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bets\",\"type\":\"uint256\"},{\"name\":\"values1\",\"type\":\"bytes32\"},{\"name\":\"values2\",\"type\":\"bytes32\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalGames\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint64\"}],\"name\":\"getGame\",\"outputs\":[{\"name\":\"gambleId\",\"type\":\"uint64\"},{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"blockSpinned\",\"type\":\"uint256\"},{\"name\":\"totalWin\",\"type\":\"uint256\"},{\"name\":\"wheelResult\",\"type\":\"uint8\"},{\"name\":\"bets\",\"type\":\"uint256\"},{\"name\":\"values1\",\"type\":\"uint256\"},{\"name\":\"values2\",\"type\":\"uint256\"},{\"name\":\"nTotalBetValue\",\"type\":\"uint256\"},{\"name\":\"nTotalBetCount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableBetting_only_Dev\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deleteContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableBetting_only_Dev\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSettings\",\"outputs\":[{\"name\":\"maxBet\",\"type\":\"uint256\"},{\"name\":\"oneCredit\",\"type\":\"uint256\"},{\"name\":\"MinBetInCredits\",\"type\":\"uint8\"},{\"name\":\"MinBetInCredits_50\",\"type\":\"uint8\"},{\"name\":\"MinBetInCredits_33\",\"type\":\"uint8\"},{\"name\":\"blockDelayBeforeSpin\",\"type\":\"uint8\"},{\"name\":\"contractState\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockHash\",\"type\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"calculateRandomNumberByBlockhash\",\"outputs\":[{\"name\":\"wheelResult\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"playerSpinned\",\"type\":\"address\"}],\"name\":\"checkGameResult\",\"outputs\":[{\"name\":\"gambleId\",\"type\":\"uint64\"},{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"blockSpinned\",\"type\":\"uint256\"},{\"name\":\"totalWin\",\"type\":\"uint256\"},{\"name\":\"wheelResult\",\"type\":\"uint8\"},{\"name\":\"bets\",\"type\":\"uint256\"},{\"name\":\"values1\",\"type\":\"uint256\"},{\"name\":\"values2\",\"type\":\"uint256\"},{\"name\":\"nTotalBetValue\",\"type\":\"uint256\"},{\"name\":\"nTotalBetCount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Invest\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"NewSmartRouletteLimit\",\"type\":\"uint256\"},{\"name\":\"NewMaxBetsPerBlock\",\"type\":\"uint64\"},{\"name\":\"NewBlockDelay\",\"type\":\"uint8\"},{\"name\":\"MinCreditsOnBet50\",\"type\":\"uint8\"},{\"name\":\"MinCreditsOnBet33\",\"type\":\"uint8\"},{\"name\":\"NewDefaultMinCreditsOnBet\",\"type\":\"uint8\"}],\"name\":\"changeSettings\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"playerSpinned\",\"type\":\"address\"}],\"name\":\"SpinTheWheel\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gambleId\",\"type\":\"uint256\"}],\"name\":\"PlayerBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"gambleId\",\"type\":\"uint256\"}],\"name\":\"EndGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"maxBet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oneCredit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"DefaultMinBetInCredits\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"MinBetInCredits50\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"MinBetInCredits33\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"blockDelayBeforeSpin\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"contractState\",\"type\":\"bool\"}],\"name\":\"SettingsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ErrorLog\",\"type\":\"event\"}]","ContractName":"SmartRoulette","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1040d0d5139e30e8fbe4e675dc9dc0434ebb4659926cec4db7da43f81a0935ef"}]}