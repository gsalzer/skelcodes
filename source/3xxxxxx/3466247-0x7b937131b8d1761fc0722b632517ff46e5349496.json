{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Quitcoin is owned {\r\n/* Public variables of the token */\r\n    string public standard = 'Token 0.1';\r\n    string public name = \"Quitcoin\";\r\n    string public symbol = \"QUIT\";\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    uint public timeOfLastDistribution;\r\n    uint256 public rateOfEmissionPerYear;\r\n    address[] public arrayOfNonTrivialAccounts;\r\n    uint256 public trivialThreshold;\r\n\r\n    bytes32 public currentChallenge = 1;\r\n    uint public timeOfLastProof;\r\n    uint public difficulty = 10**77;\r\n    uint public max = 2**256-1;\r\n    uint public numclaimed = 0;\r\n    address[] public arrayOfAccountsThatHaveClaimed;\r\n\r\n    uint public ownerDailyWithdrawal = 0;\r\n    uint public timeOfLastOwnerWithdrawal = 0;\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => bool) public frozenAccount;\r\n    mapping (address => bool) public accountClaimedReward;\r\n\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event FrozenFunds(address target, bool frozen);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function Quitcoin() {\r\n        balanceOf[msg.sender] = 324779816*10**10;              // Give the creator all initial tokens\r\n        totalSupply = 324779816*10**10;                        // Update total supply\r\n        decimals = 10;                            // Amount of decimals for display purposes\r\n\ttimeOfLastDistribution = now;\r\n\trateOfEmissionPerYear = 6773979019428571428;\r\n\ttrivialThreshold = 10**8;\r\n\tarrayOfNonTrivialAccounts.push(msg.sender);\r\n\ttimeOfLastProof = now;\r\n    }\r\n\r\n    function interestDistribution() {\r\n\tif (now-timeOfLastDistribution < 1 days) throw;\r\n\tif (totalSupply < 4639711657142857143) throw;\r\n\tif (totalSupply > 2*324779816*10**10) throw;\r\n\r\n\trateOfEmissionPerYear = 846747377428571428;\r\n\r\n\tuint256 starttotalsupply = totalSupply;\r\n\r\n\tfor (uint i = 0; i < arrayOfNonTrivialAccounts.length; i ++) {\r\n\t    totalSupply += balanceOf[arrayOfNonTrivialAccounts[i]] * rateOfEmissionPerYear / 365 / starttotalsupply;\r\n\t    balanceOf[arrayOfNonTrivialAccounts[i]] += balanceOf[arrayOfNonTrivialAccounts[i]] * rateOfEmissionPerYear / 365 / starttotalsupply;\r\n\t}\r\n\r\n\ttimeOfLastDistribution = now;\r\n    }\r\n\r\n    function proofOfWork(uint nonce) {\r\n\tuint n = uint(sha3(sha3(sha3(nonce, currentChallenge, msg.sender))));\r\n\tif (n < difficulty) throw;\r\n\tif (totalSupply > 4639711657142857143) throw;\r\n\tif (accountClaimedReward[msg.sender]) throw;\r\n\t\r\n\tbalanceOf[msg.sender] += rateOfEmissionPerYear/365/24/60/10;\r\n\ttotalSupply += rateOfEmissionPerYear/365/24/60/10;\r\n\t\r\n\tnumclaimed += 1;\r\n\tarrayOfAccountsThatHaveClaimed.push(msg.sender);\r\n\taccountClaimedReward[msg.sender] = true;\r\n\r\n\tif (balanceOf[msg.sender] > trivialThreshold && balanceOf[msg.sender] - (rateOfEmissionPerYear/365/24/60/10) <= trivialThreshold) arrayOfNonTrivialAccounts.push(msg.sender);\r\n\tif (numclaimed > 49) {\r\n\t    uint timeSinceLastProof = (now-timeOfLastProof);\r\n\t    difficulty = max - (max-difficulty) * (timeSinceLastProof / 5 minutes);\r\n\r\n\t    timeOfLastProof = now;\r\n\t    currentChallenge = sha3(nonce, currentChallenge, block.blockhash(block.number-1));\r\n\t    numclaimed = 0;\r\n\t    for (uint i = 0; i < arrayOfAccountsThatHaveClaimed.length; i ++) {\r\n\t\taccountClaimedReward[arrayOfAccountsThatHaveClaimed[i]] = false;\r\n\t    }\r\n\t    arrayOfAccountsThatHaveClaimed = new address[](0);\r\n\t}\r\n    }\r\n\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) {\r\n        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\r\n\tif (frozenAccount[msg.sender]) throw;\r\n\tif (totalSupply < 4639711657142857143) throw;\r\n\tif (msg.sender == owner) {\r\n\t    if (now - timeOfLastOwnerWithdrawal > 1 days) {\r\n\t\townerDailyWithdrawal = 0;\r\n\t\ttimeOfLastOwnerWithdrawal = now;\r\n\t    }\r\n\t    if (_value+ownerDailyWithdrawal > 324779816*10**8 || totalSupply < 4747584953171428570) throw;\r\n\t    ownerDailyWithdrawal += _value;\r\n\t}\r\n        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\r\n\tif (balanceOf[msg.sender] <= trivialThreshold && balanceOf[msg.sender] + _value > trivialThreshold) {\r\n\t    for (uint i = 0; i < arrayOfNonTrivialAccounts.length; i ++) {\r\n\t\tif (msg.sender == arrayOfNonTrivialAccounts[i]) {\r\n\t\t    delete arrayOfNonTrivialAccounts[i];\r\n\t\t    arrayOfNonTrivialAccounts[i] = arrayOfNonTrivialAccounts[arrayOfNonTrivialAccounts.length-1];\r\n\t\t    arrayOfNonTrivialAccounts.length --;\r\n\t\t    break;\r\n\t\t}\r\n\t    }\r\n\t} \r\n        balanceOf[_to] += _value;                 \r\n\tif (balanceOf[_to] > trivialThreshold && balanceOf[_to] - _value <= trivialThreshold) arrayOfNonTrivialAccounts.push(_to);\r\n        Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\r\n    }\r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value)\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n\tApproval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /* Approve and then comunicate the approved contract in a single tx */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }        \r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\r\n        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\r\n\tif (frozenAccount[_from]) throw;\r\n\tif (totalSupply < 4639711657142857143) throw;\r\n\tif (_from == owner) {\r\n\t    if (now - timeOfLastOwnerWithdrawal > 1 days) {\r\n\t\townerDailyWithdrawal = 0;\r\n\t\ttimeOfLastOwnerWithdrawal = now;\r\n\t    }\r\n\t    if (_value+ownerDailyWithdrawal > 324779816*10**8 || totalSupply < 4747584953171428570) throw;\r\n\t    ownerDailyWithdrawal += _value;\r\n\t}\r\n        balanceOf[_from] -= _value;                          // Subtract from the sender\r\n\tif (balanceOf[_from] <= trivialThreshold && balanceOf[_from] + _value > trivialThreshold) {\r\n\t    for (uint i = 0; i < arrayOfNonTrivialAccounts.length; i ++) {\r\n\t\tif (_from == arrayOfNonTrivialAccounts[i]) {\r\n\t\t    delete arrayOfNonTrivialAccounts[i];\r\n\t\t    arrayOfNonTrivialAccounts[i] = arrayOfNonTrivialAccounts[arrayOfNonTrivialAccounts.length-1];\r\n\t\t    arrayOfNonTrivialAccounts.length --;\r\n\t\t    break;\r\n\t\t}\r\n\t    }\r\n\t} \r\n        balanceOf[_to] += _value;                            \r\n\tif (balanceOf[_to] > trivialThreshold && balanceOf[_to] - _value <= trivialThreshold) arrayOfNonTrivialAccounts.push(_to);\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function raiseTrivialThreshold(uint256 newTrivialThreshold) onlyOwner {\r\n\ttrivialThreshold = newTrivialThreshold;\r\n\tfor (uint i = arrayOfNonTrivialAccounts.length; i > 0; i --) {\r\n\t    if (balanceOf[arrayOfNonTrivialAccounts[i-1]] <= trivialThreshold) {\r\n\t\tdelete arrayOfNonTrivialAccounts[i-1];\r\n\t\tarrayOfNonTrivialAccounts[i-1] = arrayOfNonTrivialAccounts[arrayOfNonTrivialAccounts.length-1];\r\n\t\tarrayOfNonTrivialAccounts.length --;\r\n\t    }\r\n\t}\r\n    }\r\n\r\n    function freezeAccount(address target, bool freeze) onlyOwner {\r\n\tfrozenAccount[target] = freeze;\r\n\tFrozenFunds(target, freeze);\r\n    }\r\n\r\n    /* This unnamed function is called whenever someone tries to send ether to it */\r\n    function () {\r\n        throw;     // Prevents accidental sending of ether\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"trivialThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeOfLastOwnerWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arrayOfAccountsThatHaveClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"difficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"interestDistribution\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentChallenge\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"proofOfWork\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arrayOfNonTrivialAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountClaimedReward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeOfLastProof\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTrivialThreshold\",\"type\":\"uint256\"}],\"name\":\"raiseTrivialThreshold\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numclaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateOfEmissionPerYear\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeOfLastDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerDailyWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Quitcoin","CompilerVersion":"v0.4.10+commit.f0d539ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://23bbab317d07f9794a3a7454f8376c85e2bfc00d399717213d6cdc386abce94a"}]}