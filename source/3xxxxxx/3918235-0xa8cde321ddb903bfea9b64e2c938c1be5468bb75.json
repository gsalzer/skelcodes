{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n    \r\n\r\n  contract ERC20Interface {\r\n      // Get the total token supply\r\n      function totalSupply() constant returns (uint256 totalSupply);\r\n   \r\n      // Get the account balance of another account with address _owner\r\n      function balanceOf(address _owner) constant returns (uint256 balance);\r\n   \r\n      // Send _value amount of tokens to address _to\r\n      function transfer(address _to, uint256 _value) returns (bool success);\r\n   \r\n      // Send _value amount of tokens from address _from to address _to\r\n      function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n   \r\n      // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n      // If this function is called again it overwrites the current allowance with _value.\r\n      // this function is required for some DEX functionality\r\n      function approve(address _spender, uint256 _value) returns (bool success);\r\n   \r\n      // Returns the amount which _spender is still allowed to withdraw from _owner\r\n      function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n   \r\n      // Triggered when tokens are transferred.\r\n      event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n   \r\n      // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n      event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n  }\r\n   \r\n  contract ImmutableShares is ERC20Interface {\r\n      \r\n     string public constant symbol = \"CSH\";\r\n      string public constant name = \"Cryptex Shares\";\r\n      uint8 public constant decimals = 0;\r\n      uint256 _totalSupply = 53000000;\r\n      uint256 public totalSupply;\r\n      uint256 public TotalDividendsPerShare;\r\n      address public fallbackAccount = 0x0099F456e88E0BF635f6B2733e4228a2b5749675; \r\n\r\n      // Owner of this contract\r\n      address public owner;\r\n   \r\n      // Balances for each account\r\n      mapping(address => uint256) public balances;\r\n   \r\n      // Owner of account approves the transfer of an amount to another account\r\n      mapping(address => mapping (address => uint256)) allowed;\r\n\r\n      // dividends paid per share\r\n      mapping (address => uint256) public dividendsPaidPerShare;\r\n   \r\n      // Functions with this modifier can only be executed by the owner\r\n      modifier onlyOwner() {\r\n          if (msg.sender != owner) {\r\n              throw;\r\n          }\r\n          _;\r\n      }\r\n   \r\n      // Constructor\r\n      function ImmutableShares() {\r\n          owner = msg.sender;\r\n          balances[owner] = _totalSupply;\r\n\t      totalSupply = _totalSupply;  // Update total supply\r\n      }\r\n\r\n\r\nfunction isContract(address addr) returns (bool) {\r\n  uint size;\r\n  assembly { size := extcodesize(addr) }\r\n  return size > 0;\r\n  addr=addr;\r\n}\r\n\r\n  function changeFallbackAccount(address fallbackAccount_) {\r\n    if (msg.sender != owner) throw;\r\n    fallbackAccount = fallbackAccount_;\r\n  }\r\n\r\n//withdraw function\r\n   function withdrawMyDividend() payable {\r\n   bool IsContract = isContract(msg.sender);\r\n   if((balances[msg.sender] > 0) && (!IsContract)){\r\n     uint256 AmountToSendPerShare = TotalDividendsPerShare - dividendsPaidPerShare[msg.sender];\r\n     dividendsPaidPerShare[msg.sender] = TotalDividendsPerShare;\r\n  if((balances[msg.sender]*AmountToSendPerShare) > 0){\r\n     msg.sender.transfer(balances[msg.sender]*AmountToSendPerShare);}\r\n}\r\n\r\nif((balances[msg.sender] > 0) && (IsContract)){\r\n     uint256 AmountToSendPerShareEx = TotalDividendsPerShare - dividendsPaidPerShare[msg.sender];\r\n     dividendsPaidPerShare[msg.sender] = TotalDividendsPerShare;\r\n     if((balances[msg.sender]*AmountToSendPerShareEx) > 0){\r\n     fallbackAccount.transfer(balances[msg.sender]*AmountToSendPerShareEx);}\r\n}\r\n\r\n   }\r\n\r\n//pay receiverâ€™s dividends\r\n  function payReceiver(address ReceiverAddress) payable {\r\n   if(balances[ReceiverAddress] > 0){\r\n     uint256 AmountToSendPerShare = TotalDividendsPerShare - dividendsPaidPerShare[ReceiverAddress];\r\n     dividendsPaidPerShare[ReceiverAddress] = TotalDividendsPerShare;\r\n     if((balances[ReceiverAddress]*AmountToSendPerShare) > 0){\r\n     ReceiverAddress.transfer(balances[ReceiverAddress]*AmountToSendPerShare);}\r\n}\r\n\r\n}\r\n   \r\n      function totalSupply() constant returns (uint256 totalSupply) {\r\n          totalSupply = _totalSupply;\r\n      }\r\n   \r\n      // What is the balance of a particular account?\r\n      function balanceOf(address _owner) constant returns (uint256 balance) {\r\n          return balances[_owner];\r\n      }\r\n   \r\n      // Transfer the balance from owner's account to another account\r\n      function transfer(address _to, uint256 _amount) returns (bool success) {\r\n          if (balances[msg.sender] >= _amount \r\n              && _amount > 0\r\n              && balances[_to] + _amount > balances[_to]) {\r\n       \r\n       withdrawMyDividend();\r\n       payReceiver(_to);\r\n\r\n              balances[msg.sender] -= _amount;\r\n              balances[_to] += _amount;\r\n              Transfer(msg.sender, _to, _amount);\r\n\r\n       dividendsPaidPerShare[_to] = TotalDividendsPerShare;\r\n\r\n              return true;\r\n\r\n          } else {\r\n              return false;\r\n          }\r\n      }\r\n   \r\n      // Send _value amount of tokens from address _from to address _to\r\n      // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n      // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n      // fees in sub-currencies; the command should fail unless the _from account has\r\n      // deliberately authorized the sender of the message via some mechanism; we propose\r\n      // these standardized APIs for approval:\r\n      function transferFrom(\r\n          address _from,\r\n          address _to,\r\n          uint256 _amount\r\n     ) returns (bool success) {\r\n         if (balances[_from] >= _amount\r\n             && allowed[_from][msg.sender] >= _amount\r\n             && _amount > 0\r\n             && balances[_to] + _amount > balances[_to]) {\r\n\r\n       withdrawMyDividend();\r\n       payReceiver(_to);\r\n\r\n             balances[_from] -= _amount;\r\n             allowed[_from][msg.sender] -= _amount;\r\n             balances[_to] += _amount;\r\n             Transfer(_from, _to, _amount);\r\n\r\n       dividendsPaidPerShare[_from] = TotalDividendsPerShare;     \r\n       dividendsPaidPerShare[_to] = TotalDividendsPerShare;\r\n\r\n             return true;\r\n         } else {\r\n             return false;\r\n         }\r\n     }\r\n  \r\n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n     // If this function is called again it overwrites the current allowance with _value.\r\n     function approve(address _spender, uint256 _amount) returns (bool success) {\r\n         allowed[msg.sender][_spender] = _amount;\r\n         Approval(msg.sender, _spender, _amount);\r\n         return true;\r\n     }\r\n  \r\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n         return allowed[_owner][_spender];\r\n     }\r\n\r\n   /* This unnamed function is called whenever someone tries to send ether to it */\r\n   function () payable {\r\n   if(msg.value != 5300000000000000000) throw; //5.3 ether\r\n   TotalDividendsPerShare += (msg.value/totalSupply);\r\n   }\r\n\r\n }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ReceiverAddress\",\"type\":\"address\"}],\"name\":\"payReceiver\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawMyDividend\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalDividendsPerShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fallbackAccount_\",\"type\":\"address\"}],\"name\":\"changeFallbackAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"dividendsPaidPerShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fallbackAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ImmutableShares","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://36e7b4d6df049881fe5c0116f6372538dccd2e679f7c8fc95dec2ffe064ef595"}]}