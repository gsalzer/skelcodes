{"status":"1","message":"OK","result":[{"SourceCode":"// <ORACLIZE_API>\r\n/*\r\nCopyright (c) 2015-2016 Oraclize SRL\r\nCopyright (c) 2016 Oraclize LTD\r\n\r\n\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\n\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\n\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n*/\r\n\r\npragma solidity ^0.4.0;//please import oraclizeAPI_pre0.4.sol when solidity < 0.4.0\r\n\r\ncontract OraclizeI {\r\n    address public cbAddress;\r\n    function query(uint _timestamp, string _datasource, string _arg) payable returns (bytes32 _id);\r\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) payable returns (bytes32 _id);\r\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) payable returns (bytes32 _id);\r\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) payable returns (bytes32 _id);\r\n    function getPrice(string _datasource) returns (uint _dsprice);\r\n    function getPrice(string _datasource, uint gaslimit) returns (uint _dsprice);\r\n    function useCoupon(string _coupon);\r\n    function setProofType(byte _proofType);\r\n    function setConfig(bytes32 _config);\r\n    function setCustomGasPrice(uint _gasPrice);\r\n}\r\ncontract OraclizeAddrResolverI {\r\n    function getAddress() returns (address _addr);\r\n}\r\ncontract usingOraclize {\r\n    uint constant day = 60*60*24;\r\n    uint constant week = 60*60*24*7;\r\n    uint constant month = 60*60*24*30;\r\n    byte constant proofType_NONE = 0x00;\r\n    byte constant proofType_TLSNotary = 0x10;\r\n    byte constant proofStorage_IPFS = 0x01;\r\n    uint8 constant networkID_auto = 0;\r\n    uint8 constant networkID_mainnet = 1;\r\n    uint8 constant networkID_testnet = 2;\r\n    uint8 constant networkID_morden = 2;\r\n    uint8 constant networkID_consensys = 161;\r\n\r\n    OraclizeAddrResolverI OAR;\r\n    \r\n    OraclizeI oraclize;\r\n    modifier oraclizeAPI {\r\n        if(address(OAR)==0) oraclize_setNetwork(networkID_auto);\r\n        oraclize = OraclizeI(OAR.getAddress());\r\n        _;\r\n    }\r\n    modifier coupon(string code){\r\n        oraclize = OraclizeI(OAR.getAddress());\r\n        oraclize.useCoupon(code);\r\n        _;\r\n    }\r\n\r\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\r\n        if (getCodeSize(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed)>0){ //mainnet\r\n            OAR = OraclizeAddrResolverI(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1)>0){ //ropsten testnet\r\n            OAR = OraclizeAddrResolverI(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf)>0){ //ether.camp ide\r\n            OAR = OraclizeAddrResolverI(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x93bbbe5ce77034e3095f0479919962a903f898ad)>0){ //norsborg testnet\r\n            OAR = OraclizeAddrResolverI(0x93bbbe5ce77034e3095f0479919962a903f898ad);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa)>0){ //browser-solidity\r\n            OAR = OraclizeAddrResolverI(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function __callback(bytes32 myid, string result) {\r\n        __callback(myid, result, new bytes(0));\r\n    }\r\n    function __callback(bytes32 myid, string result, bytes proof) {\r\n    }\r\n    \r\n    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\r\n        return oraclize.getPrice(datasource);\r\n    }\r\n    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\r\n        return oraclize.getPrice(datasource, gaslimit);\r\n    }\r\n    \r\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(0, datasource, arg);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(timestamp, datasource, arg);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\r\n    }\r\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\r\n        return oraclize.cbAddress();\r\n    }\r\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\r\n        return oraclize.setProofType(proofP);\r\n    }\r\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\r\n        return oraclize.setCustomGasPrice(gasPrice);\r\n    }    \r\n    function oraclize_setConfig(bytes32 config) oraclizeAPI internal {\r\n        return oraclize.setConfig(config);\r\n    }\r\n\r\n    function getCodeSize(address _addr) constant internal returns(uint _size) {\r\n        assembly {\r\n            _size := extcodesize(_addr)\r\n        }\r\n    }\r\n\r\n\r\n    function parseAddr(string _a) internal returns (address){\r\n        bytes memory tmp = bytes(_a);\r\n        uint160 iaddr = 0;\r\n        uint160 b1;\r\n        uint160 b2;\r\n        for (uint i=2; i<2+2*20; i+=2){\r\n            iaddr *= 256;\r\n            b1 = uint160(tmp[i]);\r\n            b2 = uint160(tmp[i+1]);\r\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\r\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\r\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\r\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\r\n            iaddr += (b1*16+b2);\r\n        }\r\n        return address(iaddr);\r\n    }\r\n\r\n\r\n    function strCompare(string _a, string _b) internal returns (int) {\r\n        bytes memory a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        uint minLength = a.length;\r\n        if (b.length < minLength) minLength = b.length;\r\n        for (uint i = 0; i < minLength; i ++)\r\n            if (a[i] < b[i])\r\n                return -1;\r\n            else if (a[i] > b[i])\r\n                return 1;\r\n        if (a.length < b.length)\r\n            return -1;\r\n        else if (a.length > b.length)\r\n            return 1;\r\n        else\r\n            return 0;\r\n   } \r\n\r\n    function indexOf(string _haystack, string _needle) internal returns (int)\r\n    {\r\n        bytes memory h = bytes(_haystack);\r\n        bytes memory n = bytes(_needle);\r\n        if(h.length < 1 || n.length < 1 || (n.length > h.length)) \r\n            return -1;\r\n        else if(h.length > (2**128 -1))\r\n            return -1;                                  \r\n        else\r\n        {\r\n            uint subindex = 0;\r\n            for (uint i = 0; i < h.length; i ++)\r\n            {\r\n                if (h[i] == n[0])\r\n                {\r\n                    subindex = 1;\r\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\r\n                    {\r\n                        subindex++;\r\n                    }   \r\n                    if(subindex == n.length)\r\n                        return int(i);\r\n                }\r\n            }\r\n            return -1;\r\n        }   \r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string){\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n    \r\n    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c) internal returns (string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b) internal returns (string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    // parseInt\r\n    function parseInt(string _a) internal returns (uint) {\r\n        return parseInt(_a, 0);\r\n    }\r\n\r\n    // parseInt(parseFloat*10^_b)\r\n    function parseInt(string _a, uint _b) internal returns (uint) {\r\n        bytes memory bresult = bytes(_a);\r\n        uint mint = 0;\r\n        bool decimals = false;\r\n        for (uint i=0; i<bresult.length; i++){\r\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\r\n                if (decimals){\r\n                   if (_b == 0) break;\r\n                    else _b--;\r\n                }\r\n                mint *= 10;\r\n                mint += uint(bresult[i]) - 48;\r\n            } else if (bresult[i] == 46) decimals = true;\r\n        }\r\n        if (_b > 0) mint *= 10**_b;\r\n        return mint;\r\n    }\r\n    \r\n    function uint2str(uint i) internal returns (string){\r\n        if (i == 0) return \"0\";\r\n        uint j = i;\r\n        uint len;\r\n        while (j != 0){\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (i != 0){\r\n            bstr[k--] = byte(48 + i % 10);\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n    \r\n    \r\n\r\n}\r\n// </ORACLIZE_API>\r\n\r\n\r\n\r\nlibrary strings {\r\n    struct slice {\r\n        uint _len;\r\n        uint _ptr;\r\n    }\r\n\r\n    function memcpy(uint dest, uint src, uint len) private {\r\n        // Copy word-length chunks while possible\r\n        for(; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint mask = 256 ** (32 - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a slice containing the entire string.\r\n     * @param self The string to make a slice from.\r\n     * @return A newly allocated slice containing the entire string.\r\n     */\r\n    function toSlice(string self) internal returns (slice) {\r\n        uint ptr;\r\n        assembly {\r\n            ptr := add(self, 0x20)\r\n        }\r\n        return slice(bytes(self).length, ptr);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the length of a null-terminated bytes32 string.\r\n     * @param self The value to find the length of.\r\n     * @return The length of the string, from 0 to 32.\r\n     */\r\n    function len(bytes32 self) internal returns (uint) {\r\n        uint ret;\r\n        if (self == 0)\r\n            return 0;\r\n        if (self & 0xffffffffffffffffffffffffffffffff == 0) {\r\n            ret += 16;\r\n            self = bytes32(uint(self) / 0x100000000000000000000000000000000);\r\n        }\r\n        if (self & 0xffffffffffffffff == 0) {\r\n            ret += 8;\r\n            self = bytes32(uint(self) / 0x10000000000000000);\r\n        }\r\n        if (self & 0xffffffff == 0) {\r\n            ret += 4;\r\n            self = bytes32(uint(self) / 0x100000000);\r\n        }\r\n        if (self & 0xffff == 0) {\r\n            ret += 2;\r\n            self = bytes32(uint(self) / 0x10000);\r\n        }\r\n        if (self & 0xff == 0) {\r\n            ret += 1;\r\n        }\r\n        return 32 - ret;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a slice containing the entire bytes32, interpreted as a\r\n     *      null-termintaed utf-8 string.\r\n     * @param self The bytes32 value to convert to a slice.\r\n     * @return A new slice containing the value of the input argument up to the\r\n     *         first null.\r\n     */\r\n    function toSliceB32(bytes32 self) internal returns (slice ret) {\r\n        // Allocate space for `self` in memory, copy it there, and point ret at it\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(0x40, add(ptr, 0x20))\r\n            mstore(ptr, self)\r\n            mstore(add(ret, 0x20), ptr)\r\n        }\r\n        ret._len = len(self);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a new slice containing the same data as the current slice.\r\n     * @param self The slice to copy.\r\n     * @return A new slice containing the same data as `self`.\r\n     */\r\n    function copy(slice self) internal returns (slice) {\r\n        return slice(self._len, self._ptr);\r\n    }\r\n\r\n    /**\r\n     * @dev Copies a slice to a new string.\r\n     * @param self The slice to copy.\r\n     * @return A newly allocated string containing the slice's text.\r\n     */\r\n    function toString(slice self) internal returns (string) {\r\n        var ret = new string(self._len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n\r\n        memcpy(retptr, self._ptr, self._len);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the length in runes of the slice. Note that this operation\r\n     *      takes time proportional to the length of the slice; avoid using it\r\n     *      in loops, and call `slice.empty()` if you only need to know whether\r\n     *      the slice is empty or not.\r\n     * @param self The slice to operate on.\r\n     * @return The length of the slice in runes.\r\n     */\r\n    function len(slice self) internal returns (uint) {\r\n        // Starting at ptr-31 means the LSB will be the byte we care about\r\n        var ptr = self._ptr - 31;\r\n        var end = ptr + self._len;\r\n        for (uint len = 0; ptr < end; len++) {\r\n            uint8 b;\r\n            assembly { b := and(mload(ptr), 0xFF) }\r\n            if (b < 0x80) {\r\n                ptr += 1;\r\n            } else if(b < 0xE0) {\r\n                ptr += 2;\r\n            } else if(b < 0xF0) {\r\n                ptr += 3;\r\n            } else if(b < 0xF8) {\r\n                ptr += 4;\r\n            } else if(b < 0xFC) {\r\n                ptr += 5;\r\n            } else {\r\n                ptr += 6;\r\n            }\r\n        }\r\n        return len;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the slice is empty (has a length of 0).\r\n     * @param self The slice to operate on.\r\n     * @return True if the slice is empty, False otherwise.\r\n     */\r\n    function empty(slice self) internal returns (bool) {\r\n        return self._len == 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a positive number if `other` comes lexicographically after\r\n     *      `self`, a negative number if it comes before, or zero if the\r\n     *      contents of the two slices are equal. Comparison is done per-rune,\r\n     *      on unicode codepoints.\r\n     * @param self The first slice to compare.\r\n     * @param other The second slice to compare.\r\n     * @return The result of the comparison.\r\n     */\r\n    function compare(slice self, slice other) internal returns (int) {\r\n        uint shortest = self._len;\r\n        if (other._len < self._len)\r\n            shortest = other._len;\r\n\r\n        var selfptr = self._ptr;\r\n        var otherptr = other._ptr;\r\n        for (uint idx = 0; idx < shortest; idx += 32) {\r\n            uint a;\r\n            uint b;\r\n            assembly {\r\n                a := mload(selfptr)\r\n                b := mload(otherptr)\r\n            }\r\n            if (a != b) {\r\n                // Mask out irrelevant bytes and check again\r\n                uint mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\r\n                var diff = (a & mask) - (b & mask);\r\n                if (diff != 0)\r\n                    return int(diff);\r\n            }\r\n            selfptr += 32;\r\n            otherptr += 32;\r\n        }\r\n        return int(self._len) - int(other._len);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the two slices contain the same text.\r\n     * @param self The first slice to compare.\r\n     * @param self The second slice to compare.\r\n     * @return True if the slices are equal, false otherwise.\r\n     */\r\n    function equals(slice self, slice other) internal returns (bool) {\r\n        return compare(self, other) == 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Extracts the first rune in the slice into `rune`, advancing the\r\n     *      slice to point to the next rune and returning `self`.\r\n     * @param self The slice to operate on.\r\n     * @param rune The slice that will contain the first rune.\r\n     * @return `rune`.\r\n     */\r\n    function nextRune(slice self, slice rune) internal returns (slice) {\r\n        rune._ptr = self._ptr;\r\n\r\n        if (self._len == 0) {\r\n            rune._len = 0;\r\n            return rune;\r\n        }\r\n\r\n        uint len;\r\n        uint b;\r\n        // Load the first byte of the rune into the LSBs of b\r\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\r\n        if (b < 0x80) {\r\n            len = 1;\r\n        } else if(b < 0xE0) {\r\n            len = 2;\r\n        } else if(b < 0xF0) {\r\n            len = 3;\r\n        } else {\r\n            len = 4;\r\n        }\r\n\r\n        // Check for truncated codepoints\r\n        if (len > self._len) {\r\n            rune._len = self._len;\r\n            self._ptr += self._len;\r\n            self._len = 0;\r\n            return rune;\r\n        }\r\n\r\n        self._ptr += len;\r\n        self._len -= len;\r\n        rune._len = len;\r\n        return rune;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the first rune in the slice, advancing the slice to point\r\n     *      to the next rune.\r\n     * @param self The slice to operate on.\r\n     * @return A slice containing only the first rune from `self`.\r\n     */\r\n    function nextRune(slice self) internal returns (slice ret) {\r\n        nextRune(self, ret);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of the first codepoint in the slice.\r\n     * @param self The slice to operate on.\r\n     * @return The number of the first codepoint in the slice.\r\n     */\r\n    function ord(slice self) internal returns (uint ret) {\r\n        if (self._len == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint word;\r\n        uint len;\r\n        uint div = 2 ** 248;\r\n\r\n        // Load the rune into the MSBs of b\r\n        assembly { word:= mload(mload(add(self, 32))) }\r\n        var b = word / div;\r\n        if (b < 0x80) {\r\n            ret = b;\r\n            len = 1;\r\n        } else if(b < 0xE0) {\r\n            ret = b & 0x1F;\r\n            len = 2;\r\n        } else if(b < 0xF0) {\r\n            ret = b & 0x0F;\r\n            len = 3;\r\n        } else {\r\n            ret = b & 0x07;\r\n            len = 4;\r\n        }\r\n\r\n        // Check for truncated codepoints\r\n        if (len > self._len) {\r\n            return 0;\r\n        }\r\n\r\n        for (uint i = 1; i < len; i++) {\r\n            div = div / 256;\r\n            b = (word / div) & 0xFF;\r\n            if (b & 0xC0 != 0x80) {\r\n                // Invalid UTF-8 sequence\r\n                return 0;\r\n            }\r\n            ret = (ret * 64) | (b & 0x3F);\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the keccak-256 hash of the slice.\r\n     * @param self The slice to hash.\r\n     * @return The hash of the slice.\r\n     */\r\n    function keccak(slice self) internal returns (bytes32 ret) {\r\n        assembly {\r\n            ret := sha3(mload(add(self, 32)), mload(self))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `self` starts with `needle`.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return True if the slice starts with the provided text, false otherwise.\r\n     */\r\n    function startsWith(slice self, slice needle) internal returns (bool) {\r\n        if (self._len < needle._len) {\r\n            return false;\r\n        }\r\n\r\n        if (self._ptr == needle._ptr) {\r\n            return true;\r\n        }\r\n\r\n        bool equal;\r\n        assembly {\r\n            let len := mload(needle)\r\n            let selfptr := mload(add(self, 0x20))\r\n            let needleptr := mload(add(needle, 0x20))\r\n            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\r\n        }\r\n        return equal;\r\n    }\r\n\r\n    /**\r\n     * @dev If `self` starts with `needle`, `needle` is removed from the\r\n     *      beginning of `self`. Otherwise, `self` is unmodified.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return `self`\r\n     */\r\n    function beyond(slice self, slice needle) internal returns (slice) {\r\n        if (self._len < needle._len) {\r\n            return self;\r\n        }\r\n\r\n        bool equal = true;\r\n        if (self._ptr != needle._ptr) {\r\n            assembly {\r\n                let len := mload(needle)\r\n                let selfptr := mload(add(self, 0x20))\r\n                let needleptr := mload(add(needle, 0x20))\r\n                equal := eq(sha3(selfptr, len), sha3(needleptr, len))\r\n            }\r\n        }\r\n\r\n        if (equal) {\r\n            self._len -= needle._len;\r\n            self._ptr += needle._len;\r\n        }\r\n\r\n        return self;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the slice ends with `needle`.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return True if the slice starts with the provided text, false otherwise.\r\n     */\r\n    function endsWith(slice self, slice needle) internal returns (bool) {\r\n        if (self._len < needle._len) {\r\n            return false;\r\n        }\r\n\r\n        var selfptr = self._ptr + self._len - needle._len;\r\n\r\n        if (selfptr == needle._ptr) {\r\n            return true;\r\n        }\r\n\r\n        bool equal;\r\n        assembly {\r\n            let len := mload(needle)\r\n            let needleptr := mload(add(needle, 0x20))\r\n            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\r\n        }\r\n\r\n        return equal;\r\n    }\r\n\r\n    /**\r\n     * @dev If `self` ends with `needle`, `needle` is removed from the\r\n     *      end of `self`. Otherwise, `self` is unmodified.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return `self`\r\n     */\r\n    function until(slice self, slice needle) internal returns (slice) {\r\n        if (self._len < needle._len) {\r\n            return self;\r\n        }\r\n\r\n        var selfptr = self._ptr + self._len - needle._len;\r\n        bool equal = true;\r\n        if (selfptr != needle._ptr) {\r\n            assembly {\r\n                let len := mload(needle)\r\n                let needleptr := mload(add(needle, 0x20))\r\n                equal := eq(sha3(selfptr, len), sha3(needleptr, len))\r\n            }\r\n        }\r\n\r\n        if (equal) {\r\n            self._len -= needle._len;\r\n        }\r\n\r\n        return self;\r\n    }\r\n\r\n    // Returns the memory address of the first byte of the first occurrence of\r\n    // `needle` in `self`, or the first byte after `self` if not found.\r\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {\r\n        uint ptr;\r\n        uint idx;\r\n\r\n        if (needlelen <= selflen) {\r\n            if (needlelen <= 32) {\r\n                // Optimized assembly for 68 gas per byte on short strings\r\n                assembly {\r\n                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\r\n                    let needledata := and(mload(needleptr), mask)\r\n                    let end := add(selfptr, sub(selflen, needlelen))\r\n                    ptr := selfptr\r\n                    loop:\r\n                    jumpi(exit, eq(and(mload(ptr), mask), needledata))\r\n                    ptr := add(ptr, 1)\r\n                    jumpi(loop, lt(sub(ptr, 1), end))\r\n                    ptr := add(selfptr, selflen)\r\n                    exit:\r\n                }\r\n                return ptr;\r\n            } else {\r\n                // For long needles, use hashing\r\n                bytes32 hash;\r\n                assembly { hash := sha3(needleptr, needlelen) }\r\n                ptr = selfptr;\r\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\r\n                    bytes32 testHash;\r\n                    assembly { testHash := sha3(ptr, needlelen) }\r\n                    if (hash == testHash)\r\n                        return ptr;\r\n                    ptr += 1;\r\n                }\r\n            }\r\n        }\r\n        return selfptr + selflen;\r\n    }\r\n\r\n    // Returns the memory address of the first byte after the last occurrence of\r\n    // `needle` in `self`, or the address of `self` if not found.\r\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {\r\n        uint ptr;\r\n\r\n        if (needlelen <= selflen) {\r\n            if (needlelen <= 32) {\r\n                // Optimized assembly for 69 gas per byte on short strings\r\n                assembly {\r\n                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\r\n                    let needledata := and(mload(needleptr), mask)\r\n                    ptr := add(selfptr, sub(selflen, needlelen))\r\n                    loop:\r\n                    jumpi(ret, eq(and(mload(ptr), mask), needledata))\r\n                    ptr := sub(ptr, 1)\r\n                    jumpi(loop, gt(add(ptr, 1), selfptr))\r\n                    ptr := selfptr\r\n                    jump(exit)\r\n                    ret:\r\n                    ptr := add(ptr, needlelen)\r\n                    exit:\r\n                }\r\n                return ptr;\r\n            } else {\r\n                // For long needles, use hashing\r\n                bytes32 hash;\r\n                assembly { hash := sha3(needleptr, needlelen) }\r\n                ptr = selfptr + (selflen - needlelen);\r\n                while (ptr >= selfptr) {\r\n                    bytes32 testHash;\r\n                    assembly { testHash := sha3(ptr, needlelen) }\r\n                    if (hash == testHash)\r\n                        return ptr + needlelen;\r\n                    ptr -= 1;\r\n                }\r\n            }\r\n        }\r\n        return selfptr;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifies `self` to contain everything from the first occurrence of\r\n     *      `needle` to the end of the slice. `self` is set to the empty slice\r\n     *      if `needle` is not found.\r\n     * @param self The slice to search and modify.\r\n     * @param needle The text to search for.\r\n     * @return `self`.\r\n     */\r\n    function find(slice self, slice needle) internal returns (slice) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        self._len -= ptr - self._ptr;\r\n        self._ptr = ptr;\r\n        return self;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifies `self` to contain the part of the string from the start of\r\n     *      `self` to the end of the first occurrence of `needle`. If `needle`\r\n     *      is not found, `self` is set to the empty slice.\r\n     * @param self The slice to search and modify.\r\n     * @param needle The text to search for.\r\n     * @return `self`.\r\n     */\r\n    function rfind(slice self, slice needle) internal returns (slice) {\r\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        self._len = ptr - self._ptr;\r\n        return self;\r\n    }\r\n\r\n    /**\r\n     * @dev Splits the slice, setting `self` to everything after the first\r\n     *      occurrence of `needle`, and `token` to everything before it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and `token` is set to the entirety of `self`.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @param token An output parameter to which the first token is written.\r\n     * @return `token`.\r\n     */\r\n    function split(slice self, slice needle, slice token) internal returns (slice) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        token._ptr = self._ptr;\r\n        token._len = ptr - self._ptr;\r\n        if (ptr == self._ptr + self._len) {\r\n            // Not found\r\n            self._len = 0;\r\n        } else {\r\n            self._len -= token._len + needle._len;\r\n            self._ptr = ptr + needle._len;\r\n        }\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * @dev Splits the slice, setting `self` to everything after the first\r\n     *      occurrence of `needle`, and returning everything before it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and the entirety of `self` is returned.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @return The part of `self` up to the first occurrence of `delim`.\r\n     */\r\n    function split(slice self, slice needle) internal returns (slice token) {\r\n        split(self, needle, token);\r\n    }\r\n\r\n    /**\r\n     * @dev Splits the slice, setting `self` to everything before the last\r\n     *      occurrence of `needle`, and `token` to everything after it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and `token` is set to the entirety of `self`.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @param token An output parameter to which the first token is written.\r\n     * @return `token`.\r\n     */\r\n    function rsplit(slice self, slice needle, slice token) internal returns (slice) {\r\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        token._ptr = ptr;\r\n        token._len = self._len - (ptr - self._ptr);\r\n        if (ptr == self._ptr) {\r\n            // Not found\r\n            self._len = 0;\r\n        } else {\r\n            self._len -= token._len + needle._len;\r\n        }\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * @dev Splits the slice, setting `self` to everything before the last\r\n     *      occurrence of `needle`, and returning everything after it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and the entirety of `self` is returned.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @return The part of `self` after the last occurrence of `delim`.\r\n     */\r\n    function rsplit(slice self, slice needle) internal returns (slice token) {\r\n        rsplit(self, needle, token);\r\n    }\r\n\r\n    /**\r\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\r\n     * @param self The slice to search.\r\n     * @param needle The text to search for in `self`.\r\n     * @return The number of occurrences of `needle` found in `self`.\r\n     */\r\n    function count(slice self, slice needle) internal returns (uint count) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\r\n        while (ptr <= self._ptr + self._len) {\r\n            count++;\r\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns True if `self` contains `needle`.\r\n     * @param self The slice to search.\r\n     * @param needle The text to search for in `self`.\r\n     * @return True if `needle` is found in `self`, false otherwise.\r\n     */\r\n    function contains(slice self, slice needle) internal returns (bool) {\r\n        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a newly allocated string containing the concatenation of\r\n     *      `self` and `other`.\r\n     * @param self The first slice to concatenate.\r\n     * @param other The second slice to concatenate.\r\n     * @return The concatenation of the two strings.\r\n     */\r\n    function concat(slice self, slice other) internal returns (string) {\r\n        var ret = new string(self._len + other._len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n        memcpy(retptr, self._ptr, self._len);\r\n        memcpy(retptr + self._len, other._ptr, other._len);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * @dev Joins an array of slices, using `self` as a delimiter, returning a\r\n     *      newly allocated string.\r\n     * @param self The delimiter to use.\r\n     * @param parts A list of slices to join.\r\n     * @return A newly allocated string containing all the slices in `parts`,\r\n     *         joined with `self`.\r\n     */\r\n    function join(slice self, slice[] parts) internal returns (string) {\r\n        if (parts.length == 0)\r\n            return \"\";\r\n\r\n        uint len = self._len * (parts.length - 1);\r\n        for(uint i = 0; i < parts.length; i++)\r\n            len += parts[i]._len;\r\n\r\n        var ret = new string(len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n\r\n        for(i = 0; i < parts.length; i++) {\r\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\r\n            retptr += parts[i]._len;\r\n            if (i < parts.length - 1) {\r\n                memcpy(retptr, self._ptr, self._len);\r\n                retptr += self._len;\r\n            }\r\n        }\r\n\r\n        return ret;\r\n    }\r\n}\r\n\r\n\r\ncontract mortal {\r\n\taddress owner;\r\n\r\n\tfunction mortal() {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tfunction kill() internal {\r\n\t\tsuicide(owner);\r\n\t}\r\n}\r\n\r\ncontract Pray4Prey is mortal, usingOraclize {\r\n\tusing strings\r\n\tfor * ;\r\n\r\n\tstruct Animal {\r\n\t\tuint8 animalType;\r\n\t\tuint128 value;\r\n\t\taddress owner;\r\n\t}\r\n\r\n\t/** array holding ids of the curret animals*/\r\n\tuint32[] public ids;\r\n\t/** the id to be given to the net animal **/\r\n\tuint32 public nextId;\r\n\t/** the id of the oldest animal */\r\n\tuint32 public oldest;\r\n\t/** the animal belonging to a given id */\r\n\tmapping(uint32 => Animal) animals;\r\n\t/** the cost of each animal type */\r\n\tuint128[] public costs;\r\n\t/** the value of each animal type (cost - fee), so it's not necessary to compute it each time*/\r\n\tuint128[] public values;\r\n\t/** the fee to be paid each time an animal is bought in percent*/\r\n\tuint8  fee;\r\n\r\n\t/** total number of animals in the game \r\n\t(!=sum of the lengths of the prey animals arrays, since those arrays contain holes) */\r\n\tuint16 public numAnimals;\r\n\t/** The maximum of animals allowed in the game */\r\n\tuint16 public maxAnimals;\r\n\t/** number of animals per type */\r\n\tmapping(uint8 => uint16) public numAnimalsXType;\r\n\r\n\r\n\t/** the query string getting the random numbers from oraclize**/\r\n\tstring  randomQuery;\r\n\t/** the type of the oraclize query**/\r\n\tstring  queryType;\r\n\t/** the timestamp of the next attack **/\r\n\tuint public nextAttackTimestamp;\r\n\t/** gas provided for oraclize callback (attack)**/\r\n\tuint32 public oraclizeGas;\r\n\t/** the id of the next oraclize callback*/\r\n\tbytes32 nextAttackId;\r\n\r\n\r\n\t/** is fired when new animals are purchased (who bought how many animals of which type?) */\r\n\tevent newPurchase(address player, uint8 animalType, uint8 amount, uint32 startId);\r\n\t/** is fired when a player leaves the game */\r\n\tevent newExit(address player, uint256 totalBalance);\r\n\t/** is fired when an attack occures */\r\n\tevent newAttack(uint32[] killedAnimals);\r\n\r\n\r\n\t/** expected parameters: the costs per animal type and the game fee in percent \r\n\t *   assumes that the cheapest animal is stored in [0]\r\n\t */\r\n\tfunction Pray4Prey() {\r\n\t\tcosts = [100000000000000000,200000000000000000,500000000000000000,1000000000000000000,5000000000000000000];\r\n\t\tfee = 5;\r\n\t\tfor (uint8 i = 0; i < costs.length; i++) {\r\n\t\t\tvalues.push(costs[i] - costs[i] / 100 * fee);\r\n\t\t}\r\n\t\tmaxAnimals = 300;\r\n\t\trandomQuery = \"10 random numbers between 1 and 1000\";\r\n\t\tqueryType = \"WolframAlpha\";\r\n\t\toraclizeGas = 400000;\r\n\t\tnextId = 1;\r\n\t\toldest = 1;\r\n\t}\r\n\r\n\t/** The fallback function runs whenever someone sends ether\r\n\t   Depending of the value of the transaction the sender is either granted a prey or \r\n\t   the transaction is discarded and no ether accepted\r\n\t   In the first case fees have to be paid*/\r\n\tfunction() payable {\r\n\t\tfor (uint8 i = 0; i < costs.length; i++)\r\n\t\t\tif (msg.value == costs[i])\r\n\t\t\t\taddAnimals(i);\r\n\r\n\t\tif (msg.value == 1000000000000000)\r\n\t\t\texit();\r\n\t\telse\r\n\t\t\tthrow;\r\n\r\n\t}\r\n\r\n\t/** buy animals of a given type \r\n\t *  as many animals as possible are bought with msg.value\r\n\t */\r\n\tfunction addAnimals(uint8 animalType) payable {\r\n\t\tgiveAnimals(animalType, msg.sender);\r\n\t}\r\n\t\r\n\t/** buy animals of a given type forsomeone else\r\n\t *  as many animals as possible are bought with msg.value\r\n\t */\r\n\tfunction giveAnimals(uint8 animalType, address receiver) payable {\r\n\t\tuint8 amount = uint8(msg.value / costs[animalType]);\r\n\t\tif (animalType >= costs.length || msg.value < costs[animalType] ||  numAnimals + amount >= maxAnimals) throw;\r\n\t\t//if type exists, enough ether was transferred and there are less than maxAnimals animals in the game\r\n\t\tfor (uint8 j = 0; j < amount; j++) {\r\n\t\t\taddAnimal(animalType, receiver);\r\n\t\t}\r\n\t\tnumAnimalsXType[animalType] += amount;\r\n\t\tnewPurchase(receiver, animalType, amount, nextId-amount);\r\n\t}\r\n\r\n\t/**\r\n\t *  adds a single animal of the given type\r\n\t */\r\n\tfunction addAnimal(uint8 animalType, address receiver) internal {\r\n\t\tif (numAnimals < ids.length)\r\n\t\t\tids[numAnimals] = nextId;\r\n\t\telse\r\n\t\t\tids.push(nextId);\r\n\t\tanimals[nextId] = Animal(animalType, values[animalType], receiver);\r\n\t\tnextId++;\r\n\t\tnumAnimals++;\r\n\t}\r\n\t\r\n\r\n\r\n\t/** leave the game\r\n\t * pays out the sender's winBalance and removes him and his animals from the game\r\n\t * */\r\n\tfunction exit() {\r\n\t\tuint balance = cleanUp(msg.sender); //delete the animals\r\n\t\tnewExit(msg.sender, balance); //fire the event to notify the client\r\n\t\tif (!msg.sender.send(balance)) throw;\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the animals of a given player\r\n\t * */\r\n\tfunction cleanUp(address playerAddress) internal returns(uint playerBalance){\r\n\t\tuint32 lastId;\r\n\t\tfor (uint16 i = 0; i < numAnimals; i++) {\r\n\t\t\tif (animals[ids[i]].owner == playerAddress) {\r\n\t\t\t\t//first delete all animals at the end of the array\r\n\t\t\t\twhile (numAnimals > 0 && animals[ids[numAnimals - 1]].owner == playerAddress) {\r\n\t\t\t\t\tnumAnimals--;\r\n\t\t\t\t\tlastId = ids[numAnimals];\r\n\t\t\t\t\tnumAnimalsXType[animals[lastId].animalType]--;\r\n\t\t\t\t\tplayerBalance+=animals[lastId].value;\r\n\t\t\t\t\tdelete animals[lastId];\r\n\t\t\t\t}\r\n\t\t\t\t//if the last animal does not belong to the player, replace the players animal by this last one\r\n\t\t\t\tif (numAnimals > i + 1) {\r\n\t\t\t\t    playerBalance+=animals[ids[i]].value;\r\n\t\t\t\t\treplaceAnimal(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Replaces the animal with the given id with the last animal in the array\r\n\t * */\r\n\tfunction replaceAnimal(uint16 index) internal {\r\n\t\tnumAnimalsXType[animals[ids[index]].animalType]--;\r\n\t\tnumAnimals--;\r\n\t\tuint32 lastId = ids[numAnimals];\r\n\t\tanimals[ids[index]] = animals[lastId];\r\n\t\tids[index] = lastId;\r\n\t\tdelete ids[numAnimals];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * manually triggers the attack. cannot be called afterwards, except\r\n\t * by the owner if and only if the attack wasn't launched as supposed, signifying\r\n\t * an error ocurred during the last invocation of oraclize, or there wasn't enough ether to pay the gas\r\n\t * */\r\n\tfunction triggerAttackManually(uint32 inseconds) {\r\n\t\tif (!(msg.sender == owner && nextAttackTimestamp < now + 300)) throw;\r\n\t\ttriggerAttack(inseconds, (oraclizeGas + 10000 * numAnimals));\r\n\t}\r\n\r\n\t/**\r\n\t * sends a query to oraclize in order to get random numbers in 'inseconds' seconds\r\n\t */\r\n\tfunction triggerAttack(uint32 inseconds, uint128 gasAmount) internal {\r\n\t\tnextAttackTimestamp = now + inseconds;\r\n\t\tnextAttackId = oraclize_query(nextAttackTimestamp, queryType, randomQuery, gasAmount );\r\n\t}\r\n\r\n\t/**\r\n\t * The actual predator attack.\r\n\t * The predator kills up to 10 animals, but in case there are less than 100 animals in the game up to 10% get eaten.\r\n\t * */\r\n\tfunction __callback(bytes32 myid, string result) {\r\n\t\tif (msg.sender != oraclize_cbAddress() || myid != nextAttackId) throw; // just to be sure the calling address is the Oraclize authorized one and the callback is the expected one   \r\n\t\tuint128 pot;\r\n\t\tuint16 random;\r\n\t\tuint16 howmany = numAnimals < 100 ? (numAnimals < 10 ? 1 : numAnimals / 10) : 10; //do not kill more than 10%, but at least one\r\n\t\tuint16[] memory randomNumbers = getNumbersFromString(result, \",\", howmany);\r\n\t\tuint32[] memory killedAnimals = new uint32[](howmany);\r\n\t\tfor (uint8 i = 0; i < howmany; i++) {\r\n\t\t\trandom = mapToNewRange(randomNumbers[i], numAnimals);\r\n\t\t\tkilledAnimals[i] = ids[random];\r\n\t\t\tpot += killAnimal(random);\r\n\t\t}\r\n\t\tuint128 neededGas = oraclizeGas + 10000*numAnimals;\r\n\t\tuint128 gasCost = uint128(neededGas * tx.gasprice);\r\n\t\tif (pot > gasCost)\r\n\t\t\tdistribute(uint128(pot - gasCost)); //distribute the pot minus the oraclize gas costs\r\n\t\ttriggerAttack(timeTillNextAttack(), neededGas);\r\n\t\tnewAttack(killedAnimals);\r\n\t}\r\n\r\n\t/**\r\n\t * the frequency of the shark attacks depends on the number of animals in the game. \r\n\t * many animals -> many shark attacks\r\n\t * at least one attack in 24 hours\r\n\t * */\r\n\tfunction timeTillNextAttack() constant internal returns(uint32) {\r\n\t\treturn (86400 / (1 + numAnimals / 100));\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * kills the animal of the given type at the given index. \r\n\t * */\r\n\tfunction killAnimal(uint16 index) internal returns(uint128 animalValue) {\r\n\t\tanimalValue = animals[ids[index]].value;\r\n\t\treplaceAnimal(index);\r\n\t\tif (ids[index] == oldest)\r\n\t\t\toldest = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * finds the oldest animal\r\n\t * */\r\n\tfunction findOldest() internal returns(uint128 animalValue) {\r\n\t\toldest = ids[0];\r\n\t\tfor (uint16 i = 1; i < numAnimals; i++){\r\n\t\t\tif(ids[i] < oldest)//the oldest animal has the lowest id\r\n\t\t\t\toldest = ids[i];\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/** distributes the given amount among the surviving fishes*/\r\n\tfunction distribute(uint128 totalAmount) internal {\r\n\t\t//pay 10% to the oldest fish\r\n\t\tif (oldest == 0)\r\n\t\t\tfindOldest();\r\n\t\tanimals[oldest].value += totalAmount / 10;\r\n\t\tuint128 amount = totalAmount / 10 * 9;\r\n\t\t//distribute the rest according to their type\r\n\t\tuint128 valueSum;\r\n\t\tuint128[] memory shares = new uint128[](values.length);\r\n\t\tfor (uint8 v = 0; v < values.length; v++) {\r\n\t\t\tif (numAnimalsXType[v] > 0) valueSum += values[v];\r\n\t\t}\r\n\t\tfor (uint8 m = 0; m < values.length; m++) {\r\n\t\t    if(numAnimalsXType[m] > 0)\r\n\t\t\t    shares[m] =  amount * values[m] / valueSum / numAnimalsXType[m];\r\n\t\t}\r\n\t\tfor (uint16 i = 0; i < numAnimals; i++) {\r\n\t\t\tanimals[ids[i]].value += shares[animals[ids[i]].animalType];\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * allows the owner to collect the accumulated fees\r\n\t * sends the given amount to the owner's address if the amount does not exceed the\r\n\t * fees (cannot touch the players' balances) minus 100 finney (ensure that oraclize fees can be paid)\r\n\t * */\r\n\tfunction collectFees(uint128 amount) {\r\n\t\tif (!(msg.sender == owner)) throw;\r\n\t\tuint collectedFees = getFees();\r\n\t\tif (amount + 100 finney < collectedFees) {\r\n\t\t\tif (!owner.send(amount)) throw;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * pays out the players and kills the game.\r\n\t * */\r\n\tfunction stop() {\r\n\t\tif (!(msg.sender == owner)) throw;\r\n\t\tfor (uint16 i = 0; i < numAnimals; i++) {\r\n\t\t\tanimals[ids[i]].owner.send(animals[ids[i]].value);\r\n\t\t}\r\n\t\tkill();\r\n\t}\r\n\r\n\t/**\r\n\t * adds a new animal type to the game\r\n\t * max. number of animal types: 100\r\n\t * the cost may not be lower than costs[0]\r\n\t * */\r\n\tfunction addAnimalType(uint128 cost) {\r\n\t\tif (!(msg.sender == owner)) throw;\r\n\t\tcosts.push(cost);\r\n\t\tvalues.push(cost / 100 * fee);\r\n\t}\r\n\r\n\tfunction sellAnimal(uint32 animalId){\r\n        if(msg.sender!=animals[animalId].owner) throw;\r\n        uint128 val = animals[animalId].value;\r\n        uint16 animalIndex;\r\n        for(uint16 i = 0; i < ids.length; i++){\r\n            if(ids[i]==animalId){\r\n                animalIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        replaceAnimal(animalIndex);\r\n        if(!msg.sender.send(val)) throw;\r\n    }\r\n\r\n\t/****************** GETTERS *************************/\r\n\r\n\r\n\tfunction getPlayerBalance(address playerAddress) constant returns(uint128 playerBalance) {\r\n\t\tfor (uint16 i = 0; i < numAnimals; i++) {\r\n\t\t\tif (animals[ids[i]].owner == playerAddress) playerBalance += animals[ids[i]].value;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction getAnimal(uint32 animalId) constant returns(uint8, uint128, address){\r\n\t\treturn (animals[animalId].animalType,animals[animalId].value,animals[animalId].owner);\r\n\t}\r\n\t\r\n\tfunction get10Animals(uint16 startIndex) constant returns(uint32[10] animalIds, uint8[10] types, uint128[10] values, address[10] owners) {\r\n\t\tuint16 endIndex= startIndex+10 > numAnimals? numAnimals: startIndex+10;\r\n\t\tuint8 j = 0;\r\n\t\tuint32 id;\r\n\t\tfor (uint16 i = startIndex; i < endIndex; i++){\r\n\t\t\tid=ids[i];\r\n\t\t\tanimalIds[j] = id;\r\n\t\t\ttypes[j] = animals[id].animalType;\r\n\t\t\tvalues[j] = animals[id].value;\r\n\t\t\towners[j] = animals[id].owner;\r\n\t\t\tj++;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\r\n\tfunction getFees() constant returns(uint) {\r\n\t\tuint reserved = 0;\r\n\t\tfor (uint16 j = 0; j < numAnimals; j++)\r\n\t\t\treserved += animals[ids[j]].value;\r\n\t\treturn address(this).balance - reserved;\r\n\t}\r\n\r\n\r\n\t/****************** SETTERS *************************/\r\n\r\n\tfunction setOraclizeGas(uint32 newGas) {\r\n\t\tif (!(msg.sender == owner)) throw;\r\n\t\toraclizeGas = newGas;\r\n\t}\r\n\r\n\tfunction setMaxAnimals(uint16 number) {\r\n\t\tif (!(msg.sender == owner)) throw;\r\n\t\tmaxAnimals = number;\r\n\t}\r\n\r\n\r\n\t/************* HELPERS ****************/\r\n\r\n\t/**\r\n\t * maps a given number to the new range (old range 1000)\r\n\t * */\r\n\tfunction mapToNewRange(uint number, uint range) constant internal returns(uint16 randomNumber) {\r\n\t\treturn uint16(number * range / 1000);\r\n\t}\r\n\r\n\t/**\r\n\t * converts a string of numbers being separated by a given delimiter into an array of numbers (#howmany) \r\n\t */\r\n\tfunction getNumbersFromString(string s, string delimiter, uint16 howmany) constant internal returns(uint16[] numbers) {\r\n\t\tstrings.slice memory myresult = s.toSlice();\r\n\t\tstrings.slice memory delim = delimiter.toSlice();\r\n\t\tnumbers = new uint16[](howmany);\r\n\t\tfor (uint8 i = 0; i < howmany; i++) {\r\n\t\t\tnumbers[i] = uint16(parseInt(myresult.split(delim).toString()));\r\n\t\t}\r\n\t\treturn numbers;\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"animalId\",\"type\":\"uint32\"}],\"name\":\"sellAnimal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inseconds\",\"type\":\"uint32\"}],\"name\":\"triggerAttackManually\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"numAnimalsXType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numAnimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"collectFees\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"animalId\",\"type\":\"uint32\"}],\"name\":\"getAnimal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint128\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oraclizeGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"animalType\",\"type\":\"uint8\"}],\"name\":\"addAnimals\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"costs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"startIndex\",\"type\":\"uint16\"}],\"name\":\"get10Animals\",\"outputs\":[{\"name\":\"animalIds\",\"type\":\"uint32[10]\"},{\"name\":\"types\",\"type\":\"uint8[10]\"},{\"name\":\"values\",\"type\":\"uint128[10]\"},{\"name\":\"owners\",\"type\":\"address[10]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"values\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cost\",\"type\":\"uint128\"}],\"name\":\"addAnimalType\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newGas\",\"type\":\"uint32\"}],\"name\":\"setOraclizeGas\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint16\"}],\"name\":\"setMaxAnimals\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAnimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"animalType\",\"type\":\"uint8\"},{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"giveAnimals\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getPlayerBalance\",\"outputs\":[{\"name\":\"playerBalance\",\"type\":\"uint128\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextAttackTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"animalType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"startId\",\"type\":\"uint32\"}],\"name\":\"newPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalBalance\",\"type\":\"uint256\"}],\"name\":\"newExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"killedAnimals\",\"type\":\"uint32[]\"}],\"name\":\"newAttack\",\"type\":\"event\"}]","ContractName":"Pray4Prey","CompilerVersion":"v0.4.9+commit.364da425","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://442b2c9e56c74644db00ee23edf73b5ca6389e279110cbc82f4b5e8bede706ef"}]}