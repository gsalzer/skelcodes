{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.9;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract DiceRoll is owned {\r\n\tuint public minBet = 10 finney;\r\n\tuint public maxBet = 2 ether;\r\n\tuint private countRolls = 0;\r\n\tuint private totalEthSended = 0;\r\n    mapping (address => uint) public totalRollsByUser;\r\n    enum GameState {\r\n\t\tInProgress,\r\n\t\tPlayerWon,\r\n\t\tPlayerLose,\r\n\t\tNoBank\r\n\t}\r\n\t\r\n\tevent logAdr(\r\n        address str\r\n    );\r\n\tevent logStr(\r\n        string str\r\n    );\r\n\tevent log8(\r\n        uint8 value\r\n    );\r\n\tevent log32(\r\n        uint32 value\r\n    );\r\n\tevent log256(\r\n        uint value\r\n    );\r\n\tevent logClassic(\r\n        string str,\r\n        address value\r\n    );\r\n\tevent logState(\r\n        string str,\r\n        GameState state\r\n    );\r\n\tevent logCheck(\r\n        uint value1,\r\n        string sign,\r\n        uint value2\r\n    );\r\n\t\r\n\tstruct Game {\r\n\t\taddress player;\r\n\t\tuint bet;\r\n\t\tuint chance;\r\n\t\tGameState state;\r\n\t\tuint8 seed;\r\n\t}\r\n\r\n\tmapping (address => Game) public games;\r\n\t\r\n\tmodifier gameIsNotInProgress() {\r\n\t\tif (gameInProgress(games[msg.sender])) {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\t\r\n\tmodifier betValueIsOk() {\r\n\t\tif (msg.value < minBet || msg.value > maxBet) {\r\n\t\t\tthrow; // incorrect bet\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\t\r\n\tfunction gameInProgress(Game game)\r\n\t\tconstant\r\n\t\tprivate\r\n\t\treturns (bool)\r\n\t{\r\n\t\tif (game.player == 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (game.state == GameState.InProgress) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction () payable {\r\n\r\n\t}\r\n\t\r\n\t// starts a new game\r\n\tfunction roll(uint value) \r\n\t    public \r\n\t    payable \r\n\t    gameIsNotInProgress\r\n\t    betValueIsOk \r\n\t{\r\n\t\tif (gameInProgress(games[msg.sender])) {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\t\r\n\t\tuint bet = msg.value;\r\n\t\tuint payout = bet*(10000-100)/value;\r\n\t\tuint chance = value;\r\n\t\tbool isBank = true;\r\n\t\t\r\n\t\tGame memory game = Game({\r\n\t\t\tplayer: msg.sender,\r\n\t\t\tbet: msg.value,\r\n\t\t\tchance: chance,\r\n\t\t\tstate: GameState.InProgress,\r\n\t\t\tseed: 3,\r\n\t\t});\r\n\t\t\r\n    \tgames[msg.sender] = game;\r\n\t\t\r\n        totalRollsByUser[msg.sender]++;\r\n        \r\n\t\tif(payout > this.balance){\r\n\t\t    isBank = false;\r\n\t\t    games[msg.sender].state = GameState.NoBank;\r\n\t\t    if(msg.sender.send(bet)) {\r\n\t\t    }\r\n\t\t}\r\n\t\t\r\n\t\tif(isBank){\r\n    \t\tcountRolls ++;\r\n    \t\t\r\n    \t\tuint rnd = randomGen(msg.sender);\r\n            uint profit = payout - bet;\r\n            logAdr(msg.sender);\r\n            log256(payout);\r\n            log256(profit);\r\n            log256(bet);\r\n            log256(chance);\r\n    \r\n    \t\t\r\n    \t\tif(rnd > value){\r\n    \t\t    log8(0);\r\n    \t\t    games[msg.sender].state = GameState.PlayerLose;\r\n            } else {\r\n                log8(1);\r\n                \r\n    \t\t    games[msg.sender].state = GameState.PlayerWon;\r\n    \t\t    if(msg.sender.send(payout)) {\r\n    \t            totalEthSended += payout;\r\n    \t        } else {\r\n    \t            logStr(\"Money is not send.\");\r\n    \t        }\r\n            }\r\n\t\t}\r\n\t\tlogState(\"state:\", games[msg.sender].state);\r\n\t}\r\n\t\r\n\tfunction randomGen(address player) private returns (uint) {\r\n\t\tuint b = block.number;\r\n\t\tuint timestamp = block.timestamp;\r\n\t\treturn uint(uint256(keccak256(block.blockhash(b), player, timestamp)) % 10000);\r\n\t}\r\n\t\r\n\tfunction getCount() public constant returns (uint) {\r\n\t\treturn totalRollsByUser[msg.sender];\r\n\t}\r\n\t\r\n\tfunction getState() public constant returns (GameState) {\r\n\t\tGame memory game = games[msg.sender];\r\n\t\t\r\n\t\tif (game.player == 0) {\r\n\t\t\t// game doesn't exist\r\n\t\t\tthrow;\r\n\t\t}\r\n\r\n\t\treturn game.state;\r\n\t}\r\n\t\r\n\tfunction getGameChance() public constant returns (uint) {\r\n\t\tGame memory game = games[msg.sender];\r\n        \r\n\t\tif (game.player == 0) {\r\n\t\t\t// game doesn't exist\r\n\t\t\tthrow;\r\n\t\t}\r\n\r\n\t\treturn game.chance;\r\n\t}\r\n\t\r\n\tfunction getTotalRollMade() public constant returns (uint) {\r\n\t\treturn countRolls;\r\n\t}\r\n\t\r\n\tfunction getTotalEthSended() public constant returns (uint) {\r\n\t\treturn totalEthSended;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"roll\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalEthSended\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameChance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"bet\",\"type\":\"uint256\"},{\"name\":\"chance\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"seed\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalRollsByUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalRollMade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"str\",\"type\":\"address\"}],\"name\":\"logAdr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"str\",\"type\":\"string\"}],\"name\":\"logStr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"log8\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"log32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"log256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"str\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"address\"}],\"name\":\"logClassic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"str\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"logState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sign\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value2\",\"type\":\"uint256\"}],\"name\":\"logCheck\",\"type\":\"event\"}]","ContractName":"DiceRoll","CompilerVersion":"v0.4.9+commit.364da425","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d46b26a1395ad1c3ef490016c9d334a101c92c786cc2fe0d77c02df676ceb188"}]}