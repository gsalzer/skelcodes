{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract CardboardUnicorns {\r\n  address public owner;\r\n  function mint(address who, uint value);\r\n  function changeOwner(address _newOwner);\r\n  function withdraw();\r\n  function withdrawForeignTokens(address _tokenContract);\r\n}\r\ncontract RealUnicornCongress {\r\n  uint public priceOfAUnicornInFinney;\r\n}\r\ncontract ForeignToken {\r\n  function balanceOf(address _owner) constant returns (uint256);\r\n  function transfer(address _to, uint256 _value) returns (bool);\r\n}\r\n\r\ncontract CardboardUnicornAssembler {\r\n  address public cardboardUnicornTokenAddress;\r\n  address public realUnicornAddress = 0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359;\r\n  address public owner = msg.sender;\r\n  uint public pricePerUnicorn = 1 finney;\r\n  uint public lastPriceSetDate = 0;\r\n  \r\n  event PriceUpdate(uint newPrice, address updater);\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * Change ownership of the assembler\r\n   */\r\n  function changeOwner(address _newOwner) onlyOwner {\r\n    owner = _newOwner;\r\n  }\r\n  function changeTokenOwner(address _newOwner) onlyOwner {\r\n    CardboardUnicorns cu = CardboardUnicorns(cardboardUnicornTokenAddress);\r\n    cu.changeOwner(_newOwner);\r\n  }\r\n  \r\n  /**\r\n   * Change the CardboardUnicorns token contract managed by this contract\r\n   */\r\n  function changeCardboardUnicornTokenAddress(address _newTokenAddress) onlyOwner {\r\n    CardboardUnicorns cu = CardboardUnicorns(_newTokenAddress);\r\n    require(cu.owner() == address(this)); // We must be the owner of the token\r\n    cardboardUnicornTokenAddress = _newTokenAddress;\r\n  }\r\n  \r\n  /**\r\n   * Change the real unicorn contract location.\r\n   * This contract is used as a price reference; should the Ethereum Foundation\r\n   * re-deploy their contract, this should be called to update the reference.\r\n   */\r\n  function changeRealUnicornAddress(address _newUnicornAddress) onlyOwner {\r\n    realUnicornAddress = _newUnicornAddress;\r\n  }\r\n  \r\n  function withdraw(bool _includeToken) onlyOwner {\r\n    if (_includeToken) {\r\n      // First have the token contract send all its funds to its owner (which is us)\r\n      CardboardUnicorns cu = CardboardUnicorns(cardboardUnicornTokenAddress);\r\n      cu.withdraw();\r\n    }\r\n\r\n    // Then send that whole total to our owner\r\n    owner.transfer(this.balance);\r\n  }\r\n  function withdrawForeignTokens(address _tokenContract, bool _includeToken) onlyOwner {\r\n    ForeignToken token = ForeignToken(_tokenContract);\r\n\r\n    if (_includeToken) {\r\n      // First have the token contract send its tokens to its owner (which is us)\r\n      CardboardUnicorns cu = CardboardUnicorns(cardboardUnicornTokenAddress);\r\n      cu.withdrawForeignTokens(_tokenContract);\r\n    }\r\n\r\n    // Then send that whole total to our owner\r\n    uint256 amount = token.balanceOf(address(this));\r\n    token.transfer(owner, amount);\r\n  }\r\n\r\n  /**\r\n   * Update the price of a CardboardUnicorn to be 1/1000 a real Unicorn's price\r\n   */\r\n  function updatePriceFromRealUnicornPrice() {\r\n    require(block.timestamp > lastPriceSetDate + 7 days); // If owner set the price, cannot sync right after\r\n    RealUnicornCongress congress = RealUnicornCongress(realUnicornAddress);\r\n    pricePerUnicorn = (congress.priceOfAUnicornInFinney() * 1 finney) / 1000;\r\n    PriceUpdate(pricePerUnicorn, msg.sender);\r\n  }\r\n  \r\n  /**\r\n   * Set a specific price for a CardboardUnicorn\r\n   */\r\n  function setPrice(uint _newPrice) onlyOwner {\r\n    pricePerUnicorn = _newPrice;\r\n    lastPriceSetDate = block.timestamp;\r\n    PriceUpdate(pricePerUnicorn, msg.sender);\r\n  }\r\n  \r\n  /**\r\n   * Strap a horn to a horse!\r\n   */\r\n  function assembleUnicorn() payable {\r\n    if (msg.value >= pricePerUnicorn) {\r\n        CardboardUnicorns cu = CardboardUnicorns(cardboardUnicornTokenAddress);\r\n        cu.mint(msg.sender, msg.value / pricePerUnicorn);\r\n        owner.transfer(msg.value);\r\n    }\r\n  }\r\n  \r\n  function() payable {\r\n      assembleUnicorn();\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeTokenOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPriceSetDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUnicornAddress\",\"type\":\"address\"}],\"name\":\"changeRealUnicornAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cardboardUnicornTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"assembleUnicorn\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updatePriceFromRealUnicornPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_includeToken\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_includeToken\",\"type\":\"bool\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricePerUnicorn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokenAddress\",\"type\":\"address\"}],\"name\":\"changeCardboardUnicornTokenAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"realUnicornAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"updater\",\"type\":\"address\"}],\"name\":\"PriceUpdate\",\"type\":\"event\"}]","ContractName":"CardboardUnicornAssembler","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6f6da1efdf23a9c109377788721d018f7e644c708510313a96708c5e7d5addea"}]}