{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\n/**\r\n * @title Contract for object that have an owner\r\n */\r\ncontract Owned {\r\n    /**\r\n     * Contract owner address\r\n     */\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev Delegate contract to another person\r\n     * @param _owner New owner address \r\n     */\r\n    function setOwner(address _owner) onlyOwner\r\n    { owner = _owner; }\r\n\r\n    /**\r\n     * @dev Owner check modifier\r\n     */\r\n    modifier onlyOwner { if (msg.sender != owner) throw; _; }\r\n}\r\n\r\n/**\r\n * @title Common pattern for destroyable contracts \r\n */\r\ncontract Destroyable {\r\n    address public hammer;\r\n\r\n    /**\r\n     * @dev Hammer setter\r\n     * @param _hammer New hammer address\r\n     */\r\n    function setHammer(address _hammer) onlyHammer\r\n    { hammer = _hammer; }\r\n\r\n    /**\r\n     * @dev Destroy contract and scrub a data\r\n     * @notice Only hammer can call it \r\n     */\r\n    function destroy() onlyHammer\r\n    { suicide(msg.sender); }\r\n\r\n    /**\r\n     * @dev Hammer check modifier\r\n     */\r\n    modifier onlyHammer { if (msg.sender != hammer) throw; _; }\r\n}\r\n\r\n/**\r\n * @title Generic owned destroyable contract\r\n */\r\ncontract Object is Owned, Destroyable {\r\n    function Object() {\r\n        owner  = msg.sender;\r\n        hammer = msg.sender;\r\n    }\r\n}\r\n\r\n// Standard token interface (ERC 20)\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 \r\n{\r\n// Functions:\r\n    /// @return total amount of tokens\r\n    uint256 public totalSupply;\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool);\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256);\r\n\r\n// Events:\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n * @title Token contract represents any asset in digital economy\r\n */\r\ncontract Token is Object, ERC20 {\r\n    /* Short description of token */\r\n    string public name;\r\n    string public symbol;\r\n\r\n    /* Total count of tokens exist */\r\n    uint public totalSupply;\r\n\r\n    /* Fixed point position */\r\n    uint8 public decimals;\r\n    \r\n    /* Token approvement system */\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowances;\r\n \r\n    /**\r\n     * @dev Get balance of plain address\r\n     * @param _owner is a target address\r\n     * @return amount of tokens on balance\r\n     */\r\n    function balanceOf(address _owner) constant returns (uint256)\r\n    { return balances[_owner]; }\r\n \r\n    /**\r\n     * @dev Take allowed tokens\r\n     * @param _owner The address of the account owning tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @return Amount of remaining tokens allowed to spent\r\n     */\r\n    function allowance(address _owner, address _spender) constant returns (uint256)\r\n    { return allowances[_owner][_spender]; }\r\n\r\n    /* Token constructor */\r\n    function Token(string _name, string _symbol, uint8 _decimals, uint _count) {\r\n        name        = _name;\r\n        symbol      = _symbol;\r\n        decimals    = _decimals;\r\n        totalSupply = _count;\r\n        balances[msg.sender] = _count;\r\n    }\r\n \r\n    /**\r\n     * @dev Transfer self tokens to given address\r\n     * @param _to destination address\r\n     * @param _value amount of token values to send\r\n     * @notice `_value` tokens will be sended to `_to`\r\n     * @return `true` when transfer done\r\n     */\r\n    function transfer(address _to, uint _value) returns (bool) {\r\n        if (balances[msg.sender] >= _value) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to]        += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer with approvement mechainsm\r\n     * @param _from source address, `_value` tokens shold be approved for `sender`\r\n     * @param _to destination address\r\n     * @param _value amount of token values to send \r\n     * @notice from `_from` will be sended `_value` tokens to `_to`\r\n     * @return `true` when transfer is done\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        var avail = allowances[_from][msg.sender]\r\n                  > balances[_from] ? balances[_from]\r\n                                    : allowances[_from][msg.sender];\r\n        if (avail >= _value) {\r\n            allowances[_from][msg.sender] -= _value;\r\n            balances[_from] -= _value;\r\n            balances[_to]   += _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Give to target address ability for self token manipulation without sending\r\n     * @param _spender target address (future requester)\r\n     * @param _value amount of token values for approving\r\n     */\r\n    function approve(address _spender, uint256 _value) returns (bool) {\r\n        allowances[msg.sender][_spender] += _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Reset count of tokens approved for given address\r\n     * @param _spender target address (future requester)\r\n     */\r\n    function unapprove(address _spender)\r\n    { allowances[msg.sender][_spender] = 0; }\r\n}\r\n\r\ncontract TokenEmission is Token {\r\n    function TokenEmission(string _name, string _symbol, uint8 _decimals,\r\n                           uint _start_count)\r\n             Token(_name, _symbol, _decimals, _start_count)\r\n    {}\r\n\r\n    /**\r\n     * @dev Token emission\r\n     * @param _value amount of token values to emit\r\n     * @notice owner balance will be increased by `_value`\r\n     */\r\n    function emission(uint _value) onlyOwner {\r\n        // Overflow check\r\n        if (_value + totalSupply < totalSupply) throw;\r\n\r\n        totalSupply     += _value;\r\n        balances[owner] += _value;\r\n    }\r\n \r\n    /**\r\n     * @dev Burn the token values from sender balance and from total\r\n     * @param _value amount of token values for burn \r\n     * @notice sender balance will be decreased by `_value`\r\n     */\r\n    function burn(uint _value) {\r\n        if (balances[msg.sender] >= _value) {\r\n            balances[msg.sender] -= _value;\r\n            totalSupply      -= _value;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Asset recipient interface\r\n */\r\ncontract Recipient {\r\n    /**\r\n     * @dev On received ethers\r\n     * @param sender Ether sender\r\n     * @param amount Ether value\r\n     */\r\n    event ReceivedEther(address indexed sender,\r\n                        uint256 indexed amount);\r\n\r\n    /**\r\n     * @dev On received custom ERC20 tokens\r\n     * @param from Token sender\r\n     * @param value Token value\r\n     * @param token Token contract address\r\n     * @param extraData Custom additional data\r\n     */\r\n    event ReceivedTokens(address indexed from,\r\n                         uint256 indexed value,\r\n                         address indexed token,\r\n                         bytes extraData);\r\n\r\n    /**\r\n     * @dev Receive approved ERC20 tokens\r\n     * @param _from Spender address\r\n     * @param _value Transaction value\r\n     * @param _token ERC20 token contract address\r\n     * @param _extraData Custom additional data\r\n     */\r\n    function receiveApproval(address _from, uint256 _value,\r\n                             ERC20 _token, bytes _extraData) {\r\n        if (!_token.transferFrom(_from, this, _value)) throw;\r\n        ReceivedTokens(_from, _value, _token, _extraData);\r\n    }\r\n\r\n    /**\r\n     * @dev Catch sended to contract ethers\r\n     */\r\n    function () payable\r\n    { ReceivedEther(msg.sender, msg.value); }\r\n}\r\n\r\n/**\r\n * @title Crowdfunding contract\r\n */\r\ncontract Crowdfunding is Object, Recipient {\r\n    /**\r\n     * @dev Target fund account address\r\n     */\r\n    address public fund;\r\n\r\n    /**\r\n     * @dev Bounty token address\r\n     */\r\n    TokenEmission public bounty;\r\n    \r\n    /**\r\n     * @dev Distribution of donations\r\n     */\r\n    mapping(address => uint256) public donations;\r\n\r\n    /**\r\n     * @dev Total funded value\r\n     */\r\n    uint256 public totalFunded;\r\n\r\n    /**\r\n     * @dev Documentation reference\r\n     */\r\n    string public reference;\r\n\r\n    /**\r\n     * @dev Crowdfunding configuration\r\n     */\r\n    Params public config;\r\n\r\n    struct Params {\r\n        /* start/stop block stamps */\r\n        uint256 startBlock;\r\n        uint256 stopBlock;\r\n\r\n        /* Minimal/maximal funded value */\r\n        uint256 minValue;\r\n        uint256 maxValue;\r\n        \r\n        /**\r\n         * Bounty ratio equation:\r\n         *   bountyValue = value * ratio / scale\r\n         * where\r\n         *   ratio = R - (block - B) / S * V\r\n         *  R - start bounty ratio\r\n         *  B - start block number\r\n         *  S - bounty reduction step in blocks \r\n         *  V - bounty reduction value\r\n         */\r\n        uint256 bountyScale;\r\n        uint256 startRatio;\r\n        uint256 reductionStep;\r\n        uint256 reductionValue;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate bounty value by reduction equation\r\n     * @param _value Input donation value\r\n     * @param _block Input block number\r\n     * @return Bounty value\r\n     */\r\n    function bountyValue(uint256 _value, uint256 _block) constant returns (uint256) {\r\n        if (_block < config.startBlock || _block > config.stopBlock)\r\n            return 0;\r\n\r\n        var R = config.startRatio;\r\n        var B = config.startBlock;\r\n        var S = config.reductionStep;\r\n        var V = config.reductionValue;\r\n        uint256 ratio = R - (_block - B) / S * V; \r\n        return _value * ratio / config.bountyScale; \r\n    }\r\n\r\n    /**\r\n     * @dev Crowdfunding running checks\r\n     */\r\n    modifier onlyRunning {\r\n        bool isRunning = totalFunded + msg.value  < config.maxValue\r\n                      && block.number > config.startBlock\r\n                      && block.number < config.stopBlock;\r\n        if (!isRunning) throw;\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Crowdfundung failure checks\r\n     */\r\n    modifier onlyFailure {\r\n        bool isFailure = totalFunded  < config.minValue\r\n                      && block.number > config.stopBlock;\r\n        if (!isFailure) throw;\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Crowdfunding success checks\r\n     */\r\n    modifier onlySuccess {\r\n        bool isSuccess = totalFunded >= config.minValue\r\n                      && block.number > config.stopBlock;\r\n        if (!isSuccess) throw;\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Crowdfunding contract initial \r\n     * @param _fund Destination account address\r\n     * @param _bounty Bounty token address\r\n     * @param _reference Reference documentation link\r\n     * @param _startBlock Funding start block number\r\n     * @param _stopBlock Funding stop block nubmer\r\n     * @param _minValue Minimal funded value in wei \r\n     * @param _maxValue Maximal funded value in wei\r\n     * @param _scale Bounty scaling factor by funded value\r\n     * @param _startRatio Initial bounty ratio\r\n     * @param _reductionStep Bounty reduction step in blocks \r\n     * @param _reductionValue Bounty reduction value\r\n     * @notice this contract should be owner of bounty token\r\n     */\r\n    function Crowdfunding(\r\n        address _fund,\r\n        address _bounty,\r\n        string  _reference,\r\n        uint256 _startBlock,\r\n        uint256 _stopBlock,\r\n        uint256 _minValue,\r\n        uint256 _maxValue,\r\n        uint256 _scale,\r\n        uint256 _startRatio,\r\n        uint256 _reductionStep,\r\n        uint256 _reductionValue\r\n    ) {\r\n        fund      = _fund;\r\n        bounty    = TokenEmission(_bounty);\r\n        reference = _reference;\r\n\r\n        config.startBlock     = _startBlock;\r\n        config.stopBlock      = _stopBlock;\r\n        config.minValue       = _minValue;\r\n        config.maxValue       = _maxValue;\r\n        config.bountyScale    = _scale;\r\n        config.startRatio     = _startRatio;\r\n        config.reductionStep  = _reductionStep;\r\n        config.reductionValue = _reductionValue;\r\n    }\r\n\r\n    /**\r\n     * @dev Receive Ether token and send bounty\r\n     */\r\n    function () payable onlyRunning {\r\n        ReceivedEther(msg.sender, msg.value);\r\n\r\n        totalFunded           += msg.value;\r\n        donations[msg.sender] += msg.value;\r\n\r\n        var bountyVal = bountyValue(msg.value, block.number);\r\n        bounty.emission(bountyVal);\r\n        bounty.transfer(msg.sender, bountyVal);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdrawal balance on successfull finish\r\n     */\r\n    function withdraw() onlySuccess\r\n    { if (!fund.send(this.balance)) throw; }\r\n\r\n    /**\r\n     * @dev Refund donations when no minimal value achieved\r\n     */\r\n    function refund() onlyFailure {\r\n        var donation = donations[msg.sender];\r\n        donations[msg.sender] = 0;\r\n        if (!msg.sender.send(donation)) throw;\r\n    }\r\n\r\n    /**\r\n     * @dev Disable receive another tokens\r\n     */\r\n    function receiveApproval(address _from, uint256 _value,\r\n                             ERC20 _token, bytes _extraData)\r\n    { throw; }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hammer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"name\":\"startBlock\",\"type\":\"uint256\"},{\"name\":\"stopBlock\",\"type\":\"uint256\"},{\"name\":\"minValue\",\"type\":\"uint256\"},{\"name\":\"maxValue\",\"type\":\"uint256\"},{\"name\":\"bountyScale\",\"type\":\"uint256\"},{\"name\":\"startRatio\",\"type\":\"uint256\"},{\"name\":\"reductionStep\",\"type\":\"uint256\"},{\"name\":\"reductionValue\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"bountyValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reference\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"donations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hammer\",\"type\":\"address\"}],\"name\":\"setHammer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fund\",\"type\":\"address\"},{\"name\":\"_bounty\",\"type\":\"address\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_stopBlock\",\"type\":\"uint256\"},{\"name\":\"_minValue\",\"type\":\"uint256\"},{\"name\":\"_maxValue\",\"type\":\"uint256\"},{\"name\":\"_scale\",\"type\":\"uint256\"},{\"name\":\"_startRatio\",\"type\":\"uint256\"},{\"name\":\"_reductionStep\",\"type\":\"uint256\"},{\"name\":\"_reductionValue\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ReceivedTokens\",\"type\":\"event\"}]","ContractName":"Crowdfunding","CompilerVersion":"v0.4.9+commit.364da425","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000097282a7a15f9beadc854e8793aae43b089f14b4e0000000000000000000000004203bce7f488ed0cf55437ad2e5b99af51dad07a0000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000038ac67000000000000000000000000000000000000000000000000000000000038c3d700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000124f800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e446f6373207265666572656e6365000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://ff4bb85a3c26f72765d043c4189628d00f19efe6458e15efed105c9320dde1c7"}]}