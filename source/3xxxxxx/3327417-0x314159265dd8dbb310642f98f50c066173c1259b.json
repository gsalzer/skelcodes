{"status":"1","message":"OK","result":[{"SourceCode":";;; --------------------------------------------------------------------------- \n;;; @title The Ethereum Name Service registry. \n;;; @author Daniel Ellison <daniel@syrinx.net> \n \n(seq \n \n  ;; -------------------------------------------------------------------------- \n  ;; Constant definitions. \n \n  ;; Memory layout. \n  (def 'node-bytes  0x00) \n  (def 'label-bytes 0x20) \n  (def 'call-result 0x40) \n \n  ;; Struct: Record \n  (def 'resolver 0x00) ; address \n  (def 'owner    0x20) ; address \n  (def 'ttl      0x40) ; uint64 \n \n  ;; Precomputed function IDs. \n  (def 'get-node-owner    0x02571be3) ; owner(bytes32) \n  (def 'get-node-resolver 0x0178b8bf) ; resolver(bytes32) \n  (def 'get-node-ttl      0x16a25cbd) ; ttl(bytes32) \n  (def 'set-node-owner    0x5b0fc9c3) ; setOwner(bytes32,address) \n  (def 'set-subnode-owner 0x06ab5923) ; setSubnodeOwner(bytes32,bytes32,address) \n  (def 'set-node-resolver 0x1896f70a) ; setResolver(bytes32,address) \n  (def 'set-node-ttl      0x14ab9038) ; setTTL(bytes32,uint64) \n \n  ;; Jumping here causes an EVM error. \n  (def 'invalid-location 0x02) \n \n  ;; -------------------------------------------------------------------------- \n  ;; @notice Shifts the leftmost 4 bytes of a 32-byte number right by 28 bytes. \n  ;; @param input A 32-byte number. \n \n  (def 'shift-right (input) \n    (div input (exp 2 224))) \n \n  ;; -------------------------------------------------------------------------- \n  ;; @notice Determines whether the supplied function ID matches a known \n  ;;         function hash and executes <code-body> if so. \n  ;; @dev The function ID is in the leftmost four bytes of the call data. \n  ;; @param function-hash The four-byte hash of a known function signature. \n  ;; @param code-body The code to run in the case of a match. \n \n  (def 'function (function-hash code-body) \n    (when (= (shift-right (calldataload 0x00)) function-hash) \n      code-body)) \n \n  ;; -------------------------------------------------------------------------- \n  ;; @notice Calculates record location for the node and label passed in. \n  ;; @param node The parent node. \n  ;; @param label The hash of the subnode label. \n \n  (def 'get-record (node label) \n    (seq \n      (mstore node-bytes node) \n      (mstore label-bytes label) \n      (sha3 node-bytes 64))) \n \n  ;; -------------------------------------------------------------------------- \n  ;; @notice Retrieves owner from node record. \n  ;; @param node Get owner of this node. \n \n  (def 'get-owner (node) \n    (sload (+ node owner))) \n \n  ;; -------------------------------------------------------------------------- \n  ;; @notice Stores new owner in node record. \n  ;; @param node Set owner of this node. \n  ;; @param new-owner New owner of this node. \n \n  (def 'set-owner (node new-owner) \n    (sstore (+ node owner) new-owner)) \n \n  ;; -------------------------------------------------------------------------- \n  ;; @notice Stores new subnode owner in node record. \n  ;; @param node Set owner of this node. \n  ;; @param label The hash of the label specifying the subnode. \n  ;; @param new-owner New owner of the subnode. \n \n  (def 'set-subowner (node label new-owner) \n    (sstore (+ (get-record node label) owner) new-owner)) \n \n  ;; -------------------------------------------------------------------------- \n  ;; @notice Retrieves resolver from node record. \n  ;; @param node Get resolver of this node. \n \n  (def 'get-resolver (node) \n    (sload node)) \n \n  ;; -------------------------------------------------------------------------- \n  ;; @notice Stores new resolver in node record. \n  ;; @param node Set resolver of this node. \n  ;; @param new-resolver New resolver for this node. \n \n  (def 'set-resolver (node new-resolver) \n    (sstore node new-resolver)) \n \n  ;; -------------------------------------------------------------------------- \n  ;; @notice Retrieves TTL From node record. \n  ;; @param node Get TTL of this node. \n \n  (def 'get-ttl (node) \n    (sload (+ node ttl))) \n \n  ;; -------------------------------------------------------------------------- \n  ;; @notice Stores new TTL in node record. \n  ;; @param node Set TTL of this node. \n  ;; @param new-resolver New TTL for this node. \n \n  (def 'set-ttl (node new-ttl) \n    (sstore (+ node ttl) new-ttl)) \n \n  ;; -------------------------------------------------------------------------- \n  ;; @notice Checks that the caller is the node owner. \n  ;; @param node Check owner of this node. \n \n  (def 'only-node-owner (node) \n    (when (!= (caller) (get-owner node)) \n      (jump invalid-location))) \n \n  ;; -------------------------------------------------------------------------- \n  ;; INIT \n \n  ;; Set the owner of the root node (0x00) to the deploying account. \n  (set-owner 0x00 (caller)) \n \n  ;; -------------------------------------------------------------------------- \n  ;; CODE \n \n  (returnlll \n    (seq \n \n      ;; ---------------------------------------------------------------------- \n      ;; @notice Returns the address of the resolver for the specified node. \n      ;; @dev Signature: resolver(bytes32) \n      ;; @param node Return this node's resolver. \n      ;; @return The associated resolver. \n \n      (def 'node (calldataload 0x04)) \n \n      (function get-node-resolver \n        (seq \n \n          ;; Get the node's resolver and save it. \n          (mstore call-result (get-resolver node)) \n \n          ;; Return result. \n          (return call-result 32))) \n \n      ;; ---------------------------------------------------------------------- \n      ;; @notice Returns the address that owns the specified node. \n      ;; @dev Signature: owner(bytes32) \n      ;; @param node Return this node's owner. \n      ;; @return The associated address. \n \n      (def 'node (calldataload 0x04)) \n \n      (function get-node-owner \n        (seq \n \n          ;; Get the node's owner and save it. \n          (mstore call-result (get-owner node)) \n \n          ;; Return result. \n          (return call-result 32))) \n \n      ;; ---------------------------------------------------------------------- \n      ;; @notice Returns the TTL of a node and any records associated with it. \n      ;; @dev Signature: ttl(bytes32) \n      ;; @param node Return this node's TTL. \n      ;; @return The node's TTL. \n \n      (def 'node (calldataload 0x04)) \n \n      (function get-node-ttl \n        (seq \n \n          ;; Get the node's TTL and save it. \n          (mstore call-result (get-ttl node)) \n \n          ;; Return result. \n          (return call-result 32))) \n \n      ;; ---------------------------------------------------------------------- \n      ;; @notice Transfers ownership of a node to a new address. May only be \n      ;;         called by the current owner of the node. \n      ;; @dev Signature: setOwner(bytes32,address) \n      ;; @param node The node to transfer ownership of. \n      ;; @param new-owner The address of the new owner. \n \n      (def 'node (calldataload 0x04)) \n      (def 'new-owner (calldataload 0x24)) \n \n      (function set-node-owner \n        (seq (only-node-owner node) \n \n          ;; Transfer ownership by storing passed-in address. \n          (set-owner node new-owner) \n \n          ;; Emit an event about the transfer. \n          ;; Transfer(bytes32 indexed node, address owner); \n          (mstore call-result new-owner) \n          (log2 call-result 32 \n              (sha3 0x00 (lit 0x00 \"Transfer(bytes32,address)\")) node) \n \n          ;; Nothing to return. \n          (stop))) \n \n      ;; ---------------------------------------------------------------------- \n      ;; @notice Transfers ownership of a subnode to a new address. May only be \n      ;;         called by the owner of the parent node. \n      ;; @dev Signature: setSubnodeOwner(bytes32,bytes32,address) \n      ;; @param node The parent node. \n      ;; @param label The hash of the label specifying the subnode. \n      ;; @param new-owner The address of the new owner. \n \n      (def 'node (calldataload 0x04)) \n      (def 'label (calldataload 0x24)) \n      (def 'new-owner (calldataload 0x44)) \n \n      (function set-subnode-owner \n        (seq (only-node-owner node) \n \n          ;; Transfer ownership by storing passed-in address. \n          (set-subowner node label new-owner) \n \n          ;; Emit an event about the transfer. \n          ;; NewOwner(bytes32 indexed node, bytes32 indexed label, address owner); \n          (mstore call-result new-owner) \n          (log3 call-result 32 \n              (sha3 0x00 (lit 0x00 \"NewOwner(bytes32,bytes32,address)\")) \n              node label) \n \n          ;; Nothing to return. \n          (stop))) \n \n      ;; ---------------------------------------------------------------------- \n      ;; @notice Sets the resolver address for the specified node. \n      ;; @dev Signature: setResolver(bytes32,address) \n      ;; @param node The node to update. \n      ;; @param new-resolver The address of the resolver. \n \n      (def 'node (calldataload 0x04)) \n      (def 'new-resolver (calldataload 0x24)) \n \n      (function set-node-resolver \n        (seq (only-node-owner node) \n \n          ;; Transfer ownership by storing passed-in address. \n          (set-resolver node new-resolver) \n \n          ;; Emit an event about the change of resolver. \n          ;; NewResolver(bytes32 indexed node, address resolver); \n          (mstore call-result new-resolver) \n          (log2 call-result 32 \n              (sha3 0x00 (lit 0x00 \"NewResolver(bytes32,address)\")) node) \n \n          ;; Nothing to return. \n          (stop))) \n \n      ;; ---------------------------------------------------------------------- \n      ;; @notice Sets the TTL for the specified node. \n      ;; @dev Signature: setTTL(bytes32,uint64) \n      ;; @param node The node to update. \n      ;; @param ttl The TTL in seconds. \n \n      (def 'node (calldataload 0x04)) \n      (def 'new-ttl (calldataload 0x24)) \n \n      (function set-node-ttl \n        (seq (only-node-owner node) \n \n          ;; Set new TTL by storing passed-in time. \n          (set-ttl node new-ttl) \n \n          ;; Emit an event about the change of TTL. \n          ;; NewTTL(bytes32 indexed node, uint64 ttl); \n          (mstore call-result new-ttl) \n          (log2 call-result 32 \n              (sha3 0x00 (lit 0x00 \"NewTTL(bytes32,uint64)\")) node) \n \n          ;; Nothing to return. \n          (stop))) \n \n      ;; ---------------------------------------------------------------------- \n      ;; @notice Fallback: No functions matched the function ID provided. \n \n      (jump invalid-location))) \n \n)","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"},{\"name\":\"label\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setSubnodeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"},{\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"setTTL\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"ttl\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"},{\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"NewResolver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"NewTTL\",\"type\":\"event\"}]","ContractName":"ENS","CompilerVersion":"v0.4.4+commit.4633f3de","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}