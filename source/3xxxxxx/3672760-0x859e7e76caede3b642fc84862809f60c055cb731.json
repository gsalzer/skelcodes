{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.7;\r\n/// @title EarlyPurchase contract - Keep track of purchased amount by Early Purchasers\r\n/// @author Starbase PTE. LTD. - <info@starbase.co>\r\ncontract AbstractStarbaseCrowdsale {\r\n    function startDate() constant returns (uint256 startDate) {}\r\n}\r\n\r\ncontract StarbaseEarlyPurchase {\r\n    /*\r\n     *  Constants\r\n     */\r\n    string public constant PURCHASE_AMOUNT_UNIT = 'CNY';    // Chinese Yuan\r\n    string public constant PURCHASE_AMOUNT_RATE_REFERENCE = 'http://www.xe.com/currencytables/';\r\n    uint public constant PURCHASE_AMOUNT_CAP = 9000000;\r\n\r\n    /*\r\n     *  Types\r\n     */\r\n    struct EarlyPurchase {\r\n        address purchaser;\r\n        uint amount;        // CNY based amount\r\n        uint purchasedAt;   // timestamp\r\n    }\r\n\r\n    /*\r\n     *  External contracts\r\n     */\r\n    AbstractStarbaseCrowdsale public starbaseCrowdsale;\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    address public owner;\r\n    EarlyPurchase[] public earlyPurchases;\r\n    uint public earlyPurchaseClosedAt;\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier noEther() {\r\n        if (msg.value > 0) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyBeforeCrowdsale() {\r\n        if (address(starbaseCrowdsale) != 0 &&\r\n            starbaseCrowdsale.startDate() > 0)\r\n        {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyEarlyPurchaseTerm() {\r\n        if (earlyPurchaseClosedAt > 0) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /*\r\n     *  Contract functions\r\n     */\r\n    /// @dev Returns early purchased amount by purchaser's address\r\n    /// @param purchaser Purchaser address\r\n    function purchasedAmountBy(address purchaser)\r\n        external\r\n        constant\r\n        noEther\r\n        returns (uint amount)\r\n    {\r\n        for (uint i; i < earlyPurchases.length; i++) {\r\n            if (earlyPurchases[i].purchaser == purchaser) {\r\n                amount += earlyPurchases[i].amount;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns total amount of raised funds by Early Purchasers\r\n    function totalAmountOfEarlyPurchases()\r\n        constant\r\n        noEther\r\n        returns (uint totalAmount)\r\n    {\r\n        for (uint i; i < earlyPurchases.length; i++) {\r\n            totalAmount += earlyPurchases[i].amount;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns number of early purchases\r\n    function numberOfEarlyPurchases()\r\n        external\r\n        constant\r\n        noEther\r\n        returns (uint)\r\n    {\r\n        return earlyPurchases.length;\r\n    }\r\n\r\n    /// @dev Append an early purchase log\r\n    /// @param purchaser Purchaser address\r\n    /// @param amount Purchase amount\r\n    /// @param purchasedAt Timestamp of purchased date\r\n    function appendEarlyPurchase(address purchaser, uint amount, uint purchasedAt)\r\n        external\r\n        noEther\r\n        onlyOwner\r\n        onlyBeforeCrowdsale\r\n        onlyEarlyPurchaseTerm\r\n        returns (bool)\r\n    {\r\n        if (amount == 0 ||\r\n            totalAmountOfEarlyPurchases() + amount > PURCHASE_AMOUNT_CAP)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (purchasedAt == 0 || purchasedAt > now) {\r\n            throw;\r\n        }\r\n\r\n        earlyPurchases.push(EarlyPurchase(purchaser, amount, purchasedAt));\r\n        return true;\r\n    }\r\n\r\n    /// @dev Close early purchase term\r\n    function closeEarlyPurchase()\r\n        external\r\n        noEther\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        earlyPurchaseClosedAt = now;\r\n    }\r\n\r\n    /// @dev Setup function sets external contract's address\r\n    /// @param starbaseCrowdsaleAddress Token address\r\n    function setup(address starbaseCrowdsaleAddress)\r\n        external\r\n        noEther\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        if (address(starbaseCrowdsale) == 0) {\r\n            starbaseCrowdsale = AbstractStarbaseCrowdsale(starbaseCrowdsaleAddress);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /// @dev Contract constructor function\r\n    function StarbaseEarlyPurchase() noEther {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @dev Fallback function always fails\r\n    function () {\r\n        throw;\r\n    }\r\n}\r\n\r\n\r\ncontract StarbaseEarlyPurchaseAmendment {\r\n    /*\r\n     *  Events\r\n     */\r\n    event EarlyPurchaseInvalidated(uint epIdx);\r\n    event EarlyPurchaseAmended(uint epIdx);\r\n\r\n    /*\r\n     *  External contracts\r\n     */\r\n    AbstractStarbaseCrowdsale public starbaseCrowdsale;\r\n    StarbaseEarlyPurchase public starbaseEarlyPurchase;\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    address public owner;\r\n    uint[] public invalidEarlyPurchaseIndexes;\r\n    uint[] public amendedEarlyPurchaseIndexes;\r\n    mapping (uint => StarbaseEarlyPurchase.EarlyPurchase) public amendedEarlyPurchases;\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier noEther() {\r\n        if (msg.value > 0) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyBeforeCrowdsale() {\r\n        if (address(starbaseCrowdsale) != 0 &&\r\n            starbaseCrowdsale.startDate() > 0)\r\n        {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyEarlyPurchasesLoaded() {\r\n        if (address(starbaseEarlyPurchase) == 0) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /*\r\n     *  Contract functions are compatible with original ones\r\n     */\r\n    /// @dev Returns an early purchase record\r\n    /// @param earlyPurchaseIndex Index number of an early purchase\r\n    function earlyPurchases(uint earlyPurchaseIndex)\r\n        external\r\n        constant\r\n        onlyEarlyPurchasesLoaded\r\n        returns (address purchaser, uint amount, uint purchasedAt)\r\n    {\r\n        return starbaseEarlyPurchase.earlyPurchases(earlyPurchaseIndex);\r\n    }\r\n\r\n    /// @dev Returns early purchased amount by purchaser's address\r\n    /// @param purchaser Purchaser address\r\n    function purchasedAmountBy(address purchaser)\r\n        external\r\n        constant\r\n        noEther\r\n        returns (uint amount)\r\n    {\r\n        StarbaseEarlyPurchase.EarlyPurchase[] memory normalizedEP =\r\n            normalizedEarlyPurchases();\r\n        for (uint i; i < normalizedEP.length; i++) {\r\n            if (normalizedEP[i].purchaser == purchaser) {\r\n                amount += normalizedEP[i].amount;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns total amount of raised funds by Early Purchasers\r\n    function totalAmountOfEarlyPurchases()\r\n        constant\r\n        noEther\r\n        returns (uint totalAmount)\r\n    {\r\n        StarbaseEarlyPurchase.EarlyPurchase[] memory normalizedEP =\r\n            normalizedEarlyPurchases();\r\n        for (uint i; i < normalizedEP.length; i++) {\r\n            totalAmount += normalizedEP[i].amount;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns number of early purchases\r\n    function numberOfEarlyPurchases()\r\n        external\r\n        constant\r\n        noEther\r\n        returns (uint)\r\n    {\r\n        return normalizedEarlyPurchases().length;\r\n    }\r\n\r\n    /// @dev Setup function sets external contract's address\r\n    /// @param starbaseCrowdsaleAddress Token address\r\n    function setup(address starbaseCrowdsaleAddress)\r\n        external\r\n        noEther\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        if (address(starbaseCrowdsale) == 0) {\r\n            starbaseCrowdsale = AbstractStarbaseCrowdsale(starbaseCrowdsaleAddress);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /*\r\n     *  Contract functions\r\n     */\r\n    function invalidateEarlyPurchase(uint earlyPurchaseIndex)\r\n        external\r\n        noEther\r\n        onlyOwner\r\n        onlyEarlyPurchasesLoaded\r\n        onlyBeforeCrowdsale\r\n        returns (bool)\r\n    {\r\n        if (numberOfRawEarlyPurchases() <= earlyPurchaseIndex) {\r\n            throw;  // Array Index Out of Bounds Exception\r\n        }\r\n\r\n        for (uint i; i < invalidEarlyPurchaseIndexes.length; i++) {\r\n            if (invalidEarlyPurchaseIndexes[i] == earlyPurchaseIndex) {\r\n                throw;  // disallow duplicated invalidation\r\n            }\r\n        }\r\n\r\n        invalidEarlyPurchaseIndexes.push(earlyPurchaseIndex);\r\n        EarlyPurchaseInvalidated(earlyPurchaseIndex);\r\n        return true;\r\n    }\r\n\r\n    function isInvalidEarlyPurchase(uint earlyPurchaseIndex)\r\n        constant\r\n        noEther\r\n        returns (bool)\r\n    {\r\n        if (numberOfRawEarlyPurchases() <= earlyPurchaseIndex) {\r\n            throw;  // Array Index Out of Bounds Exception\r\n        }\r\n\r\n        for (uint i; i < invalidEarlyPurchaseIndexes.length; i++) {\r\n            if (invalidEarlyPurchaseIndexes[i] == earlyPurchaseIndex) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function amendEarlyPurchase(uint earlyPurchaseIndex, address purchaser, uint amount, uint purchasedAt)\r\n        external\r\n        noEther\r\n        onlyOwner\r\n        onlyEarlyPurchasesLoaded\r\n        onlyBeforeCrowdsale\r\n        returns (bool)\r\n    {\r\n        if (purchasedAt == 0 || purchasedAt > now) {\r\n            throw;\r\n        }\r\n\r\n        if (numberOfRawEarlyPurchases() <= earlyPurchaseIndex) {\r\n            throw;  // Array Index Out of Bounds Exception\r\n        }\r\n\r\n        if (isInvalidEarlyPurchase(earlyPurchaseIndex)) {\r\n            throw;  // Invalid early purchase cannot be amended\r\n        }\r\n\r\n        if (!isAmendedEarlyPurchase(earlyPurchaseIndex)) {\r\n            amendedEarlyPurchaseIndexes.push(earlyPurchaseIndex);\r\n        }\r\n\r\n        amendedEarlyPurchases[earlyPurchaseIndex] =\r\n            StarbaseEarlyPurchase.EarlyPurchase(purchaser, amount, purchasedAt);\r\n        EarlyPurchaseAmended(earlyPurchaseIndex);\r\n        return true;\r\n    }\r\n\r\n    function isAmendedEarlyPurchase(uint earlyPurchaseIndex)\r\n        constant\r\n        noEther\r\n        returns (bool)\r\n    {\r\n        if (numberOfRawEarlyPurchases() <= earlyPurchaseIndex) {\r\n            throw;  // Array Index Out of Bounds Exception\r\n        }\r\n\r\n        for (uint i; i < amendedEarlyPurchaseIndexes.length; i++) {\r\n            if (amendedEarlyPurchaseIndexes[i] == earlyPurchaseIndex) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function loadStarbaseEarlyPurchases(address starbaseEarlyPurchaseAddress)\r\n        external\r\n        noEther\r\n        onlyOwner\r\n        onlyBeforeCrowdsale\r\n        returns (bool)\r\n    {\r\n        if (starbaseEarlyPurchaseAddress == 0 ||\r\n            address(starbaseEarlyPurchase) != 0)\r\n        {\r\n            throw;\r\n        }\r\n\r\n        starbaseEarlyPurchase = StarbaseEarlyPurchase(starbaseEarlyPurchaseAddress);\r\n        if (starbaseEarlyPurchase.earlyPurchaseClosedAt() == 0) {\r\n            throw;   // the early purchase must be closed\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev Contract constructor function\r\n    function StarbaseEarlyPurchaseAmendment() noEther {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @dev Fallback function always fails\r\n    function () {\r\n        throw;\r\n    }\r\n\r\n    /**\r\n     * Internal functions\r\n     */\r\n    function normalizedEarlyPurchases()\r\n        constant\r\n        internal\r\n        returns (StarbaseEarlyPurchase.EarlyPurchase[] normalizedEP)\r\n    {\r\n        uint rawEPCount = numberOfRawEarlyPurchases();\r\n        normalizedEP = new StarbaseEarlyPurchase.EarlyPurchase[](\r\n            rawEPCount - invalidEarlyPurchaseIndexes.length);\r\n\r\n        uint normalizedIdx;\r\n        for (uint i; i < rawEPCount; i++) {\r\n            if (isInvalidEarlyPurchase(i)) {\r\n                continue;   // invalid early purchase should be ignored\r\n            }\r\n\r\n            StarbaseEarlyPurchase.EarlyPurchase memory ep;\r\n            if (isAmendedEarlyPurchase(i)) {\r\n                ep = amendedEarlyPurchases[i];  // amended early purchase should take a priority\r\n            } else {\r\n                ep = getEarlyPurchase(i);\r\n            }\r\n\r\n            normalizedEP[normalizedIdx] = ep;\r\n            normalizedIdx++;\r\n        }\r\n    }\r\n\r\n    function getEarlyPurchase(uint earlyPurchaseIndex)\r\n        internal\r\n        constant\r\n        onlyEarlyPurchasesLoaded\r\n        returns (StarbaseEarlyPurchase.EarlyPurchase)\r\n    {\r\n        var (purchaser, amount, purchasedAt) =\r\n            starbaseEarlyPurchase.earlyPurchases(earlyPurchaseIndex);\r\n        return StarbaseEarlyPurchase.EarlyPurchase(purchaser, amount, purchasedAt);\r\n    }\r\n\r\n    function numberOfRawEarlyPurchases()\r\n        internal\r\n        constant\r\n        onlyEarlyPurchasesLoaded\r\n        returns (uint)\r\n    {\r\n        return starbaseEarlyPurchase.numberOfEarlyPurchases();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"earlyPurchaseIndex\",\"type\":\"uint256\"}],\"name\":\"isAmendedEarlyPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"earlyPurchaseIndex\",\"type\":\"uint256\"}],\"name\":\"earlyPurchases\",\"outputs\":[{\"name\":\"purchaser\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"purchasedAt\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"starbaseEarlyPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfEarlyPurchases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amendedEarlyPurchases\",\"outputs\":[{\"name\":\"purchaser\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"purchasedAt\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"invalidEarlyPurchaseIndexes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"purchaser\",\"type\":\"address\"}],\"name\":\"purchasedAmountBy\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"earlyPurchaseIndex\",\"type\":\"uint256\"}],\"name\":\"isInvalidEarlyPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"starbaseCrowdsaleAddress\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"earlyPurchaseIndex\",\"type\":\"uint256\"}],\"name\":\"invalidateEarlyPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"earlyPurchaseIndex\",\"type\":\"uint256\"},{\"name\":\"purchaser\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"purchasedAt\",\"type\":\"uint256\"}],\"name\":\"amendEarlyPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"starbaseEarlyPurchaseAddress\",\"type\":\"address\"}],\"name\":\"loadStarbaseEarlyPurchases\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"starbaseCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmountOfEarlyPurchases\",\"outputs\":[{\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amendedEarlyPurchaseIndexes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"epIdx\",\"type\":\"uint256\"}],\"name\":\"EarlyPurchaseInvalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"epIdx\",\"type\":\"uint256\"}],\"name\":\"EarlyPurchaseAmended\",\"type\":\"event\"}]","ContractName":"StarbaseEarlyPurchaseAmendment","CompilerVersion":"v0.4.7+commit.822622cf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9ed0dafa85d0e004672fc9555651615d4818d48dc63205648bb5e575abafcead"}]}