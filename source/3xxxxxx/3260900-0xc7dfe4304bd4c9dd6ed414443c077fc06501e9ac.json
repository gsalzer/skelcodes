{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\n//https://github.com/nexusdev/erc20/blob/master/contracts/erc20.sol\r\n\r\ncontract ERC20Constant {\r\n    function balanceOf( address who ) constant returns (uint value);\r\n}\r\ncontract ERC20Stateful {\r\n    function transfer( address to, uint value) returns (bool ok);\r\n}\r\ncontract ERC20Events {\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\ncontract ERC20 is ERC20Constant, ERC20Stateful, ERC20Events {}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// contract can sell tokens for ETH\r\n// prices are in amount of wei per batch of token units\r\n\r\ncontract TokenTrader is owned {\r\n\r\n    address public asset;       // address of token\r\n    uint256 public sellPrice;   // contract sells lots of tokens at this price\r\n    uint256 public units;       // lot size (token-wei)\r\n\r\n    bool public sellsTokens;    // is contract selling\r\n\r\n    event ActivatedEvent(bool sells);\r\n    event UpdateEvent();\r\n\r\n    function TokenTrader (\r\n        address _asset, \r\n        uint256 _sellPrice, \r\n        uint256 _units,\r\n        bool    _sellsTokens\r\n        )\r\n    {\r\n          asset         = _asset; \r\n          sellPrice    = _sellPrice;\r\n          units         = _units; \r\n          sellsTokens   = _sellsTokens;\r\n\r\n          ActivatedEvent(sellsTokens);\r\n    }\r\n\r\n    // modify trading behavior\r\n    function activate (\r\n        bool    _sellsTokens\r\n        ) onlyOwner\r\n    {\r\n          sellsTokens   = _sellsTokens;\r\n\r\n          ActivatedEvent(sellsTokens);\r\n    }\r\n\r\n    // allow owner to remove trade token\r\n    function withdrawAsset(uint256 _value) onlyOwner returns (bool ok)\r\n    {\r\n        return ERC20(asset).transfer(owner,_value);\r\n        UpdateEvent();\r\n    }\r\n\r\n    // allow owner to remove arbitrary tokens\r\n    // included just in case contract receives wrong token\r\n    function withdrawToken(address _token, uint256 _value) onlyOwner returns (bool ok)\r\n    {\r\n        return ERC20(_token).transfer(owner,_value);\r\n        UpdateEvent();\r\n    }\r\n\r\n    // allow owner to remove ETH\r\n    function withdraw(uint256 _value) onlyOwner returns (bool ok)\r\n    {\r\n        if(this.balance >= _value) {\r\n            return owner.send(_value);\r\n        }\r\n        UpdateEvent();\r\n    }\r\n\r\n    //user buys token with ETH\r\n    function buy() payable {\r\n        if(sellsTokens || msg.sender == owner) \r\n        {\r\n            uint order   = msg.value / sellPrice; \r\n            uint can_sell = ERC20(asset).balanceOf(address(this)) / units;\r\n\r\n            if(order > can_sell)\r\n            {\r\n                uint256 change = msg.value - (can_sell * sellPrice);\r\n                order = can_sell;\r\n                if(!msg.sender.send(change)) throw;\r\n            }\r\n\r\n            if(order > 0) {\r\n                if(!ERC20(asset).transfer(msg.sender,order * units)) throw;\r\n            }\r\n            UpdateEvent();\r\n        }\r\n        else if(!msg.sender.send(msg.value)) throw;  // return user funds if the contract is not selling\r\n    }\r\n\r\n    // sending ETH to contract sells GNT to user\r\n    function () payable {\r\n        buy();\r\n    }\r\n}\r\n\r\n// This contract deploys TokenTrader contracts and logs the event\r\n// trade pairs are identified with sha3(asset,units)\r\n\r\ncontract TokenTraderFactory {\r\n\r\n    event TradeListing(bytes32 bookid, address owner, address addr);\r\n    event NewBook(bytes32 bookid, address asset, uint256 units);\r\n\r\n    mapping( address => bool ) _verify;\r\n    mapping( bytes32 => bool ) pairExits;\r\n\r\n    function verify(address tradeContract)  constant returns (\r\n        bool valid,\r\n        address asset, \r\n        uint256 sellPrice, \r\n        uint256 units,\r\n        bool    sellsTokens\r\n        ) {\r\n\r\n            valid = _verify[tradeContract];\r\n\r\n            if(valid) {\r\n                TokenTrader t = TokenTrader(tradeContract);\r\n\r\n                asset = t.asset();\r\n                sellPrice = t.sellPrice();\r\n                units = t.units();\r\n                sellsTokens = t.sellsTokens();\r\n            }\r\n\r\n    }\r\n\r\n    function createTradeContract(       \r\n        address _asset, \r\n        uint256 _sellPrice, \r\n        uint256 _units,\r\n        bool    _sellsTokens\r\n        ) returns (address) \r\n    {\r\n        if(_units == 0) throw;              // can't sell zero units\r\n\r\n        address trader = new TokenTrader (\r\n                     _asset, \r\n                     _sellPrice, \r\n                     _units,\r\n                     _sellsTokens);\r\n\r\n        var bookid = sha3(_asset,_units);\r\n\r\n        _verify[trader] = true; // record that this factory created the trader\r\n\r\n        TokenTrader(trader).transferOwnership(msg.sender); // set the owner to whoever called the function\r\n\r\n        if(pairExits[bookid] == false) {\r\n            pairExits[bookid] = true;\r\n            NewBook(bookid, _asset, _units);\r\n        }\r\n\r\n        TradeListing(bookid,msg.sender,trader);\r\n    }\r\n\r\n    function () {\r\n        throw;     // Prevents accidental sending of ether to the factory\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellsTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawAsset\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"units\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sellsTokens\",\"type\":\"bool\"}],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"_sellPrice\",\"type\":\"uint256\"},{\"name\":\"_units\",\"type\":\"uint256\"},{\"name\":\"_sellsTokens\",\"type\":\"bool\"}],\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sells\",\"type\":\"bool\"}],\"name\":\"ActivatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdateEvent\",\"type\":\"event\"}]","ContractName":"TokenTrader","CompilerVersion":"v0.4.0+commit.acd334c9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a74476443119a942de498590fe1f2454d7d4ac0d00000000000000000000000000000000000000000000000000000000000007be00000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000000000000000001","Library":"","SwarmSource":""}]}