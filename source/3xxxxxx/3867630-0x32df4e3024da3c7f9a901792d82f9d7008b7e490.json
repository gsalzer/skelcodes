{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n//\r\n// ==== DISCLAIMER ====\r\n//\r\n// ETHEREUM IS STILL AN EXPEREMENTAL TECHNOLOGY.\r\n// ALTHOUGH THIS SMART CONTRACT WAS CREATED WITH GREAT CARE AND IN THE HOPE OF BEING USEFUL, NO GUARANTEES OF FLAWLESS OPERATION CAN BE GIVEN.\r\n// IN PARTICULAR - SUBTILE BUGS, HACKER ATTACKS OR MALFUNCTION OF UNDERLYING TECHNOLOGY CAN CAUSE UNINTENTIONAL BEHAVIOUR.\r\n// YOU ARE STRONGLY ENCOURAGED TO STUDY THIS SMART CONTRACT CAREFULLY IN ORDER TO UNDERSTAND POSSIBLE EDGE CASES AND RISKS.\r\n// DON'T USE THIS SMART CONTRACT IF YOU HAVE SUBSTANTIAL DOUBTS OR IF YOU DON'T KNOW WHAT YOU ARE DOING.\r\n//\r\n// THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\r\n// AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\r\n// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\r\n// OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n// ====\r\n//\r\n//\r\n// ==== PARANOIA NOTICE ====\r\n// A careful reader will find some additional checks and excessive code, consuming some extra gas. This is intentional.\r\n// Even though the contract should work without these parts, they make the code more secure in production and for future refactoring.\r\n// Also, they show more clearly what we have considered and addressed during development.\r\n// Discussion is welcome!\r\n// ====\r\n//\r\n\r\n/// @author ethernian\r\n/// @notice report bugs to: bugs@ethernian.com\r\n/// @title Presaler Voting Contract\r\n\r\ncontract TokenStorage {\r\n    function balances(address account) public returns(uint balance);\r\n}\r\n\r\ncontract PresalerVoting {\r\n\r\n    string public constant VERSION = \"0.0.8\";\r\n\r\n    /* ====== configuration START ====== */\r\n\r\n    uint public VOTING_START_BLOCKNR  = 0;\r\n    uint public VOTING_END_TIME       = 0;\r\n\r\n    /* ====== configuration END ====== */\r\n\r\n    TokenStorage PRESALE_CONTRACT = TokenStorage(0x4Fd997Ed7c10DbD04e95d3730cd77D79513076F2);\r\n\r\n    string[3] private stateNames = [\"BEFORE_START\",  \"VOTING_RUNNING\", \"CLOSED\" ];\r\n    enum State { BEFORE_START,  VOTING_RUNNING, CLOSED }\r\n\r\n    mapping (address => uint) public rawVotes;\r\n\r\n    uint private constant MAX_AMOUNT_EQU_0_PERCENT   = 10 finney;\r\n    uint private constant MIN_AMOUNT_EQU_100_PERCENT = 1 ether ;\r\n    uint public constant TOTAL_BONUS_SUPPLY_ETH = 12000;\r\n\r\n\r\n\r\n    address public owner;\r\n    address[] public voters;\r\n    uint16 public stakeVoted_Eth;\r\n    uint16 public stakeRemainingToVote_Eth;\r\n    uint16 public stakeWaived_Eth;\r\n    uint16 public stakeConfirmed_Eth;\r\n\r\n    //constructors\r\n    function PresalerVoting () {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    //accept (and send back) voting payments here\r\n    function ()\r\n    onlyState(State.VOTING_RUNNING)\r\n    payable {\r\n        uint bonusVoted;\r\n        uint bonus = PRESALE_CONTRACT.balances(msg.sender);\r\n        assert (bonus > 0); // only presaler allowed in.\r\n        if (msg.value > 1 ether || !msg.sender.send(msg.value)) throw;\r\n        if (rawVotes[msg.sender] == 0) {\r\n            voters.push(msg.sender);\r\n            stakeVoted_Eth += uint16(bonus / 1 ether);\r\n        } else {\r\n            //clear statistik related to old voting state for this sender\r\n            bonusVoted           = votedPerCent(msg.sender) * bonus / 100;\r\n            stakeWaived_Eth     -= uint16((bonus - bonusVoted) / 1 ether);\r\n            stakeConfirmed_Eth  -= uint16(bonusVoted / 1 ether);\r\n        }\r\n        //special treatment for 0-ether payment\r\n        rawVotes[msg.sender] = msg.value > 0 ? msg.value : 1 wei;\r\n\r\n        bonusVoted           = votedPerCent(msg.sender) * bonus / 100;\r\n        stakeWaived_Eth     += uint16((bonus - bonusVoted) / 1 ether);\r\n        stakeConfirmed_Eth  += uint16(bonusVoted / 1 ether);\r\n\r\n        stakeRemainingToVote_Eth = uint16(TOTAL_BONUS_SUPPLY_ETH - bonus / 1 ether);\r\n\r\n    }\r\n\r\n    function votersLen() external returns (uint) { return voters.length; }\r\n\r\n    /// @notice start voting at `startBlockNr` for `durationHrs`.\r\n    /// Restricted for owner only.\r\n    /// @param startBlockNr block number to start voting; starts immediatly if less than current block number.\r\n    /// @param durationHrs voting duration (from now!); at least 1 hour.\r\n    function startVoting(uint startBlockNr, uint durationHrs) onlyOwner {\r\n        VOTING_START_BLOCKNR = max(block.number, startBlockNr);\r\n        VOTING_END_TIME = now + max(durationHrs,1) * 1 hours;\r\n    }\r\n\r\n    function setOwner(address newOwner) onlyOwner { owner = newOwner; }\r\n\r\n    /// @notice returns current voting result for given address in percent.\r\n    /// @param voter balance holder address.\r\n    function votedPerCent(address voter) constant public returns (uint) {\r\n        var rawVote = rawVotes[voter];\r\n        if (rawVote < MAX_AMOUNT_EQU_0_PERCENT) return 0;\r\n        else if (rawVote >= MIN_AMOUNT_EQU_100_PERCENT) return 100;\r\n        else return rawVote * 100 / 1 ether;\r\n    }\r\n\r\n    /// @notice return voting remaining time (hours, minutes).\r\n    function votingEndsInHHMM() constant returns (uint8, uint8) {\r\n        var tsec = VOTING_END_TIME - now;\r\n        return VOTING_END_TIME==0 ? (0,0) : (uint8(tsec / 1 hours), uint8(tsec % 1 hours / 1 minutes));\r\n    }\r\n\r\n    function currentState() internal constant returns (State) {\r\n        if (VOTING_START_BLOCKNR == 0 || block.number < VOTING_START_BLOCKNR) {\r\n            return State.BEFORE_START;\r\n        } else if (now <= VOTING_END_TIME) {\r\n            return State.VOTING_RUNNING;\r\n        } else {\r\n            return State.CLOSED;\r\n        }\r\n    }\r\n\r\n    /// @notice returns current state of the voting.\r\n    function state() public constant returns(string) {\r\n        return stateNames[uint(currentState())];\r\n    }\r\n\r\n    function max(uint a, uint b) internal constant returns (uint maxValue) { return a>b ? a : b; }\r\n\r\n    modifier onlyState(State state) {\r\n        if (currentState()!=state) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender!=owner) throw;\r\n        _;\r\n    }\r\n\r\n}//contract","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rawVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeWaived_Eth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeVoted_Eth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeRemainingToVote_Eth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"votedPerCent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startBlockNr\",\"type\":\"uint256\"},{\"name\":\"durationHrs\",\"type\":\"uint256\"}],\"name\":\"startVoting\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VOTING_END_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeConfirmed_Eth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votingEndsInHHMM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VOTING_START_BLOCKNR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"votersLen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_BONUS_SUPPLY_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"PresalerVoting","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3916a0de3355353b1e39b776a524bfbc6391f89f2652037cf62c557949a12664"}]}