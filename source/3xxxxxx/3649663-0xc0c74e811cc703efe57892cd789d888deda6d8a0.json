{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\n\r\n// MetrumCoin Ltd. CryptoShares\r\n\r\n// 'interface':\r\n//  this is expected from another contract,\r\n//  if it wants to spend tokens (shares) of behalf of the token owner\r\n//  in our contract\r\ncontract tokenRecipient {\r\n    function receiveApproval(address _from, // sharehoder\r\n    uint256 _value, // number of shares\r\n    address _share, // - will be this contract\r\n    bytes _extraData); //\r\n}\r\n\r\n\r\ncontract MetrumcoinShares {\r\n\r\n    /* Standard public variables of the token */\r\n\r\n    // string public standard = 'ERC20 Token'; // https://github.com/ethereum/EIPs/issues/20\r\n\r\n    string public name = \"Metrumcoin Shares\";\r\n\r\n    string public symbol = \"Metrumcoin Shares\";\r\n\r\n    uint8 public decimals = 0;\r\n\r\n    uint256 public totalSupply = 50000;\r\n\r\n    /* ------------------- Corporate Stock Ledger ---------- */\r\n    // Shares, shareholders, balances ect.\r\n\r\n    // list of all shareholders (represented by Ethereum accounts)\r\n    // in this Corporation's history, # is ID\r\n    address[] public shareholder;\r\n    // this helps to find address by ID without loop\r\n    mapping (address => uint256) public shareholderID;\r\n    // list of adresses, that who currently own at least one share\r\n    address[] public activeShareholdersArray;\r\n    // balances:\r\n    mapping (address => uint256) public balanceOf;\r\n    // shares that have to be managed by external contract\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* ------- Utilities:  */\r\n    // universal events\r\n    event Result(address transactionInitiatedBy, string message);\r\n\r\n    event Message(string message);\r\n\r\n    /*  --------------- Constructor --------- */\r\n    // Initializes contract with initial supply tokens to the creator of the contract\r\n    function MetrumcoinShares() {// - truffle compiles only no args Constructor\r\n        balanceOf[msg.sender] = totalSupply;\r\n        // Give the creator all initial\r\n        // -- start corporate stock ledger\r\n        // (push - returns the new length);\r\n        shareholderID[this] = shareholder.push(this) - 1;\r\n        // # 0\r\n        shareholderID[msg.sender] = shareholder.push(msg.sender) - 1;\r\n        // #1\r\n        activeShareholdersArray.push(msg.sender);\r\n        // add to active shareholders\r\n    }\r\n\r\n    /* --------------- Shares management ------ */\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function refreshActiveShareholdersArray() returns (address[]) {\r\n        delete activeShareholdersArray;\r\n        for (uint256 i = 0; i < shareholder.length; i++) {\r\n            if (balanceOf[shareholder[i]] > 0) {\r\n                activeShareholdersArray.push(shareholder[i]);\r\n            }\r\n        }\r\n        return activeShareholdersArray;\r\n    }\r\n\r\n    // constant\r\n    function getActiveShareholdersArray() constant returns (address[]){\r\n        return activeShareholdersArray;\r\n    }\r\n\r\n    function getActiveShareholdersArrayLength() constant returns (uint){\r\n        return activeShareholdersArray.length;\r\n    }\r\n\r\n    // constant\r\n    function getShareholderArray() constant returns (address[]){\r\n        return shareholder;\r\n    }\r\n\r\n    function getShareholderArrayLength() constant returns (uint){\r\n        return shareholder.length;\r\n    }\r\n\r\n    /* ---- Transfer shares to another adress ----*/\r\n    // see: https://github.com/ethereum/EIPs/issues/20\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        // check arguments:\r\n        if (_value < 1) throw;\r\n        if (this == _to) throw;\r\n        // do not send shares to contract itself;\r\n        if (balanceOf[msg.sender] < _value) throw;\r\n        // Check if the sender has enough\r\n\r\n        // make transaction\r\n        balanceOf[msg.sender] -= _value;\r\n        // Subtract from the sender\r\n        balanceOf[_to] += _value;\r\n        // Add the same to the recipient\r\n\r\n        // if new address, add it to shareholders history (stock ledger):\r\n        if (shareholderID[_to] == 0) {// ----------- check if works\r\n            shareholderID[_to] = shareholder.push(_to) - 1;\r\n        }\r\n        // Notify anyone listening that this transfer took place\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n\r\n    } // end of transfer()\r\n\r\n    /* Allow another contract to spend some shares in your behalf\r\n    (shareholder calls this) */\r\n    function approveAndCall(address _spender, // another contract's adress\r\n    uint256 _value, // number of shares\r\n    bytes _extraData) // data for another contract\r\n    returns (bool success) {\r\n        // msg.sender - account owner who gives allowance\r\n        // _spender   - address of another contract\r\n        // it writes in \"allowance\" that this owner allows another\r\n        // contract (_spender) to spend thi amont (_value) of shares\r\n        // in his behalf\r\n        allowance[msg.sender][_spender] = _value;\r\n        // 'spender' is another contract that implements code\r\n        //  prescribed in 'shareRecipient' above\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        // this contract calls 'receiveApproval' function\r\n        // of another contract to send information about\r\n        // allowance\r\n        spender.receiveApproval(msg.sender, // shares owner\r\n        _value, // number of shares\r\n        this, // this contract's adress\r\n        _extraData);\r\n        // data from shares owner\r\n        return true;\r\n    }\r\n\r\n    /* this function can be called from another contract, after it\r\n    have allowance to transfer shares in behalf of shareholder  */\r\n    function transferFrom(address _from,\r\n    address _to,\r\n    uint256 _value)\r\n    returns (bool success) {\r\n\r\n        // Check arguments:\r\n        // should one share or more\r\n        if (_value < 1) throw;\r\n        // do not send shares to this contract itself;\r\n        if (this == _to) throw;\r\n        // Check if the sender has enough\r\n        if (balanceOf[_from] < _value) throw;\r\n\r\n        // Check allowance\r\n        if (_value > allowance[_from][msg.sender]) throw;\r\n\r\n        // if transfer to new address -- add him to ledger\r\n        if (shareholderID[_to] == 0) {\r\n            shareholderID[_to] = shareholder.push(_to) - 1;\r\n            // push function returns the new length\r\n        }\r\n\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n\r\n        // Change allowances correspondingly\r\n        allowance[_from][msg.sender] -= _value;\r\n        // Notify anyone listening that this transfer took place\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*  --------- Voting  --------------  */\r\n    // we only count 'yes' votes, not voting 'yes'\r\n    // considered as voting 'no' (as stated in Bylaws)\r\n\r\n    // each proposal should contain it's text\r\n    // index of text in this array is a proposal ID\r\n    string[] public proposalText;\r\n    // proposalID => (shareholder => \"if already voted for this proposal\")\r\n    mapping (uint256 => mapping (address => bool)) voted;\r\n    // proposalID => addresses voted 'yes'\r\n    // exact number of votes according to shares will be counted\r\n    // after deadline\r\n    mapping (uint256 => address[]) public votes;\r\n    // proposalID => deadline\r\n    mapping (uint256 => uint256) public deadline;\r\n    // proposalID => final 'yes' votes\r\n    mapping (uint256 => uint256) public results;\r\n    // proposals of every shareholder\r\n    mapping (address => uint256[]) public proposalsByShareholder;\r\n\r\n    function getProposalTextArrayLength() constant returns (uint){\r\n        return proposalText.length;\r\n    }\r\n\r\n    event ProposalAdded(uint256 proposalID,\r\n    address initiator,\r\n    string description,\r\n    uint256 deadline);\r\n\r\n    event VotingFinished(uint256 proposalID, uint256 votes);\r\n\r\n    function makeNewProposal(string _proposalDescription,\r\n    uint256 _debatingPeriodInMinutes)\r\n    returns (uint256){\r\n        // only shareholder with one or more shares can make a proposal\r\n        // !!!! can be more then one share required\r\n        if (balanceOf[msg.sender] < 1) throw;\r\n\r\n        if (_debatingPeriodInMinutes < 1) throw;\r\n\r\n        uint256 id = proposalText.push(_proposalDescription) - 1;\r\n        deadline[id] = now + _debatingPeriodInMinutes * 1 minutes;\r\n\r\n        // add to proposals of this shareholder:\r\n        proposalsByShareholder[msg.sender].push(id);\r\n\r\n        // initiator always votes 'yes'\r\n        votes[id].push(msg.sender);\r\n        voted[id][msg.sender] = true;\r\n\r\n        ProposalAdded(id, msg.sender, _proposalDescription, deadline[id]);\r\n\r\n        return id;\r\n        // returns proposal id\r\n    }\r\n\r\n    function getMyProposals() constant returns (uint256[]){\r\n        return proposalsByShareholder[msg.sender];\r\n    }\r\n\r\n    function voteForProposal(uint256 _proposalID) returns (string) {\r\n\r\n        // if no shares currently owned - no right to vote\r\n        if (balanceOf[msg.sender] < 1) return \"no shares, vote not accepted\";\r\n\r\n        // if already voted - throw, else voting can be spammed\r\n        if (voted[_proposalID][msg.sender]) {\r\n            return \"already voted, vote not accepted\";\r\n        }\r\n\r\n        // no votes after deadline\r\n        if (now > deadline[_proposalID]) {\r\n            return \"vote not accepted after deadline\";\r\n        }\r\n\r\n        // add to list of voted 'yes'\r\n        votes[_proposalID].push(msg.sender);\r\n        voted[_proposalID][msg.sender] = true;\r\n        return \"vote accepted\";\r\n    }\r\n\r\n    // to count votes this transaction should be started manually\r\n    // from _any_ Ethereum address after deadline\r\n    function countVotes(uint256 _proposalID) returns (uint256){\r\n\r\n        // if not after deadline - throw\r\n        if (now < deadline[_proposalID]) throw;\r\n\r\n        // if already counted return result;\r\n        if (results[_proposalID] > 0) return results[_proposalID];\r\n\r\n        // else should count results and store in public variable\r\n        uint256 result = 0;\r\n        for (uint256 i = 0; i < votes[_proposalID].length; i++) {\r\n\r\n            address voter = votes[_proposalID][i];\r\n            result = result + balanceOf[voter];\r\n        }\r\n        // ----->>> !!! important\r\n        // store result\r\n        results[_proposalID] = result;\r\n\r\n        // Log and notify anyone listening that this voting finished\r\n        // with 'result' - number of 'yes' votes\r\n        VotingFinished(_proposalID, result);\r\n\r\n        return result;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"voteForProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProposalTextArrayLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"countVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"results\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeShareholdersArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refreshActiveShareholdersArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalDescription\",\"type\":\"string\"},{\"name\":\"_debatingPeriodInMinutes\",\"type\":\"uint256\"}],\"name\":\"makeNewProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyProposals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"shareholderID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getActiveShareholdersArrayLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareholder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalText\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getActiveShareholdersArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalsByShareholder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getShareholderArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getShareholderArrayLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transactionInitiatedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Result\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Message\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ProposalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"votes\",\"type\":\"uint256\"}],\"name\":\"VotingFinished\",\"type\":\"event\"}]","ContractName":"MetrumcoinShares","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f39ff00f29257218a1f5afaa01b920c67d7e8602164693d06e7c36865a218ee3"}]}