{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\n/**\r\n * @title Contains the history of all relevant historic events in the vehicle lifecycle.\r\n */\r\ncontract History  {\r\n\r\n    // The creator of this contract. This address can authorize Mechanics, Insurers, Car-Dealers etc\r\n    // to log events.\r\n    address owner;\r\n\r\n    // Currently 3 types suported. More to come soon.\r\n    enum EventType { NewOwner, Maintenance, DamageRepair }\r\n\r\n    // List of addresses controlled by Mechanics, Insurers, Car-Dealers etc. that are \r\n    // Authorized to log events this Vehicle-History-Log.\r\n    mapping(address => bool) public authorizedLoggers;\r\n\r\n    // This event is broadcasted when a new maintenance event is logged.\r\n    event EventLogged(string vin, EventType eventType, uint256 mileage, address verifier);\r\n\r\n    // The event is broadcasted when a new logger is authorized to log events.\r\n    event LoggerAuthorized(address loggerAddress);\r\n\r\n    struct LedgerEvent {\r\n        \r\n        uint256 creationTime;\r\n        uint256 mileage; \r\n        uint256 repairOrderNumber;\r\n        address verifier; \r\n        EventType eventType;\r\n        string description;   \r\n    }\r\n\r\n    mapping (bytes32 => LedgerEvent[]) events;\r\n\r\n    /**\r\n     * Set the owner.\r\n     */\r\n    function History() {\r\n        \r\n        owner = msg.sender; \r\n    }\r\n\r\n    /**\r\n     * Only allows addresses can call this function.\r\n     */\r\n    modifier onlyAuthorized {\r\n\r\n        if (!authorizedLoggers[msg.sender])\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Only owner can call this function.\r\n     */\r\n     modifier onlyOwner {\r\n\r\n        if (msg.sender != owner)\r\n            throw;\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * Authorize the specified address to add evemnts to the historic log.\r\n     */\r\n    function authorize(address newLogger) onlyOwner {\r\n\r\n        authorizedLoggers[newLogger] = true;\r\n        LoggerAuthorized(newLogger);\r\n    }\r\n\r\n    /**\r\n     * Checks if the specified address is authorized to log events.\r\n     */\r\n    function isAuthorized(address logger) returns (bool) {\r\n\r\n         return authorizedLoggers[logger];\r\n    }\r\n\r\n    /**\r\n     * Add a historically significant event (i.e. maintenance, damage \r\n     * repair or new owner).\r\n     */\r\n    function addEvent(uint256 _mileage, \r\n                     uint256 _repairOrderNumber,\r\n                     EventType _eventType, \r\n                     string _description, \r\n                     string _vin) onlyAuthorized {\r\n\r\n        events[sha3(_vin)].push(LedgerEvent({\r\n            creationTime: now,\r\n            mileage: _mileage,\r\n            repairOrderNumber: _repairOrderNumber,\r\n            verifier: msg.sender,\r\n            eventType: _eventType,\r\n            description: _description\r\n        }));\r\n        \r\n        EventLogged(_vin, _eventType, _mileage, msg.sender);\r\n    }\r\n    \r\n    /**\r\n     * Returns the number of events for a vin. (helper function for getEvent function)\r\n     */\r\n    function getEventsCount(string _vin) constant returns(uint256) {\r\n\r\n        return events[sha3(_vin)].length;\r\n    }\r\n    \r\n    /**\r\n     * Returns the details of a specific event. To be used together with the function\r\n     * getEventsCount().\r\n     */\r\n    function getEvent(string _vin, uint256 _index) constant\r\n                returns (uint256 mileage, address verifier, \r\n                        EventType eventType, string description) {\r\n\r\n        LedgerEvent memory e = events[sha3(_vin)][_index];\r\n        mileage = e.mileage;\r\n        verifier = e.verifier;\r\n        eventType = e.eventType;\r\n        description = e.description;\r\n    }\r\n\r\n    /**\r\n     * Lifecycle management (Solidity best-practice).\r\n     */\r\n    function kill() onlyOwner { \r\n\r\n        selfdestruct(owner); \r\n    }\r\n\r\n    /**\r\n     * Fallback function (Solidity best-practice).\r\n     */\r\n    function() payable {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_vin\",\"type\":\"string\"}],\"name\":\"getEventsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedLoggers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mileage\",\"type\":\"uint256\"},{\"name\":\"_repairOrderNumber\",\"type\":\"uint256\"},{\"name\":\"_eventType\",\"type\":\"uint8\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_vin\",\"type\":\"string\"}],\"name\":\"addEvent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newLogger\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_vin\",\"type\":\"string\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getEvent\",\"outputs\":[{\"name\":\"mileage\",\"type\":\"uint256\"},{\"name\":\"verifier\",\"type\":\"address\"},{\"name\":\"eventType\",\"type\":\"uint8\"},{\"name\":\"description\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"logger\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"vin\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"eventType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"mileage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"EventLogged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"loggerAddress\",\"type\":\"address\"}],\"name\":\"LoggerAuthorized\",\"type\":\"event\"}]","ContractName":"History","CompilerVersion":"v0.4.10+commit.f0d539ae","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8c7195d9e6ecf136af997688a9de5d1059ab133b77b260deee876c020b0e4701"}]}