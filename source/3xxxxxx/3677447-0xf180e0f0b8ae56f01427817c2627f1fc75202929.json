{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n\r\n/* Родительский контракт */\r\ncontract Owned {\r\n\r\n    /* Адрес владельца контракта*/\r\n    address owner;\r\n\r\n    /* Конструктор контракта, вызывается при первом запуске */\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /* Изменить владельца контракта, newOwner - адрес нового владельца */\r\n    function changeOwner(address newOwner) onlyowner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    /* Модификатор для ограничения доступа к функциям только для владельца */\r\n    modifier onlyowner() {\r\n        if (msg.sender==owner) _;\r\n    }\r\n\r\n    /* Удалить контракт */\r\n    function kill() onlyowner {\r\n        if (msg.sender == owner) suicide(owner);\r\n    }\r\n}\r\n\r\n/* Основной контракт, наследует контракт Owned */\r\ncontract Gods is Owned {\r\n\r\n    /* Структура представляющая участника */\r\n    struct Member {\r\n        address member;\r\n        string name;\r\n        string surname;\r\n        string patronymic;\r\n        uint birthDate;\r\n        string birthPlace;\r\n        string avatarHash;\r\n        uint avatarID;\r\n        bool approved;\r\n        uint memberSince;\r\n    }\r\n\r\n    /* Массив участников */\r\n    Member[] public members;\r\n\r\n    /* Маппинг адрес участника -> id участника */\r\n    mapping (address => uint) public memberId;\r\n\r\n    /* Маппинг id участника -> приватный ключ кошелька */\r\n    mapping (uint => string) public pks;\r\n\r\n    /* Маппинг id участника -> дополнительные данные на участника в формате JSON */\r\n    mapping (uint => string) public memberData;\r\n\r\n    /* Событие при добавлении участника, параметры - адрес, ID */\r\n    event MemberAdded(address member, uint id);\r\n\r\n    /* Событие при изменении участника, параметры - адрес, ID */\r\n    event MemberChanged(address member, uint id);\r\n\r\n    /* Конструктор контракта, вызывается при первом запуске */\r\n    function Gods() {\r\n        /* Добавляем пустого участника для инициализации */\r\n        addMember('', '', '', 0, '', '', 0, '');\r\n    }\r\n\r\n    /* функция добавления и обновления участника, параметры - адрес, имя, фамилия,\r\n     отчество, дата рождения (linux time), место рождения, хэш аватара, ID аватара\r\n     если пользователь с таким адресом не найден, то будет создан новый, в конце вызовется событие\r\n     MemberAdded, если пользователь найден, то будет произведено обновление полей и проставлен флаг\r\n     подтверждения approved */\r\n    function addMember(string name,\r\n        string surname,\r\n        string patronymic,\r\n        uint birthDate,\r\n        string birthPlace,\r\n        string avatarHash,\r\n        uint avatarID,\r\n        string data) onlyowner {\r\n        uint id;\r\n        address member = msg.sender;\r\n        if (memberId[member] == 0) {\r\n            memberId[member] = members.length;\r\n            id = members.length++;\r\n            members[id] = Member({\r\n                member: member,\r\n                name: name,\r\n                surname: surname,\r\n                patronymic: patronymic,\r\n                birthDate: birthDate,\r\n                birthPlace: birthPlace,\r\n                avatarHash: avatarHash,\r\n                avatarID: avatarID,\r\n                approved: (owner == member),\r\n                memberSince: now\r\n            });\r\n            memberData[id] = data;\r\n            if (member != 0) {\r\n                MemberAdded(member, id);\r\n            }\r\n        } else {\r\n            id = memberId[member];\r\n            Member m = members[id];\r\n            m.approved = true;\r\n            m.name = name;\r\n            m.surname = surname;\r\n            m.patronymic = patronymic;\r\n            m.birthDate = birthDate;\r\n            m.birthPlace = birthPlace;\r\n            m.avatarHash = avatarHash;\r\n            m.avatarID = avatarID;\r\n            memberData[id] = data;\r\n            MemberChanged(member, id);\r\n        }\r\n    }\r\n\r\n    /* Функция получения приватного ключа по ID юзера */\r\n    function getPK(uint id) onlyowner constant returns (string) {\r\n        return pks[id];\r\n    }\r\n\r\n    /* Функция получения количества юзеров */\r\n    function getMemberCount() constant returns (uint) {\r\n        return members.length - 1;\r\n    }\r\n\r\n    /* Функция получения юзера по id\r\n     возвращает массив из полей [имя, фамилия, отчество, дата_рождения, хэш аватара, id аватара] */\r\n    function getMember(uint id) constant returns (\r\n        string name,\r\n        string surname,\r\n        string patronymic,\r\n        uint birthDate,\r\n        string birthPlace,\r\n        string avatarHash,\r\n        uint avatarID,\r\n        string data) {\r\n        Member m = members[id];\r\n        name = m.name;\r\n        surname = m.surname;\r\n        patronymic = m.patronymic;\r\n        birthDate = m.birthDate;\r\n        birthPlace = m.birthPlace;\r\n        avatarHash = m.avatarHash;\r\n        avatarID = m.avatarID;\r\n        data = memberData[id];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"memberData\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"memberId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"name\":\"member\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"surname\",\"type\":\"string\"},{\"name\":\"patronymic\",\"type\":\"string\"},{\"name\":\"birthDate\",\"type\":\"uint256\"},{\"name\":\"birthPlace\",\"type\":\"string\"},{\"name\":\"avatarHash\",\"type\":\"string\"},{\"name\":\"avatarID\",\"type\":\"uint256\"},{\"name\":\"approved\",\"type\":\"bool\"},{\"name\":\"memberSince\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMemberCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getMember\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"surname\",\"type\":\"string\"},{\"name\":\"patronymic\",\"type\":\"string\"},{\"name\":\"birthDate\",\"type\":\"uint256\"},{\"name\":\"birthPlace\",\"type\":\"string\"},{\"name\":\"avatarHash\",\"type\":\"string\"},{\"name\":\"avatarID\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pks\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPK\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"surname\",\"type\":\"string\"},{\"name\":\"patronymic\",\"type\":\"string\"},{\"name\":\"birthDate\",\"type\":\"uint256\"},{\"name\":\"birthPlace\",\"type\":\"string\"},{\"name\":\"avatarHash\",\"type\":\"string\"},{\"name\":\"avatarID\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"addMember\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"MemberChanged\",\"type\":\"event\"}]","ContractName":"Gods","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://84c062b547697690404cb11a825017780e57ab38a5233e721c16c9f01a6623fb"}]}