{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\n/**\r\n * @title Contract for object that have an owner\r\n */\r\ncontract Owned {\r\n    /**\r\n     * Contract owner address\r\n     */\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev Delegate contract to another person\r\n     * @param _owner New owner address \r\n     */\r\n    function setOwner(address _owner) onlyOwner\r\n    { owner = _owner; }\r\n\r\n    /**\r\n     * @dev Owner check modifier\r\n     */\r\n    modifier onlyOwner { if (msg.sender != owner) throw; _; }\r\n}\r\n\r\n/**\r\n * @title Common pattern for destroyable contracts \r\n */\r\ncontract Destroyable {\r\n    address public hammer;\r\n\r\n    /**\r\n     * @dev Hammer setter\r\n     * @param _hammer New hammer address\r\n     */\r\n    function setHammer(address _hammer) onlyHammer\r\n    { hammer = _hammer; }\r\n\r\n    /**\r\n     * @dev Destroy contract and scrub a data\r\n     * @notice Only hammer can call it \r\n     */\r\n    function destroy() onlyHammer\r\n    { suicide(msg.sender); }\r\n\r\n    /**\r\n     * @dev Hammer check modifier\r\n     */\r\n    modifier onlyHammer { if (msg.sender != hammer) throw; _; }\r\n}\r\n\r\n/**\r\n * @title Generic owned destroyable contract\r\n */\r\ncontract Object is Owned, Destroyable {\r\n    function Object() {\r\n        owner  = msg.sender;\r\n        hammer = msg.sender;\r\n    }\r\n}\r\n\r\n// Standard token interface (ERC 20)\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 \r\n{\r\n// Functions:\r\n    /// @return total amount of tokens\r\n    uint256 public totalSupply;\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool);\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256);\r\n\r\n// Events:\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n * @title Token contract represents any asset in digital economy\r\n */\r\ncontract Token is Object, ERC20 {\r\n    /* Short description of token */\r\n    string public name;\r\n    string public symbol;\r\n\r\n    /* Total count of tokens exist */\r\n    uint public totalSupply;\r\n\r\n    /* Fixed point position */\r\n    uint8 public decimals;\r\n    \r\n    /* Token approvement system */\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowances;\r\n \r\n    /**\r\n     * @dev Get balance of plain address\r\n     * @param _owner is a target address\r\n     * @return amount of tokens on balance\r\n     */\r\n    function balanceOf(address _owner) constant returns (uint256)\r\n    { return balances[_owner]; }\r\n \r\n    /**\r\n     * @dev Take allowed tokens\r\n     * @param _owner The address of the account owning tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @return Amount of remaining tokens allowed to spent\r\n     */\r\n    function allowance(address _owner, address _spender) constant returns (uint256)\r\n    { return allowances[_owner][_spender]; }\r\n\r\n    /* Token constructor */\r\n    function Token(string _name, string _symbol, uint8 _decimals, uint _count) {\r\n        name        = _name;\r\n        symbol      = _symbol;\r\n        decimals    = _decimals;\r\n        totalSupply = _count;\r\n        balances[msg.sender] = _count;\r\n    }\r\n \r\n    /**\r\n     * @dev Transfer self tokens to given address\r\n     * @param _to destination address\r\n     * @param _value amount of token values to send\r\n     * @notice `_value` tokens will be sended to `_to`\r\n     * @return `true` when transfer done\r\n     */\r\n    function transfer(address _to, uint _value) returns (bool) {\r\n        if (balances[msg.sender] >= _value) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to]        += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer with approvement mechainsm\r\n     * @param _from source address, `_value` tokens shold be approved for `sender`\r\n     * @param _to destination address\r\n     * @param _value amount of token values to send \r\n     * @notice from `_from` will be sended `_value` tokens to `_to`\r\n     * @return `true` when transfer is done\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        var avail = allowances[_from][msg.sender]\r\n                  > balances[_from] ? balances[_from]\r\n                                    : allowances[_from][msg.sender];\r\n        if (avail >= _value) {\r\n            allowances[_from][msg.sender] -= _value;\r\n            balances[_from] -= _value;\r\n            balances[_to]   += _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Give to target address ability for self token manipulation without sending\r\n     * @param _spender target address (future requester)\r\n     * @param _value amount of token values for approving\r\n     */\r\n    function approve(address _spender, uint256 _value) returns (bool) {\r\n        allowances[msg.sender][_spender] += _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Reset count of tokens approved for given address\r\n     * @param _spender target address (future requester)\r\n     */\r\n    function unapprove(address _spender)\r\n    { allowances[msg.sender][_spender] = 0; }\r\n}\r\n\r\n/**\r\n * @title Ethereum crypto currency extention for Token contract\r\n */\r\ncontract TokenEther is Token {\r\n    function TokenEther(string _name, string _symbol)\r\n             Token(_name, _symbol, 18, 0)\r\n    {}\r\n\r\n    /**\r\n     * @dev This is the way to withdraw money from token\r\n     * @param _value how many tokens withdraw from balance\r\n     */\r\n    function withdraw(uint _value) {\r\n        if (balances[msg.sender] >= _value) {\r\n            balances[msg.sender] -= _value;\r\n            totalSupply          -= _value;\r\n            if(!msg.sender.send(_value)) throw;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This is the way to refill your token balance by ethers\r\n     */\r\n    function refill() payable returns (bool) {\r\n        balances[msg.sender] += msg.value;\r\n        totalSupply          += msg.value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev This method is called when money sended to contract address,\r\n     *      a synonym for refill()\r\n     */\r\n    function () payable {\r\n        balances[msg.sender] += msg.value;\r\n        totalSupply          += msg.value;\r\n    }\r\n}\r\n\r\nlibrary CreatorTokenEther {\r\n    function create(string _name, string _symbol) returns (TokenEther)\r\n    { return new TokenEther(_name, _symbol); }\r\n\r\n    function version() constant returns (string)\r\n    { return \"v0.6.0 (1b4435b8)\"; }\r\n\r\n    function abi() constant returns (string)\r\n    { return '[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hammer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refill\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hammer\",\"type\":\"address\"}],\"name\":\"setHammer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"unapprove\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]'; }\r\n}\r\n\r\n/**\r\n * @title Builder based contract\r\n */\r\ncontract Builder is Object {\r\n    /**\r\n     * @dev this event emitted for every builded contract\r\n     */\r\n    event Builded(address indexed client, address indexed instance);\r\n \r\n    /* Addresses builded contracts at sender */\r\n    mapping(address => address[]) public getContractsOf;\r\n \r\n    /**\r\n     * @dev Get last address\r\n     * @return last address contract\r\n     */\r\n    function getLastContract() constant returns (address) {\r\n        var sender_contracts = getContractsOf[msg.sender];\r\n        return sender_contracts[sender_contracts.length - 1];\r\n    }\r\n\r\n    /* Building beneficiary */\r\n    address public beneficiary;\r\n\r\n    /**\r\n     * @dev Set beneficiary\r\n     * @param _beneficiary is address of beneficiary\r\n     */\r\n    function setBeneficiary(address _beneficiary) onlyOwner\r\n    { beneficiary = _beneficiary; }\r\n\r\n    /* Building cost  */\r\n    uint public buildingCostWei;\r\n\r\n    /**\r\n     * @dev Set building cost\r\n     * @param _buildingCostWei is cost\r\n     */\r\n    function setCost(uint _buildingCostWei) onlyOwner\r\n    { buildingCostWei = _buildingCostWei; }\r\n\r\n    /* Security check report */\r\n    string public securityCheckURI;\r\n\r\n    /**\r\n     * @dev Set security check report URI\r\n     * @param _uri is an URI to report\r\n     */\r\n    function setSecurityCheck(string _uri) onlyOwner\r\n    { securityCheckURI = _uri; }\r\n}\r\n\r\n//\r\n// AIRA Builder for TokenEther contract\r\n//\r\ncontract BuilderTokenEther is Builder {\r\n    /**\r\n     * @dev Run script creation contract\r\n     * @param _name is name token\r\n     * @param _symbol is symbol token\r\n     * @param _client is a contract destination address (zero for sender)\r\n     * @return address new contract\r\n     */\r\n    function create(string _name, string _symbol, address _client) payable returns (address) {\r\n        if (buildingCostWei > 0 && beneficiary != 0) {\r\n            // Too low value\r\n            if (msg.value < buildingCostWei) throw;\r\n            // Beneficiary send\r\n            if (!beneficiary.send(buildingCostWei)) throw;\r\n            // Refund\r\n            if (msg.value > buildingCostWei) {\r\n                if (!msg.sender.send(msg.value - buildingCostWei)) throw;\r\n            }\r\n        } else {\r\n            // Refund all\r\n            if (msg.value > 0) {\r\n                if (!msg.sender.send(msg.value)) throw;\r\n            }\r\n        }\r\n \r\n        if (_client == 0)\r\n            _client = msg.sender;\r\n \r\n        var inst = CreatorTokenEther.create(_name, _symbol);\r\n        getContractsOf[_client].push(inst);\r\n        Builded(_client, inst);\r\n        inst.setOwner(_client);\r\n        inst.setHammer(_client);\r\n        return inst;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setSecurityCheck\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buildingCostWei\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hammer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_client\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buildingCostWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hammer\",\"type\":\"address\"}],\"name\":\"setHammer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getContractsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityCheckURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"client\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"Builded\",\"type\":\"event\"}]","ContractName":"BuilderTokenEther","CompilerVersion":"v0.4.4+commit.4633f3de","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"CreatorTokenEther:2EC5D95815FA05c68c1Db6D2b52fD96F74F5146a","SwarmSource":""}]}