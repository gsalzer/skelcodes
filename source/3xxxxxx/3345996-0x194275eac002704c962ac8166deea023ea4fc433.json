{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\npragma solidity ^0.4.8;\r\n\r\ncontract ICreditBIT{\r\n    function mintMigrationTokens(address _reciever, uint _amount) returns (uint error) {}\r\n}\r\n\r\ncontract CreditMC {\r\n\r\n\tstruct MigrationAccount{\r\n\t\tstring legacyCreditAddresses;\r\n\t\taddress newCreditAddress;\r\n        uint creditbitsDeposited;\r\n\t\tuint newTotalSupplyVote;\r\n\t\tuint coreDevteamRewardVote;\r\n\t}\r\n\r\n\taddress public dev;\r\n\taddress public curator;\r\n\tbool public migrationEnded;\r\n\tbool public devRewardClaimed;\r\n\tbool public daoStakeClaimed;\r\n\r\n\tICreditBIT creditbitContract;\r\n\r\n\tuint public creditsExchanged;\r\n\tuint public realVotedSupply;\r\n\tuint public realSupplyWeight;\r\n\tuint public realDevReward;\r\n\tuint public realDevRewardWeight;\r\n\t\r\n\tfunction getCurrentSupplyVote() constant returns(uint supplyVote){\r\n\t    return realVotedSupply / 10**8;\r\n\t}\r\n\tfunction getCurrentDevReward() constant returns(uint rewardVote){\r\n\t    return ((((realVotedSupply - creditsExchanged) * (realDevReward))) / 10000) / 10**8;\r\n\t}\r\n    function getCurrentDaoStakeSupply() constant returns(uint rewardVote){\r\n\t    return ((((realVotedSupply - creditsExchanged) * (10000 - realDevReward))) / 10000) / 10**8;\r\n\t}\r\n\tfunction getCurrentCreditsExchanged() constant returns(uint crbExchanged){\r\n\t    return creditsExchanged / 10**8;\r\n\t}\r\n\t\r\n\tfunction getMigrationAccount(address _accountAddress) constant returns (bytes, address, uint, uint, uint){\r\n\t    MigrationAccount memory tempMigrationAccount = MigrationAccounts[AccountLocation[_accountAddress]];\r\n        return (bytes(tempMigrationAccount.legacyCreditAddresses), \r\n            tempMigrationAccount.newCreditAddress, \r\n            tempMigrationAccount.creditbitsDeposited,\r\n            tempMigrationAccount.newTotalSupplyVote,\r\n            tempMigrationAccount.coreDevteamRewardVote\r\n        );\r\n\t}\r\n\r\n\tuint public migrationAccountCounter;\r\n\tmapping (uint => MigrationAccount) MigrationAccounts;\r\n\tmapping (address => uint) AccountLocation;\r\n\r\n\tfunction CreditMC(){\r\n\t\tdev = msg.sender;\r\n\t\tmigrationAccountCounter = 1;\r\n\t\tmigrationEnded = false;\r\n\t\tdevRewardClaimed = false;\r\n\t}\r\n\r\n\tfunction addNewAccount(string _legacyCreditAddress, address _etherAddress, uint _numberOfCoins, uint _totalSupplyVote, uint _coreDevTeamReward) returns (uint error){\r\n        if (migrationEnded) {return 1;}\r\n\t\tif (msg.sender != curator){ return 1; }\r\n\r\n        uint location;\r\n        uint message;\r\n        \r\n\t\tif (AccountLocation[_etherAddress] == 0){\r\n\t\t    migrationAccountCounter += 1;\r\n\t\t    location = migrationAccountCounter;\r\n\t\t    \r\n\t\t    message = creditbitContract.mintMigrationTokens(_etherAddress, _numberOfCoins);\r\n\t\t    if (message == 0 && address(creditbitContract) != 0x0){\r\n\t\t        MigrationAccounts[location].legacyCreditAddresses = _legacyCreditAddress;\r\n\t\t        MigrationAccounts[location].newCreditAddress = _etherAddress;\r\n                MigrationAccounts[location].creditbitsDeposited = _numberOfCoins;\r\n\t\t        MigrationAccounts[location].newTotalSupplyVote = _totalSupplyVote;\r\n\t\t        MigrationAccounts[location].coreDevteamRewardVote = _coreDevTeamReward;\r\n\t\t        AccountLocation[_etherAddress] = location;\r\n\t\t        \r\n\t\t        creditsExchanged += _numberOfCoins;\r\n\t\t        calculateVote(_totalSupplyVote, _coreDevTeamReward, _numberOfCoins);\r\n\t\t    }else{\r\n\t\t        return 1;\r\n\t\t    }\r\n\t\t}else{\r\n\t\t    location = AccountLocation[_etherAddress];\r\n\t\t    message = creditbitContract.mintMigrationTokens(_etherAddress, _numberOfCoins);\r\n\t\t    if (message == 0 && address(creditbitContract) != 0x0){\r\n\t\t        MigrationAccounts[location].creditbitsDeposited += _numberOfCoins;\r\n\t\t        \r\n\t\t        creditsExchanged += _numberOfCoins;\r\n\t\t        calculateVote(_totalSupplyVote, _coreDevTeamReward, _numberOfCoins);\r\n\t\t    }else{\r\n\t\t        return 1;\r\n\t\t    }\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\t//todo: check on testnet\r\n    function calculateVote(uint _newSupplyVote, uint _newRewardVote, uint _numOfVotes) internal{\r\n        uint newSupply = (realVotedSupply * realSupplyWeight + _newSupplyVote * _numOfVotes) / (realSupplyWeight + _numOfVotes);\r\n        uint newDevReward = (1000000*realDevReward * realDevRewardWeight + 1000000 * _newRewardVote * _numOfVotes) / (realDevRewardWeight + _numOfVotes);\r\n    \r\n        realVotedSupply = newSupply;\r\n        realSupplyWeight = realSupplyWeight + _numOfVotes;\r\n        realDevReward = newDevReward/1000000;\r\n        realDevRewardWeight = realDevRewardWeight + _numOfVotes;\r\n    }\r\n\r\n\tfunction setCreditMCCurator(address _curatorAddress) returns (uint error){\r\n\t\tif (msg.sender != dev){ return 1; }\r\n\r\n\t\tcurator = _curatorAddress;\r\n\t\treturn 0;\r\n\t}\r\n\t\r\n\tfunction setCreditbit(address _bitAddress) returns (uint error){\r\n        if (msg.sender != dev) {return 1;}\r\n        \r\n        creditbitContract = ICreditBIT(_bitAddress);\r\n        return 0;\r\n    }\r\n    function getCreditbitAddress() constant returns (address bitAddress){\r\n        return address(creditbitContract);\r\n    }\r\n    \r\n    function endMigration() returns (uint error){\r\n        if (msg.sender != dev){ return 1; }\r\n        \r\n        migrationEnded = true;\r\n        return 0;\r\n    }\r\n    \r\n\t\r\n    function claimDevReward(address _recipient) returns (uint error){\r\n        if (msg.sender != dev){ return 1; }\r\n        if (devRewardClaimed){ return 1; }\r\n        if (!migrationEnded){ return 1;}\r\n        \r\n        uint message = creditbitContract.mintMigrationTokens(\r\n            _recipient, \r\n            (((realVotedSupply - creditsExchanged) * (realDevReward)) / 10000)\r\n        );\r\n        if (message != 0) { return 1; }\r\n        \r\n        creditsExchanged += (((realVotedSupply - creditsExchanged) * (realDevReward)) / 10000);\r\n        devRewardClaimed = true;\r\n        return 0;\r\n    }\r\n    \r\n    function claimDaoStakeSupply(address _recipient) returns (uint error){\r\n        if (msg.sender != dev){ return 1; }\r\n        if (!devRewardClaimed){ return 1; }\r\n        if (!migrationEnded){ return 1; }\r\n        if (daoStakeClaimed){ return 1; }\r\n        \r\n        uint message = creditbitContract.mintMigrationTokens(\r\n            _recipient, \r\n            realVotedSupply - creditsExchanged\r\n        );\r\n        if (message != 0) { return 1; }\r\n        \r\n        creditsExchanged += (realVotedSupply - creditsExchanged);\r\n        daoStakeClaimed = true;\r\n        return 0;\r\n    }\r\n    \r\n\r\n\tfunction () {\r\n\t\tthrow;\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_bitAddress\",\"type\":\"address\"}],\"name\":\"setCreditbit\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"realDevRewardWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_accountAddress\",\"type\":\"address\"}],\"name\":\"getMigrationAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"realSupplyWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_legacyCreditAddress\",\"type\":\"string\"},{\"name\":\"_etherAddress\",\"type\":\"address\"},{\"name\":\"_numberOfCoins\",\"type\":\"uint256\"},{\"name\":\"_totalSupplyVote\",\"type\":\"uint256\"},{\"name\":\"_coreDevTeamReward\",\"type\":\"uint256\"}],\"name\":\"addNewAccount\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daoStakeClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devRewardClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"realVotedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_curatorAddress\",\"type\":\"address\"}],\"name\":\"setCreditMCCurator\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentSupplyVote\",\"outputs\":[{\"name\":\"supplyVote\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endMigration\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"claimDevReward\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCreditbitAddress\",\"outputs\":[{\"name\":\"bitAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentCreditsExchanged\",\"outputs\":[{\"name\":\"crbExchanged\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDaoStakeSupply\",\"outputs\":[{\"name\":\"rewardVote\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDevReward\",\"outputs\":[{\"name\":\"rewardVote\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"realDevReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAccountCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creditsExchanged\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"claimDaoStakeSupply\",\"outputs\":[{\"name\":\"error\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"}]","ContractName":"CreditMC","CompilerVersion":"v0.4.9+commit.364da425","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://856f5cd666c71410508b4df2d2b1986e58b58ddf815378d9561d1436a3b365fd"}]}