{"status":"1","message":"OK","result":[{"SourceCode":"contract Token { \r\n    function issue(address _recipient, uint256 _value) returns (bool success) {} \r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n    function unlock() returns (bool success) {}\r\n    function startIncentiveDistribution() returns (bool success) {}\r\n    function transferOwnership(address _newOwner) {}\r\n    function owner() returns (address _owner) {}\r\n}\r\n\r\ncontract DRPCrowdsale {\r\n\r\n    // Crowdsale details\r\n    address public beneficiary; // Company address multisig (49% funding)\r\n    address public confirmedBy; // Address that confirmed beneficiary\r\n    uint256 public minAmount = 4137 ether; // ≈ 724.000 euro\r\n    uint256 public maxAmount = 54285 ether; // ≈ 9.5 mln euro\r\n    uint256 public minAcceptedAmount = 40 finney; // 1/25 ether\r\n\r\n    /**\r\n     * 51% of the raised amount remains in the crowdsale contract \r\n     * to be released to DCORP on launch with aproval of tokenholders.\r\n     *\r\n     * See whitepaper for more information\r\n     */\r\n    uint256 public percentageOfRaisedAmountThatRemainsInContract = 51; // 0.51 * 10^2\r\n\r\n    // Eth to DRP rate\r\n    uint256 public rateAngelDay = 650;\r\n    uint256 public rateFirstWeek = 550;\r\n    uint256 public rateSecondWeek = 475;\r\n    uint256 public rateThirdWeek = 425;\r\n    uint256 public rateLastWeek = 400;\r\n\r\n    uint256 public rateAngelDayEnd = 1 days;\r\n    uint256 public rateFirstWeekEnd = 8 days;\r\n    uint256 public rateSecondWeekEnd = 15 days;\r\n    uint256 public rateThirdWeekEnd = 22 days;\r\n    uint256 public rateLastWeekEnd = 29 days;\r\n\r\n    enum Stages {\r\n        InProgress,\r\n        Ended,\r\n        Withdrawn,\r\n        Proposed,\r\n        Accepted\r\n    }\r\n\r\n    Stages public stage = Stages.InProgress;\r\n\r\n    // Crowdsale state\r\n    uint256 public start;\r\n    uint256 public end;\r\n    uint256 public raised;\r\n\r\n    // DRP token\r\n    Token public drpToken;\r\n\r\n    // Invested balances\r\n    mapping (address => uint256) balances;\r\n\r\n    struct Proposal {\r\n        address dcorpAddress;\r\n        uint256 deadline;\r\n        uint256 approvedWeight;\r\n        uint256 disapprovedWeight;\r\n        mapping (address => uint256) voted;\r\n    }\r\n\r\n    // Ownership transfer proposal\r\n    Proposal public transferProposal;\r\n\r\n    // Time to vote\r\n    uint256 public transferProposalEnd = 7 days;\r\n\r\n    // Time between proposals\r\n    uint256 public transferProposalCooldown = 1 days;\r\n\r\n\r\n    /**\r\n     * Throw if at stage other than current stage\r\n     * \r\n     * @param _stage expected stage to test for\r\n     */\r\n    modifier atStage(Stages _stage) {\r\n        if (stage != _stage) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n    \r\n\r\n    /**\r\n     * Throw if at stage other than current stage\r\n     * \r\n     * @param _stage1 expected stage to test for\r\n     * @param _stage2 expected stage to test for\r\n     */\r\n    modifier atStages(Stages _stage1, Stages _stage2) {\r\n        if (stage != _stage1 && stage != _stage2) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * Throw if sender is not beneficiary\r\n     */\r\n    modifier onlyBeneficiary() {\r\n        if (beneficiary != msg.sender) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * Throw if sender has a DCP balance of zero\r\n     */\r\n    modifier onlyShareholders() {\r\n        if (drpToken.balanceOf(msg.sender) == 0) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * Throw if the current transfer proposal's deadline\r\n     * is in the past\r\n     */\r\n    modifier beforeDeadline() {\r\n        if (now > transferProposal.deadline) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * Throw if the current transfer proposal's deadline \r\n     * is in the future\r\n     */\r\n    modifier afterDeadline() {\r\n        if (now < transferProposal.deadline) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    /** \r\n     * Get balance of `_investor` \r\n     * \r\n     * @param _investor The address from which the balance will be retrieved\r\n     * @return The balance\r\n     */\r\n    function balanceOf(address _investor) constant returns (uint256 balance) {\r\n        return balances[_investor];\r\n    }\r\n\r\n\r\n    /**\r\n     * Most params are hardcoded for clarity\r\n     *\r\n     * @param _tokenAddress The address of the DRP token contact\r\n     */\r\n    function DRPCrowdsale(address _tokenAddress, address _beneficiary, uint256 _start) {\r\n        drpToken = Token(_tokenAddress);\r\n        beneficiary = _beneficiary;\r\n        start = _start;\r\n        end = start + 29 days;\r\n    }\r\n\r\n\r\n    /**\r\n     * For testing purposes\r\n     *\r\n     * @return The beneficiary address\r\n     */\r\n    function confirmBeneficiary() onlyBeneficiary {\r\n        confirmedBy = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * Convert `_wei` to an amount in DRP using \r\n     * the current rate\r\n     *\r\n     * @param _wei amount of wei to convert\r\n     * @return The amount in DRP\r\n     */\r\n    function toDRP(uint256 _wei) returns (uint256 amount) {\r\n        uint256 rate = 0;\r\n        if (stage != Stages.Ended && now >= start && now <= end) {\r\n\r\n            // Check for angelday\r\n            if (now <= start + rateAngelDayEnd) {\r\n                rate = rateAngelDay;\r\n            }\r\n\r\n            // Check first week\r\n            else if (now <= start + rateFirstWeekEnd) {\r\n                rate = rateFirstWeek;\r\n            }\r\n\r\n            // Check second week\r\n            else if (now <= start + rateSecondWeekEnd) {\r\n                rate = rateSecondWeek;\r\n            }\r\n\r\n            // Check third week\r\n            else if (now <= start + rateThirdWeekEnd) {\r\n                rate = rateThirdWeek;\r\n            }\r\n\r\n            // Check last week\r\n            else if (now <= start + rateLastWeekEnd) {\r\n                rate = rateLastWeek;\r\n            }\r\n        }\r\n\r\n        return _wei * rate * 10**2 / 1 ether; // 10**2 for 2 decimals\r\n    }\r\n\r\n\r\n    /**\r\n     * Function to end the crowdsale by setting \r\n     * the stage to Ended\r\n     */\r\n    function endCrowdsale() atStage(Stages.InProgress) {\r\n\r\n        // Crowdsale not ended yet\r\n        if (now < end) {\r\n            throw;\r\n        }\r\n\r\n        stage = Stages.Ended;\r\n    }\r\n\r\n\r\n    /**\r\n     * Transfer appropriate percentage of raised amount \r\n     * to the company address\r\n     */\r\n    function withdraw() onlyBeneficiary atStage(Stages.Ended) {\r\n\r\n        // Confirm that minAmount is raised\r\n        if (raised < minAmount) {\r\n            throw;\r\n        }\r\n\r\n        uint256 amountToSend = raised * (100 - percentageOfRaisedAmountThatRemainsInContract) / 10**2;\r\n        if (!beneficiary.send(amountToSend)) {\r\n            throw;\r\n        }\r\n\r\n        stage = Stages.Withdrawn;\r\n    }\r\n\r\n\r\n    /**\r\n     * Refund in the case of an unsuccessful crowdsale. The \r\n     * crowdsale is considered unsuccessful if minAmount was \r\n     * not raised before end\r\n     */\r\n    function refund() atStage(Stages.Ended) {\r\n\r\n        // Only allow refunds if minAmount is not raised\r\n        if (raised >= minAmount) {\r\n            throw;\r\n        }\r\n\r\n        uint256 receivedAmount = balances[msg.sender];\r\n        balances[msg.sender] = 0;\r\n\r\n        if (receivedAmount > 0 && !msg.sender.send(receivedAmount)) {\r\n            balances[msg.sender] = receivedAmount;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Propose the transfer of the token contract ownership\r\n     * to `_dcorpAddress` \r\n     *\r\n     * @param _dcorpAddress the address of the proposed token owner \r\n     */\r\n    function proposeTransfer(address _dcorpAddress) onlyBeneficiary atStages(Stages.Withdrawn, Stages.Proposed) {\r\n        \r\n        // Check for a pending proposal\r\n        if (stage == Stages.Proposed && now < transferProposal.deadline + transferProposalCooldown) {\r\n            throw;\r\n        }\r\n\r\n        transferProposal = Proposal({\r\n            dcorpAddress: _dcorpAddress,\r\n            deadline: now + transferProposalEnd,\r\n            approvedWeight: 0,\r\n            disapprovedWeight: 0\r\n        });\r\n\r\n        stage = Stages.Proposed;\r\n    }\r\n\r\n\r\n    /**\r\n     * Allows DRP holders to vote on the poposed transfer of \r\n     * ownership. Weight is calculated directly, this is no problem \r\n     * because tokens cannot be transferred yet\r\n     *\r\n     * @param _approve indicates if the sender supports the proposal\r\n     */\r\n    function vote(bool _approve) onlyShareholders beforeDeadline atStage(Stages.Proposed) {\r\n\r\n        // One vote per proposal\r\n        if (transferProposal.voted[msg.sender] >= transferProposal.deadline - transferProposalEnd) {\r\n            throw;\r\n        }\r\n\r\n        transferProposal.voted[msg.sender] = now;\r\n        uint256 weight = drpToken.balanceOf(msg.sender);\r\n\r\n        if (_approve) {\r\n            transferProposal.approvedWeight += weight;\r\n        } else {\r\n            transferProposal.disapprovedWeight += weight;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Calculates the votes and if the majority weigt approved \r\n     * the proposal the transfer of ownership is executed.\r\n     \r\n     * The Crowdsale contact transferres the ownership of the \r\n     * token contract to DCorp and starts the insentive \r\n     * distribution recorded in the token contract.\r\n     */\r\n    function executeTransfer() afterDeadline atStage(Stages.Proposed) {\r\n\r\n        // Check approved\r\n        if (transferProposal.approvedWeight <= transferProposal.disapprovedWeight) {\r\n            throw;\r\n        }\r\n\r\n        if (!drpToken.unlock()) {\r\n            throw;\r\n        }\r\n        \r\n        if (!drpToken.startIncentiveDistribution()) {\r\n            throw;\r\n        }\r\n\r\n        drpToken.transferOwnership(transferProposal.dcorpAddress);\r\n        if (drpToken.owner() != transferProposal.dcorpAddress) {\r\n            throw;\r\n        }\r\n\r\n        if (!transferProposal.dcorpAddress.send(this.balance)) {\r\n            throw;\r\n        }\r\n\r\n        stage = Stages.Accepted;\r\n    }\r\n\r\n    \r\n    /**\r\n     * Receives Eth and issue DRP tokens to the sender\r\n     */\r\n    function () payable atStage(Stages.InProgress) {\r\n\r\n        // Crowdsale not started yet\r\n        if (now < start) {\r\n            throw;\r\n        }\r\n\r\n        // Crowdsale expired\r\n        if (now > end) {\r\n            throw;\r\n        }\r\n\r\n        // Enforce min amount\r\n        if (msg.value < minAcceptedAmount) {\r\n            throw;\r\n        }\r\n \r\n        uint256 received = msg.value;\r\n        uint256 valueInDRP = toDRP(msg.value);\r\n        if (!drpToken.issue(msg.sender, valueInDRP)) {\r\n            throw;\r\n        }\r\n\r\n        balances[msg.sender] += received;\r\n        raised += received;\r\n\r\n        // Check maxAmount raised\r\n        if (raised >= maxAmount) {\r\n            stage = Stages.Ended;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_dcorpAddress\",\"type\":\"address\"}],\"name\":\"proposeTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateAngelDayEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateFirstWeekEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateAngelDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateLastWeekEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateSecondWeekEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateThirdWeekEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferProposalEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentageOfRaisedAmountThatRemainsInContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"toDRP\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferProposalCooldown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateSecondWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmBeneficiary\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateThirdWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateFirstWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateLastWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferProposal\",\"outputs\":[{\"name\":\"dcorpAddress\",\"type\":\"address\"},{\"name\":\"deadline\",\"type\":\"uint256\"},{\"name\":\"approvedWeight\",\"type\":\"uint256\"},{\"name\":\"disapprovedWeight\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"drpToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"confirmedBy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAcceptedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"DRPCrowdsale","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000621d78f2ef2fd937bfca696cabaf9a779f59b3ed000000000000000000000000c81367dc7f0d47dcb49a3bb20cafcb9be638a39300000000000000000000000000000000000000000000000000000000592fe5a0","Library":"","SwarmSource":"bzzr://be2da9afdf135bbcb14395e6260c817b15fef7bd307505987f19ba8d309c0b9c"}]}