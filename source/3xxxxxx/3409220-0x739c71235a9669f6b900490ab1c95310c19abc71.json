{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.6;\r\n\r\ncontract StandardToken {\r\n\r\n    /*\r\n     *  Data structures\r\n     */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n\r\n    /*\r\n     *  Events\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /*\r\n     *  Read and write storage functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Read storage functions\r\n     */\r\n    /// @dev Returns number of allowed tokens for given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title Token contract - Implements Standard Token Interface for TokenFund.\r\n/// @author Evgeny Yurtaev - <evgeny@etherionlab.com>\r\ncontract TokenFund is StandardToken {\r\n\r\n    /*\r\n     * External contracts\r\n     */\r\n    address public emissionContractAddress = 0x0;\r\n\r\n    /*\r\n     * Token meta data\r\n     */\r\n    string constant public name = \"TheToken Fund\";\r\n    string constant public symbol = \"TKN\";\r\n    uint8 constant public decimals = 8;\r\n\r\n    /*\r\n     * Storage\r\n     */\r\n    address public owner = 0x0;\r\n    bool public emissionEnabled = true;\r\n    bool transfersEnabled = true;\r\n\r\n    /*\r\n     * Modifiers\r\n     */\r\n\r\n    modifier isCrowdfundingContract() {\r\n        // Only emission address is allowed to proceed.\r\n        if (msg.sender != emissionContractAddress) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        // Only owner is allowed to do this action.\r\n        if (msg.sender != owner) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * Contract functions\r\n     */\r\n\r\n     /// @dev TokenFund emission function.\r\n    /// @param _for Address of receiver.\r\n    /// @param tokenCount Number of tokens to issue.\r\n    function issueTokens(address _for, uint tokenCount)\r\n        external\r\n        isCrowdfundingContract\r\n        returns (bool)\r\n    {\r\n        if (emissionEnabled == false) {\r\n            throw;\r\n        }\r\n\r\n        balances[_for] += tokenCount;\r\n        totalSupply += tokenCount;\r\n        return true;\r\n    }\r\n\r\n    /// @dev Withdraws tokens for msg.sender.\r\n    /// @param tokenCount Number of tokens to withdraw.\r\n    function withdrawTokens(uint tokenCount)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint balance = balances[msg.sender];\r\n        if (balance < tokenCount) {\r\n            return false;\r\n        }\r\n        balances[msg.sender] -= tokenCount;\r\n        totalSupply -= tokenCount;\r\n        return true;\r\n    }\r\n\r\n    /// @dev Function to change address that is allowed to do emission.\r\n    /// @param newAddress Address of new emission contract.\r\n    function changeEmissionContractAddress(address newAddress)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        emissionContractAddress = newAddress;\r\n    }\r\n\r\n    /// @dev Function that enables/disables transfers of token.\r\n    /// @param value True/False\r\n    function enableTransfers(bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        transfersEnabled = value;\r\n    }\r\n\r\n    /// @dev Function that enables/disables token emission.\r\n    /// @param value True/False\r\n    function enableEmission(bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        emissionEnabled = value;\r\n    }\r\n\r\n    /*\r\n     * Overriding ERC20 standard token functions to support transfer lock\r\n     */\r\n    function transfer(address _to, uint256 _value)\r\n        returns (bool success)\r\n    {\r\n        if (transfersEnabled == true) {\r\n            return super.transfer(_to, _value);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        returns (bool success)\r\n    {\r\n        if (transfersEnabled == true) {\r\n            return super.transferFrom(_from, _to, _value);\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /// @dev Contract constructor function sets initial token balances.\r\n    /// @param _owner Address of the owner of TokenFund.\r\n    function TokenFund(address _owner)\r\n    {\r\n        totalSupply = 0;\r\n        owner = _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeEmissionContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emissionContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_for\",\"type\":\"address\"},{\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"name\":\"issueTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"enableEmission\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emissionEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TokenFund","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000212de331b2a8c21fcf091c8f3cd13e613bb0af95","Library":"","SwarmSource":"bzzr://971d0c6297cf922e9dd54ecd91240a03f0087b39861cdb7faa87d11e3cc3557f"}]}