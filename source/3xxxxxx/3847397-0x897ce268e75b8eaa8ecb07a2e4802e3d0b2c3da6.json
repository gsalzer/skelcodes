{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract MessageToken {\r\n    /* Public variables of the token */\r\n    string public standard = 'Token 0.1';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    address owner;\r\n    address EMSAddress;\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /* This notifies clients about the amount burnt */\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function MessageToken() {\r\n        balanceOf[this] = 10000000000000000000000000000000000000;              // Give the contract all initial tokens\r\n        totalSupply = 10000000000000000000000000000000000000;                        // Update total supply\r\n        name = \"Messages\";                                   // Set the name for display purposes\r\n        symbol = \"\\u2709\";                               // Set the symbol for display purposes\r\n        decimals = 0;                            // Amount of decimals for display purposes\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) {\r\n        if (_to != address(this)) throw;                     // Prevent sending message tokens to other people\r\n        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\r\n        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\r\n        balanceOf[_to] += _value;                            // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n    }\r\n\r\n    /* Allow message contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value)\r\n        returns (bool success) {\r\n            if(msg.sender == owner){\r\n                EMSAddress = _spender;\r\n                allowance[this][_spender] = _value;\r\n                return true;\r\n            }\r\n    }\r\n    \r\n    function register(address _address)\r\n        returns (bool success){\r\n            if(msg.sender == EMSAddress){\r\n                allowance[_address][EMSAddress] = totalSupply;\r\n                return true;\r\n            }\r\n        }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (_to == 0x0) throw;                                // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\r\n        if (_value > allowance[_from][msg.sender]) throw;     // Check allowance\r\n        balanceOf[_from] -= _value;                           // Subtract from the sender\r\n        balanceOf[_to] += _value;                             // Add the same to the recipient\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function getBalance(address _address) constant returns (uint256 balance){\r\n        return balanceOf[_address];\r\n    }\r\n}\r\n\r\ncontract EMS{\r\n    address messageTokenContract = 0xb535394330357396680a5542767A190193F9D2Ab;\r\n    MessageToken m = MessageToken(messageTokenContract);\r\n    struct message{\r\n        address sender;\r\n        address recipient;\r\n        string message;\r\n    }\r\n    \r\n    struct inbox{\r\n        string[] messages;\r\n        uint256 numMessages;\r\n        bool registered;\r\n    }\r\n    \r\n    mapping (address => inbox) inboxes;\r\n    \r\n    function sendMessage(address recipient, string message){\r\n        if(inboxes[msg.sender].registered != true){\r\n            m.register(msg.sender);\r\n        }\r\n        m.transferFrom(messageTokenContract, recipient, 1);\r\n        inboxes[recipient].messages.push(message);\r\n        inboxes[recipient].numMessages++;\r\n    }\r\n    \r\n    function markAllRead(){\r\n        if(inboxes[msg.sender].registered != true){\r\n            m.register(msg.sender);\r\n        }\r\n        m.transferFrom(msg.sender, messageTokenContract, m.getBalance(msg.sender));\r\n    }\r\n    \r\n    function markRead(uint numMessages){\r\n        if(inboxes[msg.sender].registered != true){\r\n            m.register(msg.sender);\r\n        }\r\n        m.transferFrom(msg.sender, messageTokenContract, numMessages);\r\n    }\r\n    \r\n    function deleteAllMessages(){\r\n        markAllRead();\r\n        for(uint i = 0; i < inboxes[msg.sender].numMessages; i++){\r\n            inboxes[msg.sender].messages[i] = \"\";\r\n        }\r\n    }\r\n    \r\n    function deleteMessage(uint messageNumber){\r\n        if(inboxes[msg.sender].registered != true){\r\n            m.register(msg.sender);\r\n        }\r\n        inboxes[msg.sender].messages[messageNumber] = \"\";\r\n        m.transferFrom(msg.sender, messageTokenContract, 1);\r\n    }\r\n    \r\n    function getInbox(address _address, uint messageNumber) constant returns (string messages){\r\n        return inboxes[_address].messages[messageNumber];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"numMessages\",\"type\":\"uint256\"}],\"name\":\"markRead\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"markAllRead\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"messageNumber\",\"type\":\"uint256\"}],\"name\":\"getInbox\",\"outputs\":[{\"name\":\"messages\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"messageNumber\",\"type\":\"uint256\"}],\"name\":\"deleteMessage\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"sendMessage\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deleteAllMessages\",\"outputs\":[],\"payable\":false,\"type\":\"function\"}]","ContractName":"EMS","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5682127e1e9c831ee13ec5bec8991126882481cbd3d697b7b7609f10a995b310"}]}