{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.7;\r\ncontract Investment{\r\n    /** the owner of the contract, C4C */\r\n    address owner;\r\n    /** List of all investors. */\r\n    address[] public investors;\r\n    /** The investors's balances. */\r\n    mapping(address => uint) public balances;\r\n    /** The total amount raised. */\r\n    uint public amountRaised;\r\n    /** The index of the investor currentlz being paid out. */\r\n    uint public investorIndex;\r\n    /** The return rates (factors) per interval (in raised Ether). */\r\n    uint[] public rates;\r\n    uint[] public limits;\r\n    /** indicates if ne investments are accepted */\r\n    bool public closed;\r\n    /** Notifies listeners that a new investment was undertaken */\r\n    event NewInvestment(address investor, uint amount);\r\n    /** Notifies listeners that ether was returned to the investors */\r\n    event Returned(uint amount);\r\n\r\n    \r\n    function Investment(){\r\n        owner = msg.sender;\r\n        limits= [0, 1000000000000000000000, 4000000000000000000000, 10000000000000000000000];\r\n        rates= [15, 14, 13,12];//1 decimal\r\n    }\r\n    \r\n    /**\r\n     * Adds new investors to the list and calculates the balance according to the current rate.\r\n     * Minimum value: 1 ETH.\r\n     * */\r\n     function invest() payable{\r\n        if (closed) throw;\r\n        if (msg.value < 1 ether) throw;\r\n        if (balances[msg.sender]==0){//new investor\r\n            investors.push(msg.sender);\r\n        }\r\n        balances[msg.sender] += calcReturnValue(msg.value, amountRaised); \r\n        amountRaised += msg.value;\r\n        NewInvestment(msg.sender, msg.value);\r\n     }\r\n     \r\n     /**\r\n      * call invest() whenever ether is sent to the contract\r\n      * */\r\n     function() payable{\r\n         invest();\r\n     }\r\n     \r\n     /**\r\n      * calcultes the return value depending on the amount raised, limits and rates\r\n      * @param value : the investment value\r\n      * @param amRa : the amount raised\r\n      * */\r\n     function calcReturnValue(uint value, uint amRa) internal returns (uint){\r\n         if(amRa >= limits[limits.length-1]) return value/10*rates[limits.length-1];\r\n         for(uint i = limits.length-2; i >= 0; i--){\r\n             if(amRa>=limits[i]){\r\n                uint newAmountRaised = amRa+value;\r\n                if(newAmountRaised>limits[i+1]){\r\n                    uint remainingVal=newAmountRaised-limits[i+1];\r\n                    return (value-remainingVal)/10 * rates[i] + calcReturnValue(remainingVal, limits[i+1]);\r\n                }  \r\n                else\r\n                    return value/10*rates[i];\r\n             }\r\n         }\r\n     }\r\n     \r\n     /**\r\n      * Enables the owner to withdraw the funds\r\n      * */\r\n     function withdraw(){\r\n         if(msg.sender==owner){\r\n             msg.sender.send(this.balance);\r\n         }\r\n     }\r\n     \r\n     /**\r\n      * called to pay the investor\r\n      * */\r\n     function returnInvestment() payable{\r\n        returnInvestmentRecursive(msg.value);\r\n        Returned(msg.value);\r\n     }\r\n     \r\n     /**\r\n      * sends the given value to the next investor(s) in the list\r\n      * */\r\n     function returnInvestmentRecursive(uint value) internal{\r\n        if (investorIndex>=investors.length || value==0) return;\r\n        else if(value<=balances[investors[investorIndex]]){\r\n            balances[investors[investorIndex]]-=value;\r\n            if(!investors[investorIndex].send(value)) throw; \r\n        } \r\n        else if(balances[investors[investorIndex]]>0){\r\n            uint val = balances[investors[investorIndex]];\r\n            balances[investors[investorIndex]]=0;\r\n            if(!investors[investorIndex].send(val)) throw;\r\n            investorIndex++;\r\n            returnInvestmentRecursive(value-val);\r\n        } \r\n        else{\r\n            investorIndex++;\r\n            returnInvestmentRecursive(value);\r\n        }\r\n     }\r\n     \r\n     function getNumInvestors() constant returns(uint){\r\n         return investors.length;\r\n     }\r\n     \r\n     /** do not accept any more investments */\r\n     function close(){\r\n         if(msg.sender==owner)\r\n            closed=true;\r\n     }\r\n     \r\n     /** allow investments */\r\n     function open(){\r\n         if(msg.sender==owner)\r\n            closed=false;\r\n     }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"limits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnInvestment\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"open\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Returned\",\"type\":\"event\"}]","ContractName":"Investment","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://86b43150131bf49e64790be0f8cf989948c5b71f85b49ddbbd7202b8467aaf18"}]}