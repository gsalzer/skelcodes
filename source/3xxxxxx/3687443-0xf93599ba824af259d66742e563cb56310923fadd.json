{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\n// @dev Contract to hold sale raised funds during the sale period.\r\n// Prevents attack in which the Aragon Multisig sends raised ether\r\n// to the sale contract to mint tokens to itself, and getting the\r\n// funds back immediately.\r\n\r\ncontract AbstractSale {\r\n  function saleFinalized() constant returns (bool);\r\n}\r\n\r\ncontract SaleWallet {\r\n  // Public variables\r\n  address public multisig;\r\n  uint public finalBlock;\r\n  AbstractSale public tokenSale;\r\n\r\n  // @dev Constructor initializes public variables\r\n  // @param _multisig The address of the multisig that will receive the funds\r\n  // @param _finalBlock Block after which the multisig can request the funds\r\n  function SaleWallet(address _multisig, uint _finalBlock, address _tokenSale) {\r\n    multisig = _multisig;\r\n    finalBlock = _finalBlock;\r\n    tokenSale = AbstractSale(_tokenSale);\r\n  }\r\n\r\n  // @dev Receive all sent funds without any further logic\r\n  function () public payable {}\r\n\r\n  // @dev Withdraw function sends all the funds to the wallet if conditions are correct\r\n  function withdraw() public {\r\n    if (msg.sender != multisig) throw;                       // Only the multisig can request it\r\n    if (block.number > finalBlock) return doWithdraw();      // Allow after the final block\r\n    if (tokenSale.saleFinalized()) return doWithdraw();      // Allow when sale is finalized\r\n  }\r\n\r\n  function doWithdraw() internal {\r\n    if (!multisig.send(this.balance)) throw;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"finalBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_multisig\",\"type\":\"address\"},{\"name\":\"_finalBlock\",\"type\":\"uint256\"},{\"name\":\"_tokenSale\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"SaleWallet","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cafe1a77e84698c83ca8931f54a755176ef75f2c0000000000000000000000000000000000000000000000000000000000385b76000000000000000000000000dcab5d235131b02ab93f7e9bf3daed22d464be8a","Library":"","SwarmSource":"bzzr://38f7983a90ede110b7b06be94de9b2b5936e97a7070b379062c3a7d91fe4cd57"}]}