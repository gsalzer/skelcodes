{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract EthereumPot {\r\n\r\n\taddress public owner;\r\n\taddress[] public addresses;\r\n\t\r\n\taddress public winnerAddress;\r\n    uint[] public slots;\r\n    uint minBetSize = 0.01 ether;\r\n    uint public potSize = 0;\r\n    \r\n\t\r\n\tuint public amountWon;\r\n\tuint public potTime = 300;\r\n\tuint public endTime = now + potTime;\r\n\tuint public totalBet = 0;\r\n\r\n\tbool public locked = false;\r\n\r\n    \r\n    event debug(string msg);\r\n    event potSizeChanged(\r\n        uint _potSize\r\n    );\r\n\tevent winnerAnnounced(\r\n\t    address winner,\r\n\t    uint amount\r\n\t);\r\n\t\r\n\tevent timeLeft(uint left);\r\n\tfunction EthereumPot() public {\r\n\t    owner = msg.sender;\r\n\t}\r\n\t\r\n\t// function kill() public {\r\n\t//     if(msg.sender == owner)\r\n\t//         selfdestruct(owner);\r\n\t// }\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tfunction findWinner(uint random) constant returns (address winner) {\r\n\t    \r\n\t    for(uint i = 0; i < slots.length; i++) {\r\n\t        \r\n\t       if(random <= slots[i]) {\r\n\t           return addresses[i];\r\n\t       }\r\n\t        \r\n\t    }    \r\n\t    \r\n\t}\r\n\t\r\n\t\r\n\tfunction joinPot() public payable {\r\n\t    \r\n\t    assert(now < endTime);\r\n\t    assert(!locked);\r\n\t    \r\n\t    uint tickets = 0;\r\n\t    \r\n\t    for(uint i = msg.value; i >= minBetSize; i-= minBetSize) {\r\n\t        tickets++;\r\n\t    }\r\n\t    if(tickets > 0) {\r\n\t        addresses.push(msg.sender);\r\n\t        slots.push(potSize += tickets);\r\n\t        totalBet+= potSize;\r\n\t        potSizeChanged(potSize);\r\n\t        timeLeft(endTime - now);\r\n\t    }\r\n\t}\r\n\t\r\n\t\r\n\tfunction getPlayers() constant public returns(address[]) {\r\n\t\treturn addresses;\r\n\t}\r\n\t\r\n\tfunction getSlots() constant public returns(uint[]) {\r\n\t\treturn slots;\r\n\t}\r\n\r\n\tfunction getEndTime() constant public returns (uint) {\r\n\t    return endTime;\r\n\t}\r\n\t\r\n\tfunction openPot() internal {\r\n        potSize = 0;\r\n        endTime = now + potTime;\r\n        timeLeft(endTime - now);\r\n        delete slots;\r\n        delete addresses;\r\n        \r\n        locked = false;\r\n\t}\r\n\t\r\n    function rewardWinner() public payable {\r\n        \r\n        //assert time\r\n        \r\n        assert(now > endTime);\r\n        if(!locked) {\r\n            locked = true;\r\n            \r\n            if(potSize > 0) {\r\n            \t//if only 1 person bet, wait until they've been challenged\r\n            \tif(addresses.length == 1) {\r\n            \t    random_number = 0;\r\n            \t    endTime = now + potTime;\r\n            \t    timeLeft(endTime - now);\r\n            \t    locked = false;\r\n            \t}\r\n            \t\t\r\n            \telse {\r\n            \t    \r\n            \t    uint random_number = uint(block.blockhash(block.number-1))%slots.length;\r\n                    winnerAddress = findWinner(random_number);\r\n                    amountWon = potSize * minBetSize * 98 / 100;\r\n                    \r\n                    winnerAnnounced(winnerAddress, amountWon);\r\n                    winnerAddress.transfer(amountWon); //2% fee\r\n                    owner.transfer(potSize * minBetSize * 2 / 100);\r\n                    openPot();\r\n\r\n            \t}\r\n                \r\n            }\r\n            else {\r\n                winnerAnnounced(0x0000000000000000000000000000000000000000, 0);\r\n                openPot();\r\n            }\r\n            \r\n            \r\n        }\r\n        \r\n    }\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n        \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"random\",\"type\":\"uint256\"}],\"name\":\"findWinner\",\"outputs\":[{\"name\":\"winner\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"joinPot\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountWon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slots\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"potSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winnerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"potTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSlots\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rewardWinner\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msg\",\"type\":\"string\"}],\"name\":\"debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_potSize\",\"type\":\"uint256\"}],\"name\":\"potSizeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"winnerAnnounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"left\",\"type\":\"uint256\"}],\"name\":\"timeLeft\",\"type\":\"event\"}]","ContractName":"EthereumPot","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2f1db6149c776581fa7910ca630ab149e3badaecbd1be9dcca35bc40ab7edf1d"}]}