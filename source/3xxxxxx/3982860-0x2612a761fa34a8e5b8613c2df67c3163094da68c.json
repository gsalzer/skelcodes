{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/*\r\n    Copyright 2017, Anton Egorov (Mothership Foundation)\r\n    Copyright 2017, Klaus Hott (BlockchainLabs.nz)\r\n    Copyright 2017, Jordi Baylina (Giveth)\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n  */\r\n\r\ncontract Finalizable {\r\n  uint256 public finalizedBlock;\r\n  bool public goalMet;\r\n\r\n  function finalize();\r\n}\r\n\r\ncontract Refundable {\r\n  function refund(address th, uint amount) returns (bool);\r\n}\r\n\r\n/// @title ContributionWallet Contract\r\n/// @author Jordi Baylina\r\n/// @dev This contract will be hold the Ether during the contribution period.\r\n///  The idea of this contract is to avoid recycling Ether during the contribution\r\n///  period. So all the ETH collected will be locked here until the contribution\r\n///  period ends\r\n\r\n// @dev Contract to hold sale raised funds during the sale period.\r\n// Prevents attack in which the Aragon Multisig sends raised ether\r\n// to the sale contract to mint tokens to itself, and getting the\r\n// funds back immediately.\r\n\r\ncontract ContributionWallet is Refundable {\r\n\r\n    // Public variables\r\n    address public multisig;\r\n    Finalizable public contribution;\r\n\r\n    // @dev Constructor initializes public variables\r\n    // @param _multisig The address of the multisig that will receive the funds\r\n    // @param _endBlock Block after which the multisig can request the funds\r\n    // @param _contribution Address of the Contribution contract\r\n    function ContributionWallet(address _multisig, address _contribution) {\r\n        require(_multisig != 0x0);\r\n        require(_contribution != 0x0);\r\n        multisig = _multisig;\r\n        contribution = Finalizable(_contribution);\r\n    }\r\n\r\n    // @dev Receive all sent funds without any further logic\r\n    function () public payable {}\r\n\r\n    // @dev Withdraw function sends all the funds to the wallet if conditions are correct\r\n    function withdraw() public {\r\n        require(msg.sender == multisig); // Only the multisig can request it\r\n        assert(contribution.goalMet() || contribution.finalizedBlock() != 0); // Allow when sale is finalized\r\n        multisig.transfer(this.balance);\r\n    }\r\n\r\n    function refund(address th, uint amount) returns (bool) {\r\n      assert(msg.sender == address(contribution));\r\n      th.transfer(amount);\r\n      return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"th\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contribution\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_multisig\",\"type\":\"address\"},{\"name\":\"_contribution\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"ContributionWallet","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007e2fe61afc64ca49a8ee24abf6edda165962a21e000000000000000000000000f5096917729885ef5b1a8c4ef238d3cf06028ee7","Library":"","SwarmSource":"bzzr://db3788efe287e1e6498bb78b2d5529b71129cc773b768912948b7e49e5177434"}]}