{"status":"1","message":"OK","result":[{"SourceCode":"contract owned {\r\n\r\n  address public owner;\r\n\r\n  function owned() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    if (msg.sender != owner) throw;\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract ISncToken {\r\n  function mintTokens(address _to, uint256 _amount);\r\n  function totalSupply() constant returns (uint256 totalSupply);\r\n}\r\n\r\ncontract SunContractIco is owned{\r\n\r\n  uint256 public startBlock;\r\n  uint256 public endBlock;\r\n  uint256 public minEthToRaise;\r\n  uint256 public maxEthToRaise;\r\n  uint256 public totalEthRaised;\r\n  address public multisigAddress;\r\n\r\n\r\n  ISncToken sncTokenContract; \r\n  mapping (address => bool) presaleContributorAllowance;\r\n  uint256 nextFreeParticipantIndex;\r\n  mapping (uint => address) participantIndex;\r\n  mapping (address => uint256) participantContribution;\r\n\r\n  bool icoHasStarted;\r\n  bool minTresholdReached;\r\n  bool icoHasSucessfulyEnded;\r\n  uint256 blocksInWeek;\r\n    bool ownerHasClaimedTokens;\r\n\r\n  uint256 lastEthReturnIndex;\r\n  mapping (address => bool) hasClaimedEthWhenFail;\r\n\r\n  event ICOStarted(uint256 _blockNumber);\r\n  event ICOMinTresholdReached(uint256 _blockNumber);\r\n  event ICOEndedSuccessfuly(uint256 _blockNumber, uint256 _amountRaised);\r\n  event ICOFailed(uint256 _blockNumber, uint256 _ammountRaised);\r\n  event ErrorSendingETH(address _from, uint256 _amount);\r\n\r\n  function SunContractIco(uint256 _startBlock, address _multisigAddress) {\r\n    blocksInWeek = 4 * 60 * 24 * 7;\r\n    startBlock = _startBlock;\r\n    endBlock = _startBlock + blocksInWeek * 4;\r\n    minEthToRaise = 5000 * 10**18;\r\n    maxEthToRaise = 100000 * 10**18;\r\n    multisigAddress = _multisigAddress;\r\n  }\r\n\r\n  //  \r\n  /* User accessible methods */   \r\n  //  \r\n\r\n  /* Users send ETH and enter the token sale*/  \r\n  function () payable {\r\n    if (msg.value == 0) throw;                                          // Throw if the value is 0  \r\n    if (icoHasSucessfulyEnded || block.number > endBlock) throw;        // Throw if the ICO has ended     \r\n    if (!icoHasStarted){                                                // Check if this is the first ICO transaction       \r\n      if (block.number >= startBlock){                                  // Check if the ICO should start        \r\n        icoHasStarted = true;                                           // Set that the ICO has started         \r\n        ICOStarted(block.number);                                       // Raise ICOStarted event     \r\n      } else{\r\n        throw;\r\n      }\r\n    }     \r\n    if (participantContribution[msg.sender] == 0){                     // Check if the sender is a new user       \r\n      participantIndex[nextFreeParticipantIndex] = msg.sender;         // Add a new user to the participant index       \r\n      nextFreeParticipantIndex += 1;\r\n    }     \r\n    if (maxEthToRaise > (totalEthRaised + msg.value)){                 // Check if the user sent too much ETH       \r\n      participantContribution[msg.sender] += msg.value;                // Add contribution      \r\n      totalEthRaised += msg.value;// Add to total eth Raised\r\n      sncTokenContract.mintTokens(msg.sender, getSncTokenIssuance(block.number, msg.value));\r\n      if (!minTresholdReached && totalEthRaised >= minEthToRaise){      // Check if the min treshold has been reached one time        \r\n        ICOMinTresholdReached(block.number);                            // Raise ICOMinTresholdReached event        \r\n        minTresholdReached = true;                                      // Set that the min treshold has been reached       \r\n      }     \r\n    }else{                                                              // If user sent to much eth       \r\n      uint maxContribution = maxEthToRaise - totalEthRaised;            // Calculate maximum contribution       \r\n      participantContribution[msg.sender] += maxContribution;           // Add maximum contribution to account      \r\n      totalEthRaised += maxContribution;  \r\n      sncTokenContract.mintTokens(msg.sender, getSncTokenIssuance(block.number, maxContribution));\r\n      uint toReturn = msg.value - maxContribution;                       // Calculate how much should be returned       \r\n      icoHasSucessfulyEnded = true;                                      // Set that ICO has successfully ended       \r\n      ICOEndedSuccessfuly(block.number, totalEthRaised);      \r\n      if(!msg.sender.send(toReturn)){                                    // Refund the balance that is over the cap         \r\n        ErrorSendingETH(msg.sender, toReturn);                           // Raise event for manual return if transaction throws       \r\n      }     \r\n    }\r\n  }   \r\n\r\n  /* Users can claim ETH by themselves if they want to in case of ETH failure*/   \r\n  function claimEthIfFailed(){    \r\n    if (block.number <= endBlock || totalEthRaised >= minEthToRaise) throw; // Check if ICO has failed    \r\n    if (participantContribution[msg.sender] == 0) throw;                    // Check if user has participated     \r\n    if (hasClaimedEthWhenFail[msg.sender]) throw;                           // Check if this account has already claimed ETH    \r\n    uint256 ethContributed = participantContribution[msg.sender];           // Get participant ETH Contribution     \r\n    hasClaimedEthWhenFail[msg.sender] = true;     \r\n    if (!msg.sender.send(ethContributed)){      \r\n      ErrorSendingETH(msg.sender, ethContributed);                          // Raise event if send failed, solve manually     \r\n    }   \r\n  }   \r\n\r\n  //  \r\n  /* Only owner methods */  \r\n  //  \r\n\r\n  /* Adds addresses that are allowed to take part in presale */   \r\n  function addPresaleContributors(address[] _presaleContributors) onlyOwner {     \r\n    for (uint cnt = 0; cnt < _presaleContributors.length; cnt++){       \r\n      presaleContributorAllowance[_presaleContributors[cnt]] = true;    \r\n    }   \r\n  }   \r\n\r\n  /* Owner can return eth for multiple users in one call*/  \r\n  function batchReturnEthIfFailed(uint256 _numberOfReturns) onlyOwner{    \r\n    if (block.number < endBlock || totalEthRaised >= minEthToRaise) throw;    // Check if ICO failed  \r\n    address currentParticipantAddress;    \r\n    uint256 contribution;\r\n    for (uint cnt = 0; cnt < _numberOfReturns; cnt++){      \r\n      currentParticipantAddress = participantIndex[lastEthReturnIndex];       // Get next account       \r\n      if (currentParticipantAddress == 0x0) return;                           // Check if participants were reimbursed      \r\n      if (!hasClaimedEthWhenFail[currentParticipantAddress]) {                // Check if user has manually recovered ETH         \r\n        contribution = participantContribution[currentParticipantAddress];    // Get accounts contribution        \r\n        hasClaimedEthWhenFail[msg.sender] = true;                             // Set that user got his ETH back         \r\n        if (!currentParticipantAddress.send(contribution)){                   // Send fund back to account          \r\n          ErrorSendingETH(currentParticipantAddress, contribution);           // Raise event if send failed, resolve manually         \r\n        }       \r\n      }       \r\n      lastEthReturnIndex += 1;    \r\n    }   \r\n  }   \r\n\r\n  /* Owner sets new address of SunContractToken */\r\n  function changeMultisigAddress(address _newAddress) onlyOwner {     \r\n    multisigAddress = _newAddress;\r\n  }   \r\n\r\n  /* Owner can claim reserved tokens on the end of crowsale */  \r\n  function claimCoreTeamsTokens(address _to) onlyOwner{     \r\n    if (!icoHasSucessfulyEnded) throw; \r\n    if (ownerHasClaimedTokens) throw;\r\n    \r\n    sncTokenContract.mintTokens(_to, sncTokenContract.totalSupply() * 25 / 100);\r\n    ownerHasClaimedTokens = true;\r\n  }   \r\n\r\n  /* Owner can remove allowance of designated presale contributor */  \r\n  function removePresaleContributor(address _presaleContributor) onlyOwner {    \r\n    presaleContributorAllowance[_presaleContributor] = false;   \r\n  }   \r\n\r\n  /* Set token contract where mints will be done (tokens will be issued)*/  \r\n  function setTokenContract(address _sncTokenContractAddress) onlyOwner {     \r\n    sncTokenContract = ISncToken(_sncTokenContractAddress);   \r\n  }   \r\n\r\n  /* Withdraw funds from contract */  \r\n  function withdrawEth() onlyOwner{     \r\n    if (this.balance == 0) throw;                                            // Check if there is balance on the contract     \r\n    if (totalEthRaised < minEthToRaise) throw;                               // Check if minEthToRaise treshold is exceeded     \r\n      \r\n    if(multisigAddress.send(this.balance)){}                                 // Send the contract's balance to multisig address   \r\n  }\r\n  \r\n  function endIco() onlyOwner {\r\n      if (totalEthRaised < minEthToRaise) throw;\r\n      if (block.number < endBlock) throw;\r\n  \r\n    icoHasSucessfulyEnded = true;\r\n    ICOEndedSuccessfuly(block.number, totalEthRaised);\r\n  }\r\n\r\n  /* Withdraw remaining balance to manually return where contract send has failed */  \r\n  function withdrawRemainingBalanceForManualRecovery() onlyOwner{     \r\n    if (this.balance == 0) throw;                                         // Check if there is balance on the contract    \r\n    if (block.number < endBlock) throw;                                   // Check if ICO failed    \r\n    if (participantIndex[lastEthReturnIndex] != 0x0) throw;               // Check if all the participants have been reimbursed     \r\n    if (multisigAddress.send(this.balance)){}                             // Send remainder so it can be manually processed   \r\n  }\r\n\r\n  //  \r\n  /* Getters */   \r\n  //  \r\n\r\n  function getSncTokenAddress() constant returns(address _tokenAddress){    \r\n    return address(sncTokenContract);   \r\n  }   \r\n\r\n  function icoInProgress() constant returns (bool answer){    \r\n    return icoHasStarted && !icoHasSucessfulyEnded;   \r\n  }   \r\n\r\n  function isAddressAllowedInPresale(address _querryAddress) constant returns (bool answer){    \r\n    return presaleContributorAllowance[_querryAddress];   \r\n  }   \r\n\r\n  function participantContributionInEth(address _querryAddress) constant returns (uint256 answer){    \r\n    return participantContribution[_querryAddress];   \r\n  }\r\n  \r\n  function getSncTokenIssuance(uint256 _blockNumber, uint256 _ethSent) constant returns(uint){\r\n        if (_blockNumber >= startBlock && _blockNumber < blocksInWeek + startBlock) {\r\n          if (presaleContributorAllowance[msg.sender]) return _ethSent * 11600;\r\n          else return _ethSent * 11500;\r\n        }\r\n        if (_blockNumber >= blocksInWeek + startBlock && _blockNumber < blocksInWeek * 2 + startBlock) return _ethSent * 11000;\r\n        if (_blockNumber >= blocksInWeek * 2 + startBlock && _blockNumber < blocksInWeek * 3 + startBlock) return _ethSent * 10500;\r\n        if (_blockNumber >= blocksInWeek * 3 + startBlock && _blockNumber <= blocksInWeek * 4 + startBlock) return _ethSent * 10000;\r\n    }\r\n\r\n  //\r\n  /* This part is here only for testing and will not be included into final version */\r\n  //\r\n  //function killContract() onlyOwner{\r\n  //  selfdestruct(msg.sender);\r\n  //}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeMultisigAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSncTokenAddress\",\"outputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minEthToRaise\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRemainingBalanceForManualRecovery\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_querryAddress\",\"type\":\"address\"}],\"name\":\"participantContributionInEth\",\"outputs\":[{\"name\":\"answer\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_querryAddress\",\"type\":\"address\"}],\"name\":\"isAddressAllowedInPresale\",\"outputs\":[{\"name\":\"answer\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_presaleContributors\",\"type\":\"address[]\"}],\"name\":\"addPresaleContributors\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoInProgress\",\"outputs\":[{\"name\":\"answer\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimEthIfFailed\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numberOfReturns\",\"type\":\"uint256\"}],\"name\":\"batchReturnEthIfFailed\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_presaleContributor\",\"type\":\"address\"}],\"name\":\"removePresaleContributor\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimCoreTeamsTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"name\":\"_ethSent\",\"type\":\"uint256\"}],\"name\":\"getSncTokenIssuance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sncTokenContractAddress\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endIco\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxEthToRaise\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_multisigAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"ICOStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"ICOMinTresholdReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amountRaised\",\"type\":\"uint256\"}],\"name\":\"ICOEndedSuccessfuly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ammountRaised\",\"type\":\"uint256\"}],\"name\":\"ICOFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ErrorSendingETH\",\"type\":\"event\"}]","ContractName":"SunContractIco","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000003c2c7e0000000000000000000000008ee1dfed72c8c401da3525033d471420a1da466b","Library":"","SwarmSource":"bzzr://e6f97bc831c06bf137e464d5dafc8b3afb20dc772484664a66f81ca4db8bea87"}]}