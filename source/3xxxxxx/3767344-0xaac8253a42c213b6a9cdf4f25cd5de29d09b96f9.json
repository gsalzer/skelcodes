{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/* Interface of the ERC223 token */\r\ncontract ERC223TokenInterface {\r\n    function name() constant returns (string _name);\r\n    function symbol() constant returns (string _symbol);\r\n    function decimals() constant returns (uint8 _decimals);\r\n    function totalSupply() constant returns (uint256 _supply);\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 _balance);\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool _success);\r\n    function allowance(address _owner, address spender) constant returns (uint256 _remaining);\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool _success);\r\n    function transfer(address _to, uint256 _value, bytes _metadata) returns (bool _success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool _success);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes metadata);\r\n}\r\n\r\n\r\n/* Interface of the contract that is going to receive ERC223 tokens */\r\ncontract ERC223ContractInterface {\r\n    function erc223Fallback(address _from, uint256 _value, bytes _data){\r\n        // to avoid warnings during compilation\r\n        _from = _from;\r\n        _value = _value;\r\n        _data = _data;\r\n        // Incoming transaction code here\r\n        throw;\r\n    }\r\n}\r\n\r\n\r\n/* https://github.com/LykkeCity/EthereumApiDotNetCore/blob/master/src/ContractBuilder/contracts/token/SafeMath.sol */\r\ncontract SafeMath {\r\n    uint256 constant public MAX_UINT256 =\r\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (x > MAX_UINT256 - y) throw;\r\n        return x + y;\r\n    }\r\n\r\n    function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (x < y) throw;\r\n        return x - y;\r\n    }\r\n\r\n    function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (y == 0) return 0;\r\n        if (x > MAX_UINT256 / y) throw;\r\n        return x * y;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC223Token is ERC223TokenInterface, SafeMath {\r\n\r\n    /*\r\n      Storage of the contract\r\n    */\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowances;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n\r\n    /*\r\n      Getters\r\n    */\r\n\r\n    function name() constant returns (string _name) {\r\n        return name;\r\n    }\r\n\r\n    function symbol() constant returns (string _symbol) {\r\n        return symbol;\r\n    }\r\n\r\n    function decimals() constant returns (uint8 _decimals) {\r\n        return decimals;\r\n    }\r\n\r\n    function totalSupply() constant returns (uint256 _supply) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 _balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    /*\r\n      Allow to spend\r\n    */\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool _success) {\r\n        allowances[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 _remaining) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n\r\n\r\n    /*\r\n      Transfer\r\n    */\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool _success) {\r\n        bytes memory emptyMetadata;\r\n        __transfer(msg.sender, _to, _value, emptyMetadata);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value, bytes _metadata) returns (bool _success)\r\n    {\r\n        __transfer(msg.sender, _to, _value, _metadata);\r\n        Transfer(msg.sender, _to, _value, _metadata);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool _success) {\r\n        if (allowances[_from][msg.sender] < _value) throw;\r\n\r\n        allowances[_from][msg.sender] = safeSub(allowances[_from][msg.sender], _value);\r\n        bytes memory emptyMetadata;\r\n        __transfer(_from, _to, _value, emptyMetadata);\r\n        return true;\r\n    }\r\n\r\n    function __transfer(address _from, address _to, uint256 _value, bytes _metadata) internal\r\n    {\r\n        if (_from == _to) throw;\r\n        if (_value == 0) throw;\r\n        if (balanceOf(_from) < _value) throw;\r\n\r\n        balances[_from] = safeSub(balanceOf(_from), _value);\r\n        balances[_to] = safeAdd(balanceOf(_to), _value);\r\n\r\n        if (isContract(_to)) {\r\n            ERC223ContractInterface receiverContract = ERC223ContractInterface(_to);\r\n            receiverContract.erc223Fallback(_from, _value, _metadata);\r\n        }\r\n\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n\r\n    /*\r\n      Helpers\r\n    */\r\n\r\n    // Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n    function isContract(address _addr) internal returns (bool _isContract) {\r\n        _addr = _addr; // to avoid warnings during compilation\r\n\r\n        uint256 length;\r\n        assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length > 0);\r\n    }\r\n}\r\n\r\n\r\ncontract ABCToken is ERC223Token {\r\n    // Constructor\r\n    function ABCToken(\r\n            string _name,\r\n            string _symbol,\r\n            uint8 _decimals,\r\n            uint256 _totalSupply,\r\n            address _initialTokensHolder) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply = _totalSupply;\r\n        balances[_initialTokensHolder] = _totalSupply;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_supply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_metadata\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"_remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_initialTokensHolder\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ABCToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000adb53acfa41aee120000000000000000000000000000008e090955f93376bdd758464f80920f8567d0152a0000000000000000000000000000000000000000000000000000000000000008416c70686162697400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034142430000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://f011aca274c3c3140a8ab2970ab5a9affb1009a97c47957e25acc176a5706b81"}]}