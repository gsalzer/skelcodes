{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.9;\r\n\r\n/**\r\n * @title ERC20\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() constant returns (uint256 totalSupply);\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n/**\r\n * @title LegendsToken\r\n */\r\ncontract LegendsToken is ERC20 {\r\n    string public name = 'VIP';             //The Token's name: e.g. DigixDAO Tokens\r\n    uint8 public decimals = 18;             // 1Token ¨= 1$ (1ETH ¨= 10$)\r\n    string public symbol = 'VIP';           //An identifier: e.g. REP\r\n    string public version = 'VIP_0.1';\r\n\r\n    mapping (address => uint) ownerVIP;\r\n    mapping (address => mapping (address => uint)) allowed;\r\n    uint public totalVIP;\r\n    uint public start;\r\n\r\n    address public legendsCrowdfund;\r\n\r\n    bool public testing;\r\n\r\n    modifier fromCrowdfund() {\r\n        if (msg.sender != legendsCrowdfund) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier isActive() {\r\n        if (block.timestamp < start) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier isNotActive() {\r\n        if (!testing && block.timestamp >= start) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier recipientIsValid(address recipient) {\r\n        if (recipient == 0 || recipient == address(this)) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier allowanceIsZero(address spender, uint value) {\r\n        // To change the approve amount you first have to reduce the addresses´\r\n        // allowance to zero by calling `approve(_spender,0)` if it is not\r\n        // already 0 to mitigate the race condition described here:\r\n        // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((value != 0) && (allowed[msg.sender][spender] != 0)) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Tokens have been added to an address by the crowdfunding contract.\r\n     * @param recipient Address receiving the VIP.\r\n     * @param VIP Amount of VIP added.\r\n     */\r\n    event TokensAdded(address indexed recipient, uint VIP);\r\n\r\n    /**\r\n     * @dev Constructor.\r\n     * @param _legendsCrowdfund Address of crowdfund contract.\r\n     * @param _preallocation Address to receive the pre-allocation.\r\n     * @param _start Timestamp when the token becomes active.\r\n     */\r\n    function LegendsToken(address _legendsCrowdfund, address _preallocation, uint _start, bool _testing) {\r\n        legendsCrowdfund = _legendsCrowdfund;\r\n        start = _start;\r\n        testing = _testing;\r\n        totalVIP = ownerVIP[_preallocation] = 25000 ether;\r\n    }\r\n\r\n    /**\r\n     * @dev Add to token balance on address. Must be from crowdfund.\r\n     * @param recipient Address to add tokens to.\r\n     * @return VIP Amount of VIP to add.\r\n     */\r\n    function addTokens(address recipient, uint VIP) external isNotActive fromCrowdfund {\r\n        ownerVIP[recipient] += VIP;\r\n        totalVIP += VIP;\r\n        TokensAdded(recipient, VIP);\r\n    }\r\n\r\n    /**\r\n     * @dev Implements ERC20 totalSupply()\r\n     */\r\n    function totalSupply() constant returns (uint256 totalSupply) {\r\n        totalSupply = totalVIP;\r\n    }\r\n\r\n    /**\r\n     * @dev Implements ERC20 balanceOf()\r\n     */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        balance = ownerVIP[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Implements ERC20 transfer()\r\n     */\r\n    function transfer(address _to, uint256 _value) isActive recipientIsValid(_to) returns (bool success) {\r\n        if (ownerVIP[msg.sender] >= _value) {\r\n            ownerVIP[msg.sender] -= _value;\r\n            ownerVIP[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Implements ERC20 transferFrom()\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) isActive recipientIsValid(_to) returns (bool success) {\r\n        if (allowed[_from][msg.sender] >= _value && ownerVIP[_from] >= _value) {\r\n            ownerVIP[_to] += _value;\r\n            ownerVIP[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Implements ERC20 approve()\r\n     */\r\n    function approve(address _spender, uint256 _value) isActive allowanceIsZero(_spender, _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Implements ERC20 allowance()\r\n     */\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        remaining = allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Direct Buy\r\n     */\r\n    function () payable {\r\n        LegendsCrowdfund(legendsCrowdfund).purchaseMembership.value(msg.value)(msg.sender);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title LegendsCrowdfund\r\n */\r\ncontract LegendsCrowdfund {\r\n\r\n    address public creator;\r\n    address public exitAddress;\r\n\r\n    uint public start;\r\n    uint public limitVIP;\r\n\r\n    LegendsToken public legendsToken;\r\n\r\n    mapping (address => uint) public recipientETH;\r\n    mapping (address => uint) public recipientVIP;\r\n\r\n    uint public totalETH;\r\n    uint public totalVIP;\r\n\r\n    event VIPPurchase(address indexed sender, address indexed recipient, uint ETH, uint VIP);\r\n\r\n    modifier saleActive() {\r\n        if (address(legendsToken) == 0) {\r\n            throw;\r\n        }\r\n        if (block.timestamp < start) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier hasValue() {\r\n        if (msg.value == 0) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier recipientIsValid(address recipient) {\r\n        if (recipient == 0 || recipient == address(this)) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier isCreator() {\r\n        if (msg.sender != creator) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier tokenContractNotSet() {\r\n        if (address(legendsToken) != 0) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor.\r\n     * @param _exitAddress Address that all ETH should be forwarded to.\r\n     * @param _start Timestamp of when the crowdsale will start.\r\n     * @param _limitVIP Maximum amount of VIP that can be allocated in total. Denominated in wei.\r\n     */\r\n    function LegendsCrowdfund(address _exitAddress, uint _start, uint _limitVIP) {\r\n        creator = msg.sender;\r\n        exitAddress = _exitAddress;\r\n        start = _start;\r\n        limitVIP = _limitVIP;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the address of the token contract. Must be called by creator of this. Can only be set once.\r\n     * @param _legendsToken Address of the token contract.\r\n     */\r\n    function setTokenContract(LegendsToken _legendsToken) external isCreator tokenContractNotSet {\r\n        legendsToken = _legendsToken;\r\n    }\r\n\r\n    /**\r\n     * @dev Forward Ether to the exit address. Store all ETH and VIP information in public state and logs.\r\n     * @param recipient Address that tokens should be attributed to.\r\n     */\r\n    function purchaseMembership(address recipient) external payable saleActive hasValue recipientIsValid(recipient) {\r\n\r\n        // Attempt to send the ETH to the exit address.\r\n        if (!exitAddress.send(msg.value)) {\r\n            throw;\r\n        }\r\n\r\n        // Update ETH amounts.\r\n        recipientETH[recipient] += msg.value;\r\n        totalETH += msg.value;\r\n\r\n        // Calculate VIP amount.\r\n        uint VIP = msg.value * 10;  // $1 / VIP based on $10 / ETH value.\r\n\r\n        // Are we in the pre-sale?\r\n        if (block.timestamp - start < 2 weeks) {\r\n            VIP = (VIP * 10) / 9;   // 10% discount.\r\n        }\r\n\r\n        // Update VIP amounts.\r\n        recipientVIP[recipient] += VIP;\r\n        totalVIP += VIP;\r\n\r\n        // Check we have not exceeded the maximum VIP.\r\n        if (totalVIP > limitVIP) {\r\n            throw;\r\n        }\r\n\r\n        // Tell the token contract about the increase.\r\n        legendsToken.addTokens(recipient, VIP);\r\n\r\n        // Log this purchase.\r\n        VIPPurchase(msg.sender, recipient, msg.value, VIP);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVIP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"VIP\",\"type\":\"uint256\"}],\"name\":\"addTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"legendsCrowdfund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"testing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_legendsCrowdfund\",\"type\":\"address\"},{\"name\":\"_preallocation\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_testing\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"VIP\",\"type\":\"uint256\"}],\"name\":\"TokensAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LegendsToken","CompilerVersion":"v0.4.9+commit.364da425","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c373bff29e2caf22af2e3fc76cd4322b2359a15b000000000000000000000000b3267b3b37a1c153ca574c3a50359f9d1613f95d0000000000000000000000000000000000000000000000000000000058ae1de10000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://260f5e43b67da9d91f8069763febfd2994351cc5f2efcec39cedae8f1b73c945"}]}