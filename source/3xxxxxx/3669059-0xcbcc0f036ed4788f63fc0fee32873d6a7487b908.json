{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.6;\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\n/// @title Abstract token contract - Functions to be implemented by token contracts.\r\ncontract AbstractToken {\r\n    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n    function balanceOf(address owner) constant returns (uint256 balance);\r\n    function transfer(address to, uint256 value) returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\r\n    function approve(address spender, uint256 value) returns (bool success);\r\n    function allowance(address owner, address spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Issuance(address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract StandardToken is AbstractToken {\r\n\r\n    /*\r\n     *  Data structures\r\n     */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n\r\n    /*\r\n     *  Read and write storage functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Read storage functions\r\n     */\r\n    /// @dev Returns number of allowed tokens for given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title Token contract - Implements Standard Token Interface with HumaniQ features.\r\n/// @author Evgeny Yurtaev - <evgeny@etherionlab.com>\r\n/// @author Alexey Bashlykov - <alexey@etherionlab.com>\r\ncontract HumaniqToken is StandardToken, SafeMath {\r\n\r\n    /*\r\n     * External contracts\r\n     */\r\n    address public minter;\r\n\r\n    /*\r\n     * Token meta data\r\n     */\r\n    string constant public name = \"Humaniq\";\r\n    string constant public symbol = \"HMQ\";\r\n    uint8 constant public decimals = 8;\r\n\r\n    // Address of the founder of Humaniq.\r\n    address public founder = 0xc890b1f532e674977dfdb791cafaee898dfa9671;\r\n\r\n    // Multisig address of the founders\r\n    address public multisig = 0xa2c9a7578e2172f32a36c5c0e49d64776f9e7883;\r\n\r\n    // Address where all tokens created during ICO stage initially allocated\r\n    address constant public allocationAddressICO = 0x1111111111111111111111111111111111111111;\r\n\r\n    // Address where all tokens created during preICO stage initially allocated\r\n    address constant public allocationAddressPreICO = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    // 31 820 314 tokens were minted during preICO\r\n    uint constant public preICOSupply = mul(31820314, 100000000);\r\n\r\n    // 131 038 286 tokens were minted during ICO\r\n    uint constant public ICOSupply = mul(131038286, 100000000);\r\n\r\n    // Max number of tokens that can be minted\r\n    uint public maxTotalSupply;\r\n\r\n    /*\r\n     * Modifiers\r\n     */\r\n    modifier onlyFounder() {\r\n        // Only founder is allowed to do this action.\r\n        if (msg.sender != founder) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        // Only minter is allowed to proceed.\r\n        if (msg.sender != minter) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * Contract functions\r\n     */\r\n\r\n    /// @dev Crowdfunding contract issues new tokens for address. Returns success.\r\n    /// @param _for Address of receiver.\r\n    /// @param tokenCount Number of tokens to issue.\r\n    function issueTokens(address _for, uint tokenCount)\r\n        external\r\n        payable\r\n        onlyMinter\r\n        returns (bool)\r\n    {\r\n        if (tokenCount == 0) {\r\n            return false;\r\n        }\r\n\r\n        if (add(totalSupply, tokenCount) > maxTotalSupply) {\r\n            throw;\r\n        }\r\n\r\n        totalSupply = add(totalSupply, tokenCount);\r\n        balances[_for] = add(balances[_for], tokenCount);\r\n        Issuance(_for, tokenCount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Function to change address that is allowed to do emission.\r\n    /// @param newAddress Address of new emission contract.\r\n    function changeMinter(address newAddress)\r\n        public\r\n        onlyFounder\r\n        returns (bool)\r\n    {   \r\n        // Forbid previous emission contract to distribute tokens minted during ICO stage\r\n        delete allowed[allocationAddressICO][minter];\r\n\r\n        minter = newAddress;\r\n\r\n        // Allow emission contract to distribute tokens minted during ICO stage\r\n        allowed[allocationAddressICO][minter] = balanceOf(allocationAddressICO);\r\n    }\r\n\r\n    /// @dev Function to change founder address.\r\n    /// @param newAddress Address of new founder.\r\n    function changeFounder(address newAddress)\r\n        public\r\n        onlyFounder\r\n        returns (bool)\r\n    {   \r\n        founder = newAddress;\r\n    }\r\n\r\n    /// @dev Function to change multisig address.\r\n    /// @param newAddress Address of new multisig.\r\n    function changeMultisig(address newAddress)\r\n        public\r\n        onlyFounder\r\n        returns (bool)\r\n    {\r\n        multisig = newAddress;\r\n    }\r\n\r\n    /// @dev Contract constructor function sets initial token balances.\r\n    function HumaniqToken(address founderAddress)\r\n    {   \r\n        // Set founder address\r\n        founder = founderAddress;\r\n\r\n        // Allocate all created tokens during ICO stage to allocationAddressICO.\r\n        balances[allocationAddressICO] = ICOSupply;\r\n\r\n        // Allocate all created tokens during preICO stage to allocationAddressPreICO.\r\n        balances[allocationAddressPreICO] = preICOSupply;\r\n\r\n        // Allow founder to distribute tokens minted during preICO stage\r\n        allowed[allocationAddressPreICO][founder] = preICOSupply;\r\n\r\n        // Give 14 percent of all tokens to founders.\r\n        balances[multisig] = div(mul(ICOSupply, 14), 86);\r\n\r\n        // Set correct totalSupply and limit maximum total supply.\r\n        totalSupply = add(ICOSupply, balances[multisig]);\r\n        totalSupply = add(totalSupply, preICOSupply);\r\n        maxTotalSupply = mul(totalSupply, 5);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"preICOSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocationAddressPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeMultisig\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_for\",\"type\":\"address\"},{\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"name\":\"issueTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocationAddressICO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeFounder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"founderAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"}]","ContractName":"HumaniqToken","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c890b1f532e674977dfdb791cafaee898dfa9671","Library":"","SwarmSource":"bzzr://358099b580d8e8d89dc74c0f98454503fa2b3ce1ce00e24786b6e9f7be11f528"}]}