{"status":"1","message":"OK","result":[{"SourceCode":"//\r\n/* SunContract Token Smart Contract v1.0 */   \r\n//\r\n\r\ncontract owned {\r\n\r\n  address public owner;\r\n\r\n  function owned() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    if (msg.sender != owner) throw;\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract tokenRecipient { \r\n  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\r\n} \r\n\r\ncontract IERC20Token {\r\n\r\n  /// @return total amount of tokens\r\n  function totalSupply() constant returns (uint256 totalSupply);\r\n\r\n  /// @param _owner The address from which the balance will be retrieved\r\n  /// @return The balance\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n  /// @notice send `_value` token to `_to` from `msg.sender`\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of tokens to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @param _value The amount of wei to be approved for transfer\r\n  /// @return Whether the approval was successful or not\r\n  function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n  /// @param _owner The address of the account owning tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @return Amount of remaining tokens allowed to spent\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n} \r\n\r\ncontract SunContractToken is IERC20Token, owned{\r\n\r\n  /* Public variables of the token */\r\n  string public standard = \"SunContract token v1.0\";\r\n  string public name = \"SunContract\";\r\n  string public symbol = \"SNC\";\r\n  uint8 public decimals = 18;\r\n  address public icoContractAddress;\r\n  uint256 public tokenFrozenUntilBlock;\r\n\r\n  /* Private variables of the token */\r\n  uint256 supply = 0;\r\n  mapping (address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) allowances;\r\n  mapping (address => bool) restrictedAddresses;\r\n\r\n  /* Events */\r\n  event Mint(address indexed _to, uint256 _value);\r\n  event Burn(address indexed _from, uint256 _value);\r\n  event TokenFrozen(uint256 _frozenUntilBlock, string _reason);\r\n\r\n  /* Initializes contract and  sets restricted addresses */\r\n  function SunContractToken(address _icoAddress) {\r\n    restrictedAddresses[0x0] = true;\r\n    restrictedAddresses[_icoAddress] = true;\r\n    restrictedAddresses[address(this)] = true;\r\n    icoContractAddress = _icoAddress;\r\n  }\r\n\r\n  /* Returns total supply of issued tokens */\r\n  function totalSupply() constant returns (uint256 totalSupply) {\r\n    return supply;\r\n  }\r\n\r\n  /* Returns balance of address */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /* Transfers tokens from your address to other */\r\n  function transfer(address _to, uint256 _value) returns (bool success) {\r\n    if (block.number < tokenFrozenUntilBlock) throw;    // Throw if token is frozen\r\n    if (restrictedAddresses[_to]) throw;                // Throw if recipient is restricted address\r\n    if (balances[msg.sender] < _value) throw;           // Throw if sender has insufficient balance\r\n    if (balances[_to] + _value < balances[_to]) throw;  // Throw if owerflow detected\r\n    balances[msg.sender] -= _value;                     // Deduct senders balance\r\n    balances[_to] += _value;                            // Add recivers blaance \r\n    Transfer(msg.sender, _to, _value);                  // Raise Transfer event\r\n    return true;\r\n  }\r\n\r\n  /* Approve other address to spend tokens on your account */\r\n  function approve(address _spender, uint256 _value) returns (bool success) {\r\n    if (block.number < tokenFrozenUntilBlock) throw;    // Throw if token is frozen        \r\n    allowances[msg.sender][_spender] = _value;          // Set allowance         \r\n    Approval(msg.sender, _spender, _value);             // Raise Approval event         \r\n    return true;\r\n  }\r\n\r\n  /* Approve and then communicate the approved contract in a single tx */ \r\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {            \r\n    tokenRecipient spender = tokenRecipient(_spender);              // Cast spender to tokenRecipient contract         \r\n    approve(_spender, _value);                                      // Set approval to contract for _value         \r\n    spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract         \r\n    return true;     \r\n  }     \r\n\r\n  /* A contract attempts to get the coins */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {      \r\n    if (block.number < tokenFrozenUntilBlock) throw;    // Throw if token is frozen\r\n    if (restrictedAddresses[_to]) throw;                // Throw if recipient is restricted address  \r\n    if (balances[_from] < _value) throw;                // Throw if sender does not have enough balance     \r\n    if (balances[_to] + _value < balances[_to]) throw;  // Throw if overflow detected    \r\n    if (_value > allowances[_from][msg.sender]) throw;  // Throw if you do not have allowance       \r\n    balances[_from] -= _value;                          // Deduct senders balance    \r\n    balances[_to] += _value;                            // Add recipient blaance         \r\n    allowances[_from][msg.sender] -= _value;            // Deduct allowance for this address         \r\n    Transfer(_from, _to, _value);                       // Raise Transfer event\r\n    return true;     \r\n  }         \r\n\r\n  /* Get the amount of allowed tokens to spend */     \r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {         \r\n    return allowances[_owner][_spender];\r\n  }         \r\n\r\n  /* Issue new tokens */     \r\n  function mintTokens(address _to, uint256 _amount) {         \r\n    if (msg.sender != icoContractAddress) throw;            // Only ICO address can mint tokens        \r\n    if (restrictedAddresses[_to]) throw;                    // Throw if user wants to send to restricted address       \r\n    if (balances[_to] + _amount < balances[_to]) throw;     // Check for overflows\r\n    supply += _amount;                                      // Update total supply\r\n    balances[_to] += _amount;                               // Set minted coins to target\r\n    Mint(_to, _amount);                                     // Create Mint event       \r\n    Transfer(0x0, _to, _amount);                            // Create Transfer event from 0x\r\n  }     \r\n  \r\n  /* Destroy tokens from owners account */\r\n  function burnTokens(uint256 _amount) onlyOwner {\r\n    if(balances[msg.sender] < _amount) throw;               // Throw if you do not have enough balance\r\n    if(supply < _amount) throw;                             // Throw if overflow detected\r\n\r\n    supply -= _amount;                                      // Deduct totalSupply\r\n    balances[msg.sender] -= _amount;                        // Destroy coins on senders wallet\r\n    Burn(msg.sender, _amount);                              // Raise Burn event\r\n    Transfer(msg.sender, 0x0, _amount);                     // Raise transfer to 0x0\r\n  }\r\n\r\n  /* Stops all token transfers in case of emergency */\r\n  function freezeTransfersUntil(uint256 _frozenUntilBlock, string _reason) onlyOwner {      \r\n    tokenFrozenUntilBlock = _frozenUntilBlock;\r\n    TokenFrozen(_frozenUntilBlock, _reason);\r\n  }\r\n\r\n  function isRestrictedAddress(address _querryAddress) constant returns (bool answer){\r\n    return restrictedAddresses[_querryAddress];\r\n  }\r\n\r\n  //\r\n  /* This part is here only for testing and will not be included into final version */\r\n  //\r\n\r\n  //function changeICOAddress(address _newAddress) onlyOwner{\r\n  //  icoContractAddress = _newAddress;\r\n  //  restrictedAddresses[_newAddress] = true;   \r\n  //}\r\n\r\n  //function killContract() onlyOwner{\r\n  //  selfdestruct(msg.sender);\r\n  //}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_querryAddress\",\"type\":\"address\"}],\"name\":\"isRestrictedAddress\",\"outputs\":[{\"name\":\"answer\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFrozenUntilBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_frozenUntilBlock\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"freezeTransfersUntil\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_icoAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_frozenUntilBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"TokenFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SunContractToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005fb3d432bae33fcd418ede263d98d7440e7fa3ea","Library":"","SwarmSource":"bzzr://9532e7a324dfe9644c85936f67ec38c806882f8cfcb84bd2cef6b079ef4904b4"}]}