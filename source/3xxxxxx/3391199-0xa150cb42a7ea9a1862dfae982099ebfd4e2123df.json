{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.9;\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract RoundToken {\r\n\r\n  string public constant name = \"ROUND\";\r\n  string public constant symbol = \"ROUND\";\r\n  uint8 public constant decimals = 18;\r\n  string public constant version = '0.1';\r\n  uint256 public constant totalSupply = 1000000000 * 1000000000000000000;\r\n\r\n  address public owner;\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n  event NewOwner(address _newOwner);\r\n\r\n  modifier checkIfToContract(address _to) {\r\n    if(_to != address(this))  {\r\n      _;\r\n    }\r\n  }\r\n\r\n  mapping (address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  function RoundToken() {\r\n    owner = msg.sender;\r\n    balances[owner] = totalSupply;\r\n  }\r\n\r\n  function replaceOwner(address _newOwner) returns (bool success) {\r\n    if (msg.sender != owner) throw;\r\n    owner = _newOwner;\r\n    NewOwner(_newOwner);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) checkIfToContract(_to) returns (bool success) {\r\n    if (balances[msg.sender] >= _value && _value > 0) {\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) checkIfToContract(_to) returns (bool success) {\r\n    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n      balances[_to] += _value;\r\n      balances[_from] -= _value;\r\n      allowed[_from][msg.sender] -= _value;\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) returns (bool success) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n    tokenRecipient spender = tokenRecipient(_spender);\r\n    if (approve(_spender, _value)) {\r\n      spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\n\r\ncontract Owned {\r\n  address public contractOwner;\r\n  address public pendingContractOwner;\r\n\r\n  function Owned() {\r\n    contractOwner = msg.sender;\r\n  }\r\n\r\n  modifier onlyContractOwner() {\r\n    if (contractOwner == msg.sender) _;\r\n  }\r\n\r\n  function changeContractOwnership(address _to) onlyContractOwner() returns(bool) {\r\n    pendingContractOwner = _to;\r\n    return true;\r\n  }\r\n\r\n  function claimContractOwnership() returns(bool) {\r\n    if (pendingContractOwner != msg.sender)\r\n      return false;\r\n    contractOwner = pendingContractOwner;\r\n    delete pendingContractOwner;\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract BidGame is Owned {\r\n\r\n  uint commissionPercent;\r\n  uint refundPenalty;\r\n  address gameOracleAddress;\r\n  address contractRoundTokenAddress;\r\n\r\n  struct Game {\r\n    uint gameId;\r\n    uint state; //0 - new, 1 - started, 2XX- game completed;\r\n    string winnerUserName;\r\n    uint winnerUserId;\r\n    uint totalGameBid;\r\n\tuint bidAmt;\r\n    Bid[] bids;\r\n  }\r\n\r\n  struct Bid {\r\n    address bidderAddress;\r\n    uint bid;\r\n    uint userId;\r\n    string userName;\r\n    bool refunded;\r\n  }\r\n\r\n  mapping(uint => Game) games;\r\n\r\n  // ---------------------------------------------------------------------------\r\n  // modifiers\r\n  modifier onlyGameOracle() {\r\n    if (gameOracleAddress == msg.sender) _;\r\n  }\r\n\r\n  // ---------------------------------------------------------------------------\r\n  // events\r\n  event LogSender2(address log, address contractRoundToken);\r\n  event GameBidAccepted(address bidder, uint amount, uint gameId, uint userId, bytes userName, bool state);\r\n  event GameStarted(uint gameId);\r\n  event GameFinished(uint gameId, uint winnerUserId, string winnerUserName, uint winnersPayment, address winnerAddress);\r\n  event GameRefunded(uint gameId, uint refundUserId, uint refundPayment);\r\n\r\n  // ---------------------------------------------------------------------------\r\n  // init settings\r\n  function setParams(uint _commissionPercent, uint _refundPenalty, address _gameOracleAddress, address _contractRoundTokenAddress) onlyContractOwner() {\r\n    commissionPercent = _commissionPercent;\r\n    refundPenalty = _refundPenalty;\r\n    gameOracleAddress = _gameOracleAddress;\r\n    contractRoundTokenAddress = _contractRoundTokenAddress;\r\n    LogSender2(msg.sender, contractRoundTokenAddress);\r\n  }\r\n\r\n  // ---------------------------------------------------------------------------\r\n  // contact actions\r\n  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) {\r\n    uint i = bytesToUint2(bytes(_extraData));\r\n    uint _gameId = i/10000;\r\n    uint _userId = i - _gameId*10000;\r\n\r\n\t//check game bid amount and force bidding the same amount of ROUNDs\r\n\tif (games[_gameId].gameId > 0){\r\n\t\tuint amountToBid = games[_gameId].bidAmt;\r\n\t\tfor (uint k = 0; k < games[_gameId].bids.length; k++) {\r\n\t\t\tif(!games[_gameId].bids[k].refunded && _userId==games[_gameId].bids[k].userId) {\r\n\t\t\t\tamountToBid-=games[_gameId].bids[k].bid;\r\n\t\t\t}\t\r\n\t\t}\r\n\t\tif(amountToBid>0)\r\n\t\t\t_value = amountToBid;\r\n\t\telse\r\n\t\t\tthrow;\r\n    }\r\n\t\r\n    RoundToken token = RoundToken(contractRoundTokenAddress);\r\n    bool state = token.transferFrom(_from, gameOracleAddress, _value);\r\n\r\n    if (!state) throw;\r\n\r\n\tif (games[_gameId].gameId == 0){\r\n\t\tgames[_gameId].bidAmt = _value;\r\n\t\tgames[_gameId].gameId = _gameId;\r\n\t}\r\n\r\n    games[_gameId].totalGameBid += _value;\r\n    games[_gameId].bids.push(Bid(_from, _value, _userId, '', false));\r\n\r\n    GameBidAccepted(_from, _value, _gameId, _userId, '', state);\r\n  }\r\n\r\n  function gameResult(uint _gameId, uint _userId) onlyGameOracle() {\r\n    if (games[_gameId].gameId == 0) throw;\r\n    if (games[_gameId].winnerUserId != 0) throw;\r\n    if (games[_gameId].totalGameBid == 0) throw;\r\n\r\n    address winnerAddress;\r\n    uint commission = games[_gameId].totalGameBid*commissionPercent/100;\r\n    // if (commission < 1) commission = 1;\r\n    uint winnerAmount = games[_gameId].totalGameBid - commission;\r\n\r\n    for (uint i = 0; i < games[_gameId].bids.length; i++) {\r\n      if(!games[_gameId].bids[i].refunded && _userId==games[_gameId].bids[i].userId) {\r\n        winnerAddress = games[_gameId].bids[i].bidderAddress;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (winnerAddress == 0) throw;\r\n\r\n    RoundToken token = RoundToken(contractRoundTokenAddress);\r\n    bool state = token.transferFrom(gameOracleAddress, winnerAddress, winnerAmount);\r\n\r\n    if (!state) throw;\r\n\r\n    games[_gameId].winnerUserId = _userId;\r\n    games[_gameId].state = 200;\r\n\r\n    GameFinished(_gameId, _userId, '', winnerAmount, winnerAddress);\r\n  }\r\n\r\n  function gameStart(uint _gameId) onlyGameOracle() {\r\n    if (games[_gameId].gameId == 0) throw;\r\n    if (games[_gameId].state != 0) throw;\r\n    games[_gameId].state = 1;\r\n    GameStarted(_gameId);\r\n  }\r\n\r\n  function gameRefund(uint _gameId) onlyGameOracle() {\r\n    if (games[_gameId].gameId == 0) throw;\r\n    if (games[_gameId].winnerUserId != 0) throw;\r\n    if (games[_gameId].totalGameBid == 0) throw;\r\n\r\n    for (uint i = 0; i < games[_gameId].bids.length; i++) {\r\n      if(!games[_gameId].bids[i].refunded) {\r\n        uint penalty = games[_gameId].bids[i].bid*refundPenalty/100;\r\n        // if (penalty < 1) penalty = 1;\r\n        uint refundAmount = games[_gameId].bids[i].bid - penalty;\r\n\r\n        RoundToken token = RoundToken(contractRoundTokenAddress);\r\n        bool state = token.transferFrom(gameOracleAddress, games[_gameId].bids[i].bidderAddress, refundAmount);\r\n\r\n        if (!state) throw;\r\n\r\n        games[_gameId].bids[i].refunded = true;\r\n        games[_gameId].totalGameBid -= games[_gameId].bids[i].bid;\r\n        GameRefunded(_gameId, games[_gameId].bids[i].userId, refundAmount);\r\n      }\r\n    }\r\n  }\r\n\r\n  function bidRefund(uint _gameId, uint _userId) onlyGameOracle() {\r\n    if (games[_gameId].gameId == 0) throw;\r\n    if (games[_gameId].winnerUserId != 0) throw;\r\n    if (games[_gameId].totalGameBid == 0) throw;\r\n    for (uint i = 0; i < games[_gameId].bids.length; i++) {\r\n      if(!games[_gameId].bids[i].refunded) {\r\n        if (games[_gameId].bids[i].userId == _userId) {\r\n          uint penalty = games[_gameId].bids[i].bid*refundPenalty/100;\r\n          // if (penalty < 1) penalty = 1;\r\n          uint refundAmount = games[_gameId].bids[i].bid - penalty;\r\n\r\n          RoundToken token = RoundToken(contractRoundTokenAddress);\r\n          bool state = token.transferFrom(gameOracleAddress, games[_gameId].bids[i].bidderAddress, refundAmount);\r\n\r\n          if (!state) throw;\r\n\r\n          games[_gameId].bids[i].refunded = true;\r\n          games[_gameId].totalGameBid -= games[_gameId].bids[i].bid;\r\n          GameRefunded(_gameId, games[_gameId].bids[i].userId, refundAmount);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // ---------------------------------------------------------------------------\r\n  // Get settings\r\n  function getSettings() constant returns(uint commission, uint penalty) {\r\n    return (\r\n      commissionPercent,\r\n      refundPenalty\r\n    );\r\n  }\r\n\r\n  // ---------------------------------------------------------------------------\r\n  // Get game info\r\n  function getGame(uint _gameId) constant returns(uint gameId, uint state, uint winnerUserId, uint totalGameBid, uint bidAmt, uint bidsAmount) {\r\n    var game = games[_gameId];\r\n    return (\r\n      game.gameId,\r\n      game.state,\r\n      game.winnerUserId,\r\n      game.totalGameBid,\r\n\t  game.bidAmt,\r\n      game.bids.length\r\n    );\r\n  }\r\n\r\n  // ---------------------------------------------------------------------------\r\n  // Get bid info\r\n  function getGameBid(uint _gameId, uint _bidId) constant returns(address bidderAddress, uint bidsAmount, uint userId, string userName, bool refunded) {\r\n    Game game = games[_gameId];\r\n    Bid bid=game.bids[_bidId];\r\n    return (\r\n      bid.bidderAddress,\r\n      bid.bid,\r\n      bid.userId,\r\n      bid.userName,\r\n      bid.refunded\r\n    );\r\n  }\r\n\r\n  // ---------------------------------------------------------------------------\r\n  // Get balance of address\r\n  function getBalance(address _owner) constant returns (uint256 balance) {\r\n    RoundToken token = RoundToken(contractRoundTokenAddress);\r\n    return token.balanceOf(_owner);\r\n  }\r\n\r\n  // ---------------------------------------------------------------------------\r\n  // kill contract\r\n  function kill() onlyContractOwner() {\r\n   if (msg.sender == contractOwner){\r\n      suicide(contractOwner);\r\n    }\r\n  }\r\n\r\n  // ---------------------------------------------------------------------------\r\n  // utils\r\n  function bytesToUint2(bytes b) returns (uint) {\r\n    uint result = 0;\r\n    for (uint i=1; i < b.length; i++) {\r\n      uint x = uint(uint(b[i]));\r\n      if (x > 0)\r\n        x = x - 48;\r\n      result = result + x*(10**(b.length-i-1));\r\n    }\r\n    return result;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"},{\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"bidRefund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingContractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"b\",\"type\":\"bytes\"}],\"name\":\"bytesToUint2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSettings\",\"outputs\":[{\"name\":\"commission\",\"type\":\"uint256\"},{\"name\":\"penalty\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getGame\",\"outputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"uint256\"},{\"name\":\"winnerUserId\",\"type\":\"uint256\"},{\"name\":\"totalGameBid\",\"type\":\"uint256\"},{\"name\":\"bidAmt\",\"type\":\"uint256\"},{\"name\":\"bidsAmount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"gameStart\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"},{\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"gameResult\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"},{\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"getGameBid\",\"outputs\":[{\"name\":\"bidderAddress\",\"type\":\"address\"},{\"name\":\"bidsAmount\",\"type\":\"uint256\"},{\"name\":\"userId\",\"type\":\"uint256\"},{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"refunded\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_commissionPercent\",\"type\":\"uint256\"},{\"name\":\"_refundPenalty\",\"type\":\"uint256\"},{\"name\":\"_gameOracleAddress\",\"type\":\"address\"},{\"name\":\"_contractRoundTokenAddress\",\"type\":\"address\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"gameRefund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"log\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractRoundToken\",\"type\":\"address\"}],\"name\":\"LogSender2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"userName\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"GameBidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerUserId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerUserName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"winnersPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerAddress\",\"type\":\"address\"}],\"name\":\"GameFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refundUserId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refundPayment\",\"type\":\"uint256\"}],\"name\":\"GameRefunded\",\"type\":\"event\"}]","ContractName":"BidGame","CompilerVersion":"v0.4.9+commit.364da425","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://873cffc1c51122bd746c1d3599d3782057c0dde415bd96e684552e31bdb340ac"}]}