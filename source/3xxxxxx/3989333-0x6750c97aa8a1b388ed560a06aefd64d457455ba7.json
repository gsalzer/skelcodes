{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**   \r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value);\r\n  function approve(address spender, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Blocktix Token Generation Event contract\r\n *\r\n * @dev Based on code by BAT: https://github.com/brave-intl/basic-attention-token-crowdsale/blob/master/contracts/BAToken.sol\r\n */\r\ncontract TIXGeneration is StandardToken {\r\n    string public constant name = \"Blocktix Token\";\r\n    string public constant symbol = \"TIX\";\r\n    uint256 public constant decimals = 18;\r\n    string public version = \"1.0\";\r\n\r\n    // crowdsale parameters\r\n    bool public isFinalized;              // switched to true in operational state\r\n    uint256 public startTime = 0;         // crowdsale start time (in seconds)\r\n    uint256 public endTime = 0;           // crowdsale end time (in seconds)\r\n    uint256 public constant tokenGenerationCap =  62.5 * (10**6) * 10**decimals; // 62.5m TIX\r\n    uint256 public constant t2tokenExchangeRate = 1250;\r\n    uint256 public constant t3tokenExchangeRate = 1041;\r\n    uint256 public constant tixFund = tokenGenerationCap / 100 * 24;     // 24%\r\n    uint256 public constant tixFounders = tokenGenerationCap / 100 * 10; // 10%\r\n    uint256 public constant tixPromo = tokenGenerationCap / 100 * 2;     // 2%\r\n    uint256 public constant tixPresale = 29.16 * (10**6) * 10**decimals;    // 29.16m TIX Presale\r\n\r\n    uint256 public constant finalTier = 52.5 * (10**6) * 10**decimals; // last 10m\r\n    uint256 public tokenExchangeRate = t2tokenExchangeRate;\r\n\r\n    // addresses\r\n    address public ethFundDeposit;      // deposit address for ETH for Blocktix\r\n    address public tixFundDeposit;      // deposit address for TIX for Blocktix\r\n    address public tixFoundersDeposit;  // deposit address for TIX for Founders\r\n    address public tixPromoDeposit;     // deposit address for TIX for Promotion\r\n    address public tixPresaleDeposit;   // deposit address for TIX for Presale\r\n\r\n    /**\r\n    * @dev modifier to allow actions only when the contract IS finalized\r\n    */\r\n    modifier whenFinalized() {\r\n        if (!isFinalized) throw;\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev modifier to allow actions only when the contract IS NOT finalized\r\n    */\r\n    modifier whenNotFinalized() {\r\n        if (isFinalized) throw;\r\n        _;\r\n    }\r\n\r\n    // ensures that the current time is between _startTime (inclusive) and _endTime (exclusive)\r\n    modifier between(uint256 _startTime, uint256 _endTime) {\r\n        assert(now >= _startTime && now < _endTime);\r\n        _;\r\n    }\r\n\r\n    // verifies that an amount is greater than zero\r\n    modifier validAmount() {\r\n        require(msg.value > 0);\r\n        _;\r\n    }\r\n\r\n    // validates an address - currently only checks that it isn't null\r\n    modifier validAddress(address _address) {\r\n        require(_address != 0x0);\r\n        _;\r\n    }\r\n\r\n    // events\r\n    event CreateTIX(address indexed _to, uint256 _value);\r\n\r\n    /**\r\n    * @dev Contructor that assigns all presale tokens and starts the sale\r\n    */\r\n    function TIXGeneration(\r\n        address _ethFundDeposit,\r\n        address _tixFundDeposit,\r\n        address _tixFoundersDeposit,\r\n        address _tixPromoDeposit,\r\n        address _tixPresaleDeposit,\r\n        uint256 _startTime,\r\n        uint256 _endTime)\r\n    {\r\n        isFinalized = false; // Initialize presale\r\n\r\n        ethFundDeposit = _ethFundDeposit;\r\n        tixFundDeposit = _tixFundDeposit;\r\n        tixFoundersDeposit = _tixFoundersDeposit;\r\n        tixPromoDeposit = _tixPromoDeposit;\r\n        tixPresaleDeposit = _tixPresaleDeposit;\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n\r\n        // Allocate presale and founders tix\r\n        totalSupply = tixFund;\r\n        totalSupply += tixFounders;\r\n        totalSupply += tixPromo;\r\n        totalSupply += tixPresale;\r\n        balances[tixFundDeposit] = tixFund;         // Deposit TIX for Blocktix\r\n        balances[tixFoundersDeposit] = tixFounders; // Deposit TIX for Founders\r\n        balances[tixPromoDeposit] = tixPromo;       // Deposit TIX for Promotion\r\n        balances[tixPresaleDeposit] = tixPresale;   // Deposit TIX for Presale\r\n        CreateTIX(tixFundDeposit, tixFund);         // logs TIX for Blocktix\r\n        CreateTIX(tixFoundersDeposit, tixFounders); // logs TIX for Founders\r\n        CreateTIX(tixPromoDeposit, tixPromo);       // logs TIX for Promotion\r\n        CreateTIX(tixPresaleDeposit, tixPresale);   // logs TIX for Presale\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    *\r\n    * can only be called during once the the funding period has been finalized\r\n    */\r\n    function transfer(address _to, uint _value) whenFinalized {\r\n        super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amout of tokens to be transfered\r\n    *\r\n    * can only be called during once the the funding period has been finalized\r\n    */\r\n    function transferFrom(address _from, address _to, uint _value) whenFinalized {\r\n        super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Accepts ETH and generates TIX tokens\r\n     *\r\n     * can only be called during the crowdsale\r\n     */\r\n    function generateTokens()\r\n        public\r\n        payable\r\n        whenNotFinalized\r\n        between(startTime, endTime)\r\n        validAmount\r\n    {\r\n        if (totalSupply == tokenGenerationCap)\r\n            throw;\r\n\r\n        uint256 tokens = SafeMath.mul(msg.value, tokenExchangeRate); // check that we're not over totals\r\n        uint256 checkedSupply = SafeMath.add(totalSupply, tokens);\r\n        uint256 diff;\r\n\r\n        // switch to next tier\r\n        if (tokenExchangeRate != t3tokenExchangeRate && finalTier < checkedSupply)\r\n        {\r\n            diff = SafeMath.sub(checkedSupply, finalTier);\r\n            tokens = SafeMath.sub(tokens, diff);\r\n            uint256 ethdiff = SafeMath.div(diff, t2tokenExchangeRate);\r\n            tokenExchangeRate = t3tokenExchangeRate;\r\n            tokens = SafeMath.add(tokens, SafeMath.mul(ethdiff, tokenExchangeRate));\r\n            checkedSupply = SafeMath.add(totalSupply, tokens);\r\n        }\r\n\r\n        // return money if something goes wrong\r\n        if (tokenGenerationCap < checkedSupply)\r\n        {\r\n            diff = SafeMath.sub(checkedSupply, tokenGenerationCap);\r\n            if (diff > 10**12)\r\n                throw;\r\n            checkedSupply = SafeMath.sub(checkedSupply, diff);\r\n            tokens = SafeMath.sub(tokens, diff);\r\n        }\r\n\r\n        totalSupply = checkedSupply;\r\n        balances[msg.sender] += tokens;\r\n        CreateTIX(msg.sender, tokens); // logs token creation\r\n    }\r\n\r\n    /**\r\n    * @dev Ends the funding period and sends the ETH home\r\n    */\r\n    function finalize()\r\n        external\r\n        whenNotFinalized\r\n    {\r\n        if (msg.sender != ethFundDeposit) throw; // locks finalize to the ultimate ETH owner\r\n        if (now <= endTime && totalSupply != tokenGenerationCap) throw;\r\n        // move to operational\r\n        isFinalized = true;\r\n        if(!ethFundDeposit.send(this.balance)) throw;  // send the eth to Blocktix\r\n    }\r\n\r\n    // fallback\r\n    function()\r\n        payable\r\n        whenNotFinalized\r\n    {\r\n        generateTokens();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tixPromoDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tixFounders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"t2tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalTier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tixPromo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tixFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"t3tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tixFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tixFoundersDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"generateTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tixPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenGenerationCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tixPresaleDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ethFundDeposit\",\"type\":\"address\"},{\"name\":\"_tixFundDeposit\",\"type\":\"address\"},{\"name\":\"_tixFoundersDeposit\",\"type\":\"address\"},{\"name\":\"_tixPromoDeposit\",\"type\":\"address\"},{\"name\":\"_tixPresaleDeposit\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"CreateTIX\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TIXGeneration","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ce9f93eb7f78fcb7e7d222c81f258535dc218d4b000000000000000000000000007248ae35cd3e1323c7bed3acf03679af070cb000000000000000000000000000b77dd26d21f946a4cd67a6fc17262b77e025ae00000000000000000000000000a1b88a9d8fc67a84c7f16627a596da5639189500000000000000000000000000238bfd17ea767e56fb48439eb12c824e8befa900000000000000000000000000000000000000000000000000000000595fe8400000000000000000000000000000000000000000000000000000000059612733","Library":"","SwarmSource":"bzzr://20681703d145e264dfac767b8861ff338485acb8b1c11bcec24d823ad4116b05"}]}