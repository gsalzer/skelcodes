{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.11;\r\n\r\ncontract Wolker {\r\n  mapping (address => uint256) balances;\r\n  mapping (address => uint256) allocations;\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n  mapping (address => mapping (address => bool)) authorized; //trustee\r\n\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transfer(address _to, uint256 _value) returns (bool success) {\r\n    if (balances[msg.sender] >= _value && _value > 0) {\r\n      balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n      balances[_to] = safeAdd(balances[_to], _value);\r\n      Transfer(msg.sender, _to, _value, balances[msg.sender], balances[_to]);\r\n      return true;\r\n    } else {\r\n      throw;\r\n    }\r\n  }\r\n  \r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n      balances[_to] = safeAdd(balances[_to], _value);\r\n      balances[_from] = safeSub(balances[_from], _value);\r\n      allowed[_from][msg.sender] = safeSub(_allowance, _value);\r\n      Transfer(_from, _to, _value, balances[_from], balances[_to]);\r\n      return true;\r\n    } else {\r\n      throw;\r\n    }\r\n  }\r\n \r\n  /// @return total amount of tokens\r\n  function totalSupply() external constant returns (uint256) {\r\n        return generalTokens + reservedTokens;\r\n  }\r\n \r\n  /// @param _owner The address from which the balance will be retrieved\r\n  /// @return The balance\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @param _value The amount of Wolk token to be approved for transfer\r\n  /// @return Whether the approval was successful or not\r\n  function approve(address _spender, uint256 _value) returns (bool success) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n\r\n  /// @param _trustee Grant trustee permission to settle media spend\r\n  /// @return Whether the authorization was successful or not\r\n  function authorize(address _trustee) returns (bool success) {\r\n    authorized[msg.sender][_trustee] = true;\r\n    Authorization(msg.sender, _trustee);\r\n    return true;\r\n  }\r\n\r\n  /// @param _trustee_to_remove Revoke trustee's permission on settle media spend \r\n  /// @return Whether the deauthorization was successful or not\r\n  function deauthorize(address _trustee_to_remove) returns (bool success) {\r\n    authorized[msg.sender][_trustee_to_remove] = false;\r\n    Deauthorization(msg.sender, _trustee_to_remove);\r\n    return true;\r\n  }\r\n\r\n  // @param _owner\r\n  // @param _trustee\r\n  // @return authorization_status for platform settlement \r\n  function check_authorization(address _owner, address _trustee) constant returns (bool authorization_status) {\r\n    return authorized[_owner][_trustee];\r\n  }\r\n\r\n  /// @param _owner The address of the account owning tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @return Amount of remaining tokens allowed to spent\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n\r\n  //**** ERC20 TOK Events:\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value, uint from_final_tok, uint to_final_tok);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n  event Authorization(address indexed _owner, address indexed _trustee);\r\n  event Deauthorization(address indexed _owner, address indexed _trustee_to_remove);\r\n\r\n  event NewOwner(address _newOwner);\r\n  event MintEvent(uint reward_tok, address recipient);\r\n  event LogRefund(address indexed _to, uint256 _value);\r\n  event CreateWolk(address indexed _to, uint256 _value);\r\n  event Vested(address indexed _to, uint256 _value);\r\n\r\n  modifier onlyOwner {\r\n    assert(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier isOperational() {\r\n    assert(isFinalized);\r\n    _;\r\n  }\r\n\r\n\r\n  //**** ERC20 TOK fields:\r\n  string  public constant name = 'Wolk';\r\n  string  public constant symbol = \"WOLK\";\r\n  string  public constant version = \"0.2\";\r\n  uint256 public constant decimals = 18;\r\n  uint256 public constant wolkFund  =  10 * 10**1 * 10**decimals;        //  100 Wolk in operation Fund\r\n  uint256 public constant tokenCreationMin =  20 * 10**1 * 10**decimals; //  200 Wolk Min\r\n  uint256 public constant tokenCreationMax = 100 * 10**1 * 10**decimals; // 1000 Wolk Max\r\n  uint256 public constant tokenExchangeRate = 10000;   // 10000 Wolk per 1 ETH\r\n  uint256 public generalTokens = wolkFund; // tokens in circulation\r\n  uint256 public reservedTokens; \r\n\r\n  //address public owner = msg.sender;\r\n  address public owner = 0xC28dA4d42866758d0Fc49a5A3948A1f43de491e9; // Urmi\r\n  address public multisig_owner = 0x6968a9b90245cB9bD2506B9460e3D13ED4B2FD1e; // new multi-sig\r\n\r\n  bool public isFinalized = false;          // after token sale success, this is true\r\n  uint public constant dust = 1000000 wei; \r\n  bool public fairsale_protection = true;\r\n\r\n  \r\n     // Actual crowdsale\r\n  uint256 public start_block;                // Starting block\r\n  uint256 public end_block;                  // Ending block\r\n  uint256 public unlockedAt;                 // Unlocking block \r\n \r\n  uint256 public end_ts;                     // Unix End time\r\n\r\n\r\n  // minting support\r\n  //uint public max_creation_rate_per_second; // Maximum token creation rate per second\r\n  //address public minter_address;            // Has permission to mint\r\n\r\n  // migration support\r\n  //address migrationMaster;\r\n\r\n\r\n  //**** Constructor:\r\n  function Wolk() \r\n  {\r\n    if ( msg.sender != owner ) throw;\r\n    // Actual crowdsale\r\n    start_block = 3835853;\r\n    end_block = 3836353;\r\n\r\n    // wolkFund is 100\r\n    balances[owner] = wolkFund;\r\n\r\n    // Wolk Inc has 25MM Wolk, 5MM of which is allocated for Wolk Inc Founding staff, who vest at \"unlockedAt\" time\r\n    reservedTokens = 25 * 10**decimals;\r\n    allocations[0x564a3f7d98Eb5B1791132F8875fef582d528d5Cf] = 20; // unassigned\r\n    allocations[0x7f512CCFEF05F651A70Fa322Ce27F4ad79b74ffe] = 1;  // Sourabh\r\n    allocations[0x9D203A36cd61b21B7C8c7Da1d8eeB13f04bb24D9] = 2;  // Michael - Test\r\n    allocations[0x5fcf700654B8062B709a41527FAfCda367daE7b1] = 1;  // Michael - Main\r\n    allocations[0xC28dA4d42866758d0Fc49a5A3948A1f43de491e9] = 1;  // Urmi\r\n    \r\n    CreateWolk(owner, wolkFund); \r\n  }\r\n\r\n  // ****** VESTING SUPPORT\r\n  /// @notice Allow developer to unlock allocated tokens by transferring them to developer's address on vesting schedule of \"vested 100% on 1 year)\r\n  function unlock() external {\r\n    if (now < unlockedAt) throw;\r\n    uint256 vested = allocations[msg.sender] * 10**decimals;\r\n    if (vested < 0 ) throw; // Will fail if allocation (and therefore toTransfer) is 0.\r\n    allocations[msg.sender] = 0;\r\n    reservedTokens = safeSub(reservedTokens, vested);\r\n    balances[msg.sender] = safeAdd(balances[msg.sender], vested); \r\n    Vested(msg.sender, vested);\r\n  }\r\n\r\n  // ******* CROWDSALE SUPPORT\r\n  // Accepts ETH and creates WOLK\r\n  function createTokens() payable external is_not_dust {\r\n    if (isFinalized) throw;\r\n    if (block.number < start_block) throw;\r\n    if (block.number > end_block) throw;\r\n    if (msg.value == 0) throw;\r\n    if (tx.gasprice > 0.021 szabo && fairsale_protection) throw; \r\n    if (msg.value > 0.04 ether && fairsale_protection) throw; \r\n\r\n    uint256 tokens = safeMul(msg.value, tokenExchangeRate); // check that we're not over totals\r\n    uint256 checkedSupply = safeAdd(generalTokens, tokens);\r\n    if ( checkedSupply > tokenCreationMax) { \r\n      throw; // they need to get their money back if something goes wrong\r\n    } else {\r\n      generalTokens = checkedSupply;\r\n      balances[msg.sender] = safeAdd(balances[msg.sender], tokens);   // safeAdd not needed; bad semantics to use here\r\n      CreateWolk(msg.sender, tokens); // logs token creation\r\n    }\r\n  }\r\n  \r\n  // The value of the message must be sufficiently large to not be considered dust.\r\n  modifier is_not_dust { if (msg.value < dust) throw; _; }\r\n\r\n  // Disabling fairsale protection  \r\n  function fairsale_protectionOFF() external {\r\n    if ( block.number - start_block < 200) throw; // fairsale window is strictly enforced\r\n    if ( msg.sender != owner ) throw;\r\n    fairsale_protection = false;\r\n  }\r\n\r\n  // Finalizing the crowdsale\r\n  function finalize() external {\r\n    if ( isFinalized ) throw;\r\n    if ( msg.sender != owner ) throw;  // locks finalize to ETH owner\r\n    if ( generalTokens < tokenCreationMin ) throw; // have to sell tokenCreationMin to finalize\r\n    if ( block.number < end_block ) throw;  \r\n    isFinalized = true;\r\n    end_ts = now;\r\n    unlockedAt = end_ts + 2 minutes;\r\n    if ( ! multisig_owner.send(this.balance) ) throw;\r\n  }\r\n\r\n  function refund() external {\r\n    if ( isFinalized ) throw; \r\n    if ( block.number < end_block ) throw;   \r\n    if ( generalTokens >= tokenCreationMin ) throw;  \r\n    if ( msg.sender == owner ) throw;\r\n    uint256 Val = balances[msg.sender];\r\n    balances[msg.sender] = 0;\r\n    generalTokens = safeSub(generalTokens, Val);\r\n    uint256 ethVal = safeDiv(Val, tokenExchangeRate);\r\n    LogRefund(msg.sender, ethVal);\r\n    if ( ! msg.sender.send(ethVal) ) throw;\r\n  }\r\n    \r\n  // ****** Platform Settlement\r\n  function settleFrom(address _from, address _to, uint256 _value) isOperational() external returns (bool success) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n    if (balances[_from] >= _value && (allowed[_from][msg.sender] >= _value || authorized[_from][msg.sender] == true ) && _value > 0) {\r\n      balances[_to] = safeAdd(balances[_to], _value);\r\n      balances[_from] = safeSub(balances[_from], _value);\r\n      allowed[_from][msg.sender] = safeSub(_allowance, _value);\r\n      if ( allowed[_from][msg.sender] < 0 ){\r\n         allowed[_from][msg.sender] = 0;\r\n      }\r\n      Transfer(_from, _to, _value, balances[_from], balances[_to]);\r\n      return true;\r\n    } else {\r\n      throw;\r\n    }\r\n  }\r\n\r\n  // ****** MINTING SUPPORT\r\n  // Mint new tokens\r\n  modifier only_minter {\r\n    assert(msg.sender == minter_address);\r\n    _;\r\n  }\r\n  \r\n  address public minter_address = owner;            // Has permission to mint\r\n\r\n  function mintTokens(uint reward_tok, address recipient) external payable only_minter\r\n  {\r\n    balances[recipient] = safeAdd(balances[recipient], reward_tok);\r\n    generalTokens = safeAdd(generalTokens, reward_tok);\r\n    MintEvent(reward_tok, recipient);\r\n  }\r\n\r\n  function changeMintingAddress(address newAddress) onlyOwner returns (bool success) { \r\n    minter_address = newAddress; \r\n    return true;\r\n  }\r\n\r\n  \r\n  //**** SafeMath:\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  \r\n  function safeDiv(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n  \r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  \r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) throw;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reward_tok\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Wolk\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trustee_to_remove\",\"type\":\"address\"}],\"name\":\"deauthorize\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_trustee\",\"type\":\"address\"}],\"name\":\"check_authorization\",\"outputs\":[{\"name\":\"authorization_status\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeMintingAddress\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"generalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fairsale_protection\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trustee\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fairsale_protectionOFF\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wolkFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"settleFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end_ts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dust\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"from_final_tok\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to_final_tok\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_trustee\",\"type\":\"address\"}],\"name\":\"Authorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_trustee_to_remove\",\"type\":\"address\"}],\"name\":\"Deauthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"reward_tok\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"MintEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"CreateWolk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Vested\",\"type\":\"event\"}]","ContractName":"Wolker","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7f3165e43f5d6fb56eb1ebdc695b92fb327a7344f5b546928f81ae022974378e"}]}