{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract MumsTheWord {\r\n\r\n    uint32 public lastCreditorPayedOut;\r\n    uint public lastTimeOfNewCredit;\r\n    uint public jackpot;\r\n    address[] public creditorAddresses;\r\n    uint[] public creditorAmounts;\r\n    address public owner;\r\n\tuint8 public round;\r\n\t\r\n\t// eight hours\r\n    uint constant EIGHT_HOURS = 28800;\r\n\tuint constant MIN_AMOUNT = 10 ** 16;\r\n\r\n    function MumsTheWord() {\r\n        // owner of the contract will provide the initial jackpot!\r\n        jackpot = msg.value;\r\n        owner = msg.sender;\r\n        lastTimeOfNewCredit = now;\r\n    }\r\n\r\n    function enter() payable returns (bool) {\r\n        uint amount = msg.value;\r\n        // check if 8h have passed\r\n        if (lastTimeOfNewCredit + EIGHT_HOURS > now) {\r\n            // Return money to sender\r\n            msg.sender.transfer(amount);\r\n            // Sends jackpot to the last player\r\n            creditorAddresses[creditorAddresses.length - 1].transfer(jackpot);\r\n            owner.transfer(this.balance);\r\n            // Reset contract state\r\n            lastCreditorPayedOut = 0;\r\n            lastTimeOfNewCredit = now;\r\n            jackpot = 0;\r\n            creditorAddresses = new address[](0);\r\n            creditorAmounts = new uint[](0);\r\n            round += 1;\r\n            return false;\r\n        } else {\r\n            // the system needs to collect at least 1% of the profit from a crash to stay alive\r\n            if (amount >= MIN_AMOUNT) {\r\n                // the System has received fresh money, it will survive at least 8h more\r\n                lastTimeOfNewCredit = now;\r\n                // register the new creditor and his amount with 10% interest rate\r\n                creditorAddresses.push(msg.sender);\r\n                creditorAmounts.push(amount * 110 / 100);\r\n\t\t\t\t\r\n                // 5% fee\r\n                owner.transfer(amount * 5/100);\r\n\t\t\t\t\r\n                // 5% are going to the jackpot (will increase the value for the last person standing)\r\n                if (jackpot < 100 ether) {\r\n                    jackpot += amount * 5/100;\r\n                }\r\n\t\t\t\t\r\n                // 90% of the money will be used to pay out old creditors\r\n                if (creditorAmounts[lastCreditorPayedOut] <= address(this).balance - jackpot) {\r\n                    creditorAddresses[lastCreditorPayedOut].transfer(creditorAmounts[lastCreditorPayedOut]);\r\n                    lastCreditorPayedOut += 1;\r\n                }\r\n                return true;\r\n            } else {\r\n                msg.sender.transfer(amount);\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // fallback function\r\n    function() payable {\r\n        enter();\r\n    }\r\n\r\n    function totalDebt() returns (uint debt) {\r\n        for(uint i=lastCreditorPayedOut; i<creditorAmounts.length; i++){\r\n            debt += creditorAmounts[i];\r\n        }\r\n    }\r\n\r\n    function totalPayedOut() returns (uint payout) {\r\n        for(uint i=0; i<lastCreditorPayedOut; i++){\r\n            payout += creditorAmounts[i];\r\n        }\r\n    }\r\n\r\n    // better don't do it (unless you want to increase the jackpot)\r\n    function raiseJackpot() payable {\r\n        jackpot += msg.value;\r\n    }\r\n\r\n    function getCreditorAddresses() returns (address[]) {\r\n        return creditorAddresses;\r\n    }\r\n\r\n    function getCreditorAmounts() returns (uint[]) {\r\n        return creditorAmounts;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lastCreditorPayedOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTimeOfNewCredit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"totalPayedOut\",\"outputs\":[{\"name\":\"payout\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getCreditorAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"raiseJackpot\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creditorAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getCreditorAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creditorAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"name\":\"debt\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"MumsTheWord","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c0474c3ff52ffe1a9c1db2046deeb2a83199379047a0c35ef728d6191a5dca03"}]}