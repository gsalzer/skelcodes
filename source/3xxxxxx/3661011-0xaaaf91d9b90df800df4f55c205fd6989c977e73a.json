{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.4;\r\n\r\n// Copyright 2017 Alchemy Limited LLC, Do not distribute\r\n\r\ncontract Constants {\r\n    uint DECIMALS = 8;\r\n}\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    address newOwner;\r\n\r\n    function changeOwner(address _newOwner) onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() {\r\n        if (msg.sender == newOwner) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n//from Zeppelin\r\ncontract SafeMath {\r\n    function safeMul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n\r\n    function assert(bool assertion) internal {\r\n        if (!assertion) throw;\r\n    }\r\n}\r\n\r\n\r\n\r\n//Copyright 2017 Alchemy Limited LLC DO not distribute\r\n//ERC20 token\r\n\r\ncontract Token is SafeMath, Owned, Constants {\r\n    uint public currentSupply;\r\n    uint public remainingOwner;\r\n    uint public remainingAuctionable;\r\n    uint public ownerTokensFreeDay;\r\n    bool public launched = false;\r\n\r\n    bool public remaindersSet = false;\r\n    bool public mintingDone = false;\r\n\r\n    address public controller;\r\n\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n\r\n    modifier onlyController() {\r\n        if (msg.sender != controller) throw;\r\n        _;\r\n    }\r\n\r\n    modifier isLaunched() {\r\n        assert(launched == true);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPayloadSize(uint numwords) {\r\n        assert(msg.data.length == numwords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n    function Token() {\r\n        owner = msg.sender;\r\n        name = \"Monolith TKN\";\r\n        decimals = uint8(DECIMALS);\r\n        symbol = \"TKN\";\r\n    }\r\n\r\n    function Launch() onlyOwner {\r\n        launched = true;\r\n    }\r\n\r\n    function setOwnerFreeDay(uint day) onlyOwner {\r\n        if (ownerTokensFreeDay != 0) throw;\r\n\r\n        ownerTokensFreeDay = day;\r\n    }\r\n\r\n    function totalSupply() constant returns(uint) {\r\n        return currentSupply + remainingOwner;\r\n    }\r\n\r\n    function setRemainders(uint _remainingOwner, uint _remainingAuctionable) onlyOwner {\r\n        if (remaindersSet) { throw; }\r\n\r\n        remainingOwner = _remainingOwner;\r\n        remainingAuctionable = _remainingAuctionable;\r\n    }\r\n\r\n    function finalizeRemainders() onlyOwner {\r\n        remaindersSet = true;\r\n    }\r\n\r\n    function setController(address _controller) onlyOwner {\r\n        controller = _controller;\r\n    }\r\n\r\n    function claimOwnerSupply() onlyOwner {\r\n        if (now < ownerTokensFreeDay) throw;\r\n        if (remainingOwner == 0) throw;\r\n        if (!remaindersSet) throw; // must finalize remainders\r\n\r\n        balanceOf[owner] = safeAdd(balanceOf[owner], remainingOwner);\r\n        remainingOwner = 0;\r\n    }\r\n\r\n    function claimAuctionableTokens(uint amount) onlyController {\r\n        if (amount > remainingAuctionable) throw;\r\n\r\n        balanceOf[controller] = safeAdd(balanceOf[controller], amount);\r\n        currentSupply = safeAdd(currentSupply, amount);\r\n        remainingAuctionable = safeSub(remainingAuctionable,amount);\r\n\r\n        Transfer(0, controller, amount);\r\n    }\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    function mint(address addr, uint amount) onlyOwner onlyPayloadSize(2) {\r\n        if (mintingDone) throw;\r\n\r\n        balanceOf[addr] = safeAdd(balanceOf[addr], amount);\r\n\r\n        currentSupply = safeAdd(currentSupply, amount);\r\n\r\n        Transfer(0, addr, amount);\r\n    }\r\n\r\n\r\n    uint constant D160 = 0x0010000000000000000000000000000000000000000;\r\n\r\n    // We don't use safe math in this function\r\n    // because this will be called for the owner before the contract\r\n    // is published and we need to save gas.\r\n    function multiMint(uint[] data) onlyOwner {\r\n        if (mintingDone) throw;\r\n\r\n        uint supplyAdd;\r\n        for (uint i = 0; i < data.length; i++ ) {\r\n            address addr = address( data[i] & (D160-1) );\r\n            uint amount = data[i] / D160;\r\n\r\n            balanceOf[addr] += amount;\r\n            supplyAdd += amount;\r\n            Transfer(0, addr, amount);\r\n        }\r\n        currentSupply += supplyAdd;\r\n    }\r\n\r\n    function completeMinting() onlyOwner {\r\n        mintingDone = true;\r\n    }\r\n\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping (address => uint)) public allowance;\r\n\r\n    function transfer(address _to, uint _value) isLaunched notPaused\r\n    onlyPayloadSize(2)\r\n    returns (bool success) {\r\n        if (balanceOf[msg.sender] < _value) return false;\r\n        if (_to == 0x0) return false;\r\n\r\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\r\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value)  isLaunched notPaused\r\n    onlyPayloadSize(3)\r\n    returns (bool success) {\r\n        if (_to == 0x0) return false;\r\n        if (balanceOf[_from] < _value) return false;\r\n\r\n        var allowed = allowance[_from][msg.sender];\r\n        if (allowed < _value) return false;\r\n\r\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\r\n        balanceOf[_from] = safeSub(balanceOf[_from], _value);\r\n        allowance[_from][msg.sender] = safeSub(allowed, _value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint _value)\r\n    onlyPayloadSize(2)\r\n    returns (bool success) {\r\n        //require user to set to zero before resetting to nonzero\r\n        if ((_value != 0) && (allowance[msg.sender][_spender] != 0)) {\r\n            return false;\r\n        }\r\n\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function increaseApproval (address _spender, uint _addedValue)\r\n    onlyPayloadSize(2)\r\n    returns (bool success) {\r\n        uint oldValue = allowance[msg.sender][_spender];\r\n        allowance[msg.sender][_spender] = safeAdd(oldValue, _addedValue);\r\n        Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue)\r\n    onlyPayloadSize(2)\r\n    returns (bool success) {\r\n        uint oldValue = allowance[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowance[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowance[msg.sender][_spender] = safeSub(oldValue, _subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n    ///  its behalf, and then a function is triggered in the contract that is\r\n    ///  being approved, `_spender`. This allows users to use their tokens to\r\n    ///  interact with contracts in one function call instead of two\r\n    /// @param _spender The address of the contract able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the function call was successful\r\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\r\n    ) returns (bool success) {\r\n        if (!approve(_spender, _amount)) throw;\r\n\r\n        ApproveAndCallFallBack(_spender).receiveApproval(\r\n            msg.sender,\r\n            _amount,\r\n            this,\r\n            _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    //Holds accumulated dividend tokens other than TKN\r\n    TokenHolder public tokenholder;\r\n\r\n    //once locked, can no longer upgrade tokenholder\r\n    bool public lockedTokenHolder;\r\n\r\n    function lockTokenHolder() onlyOwner {\r\n        lockedTokenHolder = true;\r\n    }\r\n\r\n    function setTokenHolder(address _th) onlyOwner {\r\n        if (lockedTokenHolder) throw;\r\n        tokenholder = TokenHolder(_th);\r\n    }\r\n\r\n    function burn(uint _amount) notPaused returns (bool result)  {\r\n        if (_amount > balanceOf[msg.sender]) return false;\r\n\r\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _amount);\r\n        currentSupply  = safeSub(currentSupply, _amount);\r\n        result = tokenholder.burn(msg.sender, _amount);\r\n        if (!result) throw;\r\n        Transfer(msg.sender, 0, _amount);\r\n    }\r\n\r\n    // Peterson's Law Protection\r\n    event logTokenTransfer(address token, address to, uint amount);\r\n\r\n    function claimTokens(address _token) onlyOwner {\r\n        if (_token == 0x0) {\r\n            owner.transfer(this.balance);\r\n            return;\r\n        }\r\n\r\n        Token token = Token(_token);\r\n        uint balance = token.balanceOf(this);\r\n        token.transfer(owner, balance);\r\n        logTokenTransfer(_token, owner, balance);\r\n    }\r\n\r\n    // Pause mechanism\r\n\r\n    bool public pausingMechanismLocked = false;\r\n    bool public paused = false;\r\n\r\n    modifier notPaused() {\r\n        if (paused) throw;\r\n        _;\r\n    }\r\n\r\n    function pause() onlyOwner {\r\n        if (pausingMechanismLocked) throw;\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() onlyOwner {\r\n        if (pausingMechanismLocked) throw;\r\n        paused = false;\r\n    }\r\n\r\n    function neverPauseAgain() onlyOwner {\r\n        pausingMechanismLocked = true;\r\n    }\r\n}\r\n\r\ncontract TokenHolder {\r\n    function burn(address , uint )\r\n    returns (bool result) {\r\n        return false;\r\n    }\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"Launch\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedTokenHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeRemainders\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockTokenHolder\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnerSupply\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"neverPauseAgain\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"launched\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"setOwnerFreeDay\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenholder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingDone\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pausingMechanismLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remaindersSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"multiMint\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"completeMinting\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerTokensFreeDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimAuctionableTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_remainingOwner\",\"type\":\"uint256\"},{\"name\":\"_remainingAuctionable\",\"type\":\"uint256\"}],\"name\":\"setRemainders\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingAuctionable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_th\",\"type\":\"address\"}],\"name\":\"setTokenHolder\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"logTokenTransfer\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3c9402d45721ff0f25b5d5033201e7af17c16f46e08626cf1b49286f9c1816ed"}]}