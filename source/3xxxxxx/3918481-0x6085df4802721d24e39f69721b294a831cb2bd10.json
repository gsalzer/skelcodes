{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/*\r\n\r\nTenX Buyer\r\n========================\r\n\r\nBuys TenX tokens from the crowdsale on your behalf.\r\nAuthor: /u/Cintix\r\n\r\n*/\r\n\r\n// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\r\n// Well, almost.  PAY tokens throw on transfer failure instead of returning false.\r\ncontract ERC20 {\r\n  function transfer(address _to, uint _value);\r\n  function balanceOf(address _owner) constant returns (uint balance);\r\n}\r\n\r\n// Interface to TenX ICO Contract\r\ncontract MainSale {\r\n  address public multisigVault;\r\n  uint public altDeposits;\r\n  function createTokens(address recipient) payable;\r\n}\r\n\r\ncontract TenXBuyer {\r\n  // Store the amount of ETH deposited by each account.\r\n  mapping (address => uint) public balances;\r\n  // Bounty for executing buy.\r\n  uint256 public bounty;\r\n  // Track whether the contract has bought the tokens yet.\r\n  bool public bought_tokens;\r\n  // Record the time the contract bought the tokens.\r\n  uint public time_bought;\r\n  \r\n  // Hard Cap of TenX Crowdsale\r\n  uint hardcap = 200000 ether;\r\n  // Ratio of PAY tokens received to ETH contributed (350 + 20% first-day bonus)\r\n  uint pay_per_eth = 420;\r\n  \r\n  // The TenX Token Sale address.\r\n  MainSale public sale = MainSale(0xd43D09Ec1bC5e57C8F3D0c64020d403b04c7f783);\r\n  // TenX PAY Token Contract address.\r\n  ERC20 public token = ERC20(0xB97048628DB6B661D4C2aA833e95Dbe1A905B280);\r\n  // The developer address.\r\n  address developer = 0x4e6A1c57CdBfd97e8efe831f8f4418b1F2A09e6e;\r\n  \r\n  // Withdraws all ETH deposited or PAY purchased by the sender.\r\n  function withdraw(){\r\n    // If called before the ICO, cancel caller's participation in the sale.\r\n    if (!bought_tokens) {\r\n      // Store the user's balance prior to withdrawal in a temporary variable.\r\n      uint eth_amount = balances[msg.sender];\r\n      // Update the user's balance prior to sending ETH to prevent recursive call.\r\n      balances[msg.sender] = 0;\r\n      // Return the user's funds.  Throws on failure to prevent loss of funds.\r\n      msg.sender.transfer(eth_amount);\r\n    }\r\n    // Withdraw the sender's tokens if the contract has already purchased them.\r\n    else {\r\n      // Store the user's PAY balance in a temporary variable (1 ETHWei -> 420 PAYWei).\r\n      uint pay_amount = balances[msg.sender] * pay_per_eth;\r\n      // Update the user's balance prior to sending PAY to prevent recursive call.\r\n      balances[msg.sender] = 0;\r\n      // No fee for withdrawing during the crowdsale.\r\n      uint fee = 0;\r\n      // Determine whether the crowdsale's hard cap has been reached yet.\r\n      bool cap_reached = (sale.multisigVault().balance + sale.altDeposits() > hardcap);\r\n      // 1% fee for withdrawing after the crowdsale has ended or after the bonus period.\r\n      if (cap_reached || (now > time_bought + 1 days)) {\r\n        fee = pay_amount / 100;\r\n      }\r\n      // Send the funds.  Throws on failure to prevent loss of funds.\r\n      token.transfer(msg.sender, pay_amount - fee);\r\n      token.transfer(developer, fee);\r\n    }\r\n  }\r\n  \r\n  // Allow anyone to contribute to the buy execution bounty.\r\n  function add_to_bounty() payable {\r\n    // Disallow adding to the bounty if contract has already bought the tokens.\r\n    if (bought_tokens) throw;\r\n    // Update bounty to include received amount.\r\n    bounty += msg.value;\r\n  }\r\n  \r\n  // Buys tokens in the crowdsale and rewards the caller, callable by anyone.\r\n  function buy(){\r\n    // Short circuit to save gas if the contract has already bought tokens.\r\n    if (bought_tokens) return;\r\n    // Record that the contract has bought the tokens.\r\n    bought_tokens = true;\r\n    // Record the time the contract bought the tokens.\r\n    time_bought = now;\r\n    // Transfer all the funds (less the bounty) to the TenX crowdsale contract\r\n    // to buy tokens.  Throws if the crowdsale hasn't started yet or has\r\n    // already completed, preventing loss of funds.\r\n    sale.createTokens.value(this.balance - bounty)(address(this));\r\n    // Send the caller their bounty for buying tokens for the contract.\r\n    msg.sender.transfer(bounty);\r\n  }\r\n  \r\n  // A helper function for the default function, allowing contracts to interact.\r\n  function default_helper() payable {\r\n    // Treat 0 ETH transactions as withdrawal requests.\r\n    if (msg.value == 0) {\r\n      withdraw();\r\n    }\r\n    // Otherwise, the user is sending funds to buy tokens.\r\n    else {\r\n      // Only allow deposits if the contract hasn't already purchased the tokens.\r\n      if (bought_tokens) throw;\r\n      // Update records of deposited ETH to include the received amount.\r\n      balances[msg.sender] += msg.value;\r\n    }\r\n  }\r\n  \r\n  function () payable {\r\n    default_helper();\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"default_helper\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"add_to_bounty\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bought_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"time_bought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"TenXBuyer","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://412e32f55ace77698e204bd9ea9ee60622fa47eba9ff83e90387e624326d18a8"}]}