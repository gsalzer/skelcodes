{"status":"1","message":"OK","result":[{"SourceCode":"contract BatLimitAsk{\r\n    address        owner;\r\n    uint    public pausedUntil;\r\n    uint    public BATsPerEth;// BAT/ETH\r\n    BAToken public bat;\r\n    function BatLimitAsk(){\r\n        owner = msg.sender;\r\n        bat = BAToken(0x0D8775F648430679A709E98d2b0Cb6250d2887EF);\r\n    }\r\n    \r\n    modifier onlyActive(){ if(pausedUntil < now){ _; }else{ throw; } }\r\n    \r\n    function () payable onlyActive{//buy some BAT (market bid)\r\n        if(!bat.transfer(msg.sender, (msg.value * BATsPerEth))){ throw; }\r\n    }\r\n\r\n    modifier onlyOwner(){ if(msg.sender == owner) _; }\r\n    \r\n    function changeRate(uint _BATsPerEth) onlyOwner{\r\n        pausedUntil = now + 10; //no new bids for 5 minutes (protects taker)\r\n        BATsPerEth = _BATsPerEth;\r\n    }\r\n\r\n    function withdrawETH() onlyOwner{\r\n        if(!msg.sender.send(this.balance)){ throw; }\r\n    }\r\n    function withdrawBAT(uint _amount) onlyOwner{\r\n        if(!bat.transfer(msg.sender, _amount)){ throw; }\r\n    }\r\n}//pending updates\r\n\r\n// BAT contract below\r\n// https://etherscan.io/address/0x0D8775F648430679A709E98d2b0Cb6250d2887EF#code\r\n\r\npragma solidity ^0.4.10;\r\n\r\n/* taking ideas from FirstBlood token */\r\ncontract SafeMath {\r\n\r\n    /* function assert(bool assertion) internal { */\r\n    /*   if (!assertion) { */\r\n    /*     throw; */\r\n    /*   } */\r\n    /* }      // assert no longer needed once solidity is on 0.4.10 */\r\n\r\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n}\r\n\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n/*  ERC 20 token */\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n      if (balances[msg.sender] >= _value && _value > 0) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\ncontract BAToken is StandardToken, SafeMath {\r\n\r\n    // metadata\r\n    string public constant name = \"Basic Attention Token\";\r\n    string public constant symbol = \"BAT\";\r\n    uint256 public constant decimals = 18;\r\n    string public version = \"1.0\";\r\n\r\n    // contracts\r\n    address public ethFundDeposit;      // deposit address for ETH for Brave International\r\n    address public batFundDeposit;      // deposit address for Brave International use and BAT User Fund\r\n\r\n    // crowdsale parameters\r\n    bool public isFinalized;              // switched to true in operational state\r\n    uint256 public fundingStartBlock;\r\n    uint256 public fundingEndBlock;\r\n    uint256 public constant batFund = 500 * (10**6) * 10**decimals;   // 500m BAT reserved for Brave Intl use\r\n    uint256 public constant tokenExchangeRate = 6400; // 6400 BAT tokens per 1 ETH\r\n    uint256 public constant tokenCreationCap =  1500 * (10**6) * 10**decimals;\r\n    uint256 public constant tokenCreationMin =  675 * (10**6) * 10**decimals;\r\n\r\n\r\n    // events\r\n    event LogRefund(address indexed _to, uint256 _value);\r\n    event CreateBAT(address indexed _to, uint256 _value);\r\n\r\n    // constructor\r\n    function BAToken(\r\n        address _ethFundDeposit,\r\n        address _batFundDeposit,\r\n        uint256 _fundingStartBlock,\r\n        uint256 _fundingEndBlock)\r\n    {\r\n      isFinalized = false;                   //controls pre through crowdsale state\r\n      ethFundDeposit = _ethFundDeposit;\r\n      batFundDeposit = _batFundDeposit;\r\n      fundingStartBlock = _fundingStartBlock;\r\n      fundingEndBlock = _fundingEndBlock;\r\n      totalSupply = batFund;\r\n      balances[batFundDeposit] = batFund;    // Deposit Brave Intl share\r\n      CreateBAT(batFundDeposit, batFund);  // logs Brave Intl fund\r\n    }\r\n\r\n    /// @dev Accepts ether and creates new BAT tokens.\r\n    function createTokens() payable external {\r\n      if (isFinalized) throw;\r\n      if (block.number < fundingStartBlock) throw;\r\n      if (block.number > fundingEndBlock) throw;\r\n      if (msg.value == 0) throw;\r\n\r\n      uint256 tokens = safeMult(msg.value, tokenExchangeRate); // check that we're not over totals\r\n      uint256 checkedSupply = safeAdd(totalSupply, tokens);\r\n\r\n      // return money if something goes wrong\r\n      if (tokenCreationCap < checkedSupply) throw;  // odd fractions won't be found\r\n\r\n      totalSupply = checkedSupply;\r\n      balances[msg.sender] += tokens;  // safeAdd not needed; bad semantics to use here\r\n      CreateBAT(msg.sender, tokens);  // logs token creation\r\n    }\r\n\r\n    /// @dev Ends the funding period and sends the ETH home\r\n    function finalize() external {\r\n      if (isFinalized) throw;\r\n      if (msg.sender != ethFundDeposit) throw; // locks finalize to the ultimate ETH owner\r\n      if(totalSupply < tokenCreationMin) throw;      // have to sell minimum to move to operational\r\n      if(block.number <= fundingEndBlock && totalSupply != tokenCreationCap) throw;\r\n      // move to operational\r\n      isFinalized = true;\r\n      if(!ethFundDeposit.send(this.balance)) throw;  // send the eth to Brave International\r\n    }\r\n\r\n    /// @dev Allows contributors to recover their ether in the case of a failed funding campaign.\r\n    function refund() external {\r\n      if(isFinalized) throw;                       // prevents refund if operational\r\n      if (block.number <= fundingEndBlock) throw; // prevents refund until sale period is over\r\n      if(totalSupply >= tokenCreationMin) throw;  // no refunds if we sold enough\r\n      if(msg.sender == batFundDeposit) throw;    // Brave Intl not entitled to a refund\r\n      uint256 batVal = balances[msg.sender];\r\n      if (batVal == 0) throw;\r\n      balances[msg.sender] = 0;\r\n      totalSupply = safeSubtract(totalSupply, batVal); // extra safe\r\n      uint256 ethVal = batVal / tokenExchangeRate;     // should be safe; previous throws covers edges\r\n      LogRefund(msg.sender, ethVal);               // log it \r\n      if (!msg.sender.send(ethVal)) throw;       // if you're using a contract; make sure it works with .send gas limits\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_BATsPerEth\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBAT\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BATsPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pausedUntil\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bat\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"BatLimitAsk","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d643a8545fc1908f3ffc2feb0577d6fb818ecf46adf7fca3294a6a2c1f603b68"}]}