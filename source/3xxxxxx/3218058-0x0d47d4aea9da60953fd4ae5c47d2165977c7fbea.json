{"status":"1","message":"OK","result":[{"SourceCode":"/// @title The main smart contract for Etherprises LLC, Delaware, U.S. (c)2017 Etherprises LLC\r\n/// @author Ville Sundell <contact@etherprises.com>\r\n// This source code is available at https://etherscan.io/address/0x0d47d4aea9da60953fd4ae5c47d2165977c7fbea\r\n// This code (and only this source code, not storage data nor other information/data) is released under CC-0.\r\n// More source regarding Etherprises LLC can be found at: https://github.com/Etherprises\r\n// The legal prose amending the contract between your series and Etherprises LLC is defined in prose() as a string array\r\n\r\npragma solidity ^0.4.9;\r\n\r\n//This is the main contract, this handles series creation and renewal:\r\ncontract EtherprisesLLC {\r\n    //This factory will create the series smart contract:\r\n    address public seriesFactory;\r\n    //This is the address of the only member or the series organization:\r\n    address public generalManager;\r\n    //List of series addresses, this is the main index:\r\n    address[] public series;\r\n    //Listing amendments as a legal prose, starting from 0:\r\n    string[] public prose;\r\n    //This map makes routing funds to user's latest series easy and fast:\r\n    mapping (address => address) public latestSeriesForUser;\r\n    //Series' expiring date is specified here as UNIX timestamp:\r\n    mapping (address => uint) public expiresAt;\r\n    //This maps series' name to an address\r\n    mapping (bytes32 => address) public seriesByName;\r\n    //This maps series' address to a name\r\n    mapping (address => bytes32) public seriesByAddress;\r\n    \r\n    //Events for external monitoring:\r\n    event AmendmentAdded (string newAmendment);\r\n    event FeePaid (address which);\r\n    event ManagerSet(address newManager);\r\n    event FactorySet(address newFactory);\r\n    event DepositMade(address where, uint amount);\r\n    event SeriesCreated(address addr, uint id);\r\n    \r\n    /// @dev This is the initialization function, here we just mark\r\n    /// ourselves as the General Manager for this series organization.\r\n    function EtherprisesLLC() {\r\n        generalManager = msg.sender;\r\n    }\r\n    \r\n    /// @dev This modifier is used to check if the user is the GM.\r\n    modifier ifGeneralManager {\r\n        if (msg.sender != generalManager)\r\n            throw;\r\n\r\n        _;\r\n    }\r\n    \r\n    /// @dev This modifier is used to check is the caller a series.\r\n    modifier ifSeries {\r\n        if (expiresAt[msg.sender] == 0)\r\n            throw;\r\n\r\n        _;\r\n    }\r\n    \r\n    /// @dev Withdrawal happens here from Etherprises LLC to the GM.\r\n    /// For bookkeeping and tax reasons we only want GM to withdraw.\r\n    function withdraw() ifGeneralManager {\r\n        generalManager.send(this.balance);\r\n    }\r\n    \r\n    /// @dev This checks if the series is expired. This is meant to be\r\n    /// called inside the series, and terminate the series if expired.\r\n    /// @param addr Address of the series we want to check\r\n    /// @return TRUE if series is expired, FALSE otherwise\r\n    function isExpired(address addr) constant returns (bool) {\r\n        if (expiresAt[addr] > now)\r\n            return false;\r\n        else\r\n            return true;\r\n    }\r\n    \r\n    /// @dev Amending rules of the organization, only those rules which\r\n    /// were present upon creation of the Series, apply to the Series.\r\n    /// @param newAmendment String containing new amendment. Remember to\r\n    /// prefix it with the date\r\n    function addAmendment(string newAmendment) ifGeneralManager {\r\n        // Only GM can amend the rules.\r\n        // Series obey only the rules which are set when series is created\r\n        prose.push(newAmendment);\r\n        \r\n        AmendmentAdded(newAmendment);\r\n    }\r\n    \r\n    /// @dev This function pays the yearly fee of 1 ETH.\r\n    /// @return Boolean TRUE, if everything was successful\r\n    function payFee() ifSeries payable returns (bool) {\r\n        // Receiving fee of one ETH here\r\n        if (msg.value != 1 ether)\r\n            throw;\r\n            \r\n        expiresAt[msg.sender] += 1 years;\r\n        \r\n        FeePaid(msg.sender);\r\n        return true;\r\n    }\r\n    \r\n    /// @dev Sets the general manager for the main organization.\r\n    /// There is just one member for Etherprises LLC, which is the GM.\r\n    /// @param newManger Address of the new manager\r\n    function setManager(address newManger) ifGeneralManager {\r\n        generalManager = newManger;\r\n        \r\n        ManagerSet(newManger);\r\n    }\r\n    \r\n    /// @dev This sets the factory proxy contract, which uses the factory.\r\n    /// @param newFactory Address of the new factory proxy\r\n    function setFactory(address newFactory) ifGeneralManager {\r\n        seriesFactory = newFactory;\r\n        \r\n        FactorySet(newFactory);\r\n    }\r\n    \r\n    /// @dev This creates a new series, called also from the fallback\r\n    /// with default values.\r\n    /// @notice This will create new series. Specify the name here: \r\n    /// This is the only place to define a name, the name is immutable.\r\n    /// Please note, that the name must start with an alpha character\r\n    /// (despite otherwise being UTF-8).\r\n    /// Throws an exception if the name does not technically pass the tests.\r\n    /// @param name Name of the series, must start with A-Z, and for the\r\n    /// hash table the search key will exclude all other characters\r\n    /// except A-Z. Full Unicode is supported, though\r\n    /// @param shares Amount of shares, by default this is immutable\r\n    /// @param industry Setting industry may have legal implications,\r\n    /// i.e taxation\r\n    /// @param symbol Symbol of the traded token\r\n    /// @return seriesAddress Address of the newly created series contract\r\n    /// @return seriesId Internal incremental ID number for the series\r\n    function createSeries(\r\n        bytes name,\r\n        uint shares,\r\n        string industry,\r\n        string symbol,\r\n        address extraContract\r\n    ) payable returns (\r\n        address seriesAddress,\r\n        uint seriesId\r\n    ) {\r\n        seriesId = series.length;\r\n        \r\n        var(latestAddress, latestName) = SeriesFactory(seriesFactory).createSeries.value(msg.value)(seriesId, name, shares, industry, symbol, msg.sender, extraContract);\r\n        if (latestAddress == 0)\r\n            throw;\r\n\r\n        if (latestName > 0)\r\n            if (seriesByName[latestName] == 0)\r\n                seriesByName[latestName] = latestAddress;\r\n            else\r\n                throw;\r\n\r\n        series.push(latestAddress);\r\n        expiresAt[latestAddress] = now + 1 years;\r\n        latestSeriesForUser[msg.sender] = latestAddress;\r\n        seriesByAddress[latestAddress] = latestName;\r\n        \r\n        SeriesCreated(latestAddress, seriesId);\r\n        return (latestAddress, seriesId);\r\n    }\r\n    \r\n    /// @dev This is here for Registrar ABI support.\r\n    /// @param _name Name of the series we want to search, please note\r\n    /// this is only the search key and not full name\r\n    /// @return Address of the series we want to get\r\n    function addr(bytes32 _name) constant returns(address o_address) {\r\n        return seriesByName[_name];\r\n    }\r\n    \r\n    /// @dev This is here for Registrar ABI support: return the search key\r\n    /// for a contract.\r\n    /// @param _owner Name of the series we want to search, please note\r\n    /// this is only the search key and not full name\r\n    /// @return Name of the series we want to get\r\n    function name(address _owner) constant returns(bytes32 o_name){\r\n        return seriesByAddress[_owner];\r\n    }\r\n    \r\n    /// @dev Here the fallback function either creates a new series,\r\n    /// or transfers funds to existing one.\r\n    function () payable {\r\n        if (msg.data.length > 0) {\r\n            createSeries(msg.data, 0, \"\", \"\", 0x0);\r\n        } else if (latestSeriesForUser[msg.sender] != 0) {\r\n            //This is important to implement as call so we can forward gas\r\n            if (latestSeriesForUser[msg.sender].call.value(msg.value)())\r\n                DepositMade(latestSeriesForUser[msg.sender], msg.value);\r\n        } else {\r\n            createSeries(\"\", 0, \"\", \"\", 0x0);\r\n        }\r\n    }\r\n}\r\n\r\n//This is a placeholder contract: In real life the main contract invokes\r\n//a proxy, which in turn invokes the actual SeriesFactory\r\n//The main contract for Etherprises LLC is above this one.\r\ncontract SeriesFactory {\r\n    address public seriesFactory;\r\n    address public owner;\r\n\r\n    function createSeries (\r\n        uint seriesId,\r\n        bytes name,\r\n        uint shares,\r\n        string industry,\r\n        string symbol,\r\n        address manager,\r\n        address extraContract\r\n    ) payable returns (\r\n        address addr,\r\n        bytes32 newName\r\n    ) {\r\n        address newSeries;\r\n        bytes32 _newName;\r\n\r\n        return (newSeries, _newName);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes\"},{\"name\":\"shares\",\"type\":\"uint256\"},{\"name\":\"industry\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"extraContract\",\"type\":\"address\"}],\"name\":\"createSeries\",\"outputs\":[{\"name\":\"seriesAddress\",\"type\":\"address\"},{\"name\":\"seriesId\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"name\",\"outputs\":[{\"name\":\"o_name\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"seriesByName\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seriesFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestSeriesForUser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"name\":\"o_address\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"generalManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAmendment\",\"type\":\"string\"}],\"name\":\"addAmendment\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"seriesByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"expiresAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isExpired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newManger\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"series\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prose\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAmendment\",\"type\":\"string\"}],\"name\":\"AmendmentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"which\",\"type\":\"address\"}],\"name\":\"FeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"FactorySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"where\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"SeriesCreated\",\"type\":\"event\"}]","ContractName":"EtherprisesLLC","CompilerVersion":"v0.4.9+commit.364da425","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b4b2b93b3d94b7b155c2bbb27748afd198339807fabd7520170431dfdd33c3b8"}]}