{"status":"1","message":"OK","result":[{"SourceCode":"library ArrayLib {\r\n  // Inserts to keep array sorted (assumes input array is sorted)\r\n\tfunction insertInPlace(uint8[] storage self, uint8 n) {\r\n\t\tuint8 insertingIndex = 0;\r\n\r\n\t\twhile (self.length > 0 && insertingIndex < self.length && self[insertingIndex] < n) {\r\n\t\t\tinsertingIndex += 1;\r\n\t\t}\r\n\r\n\t\tself.length += 1;\r\n\t\tfor (uint8 i = uint8(self.length) - 1; i > insertingIndex; i--) {\r\n\t\t\tself[i] = self[i - 1];\r\n\t\t}\r\n\r\n\t\tself[insertingIndex] = n;\r\n\t}\r\n}\r\n\r\n// Cards are represented as an integer\r\n// Suit = c / 13 (0 = clubs, 1 = diamonds, 2 = hearts, 3 = spades)\r\n// Number = c % 13 [0...12] 0 being Ace and 12 being King\r\n\r\nlibrary DeckLib {\r\n\tusing ArrayLib for uint8[];\r\n\r\n\tenum Suit { Spades, Hearts, Clubs, Diamonds }\r\n\tuint8 constant cardsPerSuit = 13;\r\n\tuint8 constant suits = 4;\r\n\tuint8 constant totalCards = cardsPerSuit * suits;\r\n\r\n\tstruct Deck {\r\n\t\tuint8[] usedCards; // always has to be sorted\r\n\t\taddress player;\r\n\t\tuint256 gameID;\r\n\t}\r\n\r\n\tfunction init(Deck storage self, uint256 gameID)  {\r\n\t\tself.usedCards = new uint8[](0);\r\n\t\tself.player = msg.sender;\r\n\t\tself.gameID = gameID;\r\n\t}\r\n\r\n\tfunction getCard(Deck storage self, uint256 blockNumber)  returns (uint8)  {\r\n\t\tuint cardIndex = self.usedCards.length;\r\n\t\tif (cardIndex >= totalCards) throw;\r\n\t\tuint8 r = uint8(getRandomNumber(blockNumber, self.player, self.gameID, cardIndex, totalCards - cardIndex));\r\n\r\n\t\tfor (uint8 i = 0; i < cardIndex; i++) {\r\n\t\t\tif (self.usedCards[i] <= r) r += 1;\r\n\t\t}\r\n\r\n\t\tself.usedCards.insertInPlace(r);\r\n\r\n\t\treturn r;\r\n\t}\r\n\r\n\tfunction cardDescription(uint8 self) constant returns (Suit, uint8) {\r\n\t\treturn (Suit(self / cardsPerSuit), cardFacevalue(self));\r\n\t}\r\n\r\n\tfunction cardEmojified(uint8 self) constant returns (uint8, string) {\r\n\t\tstring memory emojiSuit;\r\n\r\n\t\tvar (suit, number) = cardDescription(self);\r\n\t\tif (suit == Suit.Clubs) emojiSuit = \"♣️\";\r\n\t\telse if (suit == Suit.Diamonds) emojiSuit = \"♦️\";\r\n\t\telse if (suit == Suit.Hearts) emojiSuit = \"♥️\";\r\n\t\telse if (suit == Suit.Spades) emojiSuit = \"♠️\";\r\n\r\n\t\treturn (number, emojiSuit);\r\n\t}\r\n\r\n\tfunction cardFacevalue(uint8 self) constant returns (uint8) {\r\n\t\treturn 1 + self % cardsPerSuit;\r\n\t}\r\n\r\n\tfunction blackjackValue(uint8 self) constant returns (uint8) {\r\n\t\tuint8 cardValue = cardFacevalue(self);\r\n\t\treturn cardValue < 10 ? cardValue : 10;\r\n\t}\r\n\r\n\tfunction getRandomNumber(uint b, address player, uint256 gameID, uint n, uint m) constant returns (uint) {\r\n\t\t// Uses blockhash as randomness source.\r\n\t\t// Credits: https://github.com/Bunjin/Rouleth/blob/master/Provably_Fair_No_Cheating.md\r\n\t\tbytes32 blockHash = block.blockhash(b);\r\n\t\tif (blockHash == 0x0) throw;\r\n\t\treturn uint(uint256(keccak256(blockHash, player, gameID, n)) % m);\r\n\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"uint8\"}],\"name\":\"cardEmojified\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"DeckLib.Deck storage\"},{\"name\":\"gameID\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"uint8\"}],\"name\":\"cardDescription\",\"outputs\":[{\"name\":\"\",\"type\":\"DeckLib.Suit\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"DeckLib.Deck storage\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getCard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"uint8\"}],\"name\":\"cardFacevalue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"uint8\"}],\"name\":\"blackjackValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"b\",\"type\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"gameID\",\"type\":\"uint256\"},{\"name\":\"n\",\"type\":\"uint256\"},{\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"getRandomNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"}]","ContractName":"DeckLib","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"ArrayLib:beac5df5f1c56f949852c8589314036042c1d603","SwarmSource":"bzzr://45c6310665cadd8c10cdd7e51efdd3cabc62ebe3fbfda189e2ef936d63128191"}]}