{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\n\r\ncontract VoteFactory {\r\n    address public owner;\r\n    uint public numPolls;\r\n    uint public nextEndTime;\r\n    Vote public yesContract;\r\n    Vote public noContract;\r\n    mapping(uint => string) public voteDescription;\r\n    mapping(address => mapping(uint => bool)) public hasVoted;\r\n    mapping(uint => uint) public numVoters; // number of voters per round\r\n    mapping(uint => mapping(uint => address)) public voter; // [voteId][voterNumber] => address\r\n    mapping(uint => uint) public yesCount; // number of yes for a given round\r\n    mapping(uint => uint) public noCount;\r\n    \r\n    event transferredOwner(address newOwner);\r\n    event startedNewVote(address initiator, uint duration, string description, uint voteId);\r\n    event voted(address voter, bool isYes);\r\n    \r\n    modifier onlyOwner {\r\n        if (msg.sender != owner)\r\n            throw;\r\n        _;\r\n    }\r\n    \r\n    function transferOwner(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n        transferredOwner(newOwner);\r\n    }\r\n\r\n    function payOut() onlyOwner {\r\n        // just in case we accumulate a balance here, we have to be able to retrieve it\r\n        owner.send(this.balance);\r\n    }\r\n    \r\n    function VoteFactory() {\r\n        owner = msg.sender;\r\n        // constructor deploys yes and no contract\r\n        yesContract = new Vote();\r\n        noContract = new Vote();\r\n    }\r\n\r\n    function() payable {\r\n        // default function starts new poll if previous poll is over for at least 10 minutes\r\n        if (nextEndTime < now + 10 minutes)\r\n            startNewVote(10 minutes, \"Vote on tax reimbursements\");\r\n    }\r\n    \r\n    function newVote(uint duration, string description) onlyOwner {\r\n        // only admin is able to start vote with arbitrary duration\r\n        startNewVote(duration, description);\r\n    }\r\n    \r\n    function startNewVote(uint duration, string description) internal {\r\n        // do not allow to start new vote if there's still something ongoing\r\n        if (now <= nextEndTime)\r\n            throw;\r\n        nextEndTime = now + duration;\r\n        voteDescription[numPolls] = description;\r\n        startedNewVote(msg.sender, duration, description, ++numPolls);\r\n    }\r\n    \r\n    function vote(bool isYes, address voteSender) {\r\n        \r\n        // voting should just be able via voting contract (use them as SWIS contracts)\r\n        if (msg.sender != address(yesContract) && msg.sender != address(noContract))\r\n            throw;\r\n\r\n        // throw if time is over\r\n        if (now > nextEndTime)\r\n            throw;\r\n            \r\n        // throw if sender has already voted before\r\n        if (hasVoted[voteSender][numPolls])\r\n            throw;\r\n        \r\n        hasVoted[voteSender][numPolls] = true;\r\n        voter[numPolls][numVoters[numPolls]++] = voteSender;\r\n        \r\n        if (isYes)\r\n            yesCount[numPolls]++;\r\n        else\r\n            noCount[numPolls]++;\r\n\r\n        voted(voteSender, isYes);\r\n    }\r\n}\r\n\r\ncontract Vote {\r\n    VoteFactory public myVoteFactory;\r\n\r\n    function Vote() {\r\n        // constructor expects to be called by VoteFactory contract\r\n        myVoteFactory = VoteFactory(msg.sender);\r\n    }\r\n    \r\n    function () payable {\r\n        // make payable so that wallets that cannot send tx with 0 Wei still work\r\n        myVoteFactory.vote(this == myVoteFactory.yesContract(), msg.sender);\r\n    }\r\n\r\n    function payOut() {\r\n        // just to collect accidentally accumulated funds\r\n        msg.sender.send(this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteDescription\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasVoted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"description\",\"type\":\"string\"}],\"name\":\"newVote\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isYes\",\"type\":\"bool\"},{\"name\":\"voteSender\",\"type\":\"address\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numPolls\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numVoters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"noContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"noCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payOut\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yesContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferredOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"voteId\",\"type\":\"uint256\"}],\"name\":\"startedNewVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isYes\",\"type\":\"bool\"}],\"name\":\"voted\",\"type\":\"event\"}]","ContractName":"VoteFactory","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6567cf65a4f9746744920ef7dd9d8cc7ef1ba9beac12ce2e420452e0e2d4132b"}]}