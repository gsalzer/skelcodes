{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Custodial Smart Contract.  Copyright Â© 2017 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\npragma solidity ^0.4.10;\r\n\r\n/**\r\n * Custodial Smart Contract that that charges fee for keeping ether.\r\n */\r\ncontract Custodial {\r\n  uint256 constant TWO_128 = 0x100000000000000000000000000000000; // 2^128\r\n  uint256 constant TWO_127 = 0x80000000000000000000000000000000; // 2^127\r\n\r\n  /**\r\n   * Address of the client, i.e. owner of the ether kept by the contract.\r\n   */\r\n  address client;\r\n\r\n  /**\r\n   * Address of the advisor, i.e. the one who receives fee charged by the\r\n   * contract for keeping client's ether.\r\n   */\r\n  address advisor;\r\n\r\n  /**\r\n   * Capital, i.e. amount of client's ether (in Wei) kept by the contract.\r\n   */\r\n  uint256 capital;\r\n\r\n  /**\r\n   * Time when capital was last updated (in seconds since epoch).\r\n   */\r\n  uint256 capitalTimestamp;\r\n\r\n  /**\r\n   * Fee factor, the capital is multiplied by each second multiplied by 2^128.\r\n   * I.e. capital(t+1) = capital (t) * feeFactor / 2^128.\r\n   */\r\n  uint256 feeFactor;\r\n\r\n  /**\r\n   * Create new Custodial contract with given client address, advisor address\r\n   * and fee factor.\r\n   *\r\n   * @param _client client address\r\n   * @param _advisor advisor address\r\n   * @param _feeFactor fee factor\r\n   */\r\n  function Custodial (address _client, address _advisor, uint256 _feeFactor) {\r\n    if (_feeFactor > TWO_128)\r\n      throw; // Fee factor must be less then or equal to 2^128\r\n\r\n    client = _client;\r\n    advisor = _advisor;\r\n    feeFactor = _feeFactor;\r\n  }\r\n\r\n  /**\r\n   * Get client's capital (in Wei).\r\n   *\r\n   * @param _currentTime current time in seconds since epoch\r\n   * @return client's capital\r\n   */\r\n  function getCapital (uint256 _currentTime)\r\n  constant returns (uint256 _result) {\r\n    _result = capital;\r\n    if (capital > 0 && capitalTimestamp < _currentTime && feeFactor < TWO_128) {\r\n      _result = mul (_result, pow (feeFactor, _currentTime - capitalTimestamp));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deposit ether on the client's account.\r\n   */\r\n  function deposit () payable {\r\n    if (msg.value > 0) {\r\n      updateCapital ();\r\n      if (msg.value >= TWO_128 - capital)\r\n        throw; // Capital should never exceed 2^128 Wei\r\n      capital += msg.value;\r\n      Deposit (msg.sender, msg.value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Withdraw ether from client's account and sent it to the client's address.\r\n   * May only be called by client.\r\n   *\r\n   * @param _value value to withdraw (in Wei)\r\n   * @return true if ether was successfully withdrawn, false otherwise\r\n   */\r\n  function withdraw (uint256 _value)\r\n  returns (bool _success) {\r\n    if (msg.sender != client) throw;\r\n\r\n    if (_value > 0) {\r\n      updateCapital ();\r\n      if (_value <= capital) {\r\n        if (client.send (_value)) {\r\n          Withdrawal (_value);\r\n          capital -= _value;\r\n          return true;\r\n        } else return false;\r\n      } else return false;\r\n    } else return true;\r\n  }\r\n\r\n  /**\r\n   * Withdraw all ether from client's account and sent it to the client's\r\n   * address.  May only be called by client.\r\n   *\r\n   * @return true if ether was successfully withdrawn, false otherwise\r\n   */\r\n  function withdrawAll ()\r\n  returns (bool _success) {\r\n    if (msg.sender != client) throw;\r\n\r\n    updateCapital ();\r\n    if (capital > 0) {\r\n      if (client.send (capital)) {\r\n        Withdrawal (capital);\r\n        capital = 0;\r\n        return true;\r\n      } else return false;\r\n    } else return true;\r\n  }\r\n\r\n  /**\r\n   * Withdraw fee charged by the contract as well as all unaccounted ether on\r\n   * contract's balance and send it to the advisor's address.  May only be\r\n   * called by advisor.\r\n   *\r\n   * @return true if fee and unaccounted ether was successfully withdrawn,\r\n   *          false otherwise\r\n   */\r\n  function withdrawFee ()\r\n  returns (bool _success) {\r\n    if (msg.sender != advisor) throw;\r\n\r\n    uint256 _value = this.balance - getCapital (now);\r\n    if (_value > 0) {\r\n      return advisor.send (_value);\r\n    } else return true;\r\n  }\r\n\r\n  /**\r\n   * Terminate account and send all its balance to advisor.  May only be called\r\n   * by advisor when capital is zero.\r\n   */\r\n  function terminate () {\r\n    if (msg.sender != advisor) throw;\r\n\r\n    if (capital > 0) throw;\r\n    if (this.balance > 0) {\r\n      if (!advisor.send (this.balance)) {\r\n        // Ignore error\r\n      }\r\n    }\r\n    suicide (advisor);\r\n  }\r\n\r\n  /**\r\n   * Update capital, i.e. charge fee from it.\r\n   */\r\n  function updateCapital ()\r\n  internal {\r\n    if (capital > 0 && capitalTimestamp < now && feeFactor < TWO_128) {\r\n      capital = mul (capital, pow (feeFactor, now - capitalTimestamp));\r\n    }\r\n    capitalTimestamp = now;\r\n  }\r\n\r\n  /**\r\n   * Multiply _a by _b / 2^128.  Parameter _a should be less than or equal to\r\n   * 2^128 and parameter _b should be less than 2^128.\r\n   *\r\n   * @param _a left argument\r\n   * @param _b right argument\r\n   * @return _a * _b / 2^128\r\n   */\r\n  function mul (uint256 _a, uint256 _b)\r\n  internal constant returns (uint256 _result) {\r\n    if (_a > TWO_128) throw;\r\n    if (_b >= TWO_128) throw;\r\n    return (_a * _b + TWO_127) >> 128;\r\n  }\r\n\r\n  /**\r\n   * Calculate (_a / 2^128)^_b * 2^128.  Parameter _a should be less than 2^128.\r\n   *\r\n   * @param _a left argument\r\n   * @param _b right argument\r\n   * @return (_a / 2^128)^_b * 2^128\r\n   */\r\n  function pow (uint256 _a, uint256 _b)\r\n  internal constant returns (uint256 _result) {\r\n    if (_a >= TWO_128) throw;\r\n\r\n    _result = TWO_128;\r\n    while (_b > 0) {\r\n      if (_b & 1 == 0) {\r\n        _a = mul (_a, _a);\r\n        _b >>= 1;\r\n      } else {\r\n        _result = mul (_result, _a);\r\n        _b -= 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Logged when ether was deposited on client's account.\r\n   *\r\n   * @param from address ether came from\r\n   * @param value amount of ether deposited (in Wei)\r\n   */\r\n  event Deposit (address indexed from, uint256 value);\r\n\r\n  /**\r\n   * Logged when ether was withdrawn from client's account.\r\n   *\r\n   * @param value amount of ether withdrawn (in Wei)\r\n   */\r\n  event Withdrawal (uint256 value);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_currentTime\",\"type\":\"uint256\"}],\"name\":\"getCapital\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_client\",\"type\":\"address\"},{\"name\":\"_advisor\",\"type\":\"address\"},{\"name\":\"_feeFactor\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"}]","ContractName":"Custodial","CompilerVersion":"v0.4.10+commit.f0d539ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000189c2c1834b1414a6aee9eba5dc4b4d547c9a44c00000000000000000000000029fda6293f58f5ce95c1d29c61aa7c13962515c500000000000000000000000000000000fffffffea1d4ff153b562ddff55d22db","Library":"","SwarmSource":"bzzr://222c95f1a49e5cc867b0613bc9c82590d38fa3272ed7b6319f2afffc04b9b5ff"}]}