{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract ERC20 {\r\n\t//Sets functions and events to comply with ERC20\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\tevent Transfer(address indexed _from, address indexed _to, uint _value);\r\n\t\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining);\r\n\tfunction approve(address _spender, uint _value) returns (bool success);\r\n    function balanceOf(address _owner) constant returns (uint balance);\r\n    function transfer(address _to, uint _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool success);\r\n}\r\n\r\ncontract Owned {\r\n\t//Public variable\r\n    address public owner;\r\n\r\n\t//Sets contract creator as the owner\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\t\r\n\t//Sets onlyOwner modifier for specified functions\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n\t//Allows for transfer of contract ownership\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Token is ERC20, Owned {\r\n\t//Public variables\r\n\tstring public name; \r\n\tstring public symbol; \r\n\tuint8 public decimals; \r\n\tuint256 public totalSupply; \r\n\t\r\n\t//Creates arrays for balances\r\n    mapping (address => uint256) balance;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\t\r\n\tfunction Token(string tokenName, string tokenSymbol, uint8 decimalUnits, uint256 initialSupply) {\r\n\t\tname = tokenName; \r\n\t\tsymbol = tokenSymbol; \r\n\t\tdecimals = decimalUnits; \r\n\t\ttotalSupply = initialSupply; \r\n\t}\r\n\t\r\n\t//Provides the remaining balance of approved tokens from function approve \r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n\t//Allows for a certain amount of tokens to be spent on behalf of the account owner\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\t//Returns the account balance \r\n    function balanceOf(address _owner) constant returns (uint256 remainingBalance) {\r\n        return balance[_owner];\r\n    }\r\n\r\n\t//Sends tokens from sender's account\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balance[msg.sender] >= _value && balance[_to] + _value > balance[_to]) {\r\n            balance[msg.sender] -= _value;\r\n            balance[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { \r\n\t\t\treturn false; \r\n\t\t}\r\n    }\r\n\t\r\n\t//Transfers tokens an approved account \r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balance[_from] >= _value && allowed[_from][msg.sender] >= _value && balance[_to] + _value > balance[_to]) {\r\n            balance[_to] += _value;\r\n            balance[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { \r\n\t\t\treturn false; \r\n\t\t}\r\n    }\r\n}\r\n\r\ncontract Prether is Token {\r\n    //Public variables\r\n    string public constant name = \"PRETHER\";\r\n    string public constant symbol = \"PTH\"; \r\n    uint8 public constant decimals = 0; \r\n    uint256 public constant supply = 10000000; \r\n    \r\n\t//Initializes Prether as a Token\r\n\tfunction Prether()\r\n\t    Token(name, symbol, decimals, supply) {\r\n\t\t\tbalance[msg.sender] = supply;                                           \r\n    }\r\n\t\r\n\t//Prevents sending Ether to the contract\r\n\tfunction() {\r\n\t\tthrow; \r\n\t}\r\n\t\r\n\t//Allows contract owner to mint new tokens, prevents numerical overflow\r\n\tfunction mintToken(address target, uint256 mintedAmount) onlyOwner returns (bool success) {\r\n\t\tif ((totalSupply + mintedAmount) < totalSupply) {\r\n\t\t\tthrow; \r\n\t\t} else {\r\n\t\t\tbalance[target] += mintedAmount;\r\n\t\t\ttotalSupply += mintedAmount;\r\n\t\t\tTransfer(0, target, mintedAmount);\r\n\t\t\treturn true; \r\n\t\t}\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"remainingBalance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Prether","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1fd80779099a47d9da3e6bdcdcc9ada6d707d4184cb96c565370e4345e8d087b"}]}