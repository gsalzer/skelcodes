{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.6;\r\n\r\n/*\r\n  MiniMeToken contract taken from https://github.com/Giveth/minime/\r\n\r\n */\r\n\r\n\r\n/// @dev The token controller contract must implement these functions\r\ncontract TokenController {\r\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\r\n    /// @param _owner The address that sent the ether to create tokens\r\n    /// @return True if the ether is accepted, false if it throws\r\n    function proxyPayment(address _owner) payable returns(bool);\r\n\r\n    /// @notice Notifies the controller about a token transfer allowing the\r\n    ///  controller to react if desired\r\n    /// @param _from The origin of the transfer\r\n    /// @param _to The destination of the transfer\r\n    /// @param _amount The amount of the transfer\r\n    /// @return False if the controller does not authorize the transfer\r\n    function onTransfer(address _from, address _to, uint _amount) returns(bool);\r\n\r\n    /// @notice Notifies the controller about an approval allowing the\r\n    ///  controller to react if desired\r\n    /// @param _owner The address that calls `approve()`\r\n    /// @param _spender The spender in the `approve()` call\r\n    /// @param _amount The amount in the `approve()` call\r\n    /// @return False if the controller does not authorize the approval\r\n    function onApprove(address _owner, address _spender, uint _amount)\r\n        returns(bool);\r\n}\r\n\r\n// Minime interface\r\ncontract MiniMeToken {\r\n\r\n\r\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\r\n    /// @param _owner The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @return True if the tokens are generated correctly\r\n    function generateTokens(address _owner, uint _amount\r\n    ) returns (bool);\r\n\r\n\r\n}\r\n\r\n\r\n\r\n// Taken from Zeppelin's standard contracts.\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n\r\n  function transfer(address to, uint value) returns (bool ok);\r\n  function transferFrom(address from, address to, uint value) returns (bool ok);\r\n  function approve(address spender, uint value) returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract SWTConverter is TokenController {\r\n\r\n    MiniMeToken public tokenContract;   // The new token\r\n    ERC20 public arcToken;              // The ARC token address\r\n\r\n    function SWTConverter(\r\n        address _tokenAddress,          // the new MiniMe token address\r\n        address _arctokenaddress        // the original ARC token address\r\n    ) {\r\n        tokenContract = MiniMeToken(_tokenAddress); // The Deployed Token Contract\r\n        arcToken = ERC20(_arctokenaddress);\r\n    }\r\n\r\n/////////////////\r\n// TokenController interface\r\n/////////////////\r\n\r\n\r\n function proxyPayment(address _owner) payable returns(bool) {\r\n        return false;\r\n    }\r\n\r\n/// @notice Notifies the controller about a transfer, for this SWTConverter all\r\n///  transfers are allowed by default and no extra notifications are needed\r\n/// @param _from The origin of the transfer\r\n/// @param _to The destination of the transfer\r\n/// @param _amount The amount of the transfer\r\n/// @return False if the controller does not authorize the transfer\r\n    function onTransfer(address _from, address _to, uint _amount) returns(bool) {\r\n        return true;\r\n    }\r\n\r\n/// @notice Notifies the controller about an approval, for this SWTConverter all\r\n///  approvals are allowed by default and no extra notifications are needed\r\n/// @param _owner The address that calls `approve()`\r\n/// @param _spender The spender in the `approve()` call\r\n/// @param _amount The amount in the `approve()` call\r\n/// @return False if the controller does not authorize the approval\r\n    function onApprove(address _owner, address _spender, uint _amount)\r\n        returns(bool)\r\n    {\r\n        return true;\r\n    }\r\n\r\n\r\n/// @notice converts ARC tokens to new SWT tokens and forwards ARC to the vault address.\r\n/// @param _amount The amount of ARC to convert to SWT\r\n function convert(uint _amount){\r\n\r\n        // transfer ARC to the vault address. caller needs to have an allowance from\r\n        // this controller contract for _amount before calling this or the transferFrom will fail.\r\n        if (!arcToken.transferFrom(msg.sender, 0x0, _amount)) {\r\n            throw;\r\n        }\r\n\r\n        // mint new SWT tokens\r\n        if (!tokenContract.generateTokens(msg.sender, _amount)) {\r\n            throw;\r\n        }\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arcToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"proxyPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_arctokenaddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"}]","ContractName":"SWTConverter","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b9e7f8568e08d5659f5d29c4997173d84cdf2607000000000000000000000000ac709fcb44a43c35f0da4e3163b117a17f3770f5","Library":"","SwarmSource":"bzzr://91b98d70fbecbc662d0be0d5dd2243dab71234d09996a4e8e47f61ce4422a426"}]}