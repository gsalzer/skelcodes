{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n\r\nlibrary Deck {\r\n\t// returns random number from 0 to 51\r\n\t// let's say 'value' % 4 means suit (0 - Hearts, 1 - Spades, 2 - Diamonds, 3 - Clubs)\r\n\t//\t\t\t 'value' / 4 means: 0 - King, 1 - Ace, 2 - 10 - pip values, 11 - Jacket, 12 - Queen\r\n\r\n\tfunction deal(address player, uint8 cardNumber) internal returns (uint8) {\r\n\t\tuint b = block.number;\r\n\t\tuint timestamp = block.timestamp;\r\n\t\treturn uint8(uint256(keccak256(block.blockhash(b), player, cardNumber, timestamp)) % 52);\r\n\t}\r\n\r\n\tfunction valueOf(uint8 card, bool isBigAce) internal constant returns (uint8) {\r\n\t\tuint8 value = card / 4;\r\n\t\tif (value == 0 || value == 11 || value == 12) { // Face cards\r\n\t\t\treturn 10;\r\n\t\t}\r\n\t\tif (value == 1 && isBigAce) { // Ace is worth 11\r\n\t\t\treturn 11;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\tfunction isAce(uint8 card) internal constant returns (bool) {\r\n\t\treturn card / 4 == 1;\r\n\t}\r\n\r\n\tfunction isTen(uint8 card) internal constant returns (bool) {\r\n\t\treturn card / 4 == 10;\r\n\t}\r\n}\r\n\r\n\r\ncontract BlackJack {\r\n\tusing Deck for *;\r\n\r\n\tuint public minBet = 50 finney; // 0.05 eth\r\n\tuint public maxBet = 5 ether;\r\n\r\n\tuint8 BLACKJACK = 21;\r\n\r\n  enum GameState { Ongoing, Player, Tie, House }\r\n\r\n\tstruct Game {\r\n\t\taddress player; // address игрока\r\n\t\tuint bet; // стывка\r\n\r\n\t\tuint8[] houseCards; // карты диллера\r\n\t\tuint8[] playerCards; // карты игрока\r\n\r\n\t\tGameState state; // состояние\r\n\t\tuint8 cardsDealt;\r\n\t}\r\n\r\n\tmapping (address => Game) public games;\r\n\r\n\tmodifier gameIsGoingOn() {\r\n\t\tif (games[msg.sender].player == 0 || games[msg.sender].state != GameState.Ongoing) {\r\n\t\t\tthrow; // game doesn't exist or already finished\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\tevent Deal(\r\n        bool isUser,\r\n        uint8 _card\r\n    );\r\n\r\n    event GameStatus(\r\n    \tuint8 houseScore,\r\n    \tuint8 houseScoreBig,\r\n    \tuint8 playerScore,\r\n    \tuint8 playerScoreBig\r\n    );\r\n\r\n    event Log(\r\n    \tuint8 value\r\n    );\r\n\r\n\tfunction BlackJack() {\r\n\r\n\t}\r\n\r\n\tfunction () payable {\r\n\t\t\r\n\t}\r\n\r\n\t// starts a new game\r\n\tfunction deal() public payable {\r\n\t\tif (games[msg.sender].player != 0 && games[msg.sender].state == GameState.Ongoing) {\r\n\t\t\tthrow; // game is already going on\r\n\t\t}\r\n\r\n\t\tif (msg.value < minBet || msg.value > maxBet) {\r\n\t\t\tthrow; // incorrect bet\r\n\t\t}\r\n\r\n\t\tuint8[] memory houseCards = new uint8[](1);\r\n\t\tuint8[] memory playerCards = new uint8[](2);\r\n\r\n\t\t// deal the cards\r\n\t\tplayerCards[0] = Deck.deal(msg.sender, 0);\r\n\t\tDeal(true, playerCards[0]);\r\n\t\thouseCards[0] = Deck.deal(msg.sender, 1);\r\n\t\tDeal(false, houseCards[0]);\r\n\t\tplayerCards[1] = Deck.deal(msg.sender, 2);\r\n\t\tDeal(true, playerCards[1]);\r\n\r\n\t\tgames[msg.sender] = Game({\r\n\t\t\tplayer: msg.sender,\r\n\t\t\tbet: msg.value,\r\n\t\t\thouseCards: houseCards,\r\n\t\t\tplayerCards: playerCards,\r\n\t\t\tstate: GameState.Ongoing,\r\n\t\t\tcardsDealt: 3,\r\n\t\t});\r\n\r\n\t\tcheckGameResult(games[msg.sender], false);\r\n\t}\r\n\r\n\t// deals one more card to the player\r\n\tfunction hit() public gameIsGoingOn {\r\n\t\tuint8 nextCard = games[msg.sender].cardsDealt;\r\n\t\tgames[msg.sender].playerCards.push(Deck.deal(msg.sender, nextCard));\r\n\t\tgames[msg.sender].cardsDealt = nextCard + 1;\r\n\t\tDeal(true, games[msg.sender].playerCards[games[msg.sender].playerCards.length - 1]);\r\n\t\tcheckGameResult(games[msg.sender], false);\r\n\t}\r\n\r\n\t// finishes the game\r\n\tfunction stand() public gameIsGoingOn {\r\n\r\n\t\tvar (houseScore, houseScoreBig) = calculateScore(games[msg.sender].houseCards);\r\n\r\n\t\twhile (houseScoreBig < 17) {\r\n\t\t\tuint8 nextCard = games[msg.sender].cardsDealt;\r\n\t\t\tuint8 newCard = Deck.deal(msg.sender, nextCard);\r\n\t\t\tgames[msg.sender].houseCards.push(newCard);\r\n\t\t\tgames[msg.sender].cardsDealt = nextCard + 1;\r\n\t\t\thouseScoreBig += Deck.valueOf(newCard, true);\r\n\t\t\tDeal(false, newCard);\r\n\t\t}\r\n\r\n\t\tcheckGameResult(games[msg.sender], true);\r\n\t}\r\n\r\n\t// @param finishGame - whether to finish the game or not (in case of Blackjack the game finishes anyway)\r\n\tfunction checkGameResult(Game game, bool finishGame) private {\r\n\t\t// calculate house score\r\n\t\tvar (houseScore, houseScoreBig) = calculateScore(game.houseCards);\r\n\t\t// calculate player score\r\n\t\tvar (playerScore, playerScoreBig) = calculateScore(game.playerCards);\r\n\r\n\t\tGameStatus(houseScore, houseScoreBig, playerScore, playerScoreBig);\r\n\r\n\t\tif (houseScoreBig == BLACKJACK || houseScore == BLACKJACK) {\r\n\t\t\tif (playerScore == BLACKJACK || playerScoreBig == BLACKJACK) {\r\n\t\t\t\t// TIE\r\n\t\t\t\tif (!msg.sender.send(game.bet)) throw; // return bet to the player\r\n\t\t\t\tgames[msg.sender].state = GameState.Tie; // finish the game\r\n\t\t\t\treturn;\r\n\t\t\t} else {\r\n\t\t\t\t// HOUSE WON\r\n\t\t\t\tgames[msg.sender].state = GameState.House; // simply finish the game\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (playerScore == BLACKJACK || playerScoreBig == BLACKJACK) {\r\n\t\t\t\t// PLAYER WON\r\n\t\t\t\tif (game.playerCards.length == 2 && (Deck.isTen(game.playerCards[0]) || Deck.isTen(game.playerCards[1]))) {\r\n\t\t\t\t\t// Natural blackjack => return x2.5\r\n\t\t\t\t\tif (!msg.sender.send((game.bet * 5) / 2)) throw; // send prize to the player\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Usual blackjack => return x2\r\n\t\t\t\t\tif (!msg.sender.send(game.bet * 2)) throw; // send prize to the player\r\n\t\t\t\t}\r\n\t\t\t\tgames[msg.sender].state = GameState.Player; // finish the game\r\n\t\t\t\treturn;\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif (playerScore > BLACKJACK) {\r\n\t\t\t\t\t// BUST, HOUSE WON\r\n\t\t\t\t\tLog(1);\r\n\t\t\t\t\tgames[msg.sender].state = GameState.House; // finish the game\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!finishGame) {\r\n\t\t\t\t\treturn; // continue the game\r\n\t\t\t\t}\r\n\t\t\t\t\r\n                // недобор\r\n\t\t\t\tuint8 playerShortage = 0; \r\n\t\t\t\tuint8 houseShortage = 0;\r\n\r\n\t\t\t\t// player decided to finish the game\r\n\t\t\t\tif (playerScoreBig > BLACKJACK) {\r\n\t\t\t\t\tif (playerScore > BLACKJACK) {\r\n\t\t\t\t\t\t// HOUSE WON\r\n\t\t\t\t\t\tgames[msg.sender].state = GameState.House; // simply finish the game\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tplayerShortage = BLACKJACK - playerScore;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tplayerShortage = BLACKJACK - playerScoreBig;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (houseScoreBig > BLACKJACK) {\r\n\t\t\t\t\tif (houseScore > BLACKJACK) {\r\n\t\t\t\t\t\t// PLAYER WON\r\n\t\t\t\t\t\tif (!msg.sender.send(game.bet * 2)) throw; // send prize to the player\r\n\t\t\t\t\t\tgames[msg.sender].state = GameState.Player;\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\thouseShortage = BLACKJACK - houseScore;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\thouseShortage = BLACKJACK - houseScoreBig;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n                // ?????????????????????? почему игра заканчивается?\r\n\t\t\t\tif (houseShortage == playerShortage) {\r\n\t\t\t\t\t// TIE\r\n\t\t\t\t\tif (!msg.sender.send(game.bet)) throw; // return bet to the player\r\n\t\t\t\t\tgames[msg.sender].state = GameState.Tie;\r\n\t\t\t\t} else if (houseShortage > playerShortage) {\r\n\t\t\t\t\t// PLAYER WON\r\n\t\t\t\t\tif (!msg.sender.send(game.bet * 2)) throw; // send prize to the player\r\n\t\t\t\t\tgames[msg.sender].state = GameState.Player;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tgames[msg.sender].state = GameState.House;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction calculateScore(uint8[] cards) private constant returns (uint8, uint8) {\r\n\t\tuint8 score = 0;\r\n\t\tuint8 scoreBig = 0; // in case of Ace there could be 2 different scores\r\n\t\tbool bigAceUsed = false;\r\n\t\tfor (uint i = 0; i < cards.length; ++i) {\r\n\t\t\tuint8 card = cards[i];\r\n\t\t\tif (Deck.isAce(card) && !bigAceUsed) { // doesn't make sense to use the second Ace as 11, because it leads to the losing\r\n\t\t\t\tscoreBig += Deck.valueOf(card, true);\r\n\t\t\t\tbigAceUsed = true;\r\n\t\t\t} else {\r\n\t\t\t\tscoreBig += Deck.valueOf(card, false);\r\n\t\t\t}\r\n\t\t\tscore += Deck.valueOf(card, false);\r\n\t\t}\r\n\t\treturn (score, scoreBig);\r\n\t}\r\n\r\n\tfunction getPlayerCard(uint8 id) public gameIsGoingOn constant returns(uint8) {\r\n\t\tif (id < 0 || id > games[msg.sender].playerCards.length) {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\treturn games[msg.sender].playerCards[id];\r\n\t}\r\n\r\n\tfunction getHouseCard(uint8 id) public gameIsGoingOn constant returns(uint8) {\r\n\t\tif (id < 0 || id > games[msg.sender].houseCards.length) {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\treturn games[msg.sender].houseCards[id];\r\n\t}\r\n\r\n\tfunction getPlayerCardsNumber() public gameIsGoingOn constant returns(uint) {\r\n\t\treturn games[msg.sender].playerCards.length;\r\n\t}\r\n\r\n\tfunction getHouseCardsNumber() public gameIsGoingOn constant returns(uint) {\r\n\t\treturn games[msg.sender].houseCards.length;\r\n\t}\r\n\r\n\tfunction getGameState() public constant returns (uint8) {\r\n\t\tif (games[msg.sender].player == 0) {\r\n\t\t\tthrow; // game doesn't exist\r\n\t\t}\r\n\r\n\t\tGame game = games[msg.sender];\r\n\r\n\t\tif (game.state == GameState.Player) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\tif (game.state == GameState.House) {\r\n\t\t\treturn 2;\r\n\t\t}\r\n\t\tif (game.state == GameState.Tie) {\r\n\t\t\treturn 3;\r\n\t\t}\r\n\r\n\t\treturn 0; // the game is still going on\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"hit\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deal\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"bet\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"cardsDealt\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getHouseCard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHouseCardsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stand\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getPlayerCard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayerCardsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isUser\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_card\",\"type\":\"uint8\"}],\"name\":\"Deal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"houseScore\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"houseScoreBig\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"playerScore\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"playerScoreBig\",\"type\":\"uint8\"}],\"name\":\"GameStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"Log\",\"type\":\"event\"}]","ContractName":"BlackJack","CompilerVersion":"v0.4.9+commit.364da425","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://17bab81a63f3dd15d7fd247740054322fe82a1be6db767d9314518c66286e27e"}]}