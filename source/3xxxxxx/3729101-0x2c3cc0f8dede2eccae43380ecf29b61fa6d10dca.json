{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.6;\r\n/*\r\n    Copyright 2017, Vojtech Simetka\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/// @title Donation Doubler\r\n/// @authors Vojtech Simetka, Jordi Baylina, Dani Philia\r\n/// @notice This contract is used to double a donation to a Giveth Campaign as\r\n///  long as there is enough ether in this contract to do it. If not, the\r\n///  donated value is just sent directly to designated Campaign with any ether\r\n///  that may still be in this contract. The `msg.sender` doubling their\r\n///  donation will receive twice the expected Campaign tokens and the Donor that\r\n///  deposited the inital funds will not receive any donation tokens. \r\n///  WARNING: This contract only works for ether. A token based contract will be\r\n///  developed in the future. Any tokens sent to this contract will be lost.\r\n///  Next Version: Upgrade the EscapeHatch to be able to remove tokens.\r\n\r\n\r\n/// @dev `Owned` is a base level contract that assigns an `owner` that can be\r\n///  later changed\r\n\r\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\r\n\r\n// Licensed under the Apache License, Version 2.0 (the \"License\").\r\n// You may not use this file except in compliance with the License.\r\n\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND (express or implied).\r\n// \r\n// Thank you to @zandy and the Dappsys team for writing this beautiful library\r\n// Their math.sol was modified to remove and rename functions and add many\r\n// comments for clarification.\r\n// See their original library here: https://github.com/dapphub/ds-math\r\n//\r\n// Also the OpenZepplin team deserves gratitude and recognition for making\r\n// their own beautiful library which has been very well utilized in solidity\r\n// contracts across the Ethereum ecosystem and we used their max64(), min64(),\r\n// multiply(), and divide() functions. See their library here:\r\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/SafeMath.sol\r\n\r\npragma solidity ^0.4.6;\r\n\r\ncontract SafeMath {\r\n\r\n    // ensure that the result of adding x and y is accurate \r\n    function add(uint x, uint y) internal constant returns (uint z) {\r\n        assert( (z = x + y) >= x);\r\n    }\r\n \r\n    // ensure that the result of subtracting y from x is accurate \r\n    function subtract(uint x, uint y) internal constant returns (uint z) {\r\n        assert( (z = x - y) <= x);\r\n    }\r\n\r\n    // ensure that the result of multiplying x and y is accurate \r\n    function multiply(uint x, uint y) internal constant returns (uint z) {\r\n        z = x * y;\r\n        assert(x == 0 || z / x == y);\r\n        return z;\r\n    }\r\n\r\n    // ensure that the result of dividing x and y is accurate\r\n    // note: Solidity now throws on division by zero, so a check is not needed\r\n    function divide(uint x, uint y) internal constant returns (uint z) {\r\n        z = x / y;\r\n        assert(x == ( (y * z) + (x % y) ));\r\n        return z;\r\n    }\r\n    \r\n    // return the lowest of two 64 bit integers\r\n    function min64(uint64 x, uint64 y) internal constant returns (uint64) {\r\n      return x < y ? x: y;\r\n    }\r\n    \r\n    // return the largest of two 64 bit integers\r\n    function max64(uint64 x, uint64 y) internal constant returns (uint64) {\r\n      return x >= y ? x : y;\r\n    }\r\n\r\n    // return the lowest of two values\r\n    function min(uint x, uint y) internal constant returns (uint) {\r\n        return (x <= y) ? x : y;\r\n    }\r\n\r\n    // return the largest of two values\r\n    function max(uint x, uint y) internal constant returns (uint) {\r\n        return (x >= y) ? x : y;\r\n    }\r\n\r\n    function assert(bool assertion) internal {\r\n        if (!assertion) {\r\n            throw;\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract Owned {\r\n    /// @dev `owner` is the only address that can call a function with this\r\n    /// modifier; the function body is inserted where the special symbol\r\n    /// \"_;\" in the definition of a modifier appears.\r\n    modifier onlyOwner { if (msg.sender != owner) throw; _; }\r\n\r\n    address public owner;\r\n\r\n    /// @notice The Constructor assigns the message sender to be `owner`\r\n    function Owned() { owner = msg.sender;}\r\n\r\n    /// @notice `owner` can step down and assign some other address to this role\r\n    /// @param _newOwner The address of the new owner. 0x0 can be used to create\r\n    ///  an unowned neutral vault, however that cannot be undone\r\n    function changeOwner(address _newOwner) onlyOwner {\r\n        owner = _newOwner;\r\n        NewOwner(msg.sender, _newOwner);\r\n    }\r\n    \r\n    /// @dev Events make it easier to see that something has happend on the\r\n    ///   blockchain\r\n    event NewOwner(address indexed oldOwner, address indexed newOwner);\r\n}\r\n/// @dev `Escapable` is a base level contract built off of the `Owned`\r\n///  contract that creates an escape hatch function to send its ether to\r\n///  `escapeHatchDestination` when called by the `escapeHatchCaller` in the case\r\n///  that something unexpected happens\r\ncontract Escapable is Owned {\r\n    address public escapeHatchCaller;\r\n    address public escapeHatchDestination;\r\n\r\n    /// @notice The Constructor assigns the `escapeHatchDestination` and the\r\n    ///  `escapeHatchCaller`\r\n    /// @param _escapeHatchDestination The address of a safe location (usu a\r\n    ///  Multisig) to send the ether held in this contract\r\n    /// @param _escapeHatchCaller The address of a trusted account or contract to\r\n    ///  call `escapeHatch()` to send the ether in this contract to the\r\n    ///  `escapeHatchDestination` it would be ideal that `escapeHatchCaller` cannot\r\n    ///  move funds out of `escapeHatchDestination`\r\n    function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) {\r\n        escapeHatchCaller = _escapeHatchCaller;\r\n        escapeHatchDestination = _escapeHatchDestination;\r\n    }\r\n\r\n    /// @dev The addresses preassigned the `escapeHatchCaller` role\r\n    ///  is the only addresses that can call a function with this modifier\r\n    modifier onlyEscapeHatchCallerOrOwner {\r\n        if ((msg.sender != escapeHatchCaller)&&(msg.sender != owner))\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    /// @notice The `escapeHatch()` should only be called as a last resort if a\r\n    /// security issue is uncovered or something unexpected happened\r\n    function escapeHatch() onlyEscapeHatchCallerOrOwner {\r\n        uint total = this.balance;\r\n        // Send the total balance of this contract to the `escapeHatchDestination`\r\n        if (!escapeHatchDestination.send(total)) {\r\n            throw;\r\n        }\r\n        EscapeHatchCalled(total);\r\n    }\r\n    /// @notice Changes the address assigned to call `escapeHatch()`\r\n    /// @param _newEscapeHatchCaller The address of a trusted account or contract to\r\n    ///  call `escapeHatch()` to send the ether in this contract to the\r\n    ///  `escapeHatchDestination` it would be ideal that `escapeHatchCaller` cannot\r\n    ///  move funds out of `escapeHatchDestination`\r\n    function changeEscapeCaller(address _newEscapeHatchCaller) onlyEscapeHatchCallerOrOwner {\r\n        escapeHatchCaller = _newEscapeHatchCaller;\r\n    }\r\n\r\n    event EscapeHatchCalled(uint amount);\r\n}\r\n\r\n/// @dev This is an empty contract to declare `proxyPayment()` to comply with\r\n///  Giveth Campaigns so that tokens will be generated when donations are sent\r\ncontract Campaign {\r\n\r\n    /// @notice `proxyPayment()` allows the caller to send ether to the Campaign and\r\n    /// have the tokens created in an address of their choosing\r\n    /// @param _owner The address that will hold the newly created tokens\r\n    function proxyPayment(address _owner) payable returns(bool);\r\n}\r\n\r\n/// @dev Finally! The main contract which doubles the amount donated.\r\ncontract DonationDoubler is Escapable, SafeMath {\r\n    Campaign public beneficiary; // expected to be a Giveth campaign\r\n\r\n    /// @notice The Constructor assigns the `beneficiary`, the\r\n    ///  `escapeHatchDestination` and the `escapeHatchCaller` as well as deploys\r\n    ///  the contract to the blockchain (obviously)\r\n    /// @param _beneficiary The address of the CAMPAIGN CONTROLLER for the Campaign\r\n    ///  that is to receive donations\r\n    /// @param _escapeHatchDestination The address of a safe location (usually a\r\n    ///  Multisig) to send the ether held in this contract\r\n    /// @param _escapeHatchCaller The address of a trusted account or contract\r\n    ///  to call `escapeHatch()` to send the ether in this contract to the \r\n    ///  `escapeHatchDestination` it would be ideal that `escapeHatchCaller`\r\n    ///  cannot move funds out of `escapeHatchDestination`\r\n    function DonationDoubler(\r\n            Campaign _beneficiary,\r\n            // person or legal entity that receives money or other benefits from a benefactor\r\n            address _escapeHatchCaller,\r\n            address _escapeHatchDestination\r\n        )\r\n        Escapable(_escapeHatchCaller, _escapeHatchDestination)\r\n    {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    /// @notice Simple function to deposit more ETH to Double Donations\r\n    function depositETH() payable {\r\n        DonationDeposited4Doubling(msg.sender, msg.value);\r\n    }\r\n\r\n    /// @notice Donate ETH to the `beneficiary`, and if there is enough in the \r\n    ///  contract double it. The `msg.sender` is rewarded with Campaign tokens\r\n    // depending on how one calls into this fallback function, i.e. with .send ( hard limit of 2300 gas ) vs .value (provides fallback with all the available gas of the caller), it may throw\r\n    function () payable {\r\n        uint amount;\r\n\r\n        // When there is enough ETH in the contract to double the ETH sent\r\n        if (this.balance >= multiply(msg.value, 2)){\r\n            amount = multiply(msg.value, 2); // do it two it!\r\n            // Send the ETH to the beneficiary so that they receive Campaign tokens\r\n            if (!beneficiary.proxyPayment.value(amount)(msg.sender))\r\n                throw;\r\n            DonationDoubled(msg.sender, amount);\r\n        } else {\r\n            amount = this.balance;\r\n            // Send the ETH to the beneficiary so that they receive Campaign tokens\r\n            if (!beneficiary.proxyPayment.value(amount)(msg.sender))\r\n                throw;\r\n            DonationSentButNotDoubled(msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    event DonationDeposited4Doubling(address indexed sender, uint amount);\r\n    event DonationDoubled(address indexed sender, uint amount);\r\n    event DonationSentButNotDoubled(address indexed sender, uint amount);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"escapeHatch\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escapeHatchCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEscapeHatchCaller\",\"type\":\"address\"}],\"name\":\"changeEscapeCaller\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escapeHatchDestination\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_escapeHatchCaller\",\"type\":\"address\"},{\"name\":\"_escapeHatchDestination\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DonationDeposited4Doubling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DonationDoubled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DonationSentButNotDoubled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscapeHatchCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"}]","ContractName":"DonationDoubler","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ef3d92e868f7c9a022118f5f48cb99f4c75bf8cb000000000000000000000000839395e20bbb182fa440d08f850e6c7a8f6f078000000000000000000000000032bacc8b241fb172fee18bda32527126c6f3c5f7","Library":"","SwarmSource":"bzzr://96c0071e1b638965813639bb4ddea36b1bf04302942c01d86506b36a0e63920d"}]}