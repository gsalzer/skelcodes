{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\n// ----------------------------------------------------------------------------------------------\r\n// BokkyPooBah's Autonomous Refundathon Facility Token Contract\r\n//\r\n// A system to incentivise The DAO token holders to withdraw their refunds\r\n//\r\n// Based on Vlad's Safe Token Sale Mechanism Contract\r\n// - https://medium.com/@Vlad_Zamfir/a-safe-token-sale-mechanism-8d73c430ddd1\r\n//\r\n// Enjoy. (c) Bok Consulting Pty Ltd 2017. The MIT Licence.\r\n// ----------------------------------------------------------------------------------------------\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// ERC Token Standard #20 - https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20Token is Owned {\r\n    uint256 _totalSupply = 0;\r\n\r\n    // Balances for each account\r\n    mapping(address => uint256) balances;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    // Get the total token supply\r\n    function totalSupply() constant returns (uint256 totalSupply) {\r\n        totalSupply = _totalSupply;\r\n    }\r\n\r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        if (balances[msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    // this function is required for some DEX functionality\r\n    function approve(address _spender, uint256 _amount) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    // Spender of tokens transfer an amount of tokens from the token owner's\r\n    // balance to the spender's account. The owner of the tokens must already\r\n    // have approve(...)-d this transfer\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) returns (bool success) {\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Returns the amount of tokens approved by the owner that can be transferred\r\n    // to the spender's account\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\ncontract BokkyPooBahsAutonomousRefundathonFacility is ERC20Token {\r\n\r\n    // ------ Token information ------\r\n    string public constant symbol = \"BARF\";\r\n    string public constant name = \"BokkyPooBah Autonomous Refundathon Facility\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 public deployedAt;\r\n\r\n    function BokkyPooBahsAutonomousRefundathonFund() {\r\n        deployedAt = now;\r\n    }\r\n\r\n    // Members buy tokens from this contract at this price\r\n    //\r\n    // This is a maximum price that the tokens should be bought for buyers\r\n    // can always buy tokens from this contract for this price\r\n    //\r\n    // Check out the BARF prices on https://cryptoderivatives.market/ to see\r\n    // if you can buy these tokens for less than this maximum price\r\n    function buyPrice() constant returns (uint256) {\r\n        // Members buy tokens initially at 1 BARF = 0.01 ETH\r\n        if (now < (deployedAt + 2 days)) {\r\n            return 1 * 10**16;\r\n        // Price increase to 1 BARF = 0.02 ETH after 2 days and before 1 week\r\n        } else if (now < (deployedAt + 7 days)) {\r\n            return 2 * 10**16;\r\n        // Price increase to 1 BARF = 0.04 ETH after 1 week and before 30 days\r\n        } else if (now < (deployedAt + 30 days)) {\r\n            return 4 * 10**16;\r\n        // Price increase to 1 BARF = 0.06 ETH after 30 days and before 60 days\r\n        } else if (now < (deployedAt + 60 days)) {\r\n            return 6 * 10**16;\r\n        // Price increase to 1 BARF = 0.08 ETH after 60 days and before 90 days\r\n        } else if (now < (deployedAt + 90 days)) {\r\n            return 8 * 10**16;\r\n        // Price increase to 1 BARF = 10 ETH after 90 days and before 365 days (1 year)\r\n        } else if (now < (deployedAt + 365 days)) {\r\n            return 1 * 10**19;\r\n        // Price increase to 1 BARF = 1,000 ETH after 365 days and before 3652 days (10 years)\r\n        } else if (now < (deployedAt + 3652 days)) {\r\n            return 1 * 10**22;\r\n        // Price increase to 1 BARF = 1,000,000 ETH after 3652 days (10 years). Effectively free floating ceiling\r\n        } else {\r\n            return 1 * 10**24;\r\n        }\r\n    }\r\n\r\n    // Members can always sell to the contract at 1 BARF = 0.01 ETH\r\n    //\r\n    // This is a minimum price that the tokens should sell for as the owner of\r\n    // the token can always sell tokens to this contract at this price\r\n    //\r\n    // Check out the BARF prices on https://cryptoderivatives.market/ to see\r\n    // if you can sell these tokens for more than this minimum price\r\n    function sellPrice() constant returns (uint256) {\r\n        return 10**16;\r\n    }\r\n\r\n    // ------ Owner Withdrawal ------\r\n    function amountOfEthersOwnerCanWithdraw() constant returns (uint256) {\r\n        uint256 etherBalance = this.balance;\r\n        uint256 ethersSupportingTokens = _totalSupply * sellPrice() / 1 ether;\r\n        if (etherBalance > ethersSupportingTokens) {\r\n            return etherBalance - ethersSupportingTokens;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function ownerWithdraw(uint256 amount) onlyOwner {\r\n        uint256 maxWithdrawalAmount = amountOfEthersOwnerCanWithdraw();\r\n        if (amount > maxWithdrawalAmount) {\r\n            amount = maxWithdrawalAmount;\r\n        }\r\n        if (!owner.send(amount)) throw;\r\n        Withdrawn(amount, maxWithdrawalAmount - amount);\r\n    }\r\n    event Withdrawn(uint256 amount, uint256 remainingWithdrawal);\r\n\r\n\r\n    // ------ Member Buy and Sell tokens below ------\r\n    function () payable {\r\n        memberBuyToken();\r\n    }\r\n\r\n    function memberBuyToken() payable {\r\n        if (msg.value > 0) {\r\n            uint tokens = msg.value * 1 ether / buyPrice();\r\n            _totalSupply += tokens;\r\n            balances[msg.sender] += tokens;\r\n            MemberBoughtToken(msg.sender, msg.value, this.balance, tokens, _totalSupply,\r\n                buyPrice());\r\n        }\r\n    }\r\n    event MemberBoughtToken(address indexed buyer, uint256 ethers, uint256 newEtherBalance,\r\n        uint256 tokens, uint256 newTotalSupply, uint256 buyPrice);\r\n\r\n    function memberSellToken(uint256 amountOfTokens) {\r\n        if (amountOfTokens > balances[msg.sender]) throw;\r\n        balances[msg.sender] -= amountOfTokens;\r\n        _totalSupply -= amountOfTokens;\r\n        uint256 ethersToSend = amountOfTokens * sellPrice() / 1 ether;\r\n        if (!msg.sender.send(ethersToSend)) throw;\r\n        MemberSoldToken(msg.sender, ethersToSend, this.balance, amountOfTokens,\r\n            _totalSupply, sellPrice());\r\n    }\r\n    event MemberSoldToken(address indexed seller, uint256 ethers, uint256 newEtherBalance,\r\n        uint256 tokens, uint256 newTotalSupply, uint256 sellPrice);\r\n\r\n\r\n    // ------ Information function ------\r\n    function currentEtherBalance() constant returns (uint256) {\r\n        return this.balance;\r\n    }\r\n\r\n    function currentTokenBalance() constant returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerWithdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfEthersOwnerCanWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BokkyPooBahsAutonomousRefundathonFund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"memberSellToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"memberBuyToken\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentEtherBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"remainingWithdrawal\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newEtherBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyPrice\",\"type\":\"uint256\"}],\"name\":\"MemberBoughtToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newEtherBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sellPrice\",\"type\":\"uint256\"}],\"name\":\"MemberSoldToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BokkyPooBahsAutonomousRefundathonFacility","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://903781a9156cce2d6e8589c42efeeac2f8dcb4587351fd4c3d6958d4250ef333"}]}