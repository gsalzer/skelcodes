{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/*\r\n  Allows buyers to securely/confidently buy recent ICO tokens that are\r\n  still non-transferrable, on an IOU basis. Like HitBTC, but with protection,\r\n  control, and guarantee of either the purchased tokens or ETH refunded.\r\n\r\n  The Buyer's ETH will be locked into the contract until the purchased\r\n  IOU/tokens arrive here and are ready for the buyer to invoke withdraw(),\r\n  OR until cut-off time defined below is exceeded and as a result ETH\r\n  refunds/withdrawals become enabled.\r\n\r\n  In other words, the seller must fulfill the IOU token purchases any time\r\n  before the cut-off time defined below, otherwise the buyer gains the\r\n  ability to withdraw their ETH.\r\n\r\n  The buyer's ETH will ONLY be released to the seller AFTER the adequate\r\n  amount of tokens have been deposited for ALL purchases.\r\n\r\n  Withdrawal/distribution ETA: 2-3 weeks from ICO close\r\n  Cut-off Time: ~ August 15, 2017\r\n\r\n  Greetz: Dr. Crypto, blast, meritt, stealth, agent 2o99\r\n\r\n  Greetz++: Cintix, for inspiration, withdrawal method, and positive\r\n            contributions to the crypto community.\r\n\r\n  foobarbizarre@gmail.com (Please report any findings or suggestions for a bounty!)\r\n\r\n\r\n      _____                    _____                    _____                    _____\r\n     /\\    \\                  /\\    \\                  /\\    \\                  /\\    \\\r\n    /::\\    \\                /::\\    \\                /::\\    \\                /::\\____\\\r\n    \\:::\\    \\              /::::\\    \\              /::::\\    \\              /:::/    /\r\n     \\:::\\    \\            /::::::\\    \\            /::::::\\    \\            /:::/    /\r\n      \\:::\\    \\          /:::/\\:::\\    \\          /:::/\\:::\\    \\          /:::/    /\r\n       \\:::\\    \\        /:::/__\\:::\\    \\        /:::/__\\:::\\    \\        /:::/    /\r\n       /::::\\    \\      /::::\\   \\:::\\    \\      /::::\\   \\:::\\    \\      /:::/    /\r\n      /::::::\\    \\    /::::::\\   \\:::\\    \\    /::::::\\   \\:::\\    \\    /:::/    /\r\n     /:::/\\:::\\    \\  /:::/\\:::\\   \\:::\\    \\  /:::/\\:::\\   \\:::\\    \\  /:::/    /\r\n    /:::/  \\:::\\____\\/:::/__\\:::\\   \\:::\\____\\/:::/__\\:::\\   \\:::\\____\\/:::/____/\r\n   /:::/    \\::/    /\\:::\\   \\:::\\   \\::/    /\\:::\\   \\:::\\   \\::/    /\\:::\\    \\\r\n  /:::/    / \\/____/  \\:::\\   \\:::\\   \\/____/  \\:::\\   \\:::\\   \\/____/  \\:::\\    \\\r\n /:::/    /            \\:::\\   \\:::\\    \\       \\:::\\   \\:::\\    \\       \\:::\\    \\\r\n/:::/    /              \\:::\\   \\:::\\____\\       \\:::\\   \\:::\\____\\       \\:::\\    \\\r\n\\::/    /                \\:::\\   \\::/    /        \\:::\\   \\::/    /        \\:::\\    \\\r\n \\/____/                  \\:::\\   \\/____/          \\:::\\   \\/____/          \\:::\\    \\\r\n                           \\:::\\    \\               \\:::\\    \\               \\:::\\    \\\r\n                            \\:::\\____\\               \\:::\\____\\               \\:::\\____\\\r\n                             \\::/    /                \\::/    /                \\::/    /\r\n                              \\/____/                  \\/____/                  \\/____/\r\n\r\n  Thank you\r\n*/\r\n\r\ncontract NEToken {\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n}\r\n\r\ncontract IOU {\r\n  // Store the amount of IOUs purchased by a buyer\r\n  mapping (address => uint256) public iou_purchased;\r\n\r\n  // Store the amount of ETH sent in by a buyer\r\n  mapping (address => uint256) public eth_sent;\r\n\r\n  // Total IOUs available to sell\r\n  uint256 public total_iou_available = 4725000000000000000000;\r\n\r\n  // Total IOUs purchased by all buyers\r\n  uint256 public total_iou_purchased;\r\n\r\n  // Total IOU withdrawn by all buyers (keep track to protect buyers)\r\n  uint256 public total_iou_withdrawn;\r\n\r\n  // IOU per ETH (price)\r\n  uint256 public price_per_eth = 60;\r\n\r\n  //  NET token contract address (IOU offering)\r\n  NEToken public token = NEToken(0xcfb98637bcae43C13323EAa1731cED2B716962fD);\r\n\r\n  // The seller's address (to receive ETH upon distribution, and for authing safeties)\r\n  address seller = 0xB00Ae1e677B27Eee9955d632FF07a8590210B366;\r\n\r\n  // Halt further purchase ability just in case\r\n  bool public halt_purchases;\r\n\r\n  modifier pwner() { if(msg.sender != seller) throw; _; }\r\n\r\n  /*\r\n    Safety to withdraw unbought tokens back to seller. Ensures the amount\r\n    that buyers still need to withdraw remains available\r\n  */\r\n  function withdrawTokens() pwner {\r\n    token.transfer(seller, token.balanceOf(address(this)) - (total_iou_purchased - total_iou_withdrawn));\r\n  }\r\n\r\n  /*\r\n    Safety to prevent anymore purchases/sales from occurring in the event of\r\n    unforeseen issue. Buyer withdrawals still remain enabled.\r\n  */\r\n  function haltPurchases() pwner {\r\n    halt_purchases = true;\r\n  }\r\n\r\n  function resumePurchases() pwner {\r\n    halt_purchases = false;\r\n  }\r\n\r\n  /*\r\n    Update available IOU to purchase\r\n  */\r\n  function updateAvailability(uint256 _iou_amount) pwner {\r\n    if(_iou_amount < total_iou_purchased) throw;\r\n\r\n    total_iou_available = _iou_amount;\r\n  }\r\n\r\n  /*\r\n    Update IOU price\r\n  */\r\n  function updatePrice(uint256 _price) pwner {\r\n    price_per_eth = _price;\r\n  }\r\n\r\n  /*\r\n    Release buyer's ETH to seller ONLY if amount of contract's tokens balance\r\n    is >= to the amount that still needs to be withdrawn. Protects buyer.\r\n\r\n    The seller must call this function manually after depositing the adequate\r\n    amount of tokens for all buyers to collect\r\n\r\n    This effectively ends the sale, but withdrawals remain open\r\n  */\r\n  function paySeller() pwner {\r\n    // not enough tokens in balance to release ETH, protect buyer and abort\r\n    if(token.balanceOf(address(this)) < (total_iou_purchased - total_iou_withdrawn)) throw;\r\n\r\n    // Halt further purchases\r\n    halt_purchases = true;\r\n\r\n    // Release buyer's ETH to the seller\r\n    seller.transfer(this.balance);\r\n  }\r\n\r\n  function withdraw() payable {\r\n    /*\r\n      Main mechanism to ensure a buyer's purchase/ETH/IOU is safe.\r\n\r\n      Refund the buyer's ETH if we're beyond the cut-off date of our distribution\r\n      promise AND if the contract doesn't have an adequate amount of tokens\r\n      to distribute to the buyer. Time-sensitive buyer/ETH protection is only\r\n      applicable if the contract doesn't have adequate tokens for the buyer.\r\n\r\n      The \"adequacy\" check prevents the seller and/or third party attacker\r\n      from locking down buyers' ETH by sending in an arbitrary amount of tokens.\r\n\r\n      If for whatever reason the tokens remain locked for an unexpected period\r\n      beyond the time defined by block.number, patient buyers may still wait until\r\n      the contract is filled with their purchased IOUs/tokens. Once the tokens\r\n      are here, they can initiate a withdraw() to retrieve their tokens. Attempting\r\n      to withdraw any sooner (after the block has been mined, but tokens not arrived)\r\n      will result in a refund of buyer's ETH.\r\n    */\r\n    if(block.number > 4230000 && iou_purchased[msg.sender] > token.balanceOf(address(this))) {\r\n      // We didn't fulfill our promise to have adequate tokens withdrawable at xx time\r\n      // Refund the buyer's ETH automatically instead\r\n      uint256 eth_to_refund = eth_sent[msg.sender];\r\n\r\n      // If the user doesn't have any ETH or tokens to withdraw, get out ASAP\r\n      if(eth_to_refund == 0 || iou_purchased[msg.sender] == 0) throw;\r\n\r\n      // Adjust total purchased so others can buy, and so numbers align with total_iou_withdrawn\r\n      total_iou_purchased -= iou_purchased[msg.sender];\r\n\r\n      // Clear record of buyer's ETH and IOU balance before refunding\r\n      eth_sent[msg.sender] = 0;\r\n      iou_purchased[msg.sender] = 0;\r\n\r\n      msg.sender.transfer(eth_to_refund);\r\n      return;\r\n    }\r\n\r\n    /*\r\n      Check if there is an adequate amount of tokens in the contract yet\r\n      and allow the buyer to withdraw tokens\r\n    */\r\n    if(token.balanceOf(address(this)) == 0 || iou_purchased[msg.sender] > token.balanceOf(address(this))) throw;\r\n\r\n    uint256 iou_to_withdraw = iou_purchased[msg.sender];\r\n\r\n    // If the user doesn't have any IOUs to withdraw, get out ASAP\r\n    if(iou_to_withdraw == 0) throw;\r\n\r\n    // Clear record of buyer's IOU and ETH balance before transferring out\r\n    iou_purchased[msg.sender] = 0;\r\n    eth_sent[msg.sender] = 0;\r\n\r\n    total_iou_withdrawn += iou_to_withdraw;\r\n\r\n    // Distribute tokens to the buyer\r\n    token.transfer(msg.sender, iou_to_withdraw);\r\n  }\r\n\r\n  function purchase() payable {\r\n    if(halt_purchases) throw;\r\n    if(msg.value == 0) throw;\r\n\r\n    // Determine amount of tokens user wants to/can buy\r\n    uint256 iou_to_purchase = price_per_eth * msg.value;\r\n\r\n    // Check if we have enough IOUs left to sell\r\n    if((total_iou_purchased + iou_to_purchase) > total_iou_available) throw;\r\n\r\n    // Update the amount of IOUs purchased by user. Also keep track of the total ETH they sent in\r\n    iou_purchased[msg.sender] += iou_to_purchase;\r\n    eth_sent[msg.sender] += msg.value;\r\n\r\n    // Update the total amount of IOUs purchased by all buyers\r\n    total_iou_purchased += iou_to_purchase;\r\n  }\r\n\r\n  // Fallback function/entry point\r\n  function () payable {\r\n    if(msg.value == 0) {\r\n      withdraw();\r\n    }\r\n    else {\r\n      purchase();\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"eth_sent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"haltPurchases\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_iou_amount\",\"type\":\"uint256\"}],\"name\":\"updateAvailability\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumePurchases\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"iou_purchased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_iou_withdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_iou_available\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price_per_eth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_iou_purchased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"paySeller\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halt_purchases\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"IOU","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dfec0a33925937c2ddee05759e4df9c579377b7800fa2d0431e136470ac65545"}]}