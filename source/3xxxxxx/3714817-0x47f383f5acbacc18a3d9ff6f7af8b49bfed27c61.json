{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n/**\r\n* Eth Hodler (f.k.a. Hodl DAO) and ERC20 token\r\n* Author: CurrencyTycoon on GitHub\r\n* License: MIT\r\n* Date: 2017\r\n*\r\n* Deploy with the following args:\r\n* \"Eth Hodler\", 18, \"EHDL\"\r\n*\r\n*/\r\ncontract EthHodler {\r\n    /* ERC20 Public variables of the token */\r\n    string public constant version = 'HDAO 0.7';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    /* ERC20 This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n\r\n    /* store the block number when a withdrawal has been requested*/\r\n    mapping (address => withdrawalRequest) public withdrawalRequests;\r\n    struct withdrawalRequest {\r\n    uint sinceTime;\r\n    uint256 amount;\r\n    }\r\n\r\n    /**\r\n     * feePot collects fees from quick withdrawals. This gets re-distributed to slow-withdrawals\r\n    */\r\n    uint256 public feePot;\r\n\r\n    uint public timeWait = 30 days;\r\n    //uint public timeWait = 1 minutes; // uncomment for TestNet\r\n\r\n    uint256 public constant initialSupply = 0;\r\n\r\n    /**\r\n     * ERC20 events these generate a public event on the blockchain that will notify clients\r\n    */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    event WithdrawalQuick(address indexed by, uint256 amount, uint256 fee); // quick withdrawal done\r\n    event IncorrectFee(address indexed by, uint256 feeRequired);  // incorrect fee paid for quick withdrawal\r\n    event WithdrawalStarted(address indexed by, uint256 amount);\r\n    event WithdrawalDone(address indexed by, uint256 amount, uint256 reward); // amount is the amount that was used to calculate reward\r\n    event WithdrawalPremature(address indexed by, uint timeToWait); // Needs to wait timeToWait before withdrawal unlocked\r\n    event Deposited(address indexed by, uint256 amount);\r\n\r\n    /**\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     * In our case, there's no initial supply. Tokens will be created as ether is sent\r\n     * to the fall-back function. Then tokens are burned when ether is withdrawn.\r\n     */\r\n    function EthHodler(\r\n    string tokenName,\r\n    uint8 decimalUnits,\r\n    string tokenSymbol\r\n    ) {\r\n\r\n        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens (0 in this case)\r\n        totalSupply = initialSupply;                        // Update total supply (0 in this case)\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\r\n    }\r\n\r\n    /**\r\n     * notPendingWithdrawal modifier guards the function from executing when a\r\n     * withdrawal has been requested and is currently pending\r\n     */\r\n    modifier notPendingWithdrawal {\r\n        if (withdrawalRequests[msg.sender].sinceTime > 0) throw;\r\n        _;\r\n    }\r\n\r\n    /** ERC20 - transfer sends tokens\r\n     * @notice send `_value` token to `_to` from `msg.sender`\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transfer(address _to, uint256 _value) notPendingWithdrawal {\r\n        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\r\n        if (withdrawalRequests[_to].sinceTime > 0) throw;    // can't move tokens when _to is pending withdrawal\r\n        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\r\n        balanceOf[_to] += _value;                            // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n    }\r\n\r\n    /** ERC20 approve allows another contract to spend some tokens in your behalf\r\n     * @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _value The amount of tokens to be approved for transfer\r\n     * @return Whether the approval was successful or not\r\n     *\r\n     *\r\n     * Note, there are some edge-cases with the ERC-20 approve mechanism. In this case a 'bounds check'\r\n     * was added to make sure Alice cant' approve Bob for more tokens than she has.\r\n     * The assumptions are that these scenarios could still happen if not mitigated by Alice:\r\n     *\r\n     * Scenario 1:\r\n     *\r\n     * The following scenario could be the expected outcome by Alice, but if not, Alice would need to set\r\n     * her approval to Bob to 0 before Alice purchases more tokens.\r\n     *\r\n     *  1. Alice has 100 tokens.\r\n     *  2. Alice approves 50 tokens for Bob.\r\n     *  3. Alice approves 100 tokens for Charles\r\n     *  4. Bob calls transferFrom and receives his 50 tokens.\r\n     *  5. Charles calls transferFrom and receives the remaining 50 tokens\r\n     *  6. Charles still has an approval for 50 more tokens from Alice, even though she now owns 0 tokens.\r\n     *  7. Alice purchases 50 more tokens\r\n     *  8. Charles sees this, and immediately calls transferFrom and receives those 50 tokens.\r\n     *\r\n     * Scenario 2:\r\n     *\r\n     * This is a race condition. To mitigate this problem, Alice should set the allowance to 0 in step 2,\r\n     * then wait until it's mined, then if Bob didn't take the 100 she can set to 50. (Otherwise Bob may\r\n     * potentially get 150 tokens)\r\n     *\r\n     *\r\n     *  1. Alice approves Bob for 100,\r\n     *  2. Alice changes it to 50\r\n     *  3. Bob sees the change in the mempool before it's mined, and sends a new transaction\r\n     *     that will hopefully win the race and withdraw the 100 first, meanwhile the 50 will\r\n     *     be mined after and allow Bob to withdraw another 50.\r\n     *\r\n     *\r\n     */\r\n    function approve(address _spender, uint256 _value) notPendingWithdrawal\r\n    returns (bool success) {\r\n\r\n        // The following line has been commented out after peer review #2\r\n        // It may be possible that Alice can pre-approve the recipient in advance, before she has a balance.\r\n        // eg. Alice may approve a total lifetime amount for her child to spend, but only fund her account monthly.\r\n        // It also allows her to have multiple equal approvees\r\n\r\n        //if (balanceOf[msg.sender] < _value) return false; // Don't allow more than they currently have (bounds check)\r\n\r\n        // To change the approve amount you first have to reduce the addressesÂ´\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((_value != 0) && (allowance[msg.sender][_spender] != 0)) throw;\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;                                      // we must return a bool as part of the ERC20\r\n    }\r\n\r\n\r\n    /**\r\n     * ERC-20 Approves and then calls the receiving contract\r\n    */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) notPendingWithdrawal\r\n    returns (bool success) {\r\n\r\n        if (!approve(_spender, _value)) return false;\r\n\r\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\r\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) {\r\n            throw;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * ERC20 A contract attempts to get the coins. Note: We are not allowing a transfer if\r\n     * either the from or to address is pending withdrawal\r\n     * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    returns (bool success) {\r\n        // note that we can't use notPendingWithdrawal modifier here since this function does a transfer\r\n        // on the behalf of _from\r\n        if (withdrawalRequests[_from].sinceTime > 0) throw;   // can't move tokens when _from is pending withdrawal\r\n        if (withdrawalRequests[_to].sinceTime > 0) throw;     // can't move tokens when _to is pending withdrawal\r\n        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\r\n        if (_value > allowance[_from][msg.sender]) throw;     // Check allowance\r\n        balanceOf[_from] -= _value;                           // Subtract from the sender\r\n        balanceOf[_to] += _value;                             // Add the same to the recipient\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * withdrawalInitiate initiates the withdrawal by going into a waiting period\r\n     * It remembers the block number & amount held at the time of request.\r\n     * Tokens cannot be moved out during the waiting period, locking the tokens until then.\r\n     * After the waiting period finishes, the call withdrawalComplete\r\n     *\r\n     * Gas: 64490\r\n     *\r\n     */\r\n    function withdrawalInitiate() notPendingWithdrawal {\r\n        WithdrawalStarted(msg.sender, balanceOf[msg.sender]);\r\n        withdrawalRequests[msg.sender] = withdrawalRequest(now, balanceOf[msg.sender]);\r\n    }\r\n\r\n    /**\r\n     * withdrawalComplete is called after the waiting period. The ether will be\r\n     * returned to the caller and the tokens will be burned.\r\n     * A reward will be issued based on the current amount in the feePot, relative to the\r\n     * amount that was requested for withdrawal when withdrawalInitiate() was called.\r\n     *\r\n     * Gas: 30946\r\n     */\r\n    function withdrawalComplete() returns (bool) {\r\n        withdrawalRequest r = withdrawalRequests[msg.sender];\r\n        if (r.sinceTime == 0) throw;\r\n        if ((r.sinceTime + timeWait) > now) {\r\n            // holder needs to wait some more blocks\r\n            WithdrawalPremature(msg.sender, r.sinceTime + timeWait - now);\r\n            return false;\r\n        }\r\n        uint256 amount = withdrawalRequests[msg.sender].amount;\r\n        uint256 reward = calculateReward(r.amount);\r\n        withdrawalRequests[msg.sender].sinceTime = 0;   // This will unlock the holders tokens\r\n        withdrawalRequests[msg.sender].amount = 0;      // clear the amount that was requested\r\n\r\n        if (reward > 0) {\r\n            if (feePot - reward > feePot) {             // underflow check\r\n                feePot = 0;\r\n            } else {\r\n                feePot -= reward;\r\n            }\r\n        }\r\n        doWithdrawal(reward);                           // burn the tokens and send back the ether\r\n        WithdrawalDone(msg.sender, amount, reward);\r\n        return true;\r\n\r\n    }\r\n\r\n    /**\r\n     * Reward is based on the amount held, relative to total supply of tokens.\r\n     */\r\n    function calculateReward(uint256 v) constant returns (uint256) {\r\n        uint256 reward = 0;\r\n        if (feePot > 0) {\r\n            reward = feePot * v / totalSupply; // assuming that if feePot > 0 then also totalSupply > 0\r\n        }\r\n        return reward;\r\n    }\r\n\r\n    /** calculate the fee for quick withdrawal\r\n     */\r\n    function calculateFee(uint256 v) constant returns  (uint256) {\r\n        uint256 feeRequired = v / 100; // 1%\r\n        return feeRequired;\r\n    }\r\n\r\n    /**\r\n     * Quick withdrawal, needs to send ether to this function for the fee.\r\n     *\r\n     * Gas use: ? (including call to processWithdrawal)\r\n    */\r\n    function quickWithdraw() payable notPendingWithdrawal returns (bool) {\r\n        uint256 amount = balanceOf[msg.sender];\r\n        if (amount == 0) throw;\r\n        // calculate required fee\r\n        uint256 feeRequired = calculateFee(amount);\r\n        if (msg.value != feeRequired) {\r\n            IncorrectFee(msg.sender, feeRequired);   // notify the exact fee that needs to be sent\r\n            throw;\r\n        }\r\n        feePot += msg.value;                         // add fee to the feePot\r\n        doWithdrawal(0);                             // withdraw, 0 reward\r\n        WithdrawalDone(msg.sender, amount, 0);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * do withdrawal\r\n     */\r\n    function doWithdrawal(uint256 extra) internal {\r\n        uint256 amount = balanceOf[msg.sender];\r\n        if (amount == 0) throw;                      // cannot withdraw\r\n        if (amount + extra > this.balance) {\r\n            throw;                                   // contract doesn't have enough balance\r\n        }\r\n\r\n        balanceOf[msg.sender] = 0;\r\n        if (totalSupply < totalSupply - amount) {\r\n            throw;                                   // don't let it underflow (should not happen since amount <= totalSupply)\r\n        } else {\r\n            totalSupply -= amount;                   // deflate the supply!\r\n        }\r\n        Transfer(msg.sender, 0, amount);             // burn baby burn\r\n        if (!msg.sender.send(amount + extra)) throw; // return back the ether or rollback if failed\r\n    }\r\n\r\n\r\n    /**\r\n     * Fallback function when sending ether to the contract\r\n     * Gas use: 65051\r\n    */\r\n    function () payable notPendingWithdrawal {\r\n        uint256 amount = msg.value;         // amount that was sent\r\n        if (amount == 0) throw;             // need to send some ETH\r\n        balanceOf[msg.sender] += amount;    // mint new tokens\r\n        totalSupply += amount;              // track the supply\r\n        Transfer(0, msg.sender, amount);    // notify of the event\r\n        Deposited(msg.sender, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalRequests\",\"outputs\":[{\"name\":\"sinceTime\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeWait\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"quickWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawalComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawalInitiate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"WithdrawalQuick\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"feeRequired\",\"type\":\"uint256\"}],\"name\":\"IncorrectFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"WithdrawalDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timeToWait\",\"type\":\"uint256\"}],\"name\":\"WithdrawalPremature\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"}]","ContractName":"EthHodler","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000a45746820486f646c65720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044548444c00000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://68060ee2b57b9d45c08a453c3a644fd9a413cf4fbdb2d8d2df25f3fe980c4ec6"}]}