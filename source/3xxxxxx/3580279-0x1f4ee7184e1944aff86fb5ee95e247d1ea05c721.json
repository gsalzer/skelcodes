{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\n\r\ncontract EtherGame \r\n{\r\n    address Owner;\r\n    uint public RegCost;\r\n    uint public FirstLevelCost;\r\n    uint public SecondLevelCost;\r\n    uint public ParentFee;\r\n    \r\n    struct user\r\n    {\r\n        address parent;\r\n        uint8 level;\r\n    }\r\n    \r\n    address[] ListOfUsers;\r\n    mapping(address=>user) public Users;\r\n    \r\n    event newuser(address User, address Parent);\r\n    event levelup(address User, uint Level);\r\n    \r\n    modifier OnlyOwner() \r\n    {\r\n        if(msg.sender == Owner) \r\n        _;\r\n    }\r\n    \r\n    function EtherGame()\r\n    {\r\n        Owner = msg.sender;\r\n        RegCost = 0 ether;\r\n        FirstLevelCost = 0 ether;\r\n        SecondLevelCost = 0 ether;\r\n        ParentFee = 250;\r\n        Users[address(this)].parent = address(this);\r\n        Users[address(this)].level = 200;\r\n        ListOfUsers.push(address(this));\r\n    }\r\n\r\n    function() payable {}\r\n    \r\n    function NewUser() payable\r\n    {\r\n        if(msg.value < RegCost || Users[msg.sender].parent != 0) \r\n            throw;\r\n        Users[msg.sender].parent = address(this);\r\n        ListOfUsers.push(msg.sender);\r\n        newuser(msg.sender, address(this));\r\n    }\r\n    \r\n    function NewUser(address addr) payable\r\n    {\r\n        if(msg.value < RegCost || Users[msg.sender].parent != 0 || Users[addr].parent == 0)\r\n            throw;\r\n        if(addr != address(this))\r\n            addr.transfer(RegCost);\r\n        Users[msg.sender].parent = addr;\r\n        ListOfUsers.push(msg.sender);\r\n        newuser(msg.sender, addr);\r\n    }\r\n    \r\n    function BuyLevel() payable\r\n    {\r\n        uint Price;\r\n        if(Users[msg.sender].level == 0)\r\n            Price = FirstLevelCost;\r\n        else\r\n            Price = uint(8)**Users[msg.sender].level*SecondLevelCost/uint(5)**Users[msg.sender].level*2;\r\n        if(msg.value < Price || Users[msg.sender].parent == 0)\r\n            throw;\r\n        address ToTransfer = Users[msg.sender].parent;\r\n        uint Level = Users[msg.sender].level + 1;\r\n        while(Users[ToTransfer].level < Level)\r\n            ToTransfer = Users[ToTransfer].parent;\r\n        if(ToTransfer != address(this))\r\n        {\r\n            ToTransfer.transfer(Price/1000*(1000-ParentFee));\r\n            ToTransfer = Users[ToTransfer].parent;\r\n            if(ToTransfer != address(this) && ParentFee != 0)\r\n                ToTransfer.transfer(Price/1000*ParentFee);\r\n        }\r\n        Users[msg.sender].level++;\r\n        levelup(msg.sender, Level);\r\n    }\r\n    \r\n    function TakeMoney() OnlyOwner\r\n    {\r\n        Owner.transfer(this.balance);\r\n    }\r\n    \r\n    function ChangeOwner(address NewOwner) OnlyOwner\r\n    {\r\n        Owner = NewOwner;\r\n    }\r\n    \r\n    function ChangeRules(uint NewRegCost, uint NewFirsLevelCost, uint NewSecondLevelCost, uint NewParentFee) OnlyOwner\r\n    {\r\n        ParentFee = NewParentFee;\r\n        FirstLevelCost = NewFirsLevelCost;\r\n        SecondLevelCost = NewSecondLevelCost;\r\n        RegCost = NewRegCost;\r\n    }\r\n    \r\n    function Kill() OnlyOwner\r\n    {\r\n        selfdestruct(Owner);\r\n    }\r\n\r\n    function UsersNumber() constant returns(uint)\r\n    {\r\n        return ListOfUsers.length;\r\n    }\r\n    \r\n    function UsersList() constant returns(address[])\r\n    {\r\n        return ListOfUsers;\r\n    }\r\n\r\n    function MaxChildLevel(address addr) constant returns(uint)\r\n    {\r\n        uint MaxLevel = 0;\r\n        uint Level;\r\n        address child;\r\n        for(uint i=0;i<ListOfUsers.length;i++)\r\n        {\r\n            child = ListOfUsers[i];\r\n            Level = Users[child].level;\r\n            while(child != address(this) && Users[child].parent != addr)\r\n                child = Users[child].parent;\r\n            if(child != address(this) && Level > MaxLevel)\r\n                MaxLevel = Level;\r\n        }\r\n        return MaxLevel;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"SecondLevelCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UsersList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UsersNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"NewRegCost\",\"type\":\"uint256\"},{\"name\":\"NewFirsLevelCost\",\"type\":\"uint256\"},{\"name\":\"NewSecondLevelCost\",\"type\":\"uint256\"},{\"name\":\"NewParentFee\",\"type\":\"uint256\"}],\"name\":\"ChangeRules\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"NewUser\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"MaxChildLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Users\",\"outputs\":[{\"name\":\"parent\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ParentFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"NewUser\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RegCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"TakeMoney\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"NewOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BuyLevel\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FirstLevelCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"User\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Parent\",\"type\":\"address\"}],\"name\":\"newuser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"User\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Level\",\"type\":\"uint256\"}],\"name\":\"levelup\",\"type\":\"event\"}]","ContractName":"EtherGame","CompilerVersion":"v0.4.10+commit.f0d539ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3d2803af2a572b5c175045f906973886b1278362a0b28f87ff9998cce43ef495"}]}