{"status":"1","message":"OK","result":[{"SourceCode":"// TheCoin token\r\n// ERC20 Compatible\r\n// https://github.com/ethereum/EIPs/issues/20\r\n\r\n\r\npragma solidity ^0.4.2;\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;  \r\n    }\r\n}\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract token {\r\n    string public standard = 'Token 0.1';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalTokens;\r\n    mapping (address => uint256) public balance;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function token(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        uint8 decimalUnits,\r\n        string tokenSymbol\r\n        ) {\r\n        balance[msg.sender] = initialSupply;        \r\n        totalTokens = initialSupply;                     \r\n        name = tokenName;                              \r\n        symbol = tokenSymbol;                             \r\n        decimals = decimalUnits;                           \r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success){\r\n        if (balance[msg.sender] < _value) throw;     \r\n        if (balance[_to] + _value < balance[_to]) throw; \r\n        balance[msg.sender] -= _value;                     \r\n        balance[_to] += _value;                      \r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        returns (bool success) {    \r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balance[_from] < _value) throw;         \r\n        if (balance[_to] + _value < balance[_to]) throw;  \r\n        if (_value > allowance[_from][msg.sender]) throw; \r\n        balance[_from] -= _value;                  \r\n        balance[_to] += _value;                       \r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract TheCoin is owned, token {\r\n    uint256 public buyPrice; \r\n    uint256 public totalTokens;\r\n    uint256 public komission; \r\n    bool public crowdsale;\r\n    mapping (address => bool) public frozenAccountProfit; \r\n    mapping (address => uint) public frozenProfitDate; \r\n    event FrozenProfit(address target, bool frozen);\r\n\r\n    function TheCoin(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        uint8 decimalUnits,\r\n        string tokenSymbol,\r\n        address centralMinter\r\n    ) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {\r\n        if(centralMinter != 0 ) owner = centralMinter;   \r\n        balance[this] = initialSupply;               \r\n\tkomission = 10;\r\n\tcrowdsale = true;\r\n\tbuyPrice = 50000000;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balance[_from] < _value) throw;         \r\n        if (balance[_to] + _value < balance[_to]) throw;  \r\n        if (_value > allowance[_from][msg.sender]) throw; \r\n        balance[_from] -= _value;                  \r\n        balance[_to] += _value;                       \r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n    uint256 kom;\r\n\tkom = (_value * komission) / 1000;\t\t\t\r\n\tif (kom < 1) kom = 1;\t\t\t\t\r\n        if (balance[msg.sender] >= _value && (_value + kom) > 0) {         \r\n        balance[msg.sender] -= _value;                  \r\n        balance[_to] += (_value - kom);                                               \r\n        balance[this] += kom;                           \r\n        Transfer(msg.sender, _to, (_value - kom));\r\n        return true;\r\n        } else { \r\n         return false;\r\n      }\r\n    }\r\n\r\n    function saleover() onlyOwner{\r\n\tcrowdsale = false;\r\n        }\r\n\r\n    function getreward() returns (bool success) {\r\n        uint256 reward;\r\n        reward = (balance[this] * balance[msg.sender]) / totalTokens; \r\n    if (frozenAccountProfit[msg.sender] == true && frozenProfitDate[msg.sender] + 3 days > now) {\r\n\treturn false;\r\n        } else {\r\n    if (reward < 1) reward = 1; \r\n    if (balance[this] < reward) throw;  \r\n    balance[msg.sender] += reward; \r\n    balance[this] -= reward; \r\n    frozenAccountProfit[msg.sender] = true;  \r\n    frozenProfitDate[msg.sender] = now;    \r\n    Transfer(this, msg.sender, (reward));     \r\n    return true;\r\n\t }\r\n    }\r\n\r\n    function buy() payable returns (bool success) {\r\n\tif (!crowdsale) {return false;} \r\n\telse {  \r\n\tuint amount = msg.value / buyPrice;                \r\n        totalTokens += amount;                          \r\n        balance[msg.sender] += amount;                   \r\n        Transfer(this, msg.sender, amount); \r\n\treturn true; }            \r\n    }\r\n\r\n    function fund (uint256 amount) onlyOwner {\r\n        if (!msg.sender.send(amount)) {                      \t\t\r\n          throw;                                         \r\n        }           \r\n    }\r\n\r\n    function totalSupply() external constant returns (uint256) {\r\n        return totalTokens;\r\n    }\r\n\r\n    function balanceOf(address _owner) external constant returns (uint256) {\r\n        return balance[_owner];\r\n    }\r\n\r\n    function () payable {\r\n\tif (!crowdsale) {throw;} \r\n\telse {  \r\n\tuint amount = msg.value / buyPrice;                \r\n        totalTokens += amount;                          \r\n        balance[msg.sender] += amount;                   \r\n        Transfer(this, msg.sender, amount); \r\n\t }               \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"saleover\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getreward\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"komission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccountProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenProfitDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"centralMinter\",\"type\":\"address\"}],\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TheCoin","CompilerVersion":"v0.4.2+commit.af6afb04","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007546865436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035448430000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":""}]}