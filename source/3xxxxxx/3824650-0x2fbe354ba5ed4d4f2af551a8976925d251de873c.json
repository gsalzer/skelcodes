{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract Token {\r\n    bytes32 public standard;\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public totalSupply;\r\n    uint8 public decimals;\r\n    bool public allowTransactions;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n}\r\n\r\n\r\ncontract DVIP {\r\n  function feeFor(address from, address to, uint256 amount) constant external returns (uint256 value);\r\n}\r\n\r\ncontract Assertive {\r\n  function assert(bool assertion) {\r\n    if (!assertion) throw;\r\n  }\r\n}\r\n\r\ncontract Owned is Assertive {\r\n  address internal owner;\r\n  event SetOwner(address indexed previousOwner, address indexed newOwner);\r\n  function Owned () {\r\n    owner = msg.sender;\r\n  }\r\n  modifier onlyOwner {\r\n    assert(msg.sender == owner);\r\n    _;\r\n  }\r\n  function setOwner(address newOwner) onlyOwner {\r\n    SetOwner(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n  function getOwner() returns (address out) {\r\n    return owner;\r\n  }\r\n}\r\n\r\ncontract Math is Assertive {\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Exchange is Math, Owned {\r\n\r\n  mapping (address => mapping (address => uint256)) public tokens;\r\n\r\n  mapping (bytes32 => uint256) public orderFills;\r\n  address public feeAccount;\r\n  address public dvipAddress;\r\n  address public feeMakeExporter;\r\n  address public feeTakeExporter;\r\n  event Order(address tokenBuy, uint256 amountBuy, address tokenSell, uint256 amountSell, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s);\r\n  event Cancel(address tokenBuy, uint256 amountBuy, address tokenSell, uint256 amountSell, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s);\r\n  event Trade(address tokenBuy, uint256 amountBuy, address tokenSell, uint256 amountSell, address get, address give, bytes32 hash);\r\n  event Deposit(address token, address user, uint256 amount, uint256 balance);\r\n  event Withdraw(address token, address user, uint256 amount, uint256 balance);\r\n\r\n  function Exchange(address feeAccount_, address dvipAddress_) {\r\n    feeAccount = feeAccount_;\r\n    dvipAddress = dvipAddress_;\r\n    feeMakeExporter = 0x00000000000000000000000000000000000000f7;\r\n    feeTakeExporter = 0x00000000000000000000000000000000000000f8;\r\n  }\r\n\r\n  function setFeeAccount(address feeAccount_) onlyOwner {\r\n    feeAccount = feeAccount_;\r\n  }\r\n\r\n  function setDVIP(address dvipAddress_) onlyOwner {\r\n    dvipAddress = dvipAddress_;\r\n  }\r\n\r\n  function() {\r\n    throw;\r\n  }\r\n\r\n  function deposit(address token, uint256 amount) payable {\r\n    if (token == address(0)) {\r\n      tokens[address(0)][msg.sender] = safeAdd(tokens[address(0)][msg.sender], msg.value);\r\n    } else {\r\n      if (msg.value != 0) throw;\r\n      tokens[token][msg.sender] = safeAdd(tokens[token][msg.sender], amount);\r\n      if (!Token(token).transferFrom(msg.sender, this, amount)) throw;\r\n    }\r\n    Deposit(token, msg.sender, amount, tokens[token][msg.sender]);\r\n  }\r\n\r\n  function withdraw(address token, uint256 amount) {\r\n    if (tokens[token][msg.sender] < amount) throw;\r\n    tokens[token][msg.sender] = safeSub(tokens[token][msg.sender], amount);\r\n    if (token == address(0)) {\r\n      if (!msg.sender.send(amount)) throw;\r\n    } else {\r\n      if (!Token(token).transfer(msg.sender, amount)) throw;\r\n    }\r\n    Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);\r\n  }\r\n\r\n  function balanceOf(address token, address user) constant returns (uint256) {\r\n    return tokens[token][user];\r\n  }\r\n\r\n  uint256 internal feeTake;\r\n  uint256 internal feeMake;\r\n  uint256 internal feeTerm;\r\n  bytes32 internal tradeHash;\r\n\r\n  function trade(address tokenBuy, uint256 amountBuy, address tokenSell, uint256 amountSell, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s, uint256 amount) {\r\n    //amount is in amountBuy terms\r\n    tradeHash = sha3(this, tokenBuy, amountBuy, tokenSell, amountSell, expires, nonce, user);\r\n    if (!(\r\n      ecrecover(sha3(\"\\x19Ethereum Signed Message:\\n32\", tradeHash),v,r,s) == user &&\r\n      block.number <= expires &&\r\n      safeAdd(orderFills[tradeHash], amount) <= amountBuy &&\r\n      tokens[tokenBuy][msg.sender] >= amount &&\r\n      tokens[tokenSell][user] >= safeMul(amountSell, amount) / amountBuy\r\n    )) throw;\r\n    feeMake = DVIP(dvipAddress).feeFor(feeMakeExporter, msg.sender, 1 ether);\r\n    feeTake = DVIP(dvipAddress).feeFor(feeTakeExporter, user, 1 ether);\r\n    tokens[tokenBuy][msg.sender] = safeSub(tokens[tokenBuy][msg.sender], amount);\r\n    feeTerm = safeMul(amount, ((1 ether) - feeMake)) / (1 ether);\r\n    tokens[tokenBuy][user] = safeAdd(tokens[tokenBuy][user], feeTerm);\r\n    feeTerm = safeMul(amount, feeMake) / (1 ether);\r\n    tokens[tokenBuy][feeAccount] = safeAdd(tokens[tokenBuy][feeAccount], feeTerm);\r\n    feeTerm = safeMul(amountSell, amount) / amountBuy;\r\n    tokens[tokenSell][user] = safeSub(tokens[tokenSell][user], feeTerm);\r\n    feeTerm = safeMul(safeMul(((1 ether) - feeTake), amountSell), amount) / amountBuy / (1 ether);\r\n    tokens[tokenSell][msg.sender] = safeAdd(tokens[tokenSell][msg.sender], feeTerm);\r\n    feeTerm = safeMul(safeMul(feeTake, amountSell), amount) / amountBuy / (1 ether);\r\n    tokens[tokenSell][feeAccount] = safeAdd(tokens[tokenSell][feeAccount], feeTerm);\r\n    orderFills[tradeHash] = safeAdd(orderFills[tradeHash], amount);\r\n    Trade(tokenBuy, amount, tokenSell, amountSell * amount / amountBuy, user, msg.sender, tradeHash);\r\n  }\r\n\r\n  bytes32 internal testHash;\r\n  uint256 internal amountSelln;\r\n\r\n  function testTrade(address tokenBuy, uint256 amountBuy, address tokenSell, uint256 amountSell, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s, uint256 amount, address sender) constant returns (uint8 code) {\r\n    testHash = sha3(this, tokenBuy, amountBuy, tokenSell, amountSell, expires, nonce, user);\r\n    if (tokens[tokenBuy][sender] < amount) return 1;\r\n    if (ecrecover(sha3(\"\\x19Ethereum Signed Message:\\n32\", testHash), v, r, s) != user) return 4;\r\n    amountSelln = safeMul(amountSell, amount) / amountBuy;\r\n    if (tokens[tokenSell][user] < amountSelln) return 5;\r\n    if (block.number > expires) return 6;\r\n    if (safeAdd(orderFills[testHash], amount) > amountBuy) return 7;\r\n    return 0;\r\n  }\r\n  function cancelOrder(address tokenBuy, uint256 amountBuy, address tokenSell, uint256 amountSell, uint256 expires, uint256 nonce, uint8 v, bytes32 r, bytes32 s, address user) {\r\n    bytes32 hash = sha3(this, tokenBuy, amountBuy, tokenSell, amountSell, expires, nonce, user);\r\n    if (ecrecover(sha3(\"\\x19Ethereum Signed Message:\\n32\", hash),v,r,s) != msg.sender) throw;\r\n    orderFills[hash] = amountBuy;\r\n    Cancel(tokenBuy, amountBuy, tokenSell, amountSell, expires, nonce, msg.sender, v, r, s);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"feeMakeExporter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assertion\",\"type\":\"bool\"}],\"name\":\"assert\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenBuy\",\"type\":\"address\"},{\"name\":\"amountBuy\",\"type\":\"uint256\"},{\"name\":\"tokenSell\",\"type\":\"address\"},{\"name\":\"amountSell\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTakeExporter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenBuy\",\"type\":\"address\"},{\"name\":\"amountBuy\",\"type\":\"uint256\"},{\"name\":\"tokenSell\",\"type\":\"address\"},{\"name\":\"amountSell\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeAccount_\",\"type\":\"address\"}],\"name\":\"setFeeAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dvipAddress_\",\"type\":\"address\"}],\"name\":\"setDVIP\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenBuy\",\"type\":\"address\"},{\"name\":\"amountBuy\",\"type\":\"uint256\"},{\"name\":\"tokenSell\",\"type\":\"address\"},{\"name\":\"amountSell\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"testTrade\",\"outputs\":[{\"name\":\"code\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"out\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dvipAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderFills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"feeAccount_\",\"type\":\"address\"},{\"name\":\"dvipAddress_\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenBuy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenSell\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountSell\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"v\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"r\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"Order\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenBuy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenSell\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountSell\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"v\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"r\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenBuy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenSell\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountSell\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"get\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"give\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"SetOwner\",\"type\":\"event\"}]","ContractName":"Exchange","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://9701fc356a0aac5922619b61589940adda2776e51edef973ec80e2b3b4aa5453"}]}