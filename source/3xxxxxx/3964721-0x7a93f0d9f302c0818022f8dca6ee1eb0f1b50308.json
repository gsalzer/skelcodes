{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n * ERC20Basic\r\n * Simpler version of ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n/*\r\n * ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n  function transferFrom(address from, address to, uint value);\r\n  function approve(address spender, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/*\r\n * Basic token\r\n * Basic version of StandardToken, with no allowances\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  /*\r\n   * Fix for the ERC20 short address attack  \r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n     if(msg.data.length < size + 4) {\r\n       throw;\r\n     }\r\n     _;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n  \r\n}\r\n\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  function transferFrom(address _from, address _to, uint _value) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint _value) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/*\r\n\r\nLimitedTransferToken defines the generic interface and the implementation\r\nto limit token transferability for different events.\r\n\r\nIt is intended to be used as a base class for other token contracts.\r\n\r\nOverwriting transferableTokens(address holder, uint64 time) is the way to provide\r\nthe specific logic for limiting token transferability for a holder over time.\r\n\r\nLimitedTransferToken has been designed to allow for different limiting factors,\r\nthis can be achieved by recursively calling super.transferableTokens() until the\r\nbase class is hit. For example:\r\n\r\nfunction transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n  return min256(unlockedTokens, super.transferableTokens(holder, time));\r\n}\r\n\r\nA working example is VestedToken.sol:\r\nhttps://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/VestedToken.sol\r\n\r\n*/\r\n\r\ncontract LimitedTransferToken is ERC20 {\r\n  // Checks whether it can transfer or otherwise throws.\r\n  modifier canTransfer(address _sender, uint _value) {\r\n   if (_value > transferableTokens(_sender, uint64(now))) throw;\r\n   _;\r\n  }\r\n\r\n  // Checks modifier and allows transfer if tokens are not locked.\r\n  function transfer(address _to, uint _value) canTransfer(msg.sender, _value) {\r\n   return super.transfer(_to, _value);\r\n  }\r\n\r\n  // Checks modifier and allows transfer if tokens are not locked.\r\n  function transferFrom(address _from, address _to, uint _value) canTransfer(_from, _value) {\r\n   return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  // Default transferable tokens function returns all tokens for a holder (no limit).\r\n  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n    return balanceOf(holder);\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract OxToken is StandardToken, LimitedTransferToken, Ownable {\r\n  using SafeMath for uint;\r\n\r\n  event OxTokenInitialized(address _owner);\r\n  event InitialTokensAllocated(uint _amount);\r\n  event OwnerTokensAllocated(uint _amount);\r\n  event SaleStarted(uint _saleEndTime);\r\n\r\n  string public name = \"OxToken\";\r\n  string public symbol = \"OX\";\r\n\r\n  uint public decimals = 3;\r\n  uint public multiplier = 10**decimals;\r\n  uint public etherRatio = SafeMath.div(1 ether, multiplier);\r\n\r\n  uint public MAX_SUPPLY = SafeMath.mul(700000000, multiplier); //50% (public) + 20% (corporate)\r\n  uint public CORPORATE_SUPPLY = SafeMath.mul(200000000, multiplier); //20%\r\n  uint public BOUNTY_SUPPLY = SafeMath.mul(200000000, multiplier); //20%\r\n  uint public TEAM_SUPPLY = SafeMath.mul(100000000, multiplier); //10%\r\n  uint public PRICE = 3000; //1 Ether buys 3000 OX\r\n  uint public MIN_PURCHASE = 10**17; // 0.1 Ether\r\n\r\n  uint256 public saleStartTime = 0;\r\n  bool public ownerTokensAllocated = false;\r\n  bool public balancesInitialized = false;\r\n\r\n  function OxToken() {\r\n    OxTokenInitialized(msg.sender);\r\n  }\r\n\r\n  function initializeBalances() public {\r\n    if (balancesInitialized) {\r\n      throw;\r\n    }\r\n    balances[owner] = CORPORATE_SUPPLY;\r\n    totalSupply = CORPORATE_SUPPLY;\r\n    balancesInitialized = true;\r\n    Transfer(0x0, msg.sender, CORPORATE_SUPPLY);\r\n    InitialTokensAllocated(CORPORATE_SUPPLY);\r\n  }\r\n\r\n  function canBuyTokens() constant public returns (bool) {\r\n    //Sale runs for 31 days\r\n    if (saleStartTime == 0) {\r\n      return false;\r\n    }\r\n    if (getNow() > SafeMath.add(saleStartTime, 31 days)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n    //Owner can always transfer balance\r\n    //If sale has completed, everyone can transfer full balance\r\n    if (holder == owner) {\r\n      return balanceOf(holder);\r\n    }\r\n    if ((saleStartTime == 0) || canBuyTokens()) {\r\n      return 0;\r\n    }\r\n    return balanceOf(holder);\r\n  }\r\n\r\n  function startSale() onlyOwner {\r\n    //Can only start once\r\n    if (saleStartTime != 0) {\r\n      throw;\r\n    }\r\n    saleStartTime = getNow();\r\n    SaleStarted(saleStartTime);\r\n  }\r\n\r\n  function () payable {\r\n    createTokens(msg.sender);\r\n  }\r\n\r\n  function createTokens(address recipient) payable {\r\n\r\n    //Only allow purchases over the MIN_PURCHASE\r\n    if (msg.value < MIN_PURCHASE) {\r\n      throw;\r\n    }\r\n\r\n    //Reject if sale has completed\r\n    if (!canBuyTokens()) {\r\n      throw;\r\n    }\r\n\r\n    //Otherwise generate tokens\r\n    uint tokens = msg.value.mul(PRICE);\r\n\r\n    //Add on any bonus\r\n    uint bonusPercentage = SafeMath.add(100, bonus());\r\n    if (bonusPercentage != 100) {\r\n      tokens = tokens.mul(percent(bonusPercentage)).div(percent(100));\r\n    }\r\n\r\n    tokens = tokens.div(etherRatio);\r\n\r\n    totalSupply = totalSupply.add(tokens);\r\n\r\n    //Don't allow totalSupply to be larger than MAX_SUPPLY\r\n    if (totalSupply > MAX_SUPPLY) {\r\n      throw;\r\n    }\r\n\r\n    balances[recipient] = balances[recipient].add(tokens);\r\n\r\n    //Transfer Ether to owner\r\n    owner.transfer(msg.value);\r\n\r\n  }\r\n\r\n  //Function to assign team & bounty tokens to owner\r\n  function allocateOwnerTokens() public {\r\n\r\n    //Can only be called once\r\n    if (ownerTokensAllocated) {\r\n      throw;\r\n    }\r\n\r\n    //Can only be called after sale has completed\r\n    if ((saleStartTime == 0) || canBuyTokens()) {\r\n      throw;\r\n    }\r\n\r\n    ownerTokensAllocated = true;\r\n\r\n    uint amountToAllocate = SafeMath.add(BOUNTY_SUPPLY, TEAM_SUPPLY);\r\n    balances[msg.sender] = balances[msg.sender].add(amountToAllocate);\r\n    totalSupply = totalSupply.add(amountToAllocate);\r\n\r\n    Transfer(0x0, msg.sender, amountToAllocate);\r\n    OwnerTokensAllocated(amountToAllocate);\r\n\r\n  }\r\n\r\n  function bonus() constant returns(uint) {\r\n\r\n    uint elapsed = SafeMath.sub(getNow(), saleStartTime);\r\n\r\n    if (elapsed < 1 days) return 25;\r\n    if (elapsed < 1 weeks) return 20;\r\n    if (elapsed < 2 weeks) return 15;\r\n    if (elapsed < 3 weeks) return 10;\r\n    if (elapsed < 4 weeks) return 5;\r\n\r\n    return 0;\r\n  }\r\n\r\n  function percent(uint256 p) internal returns (uint256) {\r\n    return p.mul(10**16);\r\n  }\r\n\r\n  //Function is mocked for tests\r\n  function getNow() internal constant returns (uint256) {\r\n    return now;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balancesInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CORPORATE_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOUNTY_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canBuyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocateOwnerTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"transferableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_PURCHASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerTokensAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initializeBalances\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"OxTokenInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"InitialTokensAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"OwnerTokensAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_saleEndTime\",\"type\":\"uint256\"}],\"name\":\"SaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"OxToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://482ad94983187bead1f0252e276c603bda4eeee35221e40d00454a11ba4e4714"}]}