{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\n/*\r\nThis file is part of Pass DAO.\r\n\r\nPass DAO is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nPass DAO is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU lesser General Public License\r\nalong with Pass DAO.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/*\r\nSmart contract for a Decentralized Autonomous Organization (DAO)\r\nto automate organizational governance and decision-making.\r\n*/\r\n\r\n/// @title Pass Dao smart contract\r\ncontract PassDao {\r\n    \r\n    struct revision {\r\n        // Address of the Committee Room smart contract\r\n        address committeeRoom;\r\n        // Address of the share manager smart contract\r\n        address shareManager;\r\n        // Address of the token manager smart contract\r\n        address tokenManager;\r\n        // Address of the project creator smart contract\r\n        uint startDate;\r\n    }\r\n    // The revisions of the application until today\r\n    revision[] public revisions;\r\n\r\n    struct project {\r\n        // The address of the smart contract\r\n        address contractAddress;\r\n        // The unix effective start date of the contract\r\n        uint startDate;\r\n    }\r\n    // The projects of the Dao\r\n    project[] public projects;\r\n\r\n    // Map with the indexes of the projects\r\n    mapping (address => uint) projectID;\r\n    \r\n    // The address of the meta project\r\n    address metaProject;\r\n\r\n    \r\n// Events\r\n\r\n    event Upgrade(uint indexed RevisionID, address CommitteeRoom, address ShareManager, address TokenManager);\r\n    event NewProject(address Project);\r\n\r\n// Constant functions  \r\n    \r\n    /// @return The effective committee room\r\n    function ActualCommitteeRoom() constant returns (address) {\r\n        return revisions[0].committeeRoom;\r\n    }\r\n    \r\n    /// @return The meta project\r\n    function MetaProject() constant returns (address) {\r\n        return metaProject;\r\n    }\r\n\r\n    /// @return The effective share manager\r\n    function ActualShareManager() constant returns (address) {\r\n        return revisions[0].shareManager;\r\n    }\r\n\r\n    /// @return The effective token manager\r\n    function ActualTokenManager() constant returns (address) {\r\n        return revisions[0].tokenManager;\r\n    }\r\n\r\n// modifiers\r\n\r\n    modifier onlyPassCommitteeRoom {if (msg.sender != revisions[0].committeeRoom  \r\n        && revisions[0].committeeRoom != 0) throw; _;}\r\n    \r\n// Constructor function\r\n\r\n    function PassDao() {\r\n        projects.length = 1;\r\n        revisions.length = 1;\r\n    }\r\n    \r\n// Register functions\r\n\r\n    /// @dev Function to allow the actual Committee Room upgrading the application\r\n    /// @param _newCommitteeRoom The address of the new committee room\r\n    /// @param _newShareManager The address of the new share manager\r\n    /// @param _newTokenManager The address of the new token manager\r\n    /// @return The index of the revision\r\n    function upgrade(\r\n        address _newCommitteeRoom, \r\n        address _newShareManager, \r\n        address _newTokenManager) onlyPassCommitteeRoom returns (uint) {\r\n        \r\n        uint _revisionID = revisions.length++;\r\n        revision r = revisions[_revisionID];\r\n\r\n        if (_newCommitteeRoom != 0) r.committeeRoom = _newCommitteeRoom; else r.committeeRoom = revisions[0].committeeRoom;\r\n        if (_newShareManager != 0) r.shareManager = _newShareManager; else r.shareManager = revisions[0].shareManager;\r\n        if (_newTokenManager != 0) r.tokenManager = _newTokenManager; else r.tokenManager = revisions[0].tokenManager;\r\n\r\n        r.startDate = now;\r\n        \r\n        revisions[0] = r;\r\n        \r\n        Upgrade(_revisionID, _newCommitteeRoom, _newShareManager, _newTokenManager);\r\n            \r\n        return _revisionID;\r\n    }\r\n\r\n    /// @dev Function to set the meta project\r\n    /// @param _projectAddress The address of the meta project\r\n    function addMetaProject(address _projectAddress) onlyPassCommitteeRoom {\r\n\r\n        metaProject = _projectAddress;\r\n    }\r\n    \r\n    /// @dev Function to allow the committee room to add a project when ordering\r\n    /// @param _projectAddress The address of the project\r\n    function addProject(address _projectAddress) onlyPassCommitteeRoom {\r\n\r\n        if (projectID[_projectAddress] == 0) {\r\n\r\n            uint _projectID = projects.length++;\r\n            project p = projects[_projectID];\r\n        \r\n            projectID[_projectAddress] = _projectID;\r\n            p.contractAddress = _projectAddress; \r\n            p.startDate = now;\r\n            \r\n            NewProject(_projectAddress);\r\n        }\r\n    }\r\n    \r\n}\r\n\r\npragma solidity ^0.4.8;\r\n\r\n/*\r\n *\r\n * This file is part of Pass DAO.\r\n *\r\n * The Project smart contract is used for the management of the Pass Dao projects.\r\n *\r\n*/\r\n\r\n/// @title Project smart contract of the Pass Decentralized Autonomous Organisation\r\ncontract PassProject {\r\n\r\n    // The Pass Dao smart contract\r\n    PassDao public passDao;\r\n    \r\n    // The project name\r\n    string public name;\r\n    // The project description\r\n    string public description;\r\n    // The Hash Of the project Document\r\n    bytes32 public hashOfTheDocument;\r\n    // The project manager smart contract\r\n    address projectManager;\r\n\r\n    struct order {\r\n        // The address of the contractor smart contract\r\n        address contractorAddress;\r\n        // The index of the contractor proposal\r\n        uint contractorProposalID;\r\n        // The amount of the order\r\n        uint amount;\r\n        // The date of the order\r\n        uint orderDate;\r\n    }\r\n    // The orders of the Dao for this project\r\n    order[] public orders;\r\n    \r\n    // The total amount of orders in wei for this project\r\n    uint public totalAmountOfOrders;\r\n\r\n    struct resolution {\r\n        // The name of the resolution\r\n        string name;\r\n        // A description of the resolution\r\n        string description;\r\n        // The date of the resolution\r\n        uint creationDate;\r\n    }\r\n    // Resolutions of the Dao for this project\r\n    resolution[] public resolutions;\r\n    \r\n// Events\r\n\r\n    event OrderAdded(address indexed Client, address indexed ContractorAddress, uint indexed ContractorProposalID, uint Amount, uint OrderDate);\r\n    event ProjectDescriptionUpdated(address indexed By, string NewDescription, bytes32 NewHashOfTheDocument);\r\n    event ResolutionAdded(address indexed Client, uint indexed ResolutionID, string Name, string Description);\r\n\r\n// Constant functions  \r\n\r\n    /// @return the actual committee room of the Dao   \r\n    function Client() constant returns (address) {\r\n        return passDao.ActualCommitteeRoom();\r\n    }\r\n    \r\n    /// @return The number of orders \r\n    function numberOfOrders() constant returns (uint) {\r\n        return orders.length - 1;\r\n    }\r\n    \r\n    /// @return The project Manager address\r\n    function ProjectManager() constant returns (address) {\r\n        return projectManager;\r\n    }\r\n\r\n    /// @return The number of resolutions \r\n    function numberOfResolutions() constant returns (uint) {\r\n        return resolutions.length - 1;\r\n    }\r\n    \r\n// modifiers\r\n\r\n    // Modifier for project manager functions \r\n    modifier onlyProjectManager {if (msg.sender != projectManager) throw; _;}\r\n\r\n    // Modifier for the Dao functions \r\n    modifier onlyClient {if (msg.sender != Client()) throw; _;}\r\n\r\n// Constructor function\r\n\r\n    function PassProject(\r\n        PassDao _passDao, \r\n        string _name,\r\n        string _description,\r\n        bytes32 _hashOfTheDocument) {\r\n\r\n        passDao = _passDao;\r\n        name = _name;\r\n        description = _description;\r\n        hashOfTheDocument = _hashOfTheDocument;\r\n        \r\n        orders.length = 1;\r\n        resolutions.length = 1;\r\n    }\r\n    \r\n// Internal functions\r\n\r\n    /// @dev Internal function to register a new order\r\n    /// @param _contractorAddress The address of the contractor smart contract\r\n    /// @param _contractorProposalID The index of the contractor proposal\r\n    /// @param _amount The amount in wei of the order\r\n    /// @param _orderDate The date of the order \r\n    function addOrder(\r\n\r\n        address _contractorAddress, \r\n        uint _contractorProposalID, \r\n        uint _amount, \r\n        uint _orderDate) internal {\r\n\r\n        uint _orderID = orders.length++;\r\n        order d = orders[_orderID];\r\n        d.contractorAddress = _contractorAddress;\r\n        d.contractorProposalID = _contractorProposalID;\r\n        d.amount = _amount;\r\n        d.orderDate = _orderDate;\r\n        \r\n        totalAmountOfOrders += _amount;\r\n        \r\n        OrderAdded(msg.sender, _contractorAddress, _contractorProposalID, _amount, _orderDate);\r\n    }\r\n    \r\n// Setting functions\r\n\r\n    /// @notice Function to allow cloning orders in case of upgrade\r\n    /// @param _contractorAddress The address of the contractor smart contract\r\n    /// @param _contractorProposalID The index of the contractor proposal\r\n    /// @param _orderAmount The amount in wei of the order\r\n    /// @param _lastOrderDate The unix date of the last order \r\n    function cloneOrder(\r\n        address _contractorAddress, \r\n        uint _contractorProposalID, \r\n        uint _orderAmount, \r\n        uint _lastOrderDate) {\r\n        \r\n        if (projectManager != 0) throw;\r\n        \r\n        addOrder(_contractorAddress, _contractorProposalID, _orderAmount, _lastOrderDate);\r\n    }\r\n    \r\n    /// @notice Function to set the project manager\r\n    /// @param _projectManager The address of the project manager smart contract\r\n    /// @return True if successful\r\n    function setProjectManager(address _projectManager) returns (bool) {\r\n\r\n        if (_projectManager == 0 || projectManager != 0) return;\r\n        \r\n        projectManager = _projectManager;\r\n        \r\n        return true;\r\n    }\r\n\r\n// Project manager functions\r\n\r\n    /// @notice Function to allow the project manager updating the description of the project\r\n    /// @param _projectDescription A description of the project\r\n    /// @param _hashOfTheDocument The hash of the last document\r\n    function updateDescription(string _projectDescription, bytes32 _hashOfTheDocument) onlyProjectManager {\r\n        description = _projectDescription;\r\n        hashOfTheDocument = _hashOfTheDocument;\r\n        ProjectDescriptionUpdated(msg.sender, _projectDescription, _hashOfTheDocument);\r\n    }\r\n\r\n// Client functions\r\n\r\n    /// @dev Function to allow the Dao to register a new order\r\n    /// @param _contractorAddress The address of the contractor smart contract\r\n    /// @param _contractorProposalID The index of the contractor proposal\r\n    /// @param _amount The amount in wei of the order\r\n    function newOrder(\r\n        address _contractorAddress, \r\n        uint _contractorProposalID, \r\n        uint _amount) onlyClient {\r\n            \r\n        addOrder(_contractorAddress, _contractorProposalID, _amount, now);\r\n    }\r\n    \r\n    /// @dev Function to allow the Dao to register a new resolution\r\n    /// @param _name The name of the resolution\r\n    /// @param _description The description of the resolution\r\n    function newResolution(\r\n        string _name, \r\n        string _description) onlyClient {\r\n\r\n        uint _resolutionID = resolutions.length++;\r\n        resolution d = resolutions[_resolutionID];\r\n        \r\n        d.name = _name;\r\n        d.description = _description;\r\n        d.creationDate = now;\r\n\r\n        ResolutionAdded(msg.sender, _resolutionID, d.name, d.description);\r\n    }\r\n}\r\n\r\ncontract PassProjectCreator {\r\n    \r\n    event NewPassProject(PassDao indexed Dao, PassProject indexed Project, string Name, string Description, bytes32 HashOfTheDocument);\r\n\r\n    /// @notice Function to create a new Pass project\r\n    /// @param _passDao The Pass Dao smart contract\r\n    /// @param _name The project name\r\n    /// @param _description The project description (not mandatory, can be updated after by the creator)\r\n    /// @param _hashOfTheDocument The Hash Of the project Document (not mandatory, can be updated after by the creator)\r\n    function createProject(\r\n        PassDao _passDao,\r\n        string _name, \r\n        string _description, \r\n        bytes32 _hashOfTheDocument\r\n        ) returns (PassProject) {\r\n\r\n        PassProject _passProject = new PassProject(_passDao, _name, _description, _hashOfTheDocument);\r\n\r\n        NewPassProject(_passDao, _passProject, _name, _description, _hashOfTheDocument);\r\n\r\n        return _passProject;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfResolutions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"passDao\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hashOfTheDocument\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractorAddress\",\"type\":\"address\"},{\"name\":\"_contractorProposalID\",\"type\":\"uint256\"},{\"name\":\"_orderAmount\",\"type\":\"uint256\"},{\"name\":\"_lastOrderDate\",\"type\":\"uint256\"}],\"name\":\"cloneOrder\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmountOfOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Client\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resolutions\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"creationDate\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"contractorAddress\",\"type\":\"address\"},{\"name\":\"contractorProposalID\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"orderDate\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ProjectManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectDescription\",\"type\":\"string\"},{\"name\":\"_hashOfTheDocument\",\"type\":\"bytes32\"}],\"name\":\"updateDescription\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractorAddress\",\"type\":\"address\"},{\"name\":\"_contractorProposalID\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"newOrder\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"newResolution\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectManager\",\"type\":\"address\"}],\"name\":\"setProjectManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_passDao\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_hashOfTheDocument\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"Client\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ContractorAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ContractorProposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"OrderDate\",\"type\":\"uint256\"}],\"name\":\"OrderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"By\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"NewDescription\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"NewHashOfTheDocument\",\"type\":\"bytes32\"}],\"name\":\"ProjectDescriptionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"Client\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ResolutionID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"Description\",\"type\":\"string\"}],\"name\":\"ResolutionAdded\",\"type\":\"event\"}]","ContractName":"PassProject","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ad2D970EDFF30d8f166989470aaF4BE3Ff6375aE000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d412064697374726962757465642064656c69766572792073797374656d0000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://36ed9225af1fc2e7b4f5cb6d4ca6cb17c92091b487fc408e9953bbad258c6a63"}]}