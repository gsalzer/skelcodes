{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control \r\n * functions, this simplifies the implementation of \"user permissions\". \r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /** \r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner. \r\n   */\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to. \r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    if (paused) throw;\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    if (!paused) throw;\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint256 size) {\r\n     if(msg.data.length < size + 4) {\r\n       throw;\r\n     }\r\n     _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Helps contracts guard agains rentrancy attacks.\r\n * @author Remco Bloemen <remco@2Ï€.com>\r\n * @notice If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract. \r\n   */\r\n  bool private rentrancy_lock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    if(rentrancy_lock == false) {\r\n      rentrancy_lock = true;\r\n      _;\r\n      rentrancy_lock = false;\r\n    } else {\r\n      throw;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract EtchReward is Pausable, BasicToken, ReentrancyGuard {\r\n\r\n    // address public owner;                // Ownable\r\n    // bool public paused = false;          // Pausable\r\n    // mapping(address => uint) balances;   // BasicToken\r\n    // uint public totalSupply;             // ERC20Basic\r\n    // bool private rentrancy_lock = false; // ReentrancyGuard\r\n\r\n    //\r\n    // @dev constants\r\n    //\r\n    string public constant name   = \"Etch Reward Token\";\r\n    string public constant symbol = \"ETCHR\";\r\n    uint public constant decimals = 18;\r\n\r\n    //\r\n    // @dev the main address to be forwarded all ether\r\n    //\r\n    address public constant BENEFICIARY = 0x651A3731f717a17777c9D8d6f152Aa9284978Ea3;\r\n\r\n    // @dev number of tokens one receives for every 1 ether they send\r\n    uint public constant PRICE = 8;\r\n\r\n    // avg block time = 15.2569 https://etherscan.io/chart/blocktime\r\n    uint public constant AVG_BLOCKS_24H = 5663;  // 3600 * 24 / 15.2569 = 5663.011489883266\r\n    uint public constant AVG_BLOCKS_02W = 79282; // 3600 * 24 * 14 / 15.2569 =  79282.16085836572\r\n\r\n    uint public constant MAX_ETHER_24H = 40 ether;\r\n    uint public constant ETHER_CAP     = 2660 ether;\r\n\r\n    uint public totalEther = 0;\r\n    uint public blockStart = 0;\r\n    uint public block24h   = 0;\r\n    uint public block02w   = 0;\r\n\r\n    // @dev address of the actual ICO contract to be deployed later\r\n    address public icoContract = 0x0;\r\n\r\n    //\r\n    // @dev owner authorized addresses to participate in this pre-ico\r\n    //\r\n    mapping(address => bool) contributors;\r\n\r\n\r\n    // @dev constructor function\r\n    function EtchReward(uint _blockStart) {\r\n        blockStart  = _blockStart;\r\n        block24h = blockStart + AVG_BLOCKS_24H;\r\n        block02w = blockStart + AVG_BLOCKS_02W;\r\n    }\r\n\r\n    //\r\n    // @notice the ability to transfer tokens is disabled\r\n    //\r\n    function transfer(address, uint) {\r\n        throw;\r\n    }\r\n\r\n    //\r\n    // @notice we DO allow sending ether directly to the contract address\r\n    //\r\n    function () payable {\r\n        buy();\r\n    }\r\n\r\n    //\r\n    // @dev modifiers\r\n    //\r\n    modifier onlyContributors() {\r\n        if(contributors[msg.sender] != true) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyIcoContract() {\r\n        if(icoContract == 0x0 || msg.sender != icoContract) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    //\r\n    // @dev call this to authorize participants to this pre-ico sale\r\n    // @param the authorized participant address\r\n    //\r\n    function addContributor(address _who) public onlyOwner {\r\n        contributors[_who] = true;\r\n    }\r\n\r\n    // @dev useful for contributor to check before sending ether\r\n    function isContributor(address _who) public constant returns(bool) {\r\n        return contributors[_who];\r\n    }\r\n\r\n    //\r\n    // @dev this will be later set by the owner of this contract\r\n    //\r\n    function setIcoContract(address _contract) public onlyOwner {\r\n        icoContract = _contract;\r\n    }\r\n\r\n    //\r\n    // @dev function called by the ICO contract to transform the tokens into ETCH tokens\r\n    //\r\n    function migrate(address _contributor) public\r\n    onlyIcoContract\r\n    whenNotPaused {\r\n\r\n        if(getBlock() < block02w) {\r\n            throw;\r\n        }\r\n        totalSupply = totalSupply.sub(balances[_contributor]);\r\n        balances[_contributor] = 0;\r\n    }\r\n\r\n    function buy() payable\r\n    nonReentrant\r\n    onlyContributors\r\n    whenNotPaused {\r\n\r\n        address _recipient = msg.sender;\r\n        uint blockNow = getBlock();\r\n\r\n        // are we before or after the sale period?\r\n        if(blockNow < blockStart || block02w <= blockNow) {\r\n            throw;\r\n        }\r\n\r\n        if (blockNow < block24h) {\r\n\r\n            // only one transaction is authorized\r\n            if (balances[_recipient] > 0) {\r\n                throw;\r\n            }\r\n\r\n            // only allowed to buy a certain amount\r\n            if (msg.value > MAX_ETHER_24H) {\r\n                throw;\r\n            }\r\n        }\r\n\r\n        // make sure we don't go over the ether cap\r\n        if (totalEther.add(msg.value) > ETHER_CAP) {\r\n            throw;\r\n        }\r\n\r\n        uint tokens = msg.value.mul(PRICE);\r\n        totalSupply = totalSupply.add(tokens);\r\n\r\n        balances[_recipient] = balances[_recipient].add(tokens);\r\n        totalEther.add(msg.value);\r\n\r\n        if (!BENEFICIARY.send(msg.value)) {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    uint public blockNumber = 0;\r\n\r\n    function getBlock() public constant returns (uint) {\r\n        if(blockNumber != 0) {\r\n            return blockNumber;\r\n        }\r\n        return block.number;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isContributor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BENEFICIARY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"block02w\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"block24h\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVG_BLOCKS_24H\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"addContributor\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ETHER_24H\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setIcoContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHER_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVG_BLOCKS_02W\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_blockStart\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"EtchReward","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000003c3c6d","Library":"","SwarmSource":"bzzr://20724bf6e62eff2181a0f101079f0b45f629a04133d92366a2dd40170e2eb72c"}]}