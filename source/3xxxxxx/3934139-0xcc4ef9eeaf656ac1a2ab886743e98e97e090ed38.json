{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/* taking ideas from FirstBlood token */\r\ncontract SafeMath {\r\n\r\n    /* function assert(bool assertion) internal { */\r\n    /*   if (!assertion) { */\r\n    /*     throw; */\r\n    /*   } */\r\n    /* }      // assert no longer needed once solidity is on 0.4.10 */\r\n\r\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n}\r\n\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n/*  ERC 20 token */\r\ncontract StandardToken is Token {\r\n\r\n  modifier onlyPayloadSize(uint size) {\r\n     if(msg.data.length < size + 4) {\r\n       throw;\r\n     }\r\n     _;\r\n  }\r\n\r\n\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool success) {\r\n      if (balances[msg.sender] >= _value && _value > 0) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\ncontract splitterContract is Ownable{\r\n\r\n    event ev(string msg, address whom, uint256 val);\r\n\r\n    struct xRec {\r\n        bool inList;\r\n        address next;\r\n        address prev;\r\n        uint256 val;\r\n    }\r\n\r\n    struct l8r {\r\n        address whom;\r\n        uint256 val;\r\n    }\r\n    address public myAddress = this;\r\n    address public first;\r\n    address public last;\r\n    address public ddf;\r\n    bool    public thinkMode;\r\n    uint256 public pos;\r\n\r\n    mapping (address => xRec) public theList;\r\n\r\n    l8r[]  afterParty;\r\n\r\n    modifier onlyMeOrDDF() {\r\n        if (msg.sender == ddf || msg.sender == myAddress || msg.sender == owner) {\r\n            _;\r\n            return;\r\n        }\r\n    }\r\n\r\n    function setDDF(address ddf_) onlyOwner {\r\n        ddf = ddf_;\r\n    }\r\n\r\n    function splitterContract(address seed, uint256 seedVal) {\r\n        first = seed;\r\n        last = seed;\r\n        theList[seed] = xRec(true,0x0,0x0,seedVal);\r\n    }\r\n\r\n    function startThinking() onlyOwner {\r\n        thinkMode = true;\r\n        pos = 0;\r\n    }\r\n\r\n    function stopThinking(uint256 num) onlyOwner {\r\n        thinkMode = false;\r\n        for (uint256 i = 0; i < num; i++) {\r\n            if (pos >= afterParty.length) {\r\n                delete afterParty;\r\n                return;\r\n            }\r\n            update(afterParty[pos].whom,afterParty[pos].val);\r\n            pos++;\r\n        }\r\n        thinkMode = true;\r\n    } \r\n\r\n    function thinkLength() constant returns (uint256) {\r\n        return afterParty.length;\r\n    }\r\n\r\n    function addRec4L8R(address whom, uint256 val) internal {\r\n        afterParty.push(l8r(whom,val));\r\n    }\r\n\r\n    function add(address whom, uint256 value) internal {\r\n        theList[whom] = xRec(true,0x0,last,value);\r\n        theList[last].next = whom;\r\n        last = whom;\r\n        ev(\"add\",whom,value);\r\n    }\r\n\r\n    function remove(address whom) internal {\r\n        if (first == whom) {\r\n            first = theList[whom].next;\r\n            theList[whom] = xRec(false,0x0,0x0,0);\r\n            return;\r\n        }\r\n        address next = theList[whom].next;\r\n        address prev = theList[whom].prev;\r\n        if (prev != 0x0) {\r\n            theList[prev].next = next;\r\n        }\r\n        if (next != 0x0) {\r\n            theList[next].prev = prev;\r\n        }\r\n        theList[whom] = xRec(false,0x0,0x0,0);\r\n        ev(\"remove\",whom,0);\r\n    }\r\n\r\n    function update(address whom, uint256 value) onlyMeOrDDF {\r\n        if (thinkMode) {\r\n            addRec4L8R(whom,value);\r\n            return;\r\n        }\r\n        if (value != 0) {\r\n            if (!theList[whom].inList) {\r\n                add(whom,value);\r\n            } else {\r\n                theList[whom].val = value;\r\n                ev(\"update\",whom,value);\r\n            }\r\n            return;\r\n        }\r\n        if (theList[whom].inList) {\r\n                remove(whom);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract DDFToken is StandardToken, SafeMath {\r\n\r\n    // metadata\r\n    string public constant name = \"Digital Developers Fund Token\";\r\n    string public constant symbol = \"DDF\";\r\n    uint256 public constant decimals = 18;\r\n    string public version = \"1.0\";\r\n\r\n    // contracts\r\n    address public ethFundDeposit;      // deposit address for ETH for Domain Development Fund\r\n    address public ddftFundDeposit;     // deposit address for Domain Development Fund reserve\r\n    address public splitter;          // DA 8/6/2017 - splitter contract\r\n\r\n    // crowdsale parameters\r\n    bool public isFinalized;              // switched to true in operational state\r\n    uint256 public fundingStartTime;\r\n    uint256 public fundingEndTime;\r\n    uint256 public constant ddftFund = 25 * (10**5) * 10**decimals;   // 1m DDFT reserved for DDF use\r\n    uint256 public constant tokenExchangeRate = 1000;               // 1000 DDFT tokens per 1 ETH\r\n    uint256 public constant tokenCreationCap =  250 * (10**6) * 10**decimals;\r\n    uint256 public constant tokenCreationMin =  1 * (10**6) * 10**decimals;\r\n\r\n\r\n    // events\r\n    event LogRefund(address indexed _to, uint256 _value);\r\n    event CreateDDFT(address indexed _to, uint256 _value);\r\n\r\n    // constructor\r\n    function DDFToken(\r\n        address _ethFundDeposit,\r\n        address _ddftFundDeposit,\r\n        address _splitter, // DA 8/6/2017\r\n        uint256 _fundingStartTime,\r\n        uint256 duration)\r\n    {\r\n      isFinalized = false;                   //controls pre through crowdsale state\r\n      ethFundDeposit = _ethFundDeposit;\r\n      ddftFundDeposit = _ddftFundDeposit;\r\n      splitter =  _splitter ;                  // DA 8/6/2017\r\n      fundingStartTime = _fundingStartTime;\r\n      fundingEndTime = fundingStartTime + duration * 1 days;\r\n      totalSupply = ddftFund;\r\n      balances[ddftFundDeposit] = ddftFund;    // Deposit DDF share\r\n      CreateDDFT(ddftFundDeposit, ddftFund);  // logs DDF fund\r\n    }\r\n\r\n    function () payable {           // DA 8/6/2017 prefer to use fallback function\r\n      createTokens(msg.value);\r\n    }\r\n\r\n    /// @dev Accepts ether and creates new DDFT tokens.\r\n    function createTokens(uint256 _value)  internal {\r\n      if (isFinalized) throw;\r\n      if (now < fundingStartTime) throw;\r\n      if (now > fundingEndTime) throw;\r\n      if (msg.value == 0) throw;\r\n\r\n      uint256 tokens = safeMult(_value, tokenExchangeRate); // check that we're not over totals\r\n      uint256 checkedSupply = safeAdd(totalSupply, tokens);\r\n\r\n      // DA 8/6/2017 to fairly allocate the last few tokens\r\n      if (tokenCreationCap < checkedSupply) {\r\n        if (tokenCreationCap <= totalSupply) throw;  // CAP reached no more please\r\n        uint256 tokensToAllocate = safeSubtract(tokenCreationCap,totalSupply);\r\n        uint256 tokensToRefund   = safeSubtract(tokens,tokensToAllocate);\r\n        totalSupply = tokenCreationCap;\r\n        balances[msg.sender] += tokensToAllocate;  // safeAdd not needed; bad semantics to use here\r\n        uint256 etherToRefund = tokensToRefund / tokenExchangeRate;\r\n        msg.sender.transfer(etherToRefund);\r\n        CreateDDFT(msg.sender, tokensToAllocate);  // logs token creation\r\n        LogRefund(msg.sender,etherToRefund);\r\n        splitterContract(splitter).update(msg.sender,balances[msg.sender]);\r\n        return;\r\n      }\r\n      // DA 8/6/2017 end of fair allocation code\r\n      totalSupply = checkedSupply;\r\n      balances[msg.sender] += tokens;  // safeAdd not needed; bad semantics to use here\r\n      CreateDDFT(msg.sender, tokens);  // logs token creation\r\n      splitterContract(splitter).update(msg.sender,balances[msg.sender]);\r\n    }\r\n\r\n    /// @dev Ends the funding period and sends the ETH home\r\n    function finalize() external {\r\n      if (isFinalized) throw;\r\n      if (msg.sender != ethFundDeposit) throw; // locks finalize to the ultimate ETH owner\r\n      if(totalSupply < tokenCreationMin + ddftFund) throw;      // have to sell minimum to move to operational\r\n      if(now <= fundingEndTime && totalSupply != tokenCreationCap) throw;\r\n      // move to operational\r\n      isFinalized = true;\r\n      // DA 8/6/2017 change send/throw to transfer\r\n      ethFundDeposit.transfer(this.balance);  // send the eth to DDF\r\n    }\r\n\r\n    /// @dev Allows contributors to recover their ether in the case of a failed funding campaign.\r\n    function refund() external {\r\n      if(isFinalized) throw;                       // prevents refund if operational\r\n      if (now <= fundingEndTime) throw; // prevents refund until sale period is over\r\n      if(totalSupply >= tokenCreationMin + ddftFund) throw;  // no refunds if we sold enough\r\n      if(msg.sender == ddftFundDeposit) throw;    // DDF not entitled to a refund\r\n      uint256 ddftVal = balances[msg.sender];\r\n      if (ddftVal == 0) throw;\r\n      balances[msg.sender] = 0;\r\n      totalSupply = safeSubtract(totalSupply, ddftVal); // extra safe\r\n      uint256 ethVal = ddftVal / tokenExchangeRate;     // should be safe; previous throws covers edges\r\n      LogRefund(msg.sender, ethVal);               // log it \r\n      // DA 8/6/2017 change send/throw to transfer\r\n      msg.sender.transfer(ethVal);                 // if you're using a contract; make sure it works with .send gas limits\r\n    }\r\n\r\n    // DA 8/6/2017\r\n    /// @dev Updates splitter contract with ownership changes\r\n    function transfer(address _to, uint _value) returns (bool success)  {\r\n      success = super.transfer(_to,_value);\r\n      splitterContract sc = splitterContract(splitter);\r\n      sc.update(msg.sender,balances[msg.sender]);\r\n      sc.update(_to,balances[_to]);\r\n      return;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"splitter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ddftFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ddftFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ethFundDeposit\",\"type\":\"address\"},{\"name\":\"_ddftFundDeposit\",\"type\":\"address\"},{\"name\":\"_splitter\",\"type\":\"address\"},{\"name\":\"_fundingStartTime\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"CreateDDFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DDFToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001112b3019c526a036c4288b57b3e5c7ff9d363b20000000000000000000000001759b80a76f390ef4d5c14a483869b31f2c309c7000000000000000000000000da59ab6e4b9d9fb867b8a952f455c77ad92afa8e0000000000000000000000000000000000000000000000000000000059635020000000000000000000000000000000000000000000000000000000000000001e","Library":"","SwarmSource":"bzzr://fd9d72d00ec6336f1f859b938935b01a220e394b0d4d3a649e67dee31603bda5"}]}