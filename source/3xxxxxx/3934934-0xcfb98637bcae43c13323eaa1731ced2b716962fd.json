{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/* taking ideas from FirstBlood token */\r\ncontract SafeMath {\r\n\r\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n        uint256 z = x + y;\r\n        assert((z >= x) && (z >= y));\r\n        return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n        assert(x >= y);\r\n        uint256 z = x - y;\r\n        return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n        uint256 z = x * y;\r\n        assert((x == 0)||(z/x == y));\r\n        return z;\r\n    }\r\n}\r\n\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/*  ERC 20 token */\r\ncontract StandardToken is Token, SafeMath {\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    modifier onlyPayloadSize(uint numwords) {\r\n        assert(msg.data.length == numwords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)\r\n    returns (bool success)\r\n    {\r\n        if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] = safeSubtract(balances[msg.sender], _value);\r\n            balances[_to] = safeAdd(balances[_to], _value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    returns (bool success)\r\n    {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] = safeAdd(balances[_to], _value);\r\n            balances[_from] = safeSubtract(balances[_from], _value);\r\n            allowed[_from][msg.sender] = safeSubtract(allowed[_from][msg.sender], _value);\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)\r\n    onlyPayloadSize(2)\r\n    returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender)\r\n    constant\r\n    onlyPayloadSize(2)\r\n    returns (uint256 remaining)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n/* Taking ideas from BAT token */\r\ncontract NEToken is StandardToken {\r\n\r\n    // Token metadata\r\n    string public constant name = \"Nimiq Network Interim Token\";\r\n    string public constant symbol = \"NET\";\r\n    uint256 public constant decimals = 18;\r\n    string public version = \"0.8\";\r\n\r\n    // Deposit address of Multisig account controlled by the creators\r\n    address public ethFundDeposit;\r\n\r\n    // Fundraising parameters\r\n    enum ContractState { Fundraising, Finalized, Redeeming, Paused }\r\n    ContractState public state;           // Current state of the contract\r\n    ContractState private savedState;     // State of the contract before pause\r\n\r\n    uint256 public fundingStartBlock;        // These two blocks need to be chosen to comply with the\r\n    uint256 public fundingEndBlock;          // start date and 28 day duration requirements\r\n    uint256 public exchangeRateChangesBlock; // block number that triggers the exchange rate change\r\n\r\n    uint256 public constant TOKEN_FIRST_EXCHANGE_RATE = 175; // 175 NETs per 1 ETH\r\n    uint256 public constant TOKEN_SECOND_EXCHANGE_RATE = 125; // 125 NETs per 1 ETH\r\n    uint256 public constant TOKEN_CREATION_CAP = 10.5 * (10**6) * 10**decimals; // 10.5 million NETs\r\n    uint256 public constant ETH_RECEIVED_CAP = 60 * (10**3) * 10**decimals; // 60 000 ETH\r\n    uint256 public constant ETH_RECEIVED_MIN = 5 * (10**3) * 10**decimals; // 5 000 ETH\r\n    uint256 public constant TOKEN_MIN = 1 * 10**decimals; // 1 NET\r\n\r\n    // We need to keep track of how much ether have been contributed, since we have a cap for ETH too\r\n    uint256 public totalReceivedEth = 0;\r\n\r\n    // Since we have different exchange rates at different stages, we need to keep track\r\n    // of how much ether each contributed in case that we need to issue a refund\r\n    mapping (address => uint256) private ethBalances;\r\n\r\n    // Events used for logging\r\n    event LogRefund(address indexed _to, uint256 _value);\r\n    event LogCreateNET(address indexed _to, uint256 _value);\r\n    event LogRedeemNET(address indexed _to, uint256 _value, bytes32 _nimiqAddress);\r\n\r\n    modifier isFinalized() {\r\n        require(state == ContractState.Finalized);\r\n        _;\r\n    }\r\n\r\n    modifier isFundraising() {\r\n        require(state == ContractState.Fundraising);\r\n        _;\r\n    }\r\n\r\n    modifier isRedeeming() {\r\n        require(state == ContractState.Redeeming);\r\n        _;\r\n    }\r\n\r\n    modifier isPaused() {\r\n        require(state == ContractState.Paused);\r\n        _;\r\n    }\r\n\r\n    modifier notPaused() {\r\n        require(state != ContractState.Paused);\r\n        _;\r\n    }\r\n\r\n    modifier isFundraisingIgnorePaused() {\r\n        require(state == ContractState.Fundraising || (state == ContractState.Paused && savedState == ContractState.Fundraising));\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == ethFundDeposit);\r\n        _;\r\n    }\r\n\r\n    modifier minimumReached() {\r\n        require(totalReceivedEth >= ETH_RECEIVED_MIN);\r\n        _;\r\n    }\r\n\r\n    // Constructor\r\n    function NEToken(\r\n    address _ethFundDeposit,\r\n    uint256 _fundingStartBlock,\r\n    uint256 _fundingEndBlock,\r\n    uint256 _exchangeRateChangesBlock)\r\n    {\r\n        // Check that the parameters make sense\r\n        require(block.number <= _fundingStartBlock); // The start of the fundraising should happen in the future\r\n        require(_fundingStartBlock <= _exchangeRateChangesBlock); // The exchange rate change should happen after the start of the fundraising\r\n        require(_exchangeRateChangesBlock <= _fundingEndBlock); // And the end of the fundraising should happen after the exchange rate change\r\n\r\n        // Contract state\r\n        state = ContractState.Fundraising;\r\n        savedState = ContractState.Fundraising;\r\n\r\n        ethFundDeposit = _ethFundDeposit;\r\n        fundingStartBlock = _fundingStartBlock;\r\n        fundingEndBlock = _fundingEndBlock;\r\n        exchangeRateChangesBlock = _exchangeRateChangesBlock;\r\n        totalSupply = 0;\r\n    }\r\n\r\n    // Overridden method to check for end of fundraising before allowing transfer of tokens\r\n    function transfer(address _to, uint256 _value)\r\n    isFinalized // Only allow token transfer after the fundraising has ended\r\n    onlyPayloadSize(2)\r\n    returns (bool success)\r\n    {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n\r\n    // Overridden method to check for end of fundraising before allowing transfer of tokens\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    isFinalized // Only allow token transfer after the fundraising has ended\r\n    onlyPayloadSize(3)\r\n    returns (bool success)\r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n\r\n    /// @dev Accepts ether and creates new NET tokens\r\n    function createTokens()\r\n    payable\r\n    external\r\n    isFundraising\r\n    {\r\n        require(block.number >= fundingStartBlock);\r\n        require(block.number <= fundingEndBlock);\r\n        require(msg.value > 0);\r\n\r\n        // First we check the ETH cap, as it's easier to calculate, return\r\n        // the contribution if the cap has been reached already\r\n        uint256 checkedReceivedEth = safeAdd(totalReceivedEth, msg.value);\r\n        require(checkedReceivedEth <= ETH_RECEIVED_CAP);\r\n\r\n        // If all is fine with the ETH cap, we continue to check the\r\n        // minimum amount of tokens and the cap for how many tokens\r\n        // have been generated so far\r\n        uint256 tokens = safeMult(msg.value, getCurrentTokenPrice());\r\n        require(tokens >= TOKEN_MIN);\r\n        uint256 checkedSupply = safeAdd(totalSupply, tokens);\r\n        require(checkedSupply <= TOKEN_CREATION_CAP);\r\n\r\n        // Only when all the checks have passed, then we update the state (ethBalances,\r\n        // totalReceivedEth, totalSupply, and balances) of the contract\r\n        ethBalances[msg.sender] = safeAdd(ethBalances[msg.sender], msg.value);\r\n        totalReceivedEth = checkedReceivedEth;\r\n        totalSupply = checkedSupply;\r\n        balances[msg.sender] += tokens;  // safeAdd not needed; bad semantics to use here\r\n\r\n        // Log the creation of this tokens\r\n        LogCreateNET(msg.sender, tokens);\r\n    }\r\n\r\n\r\n    /// @dev Returns the current token price\r\n    function getCurrentTokenPrice()\r\n    private\r\n    constant\r\n    returns (uint256 currentPrice)\r\n    {\r\n        if (block.number < exchangeRateChangesBlock) {\r\n            return TOKEN_FIRST_EXCHANGE_RATE;\r\n        } else {\r\n            return TOKEN_SECOND_EXCHANGE_RATE;\r\n        }\r\n    }\r\n\r\n\r\n    /// @dev Redeems NETs and records the Nimiq address of the sender\r\n    function redeemTokens(bytes32 nimiqAddress)\r\n    external\r\n    isRedeeming\r\n    {\r\n        uint256 netVal = balances[msg.sender];\r\n        require(netVal >= TOKEN_MIN); // At least TOKEN_MIN tokens have to be redeemed\r\n\r\n        // Move the tokens of the caller to Nimiq's address\r\n        if (!super.transfer(ethFundDeposit, netVal)) throw;\r\n\r\n        // Log the redeeming of this tokens\r\n        LogRedeemNET(msg.sender, netVal, nimiqAddress);\r\n    }\r\n\r\n\r\n    /// @dev Allows to transfer ether from the contract as soon as the minimum is reached\r\n    function retrieveEth(uint256 _value)\r\n    external\r\n    minimumReached\r\n    onlyOwner\r\n    {\r\n        require(_value <= this.balance);\r\n\r\n        // send the eth to Nimiq Creators\r\n        ethFundDeposit.transfer(_value);\r\n    }\r\n\r\n\r\n    /// @dev Ends the fundraising period and sends the ETH to the Multisig wallet\r\n    function finalize()\r\n    external\r\n    isFundraising\r\n    minimumReached\r\n    onlyOwner // Only the owner of the ethFundDeposit address can finalize the contract\r\n    {\r\n        require(block.number > fundingEndBlock || totalSupply >= TOKEN_CREATION_CAP || totalReceivedEth >= ETH_RECEIVED_CAP); // Only allow to finalize the contract before the ending block if we already reached any of the two caps\r\n\r\n        // Move the contract to Finalized state\r\n        state = ContractState.Finalized;\r\n        savedState = ContractState.Finalized;\r\n\r\n        // Send the ETH to Nimiq Creators\r\n        ethFundDeposit.transfer(this.balance);\r\n    }\r\n\r\n\r\n    /// @dev Starts the redeeming period\r\n    function startRedeeming()\r\n    external\r\n    isFinalized // The redeeming period can only be started after the contract is finalized\r\n    onlyOwner   // Only the owner of the ethFundDeposit address can start the redeeming period\r\n    {\r\n        // Move the contract to Redeeming state\r\n        state = ContractState.Redeeming;\r\n        savedState = ContractState.Redeeming;\r\n    }\r\n\r\n\r\n    /// @dev Pauses the contract\r\n    function pause()\r\n    external\r\n    notPaused   // Prevent the contract getting stuck in the Paused state\r\n    onlyOwner   // Only the owner of the ethFundDeposit address can pause the contract\r\n    {\r\n        // Move the contract to Paused state\r\n        savedState = state;\r\n        state = ContractState.Paused;\r\n    }\r\n\r\n\r\n    /// @dev Proceeds with the contract\r\n    function proceed()\r\n    external\r\n    isPaused\r\n    onlyOwner   // Only the owner of the ethFundDeposit address can proceed with the contract\r\n    {\r\n        // Move the contract to the previous state\r\n        state = savedState;\r\n    }\r\n\r\n\r\n    /// @dev Allows contributors to recover their ether in case the minimum funding goal is not reached\r\n    function refund()\r\n    external\r\n    isFundraisingIgnorePaused // Refunding is only possible in the fundraising phase (no matter if paused) by definition\r\n    {\r\n        require(block.number > fundingEndBlock); // Prevents refund until fundraising period is over\r\n        require(totalReceivedEth < ETH_RECEIVED_MIN);  // No refunds if the minimum has been reached\r\n\r\n        uint256 netVal = balances[msg.sender];\r\n        require(netVal > 0);\r\n        uint256 ethVal = ethBalances[msg.sender];\r\n        require(ethVal > 0);\r\n\r\n        // Update the state only after all the checks have passed\r\n        balances[msg.sender] = 0;\r\n        ethBalances[msg.sender] = 0;\r\n        totalSupply = safeSubtract(totalSupply, netVal); // Extra safe\r\n\r\n        // Log this refund\r\n        LogRefund(msg.sender, ethVal);\r\n\r\n        // Send the contributions only after we have updated all the balances\r\n        // If you're using a contract, make sure it works with .transfer() gas limits\r\n        msg.sender.transfer(ethVal);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SECOND_EXCHANGE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_FIRST_EXCHANGE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_RECEIVED_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nimiqAddress\",\"type\":\"bytes32\"}],\"name\":\"redeemTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRateChangesBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"proceed\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReceivedEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_RECEIVED_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startRedeeming\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"retrieveEth\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_CREATION_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ethFundDeposit\",\"type\":\"address\"},{\"name\":\"_fundingStartBlock\",\"type\":\"uint256\"},{\"name\":\"_fundingEndBlock\",\"type\":\"uint256\"},{\"name\":\"_exchangeRateChangesBlock\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogCreateNET\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_nimiqAddress\",\"type\":\"bytes32\"}],\"name\":\"LogRedeemNET\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"NEToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000efa351d189c367d109859afdf6f3d17eeb0825a500000000000000000000000000000000000000000000000000000000003c290e00000000000000000000000000000000000000000000000000000000003e45ea00000000000000000000000000000000000000000000000000000000003d377c","Library":"","SwarmSource":"bzzr://ded3953a291dfd70cb7876ef7ecf2087935d6cd5b2e326321960d61488a9586f"}]}