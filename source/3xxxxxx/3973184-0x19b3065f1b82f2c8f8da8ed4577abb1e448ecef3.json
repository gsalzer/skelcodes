{"status":"1","message":"OK","result":[{"SourceCode":"contract Owned {\r\n\r\n    address public owner;\r\n    mapping (address => bool) public isAdmin;\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n        isAdmin[msg.sender] = true;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        assert(isAdmin[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function addAdmin(address user) onlyAdmin {\r\n        isAdmin[user] = true;\r\n    }\r\n\r\n    function removeAdmin(address user) onlyAdmin {\r\n        if (user == owner) {\r\n            throw; //cant remove the owner\r\n        }\r\n        isAdmin[user] = false;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ncontract SoupToken is Owned {\r\n\r\n\r\n    string public standard = 'SoupToken 30/06';\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    uint public minBalanceForAccounts = 5 finney;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    mapping (uint => address[]) public ordersFor;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    event BurnFrom(address _from, uint256 _value);\r\n\r\n    event LogDepositReceived(address sender);\r\n\r\n    function SoupToken(string tokenName, string tokenSymbol) payable {\r\n        name = tokenName;\r\n        // Set the name for display purposes\r\n        symbol = tokenSymbol;\r\n        // Set the symbol for display purposes\r\n    }\r\n\r\n    function() payable {\r\n        LogDepositReceived(msg.sender);\r\n    }\r\n\r\n    function mintToken(address target, uint256 mintedAmount) onlyAdmin {\r\n        balanceOf[target] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        Transfer(0, owner, mintedAmount);\r\n        Transfer(owner, target, mintedAmount);\r\n        if (target.balance < minBalanceForAccounts) target.transfer(minBalanceForAccounts - target.balance);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value){\r\n        if (_to == 0x0) throw;\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balanceOf[msg.sender] < _value) throw;\r\n        // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;\r\n        // Check for overflows\r\n        balanceOf[msg.sender] -= _value;\r\n        // Subtract from the sender\r\n        balanceOf[_to] += _value;\r\n        // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);\r\n        // Notify anyone listening that this transfer took place\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyAdmin returns (bool success){\r\n        if (_to == 0x0) throw;\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        if (balanceOf[_from] < _value) throw;\r\n        // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;\r\n        // Check for overflows\r\n        balanceOf[_from] -= _value;\r\n        // Subtract from the sender\r\n        balanceOf[_to] += _value;\r\n        // Add the same to the recipient\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) onlyAdmin returns (bool success) {\r\n        if (balanceOf[_from] < _value) throw;\r\n        // Check if the sender has enough\r\n        balanceOf[_from] -= _value;\r\n        // Subtract from the sender\r\n        totalSupply -= _value;\r\n        // Updates totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n    function checkIfAlreadyOrderedForDay(uint day, address user) internal constant returns (bool){\r\n        var orders = ordersFor[day];\r\n        for (uint i = 0; i < orders.length; i++) {\r\n            if (orders[i] == user) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function findOrderIndexForAddress(uint day, address user) internal constant returns (uint){\r\n        var orders = ordersFor[day];\r\n        for (uint i = 0; i < orders.length; i++) {\r\n            if (orders[i] == user) {\r\n                return i;\r\n            }\r\n        }\r\n        //this throw will never be reached. This function is only called for users\r\n        //where we absolutely know they are in the list\r\n        throw;\r\n    }\r\n\r\n    function orderForDays(bool[] weekdays) returns (bool success) {\r\n\r\n        uint totalOrders = 0;\r\n        for (uint i = 0; i < weekdays.length; i++) {\r\n            var isOrdering = weekdays[i];\r\n            //check if the user already ordered for that day\r\n            if (checkIfAlreadyOrderedForDay(i, msg.sender)) {\r\n                //if so we remove the order if the user changed his mind\r\n                if (!isOrdering) {\r\n                    var useridx = findOrderIndexForAddress(i, msg.sender);\r\n                    delete ordersFor[i][useridx];\r\n                }\r\n                //if he still wants to buy for the change we dont do anything\r\n            }\r\n            else {\r\n                if (isOrdering) {\r\n                    //add the user to the list of purchases that day\r\n                    ordersFor[i].push(msg.sender);\r\n                    totalOrders++;\r\n                }\r\n                //do nothing otherwise\r\n            }\r\n            // rollback transaction if totalOrders exceeds balance\r\n            if (balanceOf[msg.sender] < totalOrders) {\r\n                throw;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function burnSoupTokensForDay(uint day) onlyAdmin returns (bool success) {\r\n\r\n        for (uint i = 0; i < ordersFor[day].length; i++) {\r\n            if (ordersFor[day][i] == 0x0) {\r\n                continue;\r\n            }\r\n            burnFrom(ordersFor[day][i], 1);\r\n            delete ordersFor[day][i];\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getOrderAddressesForDay(uint day) constant returns (address[]) {\r\n        return ordersFor[day];\r\n    }\r\n\r\n    function getAmountOrdersForDay(uint day) constant returns (uint){\r\n        return ordersFor[day].length;\r\n    }\r\n\r\n    function setMinBalance(uint minimumBalanceInFinney) onlyAdmin {\r\n        minBalanceForAccounts = minimumBalanceInFinney * 1 finney;\r\n    }\r\n\r\n    function kill() onlyOwner {\r\n        suicide(owner);\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"getOrderAddressesForDay\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"weekdays\",\"type\":\"bool[]\"}],\"name\":\"orderForDays\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBalanceForAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"burnSoupTokensForDay\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"getAmountOrdersForDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minimumBalanceInFinney\",\"type\":\"uint256\"}],\"name\":\"setMinBalance\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ordersFor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":true,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BurnFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"LogDepositReceived\",\"type\":\"event\"}]","ContractName":"SoupToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000008536f7570436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004f09f8db500000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://84256c70bdcdcfe37e1e6406cc058aebb27ce976236dbdec56c51f054d792cd9"}]}