{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n/**\r\n * @title Contracts that should not own Tokens\r\n * @dev This blocks incoming ERC23 tokens to prevent accidental loss of tokens.\r\n * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\r\n * owner to reclaim the tokens.\r\n */\r\ncontract HasNoTokens is Ownable {\r\n\r\n /**\r\n  * @dev Reject all ERC23 compatible tokens\r\n  * @param from_ address The address that is transferring the tokens\r\n  * @param value_ Uint the amount of the specified token\r\n  * @param data_ Bytes The data passed from the caller.\r\n  */\r\n  function tokenFallback(address from_, uint value_, bytes data_) external {\r\n    throw;\r\n  }\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param tokenAddr address The address of the token contract\r\n   */\r\n  function reclaimToken(address tokenAddr) external onlyOwner {\r\n    ERC20Basic tokenInst = ERC20Basic(tokenAddr);\r\n    uint256 balance = tokenInst.balanceOf(this);\r\n    tokenInst.transfer(owner, balance);\r\n  }\r\n}\r\n\r\n// @dev Contract to hold ETH raised during a token sale.\r\n// Prevents attack in which the Multisig sends raised ether to the\r\n// sale contract to mint tokens to itself, and getting the\r\n// funds back immediately.\r\ncontract AbstractSale {\r\n  function saleFinalized() constant returns (bool);\r\n}\r\n\r\ncontract Escrow is HasNoTokens {\r\n\r\n  address public beneficiary;\r\n  uint public finalBlock;\r\n  AbstractSale public tokenSale;\r\n\r\n  // @dev Constructor initializes public variables\r\n  // @param _beneficiary The address of the multisig that will receive the funds\r\n  // @param _finalBlock Block after which the beneficiary can request the funds\r\n  function Escrow(address _beneficiary, uint _finalBlock, address _tokenSale) {\r\n    beneficiary = _beneficiary;\r\n    finalBlock = _finalBlock;\r\n    tokenSale = AbstractSale(_tokenSale);\r\n  }\r\n\r\n  // @dev Receive all sent funds without any further logic\r\n  function() public payable {}\r\n\r\n  // @dev Withdraw function sends all the funds to the wallet if conditions are correct\r\n  function withdraw() public {\r\n    if (msg.sender != beneficiary) throw;\r\n    if (block.number > finalBlock) return doWithdraw();\r\n    if (tokenSale.saleFinalized()) return doWithdraw();\r\n  }\r\n\r\n  function doWithdraw() internal {\r\n    if (!beneficiary.send(this.balance)) throw;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"},{\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_finalBlock\",\"type\":\"uint256\"},{\"name\":\"_tokenSale\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"Escrow","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"00000000000000000000000074b46f7b07cf6a214dd4aa84a9c99afa842da09200000000000000000000000000000000000000000000000000000000003f27e9000000000000000000000000b4e4a785de5a9caefad3912a1344febf04c7d2ac","Library":"","SwarmSource":"bzzr://1ade34c06f54867b93f97c67d3cd3c38663dd041824dae2676810de79c77b46e"}]}