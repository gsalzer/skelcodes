{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/*\r\n  Author: Victor Mezrin  victor@mezrin.com\r\n*/\r\n\r\n\r\n/* Interface of the ERC223 token */\r\ncontract ERC223TokenInterface {\r\n    function name() constant returns (string _name);\r\n    function symbol() constant returns (string _symbol);\r\n    function decimals() constant returns (uint8 _decimals);\r\n    function totalSupply() constant returns (uint256 _supply);\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 _balance);\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool _success);\r\n    function allowance(address _owner, address spender) constant returns (uint256 _remaining);\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool _success);\r\n    function transfer(address _to, uint256 _value, bytes _metadata) returns (bool _success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool _success);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes metadata);\r\n}\r\n\r\n\r\n/* Interface of the contract that is going to receive ERC223 tokens */\r\ncontract ERC223ContractInterface {\r\n    function erc223Fallback(address _from, uint256 _value, bytes _data){\r\n        // to avoid warnings during compilation\r\n        _from = _from;\r\n        _value = _value;\r\n        _data = _data;\r\n        // Incoming transaction code here\r\n        throw;\r\n    }\r\n}\r\n\r\n\r\n/* https://github.com/LykkeCity/EthereumApiDotNetCore/blob/master/src/ContractBuilder/contracts/token/SafeMath.sol */\r\ncontract SafeMath {\r\n    uint256 constant public MAX_UINT256 =\r\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (x > MAX_UINT256 - y) throw;\r\n        return x + y;\r\n    }\r\n\r\n    function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (x < y) throw;\r\n        return x - y;\r\n    }\r\n\r\n    function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (y == 0) return 0;\r\n        if (x > MAX_UINT256 / y) throw;\r\n        return x * y;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC223Token is ERC223TokenInterface, SafeMath {\r\n\r\n    /*\r\n      Storage of the contract\r\n    */\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowances;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n\r\n    /*\r\n      Getters\r\n    */\r\n\r\n    function name() constant returns (string _name) {\r\n        return name;\r\n    }\r\n\r\n    function symbol() constant returns (string _symbol) {\r\n        return symbol;\r\n    }\r\n\r\n    function decimals() constant returns (uint8 _decimals) {\r\n        return decimals;\r\n    }\r\n\r\n    function totalSupply() constant returns (uint256 _supply) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 _balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    /*\r\n      Allow to spend\r\n    */\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool _success) {\r\n        allowances[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 _remaining) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n\r\n\r\n    /*\r\n      Transfer\r\n    */\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool _success) {\r\n        bytes memory emptyMetadata;\r\n        __transfer(msg.sender, _to, _value, emptyMetadata);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value, bytes _metadata) returns (bool _success)\r\n    {\r\n        __transfer(msg.sender, _to, _value, _metadata);\r\n        Transfer(msg.sender, _to, _value, _metadata);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool _success) {\r\n        if (allowances[_from][msg.sender] < _value) throw;\r\n\r\n        allowances[_from][msg.sender] = safeSub(allowances[_from][msg.sender], _value);\r\n        bytes memory emptyMetadata;\r\n        __transfer(_from, _to, _value, emptyMetadata);\r\n        return true;\r\n    }\r\n\r\n    function __transfer(address _from, address _to, uint256 _value, bytes _metadata) internal\r\n    {\r\n        if (_from == _to) throw;\r\n        if (_value == 0) throw;\r\n        if (balanceOf(_from) < _value) throw;\r\n\r\n        balances[_from] = safeSub(balanceOf(_from), _value);\r\n        balances[_to] = safeAdd(balanceOf(_to), _value);\r\n\r\n        if (isContract(_to)) {\r\n            ERC223ContractInterface receiverContract = ERC223ContractInterface(_to);\r\n            receiverContract.erc223Fallback(_from, _value, _metadata);\r\n        }\r\n\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n\r\n    /*\r\n      Helpers\r\n    */\r\n\r\n    // Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n    function isContract(address _addr) internal returns (bool _isContract) {\r\n        _addr = _addr; // to avoid warnings during compilation\r\n\r\n        uint256 length;\r\n        assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length > 0);\r\n    }\r\n}\r\n\r\n\r\n\r\n// ERC223 token with the ability for the owner to block any account\r\ncontract DASToken is ERC223Token {\r\n    mapping (address => bool) blockedAccounts;\r\n    address public secretaryGeneral;\r\n\r\n\r\n    // Constructor\r\n    function DASToken(\r\n            string _name,\r\n            string _symbol,\r\n            uint8 _decimals,\r\n            uint256 _totalSupply,\r\n            address _initialTokensHolder) {\r\n        secretaryGeneral = msg.sender;\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply = _totalSupply;\r\n        balances[_initialTokensHolder] = _totalSupply;\r\n    }\r\n\r\n\r\n    modifier onlySecretaryGeneral {\r\n        if (msg.sender != secretaryGeneral) throw;\r\n        _;\r\n    }\r\n\r\n\r\n    // block account\r\n    function blockAccount(address _account) onlySecretaryGeneral {\r\n        blockedAccounts[_account] = true;\r\n    }\r\n\r\n    // unblock account\r\n    function unblockAccount(address _account) onlySecretaryGeneral {\r\n        blockedAccounts[_account] = false;\r\n    }\r\n\r\n    // check is account blocked\r\n    function isAccountBlocked(address _account) returns (bool){\r\n        return blockedAccounts[_account];\r\n    }\r\n\r\n    // override transfer methods to throw on blocked accounts\r\n    function transfer(address _to, uint256 _value) returns (bool _success) {\r\n        if (blockedAccounts[msg.sender]) {\r\n            throw;\r\n        }\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value, bytes _metadata) returns (bool _success) {\r\n        if (blockedAccounts[msg.sender]) {\r\n            throw;\r\n        }\r\n        return super.transfer(_to, _value, _metadata);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool _success) {\r\n        if (blockedAccounts[_from]) {\r\n            throw;\r\n        }\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract DASCrowdsale is ERC223ContractInterface {\r\n\r\n    /* Contract state */\r\n    // configuration\r\n    address public secretaryGeneral;\r\n    address public crowdsaleBeneficiary;\r\n    address public crowdsaleDasTokensChangeBeneficiary;\r\n    uint256 public crowdsaleDeadline;\r\n    uint256 public crowdsaleTokenPriceNumerator;\r\n    uint256 public crowdsaleTokenPriceDenominator;\r\n    DASToken public dasToken;\r\n    // crowdsale results\r\n    mapping (address => uint256) public ethBalanceOf;\r\n    uint256 crowdsaleFundsRaised;\r\n\r\n\r\n    /* Contract events */\r\n    event FundsReceived(address indexed backer, uint256 indexed amount);\r\n\r\n\r\n    /* Configuration */\r\n    function DASCrowdsale(\r\n        address _secretaryGeneral,\r\n        address _crowdsaleBeneficiary,\r\n        address _crowdsaleDasTokensChangeBeneficiary,\r\n        uint256 _durationInSeconds,\r\n        uint256 _crowdsaleTokenPriceNumerator,\r\n        uint256 _crowdsaleTokenPriceDenominator,\r\n        address _dasTokenAddress\r\n    ) {\r\n        secretaryGeneral = _secretaryGeneral;\r\n        crowdsaleBeneficiary = _crowdsaleBeneficiary;\r\n        crowdsaleDasTokensChangeBeneficiary = _crowdsaleDasTokensChangeBeneficiary;\r\n        crowdsaleDeadline = now + _durationInSeconds * 1 seconds;\r\n        crowdsaleTokenPriceNumerator = _crowdsaleTokenPriceNumerator;\r\n        crowdsaleTokenPriceDenominator = _crowdsaleTokenPriceDenominator;\r\n        dasToken = DASToken(_dasTokenAddress);\r\n        crowdsaleFundsRaised = 0;\r\n    }\r\n\r\n    function __setSecretaryGeneral(address _secretaryGeneral) onlySecretaryGeneral {\r\n        secretaryGeneral = _secretaryGeneral;\r\n    }\r\n\r\n    function __setBeneficiary(address _crowdsaleBeneficiary) onlySecretaryGeneral {\r\n        crowdsaleBeneficiary = _crowdsaleBeneficiary;\r\n    }\r\n\r\n    function __setBeneficiaryForDasTokensChange(address _crowdsaleDasTokensChangeBeneficiary) onlySecretaryGeneral {\r\n        crowdsaleDasTokensChangeBeneficiary = _crowdsaleDasTokensChangeBeneficiary;\r\n    }\r\n\r\n    function __setDeadline(uint256 _durationInSeconds) onlySecretaryGeneral {\r\n        crowdsaleDeadline = now + _durationInSeconds * 1 seconds;\r\n    }\r\n\r\n    function __setTokenPrice(\r\n        uint256 _crowdsaleTokenPriceNumerator,\r\n        uint256 _crowdsaleTokenPriceDenominator\r\n    )\r\n        onlySecretaryGeneral\r\n    {\r\n        crowdsaleTokenPriceNumerator = _crowdsaleTokenPriceNumerator;\r\n        crowdsaleTokenPriceDenominator = _crowdsaleTokenPriceDenominator;\r\n    }\r\n\r\n\r\n    /* Deposit funds */\r\n    function() payable onlyBeforeCrowdsaleDeadline {\r\n        uint256 receivedAmount = msg.value;\r\n\r\n        ethBalanceOf[msg.sender] += receivedAmount;\r\n        crowdsaleFundsRaised += receivedAmount;\r\n\r\n        dasToken.transfer(msg.sender, receivedAmount / crowdsaleTokenPriceDenominator * crowdsaleTokenPriceNumerator);\r\n        FundsReceived(msg.sender, receivedAmount);\r\n    }\r\n\r\n    function erc223Fallback(address _from, uint256 _value, bytes _data) {\r\n        // blank ERC223 fallback to receive DA$ tokens\r\n        // to avoid warnings during compilation\r\n        _from = _from;\r\n        _value = _value;\r\n        _data = _data;\r\n    }\r\n\r\n\r\n    /* Finish the crowdsale and withdraw funds */\r\n    function withdraw() onlyAfterCrowdsaleDeadline {\r\n        uint256 ethToWithdraw = address(this).balance;\r\n        uint256 dasToWithdraw = dasToken.balanceOf(address(this));\r\n\r\n        if (ethToWithdraw == 0 && dasToWithdraw == 0) throw;\r\n\r\n        if (ethToWithdraw > 0) { crowdsaleBeneficiary.transfer(ethToWithdraw); }\r\n        if (dasToWithdraw > 0) { dasToken.transfer(crowdsaleDasTokensChangeBeneficiary, dasToWithdraw); }\r\n    }\r\n\r\n\r\n    /* Helpers */\r\n    modifier onlyBeforeCrowdsaleDeadline {\r\n        require(now <= crowdsaleDeadline);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAfterCrowdsaleDeadline {\r\n        require(now > crowdsaleDeadline);\r\n        _;\r\n    }\r\n\r\n    modifier onlySecretaryGeneral {\r\n        if (msg.sender != secretaryGeneral) throw;\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleTokenPriceDenominator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleTokenPriceNumerator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleDasTokensChangeBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsaleDasTokensChangeBeneficiary\",\"type\":\"address\"}],\"name\":\"__setBeneficiaryForDasTokensChange\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsaleTokenPriceNumerator\",\"type\":\"uint256\"},{\"name\":\"_crowdsaleTokenPriceDenominator\",\"type\":\"uint256\"}],\"name\":\"__setTokenPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dasToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_durationInSeconds\",\"type\":\"uint256\"}],\"name\":\"__setDeadline\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"erc223Fallback\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secretaryGeneral\",\"type\":\"address\"}],\"name\":\"__setSecretaryGeneral\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secretaryGeneral\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsaleBeneficiary\",\"type\":\"address\"}],\"name\":\"__setBeneficiary\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_secretaryGeneral\",\"type\":\"address\"},{\"name\":\"_crowdsaleBeneficiary\",\"type\":\"address\"},{\"name\":\"_crowdsaleDasTokensChangeBeneficiary\",\"type\":\"address\"},{\"name\":\"_durationInSeconds\",\"type\":\"uint256\"},{\"name\":\"_crowdsaleTokenPriceNumerator\",\"type\":\"uint256\"},{\"name\":\"_crowdsaleTokenPriceDenominator\",\"type\":\"uint256\"},{\"name\":\"_dasTokenAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReceived\",\"type\":\"event\"}]","ContractName":"DASCrowdsale","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008e090955f93376bdd758464f80920f8567d0152a0000000000000000000000008e090955f93376bdd758464f80920f8567d0152a000000000000000000000000d418fcb33ae1a41bdc34d257a228ea9cb7c8fd0300000000000000000000000000000000000000000000000000000000004f1a0000000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000000100000000000000000000000048c7cdadb1313076efdac3fdfb8427b4f58c5b7f","Library":"","SwarmSource":"bzzr://b6bc1feabfd284f2bec2cecb8e2052781506bee13952094ebefb0191ec11233b"}]}