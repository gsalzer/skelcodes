{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\n/**\r\n * @title Contract for object that have an owner\r\n */\r\ncontract Owned {\r\n    /**\r\n     * Contract owner address\r\n     */\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev Delegate contract to another person\r\n     * @param _owner New owner address \r\n     */\r\n    function setOwner(address _owner) onlyOwner\r\n    { owner = _owner; }\r\n\r\n    /**\r\n     * @dev Owner check modifier\r\n     */\r\n    modifier onlyOwner { if (msg.sender != owner) throw; _; }\r\n}\r\n\r\n/**\r\n * @title Common pattern for destroyable contracts \r\n */\r\ncontract Destroyable {\r\n    address public hammer;\r\n\r\n    /**\r\n     * @dev Hammer setter\r\n     * @param _hammer New hammer address\r\n     */\r\n    function setHammer(address _hammer) onlyHammer\r\n    { hammer = _hammer; }\r\n\r\n    /**\r\n     * @dev Destroy contract and scrub a data\r\n     * @notice Only hammer can call it \r\n     */\r\n    function destroy() onlyHammer\r\n    { suicide(msg.sender); }\r\n\r\n    /**\r\n     * @dev Hammer check modifier\r\n     */\r\n    modifier onlyHammer { if (msg.sender != hammer) throw; _; }\r\n}\r\n\r\n/**\r\n * @title Generic owned destroyable contract\r\n */\r\ncontract Object is Owned, Destroyable {\r\n    function Object() {\r\n        owner  = msg.sender;\r\n        hammer = msg.sender;\r\n    }\r\n}\r\n\r\n// Standard token interface (ERC 20)\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 \r\n{\r\n// Functions:\r\n    /// @return total amount of tokens\r\n    uint256 public totalSupply;\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool);\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256);\r\n\r\n// Events:\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n * @title Asset recipient interface\r\n */\r\ncontract Recipient {\r\n    /**\r\n     * @dev On received ethers\r\n     * @param sender Ether sender\r\n     * @param amount Ether value\r\n     */\r\n    event ReceivedEther(address indexed sender,\r\n                        uint256 indexed amount);\r\n\r\n    /**\r\n     * @dev On received custom ERC20 tokens\r\n     * @param from Token sender\r\n     * @param value Token value\r\n     * @param token Token contract address\r\n     * @param extraData Custom additional data\r\n     */\r\n    event ReceivedTokens(address indexed from,\r\n                         uint256 indexed value,\r\n                         address indexed token,\r\n                         bytes extraData);\r\n\r\n    /**\r\n     * @dev Receive approved ERC20 tokens\r\n     * @param _from Spender address\r\n     * @param _value Transaction value\r\n     * @param _token ERC20 token contract address\r\n     * @param _extraData Custom additional data\r\n     */\r\n    function receiveApproval(address _from, uint256 _value,\r\n                             ERC20 _token, bytes _extraData) {\r\n        if (!_token.transferFrom(_from, this, _value)) throw;\r\n        ReceivedTokens(_from, _value, _token, _extraData);\r\n    }\r\n\r\n    /**\r\n     * @dev Catch sended to contract ethers\r\n     */\r\n    function () payable\r\n    { ReceivedEther(msg.sender, msg.value); }\r\n}\r\n\r\n/**\r\n * @title Improved congress contract by Ethereum Foundation\r\n * @dev https://www.ethereum.org/dao#the-blockchain-congress \r\n */\r\ncontract Congress is Object, Recipient {\r\n    /**\r\n     * @dev Minimal quorum value\r\n     */\r\n    uint256 public minimumQuorum;\r\n\r\n    /**\r\n     * @dev Duration of debates\r\n     */\r\n    uint256 public debatingPeriodInMinutes;\r\n\r\n    /**\r\n     * @dev Majority margin is used in voting procedure \r\n     */\r\n    int256 public majorityMargin;\r\n\r\n    /**\r\n     * @dev Archive of all member proposals \r\n     */\r\n    Proposal[] public proposals;\r\n\r\n    /**\r\n     * @dev Count of proposals in archive \r\n     */\r\n    function numProposals() constant returns (uint256)\r\n    { return proposals.length; }\r\n\r\n    /**\r\n     * @dev Congress members list\r\n     */\r\n    Member[] public members;\r\n\r\n    /**\r\n     * @dev Get member identifier by account address\r\n     */\r\n    mapping(address => uint256) public memberId;\r\n\r\n    /**\r\n     * @dev On proposal added \r\n     * @param proposal Proposal identifier\r\n     * @param recipient Ether recipient\r\n     * @param amount Amount of wei to transfer\r\n     */\r\n    event ProposalAdded(uint256 indexed proposal,\r\n                        address indexed recipient,\r\n                        uint256 indexed amount,\r\n                        string description);\r\n\r\n    /**\r\n     * @dev On vote by member accepted\r\n     * @param proposal Proposal identifier\r\n     * @param position Is proposal accepted by memeber\r\n     * @param voter Congress memeber account address\r\n     * @param justification Member comment\r\n     */\r\n    event Voted(uint256 indexed proposal,\r\n                bool    indexed position,\r\n                address indexed voter,\r\n                string justification);\r\n\r\n    /**\r\n     * @dev On Proposal closed\r\n     * @param proposal Proposal identifier\r\n     * @param quorum Number of votes \r\n     * @param active Is proposal passed\r\n     */\r\n    event ProposalTallied(uint256 indexed proposal,\r\n                          uint256 indexed quorum,\r\n                          bool    indexed active);\r\n\r\n    /**\r\n     * @dev On changed membership\r\n     * @param member Account address \r\n     * @param isMember Is account member now\r\n     */\r\n    event MembershipChanged(address indexed member,\r\n                            bool    indexed isMember);\r\n\r\n    /**\r\n     * @dev On voting rules changed\r\n     * @param minimumQuorum New minimal count of votes\r\n     * @param debatingPeriodInMinutes New debating duration\r\n     * @param majorityMargin New majority margin value\r\n     */\r\n    event ChangeOfRules(uint256 indexed minimumQuorum,\r\n                        uint256 indexed debatingPeriodInMinutes,\r\n                        int256  indexed majorityMargin);\r\n\r\n    struct Proposal {\r\n        address recipient;\r\n        uint256 amount;\r\n        string  description;\r\n        uint256 votingDeadline;\r\n        bool    executed;\r\n        bool    proposalPassed;\r\n        uint256 numberOfVotes;\r\n        int256  currentResult;\r\n        bytes32 proposalHash;\r\n        Vote[]  votes;\r\n        mapping(address => bool) voted;\r\n    }\r\n\r\n    struct Member {\r\n        address member;\r\n        string  name;\r\n        uint256 memberSince;\r\n    }\r\n\r\n    struct Vote {\r\n        bool    inSupport;\r\n        address voter;\r\n        string  justification;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier that allows only shareholders to vote and create new proposals\r\n     */\r\n    modifier onlyMembers {\r\n        if (memberId[msg.sender] == 0) throw;\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev First time setup\r\n     */\r\n    function Congress(\r\n        uint256 minimumQuorumForProposals,\r\n        uint256 minutesForDebate,\r\n        int256  marginOfVotesForMajority,\r\n        address congressLeader\r\n    ) {\r\n        changeVotingRules(minimumQuorumForProposals, minutesForDebate, marginOfVotesForMajority);\r\n        // Itâ€™s necessary to add an empty first member\r\n        addMember(0, ''); // and let's add the founder, to save a step later\r\n        if (congressLeader != 0)\r\n            addMember(congressLeader, 'The Founder');\r\n    }\r\n\r\n    /**\r\n     * @dev Append new congress member \r\n     * @param targetMember Member account address\r\n     * @param memberName Member full name\r\n     */\r\n    function addMember(address targetMember, string memberName) onlyOwner {\r\n        if (memberId[targetMember] != 0) throw;\r\n\r\n        memberId[targetMember] = members.length;\r\n        members.push(Member({member:      targetMember,\r\n                             memberSince: now,\r\n                             name:        memberName}));\r\n\r\n        MembershipChanged(targetMember, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove congress member\r\n     * @param targetMember Member account address\r\n     */\r\n    function removeMember(address targetMember) onlyOwner {\r\n        if (memberId[targetMember] == 0) throw;\r\n\r\n        uint256 targetId = memberId[targetMember];\r\n        uint256 lastId   = members.length - 1;\r\n\r\n        // Move last member to removed position\r\n        Member memory moved    = members[lastId];\r\n        members[targetId]      = moved; \r\n        memberId[moved.member] = targetId;\r\n\r\n        // Clean up\r\n        memberId[targetMember] = 0;\r\n        delete members[lastId];\r\n        --members.length;\r\n\r\n        MembershipChanged(targetMember, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Change rules of voting\r\n     * @param minimumQuorumForProposals Minimal count of votes\r\n     * @param minutesForDebate Debate deadline in minutes\r\n     * @param marginOfVotesForMajority Majority margin value\r\n     */\r\n    function changeVotingRules(\r\n        uint256 minimumQuorumForProposals,\r\n        uint256 minutesForDebate,\r\n        int256  marginOfVotesForMajority\r\n    )\r\n        onlyOwner\r\n    {\r\n        minimumQuorum           = minimumQuorumForProposals;\r\n        debatingPeriodInMinutes = minutesForDebate;\r\n        majorityMargin          = marginOfVotesForMajority;\r\n\r\n        ChangeOfRules(minimumQuorum, debatingPeriodInMinutes, majorityMargin);\r\n    }\r\n\r\n    /**\r\n     * @dev Create a new proposal\r\n     * @param beneficiary Beneficiary account address\r\n     * @param amount Transaction value in Wei \r\n     * @param jobDescription Job description string\r\n     * @param transactionBytecode Bytecode of transaction\r\n     */\r\n    function newProposal(\r\n        address beneficiary,\r\n        uint256 amount,\r\n        string  jobDescription,\r\n        bytes   transactionBytecode\r\n    )\r\n        onlyMembers\r\n        returns (uint256 id)\r\n    {\r\n        id               = proposals.length++;\r\n        Proposal p       = proposals[id];\r\n        p.recipient      = beneficiary;\r\n        p.amount         = amount;\r\n        p.description    = jobDescription;\r\n        p.proposalHash   = sha3(beneficiary, amount, transactionBytecode);\r\n        p.votingDeadline = now + debatingPeriodInMinutes * 1 minutes;\r\n        p.executed       = false;\r\n        p.proposalPassed = false;\r\n        p.numberOfVotes  = 0;\r\n        ProposalAdded(id, beneficiary, amount, jobDescription);\r\n    }\r\n\r\n    /**\r\n     * @dev Check if a proposal code matches\r\n     * @param id Proposal identifier\r\n     * @param beneficiary Beneficiary account address\r\n     * @param amount Transaction value in Wei \r\n     * @param transactionBytecode Bytecode of transaction\r\n     */\r\n    function checkProposalCode(\r\n        uint256 id,\r\n        address beneficiary,\r\n        uint256 amount,\r\n        bytes   transactionBytecode\r\n    )\r\n        constant\r\n        returns (bool codeChecksOut)\r\n    {\r\n        return proposals[id].proposalHash\r\n            == sha3(beneficiary, amount, transactionBytecode);\r\n    }\r\n\r\n    /**\r\n     * @dev Proposal voting\r\n     * @param id Proposal identifier\r\n     * @param supportsProposal Is proposal supported\r\n     * @param justificationText Member comment\r\n     */\r\n    function vote(\r\n        uint256 id,\r\n        bool    supportsProposal,\r\n        string  justificationText\r\n    )\r\n        onlyMembers\r\n        returns (uint256 vote)\r\n    {\r\n        Proposal p = proposals[id];             // Get the proposal\r\n        if (p.voted[msg.sender] == true) throw; // If has already voted, cancel\r\n        p.voted[msg.sender] = true;             // Set this voter as having voted\r\n        p.numberOfVotes++;                      // Increase the number of votes\r\n        if (supportsProposal) {                 // If they support the proposal\r\n            p.currentResult++;                  // Increase score\r\n        } else {                                // If they don't\r\n            p.currentResult--;                  // Decrease the score\r\n        }\r\n        // Create a log of this event\r\n        Voted(id,  supportsProposal, msg.sender, justificationText);\r\n    }\r\n\r\n    /**\r\n     * @dev Try to execute proposal\r\n     * @param id Proposal identifier\r\n     * @param transactionBytecode Transaction data\r\n     */\r\n    function executeProposal(\r\n        uint256 id,\r\n        bytes   transactionBytecode\r\n    )\r\n        onlyMembers\r\n    {\r\n        Proposal p = proposals[id];\r\n        /* Check if the proposal can be executed:\r\n           - Has the voting deadline arrived?\r\n           - Has it been already executed or is it being executed?\r\n           - Does the transaction code match the proposal?\r\n           - Has a minimum quorum?\r\n        */\r\n\r\n        if (now < p.votingDeadline\r\n            || p.executed\r\n            || p.proposalHash != sha3(p.recipient, p.amount, transactionBytecode)\r\n            || p.numberOfVotes < minimumQuorum)\r\n            throw;\r\n\r\n        /* execute result */\r\n        /* If difference between support and opposition is larger than margin */\r\n        if (p.currentResult > majorityMargin) {\r\n            // Avoid recursive calling\r\n\r\n            p.executed = true;\r\n            if (!p.recipient.call.value(p.amount)(transactionBytecode))\r\n                throw;\r\n\r\n            p.proposalPassed = true;\r\n        } else {\r\n            p.proposalPassed = false;\r\n        }\r\n        // Fire Events\r\n        ProposalTallied(id, p.numberOfVotes, p.proposalPassed);\r\n    }\r\n}\r\n\r\nlibrary CreatorCongress {\r\n    function create(uint256 minimumQuorumForProposals, uint256 minutesForDebate, int256 marginOfVotesForMajority, address congressLeader) returns (Congress)\r\n    { return new Congress(minimumQuorumForProposals, minutesForDebate, marginOfVotesForMajority, congressLeader); }\r\n\r\n    function version() constant returns (string)\r\n    { return \"v0.6.3\"; }\r\n\r\n    function abi() constant returns (string)\r\n    { return '[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"votingDeadline\",\"type\":\"uint256\"},{\"name\":\"executed\",\"type\":\"bool\"},{\"name\":\"proposalPassed\",\"type\":\"bool\"},{\"name\":\"numberOfVotes\",\"type\":\"uint256\"},{\"name\":\"currentResult\",\"type\":\"int256\"},{\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targetMember\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"executeProposal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"memberId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numProposals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hammer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"name\":\"member\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"memberSince\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debatingPeriodInMinutes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumQuorum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"majorityMargin\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"jobDescription\",\"type\":\"string\"},{\"name\":\"transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"newProposal\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minimumQuorumForProposals\",\"type\":\"uint256\"},{\"name\":\"minutesForDebate\",\"type\":\"uint256\"},{\"name\":\"marginOfVotesForMajority\",\"type\":\"int256\"}],\"name\":\"changeVotingRules\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targetMember\",\"type\":\"address\"},{\"name\":\"memberName\",\"type\":\"string\"}],\"name\":\"addMember\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hammer\",\"type\":\"address\"}],\"name\":\"setHammer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"supportsProposal\",\"type\":\"bool\"},{\"name\":\"justificationText\",\"type\":\"string\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"vote\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"checkProposalCode\",\"outputs\":[{\"name\":\"codeChecksOut\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"minimumQuorumForProposals\",\"type\":\"uint256\"},{\"name\":\"minutesForDebate\",\"type\":\"uint256\"},{\"name\":\"marginOfVotesForMajority\",\"type\":\"int256\"},{\"name\":\"congressLeader\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposal\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposal\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"position\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"justification\",\"type\":\"string\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposal\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"quorum\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"ProposalTallied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"isMember\",\"type\":\"bool\"}],\"name\":\"MembershipChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minimumQuorum\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"debatingPeriodInMinutes\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"majorityMargin\",\"type\":\"int256\"}],\"name\":\"ChangeOfRules\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ReceivedTokens\",\"type\":\"event\"}]'; }\r\n}\r\n\r\n/**\r\n * @title Builder based contract\r\n */\r\ncontract Builder is Object {\r\n    /**\r\n     * @dev this event emitted for every builded contract\r\n     */\r\n    event Builded(address indexed client, address indexed instance);\r\n \r\n    /* Addresses builded contracts at sender */\r\n    mapping(address => address[]) public getContractsOf;\r\n \r\n    /**\r\n     * @dev Get last address\r\n     * @return last address contract\r\n     */\r\n    function getLastContract() constant returns (address) {\r\n        var sender_contracts = getContractsOf[msg.sender];\r\n        return sender_contracts[sender_contracts.length - 1];\r\n    }\r\n\r\n    /* Building beneficiary */\r\n    address public beneficiary;\r\n\r\n    /**\r\n     * @dev Set beneficiary\r\n     * @param _beneficiary is address of beneficiary\r\n     */\r\n    function setBeneficiary(address _beneficiary) onlyOwner\r\n    { beneficiary = _beneficiary; }\r\n\r\n    /* Building cost  */\r\n    uint public buildingCostWei;\r\n\r\n    /**\r\n     * @dev Set building cost\r\n     * @param _buildingCostWei is cost\r\n     */\r\n    function setCost(uint _buildingCostWei) onlyOwner\r\n    { buildingCostWei = _buildingCostWei; }\r\n\r\n    /* Security check report */\r\n    string public securityCheckURI;\r\n\r\n    /**\r\n     * @dev Set security check report URI\r\n     * @param _uri is an URI to report\r\n     */\r\n    function setSecurityCheck(string _uri) onlyOwner\r\n    { securityCheckURI = _uri; }\r\n}\r\n\r\n//\r\n// AIRA Builder for Congress contract\r\n//\r\ncontract BuilderCongress is Builder {\r\n    /**\r\n     * @dev Run script creation contract\r\n     * @return address new contract\r\n     */\r\n    function create(uint256 minimumQuorumForProposals,\r\n                    uint256 minutesForDebate,\r\n                    int256 marginOfVotesForMajority,\r\n                    address congressLeader,\r\n                    address _client) payable returns (address) {\r\n        if (buildingCostWei > 0 && beneficiary != 0) {\r\n            // Too low value\r\n            if (msg.value < buildingCostWei) throw;\r\n            // Beneficiary send\r\n            if (!beneficiary.send(buildingCostWei)) throw;\r\n            // Refund\r\n            if (msg.value > buildingCostWei) {\r\n                if (!msg.sender.send(msg.value - buildingCostWei)) throw;\r\n            }\r\n        } else {\r\n            // Refund all\r\n            if (msg.value > 0) {\r\n                if (!msg.sender.send(msg.value)) throw;\r\n            }\r\n        }\r\n\r\n        if (_client == 0)\r\n            _client = msg.sender;\r\n \r\n        if (congressLeader == 0)\r\n            congressLeader = _client;\r\n\r\n        var inst = CreatorCongress.create(minimumQuorumForProposals,\r\n                                          minutesForDebate,\r\n                                          marginOfVotesForMajority,\r\n                                          congressLeader);\r\n        inst.setOwner(_client);\r\n        inst.setHammer(_client);\r\n        getContractsOf[_client].push(inst);\r\n        Builded(_client, inst);\r\n        return inst;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setSecurityCheck\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buildingCostWei\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hammer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buildingCostWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hammer\",\"type\":\"address\"}],\"name\":\"setHammer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minimumQuorumForProposals\",\"type\":\"uint256\"},{\"name\":\"minutesForDebate\",\"type\":\"uint256\"},{\"name\":\"marginOfVotesForMajority\",\"type\":\"int256\"},{\"name\":\"congressLeader\",\"type\":\"address\"},{\"name\":\"_client\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getContractsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityCheckURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"client\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"Builded\",\"type\":\"event\"}]","ContractName":"BuilderCongress","CompilerVersion":"v0.4.9+commit.364da425","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"CreatorCongress:f0D5d04797143840B1ac26D105338B712Cc9cCe8","SwarmSource":"bzzr://3be4be7896e57c41560635b87b9c94d7df7eebe5a35a3309c16164b33c8b2304"}]}