{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\ncontract owned {\r\n\taddress public owner;\r\n\tfunction owned() {\r\n\t\towner = msg.sender;\r\n\t}\r\n\tfunction changeOwner(address newOwner) onlyowner {\r\n\t\towner = newOwner;\r\n\t}\r\n\tmodifier onlyowner() {\r\n\t\tif (msg.sender==owner) _;\r\n\t}\r\n}\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\ncontract CSToken is owned {\r\n\t/* Public variables of the token */\r\n\tstring public standard = 'Token 0.1';\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals;\r\n\tuint256 public totalSupply;\r\n\t/* This creates an array with all balances */\r\n\tmapping (address => uint256) public balanceOf;\r\n\tmapping (address => mapping (address => uint256)) public allowance;\r\n\t/* This generates a public event on the blockchain that will notify clients */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\t/* Initializes contract with initial supply tokens to the creator of the contract */\r\n\tfunction CSToken(\r\n\tuint256 initialSupply,\r\n\tstring tokenName,\r\n\tuint8 decimalUnits,\r\n\tstring tokenSymbol\r\n\t) {\r\n\t\towner = msg.sender;\r\n\t\tbalanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\r\n\t\ttotalSupply = initialSupply;                        // Update total supply\r\n\t\tname = tokenName;                                   // Set the name for display purposes\r\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\r\n\t\tdecimals = decimalUnits;                            // Amount of decimals for display purposes\r\n\t}\r\n\t/* Send coins */\r\n\tfunction transfer(address _to, uint256 _value) {\r\n\t\tif (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\r\n\t\tif (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\r\n\t\tbalanceOf[msg.sender] -= _value;                     // Subtract from the sender\r\n\t\tbalanceOf[_to] += _value;                            // Add the same to the recipient\r\n\t\tTransfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n\t}\r\n\tfunction mintToken(address target, uint256 mintedAmount) onlyowner {\r\n\t\tbalanceOf[target] += mintedAmount;\r\n\t\ttotalSupply += mintedAmount;\r\n\t\tTransfer(0, owner, mintedAmount);\r\n\t\tTransfer(owner, target, mintedAmount);\r\n\t}\r\n\t/* Allow another contract to spend some tokens in your behalf */\r\n\tfunction approve(address _spender, uint256 _value)\r\n\treturns (bool success) {\r\n\t\tallowance[msg.sender][_spender] = _value;\r\n\t\treturn true;\r\n\t}\r\n\t/* Approve and then comunicate the approved contract in a single tx */\r\n\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n\treturns (bool success) {\r\n\t\ttokenRecipient spender = tokenRecipient(_spender);\r\n\t\tif (approve(_spender, _value)) {\r\n\t\t\tspender.receiveApproval(msg.sender, _value, this, _extraData);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\t/* A contract attempts to get the coins */\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n\t\tif (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\r\n\t\tif (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\r\n\t\tif (_value > allowance[_from][msg.sender]) throw;   // Check allowance\r\n\t\tbalanceOf[_from] -= _value;                          // Subtract from the sender\r\n\t\tbalanceOf[_to] += _value;                            // Add the same to the recipient\r\n\t\tallowance[_from][msg.sender] -= _value;\r\n\t\tTransfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\t/* This unnamed function is called whenever someone tries to send ether to it */\r\n\tfunction () {\r\n\t\tthrow;     // Prevents accidental sending of ether\r\n\t}\r\n}\r\ncontract Crowdsale is owned{\r\n        uint public start = 1498651200;\r\n        uint public currentStage = 0;\r\n        bool public crowdsaleStarted = false;\r\n        uint[] public prices;\r\n        uint[] public tresholds;\r\n        address public bounties;\r\n        uint public totalCollected;\r\n        uint public deadline;\r\n        uint public presaleDeadline;\r\n        uint public tokensRaised;\r\n    \r\n        uint constant presaleDuration = 19 days;\r\n        uint constant saleDuration = 29 days;\r\n        uint tokenMultiplier = 10;\r\n    \r\n    \r\n        CSToken public tokenReward;\r\n        mapping(address => uint256) public balanceOf;\r\n        event GoalReached(address beneficiary, uint totalCollected);\r\n        event FundTransfer(address backer, uint amount, bool isContribution);\r\n        event NewStage (uint time, uint stage);\r\n    \r\n    \r\n        modifier saleFinished() { if (now < deadline && currentStage < 2) throw; _; }\r\n        modifier beforeDeadline() { if (now >= deadline) throw; _; }\r\n\r\n\tfunction Crowdsale(\r\n\taddress _bounties\r\n\t) {\r\n\t\ttokenReward = new CSToken(0, 'MyBit Token', 8, 'MyB');\r\n\t\ttokenMultiplier = tokenMultiplier**tokenReward.decimals();\r\n\t\ttokenReward.mintToken(_bounties, 1100000 * tokenMultiplier);\r\n\t\tpresaleDeadline = start + presaleDuration;\r\n\t\tdeadline = start + presaleDuration + saleDuration;\r\n\t\ttresholds.push(1250000 * tokenMultiplier);\r\n\t\ttresholds.push(3000000 * tokenMultiplier);\r\n\t\ttresholds.push(2**256 - 1);\r\n\t\tprices.push(7500 szabo / tokenMultiplier);\r\n\t\tprices.push(10 finney / tokenMultiplier);\r\n\t\tprices.push(2**256 - 1);\r\n\r\n\r\n\t\tbounties = _bounties;\r\n\r\n\t}\r\n\r\n    \r\n\tfunction mint(uint amount, uint tokens, address sender) internal {\r\n\t\tbalanceOf[sender] += amount;\r\n\t\ttokensRaised += tokens;\r\n\t\ttotalCollected += amount;\r\n\t\ttokenReward.mintToken(sender, tokens);\r\n\t\ttokenReward.mintToken(owner, tokens * 1333333 / 10000000);\r\n\t\ttokenReward.mintToken(bounties, tokens * 1666667 / 10000000);\r\n\t\tFundTransfer(sender, amount, true);\r\n\t}\r\n\r\n\tfunction processPayment(address from, uint amount) internal beforeDeadline\r\n\t{\r\n\t\tFundTransfer(from, amount, false);\r\n\t\tuint price = prices[currentStage];\r\n\t\tuint256 tokenAmount = amount / price;\r\n\t\tif (tokensRaised + tokenAmount > tresholds[currentStage])\r\n\t\t{\r\n\t\t\tuint256 currentTokens = tresholds[currentStage] - tokensRaised;\r\n\t\t\tuint256 currentAmount = currentTokens * price;\r\n\t\t\tmint(currentAmount, currentTokens, from);\r\n\t\t\tcurrentStage++;\r\n\t\t\tNewStage(now, currentStage);\r\n\t\t\tprocessPayment(from, amount - currentAmount);\r\n\t\t\treturn;\r\n\t\t}\r\n\t        mint(amount, tokenAmount, from);\r\n\t\tuint256 change = amount - tokenAmount * price;\r\n\t\tif(change > 0)\r\n\t\t{\r\n\t\t\ttotalCollected -= change;\r\n\t\t\tbalanceOf[from] -= change;\r\n\t\t\tif (!from.send(change)){\r\n\t\t\t\tthrow;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction () payable beforeDeadline {\r\n\t\tif(now < start) throw;\r\n\t\tif(currentStage > 1) throw;\r\n\t\tif (crowdsaleStarted){\r\n\t\t\tprocessPayment(msg.sender, msg.value);\r\n\t\t} else {\r\n\t\t\tif (now > presaleDeadline)\r\n\t\t\t{\r\n\t\t\t\tcrowdsaleStarted = true;\r\n\t\t\t} else {\r\n\t\t\t\tif (msg.value < 1 ether) throw;\r\n\t\t\t}\r\n\t\t\tprocessPayment(msg.sender, msg.value);    \r\n        }\r\n    }\r\n\r\n    function safeWithdrawal() saleFinished {\r\n        if (bounties == msg.sender) {\r\n            if (!bounties.send(totalCollected)) {\r\n                throw;\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tresholds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounties\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bounties\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalCollected\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"NewStage\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000252802458cA01239A694ACDB57dfB3fB0A80097e","Library":"","SwarmSource":"bzzr://0b305bb0bb60fc3dce81e632292aee4aadbd450e152a4690711439c590b7f7c1"}]}