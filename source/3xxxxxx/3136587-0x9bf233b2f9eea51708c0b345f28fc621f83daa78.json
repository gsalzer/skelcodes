{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.6;\r\n\r\ncontract token { function transferFrom(address sender, address receiver, uint amount) returns(bool success){  } }\r\n\r\ncontract Crowdsale {\r\n    /* if successful, the funds will be retrievable by this address */\r\n    address public beneficiary = 0x003230bbe64eccd66f62913679c8966cf9f41166; \r\n    /* if the funding goal is not reached, investors may withdraw their funds */\r\n    uint public fundingGoal = 50000000;\r\n    /* the maximum amount of tokens to be sold */\r\n    uint public maxGoal = 394240000; \r\n    /* how much has been raised by crowdale (in ETH) */\r\n    uint public amountRaised; \r\n    /* the start date of the crowdsale */\r\n    uint public start = 1488294000; \r\n    /* the number of tokens already sold */\r\n    uint public tokensSold; \r\n    /* there are different prices in different time intervals */\r\n    uint[4] public deadlines = [1488297600, 1488902400, 1489507200,1490112000];\r\n    uint[4] public prices = [833333333333333, 909090909090909,952380952380952, 1000000000000000];\r\n    /* the address of the token contract */\r\n    token public tokenReward;\r\n    /* the balances (in ETH) of all investors */\r\n    mapping(address => uint256) public balanceOf;\r\n    bool fundingGoalReached = false;\r\n    bool crowdsaleClosed = false;\r\n    /* notifying transfers and the success of the crowdsale*/\r\n    event GoalReached(address beneficiary, uint amountRaised);\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n    \r\n\r\n    /*  initialization, set the token address */\r\n    function Crowdsale( ) {\r\n        tokenReward = token(0xb4e7fc7f59c2ec07aee08c46241d7b47de4cec06);\r\n    }\r\n\r\n    /* whenever anyone sends funds to a contract, the corresponding amount of tokens is transfered if the crowdsale started and hasn't been\r\n        closed already and the maxGoal wasn't reached yet.*/\r\n    function () payable{\r\n        uint amount = msg.value;\r\n        uint numTokens = amount / getPrice();\r\n        if (crowdsaleClosed||now<start||tokensSold+numTokens>maxGoal) throw;\r\n        balanceOf[msg.sender] = amount;\r\n        amountRaised += amount;\r\n        tokensSold+=numTokens;\r\n        if(!tokenReward.transferFrom(beneficiary, msg.sender, numTokens)) throw;\r\n        FundTransfer(msg.sender, amount, true);\r\n    }\r\n    \r\n    /* looks up the current token price */\r\n    function getPrice() constant returns (uint256 price){\r\n        for(var i = 0; i < deadlines.length; i++)\r\n            if(now<deadlines[i])\r\n                return prices[i];\r\n        return prices[prices.length-1];//should never be returned, but to be sure to not divide by 0\r\n    }\r\n\r\n    modifier afterDeadline() { if (now >= deadlines[deadlines.length-1]) _; }\r\n\r\n    /* checks if the goal or time limit has been reached and ends the campaign */\r\n    function checkGoalReached() afterDeadline {\r\n        if (tokensSold >= fundingGoal){\r\n            fundingGoalReached = true;\r\n            GoalReached(beneficiary, amountRaised);\r\n        }\r\n        crowdsaleClosed = true;\r\n    }\r\n\r\n    /* allows the beneficiary and/or the funders to withdraw their funds */\r\n    function safeWithdrawal() afterDeadline {\r\n        // if the goal hasn't been reached, investors may withdraw their funds\r\n        if (!fundingGoalReached) {\r\n            uint amount = balanceOf[msg.sender];\r\n            balanceOf[msg.sender] = 0;\r\n            if (amount > 0) {\r\n                if (msg.sender.send(amount)) {\r\n                    FundTransfer(msg.sender, amount, false);\r\n                } else {\r\n                    balanceOf[msg.sender] = amount;\r\n                }\r\n            }\r\n        }\r\n        //if the goal has benn reached and the beneficiary himself is the sender, he may withdraw everything\r\n        if (fundingGoalReached && beneficiary == msg.sender) {\r\n            if (beneficiary.send(amountRaised)) {\r\n                FundTransfer(beneficiary, amountRaised, false);\r\n            } else {\r\n                //If we fail to send the funds to beneficiary, unlock funders balance\r\n                fundingGoalReached = false;\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deadlines\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.9+commit.364da425","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://21ed56a98b3f5fa052a6794e0b78f3c31bfd1cf6597a0fd4e778a3afdc2f2fc0"}]}