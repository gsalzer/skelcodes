{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\ncontract Sign {\r\n\r\n\taddress public AddAuthority;\t\r\n\tmapping (uint32 => bytes32) Cert;\t\r\n\t\r\n\tevent EventNotarise (address indexed Signer, bytes Donnees_Signature, bytes Donnees_Reste);\r\n\r\n\t// =============================================\r\n\t\r\n\tfunction Sign() {AddAuthority = msg.sender;}\r\n\r\n\tfunction () {throw;} // reverse\r\n\t\r\n\tfunction destroy() {if (msg.sender == AddAuthority) {selfdestruct(AddAuthority);}}\r\n\t\r\n\tfunction SetCert (uint32 _IndiceIndex, bytes32 _Cert) {\r\n\t\tCert [_IndiceIndex] = _Cert;\r\n\t}\t\t\t\t\r\n\t\r\n\tfunction GetCert (uint32 _IndiceIndex) returns (bytes32 _Valeur)  {\r\n\t\t_Valeur = Cert [_IndiceIndex];\r\n\t}\t\t\r\n\t\r\n\r\n \t// ====================================\r\n\r\n\tfunction VerifSignature (bytes _Signature, bytes _Reste) returns (bool) {\r\n\t\t// Vérification de la signature _Signature\r\n\t\t// _Reste : hash / Signer \r\n\t\t// Décompose _Signature\r\n\t\tbytes32 r;\r\n\t\tbytes32 s;\r\n\t\tuint8 v;\r\n\t\tbytes32 hash;\r\n\t\taddress Signer;\r\n        assembly {\r\n            r := mload(add(_Signature, 32))\r\n            s := mload(add(_Signature, 64))\r\n            // v := byte(0, mload(add(_Signature, 96)))\r\n            v := and(mload(add(_Signature, 65)), 255)\r\n            hash := mload(add(_Reste, 32))\r\n            Signer := mload(add(_Reste, 52))\r\n        }\t\t\r\n\t\treturn Signer == ecrecover(hash, v, r, s);\r\n\t}\r\n\t\r\n\tfunction VerifCert (uint32 _IndiceIndex, bool _log, bytes _Signature, bytes _Reste) returns (uint status) {\t\t\t\t\t\r\n\t\tstatus = 0;\r\n\t\t// Test de la validité de Cert\r\n\t\tif (Cert [_IndiceIndex] != 0) {\r\n\t\t\tstatus = 1;\r\n\t\t\t// Test de la signature\r\n\t\t\tif (VerifSignature (_Signature, _Reste)) {\r\n\t\t\t\t// _Reste : hash / Signer / \r\n\t\t\t\taddress Signer;\r\n\t\t\t\tassembly {Signer := mload(add(_Reste, 52))}\t\t\r\n\t\t\t} else {\r\n\t\t\t\t// Cert valide mais signature invalide \r\n\t\t\t\tstatus = 2;\t\t\t\t\t\t\t\r\n\t\t\t}\t\t\r\n\t\t\t// Log si demandé\r\n\t\t\tif (_log) {\r\n\t\t\t\tEventNotarise (Signer, _Signature, _Reste);\r\n\t\t\t\tstatus = 3;\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (status);\r\n\t}\r\n\t\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_IndiceIndex\",\"type\":\"uint32\"},{\"name\":\"_log\",\"type\":\"bool\"},{\"name\":\"_Signature\",\"type\":\"bytes\"},{\"name\":\"_Reste\",\"type\":\"bytes\"}],\"name\":\"VerifCert\",\"outputs\":[{\"name\":\"status\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Signature\",\"type\":\"bytes\"},{\"name\":\"_Reste\",\"type\":\"bytes\"}],\"name\":\"VerifSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AddAuthority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_IndiceIndex\",\"type\":\"uint32\"},{\"name\":\"_Cert\",\"type\":\"bytes32\"}],\"name\":\"SetCert\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_IndiceIndex\",\"type\":\"uint32\"}],\"name\":\"GetCert\",\"outputs\":[{\"name\":\"_Valeur\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"Signer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Donnees_Signature\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"Donnees_Reste\",\"type\":\"bytes\"}],\"name\":\"EventNotarise\",\"type\":\"event\"}]","ContractName":"Sign","CompilerVersion":"v0.4.10+commit.f0d539ae","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://48c354aebd3ebf85f5544988e3745a898ce7bbcf601de14adb8ed49c3198a950"}]}