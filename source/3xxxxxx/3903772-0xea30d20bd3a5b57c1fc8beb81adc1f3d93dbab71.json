{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/*\r\n\r\nStatus Reseller\r\n========================\r\n\r\nResells Status tokens from the crowdsale before transfers are enabled.\r\nAuthor: /u/Cintix\r\n\r\n*/\r\n\r\n// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\ncontract Reseller {\r\n  // Store the amount of SNT claimed by each account.\r\n  mapping (address => uint256) public snt_claimed;\r\n  // Total claimed SNT of all accounts.\r\n  uint256 public total_snt_claimed;\r\n  \r\n  // Status Network Token (SNT) Contract address.\r\n  ERC20 public token = ERC20(0x744d70FDBE2Ba4CF95131626614a1763DF805B9E);\r\n  // The developer address.\r\n  address developer = 0x4e6A1c57CdBfd97e8efe831f8f4418b1F2A09e6e;\r\n  \r\n  // Withdraws SNT claimed by the user.\r\n  function withdraw() {\r\n    // Store the user's amount of claimed SNT as the amount of SNT to withdraw.\r\n    uint256 snt_to_withdraw = snt_claimed[msg.sender];\r\n    // Update the user's amount of claimed SNT first to prevent recursive call.\r\n    snt_claimed[msg.sender] = 0;\r\n    // Update the total amount of claimed SNT.\r\n    total_snt_claimed -= snt_to_withdraw;\r\n    // Send the user their SNT.  Throws on failure to prevent loss of funds.\r\n    if(!token.transfer(msg.sender, snt_to_withdraw)) throw;\r\n  }\r\n  \r\n  // Claims SNT at a price determined by the block number.\r\n  function claim() payable {\r\n    // Verify ICO is over.\r\n    if(block.number < 3910000) throw;\r\n    // Calculate current sale price (SNT per ETH) based on block number.\r\n    uint256 snt_per_eth = (block.number - 3910000) * 2;\r\n    // Calculate amount of SNT user can purchase.\r\n    uint256 snt_to_claim = snt_per_eth * msg.value;\r\n    // Retrieve current SNT balance of contract.\r\n    uint256 contract_snt_balance = token.balanceOf(address(this));\r\n    // Verify the contract has enough remaining unclaimed SNT.\r\n    if((contract_snt_balance - total_snt_claimed) < snt_to_claim) throw;\r\n    // Update the amount of SNT claimed by the user.\r\n    snt_claimed[msg.sender] += snt_to_claim;\r\n    // Update the total amount of SNT claimed by all users.\r\n    total_snt_claimed += snt_to_claim;\r\n    // Send the funds to the developer instead of leaving them in the contract.\r\n    developer.transfer(msg.value);\r\n  }\r\n  \r\n  // Default function.  Called when a user sends ETH to the contract.\r\n  function () payable {\r\n    // If the user sent a 0 ETH transaction, withdraw their SNT.\r\n    if(msg.value == 0) {\r\n      withdraw();\r\n    }\r\n    // If the user sent ETH, claim SNT with it.\r\n    else {\r\n      claim();\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"total_snt_claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"snt_claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"Reseller","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f1f4287933fcdbd8a0ac7c7e0cd904ce02c993098974395ddefe67480ed569c4"}]}