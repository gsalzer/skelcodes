{"status":"1","message":"OK","result":[{"SourceCode":"/* A contract to store goods with escrowed funds. */\r\n\r\n/* Deployment:\r\nContract:\r\nOwner: seller\r\nLast address: dynamic\r\nABI: [{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"escrows\",\"outputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"lockedFunds\",\"type\":\"uint256\"},{\"name\":\"frozenFunds\",\"type\":\"uint256\"},{\"name\":\"frozenTime\",\"type\":\"uint64\"},{\"name\":\"count\",\"type\":\"uint16\"},{\"name\":\"buyerNo\",\"type\":\"bool\"},{\"name\":\"sellerNo\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dataInfo\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"uint256\"},{\"name\":\"_dataInfo\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint16\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPromille\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"uint256\"}],\"name\":\"getMoney\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"uint256\"},{\"name\":\"_dataInfo\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"no\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"uint256\"},{\"name\":\"_dataInfo\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"reject\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"uint256\"},{\"name\":\"_dataInfo\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"accept\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEscrows\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"uint256\"},{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_payment\",\"type\":\"uint256\"},{\"name\":\"_dataInfo\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"arbYes\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"uint256\"},{\"name\":\"_dataInfo\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"yes\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"logsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unbuy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFees\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePromille\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dataInfo\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"addDescription\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbiter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_arbiter\",\"type\":\"address\"},{\"name\":\"_freezePeriod\",\"type\":\"uint256\"},{\"name\":\"_feePromille\",\"type\":\"uint256\"},{\"name\":\"_rewardPromille\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint16\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"LogDebug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dataInfo\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventType\",\"type\":\"uint16\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"LogEvent\",\"type\":\"event\"}]\r\nOptimized: yes\r\nSolidity version: v0.4.4\r\n*/\r\n\r\npragma solidity ^0.4.0;\r\n\r\ncontract EscrowGoods {\r\n\r\n    struct EscrowInfo {\r\n\r\n        address buyer;\r\n        uint lockedFunds;\r\n        uint frozenFunds;\r\n        uint64 frozenTime;\r\n        uint16 count;\r\n        bool buyerNo;\r\n        bool sellerNo;\r\n    }\r\n\r\n    //enum GoodsStatus\r\n    uint16 constant internal None = 0;\r\n    uint16 constant internal Available = 1;\r\n    uint16 constant internal Canceled = 2;\r\n\r\n    //enum EventTypes\r\n    uint16 constant internal Buy = 1;\r\n    uint16 constant internal Accept = 2;\r\n    uint16 constant internal Reject = 3;\r\n    uint16 constant internal Cancel = 4;\r\n    uint16 constant internal Description = 10;\r\n    uint16 constant internal Unlock = 11;\r\n    uint16 constant internal Freeze = 12;\r\n    uint16 constant internal Resolved = 13;\r\n\r\n    //data\r\n\r\n    uint constant arbitrationPeriod = 30 days;\r\n    uint constant safeGas = 25000;\r\n\r\n    //seller/owner of the goods\r\n    address public seller;\r\n\r\n    //event counters\r\n    uint public contentCount = 0;\r\n    uint public logsCount = 0;\r\n\r\n    //escrow related\r\n\r\n    address public arbiter;\r\n\r\n    uint public freezePeriod;\r\n    //each lock fee in promilles.\r\n    uint public feePromille;\r\n    //reward in promilles. promille = percent * 10, eg 1,5% reward = 15 rewardPromille\r\n    uint public rewardPromille;\r\n\r\n    uint public feeFunds;\r\n    uint public totalEscrows;\r\n\r\n    mapping (uint => EscrowInfo) public escrows;\r\n\r\n    //goods related\r\n\r\n    //status of the goods: see GoodsStatus enum\r\n    uint16 public status;\r\n    //how many for sale\r\n    uint16 public count;\r\n\r\n    uint16 public availableCount;\r\n    uint16 public pendingCount;\r\n\r\n    //price per item\r\n    uint public price;\r\n\r\n    mapping (address => bool) public buyers;\r\n\r\n    bool private atomicLock;\r\n\r\n    //events\r\n\r\n    event LogDebug(string message);\r\n    event LogEvent(uint indexed lockId, string dataInfo, uint indexed version, uint16 eventType, address indexed sender, uint count, uint payment);\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != seller)\r\n          throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyArbiter {\r\n        if (msg.sender != arbiter)\r\n          throw;\r\n        _;\r\n    }\r\n\r\n    //modules\r\n\r\n    function EscrowGoods(address _arbiter, uint _freezePeriod, uint _feePromille, uint _rewardPromille,\r\n                          uint16 _count, uint _price) {\r\n\r\n        seller = msg.sender;\r\n\r\n        // all variables are always initialized to 0, save gas\r\n\r\n        //escrow related\r\n\r\n        arbiter = _arbiter;\r\n        freezePeriod = _freezePeriod;\r\n        feePromille = _feePromille;\r\n        rewardPromille = _rewardPromille;\r\n\r\n        //goods related\r\n\r\n        status = Available;\r\n        count = _count;\r\n        price = _price;\r\n\r\n        availableCount = count;\r\n    }\r\n\r\n    //helpers for events with counter\r\n    function logDebug(string message) internal {\r\n        logsCount++;\r\n        LogDebug(message);\r\n    }\r\n\r\n    function logEvent(uint lockId, string dataInfo, uint version, uint16 eventType,\r\n                                address sender, uint count, uint payment) internal {\r\n        contentCount++;\r\n        LogEvent(lockId, dataInfo, version, eventType, sender, count, payment);\r\n    }\r\n\r\n    function kill() onlyOwner {\r\n\r\n        //do not allow killing contract with active escrows\r\n        if(totalEscrows > 0) {\r\n            logDebug(\"totalEscrows > 0\");\r\n            return;\r\n        }\r\n        //do not allow killing contract with unclaimed escrow fees\r\n        if(feeFunds > 0) {\r\n            logDebug(\"feeFunds > 0\");\r\n            return;\r\n        }\r\n        suicide(msg.sender);\r\n    }\r\n\r\n    function safeSend(address addr, uint value) internal {\r\n\r\n        if(atomicLock) throw;\r\n        atomicLock = true;\r\n        if (!(addr.call.gas(safeGas).value(value)())) {\r\n            atomicLock = false;\r\n            throw;\r\n        }\r\n        atomicLock = false;\r\n    }\r\n\r\n    //escrow API\r\n\r\n    //vote YES - immediately sends funds to the peer\r\n    function yes(uint _lockId, string _dataInfo, uint _version) {\r\n\r\n        EscrowInfo info = escrows[_lockId];\r\n\r\n        if(info.lockedFunds == 0) {\r\n            logDebug(\"info.lockedFunds == 0\");\r\n            return;\r\n        }\r\n        if(msg.sender != info.buyer && msg.sender != seller) {\r\n            logDebug(\"msg.sender != info.buyer && msg.sender != seller\");\r\n            return;\r\n        }\r\n\r\n        uint payment = info.lockedFunds;\r\n        if(payment > this.balance) {\r\n            //HACK: should not get here - funds cannot be unlocked in this case\r\n            logDebug(\"payment > this.balance\");\r\n            return;\r\n        }\r\n\r\n        if(msg.sender == info.buyer) {\r\n\r\n            //send funds to seller\r\n            safeSend(seller, payment);\r\n        } else if(msg.sender == seller) {\r\n\r\n            //send funds to buyer\r\n            safeSend(info.buyer, payment);\r\n        } else {\r\n            //HACK: should not get here\r\n            logDebug(\"unknown msg.sender\");\r\n            return;\r\n        }\r\n\r\n        //remove record from escrows\r\n        if(totalEscrows > 0) totalEscrows -= 1;\r\n        info.lockedFunds = 0;\r\n\r\n        logEvent(_lockId, _dataInfo, _version, Unlock, msg.sender, info.count, payment);\r\n    }\r\n\r\n    //vote NO - freeze funds for arbitration\r\n    function no(uint _lockId, string _dataInfo, uint _version) {\r\n\r\n        EscrowInfo info = escrows[_lockId];\r\n\r\n        if(info.lockedFunds == 0) {\r\n            logDebug(\"info.lockedFunds == 0\");\r\n            return;\r\n        }\r\n        if(msg.sender != info.buyer && msg.sender != seller) {\r\n            logDebug(\"msg.sender != info.buyer && msg.sender != seller\");\r\n            return;\r\n        }\r\n\r\n        //freeze funds\r\n        //only allow one time freeze\r\n        if(info.frozenFunds == 0) {\r\n            info.frozenFunds = info.lockedFunds;\r\n            info.frozenTime = uint64(now);\r\n        }\r\n\r\n        if(msg.sender == info.buyer) {\r\n            info.buyerNo = true;\r\n        }\r\n        else if(msg.sender == seller) {\r\n            info.sellerNo = true;\r\n        } else {\r\n            //HACK: should not get here\r\n            logDebug(\"unknown msg.sender\");\r\n            return;\r\n        }\r\n\r\n        logEvent(_lockId, _dataInfo, _version, Freeze, msg.sender, info.count, info.lockedFunds);\r\n    }\r\n\r\n    //arbiter's decision on the case.\r\n    //arbiter can only decide when both buyer and seller voted NO\r\n    //arbiter decides on his own reward but not bigger than announced percentage (rewardPromille)\r\n    function arbYes(uint _lockId, address _who, uint _payment, string _dataInfo, uint _version) onlyArbiter {\r\n\r\n        EscrowInfo info = escrows[_lockId];\r\n\r\n        if(info.lockedFunds == 0) {\r\n            logDebug(\"info.lockedFunds == 0\");\r\n            return;\r\n        }\r\n        if(info.frozenFunds == 0) {\r\n            logDebug(\"info.frozenFunds == 0\");\r\n            return;\r\n        }\r\n\r\n        if(_who != seller && _who != info.buyer) {\r\n            logDebug(\"_who != seller && _who != info.buyer\");\r\n            return;\r\n        }\r\n        //requires both NO to arbitration\r\n        if(!info.buyerNo || !info.sellerNo) {\r\n            logDebug(\"!info.buyerNo || !info.sellerNo\");\r\n            return;\r\n        }\r\n\r\n        if(_payment > info.lockedFunds) {\r\n            logDebug(\"_payment > info.lockedFunds\");\r\n            return;\r\n        }\r\n        if(_payment > this.balance) {\r\n            //HACK: should not get here - funds cannot be unlocked in this case\r\n            logDebug(\"_payment > this.balance\");\r\n            return;\r\n        }\r\n\r\n        //limit payment\r\n        uint reward = (info.lockedFunds * rewardPromille) / 1000;\r\n        if(reward > (info.lockedFunds - _payment)) {\r\n            logDebug(\"reward > (info.lockedFunds - _payment)\");\r\n            return;\r\n        }\r\n\r\n        //send funds to the winner\r\n        safeSend(_who, _payment);\r\n\r\n        //send the rest as reward\r\n        info.lockedFunds -= _payment;\r\n        feeFunds += info.lockedFunds;\r\n        info.lockedFunds = 0;\r\n\r\n        logEvent(_lockId, _dataInfo, _version, Resolved, msg.sender, info.count, _payment);\r\n    }\r\n\r\n    //allow arbiter to get his collected fees\r\n    function getFees() onlyArbiter {\r\n\r\n        if(feeFunds > this.balance) {\r\n            //HACK: should not get here - funds cannot be unlocked in this case\r\n            logDebug(\"feeFunds > this.balance\");\r\n            return;\r\n        }\r\n        \r\n        safeSend(arbiter, feeFunds);\r\n\r\n        feeFunds = 0;\r\n    }\r\n\r\n    //allow buyer or seller to take timeouted funds.\r\n    //buyer can get funds if seller is silent and seller can get funds if buyer is silent (after freezePeriod)\r\n    //buyer can get back funds under arbitration if arbiter is silent (after arbitrationPeriod)\r\n    function getMoney(uint _lockId) {\r\n\r\n        EscrowInfo info = escrows[_lockId];\r\n\r\n        if(info.lockedFunds == 0) {\r\n            logDebug(\"info.lockedFunds == 0\");\r\n            return;\r\n        }\r\n        //HACK: this check is necessary since frozenTime == 0 at escrow creation\r\n        if(info.frozenFunds == 0) {\r\n            logDebug(\"info.frozenFunds == 0\");\r\n            return;\r\n        }\r\n\r\n        //timout for voting not over yet\r\n        if(now < (info.frozenTime + freezePeriod)) {\r\n            logDebug(\"now < (info.frozenTime + freezePeriod)\");\r\n            return;\r\n        }\r\n\r\n        uint payment = info.lockedFunds;\r\n        if(payment > this.balance) {\r\n            //HACK: should not get here - funds cannot be unlocked in this case\r\n            logDebug(\"payment > this.balance\");\r\n            return;\r\n        }\r\n\r\n        //both has voted - money is under arbitration\r\n        if(info.buyerNo && info.sellerNo) {\r\n\r\n            //arbitration timeout is not over yet\r\n            if(now < (info.frozenTime + freezePeriod + arbitrationPeriod)) {\r\n                logDebug(\"now < (info.frozenTime + freezePeriod + arbitrationPeriod)\");\r\n                return;\r\n            }\r\n\r\n            //arbiter was silent so redeem the funds to the buyer\r\n            safeSend(info.buyer, payment);\r\n\r\n            info.lockedFunds = 0;\r\n            return;\r\n        }\r\n\r\n        if(info.buyerNo) {\r\n\r\n            safeSend(info.buyer, payment);\r\n\r\n            info.lockedFunds = 0;\r\n            return;\r\n        }\r\n        if(info.sellerNo) {\r\n\r\n            safeSend(seller, payment);\r\n\r\n            info.lockedFunds = 0;\r\n            return;\r\n        }\r\n    }\r\n\r\n    //goods API\r\n\r\n    //add new description to the goods\r\n    function addDescription(string _dataInfo, uint _version) onlyOwner {\r\n\r\n        //Accept order to event log\r\n        logEvent(0, _dataInfo, _version, Description, msg.sender, 0, 0);\r\n    }\r\n\r\n    //buy with escrow. id - escrow info id\r\n    function buy(uint _lockId, string _dataInfo, uint _version, uint16 _count) payable {\r\n\r\n        //reject money transfers for bad item status\r\n\r\n        if(status != Available) throw;\r\n        if(msg.value < (price * _count)) throw;\r\n        if(_count > availableCount) throw;\r\n        if(_count == 0) throw;\r\n        if(feePromille > 1000) throw;\r\n        if(rewardPromille > 1000) throw;\r\n        if((feePromille + rewardPromille) > 1000) throw;\r\n\r\n        //create default EscrowInfo struct or access existing\r\n        EscrowInfo info = escrows[_lockId];\r\n\r\n        //lock only once for a given id\r\n        if(info.lockedFunds > 0) throw;\r\n\r\n        //lock funds\r\n\r\n        uint fee = (msg.value * feePromille) / 1000;\r\n        //limit fees\r\n        if(fee > msg.value) throw;\r\n\r\n        uint funds = (msg.value - fee);\r\n        feeFunds += fee;\r\n        totalEscrows += 1;\r\n\r\n        info.buyer = msg.sender;\r\n        info.lockedFunds = funds;\r\n        info.frozenFunds = 0;\r\n        info.buyerNo = false;\r\n        info.sellerNo = false;\r\n        info.count = _count;\r\n\r\n        pendingCount += _count;\r\n        buyers[msg.sender] = true;\r\n\r\n        //Buy order to event log\r\n        logEvent(_lockId, _dataInfo, _version, Buy, msg.sender, _count, msg.value);\r\n    }\r\n\r\n    function accept(uint _lockId, string _dataInfo, uint _version) onlyOwner {\r\n\r\n        EscrowInfo info = escrows[_lockId];\r\n        \r\n        if(info.count > availableCount) {\r\n            logDebug(\"info.count > availableCount\");\r\n            return;\r\n        }\r\n        if(info.count > pendingCount) {\r\n            logDebug(\"info.count > pendingCount\");\r\n            return;\r\n        }\r\n\r\n        pendingCount -= info.count;\r\n        availableCount -= info.count;\r\n\r\n        //Accept order to event log\r\n        logEvent(_lockId, _dataInfo, _version, Accept, msg.sender, info.count, info.lockedFunds);\r\n    }\r\n\r\n    function reject(uint _lockId, string _dataInfo, uint _version) onlyOwner {\r\n        \r\n        EscrowInfo info = escrows[_lockId];\r\n\r\n        if(info.count > pendingCount) {\r\n            logDebug(\"info.count > pendingCount\");\r\n            return;\r\n        }\r\n\r\n        pendingCount -= info.count;\r\n\r\n        //send money back\r\n        yes(_lockId, _dataInfo, _version);\r\n\r\n        //Reject order to event log\r\n        //HACK: \"yes\" call above may fail and this event will be non-relevant. Do not rely on it.\r\n        logEvent(_lockId, _dataInfo, _version, Reject, msg.sender, info.count, info.lockedFunds);\r\n    }\r\n\r\n    function cancel(string _dataInfo, uint _version) onlyOwner {\r\n\r\n        //Canceled status\r\n        status = Canceled;\r\n\r\n        //Cancel order to event log\r\n        logEvent(0, _dataInfo, _version, Cancel, msg.sender, availableCount, 0);\r\n    }\r\n\r\n    //remove buyer from the watchlist\r\n    function unbuy() {\r\n\r\n        buyers[msg.sender] = false;\r\n    }\r\n\r\n    function () {\r\n        throw;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"escrows\",\"outputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"lockedFunds\",\"type\":\"uint256\"},{\"name\":\"frozenFunds\",\"type\":\"uint256\"},{\"name\":\"frozenTime\",\"type\":\"uint64\"},{\"name\":\"count\",\"type\":\"uint16\"},{\"name\":\"buyerNo\",\"type\":\"bool\"},{\"name\":\"sellerNo\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dataInfo\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"uint256\"},{\"name\":\"_dataInfo\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint16\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPromille\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"uint256\"}],\"name\":\"getMoney\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"uint256\"},{\"name\":\"_dataInfo\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"no\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"uint256\"},{\"name\":\"_dataInfo\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"reject\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"uint256\"},{\"name\":\"_dataInfo\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"accept\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEscrows\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"uint256\"},{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_payment\",\"type\":\"uint256\"},{\"name\":\"_dataInfo\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"arbYes\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"uint256\"},{\"name\":\"_dataInfo\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"yes\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"logsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unbuy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFees\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePromille\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dataInfo\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"addDescription\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbiter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_arbiter\",\"type\":\"address\"},{\"name\":\"_freezePeriod\",\"type\":\"uint256\"},{\"name\":\"_feePromille\",\"type\":\"uint256\"},{\"name\":\"_rewardPromille\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint16\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"LogDebug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dataInfo\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventType\",\"type\":\"uint16\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"LogEvent\",\"type\":\"event\"}]","ContractName":"EscrowGoods","CompilerVersion":"v0.4.4+commit.4633f3de","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000278d00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000429d069189e0000","Library":"","SwarmSource":""}]}