{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/*\r\n\r\nTenX Reseller\r\n========================\r\n\r\nResells TenX tokens from the crowdsale before transfers are enabled.\r\nAuthor: /u/Cintix\r\n\r\n*/\r\n\r\n// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\r\n// Well, almost.  PAY tokens throw on transfer failure instead of returning false.\r\ncontract ERC20 {\r\n  function transfer(address _to, uint _value);\r\n  function balanceOf(address _owner) constant returns (uint balance);\r\n}\r\n\r\n// Interface to TenX ICO Contract\r\ncontract MainSale {\r\n  function createTokens(address recipient) payable;\r\n}\r\n\r\ncontract Reseller {\r\n  // Store the amount of PAY claimed by each account.\r\n  mapping (address => uint256) public pay_claimed;\r\n  // Total claimed PAY of all accounts.\r\n  uint256 public total_pay_claimed;\r\n  \r\n  // The TenX Token Sale address.\r\n  MainSale public sale = MainSale(0xd43D09Ec1bC5e57C8F3D0c64020d403b04c7f783);\r\n  // TenX Token (PAY) Contract address.\r\n  ERC20 public token = ERC20(0xB97048628DB6B661D4C2aA833e95Dbe1A905B280);\r\n  // The developer address.\r\n  address developer = 0x4e6A1c57CdBfd97e8efe831f8f4418b1F2A09e6e;\r\n\r\n  // Buys PAY for the contract with user funds.\r\n  function buy() payable {\r\n    // Transfer received funds to the TenX crowdsale contract to buy tokens.\r\n    sale.createTokens.value(msg.value)(address(this));\r\n  }\r\n  \r\n  // Withdraws PAY claimed by the user.\r\n  function withdraw() {\r\n    // Store the user's amount of claimed PAY as the amount of PAY to withdraw.\r\n    uint256 pay_to_withdraw = pay_claimed[msg.sender];\r\n    // Update the user's amount of claimed PAY first to prevent recursive call.\r\n    pay_claimed[msg.sender] = 0;\r\n    // Update the total amount of claimed PAY.\r\n    total_pay_claimed -= pay_to_withdraw;\r\n    // Send the user their PAY.  Throws on failure to prevent loss of funds.\r\n    token.transfer(msg.sender, pay_to_withdraw);\r\n  }\r\n  \r\n  // Claims PAY at a price determined by the block number.\r\n  function claim() payable {\r\n    // Verify ICO is over.\r\n    if(block.number < 3930000) throw;\r\n    // Calculate current sale price (PAY per ETH) based on block number.\r\n    uint256 pay_per_eth = (block.number - 3930000) / 10;\r\n    // Calculate amount of PAY user can purchase.\r\n    uint256 pay_to_claim = pay_per_eth * msg.value;\r\n    // Retrieve current PAY balance of contract.\r\n    uint256 contract_pay_balance = token.balanceOf(address(this));\r\n    // Verify the contract has enough remaining unclaimed PAY.\r\n    if((contract_pay_balance - total_pay_claimed) < pay_to_claim) throw;\r\n    // Update the amount of PAY claimed by the user.\r\n    pay_claimed[msg.sender] += pay_to_claim;\r\n    // Update the total amount of PAY claimed by all users.\r\n    total_pay_claimed += pay_to_claim;\r\n    // Send the funds to the developer instead of leaving them in the contract.\r\n    developer.transfer(msg.value);\r\n  }\r\n  \r\n  // Default function.  Called when a user sends ETH to the contract.\r\n  function () payable {\r\n    // If the user sent a 0 ETH transaction, withdraw their PAY.\r\n    if(msg.value == 0) {\r\n      withdraw();\r\n    }\r\n    // If the user sent ETH, claim PAY with it.\r\n    else {\r\n      claim();\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pay_claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_pay_claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"Reseller","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5f9393b8ea089f94d11e42a4707585b06a7577ecb1644a732a1b7c04d413224e"}]}