{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n\r\ncontract ERC20Interface {\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\ncontract Owner {\r\n    //For storing the owner address\r\n    address public owner;\r\n\r\n    //Constructor for assign a address for owner property(It will be address who deploy the contract) \r\n    function Owner() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    //This is modifier (a special function) which will execute before the function execution on which it applied \r\n    modifier onlyOwner() {\r\n        if(msg.sender != owner) throw;\r\n        //This statement replace with the code of fucntion on which modifier is applied\r\n        _;\r\n    }\r\n    //Here is the example of modifier this function code replace _; statement of modifier \r\n    function transferOwnership(address new_owner) onlyOwner {\r\n        owner = new_owner;\r\n    }\r\n}\r\n\r\ncontract RemiCoin is ERC20Interface,Owner {\r\n\r\n    //Common information about coin\r\n    string  public name;\r\n    string  public symbol;\r\n    uint8   public decimals;\r\n    uint256 public totalSupply;\r\n    \r\n    //Balance property which should be always associate with an address\r\n    mapping(address => uint256) balances;\r\n    //frozenAccount property which should be associate with an address\r\n    mapping (address => bool) public frozenAccount;\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    \r\n    //These generates a public event on the blockchain that will notify clients\r\n    event FrozenFunds(address target, bool frozen);\r\n    \r\n    //Construtor for initial supply (The address who deployed the contract will get it) and important information\r\n    function RemiCoin(uint256 initial_supply, string _name, string _symbol, uint8 _decimal) {\r\n        balances[msg.sender]  = initial_supply;\r\n        name                  = _name;\r\n        symbol                = _symbol;\r\n        decimals              = _decimal;\r\n        totalSupply           = initial_supply;\r\n    }\r\n\r\n    // What is the balance of a particular account?\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    //Function for transer the coin from one address to another\r\n    function transfer(address to, uint value) returns (bool success) {\r\n\r\n        //checking account is freeze or not\r\n        if (frozenAccount[msg.sender]) return false;\r\n\r\n        //checking the sender should have enough coins\r\n        if(balances[msg.sender] < value) return false;\r\n        //checking for overflows\r\n        if(balances[to] + value < balances[to]) return false;\r\n        \r\n        //substracting the sender balance\r\n        balances[msg.sender] -= value;\r\n        //adding the reciever balance\r\n        balances[to] += value;\r\n        \r\n        // Notify anyone listening that this transfer took place\r\n        Transfer(msg.sender, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    //Function for transer the coin from one address to another\r\n    function transferFrom(address from, address to, uint value) returns (bool success) {\r\n\r\n        //checking account is freeze or not\r\n        if (frozenAccount[msg.sender]) return false;\r\n\r\n        //checking the from should have enough coins\r\n        if(balances[from] < value) return false;\r\n\r\n        //checking for allowance\r\n        if( allowed[from][msg.sender] >= value ) return false;\r\n\r\n        //checking for overflows\r\n        if(balances[to] + value < balances[to]) return false;\r\n        \r\n        balances[from] -= value;\r\n        allowed[from][msg.sender] -= value;\r\n        balances[to] += value;\r\n        \r\n        // Notify anyone listening that this transfer took place\r\n        Transfer(from, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    //\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    //\r\n    function approve(address _spender, uint256 _amount) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n    \r\n    //\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner{\r\n        balances[target] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        \r\n        Transfer(0,owner,mintedAmount);\r\n        Transfer(owner,target,mintedAmount);\r\n    }\r\n\r\n    //\r\n    function freezeAccount(address target, bool freeze) onlyOwner {\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n    }\r\n\r\n    //\r\n    function changeName(string _name) onlyOwner {\r\n        name = _name;\r\n    }\r\n\r\n    //\r\n    function changeSymbol(string _symbol) onlyOwner {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    //\r\n    function changeDecimals(uint8 _decimals) onlyOwner {\r\n        decimals = _decimals;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"changeSymbol\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"changeDecimals\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"initial_supply\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimal\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"RemiCoin","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000001dd7c1681d0000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000852656d69436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003524d430000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://6207b73e7941c1dd2b7939144dac73f605db1c23379631ede33b0d6246ccf0e6"}]}