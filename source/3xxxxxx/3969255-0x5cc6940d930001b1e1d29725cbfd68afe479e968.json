{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/* Ethart unindexed Factory Contract:\r\n\r\n\tEthart ARCHITECTURE\r\n\t-------------------\r\n\t\t\t\t\t\t_________________________________________\r\n\t\t\t\t\t\tV\t\t\t\t\t\t\t\t\t\tV\r\n\tController --> Registrar <--> Factory Contract1 --> Artwork Contract1\r\n\t\t\t\t\t\t\t\t  Factory Contract2\t    Artwork Contract2\r\n\t\t\t\t\t\t\t\t  \t\t...\t\t\t\t\t...\r\n\t\t\t\t\t\t\t\t  Factory ContractN\t    Artwork ContractN\r\n\r\n\tController: The controler contract is the owner of the Registrar contract and can\r\n\t\t- Set a new owner\r\n\t\t- Controll the assets of the Registrar (withdraw ETH, transfer, sell, burn pieces owned by the Registrar)\r\n\t\t- The plan is to replace the controller contract with a DAO in preperation for a possible ICO\r\n\t\r\n\tRegistrar:\r\n\t\t- The Registrar contract atcs as the central registry for all sha256 hashes in the Ethart factory contract network.\r\n\t\t- Approved Factory Contracts can register sha256 hashes using the Registrar interface.\r\n\t\t- 2.5% of the art produced and 2.5% of turnover of the contract network will be transfered to the Registrar.\r\n\t\r\n\tFactory Contracts:\r\n\t\t- Factory Contracts can spawn Artwork Contracts in line with artists specifications\r\n\t\t- Factory Contracts will only spawn Artwork Contracts who's sha256 hashes are unique per the Registrar's sha256 registry\r\n\t\t- Factory Contracts will register every new Artwork Contract with it's details with the Registrar contract\r\n\t\r\n\tArtwork Contracts:\r\n\t\t- Artwork Contracts act as minimalist decentralized exchanges for their pieces in line with specified conditions\r\n\t\t- Artwork Contracts will interact with the Registrar to issue buyers of pieces a predetermined amount of Patron tokens based on the transaction value \r\n\t\t- Artwork Contracts can be interacted with by the Controller via the Registrar using their interfaces to transfer, sell, burn etc pieces\r\n\t\r\n\t(c) Stefan Pernar 2017 - all rights reserved\r\n\t(c) ERC20 functions BokkyPooBah 2017. The MIT Licence.\r\n*/\r\n\r\ncontract Interface {\r\n\r\n\t// Ethart network interface\r\n\tfunction registerArtwork (address _contract, bytes32 _SHA256Hash, uint256 _editionSize, string _title, string _fileLink, uint256 _ownerCommission, address _artist, bool _indexed, bool _ouroboros);\r\n\tfunction isSHA256HashRegistered (bytes32 _SHA256Hash) returns (bool _registered);\t\t\t// Check if a sha256 hash is registared\r\n\tfunction isFactoryApproved (address _factory) returns (bool _approved);\t\t\t\t\t\t// Check if an address is a registred factory contract\r\n\tfunction issuePatrons (address _to, uint256 _amount);\t\t\t\t\t\t\t\t\t\t// Issues Patron tokens according to conditions specified in factory contracts\r\n    function approveFactoryContract (address _factoryContractAddress, bool _approved);\t\t\t// Approves/disapproves factory contracts.\r\n\tfunction changeOwner (address newOwner);\t\t\t\t\t\t\t\t\t\t\t\t\t// Change the registrar's owner.\r\n\r\n\tfunction offerPieceForSaleByAddress (address _contract, uint256 _price);\t\t\t\t\t// Sell a piece owned by the registrar.\r\n\tfunction offerPieceForSale (uint256 _price);\r\n\tfunction fillBidByAddress (address _contract);\t\t\t\t\t\t\t\t\t\t\t\t// Fill a bid with an unindexed piece owned by the registrar\r\n\tfunction fillBid();\r\n\tfunction cancelSaleByAddress (address _contract);\t\t\t\t\t\t\t\t\t\t\t// Cancel the sale of an unindexed piece owned by the registrar\r\n\tfunction cancelSale();\r\n\tfunction offerIndexedPieceForSaleByAddress (address _contract, uint256 _index, uint256 _price);\t\t\t\t// Sell an indexed piece owned by the registrar.\r\n\tfunction offerIndexedPieceForSale(uint256 _index, uint256 _price);\r\n\tfunction fillIndexedBidByAddress (address _contract, uint256 _index);\t\t\t\t\t\t// Fill a bid with an indexed piece owned by the registrar\r\n\tfunction fillIndexedBid (uint256 _index);\r\n\tfunction cancelIndexedSaleByAddress (address _contract);\t\t\t\t\t\t\t\t\t// Cancel the sale of an unindexed piece owned by the registrar\r\n\tfunction cancelIndexedSale();\r\n\r\n    function transferByAddress (address _contract, uint256 _amount, address _to);\t\t\t\t// Transfers unindexed pieces owned by the registrar contract\r\n    function transferIndexedByAddress (address _contract, uint256 _index, address _to);\t\t// Transfers indexed pieces owned by the registrar contract\r\n\tfunction approveByAddress (address _contract, address _spender, uint256 _amount);\t\t\t// Sets an allowance for unindexed pieces owned by the registrar contract\r\n\tfunction approveIndexedByAddress (address _contract, address _spender, uint256 _index);\t\t// Sets an allowance for indexed pieces owned by the registrar contract\r\n\tfunction burnByAddress (address _contract, uint256 _amount);\t\t\t\t\t\t\t\t// Burn an unindexed piece owned by the registrar contract\r\n\tfunction burnFromByAddress (address _contract, uint256 _amount, address _from);\t\t\t\t// Burn an unindexed piece owned by annother address\r\n\tfunction burnIndexedByAddress (address _contract, uint256 _index);\t\t\t\t\t\t\t// Burn an indexed piece owned by the registrar contract\r\n\tfunction burnIndexedFromByAddress (address _contract, address _from, uint256 _index);\t\t// Burn an indexed piece owned by another address\r\n\r\n\t// ERC20 interface\r\n    function totalSupply() constant returns (uint256 totalSupply);\t\t\t\t\t\t\t\t\t// Returns the total supply of an artwork or token\r\n\tfunction balanceOf(address _owner) constant returns (uint256 balance);\t\t\t\t\t\t\t// Returns an address' balance of an artwork or token\r\n \tfunction transfer(address _to, uint256 _value) returns (bool success);\t\t\t\t\t\t\t// Transfers pieces of art or tokens to an address\r\n \tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success);\t\t// Transfers pieces of art of tokens owned by another address to an address\r\n\tfunction approve(address _spender, uint256 _value) returns (bool success);\t\t\t\t\t\t// Sets an allowance for an address\r\n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining);\t\t// Returns the allowance of an address for another address\r\n\r\n\t// Additional token functions\r\n\tfunction burn(uint256 _amount) returns (bool success);\t\t\t\t\t\t\t\t\t\t// Burns (removes from circulation) unindexed pieces of art or tokens.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// In the case of 'ouroboros' pieces this function also returns the piece's\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// components to the message sender\r\n\t\r\n\tfunction burnFrom(address _from, uint256 _amount) returns (bool success);\t\t\t\t\t// Burns (removes from circulation) unindexed pieces of art or tokens\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// owned by another address. In the case of 'ouroboros' pieces this\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// function also returns the piece's components to the message sender\r\n\t\r\n\t// Extended ERC20 interface for indexed pieces\r\n\tfunction transferIndexed (address _to, uint256 __index) returns (bool success);\t\t\t// Transfers an indexed piece of art\r\n\tfunction transferFromIndexed (address _from, address _to, uint256 _index) returns (bool success);\t// Transfers an indexed piece of art from another address\r\n\tfunction approveIndexed (address _spender, uint256 _index) returns (bool success);\t\t\t// Sets an allowance for an indexed piece of art for another address\r\n\tfunction burnIndexed (uint256 _index);\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Burns (removes from circulation) indexed pieces of art or tokens.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// In the case of 'ouroboros' pieces this function also returns the\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// piece's components to the message sender\r\n\t\r\n\tfunction burnIndexedFrom (address _owner, uint256 _index);\t\t\t\t\t\t\t\t\t// Burns (removes from circulation) indexed pieces of art or tokens\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// owned by another address. In the case of 'ouroboros' pieces this\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// function also returns the piece's components to the message sender\r\n\r\n}\r\n\r\ncontract Registrar {\r\n\r\n\t// Patron token ERC20 public variables\r\n\tstring public constant symbol = \"ART\";\r\n\tstring public constant name = \"Patron - Ethart Network Token\";\r\n\tuint8 public constant decimals = 18;\r\n\tuint256 _totalPatronSupply;\r\n\r\n\tevent Transfer(address indexed _from, address _to, uint256 _value);\r\n\tevent Approval(address indexed _owner, address _spender, uint256 _value);\r\n\tevent Burn(address indexed _owner, uint256 _amount);\r\n\r\n    // Patron token balances for each account\r\n\tmapping(address => uint256) public balances;\t\t\t\t\t\t// Patron token balances\r\n\r\n\tevent NewArtwork(address _contract, bytes32 _SHA256Hash, uint256 _editionSize, string _title, string _fileLink, uint256 _ownerCommission, address _artist, bool _indexed, bool _ouroboros);\r\n\r\n\r\n \t// Owner of account approves the transfer of an amount of Patron tokens to another account\r\n \tmapping(address => mapping (address => uint256)) allowed;\t\t\t// Patron token allowances\r\n\t\r\n\t// BEGIN ERC20 functions (c) BokkyPooBah 2017. The MIT Licence.\r\n\r\n    function totalSupply() constant returns (uint256 totalPatronSupply) {\r\n\t\ttotalPatronSupply = _totalPatronSupply;\r\n\t\t}\r\n\r\n\t// What is the balance of a particular account?\r\n\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\r\n \t\treturn balances[_owner];\r\n\t\t}\r\n\r\n\t// Transfer the balance from owner's account to another account\r\n\tfunction transfer(address _to, uint256 _amount) returns (bool success) {\r\n\t\tif (balances[msg.sender] >= _amount \r\n\t\t\t&& _amount > 0\r\n \t\t   \t&& balances[_to] + _amount > balances[_to]\r\n\t\t\t&& _to != 0x0)\t\t\t\t\t\t\t\t\t\t// use burn() instead\r\n\t\t\t{\r\n\t\t\tbalances[msg.sender] -= _amount;\r\n\t\t\tbalances[_to] += _amount;\r\n\t\t\tTransfer(msg.sender, _to, _amount);\r\n \t\t   \treturn true;\r\n\t\t\t}\r\n\t\t\telse { return false;}\r\n \t\t }\r\n\r\n\t// Send _value amount of tokens from address _from to address _to\r\n\t// The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n \t// tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n \t// fees in sub-currencies; the command should fail unless the _from account has\r\n \t// deliberately authorized the sender of the message via some mechanism; we propose\r\n \t// these standardized APIs for approval:\r\n \tfunction transferFrom( address _from, address _to, uint256 _amount) returns (bool success)\r\n\t\t{\r\n\t\t\tif (balances[_from] >= _amount\r\n\t\t\t\t&& allowed[_from][msg.sender] >= _amount\r\n\t\t\t\t&& _amount > 0\r\n\t\t\t\t&& balances[_to] + _amount > balances[_to]\r\n\t\t\t\t&& _to != 0x0)\t\t\t\t\t\t\t\t\t\t// use burn() instead\r\n\t\t\t\t\t{\r\n\t\t\t\t\tbalances[_from] -= _amount;\r\n\t\t\t\t\tallowed[_from][msg.sender] -= _amount;\r\n\t\t\t\t\tbalances[_to] += _amount;\r\n\t\t\t\t\tTransfer(_from, _to, _amount);\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t\t} else {return false;}\r\n\t\t}\r\n\r\n\t// Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n\t// If this function is called again it overwrites the current allowance with _value.\r\n\tfunction approve(address _spender, uint256 _amount) returns (bool success) {\r\n\t\tallowed[msg.sender][_spender] = _amount;\r\n\t\tApproval(msg.sender, _spender, _amount);\r\n\t\treturn true;\r\n\t\t}\r\n\r\n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t\t}\r\n\r\n\t// END ERC20 functions (c) BokkyPooBah 2017. The MIT Licence.\r\n\t\r\n\t// Additional Patron token functions\r\n\t\r\n\tfunction burn(uint256 _amount) returns (bool success) {\r\n\t\t\tif (balances[msg.sender] >= _amount) {\r\n\t\t\t\tbalances[msg.sender] -= _amount;\r\n\t\t\t\t_totalPatronSupply -= _amount;\r\n\t\t\t\tBurn(msg.sender, _amount);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse {throw;}\r\n\t\t}\r\n\r\n\tfunction burnFrom(address _from, uint256 _value) returns (bool success) {\r\n\t\tif (balances[_from] >= _value && allowed[_from][msg.sender] >= _value) {\r\n\t\t\tbalances[_from] -= _value;\r\n\t\t\tallowed[_from][msg.sender] -= _value;\r\n\t\t\t_totalPatronSupply -= _value;\r\n\t\t\tBurn(_from, _value);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse {throw;}\r\n\t}\r\n\r\n\t// Ethart variables\r\n    mapping (bytes32 => address) public SHA256HashRegister;\t\t// Register of all SHA256 Hashes\r\n\tmapping (address => bool) public approvedFactories;\t\t\t// Register of all approved factory contracts\r\n\tmapping (address => bool) public approvedContracts;\t\t\t// Register of all approved artwork contracts\r\n\tmapping (address => address) public referred;\t\t\t\t// Register of all referrers (referree => referrer) used for the affiliate program\r\n\tmapping (address => bool) public cantSetReferrer;\t\t\t// Referrer for an artist has to be set _before_ the first piece has been created by an address\r\n\r\n\tstruct artwork {\r\n\t\tbytes32 SHA256Hash;\r\n\t\tuint256 editionSize;\r\n\t\tstring title;\r\n\t\tstring fileLink;\r\n\t\tuint256 ownerCommission;\r\n\t\taddress artist;\r\n\t\taddress factory;\r\n\t\tbool isIndexed;\r\n\t\tbool isOuroboros;}\r\n\t\r\n\tmapping (address => artwork) public artworkRegister;\t\t// Register of all artworks and their details\r\n\r\n\t// An indexed register of all of an artist's artworks\r\n\tmapping(address => mapping (uint256 => address)) public artistsArtworks;\t// Enter artist address and a running number to get the artist's artwork addresses.\r\n\tmapping(address => uint256) public artistsArtworkCount;\t\t\t\t\t\t// A running number counting an artist's artworks\r\n\tmapping(address => address) public artworksFactory;\t\t\t\t\t\t\t// Maps all artworks to their respective factory contracts\r\n\r\n\tuint256 artworkCount;\t\t\t\t\t\t\t\t\t\t// Keeps track of the number of artwork contracts in the network\r\n\t\r\n\tmapping (uint256 => address) public artworkIndex;\t\t\t// An index of all the artwork contracts in the network\r\n\r\n\taddress public owner;\t\t\t\t\t\t\t\t\t\t// The address of the contract owner\r\n\t\r\n\tuint256 public donationMultiplier;\r\n\r\n    // Functions with this modifier can only be executed by a specific address\r\n    modifier onlyBy (address _account)\r\n    {\r\n        require(msg.sender == _account);\r\n        _;\r\n    }\r\n\r\n    // Functions with this modifier can only be executed by approved factory contracts\r\n    modifier registerdFactoriesOnly ()\r\n    {\r\n        require(approvedFactories[msg.sender]);\r\n        _;\r\n    }\r\n\r\n\tmodifier approvedContractsOnly ()\r\n\t{\r\n\t\trequire(approvedContracts[msg.sender]);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction setReferrer (address _referrer)\r\n\t\t{\r\n\t\t\tif (referred[msg.sender] == 0x0 && !cantSetReferrer[msg.sender])\r\n\t\t\t{\r\n\t\t\t\treferred[msg.sender] = _referrer;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\tfunction Registrar () {\r\n\t\towner = msg.sender;\r\n\t\tdonationMultiplier = 100;\r\n\t}\r\n\r\n\t// allows the current owner to assign a new owner\r\n\tfunction changeOwner (address newOwner) onlyBy (owner) \r\n\t\t{\r\n\t\t\towner = newOwner;\r\n\t\t}\r\n\r\n\tfunction issuePatrons (address _to, uint256 _amount) approvedContractsOnly\r\n\t\t{\r\n\t\t\tbalances[_to] += _amount;\r\n\t\t\t_totalPatronSupply += _amount;\r\n\t\t}\r\n\r\n\tfunction setDonationReward (uint256 _multiplier) onlyBy (owner)\r\n\t\t{\r\n\t\t\tdonationMultiplier = _multiplier;\r\n\t\t}\r\n\r\n\tfunction donate () payable\r\n\t\t{\r\n\t\t\tbalances[msg.sender] += msg.value * donationMultiplier;\r\n\t\t\t_totalPatronSupply += msg.value * donationMultiplier;\r\n\t\t}\r\n\r\n\tfunction registerArtwork (address _contract, bytes32 _SHA256Hash, uint256 _editionSize, string _title, string _fileLink, uint256 _ownerCommission, address _artist, bool _indexed, bool _ouroboros) registerdFactoriesOnly\r\n\t\t{\r\n\t\tif (SHA256HashRegister[_SHA256Hash] == 0x0) {\r\n\t\t   \tSHA256HashRegister[_SHA256Hash] = _contract;\r\n\t\t\tapprovedContracts[_contract] = true;\r\n\t\t\tcantSetReferrer[_artist] = true;\r\n\t\t\tartworkRegister[_contract].SHA256Hash = _SHA256Hash;\r\n\t\t\tartworkRegister[_contract].editionSize = _editionSize;\r\n\t\t\tartworkRegister[_contract].title = _title;\r\n\t\t\tartworkRegister[_contract].fileLink = _fileLink;\r\n\t\t\tartworkRegister[_contract].ownerCommission = _ownerCommission;\r\n\t\t\tartworkRegister[_contract].artist = _artist;\r\n\t\t\tartworkRegister[_contract].factory = msg.sender;\r\n\t\t\tartworkRegister[_contract].isIndexed = _indexed;\r\n\t\t\tartworkRegister[_contract].isOuroboros = _ouroboros;\r\n\t\t\tartworkIndex[artworkCount] = _contract;\r\n\t\t\tartistsArtworks[_artist][artistsArtworkCount[_artist]] = _contract;\r\n\t\t\tartistsArtworkCount[_artist]++;\r\n\t\t\tartworksFactory[_contract] = msg.sender;\r\n\t\t\tNewArtwork (_contract, _SHA256Hash, _editionSize, _title, _fileLink, _ownerCommission, _artist, _indexed, _ouroboros);\r\n\t\t\tartworkCount++;\r\n\t\t\t}\r\n\t\t\telse {throw;}\r\n\t\t}\r\n\r\n\tfunction isSHA256HashRegistered (bytes32 _SHA256Hash) returns (bool _registered)\r\n\t\t{\r\n\t\tif (SHA256HashRegister[_SHA256Hash] == 0x0)\r\n\t\t\t{return false;}\r\n\t\telse {return true;}\r\n\t\t}\r\n\r\n\r\n\tfunction approveFactoryContract (address _factoryContractAddress, bool _approved) onlyBy (owner)\r\n\t\t{\r\n\t\t\tapprovedFactories[_factoryContractAddress] = _approved;\r\n\t\t}\r\n\r\n\tfunction isFactoryApproved (address _factory) returns (bool _approved)\r\n\t\t{\r\n\t\t\tif (approvedFactories[_factory])\r\n\t\t\t{\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse {return false;}\r\n\t\t}\r\n\r\n\tfunction withdrawFunds (uint256 _ETHAmount, address _to) onlyBy (owner)\r\n\t\t{\r\n\t\t\tif (this.balance >= _ETHAmount)\r\n\t\t\t{\r\n\t\t\t\t_to.transfer(_ETHAmount);\r\n\t\t\t}\r\n\t\t\telse {throw;}\r\n\t\t}\r\n\r\n\tfunction transferByAddress (address _contract, uint256 _amount, address _to) onlyBy (owner) \r\n\t\t{\r\n\t\t\tInterface c = Interface(_contract);\r\n\t\t\tc.transfer(_to, _amount);\r\n\t\t}\r\n\r\n\tfunction transferIndexedByAddress (address _contract, uint256 _index, address _to) onlyBy (owner)\r\n\t\t{\r\n\t\t\tInterface c = Interface(_contract);\r\n\t\t\tc.transferIndexed(_to, _index);\r\n\t\t}\r\n\r\n\tfunction approveByAddress (address _contract, address _spender, uint256 _amount) onlyBy (owner)\r\n\t\t{\r\n\t\t\tInterface c = Interface(_contract);\r\n\t\t\tc.approve(_spender, _amount);\r\n\t\t}\t\r\n\r\n\tfunction approveIndexedByAddress (address _contract, address _spender, uint256 _index) onlyBy (owner)\r\n\t\t{\r\n\t\t\tInterface c = Interface(_contract);\r\n\t\t\tc.approveIndexed(_spender, _index);\r\n\t\t}\r\n\r\n\tfunction burnByAddress (address _contract, uint256 _amount) onlyBy (owner)\r\n\t\t{\r\n\t\t\tInterface c = Interface(_contract);\r\n\t\t\tc.burn(_amount);\r\n\t\t}\r\n\r\n\tfunction burnFromByAddress (address _contract, uint256 _amount, address _from) onlyBy (owner)\r\n\t\t{\r\n\t\t\tInterface c = Interface(_contract);\r\n\t\t\tc.burnFrom (_from, _amount);\r\n\t\t}\r\n\r\n\tfunction burnIndexedByAddress (address _contract, uint256 _index) onlyBy (owner)\r\n\t\t{\r\n\t\t\tInterface c = Interface(_contract);\r\n\t\t\tc.burnIndexed(_index);\r\n\t\t}\r\n\r\n\tfunction burnIndexedFromByAddress (address _contract, address _from, uint256 _index) onlyBy (owner)\r\n\t\t{\r\n\t\t\tInterface c = Interface(_contract);\r\n\t\t\tc.burnIndexedFrom(_from, _index);\r\n\t\t}\r\n\r\n\tfunction offerPieceForSaleByAddress (address _contract, uint256 _price) onlyBy (owner)\r\n\t\t{\r\n\t\t\tInterface c = Interface(_contract);\r\n\t\t\tc.offerPieceForSale(_price);\r\n\t\t}\r\n\r\n\tfunction fillBidByAddress (address _contract) onlyBy (owner)\t\t\t\t\t\t\t// Fill a bid with an unindexed piece owned by the registrar\r\n\t\t{\r\n\t\t\tInterface c = Interface(_contract);\r\n\t\t\tc.fillBid();\r\n\t\t}\r\n\r\n\tfunction cancelSaleByAddress (address _contract) onlyBy (owner)\t\t\t\t\t\t\t// Cancel the sale of an unindexed piece owned by the registrar\r\n\t\t{\r\n\t\t\tInterface c = Interface(_contract);\r\n\t\t\tc.cancelSale();\r\n\t\t}\r\n\r\n\tfunction offerIndexedPieceForSaleByAddress (address _contract, uint256 _index, uint256 _price) onlyBy (owner)\t\t\t// Sell an indexed piece owned by the registrar.\r\n\t\t{\r\n\t\t\tInterface c = Interface(_contract);\r\n\t\t\tc.offerIndexedPieceForSale(_index, _price);\r\n\t\t}\r\n\r\n\tfunction fillIndexedBidByAddress (address _contract, uint256 _index) onlyBy (owner)\t\t\t\t\t// Fill a bid with an indexed piece owned by the registrar\r\n\t\t{\r\n\t\t\tInterface c = Interface(_contract);\r\n\t\t\tc.fillIndexedBid(_index);\r\n\t\t}\r\n\r\n\tfunction cancelIndexedSaleByAddress (address _contract) onlyBy (owner)\t\t\t\t\t\t\t\t// Cancel the sale of an unindexed piece owned by the registrar\r\n\t\t{\r\n\t\t\tInterface c = Interface(_contract);\r\n\t\t\tc.cancelIndexedSale();\r\n\t\t}\r\n\t\r\n\tfunction() payable\r\n\t\t{\r\n\t\t\tif (!approvedContracts[msg.sender]) {throw;}\t\t\t\t\t\t// use donate () for donations and you will get donationMultiplier * your donation in Patron tokens. Yay!\r\n\t\t}\r\n\r\n\t// Semi uinversal call function for unforseen future Ethart network contract types and use cases. String format: \"<functionName>(address,address,uint256,uint256,bool,string,bytes32)\"\r\n\tfunction callContractFunctionByAddress(address _contract, string functionNameAndTypes, address _address1, address _address2, uint256 _value1, uint256 _value2, bool _bool, string _string, bytes32 _bytes32) onlyBy (owner)\r\n\t{\r\n\t\tif(!_contract.call(bytes4(sha3(functionNameAndTypes)),_address1, _address2, _value1, _value2, _bool, _string, _bytes32)) {throw;}\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"offerIndexedPieceForSaleByAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issuePatrons\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"isFactoryApproved\",\"outputs\":[{\"name\":\"_approved\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferByAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferIndexedByAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalPatronSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_SHA256Hash\",\"type\":\"bytes32\"},{\"name\":\"_editionSize\",\"type\":\"uint256\"},{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_fileLink\",\"type\":\"string\"},{\"name\":\"_ownerCommission\",\"type\":\"uint256\"},{\"name\":\"_artist\",\"type\":\"address\"},{\"name\":\"_indexed\",\"type\":\"bool\"},{\"name\":\"_ouroboros\",\"type\":\"bool\"}],\"name\":\"registerArtwork\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"burnFromByAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artistsArtworks\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedFactories\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"cancelSaleByAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_SHA256Hash\",\"type\":\"bytes32\"}],\"name\":\"isSHA256HashRegistered\",\"outputs\":[{\"name\":\"_registered\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"burnIndexedFromByAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"cancelIndexedSaleByAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnByAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cantSetReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"fillBidByAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ETHAmount\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"fillIndexedBidByAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"burnIndexedByAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"approveIndexedByAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"setDonationReward\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"artworkRegister\",\"outputs\":[{\"name\":\"SHA256Hash\",\"type\":\"bytes32\"},{\"name\":\"editionSize\",\"type\":\"uint256\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"fileLink\",\"type\":\"string\"},{\"name\":\"ownerCommission\",\"type\":\"uint256\"},{\"name\":\"artist\",\"type\":\"address\"},{\"name\":\"factory\",\"type\":\"address\"},{\"name\":\"isIndexed\",\"type\":\"bool\"},{\"name\":\"isOuroboros\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"SHA256HashRegister\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referred\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworkIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"setReferrer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"donationMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_factoryContractAddress\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"approveFactoryContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"functionNameAndTypes\",\"type\":\"string\"},{\"name\":\"_address1\",\"type\":\"address\"},{\"name\":\"_address2\",\"type\":\"address\"},{\"name\":\"_value1\",\"type\":\"uint256\"},{\"name\":\"_value2\",\"type\":\"uint256\"},{\"name\":\"_bool\",\"type\":\"bool\"},{\"name\":\"_string\",\"type\":\"string\"},{\"name\":\"_bytes32\",\"type\":\"bytes32\"}],\"name\":\"callContractFunctionByAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveByAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"offerPieceForSaleByAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"artistsArtworkCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"artworksFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_SHA256Hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_editionSize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_title\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_fileLink\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_ownerCommission\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_artist\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_indexed\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_ouroboros\",\"type\":\"bool\"}],\"name\":\"NewArtwork\",\"type\":\"event\"}]","ContractName":"Registrar","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://11e46be2acfcffef48158dabe9b160ce0065a475fd540f8061944341757a2669"}]}