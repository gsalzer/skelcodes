{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.11;\r\n\r\ncontract Fundraiser {\r\n\r\n  /* State */\r\n\r\n  address signer1;\r\n  address signer2;\r\n  bool public accept; // are contributions accepted\r\n\r\n  enum Action {\r\n    None,\r\n    Withdraw,\r\n    Close,\r\n    Open\r\n  }\r\n  \r\n  struct Proposal {\r\n    Action action;\r\n    address destination;\r\n    uint256 amount;\r\n  }\r\n  \r\n  Proposal signer1_proposal;\r\n  Proposal signer2_proposal;\r\n\r\n  /* Constructor, choose signers. Those cannot be changed */\r\n  function Fundraiser(address init_signer1,\r\n                      address init_signer2) {\r\n    accept = false; // must call Open first\r\n    signer1 = init_signer1;\r\n    signer2 = init_signer2;\r\n    signer1_proposal.action = Action.None;\r\n    signer2_proposal.action = Action.None;\r\n  }\r\n\r\n  /* no default action, in case people forget to send their data\r\n     or in case they use a buggy app that forgets to send the data */\r\n  function () {\r\n    throw;\r\n  }\r\n\r\n  /* Entry point for contributors */\r\n\r\n  event Deposit (\r\n                 bytes20 tezos_pk_hash,\r\n                 uint amount\r\n                 );\r\n\r\n  function Contribute(bytes24 tezos_pkh_and_chksum) payable {\r\n    // Don't accept contributions if fundraiser closed\r\n    if (!accept) { throw; }\r\n    bytes20 tezos_pk_hash = bytes20(tezos_pkh_and_chksum);\r\n    /* shift left 20 bytes to extract checksum */\r\n    bytes4 expected_chksum = bytes4(tezos_pkh_and_chksum << 160);\r\n    bytes4 chksum = bytes4(sha256(sha256(tezos_pk_hash)));\r\n    /* revert transaction if the checksum cannot be verified */\r\n    if (chksum != expected_chksum) { throw; }\r\n    Deposit(tezos_pk_hash, msg.value);\r\n  }\r\n\r\n  /* Entry points for signers */\r\n\r\n  function Withdraw(address proposed_destination,\r\n                    uint256 proposed_amount) {\r\n    /* check amount */\r\n    if (proposed_amount > this.balance) { throw; }\r\n    /* update action */\r\n    if (msg.sender == signer1) {\r\n      signer1_proposal.action = Action.Withdraw;\r\n      signer1_proposal.destination = proposed_destination;\r\n      signer1_proposal.amount = proposed_amount;\r\n    } else if (msg.sender == signer2) {\r\n      signer2_proposal.action = Action.Withdraw;\r\n      signer2_proposal.destination = proposed_destination;\r\n      signer2_proposal.amount = proposed_amount;\r\n    } else { throw; }\r\n    /* perform action */\r\n    MaybePerformWithdraw();\r\n  }\r\n\r\n  function Close(address proposed_destination) {\r\n    /* update action */\r\n    if (msg.sender == signer1) {\r\n      signer1_proposal.action = Action.Close;\r\n      signer1_proposal.destination = proposed_destination;\r\n    } else if (msg.sender == signer2) {\r\n      signer2_proposal.action = Action.Close;\r\n      signer2_proposal.destination = proposed_destination;\r\n    } else { throw; }\r\n    /* perform action */\r\n    MaybePerformClose();\r\n  }\r\n\r\n  function Open() {\r\n    /* update action */\r\n    if (msg.sender == signer1) {\r\n      signer1_proposal.action = Action.Open;\r\n    } else if (msg.sender == signer2) {\r\n      signer2_proposal.action = Action.Open;\r\n    } else { throw; }\r\n    /* perform action */\r\n    MaybePerformOpen();\r\n  }\r\n\r\n  function MaybePerformWithdraw() internal {\r\n    if (signer1_proposal.action == Action.Withdraw\r\n        && signer2_proposal.action == Action.Withdraw\r\n        && signer1_proposal.amount == signer2_proposal.amount\r\n        && signer1_proposal.destination == signer2_proposal.destination) {\r\n      signer1_proposal.action = Action.None;\r\n      signer2_proposal.action = Action.None;\r\n      signer1_proposal.destination.transfer(signer1_proposal.amount);\r\n    }\r\n  }\r\n\r\n  function MaybePerformClose() internal {\r\n    if (signer1_proposal.action == Action.Close\r\n        && signer2_proposal.action == Action.Close\r\n        && signer1_proposal.destination == signer2_proposal.destination) {\r\n      accept = false;\r\n      signer1_proposal.destination.transfer(this.balance);\r\n    }\r\n  }\r\n\r\n  function MaybePerformOpen() internal {\r\n    if (signer1_proposal.action == Action.Open\r\n        && signer2_proposal.action == Action.Open) {\r\n      accept = true;\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"accept\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Open\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposed_destination\",\"type\":\"address\"}],\"name\":\"Close\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposed_destination\",\"type\":\"address\"},{\"name\":\"proposed_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tezos_pkh_and_chksum\",\"type\":\"bytes24\"}],\"name\":\"Contribute\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"inputs\":[{\"name\":\"init_signer1\",\"type\":\"address\"},{\"name\":\"init_signer2\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tezos_pk_hash\",\"type\":\"bytes20\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"}]","ContractName":"Fundraiser","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000067e86364d3e1aab1c678c4b7e6b7c980919c11d80000000000000000000000005f44ea934e8db754ebbb8e219739bec06499a3b3","Library":"","SwarmSource":"bzzr://d250ab093395cdc915b1714145d9856225fb19ce130dfa65715848ca26429b5c"}]}