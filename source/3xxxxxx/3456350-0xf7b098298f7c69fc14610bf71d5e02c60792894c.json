{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\n\r\ncontract SafeMath {\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) throw;\r\n  }\r\n\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract StandardTokenProtocol {\r\n\r\n    function totalSupply() constant returns (uint256 totalSupply) {}\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n    function transfer(address _recipient, uint256 _value) returns (bool success) {}\r\n    function transferFrom(address _from, address _recipient, uint256 _value) returns (bool success) {}\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _recipient, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\n\r\ncontract StandardToken is StandardTokenProtocol {\r\n\r\n    modifier when_can_transfer(address _from, uint256 _value) {\r\n        if (balances[_from] >= _value) _;\r\n    }\r\n\r\n    modifier when_can_receive(address _recipient, uint256 _value) {\r\n        if (balances[_recipient] + _value > balances[_recipient]) _;\r\n    }\r\n\r\n    modifier when_is_allowed(address _from, address _delegate, uint256 _value) {\r\n        if (allowed[_from][_delegate] >= _value) _;\r\n    }\r\n\r\n    function transfer(address _recipient, uint256 _value)\r\n        when_can_transfer(msg.sender, _value)\r\n        when_can_receive(_recipient, _value)\r\n        returns (bool o_success)\r\n    {\r\n        balances[msg.sender] -= _value;\r\n        balances[_recipient] += _value;\r\n        Transfer(msg.sender, _recipient, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _recipient, uint256 _value)\r\n        when_can_transfer(_from, _value)\r\n        when_can_receive(_recipient, _value)\r\n        when_is_allowed(_from, msg.sender, _value)\r\n        returns (bool o_success)\r\n    {\r\n        allowed[_from][msg.sender] -= _value;\r\n        balances[_from] -= _value;\r\n        balances[_recipient] += _value;\r\n        Transfer(_from, _recipient, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool o_success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 o_remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n\r\n}\r\n\r\ncontract GUPToken is StandardToken {\r\n\r\n\t//FIELDS\r\n\tstring public name = \"Guppy\";\r\n    string public symbol = \"GUP\";\r\n    uint public decimals = 3;\r\n\r\n\t//CONSTANTS\r\n\tuint public constant LOCKOUT_PERIOD = 1 years; //time after end date that illiquid GUP can be transferred\r\n\r\n\t//ASSIGNED IN INITIALIZATION\r\n\tuint public endMintingTime; //Timestamp after which no more tokens can be created\r\n\taddress public minter; //address of the account which may mint new tokens\r\n\r\n\tmapping (address => uint) public illiquidBalance; //Balance of 'Frozen funds'\r\n\r\n\t//MODIFIERS\r\n\t//Can only be called by contribution contract.\r\n\tmodifier only_minter {\r\n\t\tif (msg.sender != minter) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\t// Can only be called if illiquid tokens may be transformed into liquid.\r\n\t// This happens when `LOCKOUT_PERIOD` of time passes after `endMintingTime`.\r\n\tmodifier when_thawable {\r\n\t\tif (now < endMintingTime + LOCKOUT_PERIOD) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\t// Can only be called if (liquid) tokens may be transferred. Happens\r\n\t// immediately after `endMintingTime`.\r\n\tmodifier when_transferable {\r\n\t\tif (now < endMintingTime) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\t// Can only be called if the `crowdfunder` is allowed to mint tokens. Any\r\n\t// time before `endMintingTime`.\r\n\tmodifier when_mintable {\r\n\t\tif (now >= endMintingTime) throw;\r\n\t\t_;\r\n\t}\r\n\r\n\t// Initialization contract assigns address of crowdfund contract and end time.\r\n\tfunction GUPToken(address _minter, uint _endMintingTime) {\r\n\t\tendMintingTime = _endMintingTime;\r\n\t\tminter = _minter;\r\n\t}\r\n\r\n\t// Create new tokens when called by the crowdfund contract.\r\n\t// Only callable before the end time.\r\n\tfunction createToken(address _recipient, uint _value)\r\n\t\twhen_mintable\r\n\t\tonly_minter\r\n\t\treturns (bool o_success)\r\n\t{\r\n\t\tbalances[_recipient] += _value;\r\n\t\ttotalSupply += _value;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Create an illiquidBalance which cannot be traded until end of lockout period.\r\n\t// Can only be called by crowdfund contract before the end time.\r\n\tfunction createIlliquidToken(address _recipient, uint _value)\r\n\t\twhen_mintable\r\n\t\tonly_minter\r\n\t\treturns (bool o_success)\r\n\t{\r\n\t\tilliquidBalance[_recipient] += _value;\r\n\t\ttotalSupply += _value;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Make sender's illiquid balance liquid when called after lockout period.\r\n\tfunction makeLiquid()\r\n\t\twhen_thawable\r\n\t{\r\n\t\tbalances[msg.sender] += illiquidBalance[msg.sender];\r\n\t\tilliquidBalance[msg.sender] = 0;\r\n\t}\r\n\r\n\t// Transfer amount of tokens from sender account to recipient.\r\n\t// Only callable after the crowd fund end date.\r\n\tfunction transfer(address _recipient, uint _amount)\r\n\t\twhen_transferable\r\n\t\treturns (bool o_success)\r\n\t{\r\n\t\treturn super.transfer(_recipient, _amount);\r\n\t}\r\n\r\n\t// Transfer amount of tokens from a specified address to a recipient.\r\n\t// Only callable after the crowd fund end date.\r\n\tfunction transferFrom(address _from, address _recipient, uint _amount)\r\n\t\twhen_transferable\r\n\t\treturns (bool o_success)\r\n\t{\r\n\t\treturn super.transferFrom(_from, _recipient, _amount);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"o_success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"createIlliquidToken\",\"outputs\":[{\"name\":\"o_success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"o_success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endMintingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"createToken\",\"outputs\":[{\"name\":\"o_success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"illiquidBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"o_success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCKOUT_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"o_remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"makeLiquid\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"},{\"name\":\"_endMintingTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GUPToken","CompilerVersion":"v0.4.9+commit.364da425","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e05cedd2838e4e1d99b539d8c768d6ef2a10f729000000000000000000000000000000000000000000000000000000005905DFD0","Library":"","SwarmSource":"bzzr://3dcde1c9f44afbc617c4f4a26a4a97b14f242608e5850358b7d05f9b6081a779"}]}