{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.8;\r\n\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\ncontract token {\r\n    /* Public variables of the token */\r\n    string public standard = 'AdsCash 0.1';\r\n    string public name;                                 //Name of the coin\r\n    string public symbol;                               //Symbol of the coin\r\n    uint8  public decimals;                              // No of decimal places (to use no 128, you have to write 12800)\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function token(\r\n        string tokenName,\r\n        uint8 decimalUnits,\r\n        string tokenSymbol\r\n        ) {\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\r\n    }\r\n\r\n    \r\n\r\n    /* This unnamed function is called whenever someone tries to send ether to it */\r\n    function () {\r\n        throw;     // Prevents accidental sending of ether\r\n    }\r\n}\r\n\r\n contract ProgressiveToken is owned, token {\r\n    uint256 public constant totalSupply=30000000000;          // the amount of total coins avilable.\r\n    uint256 public reward;                                    // reward given to miner.\r\n    uint256 internal coinBirthTime=now;                       // the time when contract is created.\r\n    uint256 public currentSupply;                           // the count of coins currently avilable.\r\n    uint256 internal initialSupply;                           // initial number of tokens.\r\n    uint256 public sellPrice;                                 // price of coin wrt ether at time of selling coins\r\n    uint256 public buyPrice;                                  // price of coin wrt ether at time of buying coins\r\n    bytes32 internal currentChallenge;                        // The coin starts with a challenge\r\n    uint public timeOfLastProof;                              // Variable to keep track of when rewards were given\r\n    uint internal difficulty = 10**32;                          // Difficulty starts reasonably low\r\n    \r\n    mapping  (uint256 => uint256) rewardArray;                  //create an array with all reward values.\r\n   \r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function ProgressiveToken(\r\n        string tokenName,\r\n        uint8 decimalUnits,\r\n        string tokenSymbol,\r\n        uint256 initialSupply,\r\n        uint256 sellPrice,\r\n        uint256 buyPrice,\r\n        address centralMinter                                  \r\n    ) token ( tokenName, decimalUnits, tokenSymbol) {\r\n        if(centralMinter != 0 ) owner = centralMinter;    // Sets the owner as specified (if centralMinter is not specified the owner is \r\n                                                          // msg.sender)\r\n        balanceOf[owner] = initialSupply;                // Give the owner all initial tokens\r\n\ttimeOfLastProof = now;                           //initial time at which reward is given is the time when contract is created.\r\n\tsetPrices(sellPrice,buyPrice);                   // sets sell and buy price.\r\n        currentSupply=initialSupply;                     //updating current supply.\r\n        reward=22380;                         //initialising reward with initial reward as per calculation.\r\n        for(uint256 i=0;i<12;i++){                       // storing rewardValues in an array.\r\n            rewardArray[i]=reward;\r\n            reward=reward/2;\r\n        }\r\n        reward=getReward(now);\r\n    }\r\n    \r\n    \r\n    \r\n  \r\n   /* Calculates value of reward at given time */\r\n    function getReward (uint currentTime) constant returns (uint256) {\r\n        uint elapsedTimeInSeconds = currentTime - coinBirthTime;         //calculating timealpsed after generation of coin in seconds.\r\n        uint elapsedTimeinMonths= elapsedTimeInSeconds/(30*24*60*60);    //calculating timealpsed after generation of coin\r\n        uint period=elapsedTimeinMonths/3;                               // Period of 3 months elapsed after coin was generated.\r\n        return rewardArray[period];                                      // returning current reward as per period of 3 monts elapsed.\r\n    }\r\n\r\n    function updateCurrentSupply() private {\r\n        currentSupply+=reward;\r\n    }\r\n\r\n   \r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) {\r\n        if (balanceOf[msg.sender] < _value) throw;                          // Check if the sender has enough balance\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;                // Check for overflows\r\n        reward=getReward(now);                                              //Calculate current Reward.\r\n        if(currentSupply + reward > totalSupply ) throw;                    //check for totalSupply.\r\n        balanceOf[msg.sender] -= _value;                                    // Subtract from the sender\r\n        balanceOf[_to] += _value;                                           // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);                                  // Notify anyone listening that this transfer took  \r\n        updateCurrentSupply();\r\n        balanceOf[block.coinbase] += reward;\r\n    }\r\n\r\n\r\n\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner {\r\n            if(currentSupply + mintedAmount> totalSupply) throw;             // check for total supply.\r\n            currentSupply+=(mintedAmount);                                   //updating currentSupply.\r\n            balanceOf[target] += mintedAmount;                               //adding balance to recipient.\r\n            Transfer(0, owner, mintedAmount);\r\n            Transfer(owner, target, mintedAmount);\r\n    }\r\n\r\n\r\n\r\n\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\r\n        sellPrice = newSellPrice;          //initialising sellPrice so that sell price becomes value of coins in Wei\r\n        buyPrice = newBuyPrice;            //initialising buyPrice so that buy price becomes value of coins in Wei\r\n    }\r\n    \r\n   function buy() payable returns (uint amount){\r\n        amount = msg.value / buyPrice;                     // calculates the amount\r\n        if (balanceOf[this] < amount) throw;               // checks if it has enough to sell\r\n        reward=getReward(now);                             //calculating current reward.\r\n        if(currentSupply + reward > totalSupply ) throw;   // check for totalSupply\r\n        balanceOf[msg.sender] += amount;                   // adds the amount to buyer's balance\r\n        balanceOf[this] -= amount;                         // subtracts amount from seller's balance\r\n        balanceOf[block.coinbase]+=reward;                 // rewards the miner\r\n        updateCurrentSupply();                             //update the current supply.\r\n        Transfer(this, msg.sender, amount);                // execute an event reflecting the change\r\n        return amount;                                     // ends function and returns\r\n    }\r\n\r\n    function sell(uint amount) returns (uint revenue){\r\n        if (balanceOf[msg.sender] < amount ) throw;        // checks if the sender has enough to sell\r\n        reward=getReward(now);                             //calculating current reward.\r\n        if(currentSupply + reward > totalSupply ) throw;   // check for totalSupply.\r\n        balanceOf[this] += amount;                         // adds the amount to owner's balance\r\n        balanceOf[msg.sender] -= amount;                   // subtracts the amount from seller's balance\r\n        balanceOf[block.coinbase]+=reward;                 // rewarding the miner.\r\n        updateCurrentSupply();                             //updating currentSupply.\r\n        revenue = amount * sellPrice;                      // amount (in wei) corresponsing to no of coins.\r\n        if (!msg.sender.send(revenue)) {                   // sends ether to the seller: it's important\r\n            throw;                                         // to do this last to prevent recursion attacks\r\n        } else {\r\n            Transfer(msg.sender, this, amount);            // executes an event reflecting on the change\r\n            return revenue;                                // ends function and returns\r\n        }\r\n    }\r\n\r\n\r\n\r\n    \r\n    \r\n    function proofOfWork(uint nonce){\r\n        bytes8 n = bytes8(sha3(nonce, currentChallenge));    // Generate a random hash based on input\r\n        if (n < bytes8(difficulty)) throw;                   // Check if it's under the difficulty\r\n    \r\n        uint timeSinceLastProof = (now - timeOfLastProof);   // Calculate time since last reward was given\r\n        if (timeSinceLastProof <  5 seconds) throw;          // Rewards cannot be given too quickly\r\n        reward=getReward(now);                               //Calculate reward.\r\n        if(currentSupply + reward > totalSupply ) throw;     //Check for totalSupply\r\n        updateCurrentSupply();                               //update currentSupply\r\n        balanceOf[msg.sender] += reward;                      //rewarding the miner.\r\n        difficulty = difficulty * 12 seconds / timeSinceLastProof + 1;  // Adjusts the difficulty\r\n        timeOfLastProof = now;                                // Reset the counter\r\n        currentChallenge = sha3(nonce, currentChallenge, block.blockhash(block.number-1));  // Save a hash that will be used as the next proof\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"proofOfWork\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeOfLastProof\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"revenue\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"name\":\"centralMinter\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ProgressiveToken","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000023c3460000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b20000000000000000000000000000f8429c70905183500feda1db30152db1573d41030000000000000000000000000000000000000000000000000000000000000007414453434153480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034144530000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://87c0ccb8d7135aca1993a6ec2a703ef759012db54303bb394d229d0004b1de15"}]}