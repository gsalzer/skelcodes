{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n/*\r\n    Meme Network Token contract source code.\r\n    Copyright (C) 2017 whodknee\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\ncontract MemeNetworkToken {\r\n    // Token information.\r\n    string public constant name = \"Meme Network Token\";\r\n    string public constant symbol = \"MNT\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 public constant tokenCreationRate = 10;\r\n    uint256 public constant tokenCreationCap = 100000 ether * tokenCreationRate;\r\n    uint256 totalTokens;\r\n\r\n    address public devAddress;\r\n\r\n    // Ending block.\r\n    uint256 public endingBlock;\r\n\r\n    // Funding state.\r\n    bool public funding = true;\r\n    \r\n    // Array of balances.\r\n    mapping (address => uint256) balances;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function MemeNetworkToken(\r\n        address _devAddress,\r\n        uint256 _endingBlock\r\n        ) {\r\n        devAddress = _devAddress;\r\n        endingBlock = _endingBlock;\r\n    }\r\n\r\n    function balanceOf(address _owner) external constant returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    function totalSupply() external constant returns (uint256) {\r\n        return totalTokens;\r\n    }\r\n\r\n    // Transfer Coins\r\n    function transfer(address _to, uint256 _value) {\r\n        \r\n        //check for proper balance and overflows\r\n        if (balances[msg.sender] < _value)\r\n            throw;\r\n        if (balances[_to] + _value < balances[_to])\r\n            throw;\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    // Crowdfunding. Only if(funding).\r\n    function create() payable external {\r\n        // Abort if funding is over.\r\n        // Abort if past ending block.\r\n        // Abort if msg.value == 0\r\n        // Abort if tokens created would cause \r\n        // totalTokens to be greater than tokenCreationCap\r\n        if(!funding) throw;\r\n        if (block.number > endingBlock)\r\n            throw;\r\n        // Do not allow creating 0 or more than the cap.\r\n        if (msg.value == 0) throw;\r\n        if (msg.value > (tokenCreationCap - totalTokens) / tokenCreationRate)\r\n            throw;\r\n        \r\n        var numTokens = msg.value * tokenCreationRate;\r\n        totalTokens += numTokens;\r\n\r\n        balances[msg.sender] += numTokens;\r\n\r\n        Transfer(0, msg.sender, numTokens);      \r\n    }\r\n    function finalize() {\r\n        if (!funding) throw;\r\n        if (block.number <= endingBlock &&\r\n            totalTokens < tokenCreationCap)\r\n            throw;\r\n        \r\n        funding = false;\r\n\r\n        uint256 devTokens = tokenCreationCap - totalTokens + (tokenCreationCap / 5);\r\n        balances[devAddress] += devTokens;\r\n        Transfer(0, devAddress, devTokens);\r\n\r\n        if (!devAddress.send(this.balance)) throw;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endingBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"funding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"create\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_devAddress\",\"type\":\"address\"},{\"name\":\"_endingBlock\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MemeNetworkToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005f67d707254e53ffb6e750548b5c8725bd1ff29c00000000000000000000000000000000000000000000000000000000003d0900","Library":"","SwarmSource":"bzzr://72f59e0449a24533cf7ac18c281176d21a6f7c581a68a34154cd0877c2616242"}]}