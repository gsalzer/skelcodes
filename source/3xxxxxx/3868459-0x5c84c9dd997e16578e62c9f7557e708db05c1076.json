{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\ncontract Token {\r\n    function transfer(address _to, uint _value) returns (bool);\r\n    function balanceOf(address owner) returns(uint);\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    address newOwner;\r\n\r\n    function changeOwner(address _newOwner) onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() {\r\n        if (msg.sender == newOwner) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract TokenReceivable is Owned {\r\n    event logTokenTransfer(address token, address to, uint amount);\r\n\r\n    function claimTokens(address _token, address _to) onlyOwner returns (bool) {\r\n        Token token = Token(_token);\r\n        uint balance = token.balanceOf(this);\r\n        if (token.transfer(_to, balance)) {\r\n            logTokenTransfer(_token, _to, balance);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\ncontract FunFairSale is Owned, TokenReceivable {\r\n    uint public deadline;\r\n    uint public startTime = 123123; //set actual time here\r\n    uint public saleTime = 14 days;\r\n    uint public capAmount;\r\n\r\n    function FunFairSale() {\r\n        deadline = startTime + saleTime;\r\n    }\r\n\r\n    function setSoftCapDeadline(uint t) onlyOwner {\r\n        if (t > deadline) throw;\r\n        deadline = t;\r\n    }\r\n\r\n    function launch(uint _cap) onlyOwner {\r\n        // cap is immutable once the sale starts\r\n        if (this.balance > 0) throw;\r\n        capAmount = _cap;\r\n    }\r\n\r\n    function () payable {\r\n        if (block.timestamp < startTime || block.timestamp >= deadline) throw;\r\n        if (this.balance >= capAmount) throw;\r\n        if (this.balance + msg.value >= capAmount) {\r\n            deadline = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function withdraw() onlyOwner {\r\n        if (block.timestamp < deadline) throw;\r\n        if (!owner.call.value(this.balance)()) throw;\r\n    }\r\n\r\n    // for testing\r\n    function setStartTime(uint _startTime, uint _deadline) onlyOwner {\r\n    \tif (_deadline < _startTime) throw;\r\n        startTime = _startTime;\r\n        deadline = _deadline;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"saleTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"launch\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"setSoftCapDeadline\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"logTokenTransfer\",\"type\":\"event\"}]","ContractName":"FunFairSale","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://614ebda7ca6bafa5833856061bb6a8d614f72ba40f3d59176b3c253745aaa7e9"}]}